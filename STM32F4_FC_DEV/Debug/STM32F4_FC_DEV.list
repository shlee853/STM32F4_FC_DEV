
STM32F4_FC_DEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08004554  08004554  00014554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004688  08004688  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004688  08004688  00014688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004690  08004690  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004690  08004690  00014690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004694  08004694  00014694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004698  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000060  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009d6b  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020aa  00000000  00000000  00029e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a40  00000000  00000000  0002beb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000928  00000000  00000000  0002c8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bdd2  00000000  00000000  0002d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000856c  00000000  00000000  00048fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098486  00000000  00000000  00051556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e99dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003114  00000000  00000000  000e9a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800453c 	.word	0x0800453c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800453c 	.word	0x0800453c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800057e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000580:	4907      	ldr	r1, [pc, #28]	; (80005a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4313      	orrs	r3, r2
 8000586:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800058a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4013      	ands	r3, r2
 8000590:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000592:	68fb      	ldr	r3, [r7, #12]
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	40023800 	.word	0x40023800

080005a4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005b0:	4907      	ldr	r1, [pc, #28]	; (80005d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4013      	ands	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005c2:	68fb      	ldr	r3, [r7, #12]
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	40023800 	.word	0x40023800

080005d4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	601a      	str	r2, [r3, #0]
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	f023 0210 	bic.w	r2, r3, #16
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	431a      	orrs	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	605a      	str	r2, [r3, #4]
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800061a:	b480      	push	{r7}
 800061c:	b083      	sub	sp, #12
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	2b01      	cmp	r3, #1
 800062c:	d101      	bne.n	8000632 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800062e:	2301      	movs	r3, #1
 8000630:	e000      	b.n	8000634 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	f003 0302 	and.w	r3, r3, #2
 8000650:	2b02      	cmp	r3, #2
 8000652:	d101      	bne.n	8000658 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000654:	2301      	movs	r3, #1
 8000656:	e000      	b.n	800065a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000658:	2300      	movs	r3, #0
}
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000666:	b480      	push	{r7}
 8000668:	b083      	sub	sp, #12
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	330c      	adds	r3, #12
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
}
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000682:	b480      	push	{r7}
 8000684:	b085      	sub	sp, #20
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
 800068a:	460b      	mov	r3, r1
 800068c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	330c      	adds	r3, #12
 8000692:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	78fa      	ldrb	r2, [r7, #3]
 8000698:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b083      	sub	sp, #12
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	691a      	ldr	r2, [r3, #16]
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	4013      	ands	r3, r2
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	bf0c      	ite	eq
 80006be:	2301      	moveq	r3, #1
 80006c0:	2300      	movne	r3, #0
 80006c2:	b2db      	uxtb	r3, r3
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	683a      	ldr	r2, [r7, #0]
 80006de:	619a      	str	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	041a      	lsls	r2, r3, #16
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	619a      	str	r2, [r3, #24]
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
	...

0800070c <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b090      	sub	sp, #64	; 0x40
 8000710:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000712:	f107 0318 	add.w	r3, r7, #24
 8000716:	2228      	movs	r2, #40	; 0x28
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f002 ff78 	bl	8003610 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	463b      	mov	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
 800072e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000730:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000734:	f7ff ff36 	bl	80005a4 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff ff1b 	bl	8000574 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800073e:	2004      	movs	r0, #4
 8000740:	f7ff ff18 	bl	8000574 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000744:	23e0      	movs	r3, #224	; 0xe0
 8000746:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000748:	2302      	movs	r3, #2
 800074a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000758:	2305      	movs	r3, #5
 800075a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4825      	ldr	r0, [pc, #148]	; (80007f8 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8000762:	f001 fef7 	bl	8002554 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800076a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800076e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8000774:	2302      	movs	r3, #2
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8000778:	2301      	movs	r3, #1
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800077c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8000782:	2310      	movs	r3, #16
 8000784:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000786:	2300      	movs	r3, #0
 8000788:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800078e:	230a      	movs	r3, #10
 8000790:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8000792:	f107 0318 	add.w	r3, r7, #24
 8000796:	4619      	mov	r1, r3
 8000798:	4818      	ldr	r0, [pc, #96]	; (80007fc <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800079a:	f002 f8ac 	bl	80028f6 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800079e:	2100      	movs	r1, #0
 80007a0:	4816      	ldr	r0, [pc, #88]	; (80007fc <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80007a2:	f7ff ff27 	bl	80005f4 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80007a6:	2110      	movs	r1, #16
 80007a8:	4813      	ldr	r0, [pc, #76]	; (80007f8 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80007aa:	f7ff ff9f 	bl	80006ec <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80007ae:	2310      	movs	r3, #16
 80007b0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007b2:	2301      	movs	r3, #1
 80007b4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80007b6:	2303      	movs	r3, #3
 80007b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 80007c2:	463b      	mov	r3, r7
 80007c4:	4619      	mov	r1, r3
 80007c6:	480c      	ldr	r0, [pc, #48]	; (80007f8 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80007c8:	f001 fec4 	bl	8002554 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 80007cc:	2310      	movs	r3, #16
 80007ce:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 80007d8:	463b      	mov	r3, r7
 80007da:	4619      	mov	r1, r3
 80007dc:	4808      	ldr	r0, [pc, #32]	; (8000800 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80007de:	f001 feb9 	bl	8002554 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80007e4:	f7ff fef6 	bl	80005d4 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 80007e8:	2110      	movs	r1, #16
 80007ea:	4803      	ldr	r0, [pc, #12]	; (80007f8 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80007ec:	f7ff ff70 	bl	80006d0 <LL_GPIO_SetOutputPin>
}
 80007f0:	bf00      	nop
 80007f2:	3740      	adds	r7, #64	; 0x40
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40020000 	.word	0x40020000
 80007fc:	40013000 	.word	0x40013000
 8000800:	40020800 	.word	0x40020800

08000804 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 800080e:	bf00      	nop
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <SPI1_SendByte+0x40>)
 8000812:	f7ff ff15 	bl	8000640 <LL_SPI_IsActiveFlag_TXE>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d0f9      	beq.n	8000810 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	4619      	mov	r1, r3
 8000820:	4808      	ldr	r0, [pc, #32]	; (8000844 <SPI1_SendByte+0x40>)
 8000822:	f7ff ff2e 	bl	8000682 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8000826:	bf00      	nop
 8000828:	4806      	ldr	r0, [pc, #24]	; (8000844 <SPI1_SendByte+0x40>)
 800082a:	f7ff fef6 	bl	800061a <LL_SPI_IsActiveFlag_RXNE>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d0f9      	beq.n	8000828 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8000834:	4803      	ldr	r0, [pc, #12]	; (8000844 <SPI1_SendByte+0x40>)
 8000836:	f7ff ff16 	bl	8000666 <LL_SPI_ReceiveData8>
 800083a:	4603      	mov	r3, r0
}
 800083c:	4618      	mov	r0, r3
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40013000 	.word	0x40013000

08000848 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8000852:	2110      	movs	r1, #16
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <ICM20602_Readbyte+0x3c>)
 8000856:	f7ff ff49 	bl	80006ec <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ffce 	bl	8000804 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8000868:	2000      	movs	r0, #0
 800086a:	f7ff ffcb 	bl	8000804 <SPI1_SendByte>
 800086e:	4603      	mov	r3, r0
 8000870:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8000872:	2110      	movs	r1, #16
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <ICM20602_Readbyte+0x3c>)
 8000876:	f7ff ff2b 	bl	80006d0 <LL_GPIO_SetOutputPin>
	
	return val;
 800087a:	7bfb      	ldrb	r3, [r7, #15]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40020000 	.word	0x40020000

08000888 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	603a      	str	r2, [r7, #0]
 8000892:	71fb      	strb	r3, [r7, #7]
 8000894:	460b      	mov	r3, r1
 8000896:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 800089c:	2110      	movs	r1, #16
 800089e:	4810      	ldr	r0, [pc, #64]	; (80008e0 <ICM20602_Readbytes+0x58>)
 80008a0:	f7ff ff24 	bl	80006ec <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ffa9 	bl	8000804 <SPI1_SendByte>
	while(i < len)
 80008b2:	e009      	b.n	80008c8 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	60fa      	str	r2, [r7, #12]
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	18d4      	adds	r4, r2, r3
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff ffa0 	bl	8000804 <SPI1_SendByte>
 80008c4:	4603      	mov	r3, r0
 80008c6:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80008c8:	79bb      	ldrb	r3, [r7, #6]
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d3f1      	bcc.n	80008b4 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 80008d0:	2110      	movs	r1, #16
 80008d2:	4803      	ldr	r0, [pc, #12]	; (80008e0 <ICM20602_Readbytes+0x58>)
 80008d4:	f7ff fefc 	bl	80006d0 <LL_GPIO_SetOutputPin>
}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd90      	pop	{r4, r7, pc}
 80008e0:	40020000 	.word	0x40020000

080008e4 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	460a      	mov	r2, r1
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	4613      	mov	r3, r2
 80008f2:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80008f4:	2110      	movs	r1, #16
 80008f6:	480b      	ldr	r0, [pc, #44]	; (8000924 <ICM20602_Writebyte+0x40>)
 80008f8:	f7ff fef8 	bl	80006ec <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000902:	b2db      	uxtb	r3, r3
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff7d 	bl	8000804 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800090a:	79bb      	ldrb	r3, [r7, #6]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff79 	bl	8000804 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8000912:	2110      	movs	r1, #16
 8000914:	4803      	ldr	r0, [pc, #12]	; (8000924 <ICM20602_Writebyte+0x40>)
 8000916:	f7ff fedb 	bl	80006d0 <LL_GPIO_SetOutputPin>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40020000 	.word	0x40020000

08000928 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 800093c:	463b      	mov	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8000944:	f7ff fee2 	bl	800070c <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8000948:	4838      	ldr	r0, [pc, #224]	; (8000a2c <ICM20602_Initialization+0x104>)
 800094a:	f002 fe69 	bl	8003620 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 800094e:	2075      	movs	r0, #117	; 0x75
 8000950:	f7ff ff7a 	bl	8000848 <ICM20602_Readbyte>
 8000954:	4603      	mov	r3, r0
 8000956:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	2b12      	cmp	r3, #18
 800095c:	d105      	bne.n	800096a <ICM20602_Initialization+0x42>
	{
		printf("\r\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	4619      	mov	r1, r3
 8000962:	4833      	ldr	r0, [pc, #204]	; (8000a30 <ICM20602_Initialization+0x108>)
 8000964:	f002 fe5c 	bl	8003620 <iprintf>
 8000968:	e012      	b.n	8000990 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	2b12      	cmp	r3, #18
 800096e:	d00f      	beq.n	8000990 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8000970:	2075      	movs	r0, #117	; 0x75
 8000972:	f7ff ff69 	bl	8000848 <ICM20602_Readbyte>
 8000976:	4603      	mov	r3, r0
 8000978:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	2b12      	cmp	r3, #18
 800097e:	d007      	beq.n	8000990 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	2212      	movs	r2, #18
 8000984:	4619      	mov	r1, r3
 8000986:	482b      	ldr	r0, [pc, #172]	; (8000a34 <ICM20602_Initialization+0x10c>)
 8000988:	f002 fe4a 	bl	8003620 <iprintf>
			return 1; //ERROR
 800098c:	2301      	movs	r3, #1
 800098e:	e048      	b.n	8000a22 <ICM20602_Initialization+0xfa>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	206b      	movs	r0, #107	; 0x6b
 8000994:	f7ff ffa6 	bl	80008e4 <ICM20602_Writebyte>
	usDelay(50000);
 8000998:	f24c 3050 	movw	r0, #50000	; 0xc350
 800099c:	f000 fe34 	bl	8001608 <usDelay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 80009a0:	2101      	movs	r1, #1
 80009a2:	206b      	movs	r0, #107	; 0x6b
 80009a4:	f7ff ff9e 	bl	80008e4 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	usDelay(50000);
 80009a8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80009ac:	f000 fe2c 	bl	8001608 <usDelay>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 80009b0:	2100      	movs	r1, #0
 80009b2:	206c      	movs	r0, #108	; 0x6c
 80009b4:	f7ff ff96 	bl	80008e4 <ICM20602_Writebyte>
	usDelay(50000);
 80009b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80009bc:	f000 fe24 	bl	8001608 <usDelay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 80009c0:	2100      	movs	r1, #0
 80009c2:	2019      	movs	r0, #25
 80009c4:	f7ff ff8e 	bl	80008e4 <ICM20602_Writebyte>
	usDelay(50000);
 80009c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80009cc:	f000 fe1c 	bl	8001608 <usDelay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 80009d0:	2105      	movs	r1, #5
 80009d2:	201a      	movs	r0, #26
 80009d4:	f7ff ff86 	bl	80008e4 <ICM20602_Writebyte>
	usDelay(50000);
 80009d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80009dc:	f000 fe14 	bl	8001608 <usDelay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 80009e0:	2118      	movs	r1, #24
 80009e2:	201b      	movs	r0, #27
 80009e4:	f7ff ff7e 	bl	80008e4 <ICM20602_Writebyte>
	usDelay(50000);
 80009e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80009ec:	f000 fe0c 	bl	8001608 <usDelay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80009f0:	2118      	movs	r1, #24
 80009f2:	201c      	movs	r0, #28
 80009f4:	f7ff ff76 	bl	80008e4 <ICM20602_Writebyte>
	usDelay(50000);
 80009f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80009fc:	f000 fe04 	bl	8001608 <usDelay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8000a00:	2103      	movs	r1, #3
 8000a02:	201d      	movs	r0, #29
 8000a04:	f7ff ff6e 	bl	80008e4 <ICM20602_Writebyte>
	usDelay(50000);
 8000a08:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a0c:	f000 fdfc 	bl	8001608 <usDelay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8000a10:	2101      	movs	r1, #1
 8000a12:	2038      	movs	r0, #56	; 0x38
 8000a14:	f7ff ff66 	bl	80008e4 <ICM20602_Writebyte>
	usDelay(50000);
 8000a18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a1c:	f000 fdf4 	bl	8001608 <usDelay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	08004554 	.word	0x08004554
 8000a30:	0800456c 	.word	0x0800456c
 8000a34:	08004590 	.word	0x08004590

08000a38 <ICM20602_Get6AxisRawData>:

void ICM20602_Get6AxisRawData(short* accel, short* gyro)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
	unsigned char data[14];
	ICM20602_Readbytes(ACCEL_XOUT_H, 14, data);
 8000a42:	f107 0308 	add.w	r3, r7, #8
 8000a46:	461a      	mov	r2, r3
 8000a48:	210e      	movs	r1, #14
 8000a4a:	203b      	movs	r0, #59	; 0x3b
 8000a4c:	f7ff ff1c 	bl	8000888 <ICM20602_Readbytes>
	
	accel[0] = (data[0] << 8) | data[1];
 8000a50:	7a3b      	ldrb	r3, [r7, #8]
 8000a52:	021b      	lsls	r3, r3, #8
 8000a54:	b21a      	sxth	r2, r3
 8000a56:	7a7b      	ldrb	r3, [r7, #9]
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	b21a      	sxth	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	801a      	strh	r2, [r3, #0]
	accel[1] = (data[2] << 8) | data[3];
 8000a62:	7abb      	ldrb	r3, [r7, #10]
 8000a64:	021b      	lsls	r3, r3, #8
 8000a66:	b219      	sxth	r1, r3
 8000a68:	7afb      	ldrb	r3, [r7, #11]
 8000a6a:	b21a      	sxth	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3302      	adds	r3, #2
 8000a70:	430a      	orrs	r2, r1
 8000a72:	b212      	sxth	r2, r2
 8000a74:	801a      	strh	r2, [r3, #0]
	accel[2] = (data[4] << 8) | data[5];
 8000a76:	7b3b      	ldrb	r3, [r7, #12]
 8000a78:	021b      	lsls	r3, r3, #8
 8000a7a:	b219      	sxth	r1, r3
 8000a7c:	7b7b      	ldrb	r3, [r7, #13]
 8000a7e:	b21a      	sxth	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3304      	adds	r3, #4
 8000a84:	430a      	orrs	r2, r1
 8000a86:	b212      	sxth	r2, r2
 8000a88:	801a      	strh	r2, [r3, #0]

	gyro[0] = ((data[8] << 8) | data[9]);
 8000a8a:	7c3b      	ldrb	r3, [r7, #16]
 8000a8c:	021b      	lsls	r3, r3, #8
 8000a8e:	b21a      	sxth	r2, r3
 8000a90:	7c7b      	ldrb	r3, [r7, #17]
 8000a92:	b21b      	sxth	r3, r3
 8000a94:	4313      	orrs	r3, r2
 8000a96:	b21a      	sxth	r2, r3
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[10] << 8) | data[11]);
 8000a9c:	7cbb      	ldrb	r3, [r7, #18]
 8000a9e:	021b      	lsls	r3, r3, #8
 8000aa0:	b219      	sxth	r1, r3
 8000aa2:	7cfb      	ldrb	r3, [r7, #19]
 8000aa4:	b21a      	sxth	r2, r3
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	3302      	adds	r3, #2
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	b212      	sxth	r2, r2
 8000aae:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[12] << 8) | data[13]);
 8000ab0:	7d3b      	ldrb	r3, [r7, #20]
 8000ab2:	021b      	lsls	r3, r3, #8
 8000ab4:	b219      	sxth	r1, r3
 8000ab6:	7d7b      	ldrb	r3, [r7, #21]
 8000ab8:	b21a      	sxth	r2, r3
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	3304      	adds	r3, #4
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	b212      	sxth	r2, r2
 8000ac2:	801a      	strh	r2, [r3, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8000ad0:	2110      	movs	r1, #16
 8000ad2:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <ICM20602_DataReady+0x14>)
 8000ad4:	f7ff fde7 	bl	80006a6 <LL_GPIO_IsInputPinSet>
 8000ad8:	4603      	mov	r3, r0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40020800 	.word	0x40020800

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	db0b      	blt.n	8000b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	f003 021f 	and.w	r2, r3, #31
 8000b18:	4907      	ldr	r1, [pc, #28]	; (8000b38 <__NVIC_EnableIRQ+0x38>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	095b      	lsrs	r3, r3, #5
 8000b20:	2001      	movs	r0, #1
 8000b22:	fa00 f202 	lsl.w	r2, r0, r2
 8000b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000e100 	.word	0xe000e100

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	; (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	; (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	; 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
         );
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	; 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <LL_AHB1_GRP1_EnableClock>:
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c04:	4907      	ldr	r1, [pc, #28]	; (8000c24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4013      	ands	r3, r2
 8000c14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40023800 	.word	0x40023800

08000c28 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000c32:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <LL_SYSCFG_SetEXTISource+0x58>)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	3302      	adds	r3, #2
 8000c3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	0c1b      	lsrs	r3, r3, #16
 8000c42:	43db      	mvns	r3, r3
 8000c44:	ea02 0103 	and.w	r1, r2, r3
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	0c1b      	lsrs	r3, r3, #16
 8000c4c:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	fa93 f3a3 	rbit	r3, r3
 8000c54:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	fab3 f383 	clz	r3, r3
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	461a      	mov	r2, r3
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	fa03 f202 	lsl.w	r2, r3, r2
 8000c66:	4806      	ldr	r0, [pc, #24]	; (8000c80 <LL_SYSCFG_SetEXTISource+0x58>)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	3302      	adds	r3, #2
 8000c70:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	40013800 	.word	0x40013800

08000c84 <LL_GPIO_SetPinMode>:
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa93 f3a3 	rbit	r3, r3
 8000c9e:	613b      	str	r3, [r7, #16]
  return result;
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	fab3 f383 	clz	r3, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	2103      	movs	r1, #3
 8000cac:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	fa93 f3a3 	rbit	r3, r3
 8000cbe:	61bb      	str	r3, [r7, #24]
  return result;
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	fab3 f383 	clz	r3, r3
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd0:	431a      	orrs	r2, r3
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	601a      	str	r2, [r3, #0]
}
 8000cd6:	bf00      	nop
 8000cd8:	3724      	adds	r7, #36	; 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <LL_GPIO_SetPinPull>:
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	b089      	sub	sp, #36	; 0x24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	60f8      	str	r0, [r7, #12]
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	68da      	ldr	r2, [r3, #12]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	fa93 f3a3 	rbit	r3, r3
 8000cfc:	613b      	str	r3, [r7, #16]
  return result;
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	fab3 f383 	clz	r3, r3
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2103      	movs	r1, #3
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	401a      	ands	r2, r3
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	fa93 f3a3 	rbit	r3, r3
 8000d1c:	61bb      	str	r3, [r7, #24]
  return result;
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	fab3 f383 	clz	r3, r3
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	60da      	str	r2, [r3, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3724      	adds	r7, #36	; 0x24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_GPIO_ResetOutputPin>:
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	041a      	lsls	r2, r3, #16
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	619a      	str	r2, [r3, #24]
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000d66:	f107 0318 	add.w	r3, r7, #24
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	463b      	mov	r3, r7
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]
 8000d7e:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000d80:	2080      	movs	r0, #128	; 0x80
 8000d82:	f7ff ff39 	bl	8000bf8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d86:	2001      	movs	r0, #1
 8000d88:	f7ff ff36 	bl	8000bf8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000d8c:	2004      	movs	r0, #4
 8000d8e:	f7ff ff33 	bl	8000bf8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000d92:	2002      	movs	r0, #2
 8000d94:	f7ff ff30 	bl	8000bf8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000d98:	2110      	movs	r1, #16
 8000d9a:	482a      	ldr	r0, [pc, #168]	; (8000e44 <MX_GPIO_Init+0xe4>)
 8000d9c:	f7ff ffd0 	bl	8000d40 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000da0:	2120      	movs	r1, #32
 8000da2:	4829      	ldr	r0, [pc, #164]	; (8000e48 <MX_GPIO_Init+0xe8>)
 8000da4:	f7ff ffcc 	bl	8000d40 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000da8:	2310      	movs	r3, #16
 8000daa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dac:	2301      	movs	r3, #1
 8000dae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000db8:	2300      	movs	r3, #0
 8000dba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4820      	ldr	r0, [pc, #128]	; (8000e44 <MX_GPIO_Init+0xe4>)
 8000dc2:	f001 fbc7 	bl	8002554 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000dc6:	2320      	movs	r3, #32
 8000dc8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dda:	463b      	mov	r3, r7
 8000ddc:	4619      	mov	r1, r3
 8000dde:	481a      	ldr	r0, [pc, #104]	; (8000e48 <MX_GPIO_Init+0xe8>)
 8000de0:	f001 fbb8 	bl	8002554 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE4);
 8000de4:	4919      	ldr	r1, [pc, #100]	; (8000e4c <MX_GPIO_Init+0xec>)
 8000de6:	2002      	movs	r0, #2
 8000de8:	f7ff ff1e 	bl	8000c28 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8000dec:	2310      	movs	r3, #16
 8000dee:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000df0:	2301      	movs	r3, #1
 8000df2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000df4:	2300      	movs	r3, #0
 8000df6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000dfc:	f107 0318 	add.w	r3, r7, #24
 8000e00:	4618      	mov	r0, r3
 8000e02:	f001 fa21 	bl	8002248 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2110      	movs	r1, #16
 8000e0a:	4811      	ldr	r0, [pc, #68]	; (8000e50 <MX_GPIO_Init+0xf0>)
 8000e0c:	f7ff ff69 	bl	8000ce2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_4, LL_GPIO_MODE_INPUT);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2110      	movs	r1, #16
 8000e14:	480e      	ldr	r0, [pc, #56]	; (8000e50 <MX_GPIO_Init+0xf0>)
 8000e16:	f7ff ff35 	bl	8000c84 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e1a:	f7ff fe63 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff feb3 	bl	8000b90 <NVIC_EncodePriority>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	200a      	movs	r0, #10
 8000e30:	f7ff fe84 	bl	8000b3c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 8000e34:	200a      	movs	r0, #10
 8000e36:	f7ff fe63 	bl	8000b00 <__NVIC_EnableIRQ>

}
 8000e3a:	bf00      	nop
 8000e3c:	3720      	adds	r7, #32
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40020000 	.word	0x40020000
 8000e48:	40020400 	.word	0x40020400
 8000e4c:	000f0001 	.word	0x000f0001
 8000e50:	40020800 	.word	0x40020800

08000e54 <__NVIC_SetPriorityGrouping>:
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_GetPriorityGrouping>:
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_SetPriority>:
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db0a      	blt.n	8000ee2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	440b      	add	r3, r1
 8000edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ee0:	e00a      	b.n	8000ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4908      	ldr	r1, [pc, #32]	; (8000f08 <__NVIC_SetPriority+0x50>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EncodePriority>:
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <LL_RCC_HSE_Enable+0x1c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <LL_RCC_HSE_Enable+0x1c>)
 8000f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f82:	6013      	str	r3, [r2, #0]
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800

08000f94 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <LL_RCC_HSE_IsReady+0x24>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000fa4:	bf0c      	ite	eq
 8000fa6:	2301      	moveq	r3, #1
 8000fa8:	2300      	movne	r3, #0
 8000faa:	b2db      	uxtb	r3, r3
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800

08000fbc <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <LL_RCC_SetSysClkSource+0x24>)
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f023 0203 	bic.w	r2, r3, #3
 8000fcc:	4904      	ldr	r1, [pc, #16]	; (8000fe0 <LL_RCC_SetSysClkSource+0x24>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	608b      	str	r3, [r1, #8]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <LL_RCC_GetSysClkSource+0x18>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f003 030c 	and.w	r3, r3, #12
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800

08001000 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <LL_RCC_SetAHBPrescaler+0x24>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001010:	4904      	ldr	r1, [pc, #16]	; (8001024 <LL_RCC_SetAHBPrescaler+0x24>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4313      	orrs	r3, r2
 8001016:	608b      	str	r3, [r1, #8]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	40023800 	.word	0x40023800

08001028 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001038:	4904      	ldr	r1, [pc, #16]	; (800104c <LL_RCC_SetAPB1Prescaler+0x24>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4313      	orrs	r3, r2
 800103e:	608b      	str	r3, [r1, #8]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	40023800 	.word	0x40023800

08001050 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <LL_RCC_SetAPB2Prescaler+0x24>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001060:	4904      	ldr	r1, [pc, #16]	; (8001074 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4313      	orrs	r3, r2
 8001066:	608b      	str	r3, [r1, #8]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	40023800 	.word	0x40023800

08001078 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <LL_RCC_PLL_Enable+0x1c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <LL_RCC_PLL_Enable+0x1c>)
 8001082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40023800 	.word	0x40023800

08001098 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <LL_RCC_PLL_IsReady+0x24>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80010a8:	bf0c      	ite	eq
 80010aa:	2301      	moveq	r3, #1
 80010ac:	2300      	movne	r3, #0
 80010ae:	b2db      	uxtb	r3, r3
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800

080010c0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80010d4:	4013      	ands	r3, r2
 80010d6:	68f9      	ldr	r1, [r7, #12]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	4311      	orrs	r1, r2
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	0192      	lsls	r2, r2, #6
 80010e0:	430a      	orrs	r2, r1
 80010e2:	4908      	ldr	r1, [pc, #32]	; (8001104 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80010f0:	4904      	ldr	r1, [pc, #16]	; (8001104 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	40023800 	.word	0x40023800
 8001108:	ffbf8000 	.word	0xffbf8000

0800110c <LL_APB1_GRP1_EnableClock>:
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001118:	4907      	ldr	r1, [pc, #28]	; (8001138 <LL_APB1_GRP1_EnableClock+0x2c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4313      	orrs	r3, r2
 800111e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4013      	ands	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40023800 	.word	0x40023800

0800113c <LL_APB2_GRP1_EnableClock>:
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001146:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001148:	4907      	ldr	r1, [pc, #28]	; (8001168 <LL_APB2_GRP1_EnableClock+0x2c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4313      	orrs	r3, r2
 800114e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001152:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4013      	ands	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800115a:	68fb      	ldr	r3, [r7, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	40023800 	.word	0x40023800

0800116c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <LL_FLASH_SetLatency+0x24>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f023 0207 	bic.w	r2, r3, #7
 800117c:	4904      	ldr	r1, [pc, #16]	; (8001190 <LL_FLASH_SetLatency+0x24>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4313      	orrs	r3, r2
 8001182:	600b      	str	r3, [r1, #0]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	40023c00 	.word	0x40023c00

08001194 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <LL_FLASH_GetLatency+0x18>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0307 	and.w	r3, r3, #7
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40023c00 	.word	0x40023c00

080011b0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <LL_InitTick+0x30>)
 80011c4:	3b01      	subs	r3, #1
 80011c6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <LL_InitTick+0x30>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <LL_InitTick+0x30>)
 80011d0:	2205      	movs	r2, #5
 80011d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80011f4:	4904      	ldr	r1, [pc, #16]	; (8001208 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	600b      	str	r3, [r1, #0]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	40007000 	.word	0x40007000

0800120c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f043 0201 	orr.w	r2, r3, #1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	601a      	str	r2, [r3, #0]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a1a      	ldr	r2, [r3, #32]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	431a      	orrs	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	621a      	str	r2, [r3, #32]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a1a      	ldr	r2, [r3, #32]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	43db      	mvns	r3, r3
 8001260:	401a      	ands	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	621a      	str	r2, [r3, #32]
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001272:	b480      	push	{r7}
 8001274:	b089      	sub	sp, #36	; 0x24
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	330c      	adds	r3, #12
 800127e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	e853 3f00 	ldrex	r3, [r3]
 8001286:	60bb      	str	r3, [r7, #8]
   return(result);
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	f043 0320 	orr.w	r3, r3, #32
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	330c      	adds	r3, #12
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	61ba      	str	r2, [r7, #24]
 8001298:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800129a:	6979      	ldr	r1, [r7, #20]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	e841 2300 	strex	r3, r2, [r1]
 80012a2:	613b      	str	r3, [r7, #16]
   return(result);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1e7      	bne.n	800127a <LL_USART_EnableIT_RXNE+0x8>
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	3724      	adds	r7, #36	; 0x24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80012c4:	78fa      	ldrb	r2, [r7, #3]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	605a      	str	r2, [r3, #4]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b085      	sub	sp, #20
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	4013      	ands	r3, r2
 80012ec:	041a      	lsls	r2, r3, #16
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	43d9      	mvns	r1, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	400b      	ands	r3, r1
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	e00d      	b.n	8001336 <_write+0x2e>
	{
		LL_USART_TransmitData8(USART6, *(p+i));
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	4413      	add	r3, r2
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	4619      	mov	r1, r3
 8001324:	4808      	ldr	r0, [pc, #32]	; (8001348 <_write+0x40>)
 8001326:	f7ff ffc7 	bl	80012b8 <LL_USART_TransmitData8>
		usDelay(100);
 800132a:	2064      	movs	r0, #100	; 0x64
 800132c:	f000 f96c 	bl	8001608 <usDelay>
	for(int i=0;i<len;i++)
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3301      	adds	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	429a      	cmp	r2, r3
 800133c:	dbed      	blt.n	800131a <_write+0x12>
	}
	return len;
 800133e:	687b      	ldr	r3, [r7, #4]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40011400 	.word	0x40011400

0800134c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001350:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001354:	f7ff fef2 	bl	800113c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001358:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800135c:	f7ff fed6 	bl	800110c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001360:	2003      	movs	r0, #3
 8001362:	f7ff fd77 	bl	8000e54 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001366:	f7ff fd99 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 800136a:	4603      	mov	r3, r0
 800136c:	2200      	movs	r2, #0
 800136e:	210f      	movs	r1, #15
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fdcb 	bl	8000f0c <NVIC_EncodePriority>
 8001376:	4603      	mov	r3, r0
 8001378:	4619      	mov	r1, r3
 800137a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800137e:	f7ff fd9b 	bl	8000eb8 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001382:	f000 f8fd 	bl	8001580 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LL_InitTick(168000000, 1000000U);		//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음
 8001386:	4970      	ldr	r1, [pc, #448]	; (8001548 <main+0x1fc>)
 8001388:	4870      	ldr	r0, [pc, #448]	; (800154c <main+0x200>)
 800138a:	f7ff ff11 	bl	80011b0 <LL_InitTick>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138e:	f7ff fce7 	bl	8000d60 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001392:	f000 fe37 	bl	8002004 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8001396:	f000 fa2d 	bl	80017f4 <MX_SPI1_Init>
  MX_TIM3_Init();
 800139a:	f000 fce3 	bl	8001d64 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_EnableCounter(TIM3);
 800139e:	486c      	ldr	r0, [pc, #432]	; (8001550 <main+0x204>)
 80013a0:	f7ff ff34 	bl	800120c <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 80013a4:	2101      	movs	r1, #1
 80013a6:	486a      	ldr	r0, [pc, #424]	; (8001550 <main+0x204>)
 80013a8:	f7ff ff40 	bl	800122c <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000;
 80013ac:	4b68      	ldr	r3, [pc, #416]	; (8001550 <main+0x204>)
 80013ae:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
  usDelay(100000);
 80013b4:	4867      	ldr	r0, [pc, #412]	; (8001554 <main+0x208>)
 80013b6:	f000 f927 	bl	8001608 <usDelay>
  TIM3->PSC = 1500;
 80013ba:	4b65      	ldr	r3, [pc, #404]	; (8001550 <main+0x204>)
 80013bc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28
  usDelay(100000);
 80013c2:	4864      	ldr	r0, [pc, #400]	; (8001554 <main+0x208>)
 80013c4:	f000 f920 	bl	8001608 <usDelay>
  TIM3->PSC = 1000;
 80013c8:	4b61      	ldr	r3, [pc, #388]	; (8001550 <main+0x204>)
 80013ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ce:	629a      	str	r2, [r3, #40]	; 0x28
  usDelay(100000);
 80013d0:	4860      	ldr	r0, [pc, #384]	; (8001554 <main+0x208>)
 80013d2:	f000 f919 	bl	8001608 <usDelay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 80013d6:	2101      	movs	r1, #1
 80013d8:	485d      	ldr	r0, [pc, #372]	; (8001550 <main+0x204>)
 80013da:	f7ff ff38 	bl	800124e <LL_TIM_CC_DisableChannel>

  LL_USART_EnableIT_RXNE(USART6);	// UART6 인터럽트 활성화
 80013de:	485e      	ldr	r0, [pc, #376]	; (8001558 <main+0x20c>)
 80013e0:	f7ff ff47 	bl	8001272 <LL_USART_EnableIT_RXNE>
  ICM20602_Initialization();
 80013e4:	f7ff faa0 	bl	8000928 <ICM20602_Initialization>
  {
  //	  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
  //	  usDelay(1000000);
  //	  LL_USART_TransmitData8(USART6,'B');

	  if(flag_INT_USART6 == 1){
 80013e8:	4b5c      	ldr	r3, [pc, #368]	; (800155c <main+0x210>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d10c      	bne.n	800140a <main+0xbe>
		  flag_INT_USART6 =0;
 80013f0:	4b5a      	ldr	r3, [pc, #360]	; (800155c <main+0x210>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
		  LL_USART_TransmitData8(USART6,rxd); // 호스트로부터 수신한 데이터를 그대로 다시 보냄
 80013f6:	4b5a      	ldr	r3, [pc, #360]	; (8001560 <main+0x214>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4619      	mov	r1, r3
 80013fc:	4856      	ldr	r0, [pc, #344]	; (8001558 <main+0x20c>)
 80013fe:	f7ff ff5b 	bl	80012b8 <LL_USART_TransmitData8>
		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 8001402:	2120      	movs	r1, #32
 8001404:	4857      	ldr	r0, [pc, #348]	; (8001564 <main+0x218>)
 8001406:	f7ff ff66 	bl	80012d6 <LL_GPIO_TogglePin>
//		  printf("Hello!!!\n\r");

	   }


	  if(ICM20602_DataReady() == 1)
 800140a:	f7ff fb5f 	bl	8000acc <ICM20602_DataReady>
 800140e:	4603      	mov	r3, r0
 8001410:	2b01      	cmp	r3, #1
 8001412:	d1e9      	bne.n	80013e8 <main+0x9c>
	  {
		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 8001414:	2120      	movs	r1, #32
 8001416:	4853      	ldr	r0, [pc, #332]	; (8001564 <main+0x218>)
 8001418:	f7ff ff5d 	bl	80012d6 <LL_GPIO_TogglePin>

//		  ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
		  ICM20602_Get6AxisRawData(&ICM20602.acc_x_raw, &ICM20602.gyro_x_raw);
 800141c:	4952      	ldr	r1, [pc, #328]	; (8001568 <main+0x21c>)
 800141e:	4853      	ldr	r0, [pc, #332]	; (800156c <main+0x220>)
 8001420:	f7ff fb0a 	bl	8000a38 <ICM20602_Get6AxisRawData>

		  ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 8001424:	4b51      	ldr	r3, [pc, #324]	; (800156c <main+0x220>)
 8001426:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800142a:	ee07 3a90 	vmov	s15, r3
 800142e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001432:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001570 <main+0x224>
 8001436:	ee27 7a87 	vmul.f32	s14, s15, s14
 800143a:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001574 <main+0x228>
 800143e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001442:	4b4a      	ldr	r3, [pc, #296]	; (800156c <main+0x220>)
 8001444:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 8001448:	4b48      	ldr	r3, [pc, #288]	; (800156c <main+0x220>)
 800144a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800144e:	ee07 3a90 	vmov	s15, r3
 8001452:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001456:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001570 <main+0x224>
 800145a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800145e:	eddf 6a45 	vldr	s13, [pc, #276]	; 8001574 <main+0x228>
 8001462:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001466:	4b41      	ldr	r3, [pc, #260]	; (800156c <main+0x220>)
 8001468:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 800146c:	4b3f      	ldr	r3, [pc, #252]	; (800156c <main+0x220>)
 800146e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001570 <main+0x224>
 800147e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001482:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001574 <main+0x228>
 8001486:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148a:	4b38      	ldr	r3, [pc, #224]	; (800156c <main+0x220>)
 800148c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		  ICM20602.acc_x = ICM20602.acc_x_raw * 16.f / 32768.f;
 8001490:	4b36      	ldr	r3, [pc, #216]	; (800156c <main+0x220>)
 8001492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80014a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014a6:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001574 <main+0x228>
 80014aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ae:	4b2f      	ldr	r3, [pc, #188]	; (800156c <main+0x220>)
 80014b0:	edc3 7a04 	vstr	s15, [r3, #16]
		  ICM20602.acc_y = ICM20602.acc_y_raw * 16.f / 32768.f;
 80014b4:	4b2d      	ldr	r3, [pc, #180]	; (800156c <main+0x220>)
 80014b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014ba:	ee07 3a90 	vmov	s15, r3
 80014be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c2:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80014c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014ca:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001574 <main+0x228>
 80014ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d2:	4b26      	ldr	r3, [pc, #152]	; (800156c <main+0x220>)
 80014d4:	edc3 7a05 	vstr	s15, [r3, #20]
		  ICM20602.acc_z = ICM20602.acc_z_raw * 16.f / 32768.f;
 80014d8:	4b24      	ldr	r3, [pc, #144]	; (800156c <main+0x220>)
 80014da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80014ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014ee:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001574 <main+0x228>
 80014f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <main+0x220>)
 80014f8:	edc3 7a06 	vstr	s15, [r3, #24]

//		  printf("%d,%d,%d\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
//		  printf("%d,%d,%d\n", ICM20602.acc_x_raw, ICM20602.acc_y_raw, ICM20602.acc_z_raw);
//		  printf("%d,%d,%d\n", (int)(ICM20602.gyro_x*100), (int)(ICM20602.gyro_y*100), (int)(ICM20602.gyro_z*100));
		  printf("%d,%d,%d\n", (int)(ICM20602.acc_x*100), (int)(ICM20602.acc_y*100), (int)(ICM20602.acc_z*100));
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <main+0x220>)
 80014fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8001502:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001578 <main+0x22c>
 8001506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800150a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <main+0x220>)
 8001510:	edd3 7a05 	vldr	s15, [r3, #20]
 8001514:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001578 <main+0x22c>
 8001518:	ee67 7a87 	vmul.f32	s15, s15, s14
 800151c:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <main+0x220>)
 8001522:	edd3 7a06 	vldr	s15, [r3, #24]
 8001526:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001578 <main+0x22c>
 800152a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800152e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001532:	ee17 3a90 	vmov	r3, s15
 8001536:	ee16 2a10 	vmov	r2, s12
 800153a:	ee16 1a90 	vmov	r1, s13
 800153e:	480f      	ldr	r0, [pc, #60]	; (800157c <main+0x230>)
 8001540:	f002 f86e 	bl	8003620 <iprintf>
	  if(flag_INT_USART6 == 1){
 8001544:	e750      	b.n	80013e8 <main+0x9c>
 8001546:	bf00      	nop
 8001548:	000f4240 	.word	0x000f4240
 800154c:	0a037a00 	.word	0x0a037a00
 8001550:	40000400 	.word	0x40000400
 8001554:	000186a0 	.word	0x000186a0
 8001558:	40011400 	.word	0x40011400
 800155c:	200000ac 	.word	0x200000ac
 8001560:	200000ad 	.word	0x200000ad
 8001564:	40020400 	.word	0x40020400
 8001568:	2000008c 	.word	0x2000008c
 800156c:	20000084 	.word	0x20000084
 8001570:	44fa0000 	.word	0x44fa0000
 8001574:	47000000 	.word	0x47000000
 8001578:	42c80000 	.word	0x42c80000
 800157c:	080045bc 	.word	0x080045bc

08001580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8001584:	2005      	movs	r0, #5
 8001586:	f7ff fdf1 	bl	800116c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 800158a:	bf00      	nop
 800158c:	f7ff fe02 	bl	8001194 <LL_FLASH_GetLatency>
 8001590:	4603      	mov	r3, r0
 8001592:	2b05      	cmp	r3, #5
 8001594:	d1fa      	bne.n	800158c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001596:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800159a:	f7ff fe23 	bl	80011e4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 800159e:	f7ff fce9 	bl	8000f74 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80015a2:	bf00      	nop
 80015a4:	f7ff fcf6 	bl	8000f94 <LL_RCC_HSE_IsReady>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d1fa      	bne.n	80015a4 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 80015ae:	2300      	movs	r3, #0
 80015b0:	22a8      	movs	r2, #168	; 0xa8
 80015b2:	2104      	movs	r1, #4
 80015b4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80015b8:	f7ff fd82 	bl	80010c0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80015bc:	f7ff fd5c 	bl	8001078 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80015c0:	bf00      	nop
 80015c2:	f7ff fd69 	bl	8001098 <LL_RCC_PLL_IsReady>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d1fa      	bne.n	80015c2 <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff fd17 	bl	8001000 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 80015d2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80015d6:	f7ff fd27 	bl	8001028 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 80015da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80015de:	f7ff fd37 	bl	8001050 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80015e2:	2002      	movs	r0, #2
 80015e4:	f7ff fcea 	bl	8000fbc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80015e8:	bf00      	nop
 80015ea:	f7ff fcfb 	bl	8000fe4 <LL_RCC_GetSysClkSource>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b08      	cmp	r3, #8
 80015f2:	d1fa      	bne.n	80015ea <SystemClock_Config+0x6a>
  {

  }
  LL_Init1msTick(168000000);
 80015f4:	4803      	ldr	r0, [pc, #12]	; (8001604 <SystemClock_Config+0x84>)
 80015f6:	f001 ffc3 	bl	8003580 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 80015fa:	4802      	ldr	r0, [pc, #8]	; (8001604 <SystemClock_Config+0x84>)
 80015fc:	f001 ffce 	bl	800359c <LL_SetSystemCoreClock>
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	0a037a00 	.word	0x0a037a00

08001608 <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(unsigned int nTime)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	__IO unsigned int  tmp = SysTick->CTRL;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <usDelay+0x48>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]
	((void)tmp);
 8001616:	68fb      	ldr	r3, [r7, #12]

	SysTick->VAL = 0;
 8001618:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <usDelay+0x48>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]

	SysTick->CTRL = SysTick->CTRL | SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk; // clock source
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <usDelay+0x48>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <usDelay+0x48>)
 8001624:	f043 0307 	orr.w	r3, r3, #7
 8001628:	6013      	str	r3, [r2, #0]

	TimingDelay = nTime-1;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3b01      	subs	r3, #1
 800162e:	4a09      	ldr	r2, [pc, #36]	; (8001654 <usDelay+0x4c>)
 8001630:	6013      	str	r3, [r2, #0]

	while(TimingDelay);
 8001632:	bf00      	nop
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <usDelay+0x4c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1fb      	bne.n	8001634 <usDelay+0x2c>

	SysTick->CTRL = 0;
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <usDelay+0x48>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]

}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000e010 	.word	0xe000e010
 8001654:	200000b0 	.word	0x200000b0

08001658 <__NVIC_GetPriorityGrouping>:
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800165c:	4b04      	ldr	r3, [pc, #16]	; (8001670 <__NVIC_GetPriorityGrouping+0x18>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0a1b      	lsrs	r3, r3, #8
 8001662:	f003 0307 	and.w	r3, r3, #7
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <__NVIC_EnableIRQ>:
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	2b00      	cmp	r3, #0
 8001684:	db0b      	blt.n	800169e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	f003 021f 	and.w	r2, r3, #31
 800168c:	4907      	ldr	r1, [pc, #28]	; (80016ac <__NVIC_EnableIRQ+0x38>)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	095b      	lsrs	r3, r3, #5
 8001694:	2001      	movs	r0, #1
 8001696:	fa00 f202 	lsl.w	r2, r0, r2
 800169a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000e100 	.word	0xe000e100

080016b0 <__NVIC_SetPriority>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	6039      	str	r1, [r7, #0]
 80016ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	db0a      	blt.n	80016da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	490c      	ldr	r1, [pc, #48]	; (80016fc <__NVIC_SetPriority+0x4c>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	0112      	lsls	r2, r2, #4
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	440b      	add	r3, r1
 80016d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016d8:	e00a      	b.n	80016f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4908      	ldr	r1, [pc, #32]	; (8001700 <__NVIC_SetPriority+0x50>)
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	3b04      	subs	r3, #4
 80016e8:	0112      	lsls	r2, r2, #4
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	440b      	add	r3, r1
 80016ee:	761a      	strb	r2, [r3, #24]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000e100 	.word	0xe000e100
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <NVIC_EncodePriority>:
{
 8001704:	b480      	push	{r7}
 8001706:	b089      	sub	sp, #36	; 0x24
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f1c3 0307 	rsb	r3, r3, #7
 800171e:	2b04      	cmp	r3, #4
 8001720:	bf28      	it	cs
 8001722:	2304      	movcs	r3, #4
 8001724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3304      	adds	r3, #4
 800172a:	2b06      	cmp	r3, #6
 800172c:	d902      	bls.n	8001734 <NVIC_EncodePriority+0x30>
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3b03      	subs	r3, #3
 8001732:	e000      	b.n	8001736 <NVIC_EncodePriority+0x32>
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43da      	mvns	r2, r3
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	401a      	ands	r2, r3
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800174c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa01 f303 	lsl.w	r3, r1, r3
 8001756:	43d9      	mvns	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800175c:	4313      	orrs	r3, r2
}
 800175e:	4618      	mov	r0, r3
 8001760:	3724      	adds	r7, #36	; 0x24
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <LL_AHB1_GRP1_EnableClock>:
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001778:	4907      	ldr	r1, [pc, #28]	; (8001798 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4313      	orrs	r3, r2
 800177e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4013      	ands	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	40023800 	.word	0x40023800

0800179c <LL_APB2_GRP1_EnableClock>:
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80017a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017a8:	4907      	ldr	r1, [pc, #28]	; (80017c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80017b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4013      	ands	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	40023800 	.word	0x40023800

080017cc <LL_SPI_SetStandard>:
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f023 0210 	bic.w	r2, r3, #16
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	605a      	str	r2, [r3, #4]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b090      	sub	sp, #64	; 0x40
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80017fa:	f107 0318 	add.w	r3, r7, #24
 80017fe:	2228      	movs	r2, #40	; 0x28
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f001 ff04 	bl	8003610 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	463b      	mov	r3, r7
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]
 8001816:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001818:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800181c:	f7ff ffbe 	bl	800179c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001820:	2001      	movs	r0, #1
 8001822:	f7ff ffa3 	bl	800176c <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001826:	23e0      	movs	r3, #224	; 0xe0
 8001828:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800182a:	2302      	movs	r3, #2
 800182c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800183a:	2305      	movs	r3, #5
 800183c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183e:	463b      	mov	r3, r7
 8001840:	4619      	mov	r1, r3
 8001842:	481b      	ldr	r0, [pc, #108]	; (80018b0 <MX_SPI1_Init+0xbc>)
 8001844:	f000 fe86 	bl	8002554 <LL_GPIO_Init>

  /* SPI1 interrupt Init */
  NVIC_SetPriority(SPI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001848:	f7ff ff06 	bl	8001658 <__NVIC_GetPriorityGrouping>
 800184c:	4603      	mov	r3, r0
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff ff56 	bl	8001704 <NVIC_EncodePriority>
 8001858:	4603      	mov	r3, r0
 800185a:	4619      	mov	r1, r3
 800185c:	2023      	movs	r0, #35	; 0x23
 800185e:	f7ff ff27 	bl	80016b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI1_IRQn);
 8001862:	2023      	movs	r0, #35	; 0x23
 8001864:	f7ff ff06 	bl	8001674 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800186c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001870:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001876:	2302      	movs	r3, #2
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800187a:	2301      	movs	r3, #1
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800187e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8001884:	2310      	movs	r3, #16
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001888:	2300      	movs	r3, #0
 800188a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001890:	230a      	movs	r3, #10
 8001892:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001894:	f107 0318 	add.w	r3, r7, #24
 8001898:	4619      	mov	r1, r3
 800189a:	4806      	ldr	r0, [pc, #24]	; (80018b4 <MX_SPI1_Init+0xc0>)
 800189c:	f001 f82b 	bl	80028f6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80018a0:	2100      	movs	r1, #0
 80018a2:	4804      	ldr	r0, [pc, #16]	; (80018b4 <MX_SPI1_Init+0xc0>)
 80018a4:	f7ff ff92 	bl	80017cc <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	3740      	adds	r7, #64	; 0x40
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40020000 	.word	0x40020000
 80018b4:	40013000 	.word	0x40013000

080018b8 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80018c2:	695a      	ldr	r2, [r3, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4013      	ands	r3, r2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	bf0c      	ite	eq
 80018ce:	2301      	moveq	r3, #1
 80018d0:	2300      	movne	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40013c00 	.word	0x40013c00

080018e4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80018ec:	4a04      	ldr	r2, [pc, #16]	; (8001900 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6153      	str	r3, [r2, #20]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40013c00 	.word	0x40013c00

08001904 <LL_USART_IsActiveFlag_RXNE>:
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0320 	and.w	r3, r3, #32
 8001914:	2b20      	cmp	r3, #32
 8001916:	bf0c      	ite	eq
 8001918:	2301      	moveq	r3, #1
 800191a:	2300      	movne	r3, #0
 800191c:	b2db      	uxtb	r3, r3
}
 800191e:	4618      	mov	r0, r3
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <LL_USART_ClearFlag_RXNE>:
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f06f 0220 	mvn.w	r2, #32
 8001938:	601a      	str	r2, [r3, #0]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <LL_USART_ReceiveData8>:
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	b2db      	uxtb	r3, r3
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <NMI_Handler+0x4>

08001966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196a:	e7fe      	b.n	800196a <HardFault_Handler+0x4>

0800196c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <MemManage_Handler+0x4>

08001972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <BusFault_Handler+0x4>

08001978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800197c:	e7fe      	b.n	800197c <UsageFault_Handler+0x4>

0800197e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <SysTick_Handler+0x20>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d004      	beq.n	80019be <SysTick_Handler+0x16>
		TimingDelay--;
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <SysTick_Handler+0x20>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	4a03      	ldr	r2, [pc, #12]	; (80019c8 <SysTick_Handler+0x20>)
 80019bc:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	200000b0 	.word	0x200000b0

080019cc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 80019d0:	2010      	movs	r0, #16
 80019d2:	f7ff ff71 	bl	80018b8 <LL_EXTI_IsActiveFlag_0_31>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <EXTI4_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 80019dc:	2010      	movs	r0, #16
 80019de:	f7ff ff81 	bl	80018e4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END SPI1_IRQn 0 */
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6)) // 인터럽트중 USART6인지 확인
 80019f8:	480a      	ldr	r0, [pc, #40]	; (8001a24 <USART6_IRQHandler+0x30>)
 80019fa:	f7ff ff83 	bl	8001904 <LL_USART_IsActiveFlag_RXNE>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00c      	beq.n	8001a1e <USART6_IRQHandler+0x2a>
	{
			LL_USART_ClearFlag_RXNE(USART6); // 맞으면 비트 클리어
 8001a04:	4807      	ldr	r0, [pc, #28]	; (8001a24 <USART6_IRQHandler+0x30>)
 8001a06:	f7ff ff90 	bl	800192a <LL_USART_ClearFlag_RXNE>
			rxd = LL_USART_ReceiveData8(USART6); // 데이터 수신
 8001a0a:	4806      	ldr	r0, [pc, #24]	; (8001a24 <USART6_IRQHandler+0x30>)
 8001a0c:	f7ff ff9b 	bl	8001946 <LL_USART_ReceiveData8>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <USART6_IRQHandler+0x34>)
 8001a16:	701a      	strb	r2, [r3, #0]
			flag_INT_USART6 = 1; // flag 클리어
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <USART6_IRQHandler+0x38>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40011400 	.word	0x40011400
 8001a28:	200000ad 	.word	0x200000ad
 8001a2c:	200000ac 	.word	0x200000ac

08001a30 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	e00a      	b.n	8001a58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a42:	f3af 8000 	nop.w
 8001a46:	4601      	mov	r1, r0
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	60ba      	str	r2, [r7, #8]
 8001a4e:	b2ca      	uxtb	r2, r1
 8001a50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	3301      	adds	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	dbf0      	blt.n	8001a42 <_read+0x12>
  }

  return len;
 8001a60:	687b      	ldr	r3, [r7, #4]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a92:	605a      	str	r2, [r3, #4]
  return 0;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <_isatty>:

int _isatty(int file)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aaa:	2301      	movs	r3, #1
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001adc:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <_sbrk+0x5c>)
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <_sbrk+0x60>)
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d102      	bne.n	8001af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <_sbrk+0x64>)
 8001af2:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <_sbrk+0x68>)
 8001af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af6:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d207      	bcs.n	8001b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b04:	f001 fd5a 	bl	80035bc <__errno>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b12:	e009      	b.n	8001b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1a:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <_sbrk+0x64>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <_sbrk+0x64>)
 8001b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b26:	68fb      	ldr	r3, [r7, #12]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20020000 	.word	0x20020000
 8001b34:	00000400 	.word	0x00000400
 8001b38:	200000b4 	.word	0x200000b4
 8001b3c:	200000c8 	.word	0x200000c8

08001b40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <SystemInit+0x20>)
 8001b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b4a:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <SystemInit+0x20>)
 8001b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <LL_AHB1_GRP1_EnableClock>:
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b70:	4907      	ldr	r1, [pc, #28]	; (8001b90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	40023800 	.word	0x40023800

08001b94 <LL_APB1_GRP1_EnableClock>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ba0:	4907      	ldr	r1, [pc, #28]	; (8001bc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	40023800 	.word	0x40023800

08001bc4 <LL_TIM_EnableARRPreload>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	601a      	str	r2, [r3, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d01c      	beq.n	8001c2e <LL_TIM_OC_EnableFast+0x4a>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d017      	beq.n	8001c2a <LL_TIM_OC_EnableFast+0x46>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b10      	cmp	r3, #16
 8001bfe:	d012      	beq.n	8001c26 <LL_TIM_OC_EnableFast+0x42>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2b40      	cmp	r3, #64	; 0x40
 8001c04:	d00d      	beq.n	8001c22 <LL_TIM_OC_EnableFast+0x3e>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c0c:	d007      	beq.n	8001c1e <LL_TIM_OC_EnableFast+0x3a>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c14:	d101      	bne.n	8001c1a <LL_TIM_OC_EnableFast+0x36>
 8001c16:	2305      	movs	r3, #5
 8001c18:	e00a      	b.n	8001c30 <LL_TIM_OC_EnableFast+0x4c>
 8001c1a:	2306      	movs	r3, #6
 8001c1c:	e008      	b.n	8001c30 <LL_TIM_OC_EnableFast+0x4c>
 8001c1e:	2304      	movs	r3, #4
 8001c20:	e006      	b.n	8001c30 <LL_TIM_OC_EnableFast+0x4c>
 8001c22:	2303      	movs	r3, #3
 8001c24:	e004      	b.n	8001c30 <LL_TIM_OC_EnableFast+0x4c>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e002      	b.n	8001c30 <LL_TIM_OC_EnableFast+0x4c>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e000      	b.n	8001c30 <LL_TIM_OC_EnableFast+0x4c>
 8001c2e:	2300      	movs	r3, #0
 8001c30:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3318      	adds	r3, #24
 8001c36:	4619      	mov	r1, r3
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <LL_TIM_OC_EnableFast+0x80>)
 8001c3c:	5cd3      	ldrb	r3, [r2, r3]
 8001c3e:	440b      	add	r3, r1
 8001c40:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	4907      	ldr	r1, [pc, #28]	; (8001c68 <LL_TIM_OC_EnableFast+0x84>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	2304      	movs	r3, #4
 8001c50:	408b      	lsls	r3, r1
 8001c52:	431a      	orrs	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	601a      	str	r2, [r3, #0]

}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	080045e0 	.word	0x080045e0
 8001c68:	080045e8 	.word	0x080045e8

08001c6c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d01c      	beq.n	8001cb6 <LL_TIM_OC_EnablePreload+0x4a>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d017      	beq.n	8001cb2 <LL_TIM_OC_EnablePreload+0x46>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	2b10      	cmp	r3, #16
 8001c86:	d012      	beq.n	8001cae <LL_TIM_OC_EnablePreload+0x42>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	2b40      	cmp	r3, #64	; 0x40
 8001c8c:	d00d      	beq.n	8001caa <LL_TIM_OC_EnablePreload+0x3e>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c94:	d007      	beq.n	8001ca6 <LL_TIM_OC_EnablePreload+0x3a>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c9c:	d101      	bne.n	8001ca2 <LL_TIM_OC_EnablePreload+0x36>
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	e00a      	b.n	8001cb8 <LL_TIM_OC_EnablePreload+0x4c>
 8001ca2:	2306      	movs	r3, #6
 8001ca4:	e008      	b.n	8001cb8 <LL_TIM_OC_EnablePreload+0x4c>
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	e006      	b.n	8001cb8 <LL_TIM_OC_EnablePreload+0x4c>
 8001caa:	2303      	movs	r3, #3
 8001cac:	e004      	b.n	8001cb8 <LL_TIM_OC_EnablePreload+0x4c>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e002      	b.n	8001cb8 <LL_TIM_OC_EnablePreload+0x4c>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <LL_TIM_OC_EnablePreload+0x4c>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3318      	adds	r3, #24
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <LL_TIM_OC_EnablePreload+0x80>)
 8001cc4:	5cd3      	ldrb	r3, [r2, r3]
 8001cc6:	440b      	add	r3, r1
 8001cc8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	4907      	ldr	r1, [pc, #28]	; (8001cf0 <LL_TIM_OC_EnablePreload+0x84>)
 8001cd2:	5ccb      	ldrb	r3, [r1, r3]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	408b      	lsls	r3, r1
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	601a      	str	r2, [r3, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	080045e0 	.word	0x080045e0
 8001cf0:	080045e8 	.word	0x080045e8

08001cf4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d06:	f023 0307 	bic.w	r3, r3, #7
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	609a      	str	r2, [r3, #8]
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	605a      	str	r2, [r3, #4]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	609a      	str	r2, [r3, #8]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b094      	sub	sp, #80	; 0x50
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001d6a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
 8001d78:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	2220      	movs	r2, #32
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 fc44 	bl	8003610 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	1d3b      	adds	r3, r7, #4
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
 8001d94:	611a      	str	r2, [r3, #16]
 8001d96:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001d98:	2002      	movs	r0, #2
 8001d9a:	f7ff fefb 	bl	8001b94 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8001d9e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001da2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001da4:	2300      	movs	r3, #0
 8001da6:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 8001da8:	2314      	movs	r3, #20
 8001daa:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001dac:	2300      	movs	r3, #0
 8001dae:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001db0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001db4:	4619      	mov	r1, r3
 8001db6:	4821      	ldr	r0, [pc, #132]	; (8001e3c <MX_TIM3_Init+0xd8>)
 8001db8:	f000 fe62 	bl	8002a80 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8001dbc:	481f      	ldr	r0, [pc, #124]	; (8001e3c <MX_TIM3_Init+0xd8>)
 8001dbe:	f7ff ff01 	bl	8001bc4 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	481d      	ldr	r0, [pc, #116]	; (8001e3c <MX_TIM3_Init+0xd8>)
 8001dc6:	f7ff ff95 	bl	8001cf4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8001dca:	2101      	movs	r1, #1
 8001dcc:	481b      	ldr	r0, [pc, #108]	; (8001e3c <MX_TIM3_Init+0xd8>)
 8001dce:	f7ff ff4d 	bl	8001c6c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001dd2:	2360      	movs	r3, #96	; 0x60
 8001dd4:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001de2:	2300      	movs	r3, #0
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001de6:	f107 031c 	add.w	r3, r7, #28
 8001dea:	461a      	mov	r2, r3
 8001dec:	2101      	movs	r1, #1
 8001dee:	4813      	ldr	r0, [pc, #76]	; (8001e3c <MX_TIM3_Init+0xd8>)
 8001df0:	f000 fee0 	bl	8002bb4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8001df4:	2101      	movs	r1, #1
 8001df6:	4811      	ldr	r0, [pc, #68]	; (8001e3c <MX_TIM3_Init+0xd8>)
 8001df8:	f7ff fef4 	bl	8001be4 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	480f      	ldr	r0, [pc, #60]	; (8001e3c <MX_TIM3_Init+0xd8>)
 8001e00:	f7ff ff8d 	bl	8001d1e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001e04:	480d      	ldr	r0, [pc, #52]	; (8001e3c <MX_TIM3_Init+0xd8>)
 8001e06:	f7ff ff9d 	bl	8001d44 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001e0a:	2002      	movs	r0, #2
 8001e0c:	f7ff feaa 	bl	8001b64 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001e10:	2310      	movs	r3, #16
 8001e12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001e14:	2302      	movs	r3, #2
 8001e16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001e24:	2302      	movs	r3, #2
 8001e26:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4804      	ldr	r0, [pc, #16]	; (8001e40 <MX_TIM3_Init+0xdc>)
 8001e2e:	f000 fb91 	bl	8002554 <LL_GPIO_Init>

}
 8001e32:	bf00      	nop
 8001e34:	3750      	adds	r7, #80	; 0x50
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	40020400 	.word	0x40020400

08001e44 <__NVIC_GetPriorityGrouping>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <__NVIC_GetPriorityGrouping+0x18>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	f003 0307 	and.w	r3, r3, #7
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <__NVIC_EnableIRQ>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	4603      	mov	r3, r0
 8001e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	db0b      	blt.n	8001e8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	f003 021f 	and.w	r2, r3, #31
 8001e78:	4907      	ldr	r1, [pc, #28]	; (8001e98 <__NVIC_EnableIRQ+0x38>)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	2001      	movs	r0, #1
 8001e82:	fa00 f202 	lsl.w	r2, r0, r2
 8001e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000e100 	.word	0xe000e100

08001e9c <__NVIC_SetPriority>:
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	6039      	str	r1, [r7, #0]
 8001ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	db0a      	blt.n	8001ec6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	490c      	ldr	r1, [pc, #48]	; (8001ee8 <__NVIC_SetPriority+0x4c>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	0112      	lsls	r2, r2, #4
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ec4:	e00a      	b.n	8001edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4908      	ldr	r1, [pc, #32]	; (8001eec <__NVIC_SetPriority+0x50>)
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	3b04      	subs	r3, #4
 8001ed4:	0112      	lsls	r2, r2, #4
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	440b      	add	r3, r1
 8001eda:	761a      	strb	r2, [r3, #24]
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000e100 	.word	0xe000e100
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <NVIC_EncodePriority>:
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	; 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f1c3 0307 	rsb	r3, r3, #7
 8001f0a:	2b04      	cmp	r3, #4
 8001f0c:	bf28      	it	cs
 8001f0e:	2304      	movcs	r3, #4
 8001f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3304      	adds	r3, #4
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	d902      	bls.n	8001f20 <NVIC_EncodePriority+0x30>
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3b03      	subs	r3, #3
 8001f1e:	e000      	b.n	8001f22 <NVIC_EncodePriority+0x32>
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43da      	mvns	r2, r3
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	401a      	ands	r2, r3
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	43d9      	mvns	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	4313      	orrs	r3, r2
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3724      	adds	r7, #36	; 0x24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <LL_AHB1_GRP1_EnableClock>:
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f64:	4907      	ldr	r1, [pc, #28]	; (8001f84 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4013      	ands	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f76:	68fb      	ldr	r3, [r7, #12]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	40023800 	.word	0x40023800

08001f88 <LL_APB2_GRP1_EnableClock>:
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f94:	4907      	ldr	r1, [pc, #28]	; (8001fb4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	40023800 	.word	0x40023800

08001fb8 <LL_USART_Enable>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	60da      	str	r2, [r3, #12]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_USART_ConfigAsyncMode>:
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	615a      	str	r2, [r3, #20]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08e      	sub	sp, #56	; 0x38
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]
 8002016:	60da      	str	r2, [r3, #12]
 8002018:	611a      	str	r2, [r3, #16]
 800201a:	615a      	str	r2, [r3, #20]
 800201c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
 800202c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800202e:	2020      	movs	r0, #32
 8002030:	f7ff ffaa 	bl	8001f88 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002034:	2004      	movs	r0, #4
 8002036:	f7ff ff8f 	bl	8001f58 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800203a:	23c0      	movs	r3, #192	; 0xc0
 800203c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800203e:	2302      	movs	r3, #2
 8002040:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002042:	2303      	movs	r3, #3
 8002044:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800204e:	2308      	movs	r3, #8
 8002050:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	4619      	mov	r1, r3
 8002056:	4819      	ldr	r0, [pc, #100]	; (80020bc <MX_USART6_UART_Init+0xb8>)
 8002058:	f000 fa7c 	bl	8002554 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800205c:	f7ff fef2 	bl	8001e44 <__NVIC_GetPriorityGrouping>
 8002060:	4603      	mov	r3, r0
 8002062:	2200      	movs	r2, #0
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff42 	bl	8001ef0 <NVIC_EncodePriority>
 800206c:	4603      	mov	r3, r0
 800206e:	4619      	mov	r1, r3
 8002070:	2047      	movs	r0, #71	; 0x47
 8002072:	f7ff ff13 	bl	8001e9c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8002076:	2047      	movs	r0, #71	; 0x47
 8002078:	f7ff fef2 	bl	8001e60 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800207c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002080:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002082:	2300      	movs	r3, #0
 8002084:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800208a:	2300      	movs	r3, #0
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800208e:	230c      	movs	r3, #12
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002092:	2300      	movs	r3, #0
 8002094:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002096:	2300      	movs	r3, #0
 8002098:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800209a:	f107 031c 	add.w	r3, r7, #28
 800209e:	4619      	mov	r1, r3
 80020a0:	4807      	ldr	r0, [pc, #28]	; (80020c0 <MX_USART6_UART_Init+0xbc>)
 80020a2:	f001 f9d3 	bl	800344c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 80020a6:	4806      	ldr	r0, [pc, #24]	; (80020c0 <MX_USART6_UART_Init+0xbc>)
 80020a8:	f7ff ff96 	bl	8001fd8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 80020ac:	4804      	ldr	r0, [pc, #16]	; (80020c0 <MX_USART6_UART_Init+0xbc>)
 80020ae:	f7ff ff83 	bl	8001fb8 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80020b2:	bf00      	nop
 80020b4:	3738      	adds	r7, #56	; 0x38
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40020800 	.word	0x40020800
 80020c0:	40011400 	.word	0x40011400

080020c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c8:	480d      	ldr	r0, [pc, #52]	; (8002100 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ca:	490e      	ldr	r1, [pc, #56]	; (8002104 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020cc:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d0:	e002      	b.n	80020d8 <LoopCopyDataInit>

080020d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d6:	3304      	adds	r3, #4

080020d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020dc:	d3f9      	bcc.n	80020d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020de:	4a0b      	ldr	r2, [pc, #44]	; (800210c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020e0:	4c0b      	ldr	r4, [pc, #44]	; (8002110 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e4:	e001      	b.n	80020ea <LoopFillZerobss>

080020e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e8:	3204      	adds	r2, #4

080020ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ec:	d3fb      	bcc.n	80020e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020ee:	f7ff fd27 	bl	8001b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020f2:	f001 fa69 	bl	80035c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020f6:	f7ff f929 	bl	800134c <main>
  bx  lr    
 80020fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002104:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002108:	08004698 	.word	0x08004698
  ldr r2, =_sbss
 800210c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002110:	200000c8 	.word	0x200000c8

08002114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002114:	e7fe      	b.n	8002114 <ADC_IRQHandler>
	...

08002118 <LL_EXTI_EnableIT_0_31>:
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <LL_EXTI_EnableIT_0_31+0x20>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4904      	ldr	r1, [pc, #16]	; (8002138 <LL_EXTI_EnableIT_0_31+0x20>)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4313      	orrs	r3, r2
 800212a:	600b      	str	r3, [r1, #0]
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	40013c00 	.word	0x40013c00

0800213c <LL_EXTI_DisableIT_0_31>:
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <LL_EXTI_DisableIT_0_31+0x24>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	43db      	mvns	r3, r3
 800214c:	4904      	ldr	r1, [pc, #16]	; (8002160 <LL_EXTI_DisableIT_0_31+0x24>)
 800214e:	4013      	ands	r3, r2
 8002150:	600b      	str	r3, [r1, #0]
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40013c00 	.word	0x40013c00

08002164 <LL_EXTI_EnableEvent_0_31>:
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <LL_EXTI_EnableEvent_0_31+0x20>)
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	4904      	ldr	r1, [pc, #16]	; (8002184 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	40013c00 	.word	0x40013c00

08002188 <LL_EXTI_DisableEvent_0_31>:
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <LL_EXTI_DisableEvent_0_31+0x24>)
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	43db      	mvns	r3, r3
 8002198:	4904      	ldr	r1, [pc, #16]	; (80021ac <LL_EXTI_DisableEvent_0_31+0x24>)
 800219a:	4013      	ands	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40013c00 	.word	0x40013c00

080021b0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	4904      	ldr	r1, [pc, #16]	; (80021d0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	608b      	str	r3, [r1, #8]
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	40013c00 	.word	0x40013c00

080021d4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	4904      	ldr	r1, [pc, #16]	; (80021f8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	608b      	str	r3, [r1, #8]
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40013c00 	.word	0x40013c00

080021fc <LL_EXTI_EnableFallingTrig_0_31>:
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	4904      	ldr	r1, [pc, #16]	; (800221c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4313      	orrs	r3, r2
 800220e:	60cb      	str	r3, [r1, #12]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40013c00 	.word	0x40013c00

08002220 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	43db      	mvns	r3, r3
 8002230:	4904      	ldr	r1, [pc, #16]	; (8002244 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002232:	4013      	ands	r3, r2
 8002234:	60cb      	str	r3, [r1, #12]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40013c00 	.word	0x40013c00

08002248 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	791b      	ldrb	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d065      	beq.n	8002328 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d06c      	beq.n	800233e <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	795b      	ldrb	r3, [r3, #5]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d01c      	beq.n	80022a6 <LL_EXTI_Init+0x5e>
 800226c:	2b02      	cmp	r3, #2
 800226e:	dc25      	bgt.n	80022bc <LL_EXTI_Init+0x74>
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <LL_EXTI_Init+0x32>
 8002274:	2b01      	cmp	r3, #1
 8002276:	d00b      	beq.n	8002290 <LL_EXTI_Init+0x48>
 8002278:	e020      	b.n	80022bc <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ff82 	bl	8002188 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff45 	bl	8002118 <LL_EXTI_EnableIT_0_31>
          break;
 800228e:	e018      	b.n	80022c2 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff51 	bl	800213c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff ff60 	bl	8002164 <LL_EXTI_EnableEvent_0_31>
          break;
 80022a4:	e00d      	b.n	80022c2 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff ff34 	bl	8002118 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff55 	bl	8002164 <LL_EXTI_EnableEvent_0_31>
          break;
 80022ba:	e002      	b.n	80022c2 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
          break;
 80022c0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	799b      	ldrb	r3, [r3, #6]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d039      	beq.n	800233e <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	799b      	ldrb	r3, [r3, #6]
 80022ce:	2b03      	cmp	r3, #3
 80022d0:	d01c      	beq.n	800230c <LL_EXTI_Init+0xc4>
 80022d2:	2b03      	cmp	r3, #3
 80022d4:	dc25      	bgt.n	8002322 <LL_EXTI_Init+0xda>
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d002      	beq.n	80022e0 <LL_EXTI_Init+0x98>
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d00b      	beq.n	80022f6 <LL_EXTI_Init+0xae>
 80022de:	e020      	b.n	8002322 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff9b 	bl	8002220 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff5e 	bl	80021b0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80022f4:	e024      	b.n	8002340 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ff6a 	bl	80021d4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff79 	bl	80021fc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800230a:	e019      	b.n	8002340 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff4d 	bl	80021b0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ff6e 	bl	80021fc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002320:	e00e      	b.n	8002340 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
            break;
 8002326:	e00b      	b.n	8002340 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff05 	bl	800213c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff ff26 	bl	8002188 <LL_EXTI_DisableEvent_0_31>
 800233c:	e000      	b.n	8002340 <LL_EXTI_Init+0xf8>
      }
 800233e:	bf00      	nop
  }
  return status;
 8002340:	7bfb      	ldrb	r3, [r7, #15]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <LL_GPIO_SetPinMode>:
{
 800234a:	b480      	push	{r7}
 800234c:	b089      	sub	sp, #36	; 0x24
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	613b      	str	r3, [r7, #16]
  return result;
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	fab3 f383 	clz	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	2103      	movs	r1, #3
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	401a      	ands	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	61bb      	str	r3, [r7, #24]
  return result;
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	fab3 f383 	clz	r3, r3
 800238c:	b2db      	uxtb	r3, r3
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	431a      	orrs	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	601a      	str	r2, [r3, #0]
}
 800239c:	bf00      	nop
 800239e:	3724      	adds	r7, #36	; 0x24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_GPIO_SetPinOutputType>:
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	401a      	ands	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	431a      	orrs	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	605a      	str	r2, [r3, #4]
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_GPIO_SetPinSpeed>:
{
 80023d8:	b480      	push	{r7}
 80023da:	b089      	sub	sp, #36	; 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa93 f3a3 	rbit	r3, r3
 80023f2:	613b      	str	r3, [r7, #16]
  return result;
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	2103      	movs	r1, #3
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	401a      	ands	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	61bb      	str	r3, [r7, #24]
  return result;
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	431a      	orrs	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	609a      	str	r2, [r3, #8]
}
 800242a:	bf00      	nop
 800242c:	3724      	adds	r7, #36	; 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <LL_GPIO_SetPinPull>:
{
 8002436:	b480      	push	{r7}
 8002438:	b089      	sub	sp, #36	; 0x24
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	613b      	str	r3, [r7, #16]
  return result;
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	fab3 f383 	clz	r3, r3
 8002458:	b2db      	uxtb	r3, r3
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	2103      	movs	r1, #3
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	401a      	ands	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa93 f3a3 	rbit	r3, r3
 8002470:	61bb      	str	r3, [r7, #24]
  return result;
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	fab3 f383 	clz	r3, r3
 8002478:	b2db      	uxtb	r3, r3
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	431a      	orrs	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	60da      	str	r2, [r3, #12]
}
 8002488:	bf00      	nop
 800248a:	3724      	adds	r7, #36	; 0x24
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_GPIO_SetAFPin_0_7>:
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	; 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a1a      	ldr	r2, [r3, #32]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	fa93 f3a3 	rbit	r3, r3
 80024ae:	613b      	str	r3, [r7, #16]
  return result;
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	fab3 f383 	clz	r3, r3
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	210f      	movs	r1, #15
 80024bc:	fa01 f303 	lsl.w	r3, r1, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	401a      	ands	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	61bb      	str	r3, [r7, #24]
  return result;
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	431a      	orrs	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	621a      	str	r2, [r3, #32]
}
 80024e6:	bf00      	nop
 80024e8:	3724      	adds	r7, #36	; 0x24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <LL_GPIO_SetAFPin_8_15>:
{
 80024f2:	b480      	push	{r7}
 80024f4:	b089      	sub	sp, #36	; 0x24
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	613b      	str	r3, [r7, #16]
  return result;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	210f      	movs	r1, #15
 800251c:	fa01 f303 	lsl.w	r3, r1, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	401a      	ands	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	0a1b      	lsrs	r3, r3, #8
 8002528:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa93 f3a3 	rbit	r3, r3
 8002530:	61bb      	str	r3, [r7, #24]
  return result;
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	fab3 f383 	clz	r3, r3
 8002538:	b2db      	uxtb	r3, r3
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	431a      	orrs	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002548:	bf00      	nop
 800254a:	3724      	adds	r7, #36	; 0x24
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	613b      	str	r3, [r7, #16]
  return result;
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800257e:	e050      	b.n	8002622 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	2101      	movs	r1, #1
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	fa01 f303 	lsl.w	r3, r1, r3
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d042      	beq.n	800261c <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d003      	beq.n	80025a6 <LL_GPIO_Init+0x52>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d10d      	bne.n	80025c2 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	461a      	mov	r2, r3
 80025ac:	69b9      	ldr	r1, [r7, #24]
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff ff12 	bl	80023d8 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	461a      	mov	r2, r3
 80025ba:	69b9      	ldr	r1, [r7, #24]
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff fef3 	bl	80023a8 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	461a      	mov	r2, r3
 80025c8:	69b9      	ldr	r1, [r7, #24]
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ff33 	bl	8002436 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d11a      	bne.n	800260e <LL_GPIO_Init+0xba>
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	60bb      	str	r3, [r7, #8]
  return result;
 80025e4:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b07      	cmp	r3, #7
 80025ee:	d807      	bhi.n	8002600 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	461a      	mov	r2, r3
 80025f6:	69b9      	ldr	r1, [r7, #24]
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff ff4b 	bl	8002494 <LL_GPIO_SetAFPin_0_7>
 80025fe:	e006      	b.n	800260e <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	461a      	mov	r2, r3
 8002606:	69b9      	ldr	r1, [r7, #24]
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff ff72 	bl	80024f2 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	461a      	mov	r2, r3
 8002614:	69b9      	ldr	r1, [r7, #24]
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff fe97 	bl	800234a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	3301      	adds	r3, #1
 8002620:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1a7      	bne.n	8002580 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
	...

0800263c <LL_RCC_GetSysClkSource>:
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002640:	4b04      	ldr	r3, [pc, #16]	; (8002654 <LL_RCC_GetSysClkSource+0x18>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 030c 	and.w	r3, r3, #12
}
 8002648:	4618      	mov	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800

08002658 <LL_RCC_GetAHBPrescaler>:
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800265c:	4b04      	ldr	r3, [pc, #16]	; (8002670 <LL_RCC_GetAHBPrescaler+0x18>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800

08002674 <LL_RCC_GetAPB1Prescaler>:
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <LL_RCC_GetAPB1Prescaler+0x18>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800

08002690 <LL_RCC_GetAPB2Prescaler>:
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800

080026ac <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <LL_RCC_PLL_GetMainSource+0x18>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800

080026c8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <LL_RCC_PLL_GetN+0x18>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	099b      	lsrs	r3, r3, #6
 80026d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40023800 	.word	0x40023800

080026e4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <LL_RCC_PLL_GetP+0x18>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800

08002700 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <LL_RCC_PLL_GetDivider+0x18>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800

0800271c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002724:	f000 f820 	bl	8002768 <RCC_GetSystemClockFreq>
 8002728:	4602      	mov	r2, r0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f840 	bl	80027b8 <RCC_GetHCLKClockFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f84e 	bl	80027e4 <RCC_GetPCLK1ClockFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4618      	mov	r0, r3
 8002754:	f000 f85a 	bl	800280c <RCC_GetPCLK2ClockFreq>
 8002758:	4602      	mov	r2, r0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	60da      	str	r2, [r3, #12]
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002772:	f7ff ff63 	bl	800263c <LL_RCC_GetSysClkSource>
 8002776:	4603      	mov	r3, r0
 8002778:	2b08      	cmp	r3, #8
 800277a:	d00c      	beq.n	8002796 <RCC_GetSystemClockFreq+0x2e>
 800277c:	2b08      	cmp	r3, #8
 800277e:	d80f      	bhi.n	80027a0 <RCC_GetSystemClockFreq+0x38>
 8002780:	2b00      	cmp	r3, #0
 8002782:	d002      	beq.n	800278a <RCC_GetSystemClockFreq+0x22>
 8002784:	2b04      	cmp	r3, #4
 8002786:	d003      	beq.n	8002790 <RCC_GetSystemClockFreq+0x28>
 8002788:	e00a      	b.n	80027a0 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <RCC_GetSystemClockFreq+0x48>)
 800278c:	607b      	str	r3, [r7, #4]
      break;
 800278e:	e00a      	b.n	80027a6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002790:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <RCC_GetSystemClockFreq+0x4c>)
 8002792:	607b      	str	r3, [r7, #4]
      break;
 8002794:	e007      	b.n	80027a6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002796:	2008      	movs	r0, #8
 8002798:	f000 f84c 	bl	8002834 <RCC_PLL_GetFreqDomain_SYS>
 800279c:	6078      	str	r0, [r7, #4]
      break;
 800279e:	e002      	b.n	80027a6 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80027a0:	4b03      	ldr	r3, [pc, #12]	; (80027b0 <RCC_GetSystemClockFreq+0x48>)
 80027a2:	607b      	str	r3, [r7, #4]
      break;
 80027a4:	bf00      	nop
  }

  return frequency;
 80027a6:	687b      	ldr	r3, [r7, #4]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	00f42400 	.word	0x00f42400
 80027b4:	007a1200 	.word	0x007a1200

080027b8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80027c0:	f7ff ff4a 	bl	8002658 <LL_RCC_GetAHBPrescaler>
 80027c4:	4603      	mov	r3, r0
 80027c6:	091b      	lsrs	r3, r3, #4
 80027c8:	f003 030f 	and.w	r3, r3, #15
 80027cc:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <RCC_GetHCLKClockFreq+0x28>)
 80027ce:	5cd3      	ldrb	r3, [r2, r3]
 80027d0:	461a      	mov	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	40d3      	lsrs	r3, r2
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	080045c8 	.word	0x080045c8

080027e4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80027ec:	f7ff ff42 	bl	8002674 <LL_RCC_GetAPB1Prescaler>
 80027f0:	4603      	mov	r3, r0
 80027f2:	0a9b      	lsrs	r3, r3, #10
 80027f4:	4a04      	ldr	r2, [pc, #16]	; (8002808 <RCC_GetPCLK1ClockFreq+0x24>)
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	461a      	mov	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	40d3      	lsrs	r3, r2
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	080045d8 	.word	0x080045d8

0800280c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002814:	f7ff ff3c 	bl	8002690 <LL_RCC_GetAPB2Prescaler>
 8002818:	4603      	mov	r3, r0
 800281a:	0b5b      	lsrs	r3, r3, #13
 800281c:	4a04      	ldr	r2, [pc, #16]	; (8002830 <RCC_GetPCLK2ClockFreq+0x24>)
 800281e:	5cd3      	ldrb	r3, [r2, r3]
 8002820:	461a      	mov	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	40d3      	lsrs	r3, r2
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	080045d8 	.word	0x080045d8

08002834 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002848:	f7ff ff30 	bl	80026ac <LL_RCC_PLL_GetMainSource>
 800284c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d004      	beq.n	800285e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800285a:	d003      	beq.n	8002864 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800285c:	e005      	b.n	800286a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002860:	617b      	str	r3, [r7, #20]
      break;
 8002862:	e005      	b.n	8002870 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002866:	617b      	str	r3, [r7, #20]
      break;
 8002868:	e002      	b.n	8002870 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800286a:	4b0f      	ldr	r3, [pc, #60]	; (80028a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800286c:	617b      	str	r3, [r7, #20]
      break;
 800286e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b08      	cmp	r3, #8
 8002874:	d113      	bne.n	800289e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002876:	f7ff ff43 	bl	8002700 <LL_RCC_PLL_GetDivider>
 800287a:	4602      	mov	r2, r0
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	fbb3 f4f2 	udiv	r4, r3, r2
 8002882:	f7ff ff21 	bl	80026c8 <LL_RCC_PLL_GetN>
 8002886:	4603      	mov	r3, r0
 8002888:	fb03 f404 	mul.w	r4, r3, r4
 800288c:	f7ff ff2a 	bl	80026e4 <LL_RCC_PLL_GetP>
 8002890:	4603      	mov	r3, r0
 8002892:	0c1b      	lsrs	r3, r3, #16
 8002894:	3301      	adds	r3, #1
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	fbb4 f3f3 	udiv	r3, r4, r3
 800289c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800289e:	693b      	ldr	r3, [r7, #16]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd90      	pop	{r4, r7, pc}
 80028a8:	00f42400 	.word	0x00f42400
 80028ac:	007a1200 	.word	0x007a1200

080028b0 <LL_SPI_IsEnabled>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c0:	2b40      	cmp	r3, #64	; 0x40
 80028c2:	d101      	bne.n	80028c8 <LL_SPI_IsEnabled+0x18>
 80028c4:	2301      	movs	r3, #1
 80028c6:	e000      	b.n	80028ca <LL_SPI_IsEnabled+0x1a>
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <LL_SPI_SetCRCPolynomial>:
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	611a      	str	r2, [r3, #16]
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ffd3 	bl	80028b0 <LL_SPI_IsEnabled>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d139      	bne.n	8002984 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002918:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	6811      	ldr	r1, [r2, #0]
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	6852      	ldr	r2, [r2, #4]
 8002924:	4311      	orrs	r1, r2
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	6892      	ldr	r2, [r2, #8]
 800292a:	4311      	orrs	r1, r2
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	68d2      	ldr	r2, [r2, #12]
 8002930:	4311      	orrs	r1, r2
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	6912      	ldr	r2, [r2, #16]
 8002936:	4311      	orrs	r1, r2
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	6952      	ldr	r2, [r2, #20]
 800293c:	4311      	orrs	r1, r2
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	6992      	ldr	r2, [r2, #24]
 8002942:	4311      	orrs	r1, r2
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	69d2      	ldr	r2, [r2, #28]
 8002948:	4311      	orrs	r1, r2
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	6a12      	ldr	r2, [r2, #32]
 800294e:	430a      	orrs	r2, r1
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f023 0204 	bic.w	r2, r3, #4
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	0c1b      	lsrs	r3, r3, #16
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002972:	d105      	bne.n	8002980 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	4619      	mov	r1, r3
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff ffab 	bl	80028d6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002980:	2300      	movs	r3, #0
 8002982:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	61da      	str	r2, [r3, #28]
  return status;
 8002990:	7bfb      	ldrb	r3, [r7, #15]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <LL_TIM_SetPrescaler>:
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <LL_TIM_SetAutoReload>:
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <LL_TIM_SetRepetitionCounter>:
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <LL_TIM_OC_SetCompareCH1>:
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LL_TIM_OC_SetCompareCH2>:
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <LL_TIM_OC_SetCompareCH3>:
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
 8002a2e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <LL_TIM_OC_SetCompareCH4>:
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f043 0201 	orr.w	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	615a      	str	r2, [r3, #20]
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
	...

08002a80 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a3d      	ldr	r2, [pc, #244]	; (8002b88 <LL_TIM_Init+0x108>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d013      	beq.n	8002ac0 <LL_TIM_Init+0x40>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9e:	d00f      	beq.n	8002ac0 <LL_TIM_Init+0x40>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a3a      	ldr	r2, [pc, #232]	; (8002b8c <LL_TIM_Init+0x10c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00b      	beq.n	8002ac0 <LL_TIM_Init+0x40>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a39      	ldr	r2, [pc, #228]	; (8002b90 <LL_TIM_Init+0x110>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d007      	beq.n	8002ac0 <LL_TIM_Init+0x40>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a38      	ldr	r2, [pc, #224]	; (8002b94 <LL_TIM_Init+0x114>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d003      	beq.n	8002ac0 <LL_TIM_Init+0x40>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a37      	ldr	r2, [pc, #220]	; (8002b98 <LL_TIM_Init+0x118>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d106      	bne.n	8002ace <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a2d      	ldr	r2, [pc, #180]	; (8002b88 <LL_TIM_Init+0x108>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d02b      	beq.n	8002b2e <LL_TIM_Init+0xae>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002adc:	d027      	beq.n	8002b2e <LL_TIM_Init+0xae>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a2a      	ldr	r2, [pc, #168]	; (8002b8c <LL_TIM_Init+0x10c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d023      	beq.n	8002b2e <LL_TIM_Init+0xae>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a29      	ldr	r2, [pc, #164]	; (8002b90 <LL_TIM_Init+0x110>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d01f      	beq.n	8002b2e <LL_TIM_Init+0xae>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a28      	ldr	r2, [pc, #160]	; (8002b94 <LL_TIM_Init+0x114>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d01b      	beq.n	8002b2e <LL_TIM_Init+0xae>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a27      	ldr	r2, [pc, #156]	; (8002b98 <LL_TIM_Init+0x118>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d017      	beq.n	8002b2e <LL_TIM_Init+0xae>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a26      	ldr	r2, [pc, #152]	; (8002b9c <LL_TIM_Init+0x11c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <LL_TIM_Init+0xae>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a25      	ldr	r2, [pc, #148]	; (8002ba0 <LL_TIM_Init+0x120>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00f      	beq.n	8002b2e <LL_TIM_Init+0xae>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a24      	ldr	r2, [pc, #144]	; (8002ba4 <LL_TIM_Init+0x124>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00b      	beq.n	8002b2e <LL_TIM_Init+0xae>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <LL_TIM_Init+0x128>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d007      	beq.n	8002b2e <LL_TIM_Init+0xae>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a22      	ldr	r2, [pc, #136]	; (8002bac <LL_TIM_Init+0x12c>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d003      	beq.n	8002b2e <LL_TIM_Init+0xae>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a21      	ldr	r2, [pc, #132]	; (8002bb0 <LL_TIM_Init+0x130>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d106      	bne.n	8002b3c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	4619      	mov	r1, r3
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff ff34 	bl	80029b6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	4619      	mov	r1, r3
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff ff20 	bl	800299a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <LL_TIM_Init+0x108>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d003      	beq.n	8002b6a <LL_TIM_Init+0xea>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a0c      	ldr	r2, [pc, #48]	; (8002b98 <LL_TIM_Init+0x118>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d105      	bne.n	8002b76 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	4619      	mov	r1, r3
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff ff2e 	bl	80029d2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff ff71 	bl	8002a5e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40010000 	.word	0x40010000
 8002b8c:	40000400 	.word	0x40000400
 8002b90:	40000800 	.word	0x40000800
 8002b94:	40000c00 	.word	0x40000c00
 8002b98:	40010400 	.word	0x40010400
 8002b9c:	40014000 	.word	0x40014000
 8002ba0:	40014400 	.word	0x40014400
 8002ba4:	40014800 	.word	0x40014800
 8002ba8:	40001800 	.word	0x40001800
 8002bac:	40001c00 	.word	0x40001c00
 8002bb0:	40002000 	.word	0x40002000

08002bb4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bca:	d027      	beq.n	8002c1c <LL_TIM_OC_Init+0x68>
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd2:	d82a      	bhi.n	8002c2a <LL_TIM_OC_Init+0x76>
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bda:	d018      	beq.n	8002c0e <LL_TIM_OC_Init+0x5a>
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be2:	d822      	bhi.n	8002c2a <LL_TIM_OC_Init+0x76>
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d003      	beq.n	8002bf2 <LL_TIM_OC_Init+0x3e>
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b10      	cmp	r3, #16
 8002bee:	d007      	beq.n	8002c00 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002bf0:	e01b      	b.n	8002c2a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f81f 	bl	8002c38 <OC1Config>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8002bfe:	e015      	b.n	8002c2c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f884 	bl	8002d10 <OC2Config>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c0c:	e00e      	b.n	8002c2c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 f8ed 	bl	8002df0 <OC3Config>
 8002c16:	4603      	mov	r3, r0
 8002c18:	75fb      	strb	r3, [r7, #23]
      break;
 8002c1a:	e007      	b.n	8002c2c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f956 	bl	8002ed0 <OC4Config>
 8002c24:	4603      	mov	r3, r0
 8002c26:	75fb      	strb	r3, [r7, #23]
      break;
 8002c28:	e000      	b.n	8002c2c <LL_TIM_OC_Init+0x78>
      break;
 8002c2a:	bf00      	nop
  }

  return result;
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	f023 0201 	bic.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f023 0303 	bic.w	r3, r3, #3
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f023 0202 	bic.w	r2, r3, #2
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f023 0201 	bic.w	r2, r3, #1
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a1c      	ldr	r2, [pc, #112]	; (8002d08 <OC1Config+0xd0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d003      	beq.n	8002ca2 <OC1Config+0x6a>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a1b      	ldr	r2, [pc, #108]	; (8002d0c <OC1Config+0xd4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d11e      	bne.n	8002ce0 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f023 0208 	bic.w	r2, r3, #8
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f023 0204 	bic.w	r2, r3, #4
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff fe7b 	bl	80029ee <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40010000 	.word	0x40010000
 8002d0c:	40010400 	.word	0x40010400

08002d10 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	f023 0210 	bic.w	r2, r3, #16
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f023 0220 	bic.w	r2, r3, #32
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f023 0210 	bic.w	r2, r3, #16
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <OC2Config+0xd8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d003      	beq.n	8002d80 <OC2Config+0x70>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <OC2Config+0xdc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d11f      	bne.n	8002dc0 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	019b      	lsls	r3, r3, #6
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	019b      	lsls	r3, r3, #6
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff fe19 	bl	8002a0a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40010000 	.word	0x40010000
 8002dec:	40010400 	.word	0x40010400

08002df0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f023 0303 	bic.w	r3, r3, #3
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	021b      	lsls	r3, r3, #8
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	021b      	lsls	r3, r3, #8
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a1d      	ldr	r2, [pc, #116]	; (8002ec8 <OC3Config+0xd8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d003      	beq.n	8002e5e <OC3Config+0x6e>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a1c      	ldr	r2, [pc, #112]	; (8002ecc <OC3Config+0xdc>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d11f      	bne.n	8002e9e <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	029b      	lsls	r3, r3, #10
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	029b      	lsls	r3, r3, #10
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	015b      	lsls	r3, r3, #5
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff fdb8 	bl	8002a26 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40010000 	.word	0x40010000
 8002ecc:	40010400 	.word	0x40010400

08002ed0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	031b      	lsls	r3, r3, #12
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	031b      	lsls	r3, r3, #12
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a11      	ldr	r2, [pc, #68]	; (8002f78 <OC4Config+0xa8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d003      	beq.n	8002f40 <OC4Config+0x70>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a10      	ldr	r2, [pc, #64]	; (8002f7c <OC4Config+0xac>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d107      	bne.n	8002f50 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	019b      	lsls	r3, r3, #6
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	4619      	mov	r1, r3
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff fd6d 	bl	8002a42 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40010000 	.word	0x40010000
 8002f7c:	40010400 	.word	0x40010400

08002f80 <LL_USART_IsEnabled>:
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f94:	bf0c      	ite	eq
 8002f96:	2301      	moveq	r3, #1
 8002f98:	2300      	movne	r3, #0
 8002f9a:	b2db      	uxtb	r3, r3
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <LL_USART_SetStopBitsLength>:
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	611a      	str	r2, [r3, #16]
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <LL_USART_SetHWFlowCtrl>:
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	615a      	str	r2, [r3, #20]
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <LL_USART_SetBaudRate>:
{
 8002ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff8:	b0c0      	sub	sp, #256	; 0x100
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003000:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8003004:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8003008:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800300c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003014:	f040 810c 	bne.w	8003230 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003018:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800301c:	2200      	movs	r2, #0
 800301e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003022:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003026:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800302a:	4622      	mov	r2, r4
 800302c:	462b      	mov	r3, r5
 800302e:	1891      	adds	r1, r2, r2
 8003030:	6639      	str	r1, [r7, #96]	; 0x60
 8003032:	415b      	adcs	r3, r3
 8003034:	667b      	str	r3, [r7, #100]	; 0x64
 8003036:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800303a:	4621      	mov	r1, r4
 800303c:	eb12 0801 	adds.w	r8, r2, r1
 8003040:	4629      	mov	r1, r5
 8003042:	eb43 0901 	adc.w	r9, r3, r1
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800305a:	4690      	mov	r8, r2
 800305c:	4699      	mov	r9, r3
 800305e:	4623      	mov	r3, r4
 8003060:	eb18 0303 	adds.w	r3, r8, r3
 8003064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003068:	462b      	mov	r3, r5
 800306a:	eb49 0303 	adc.w	r3, r9, r3
 800306e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003072:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003076:	2200      	movs	r2, #0
 8003078:	469a      	mov	sl, r3
 800307a:	4693      	mov	fp, r2
 800307c:	eb1a 030a 	adds.w	r3, sl, sl
 8003080:	65bb      	str	r3, [r7, #88]	; 0x58
 8003082:	eb4b 030b 	adc.w	r3, fp, fp
 8003086:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003088:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800308c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003090:	f7fd f8ee 	bl	8000270 <__aeabi_uldivmod>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4b64      	ldr	r3, [pc, #400]	; (800322c <LL_USART_SetBaudRate+0x238>)
 800309a:	fba3 2302 	umull	r2, r3, r3, r2
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	b29c      	uxth	r4, r3
 80030a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030aa:	2200      	movs	r2, #0
 80030ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030b0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030b4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80030b8:	4642      	mov	r2, r8
 80030ba:	464b      	mov	r3, r9
 80030bc:	1891      	adds	r1, r2, r2
 80030be:	6539      	str	r1, [r7, #80]	; 0x50
 80030c0:	415b      	adcs	r3, r3
 80030c2:	657b      	str	r3, [r7, #84]	; 0x54
 80030c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030c8:	4641      	mov	r1, r8
 80030ca:	1851      	adds	r1, r2, r1
 80030cc:	64b9      	str	r1, [r7, #72]	; 0x48
 80030ce:	4649      	mov	r1, r9
 80030d0:	414b      	adcs	r3, r1
 80030d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80030e0:	4659      	mov	r1, fp
 80030e2:	00cb      	lsls	r3, r1, #3
 80030e4:	4651      	mov	r1, sl
 80030e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ea:	4651      	mov	r1, sl
 80030ec:	00ca      	lsls	r2, r1, #3
 80030ee:	4610      	mov	r0, r2
 80030f0:	4619      	mov	r1, r3
 80030f2:	4603      	mov	r3, r0
 80030f4:	4642      	mov	r2, r8
 80030f6:	189b      	adds	r3, r3, r2
 80030f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030fc:	464b      	mov	r3, r9
 80030fe:	460a      	mov	r2, r1
 8003100:	eb42 0303 	adc.w	r3, r2, r3
 8003104:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003108:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800310c:	2200      	movs	r2, #0
 800310e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003112:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8003116:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800311a:	460b      	mov	r3, r1
 800311c:	18db      	adds	r3, r3, r3
 800311e:	643b      	str	r3, [r7, #64]	; 0x40
 8003120:	4613      	mov	r3, r2
 8003122:	eb42 0303 	adc.w	r3, r2, r3
 8003126:	647b      	str	r3, [r7, #68]	; 0x44
 8003128:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800312c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003130:	f7fd f89e 	bl	8000270 <__aeabi_uldivmod>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4611      	mov	r1, r2
 800313a:	4b3c      	ldr	r3, [pc, #240]	; (800322c <LL_USART_SetBaudRate+0x238>)
 800313c:	fba3 2301 	umull	r2, r3, r3, r1
 8003140:	095b      	lsrs	r3, r3, #5
 8003142:	2264      	movs	r2, #100	; 0x64
 8003144:	fb02 f303 	mul.w	r3, r2, r3
 8003148:	1acb      	subs	r3, r1, r3
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003150:	4b36      	ldr	r3, [pc, #216]	; (800322c <LL_USART_SetBaudRate+0x238>)
 8003152:	fba3 2302 	umull	r2, r3, r3, r2
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	b29b      	uxth	r3, r3
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	b29b      	uxth	r3, r3
 800315e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003162:	b29b      	uxth	r3, r3
 8003164:	4423      	add	r3, r4
 8003166:	b29c      	uxth	r4, r3
 8003168:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800316c:	2200      	movs	r2, #0
 800316e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003172:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003176:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800317a:	4642      	mov	r2, r8
 800317c:	464b      	mov	r3, r9
 800317e:	1891      	adds	r1, r2, r2
 8003180:	63b9      	str	r1, [r7, #56]	; 0x38
 8003182:	415b      	adcs	r3, r3
 8003184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003186:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800318a:	4641      	mov	r1, r8
 800318c:	1851      	adds	r1, r2, r1
 800318e:	6339      	str	r1, [r7, #48]	; 0x30
 8003190:	4649      	mov	r1, r9
 8003192:	414b      	adcs	r3, r1
 8003194:	637b      	str	r3, [r7, #52]	; 0x34
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031a2:	4659      	mov	r1, fp
 80031a4:	00cb      	lsls	r3, r1, #3
 80031a6:	4651      	mov	r1, sl
 80031a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ac:	4651      	mov	r1, sl
 80031ae:	00ca      	lsls	r2, r1, #3
 80031b0:	4610      	mov	r0, r2
 80031b2:	4619      	mov	r1, r3
 80031b4:	4603      	mov	r3, r0
 80031b6:	4642      	mov	r2, r8
 80031b8:	189b      	adds	r3, r3, r2
 80031ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031be:	464b      	mov	r3, r9
 80031c0:	460a      	mov	r2, r1
 80031c2:	eb42 0303 	adc.w	r3, r2, r3
 80031c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80031ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80031ce:	2200      	movs	r2, #0
 80031d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031d4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80031d8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80031dc:	460b      	mov	r3, r1
 80031de:	18db      	adds	r3, r3, r3
 80031e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031e2:	4613      	mov	r3, r2
 80031e4:	eb42 0303 	adc.w	r3, r2, r3
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031ee:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80031f2:	f7fd f83d 	bl	8000270 <__aeabi_uldivmod>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4b0c      	ldr	r3, [pc, #48]	; (800322c <LL_USART_SetBaudRate+0x238>)
 80031fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003200:	095b      	lsrs	r3, r3, #5
 8003202:	2164      	movs	r1, #100	; 0x64
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	3332      	adds	r3, #50	; 0x32
 800320e:	4a07      	ldr	r2, [pc, #28]	; (800322c <LL_USART_SetBaudRate+0x238>)
 8003210:	fba2 2303 	umull	r2, r3, r2, r3
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	b29b      	uxth	r3, r3
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	b29b      	uxth	r3, r3
 800321e:	4423      	add	r3, r4
 8003220:	b29b      	uxth	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003228:	609a      	str	r2, [r3, #8]
}
 800322a:	e107      	b.n	800343c <LL_USART_SetBaudRate+0x448>
 800322c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003230:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003234:	2200      	movs	r2, #0
 8003236:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800323a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800323e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8003242:	4642      	mov	r2, r8
 8003244:	464b      	mov	r3, r9
 8003246:	1891      	adds	r1, r2, r2
 8003248:	6239      	str	r1, [r7, #32]
 800324a:	415b      	adcs	r3, r3
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
 800324e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003252:	4641      	mov	r1, r8
 8003254:	1854      	adds	r4, r2, r1
 8003256:	4649      	mov	r1, r9
 8003258:	eb43 0501 	adc.w	r5, r3, r1
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	00eb      	lsls	r3, r5, #3
 8003266:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800326a:	00e2      	lsls	r2, r4, #3
 800326c:	4614      	mov	r4, r2
 800326e:	461d      	mov	r5, r3
 8003270:	4643      	mov	r3, r8
 8003272:	18e3      	adds	r3, r4, r3
 8003274:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003278:	464b      	mov	r3, r9
 800327a:	eb45 0303 	adc.w	r3, r5, r3
 800327e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003282:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003286:	2200      	movs	r2, #0
 8003288:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800328c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800329c:	4629      	mov	r1, r5
 800329e:	008b      	lsls	r3, r1, #2
 80032a0:	4621      	mov	r1, r4
 80032a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032a6:	4621      	mov	r1, r4
 80032a8:	008a      	lsls	r2, r1, #2
 80032aa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80032ae:	f7fc ffdf 	bl	8000270 <__aeabi_uldivmod>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4b64      	ldr	r3, [pc, #400]	; (8003448 <LL_USART_SetBaudRate+0x454>)
 80032b8:	fba3 2302 	umull	r2, r3, r3, r2
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	b29b      	uxth	r3, r3
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	b29c      	uxth	r4, r3
 80032c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032c8:	2200      	movs	r2, #0
 80032ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032d2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80032d6:	4642      	mov	r2, r8
 80032d8:	464b      	mov	r3, r9
 80032da:	1891      	adds	r1, r2, r2
 80032dc:	61b9      	str	r1, [r7, #24]
 80032de:	415b      	adcs	r3, r3
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032e6:	4641      	mov	r1, r8
 80032e8:	1851      	adds	r1, r2, r1
 80032ea:	6139      	str	r1, [r7, #16]
 80032ec:	4649      	mov	r1, r9
 80032ee:	414b      	adcs	r3, r1
 80032f0:	617b      	str	r3, [r7, #20]
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032fe:	4659      	mov	r1, fp
 8003300:	00cb      	lsls	r3, r1, #3
 8003302:	4651      	mov	r1, sl
 8003304:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003308:	4651      	mov	r1, sl
 800330a:	00ca      	lsls	r2, r1, #3
 800330c:	4610      	mov	r0, r2
 800330e:	4619      	mov	r1, r3
 8003310:	4603      	mov	r3, r0
 8003312:	4642      	mov	r2, r8
 8003314:	189b      	adds	r3, r3, r2
 8003316:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800331a:	464b      	mov	r3, r9
 800331c:	460a      	mov	r2, r1
 800331e:	eb42 0303 	adc.w	r3, r2, r3
 8003322:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003326:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800332a:	2200      	movs	r2, #0
 800332c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003330:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8003340:	4649      	mov	r1, r9
 8003342:	008b      	lsls	r3, r1, #2
 8003344:	4641      	mov	r1, r8
 8003346:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800334a:	4641      	mov	r1, r8
 800334c:	008a      	lsls	r2, r1, #2
 800334e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003352:	f7fc ff8d 	bl	8000270 <__aeabi_uldivmod>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4b3b      	ldr	r3, [pc, #236]	; (8003448 <LL_USART_SetBaudRate+0x454>)
 800335c:	fba3 1302 	umull	r1, r3, r3, r2
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	2164      	movs	r1, #100	; 0x64
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	3332      	adds	r3, #50	; 0x32
 800336e:	4a36      	ldr	r2, [pc, #216]	; (8003448 <LL_USART_SetBaudRate+0x454>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	b29b      	uxth	r3, r3
 8003378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800337c:	b29b      	uxth	r3, r3
 800337e:	4423      	add	r3, r4
 8003380:	b29c      	uxth	r4, r3
 8003382:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003386:	2200      	movs	r2, #0
 8003388:	67bb      	str	r3, [r7, #120]	; 0x78
 800338a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800338c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003390:	4642      	mov	r2, r8
 8003392:	464b      	mov	r3, r9
 8003394:	1891      	adds	r1, r2, r2
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	415b      	adcs	r3, r3
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033a0:	4641      	mov	r1, r8
 80033a2:	1851      	adds	r1, r2, r1
 80033a4:	6039      	str	r1, [r7, #0]
 80033a6:	4649      	mov	r1, r9
 80033a8:	414b      	adcs	r3, r1
 80033aa:	607b      	str	r3, [r7, #4]
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033b8:	4659      	mov	r1, fp
 80033ba:	00cb      	lsls	r3, r1, #3
 80033bc:	4651      	mov	r1, sl
 80033be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033c2:	4651      	mov	r1, sl
 80033c4:	00ca      	lsls	r2, r1, #3
 80033c6:	4610      	mov	r0, r2
 80033c8:	4619      	mov	r1, r3
 80033ca:	4603      	mov	r3, r0
 80033cc:	4642      	mov	r2, r8
 80033ce:	189b      	adds	r3, r3, r2
 80033d0:	673b      	str	r3, [r7, #112]	; 0x70
 80033d2:	464b      	mov	r3, r9
 80033d4:	460a      	mov	r2, r1
 80033d6:	eb42 0303 	adc.w	r3, r2, r3
 80033da:	677b      	str	r3, [r7, #116]	; 0x74
 80033dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80033e0:	2200      	movs	r2, #0
 80033e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80033e4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 80033f2:	4649      	mov	r1, r9
 80033f4:	008b      	lsls	r3, r1, #2
 80033f6:	4641      	mov	r1, r8
 80033f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033fc:	4641      	mov	r1, r8
 80033fe:	008a      	lsls	r2, r1, #2
 8003400:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003404:	f7fc ff34 	bl	8000270 <__aeabi_uldivmod>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <LL_USART_SetBaudRate+0x454>)
 800340e:	fba3 1302 	umull	r1, r3, r3, r2
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	2164      	movs	r1, #100	; 0x64
 8003416:	fb01 f303 	mul.w	r3, r1, r3
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	3332      	adds	r3, #50	; 0x32
 8003420:	4a09      	ldr	r2, [pc, #36]	; (8003448 <LL_USART_SetBaudRate+0x454>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	b29b      	uxth	r3, r3
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	b29b      	uxth	r3, r3
 8003430:	4423      	add	r3, r4
 8003432:	b29b      	uxth	r3, r3
 8003434:	461a      	mov	r2, r3
 8003436:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800343a:	609a      	str	r2, [r3, #8]
}
 800343c:	bf00      	nop
 800343e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003442:	46bd      	mov	sp, r7
 8003444:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003448:	51eb851f 	.word	0x51eb851f

0800344c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800345a:	2300      	movs	r3, #0
 800345c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff fd8e 	bl	8002f80 <LL_USART_IsEnabled>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d15e      	bne.n	8003528 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003472:	f023 030c 	bic.w	r3, r3, #12
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	6851      	ldr	r1, [r2, #4]
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	68d2      	ldr	r2, [r2, #12]
 800347e:	4311      	orrs	r1, r2
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	6912      	ldr	r2, [r2, #16]
 8003484:	4311      	orrs	r1, r2
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	6992      	ldr	r2, [r2, #24]
 800348a:	430a      	orrs	r2, r1
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	4619      	mov	r1, r3
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7ff fd85 	bl	8002fa8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	4619      	mov	r1, r3
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff fd92 	bl	8002fce <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80034aa:	f107 0308 	add.w	r3, r7, #8
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff f934 	bl	800271c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a1f      	ldr	r2, [pc, #124]	; (8003534 <LL_USART_Init+0xe8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d102      	bne.n	80034c2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	61bb      	str	r3, [r7, #24]
 80034c0:	e021      	b.n	8003506 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a1c      	ldr	r2, [pc, #112]	; (8003538 <LL_USART_Init+0xec>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d102      	bne.n	80034d0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	61bb      	str	r3, [r7, #24]
 80034ce:	e01a      	b.n	8003506 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a1a      	ldr	r2, [pc, #104]	; (800353c <LL_USART_Init+0xf0>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d102      	bne.n	80034de <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	e013      	b.n	8003506 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a17      	ldr	r2, [pc, #92]	; (8003540 <LL_USART_Init+0xf4>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d102      	bne.n	80034ec <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	e00c      	b.n	8003506 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a15      	ldr	r2, [pc, #84]	; (8003544 <LL_USART_Init+0xf8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d102      	bne.n	80034fa <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	61bb      	str	r3, [r7, #24]
 80034f8:	e005      	b.n	8003506 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a12      	ldr	r2, [pc, #72]	; (8003548 <LL_USART_Init+0xfc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d101      	bne.n	8003506 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00d      	beq.n	8003528 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d009      	beq.n	8003528 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003514:	2300      	movs	r3, #0
 8003516:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	699a      	ldr	r2, [r3, #24]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69b9      	ldr	r1, [r7, #24]
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff fd66 	bl	8002ff4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003528:	7ffb      	ldrb	r3, [r7, #31]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3720      	adds	r7, #32
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40011000 	.word	0x40011000
 8003538:	40004400 	.word	0x40004400
 800353c:	40004800 	.word	0x40004800
 8003540:	40011400 	.word	0x40011400
 8003544:	40004c00 	.word	0x40004c00
 8003548:	40005000 	.word	0x40005000

0800354c <LL_InitTick>:
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	fbb2 f3f3 	udiv	r3, r2, r3
 800355e:	4a07      	ldr	r2, [pc, #28]	; (800357c <LL_InitTick+0x30>)
 8003560:	3b01      	subs	r3, #1
 8003562:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003564:	4b05      	ldr	r3, [pc, #20]	; (800357c <LL_InitTick+0x30>)
 8003566:	2200      	movs	r2, #0
 8003568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800356a:	4b04      	ldr	r3, [pc, #16]	; (800357c <LL_InitTick+0x30>)
 800356c:	2205      	movs	r2, #5
 800356e:	601a      	str	r2, [r3, #0]
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	e000e010 	.word	0xe000e010

08003580 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003588:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff ffdd 	bl	800354c <LL_InitTick>
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80035a4:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <LL_SetSystemCoreClock+0x1c>)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6013      	str	r3, [r2, #0]
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	20000000 	.word	0x20000000

080035bc <__errno>:
 80035bc:	4b01      	ldr	r3, [pc, #4]	; (80035c4 <__errno+0x8>)
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	20000004 	.word	0x20000004

080035c8 <__libc_init_array>:
 80035c8:	b570      	push	{r4, r5, r6, lr}
 80035ca:	4d0d      	ldr	r5, [pc, #52]	; (8003600 <__libc_init_array+0x38>)
 80035cc:	4c0d      	ldr	r4, [pc, #52]	; (8003604 <__libc_init_array+0x3c>)
 80035ce:	1b64      	subs	r4, r4, r5
 80035d0:	10a4      	asrs	r4, r4, #2
 80035d2:	2600      	movs	r6, #0
 80035d4:	42a6      	cmp	r6, r4
 80035d6:	d109      	bne.n	80035ec <__libc_init_array+0x24>
 80035d8:	4d0b      	ldr	r5, [pc, #44]	; (8003608 <__libc_init_array+0x40>)
 80035da:	4c0c      	ldr	r4, [pc, #48]	; (800360c <__libc_init_array+0x44>)
 80035dc:	f000 ffae 	bl	800453c <_init>
 80035e0:	1b64      	subs	r4, r4, r5
 80035e2:	10a4      	asrs	r4, r4, #2
 80035e4:	2600      	movs	r6, #0
 80035e6:	42a6      	cmp	r6, r4
 80035e8:	d105      	bne.n	80035f6 <__libc_init_array+0x2e>
 80035ea:	bd70      	pop	{r4, r5, r6, pc}
 80035ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80035f0:	4798      	blx	r3
 80035f2:	3601      	adds	r6, #1
 80035f4:	e7ee      	b.n	80035d4 <__libc_init_array+0xc>
 80035f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80035fa:	4798      	blx	r3
 80035fc:	3601      	adds	r6, #1
 80035fe:	e7f2      	b.n	80035e6 <__libc_init_array+0x1e>
 8003600:	08004690 	.word	0x08004690
 8003604:	08004690 	.word	0x08004690
 8003608:	08004690 	.word	0x08004690
 800360c:	08004694 	.word	0x08004694

08003610 <memset>:
 8003610:	4402      	add	r2, r0
 8003612:	4603      	mov	r3, r0
 8003614:	4293      	cmp	r3, r2
 8003616:	d100      	bne.n	800361a <memset+0xa>
 8003618:	4770      	bx	lr
 800361a:	f803 1b01 	strb.w	r1, [r3], #1
 800361e:	e7f9      	b.n	8003614 <memset+0x4>

08003620 <iprintf>:
 8003620:	b40f      	push	{r0, r1, r2, r3}
 8003622:	4b0a      	ldr	r3, [pc, #40]	; (800364c <iprintf+0x2c>)
 8003624:	b513      	push	{r0, r1, r4, lr}
 8003626:	681c      	ldr	r4, [r3, #0]
 8003628:	b124      	cbz	r4, 8003634 <iprintf+0x14>
 800362a:	69a3      	ldr	r3, [r4, #24]
 800362c:	b913      	cbnz	r3, 8003634 <iprintf+0x14>
 800362e:	4620      	mov	r0, r4
 8003630:	f000 f866 	bl	8003700 <__sinit>
 8003634:	ab05      	add	r3, sp, #20
 8003636:	9a04      	ldr	r2, [sp, #16]
 8003638:	68a1      	ldr	r1, [r4, #8]
 800363a:	9301      	str	r3, [sp, #4]
 800363c:	4620      	mov	r0, r4
 800363e:	f000 f9bd 	bl	80039bc <_vfiprintf_r>
 8003642:	b002      	add	sp, #8
 8003644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003648:	b004      	add	sp, #16
 800364a:	4770      	bx	lr
 800364c:	20000004 	.word	0x20000004

08003650 <std>:
 8003650:	2300      	movs	r3, #0
 8003652:	b510      	push	{r4, lr}
 8003654:	4604      	mov	r4, r0
 8003656:	e9c0 3300 	strd	r3, r3, [r0]
 800365a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800365e:	6083      	str	r3, [r0, #8]
 8003660:	8181      	strh	r1, [r0, #12]
 8003662:	6643      	str	r3, [r0, #100]	; 0x64
 8003664:	81c2      	strh	r2, [r0, #14]
 8003666:	6183      	str	r3, [r0, #24]
 8003668:	4619      	mov	r1, r3
 800366a:	2208      	movs	r2, #8
 800366c:	305c      	adds	r0, #92	; 0x5c
 800366e:	f7ff ffcf 	bl	8003610 <memset>
 8003672:	4b05      	ldr	r3, [pc, #20]	; (8003688 <std+0x38>)
 8003674:	6263      	str	r3, [r4, #36]	; 0x24
 8003676:	4b05      	ldr	r3, [pc, #20]	; (800368c <std+0x3c>)
 8003678:	62a3      	str	r3, [r4, #40]	; 0x28
 800367a:	4b05      	ldr	r3, [pc, #20]	; (8003690 <std+0x40>)
 800367c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <std+0x44>)
 8003680:	6224      	str	r4, [r4, #32]
 8003682:	6323      	str	r3, [r4, #48]	; 0x30
 8003684:	bd10      	pop	{r4, pc}
 8003686:	bf00      	nop
 8003688:	08003f65 	.word	0x08003f65
 800368c:	08003f87 	.word	0x08003f87
 8003690:	08003fbf 	.word	0x08003fbf
 8003694:	08003fe3 	.word	0x08003fe3

08003698 <_cleanup_r>:
 8003698:	4901      	ldr	r1, [pc, #4]	; (80036a0 <_cleanup_r+0x8>)
 800369a:	f000 b8af 	b.w	80037fc <_fwalk_reent>
 800369e:	bf00      	nop
 80036a0:	080042bd 	.word	0x080042bd

080036a4 <__sfmoreglue>:
 80036a4:	b570      	push	{r4, r5, r6, lr}
 80036a6:	2268      	movs	r2, #104	; 0x68
 80036a8:	1e4d      	subs	r5, r1, #1
 80036aa:	4355      	muls	r5, r2
 80036ac:	460e      	mov	r6, r1
 80036ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80036b2:	f000 f8e5 	bl	8003880 <_malloc_r>
 80036b6:	4604      	mov	r4, r0
 80036b8:	b140      	cbz	r0, 80036cc <__sfmoreglue+0x28>
 80036ba:	2100      	movs	r1, #0
 80036bc:	e9c0 1600 	strd	r1, r6, [r0]
 80036c0:	300c      	adds	r0, #12
 80036c2:	60a0      	str	r0, [r4, #8]
 80036c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80036c8:	f7ff ffa2 	bl	8003610 <memset>
 80036cc:	4620      	mov	r0, r4
 80036ce:	bd70      	pop	{r4, r5, r6, pc}

080036d0 <__sfp_lock_acquire>:
 80036d0:	4801      	ldr	r0, [pc, #4]	; (80036d8 <__sfp_lock_acquire+0x8>)
 80036d2:	f000 b8b3 	b.w	800383c <__retarget_lock_acquire_recursive>
 80036d6:	bf00      	nop
 80036d8:	200000b9 	.word	0x200000b9

080036dc <__sfp_lock_release>:
 80036dc:	4801      	ldr	r0, [pc, #4]	; (80036e4 <__sfp_lock_release+0x8>)
 80036de:	f000 b8ae 	b.w	800383e <__retarget_lock_release_recursive>
 80036e2:	bf00      	nop
 80036e4:	200000b9 	.word	0x200000b9

080036e8 <__sinit_lock_acquire>:
 80036e8:	4801      	ldr	r0, [pc, #4]	; (80036f0 <__sinit_lock_acquire+0x8>)
 80036ea:	f000 b8a7 	b.w	800383c <__retarget_lock_acquire_recursive>
 80036ee:	bf00      	nop
 80036f0:	200000ba 	.word	0x200000ba

080036f4 <__sinit_lock_release>:
 80036f4:	4801      	ldr	r0, [pc, #4]	; (80036fc <__sinit_lock_release+0x8>)
 80036f6:	f000 b8a2 	b.w	800383e <__retarget_lock_release_recursive>
 80036fa:	bf00      	nop
 80036fc:	200000ba 	.word	0x200000ba

08003700 <__sinit>:
 8003700:	b510      	push	{r4, lr}
 8003702:	4604      	mov	r4, r0
 8003704:	f7ff fff0 	bl	80036e8 <__sinit_lock_acquire>
 8003708:	69a3      	ldr	r3, [r4, #24]
 800370a:	b11b      	cbz	r3, 8003714 <__sinit+0x14>
 800370c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003710:	f7ff bff0 	b.w	80036f4 <__sinit_lock_release>
 8003714:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003718:	6523      	str	r3, [r4, #80]	; 0x50
 800371a:	4b13      	ldr	r3, [pc, #76]	; (8003768 <__sinit+0x68>)
 800371c:	4a13      	ldr	r2, [pc, #76]	; (800376c <__sinit+0x6c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	62a2      	str	r2, [r4, #40]	; 0x28
 8003722:	42a3      	cmp	r3, r4
 8003724:	bf04      	itt	eq
 8003726:	2301      	moveq	r3, #1
 8003728:	61a3      	streq	r3, [r4, #24]
 800372a:	4620      	mov	r0, r4
 800372c:	f000 f820 	bl	8003770 <__sfp>
 8003730:	6060      	str	r0, [r4, #4]
 8003732:	4620      	mov	r0, r4
 8003734:	f000 f81c 	bl	8003770 <__sfp>
 8003738:	60a0      	str	r0, [r4, #8]
 800373a:	4620      	mov	r0, r4
 800373c:	f000 f818 	bl	8003770 <__sfp>
 8003740:	2200      	movs	r2, #0
 8003742:	60e0      	str	r0, [r4, #12]
 8003744:	2104      	movs	r1, #4
 8003746:	6860      	ldr	r0, [r4, #4]
 8003748:	f7ff ff82 	bl	8003650 <std>
 800374c:	68a0      	ldr	r0, [r4, #8]
 800374e:	2201      	movs	r2, #1
 8003750:	2109      	movs	r1, #9
 8003752:	f7ff ff7d 	bl	8003650 <std>
 8003756:	68e0      	ldr	r0, [r4, #12]
 8003758:	2202      	movs	r2, #2
 800375a:	2112      	movs	r1, #18
 800375c:	f7ff ff78 	bl	8003650 <std>
 8003760:	2301      	movs	r3, #1
 8003762:	61a3      	str	r3, [r4, #24]
 8003764:	e7d2      	b.n	800370c <__sinit+0xc>
 8003766:	bf00      	nop
 8003768:	080045f0 	.word	0x080045f0
 800376c:	08003699 	.word	0x08003699

08003770 <__sfp>:
 8003770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003772:	4607      	mov	r7, r0
 8003774:	f7ff ffac 	bl	80036d0 <__sfp_lock_acquire>
 8003778:	4b1e      	ldr	r3, [pc, #120]	; (80037f4 <__sfp+0x84>)
 800377a:	681e      	ldr	r6, [r3, #0]
 800377c:	69b3      	ldr	r3, [r6, #24]
 800377e:	b913      	cbnz	r3, 8003786 <__sfp+0x16>
 8003780:	4630      	mov	r0, r6
 8003782:	f7ff ffbd 	bl	8003700 <__sinit>
 8003786:	3648      	adds	r6, #72	; 0x48
 8003788:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800378c:	3b01      	subs	r3, #1
 800378e:	d503      	bpl.n	8003798 <__sfp+0x28>
 8003790:	6833      	ldr	r3, [r6, #0]
 8003792:	b30b      	cbz	r3, 80037d8 <__sfp+0x68>
 8003794:	6836      	ldr	r6, [r6, #0]
 8003796:	e7f7      	b.n	8003788 <__sfp+0x18>
 8003798:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800379c:	b9d5      	cbnz	r5, 80037d4 <__sfp+0x64>
 800379e:	4b16      	ldr	r3, [pc, #88]	; (80037f8 <__sfp+0x88>)
 80037a0:	60e3      	str	r3, [r4, #12]
 80037a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80037a6:	6665      	str	r5, [r4, #100]	; 0x64
 80037a8:	f000 f847 	bl	800383a <__retarget_lock_init_recursive>
 80037ac:	f7ff ff96 	bl	80036dc <__sfp_lock_release>
 80037b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80037b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80037b8:	6025      	str	r5, [r4, #0]
 80037ba:	61a5      	str	r5, [r4, #24]
 80037bc:	2208      	movs	r2, #8
 80037be:	4629      	mov	r1, r5
 80037c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80037c4:	f7ff ff24 	bl	8003610 <memset>
 80037c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80037cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80037d0:	4620      	mov	r0, r4
 80037d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037d4:	3468      	adds	r4, #104	; 0x68
 80037d6:	e7d9      	b.n	800378c <__sfp+0x1c>
 80037d8:	2104      	movs	r1, #4
 80037da:	4638      	mov	r0, r7
 80037dc:	f7ff ff62 	bl	80036a4 <__sfmoreglue>
 80037e0:	4604      	mov	r4, r0
 80037e2:	6030      	str	r0, [r6, #0]
 80037e4:	2800      	cmp	r0, #0
 80037e6:	d1d5      	bne.n	8003794 <__sfp+0x24>
 80037e8:	f7ff ff78 	bl	80036dc <__sfp_lock_release>
 80037ec:	230c      	movs	r3, #12
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	e7ee      	b.n	80037d0 <__sfp+0x60>
 80037f2:	bf00      	nop
 80037f4:	080045f0 	.word	0x080045f0
 80037f8:	ffff0001 	.word	0xffff0001

080037fc <_fwalk_reent>:
 80037fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003800:	4606      	mov	r6, r0
 8003802:	4688      	mov	r8, r1
 8003804:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003808:	2700      	movs	r7, #0
 800380a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800380e:	f1b9 0901 	subs.w	r9, r9, #1
 8003812:	d505      	bpl.n	8003820 <_fwalk_reent+0x24>
 8003814:	6824      	ldr	r4, [r4, #0]
 8003816:	2c00      	cmp	r4, #0
 8003818:	d1f7      	bne.n	800380a <_fwalk_reent+0xe>
 800381a:	4638      	mov	r0, r7
 800381c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003820:	89ab      	ldrh	r3, [r5, #12]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d907      	bls.n	8003836 <_fwalk_reent+0x3a>
 8003826:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800382a:	3301      	adds	r3, #1
 800382c:	d003      	beq.n	8003836 <_fwalk_reent+0x3a>
 800382e:	4629      	mov	r1, r5
 8003830:	4630      	mov	r0, r6
 8003832:	47c0      	blx	r8
 8003834:	4307      	orrs	r7, r0
 8003836:	3568      	adds	r5, #104	; 0x68
 8003838:	e7e9      	b.n	800380e <_fwalk_reent+0x12>

0800383a <__retarget_lock_init_recursive>:
 800383a:	4770      	bx	lr

0800383c <__retarget_lock_acquire_recursive>:
 800383c:	4770      	bx	lr

0800383e <__retarget_lock_release_recursive>:
 800383e:	4770      	bx	lr

08003840 <sbrk_aligned>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	4e0e      	ldr	r6, [pc, #56]	; (800387c <sbrk_aligned+0x3c>)
 8003844:	460c      	mov	r4, r1
 8003846:	6831      	ldr	r1, [r6, #0]
 8003848:	4605      	mov	r5, r0
 800384a:	b911      	cbnz	r1, 8003852 <sbrk_aligned+0x12>
 800384c:	f000 fb7a 	bl	8003f44 <_sbrk_r>
 8003850:	6030      	str	r0, [r6, #0]
 8003852:	4621      	mov	r1, r4
 8003854:	4628      	mov	r0, r5
 8003856:	f000 fb75 	bl	8003f44 <_sbrk_r>
 800385a:	1c43      	adds	r3, r0, #1
 800385c:	d00a      	beq.n	8003874 <sbrk_aligned+0x34>
 800385e:	1cc4      	adds	r4, r0, #3
 8003860:	f024 0403 	bic.w	r4, r4, #3
 8003864:	42a0      	cmp	r0, r4
 8003866:	d007      	beq.n	8003878 <sbrk_aligned+0x38>
 8003868:	1a21      	subs	r1, r4, r0
 800386a:	4628      	mov	r0, r5
 800386c:	f000 fb6a 	bl	8003f44 <_sbrk_r>
 8003870:	3001      	adds	r0, #1
 8003872:	d101      	bne.n	8003878 <sbrk_aligned+0x38>
 8003874:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003878:	4620      	mov	r0, r4
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	200000c0 	.word	0x200000c0

08003880 <_malloc_r>:
 8003880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003884:	1ccd      	adds	r5, r1, #3
 8003886:	f025 0503 	bic.w	r5, r5, #3
 800388a:	3508      	adds	r5, #8
 800388c:	2d0c      	cmp	r5, #12
 800388e:	bf38      	it	cc
 8003890:	250c      	movcc	r5, #12
 8003892:	2d00      	cmp	r5, #0
 8003894:	4607      	mov	r7, r0
 8003896:	db01      	blt.n	800389c <_malloc_r+0x1c>
 8003898:	42a9      	cmp	r1, r5
 800389a:	d905      	bls.n	80038a8 <_malloc_r+0x28>
 800389c:	230c      	movs	r3, #12
 800389e:	603b      	str	r3, [r7, #0]
 80038a0:	2600      	movs	r6, #0
 80038a2:	4630      	mov	r0, r6
 80038a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038a8:	4e2e      	ldr	r6, [pc, #184]	; (8003964 <_malloc_r+0xe4>)
 80038aa:	f000 fdbb 	bl	8004424 <__malloc_lock>
 80038ae:	6833      	ldr	r3, [r6, #0]
 80038b0:	461c      	mov	r4, r3
 80038b2:	bb34      	cbnz	r4, 8003902 <_malloc_r+0x82>
 80038b4:	4629      	mov	r1, r5
 80038b6:	4638      	mov	r0, r7
 80038b8:	f7ff ffc2 	bl	8003840 <sbrk_aligned>
 80038bc:	1c43      	adds	r3, r0, #1
 80038be:	4604      	mov	r4, r0
 80038c0:	d14d      	bne.n	800395e <_malloc_r+0xde>
 80038c2:	6834      	ldr	r4, [r6, #0]
 80038c4:	4626      	mov	r6, r4
 80038c6:	2e00      	cmp	r6, #0
 80038c8:	d140      	bne.n	800394c <_malloc_r+0xcc>
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	4631      	mov	r1, r6
 80038ce:	4638      	mov	r0, r7
 80038d0:	eb04 0803 	add.w	r8, r4, r3
 80038d4:	f000 fb36 	bl	8003f44 <_sbrk_r>
 80038d8:	4580      	cmp	r8, r0
 80038da:	d13a      	bne.n	8003952 <_malloc_r+0xd2>
 80038dc:	6821      	ldr	r1, [r4, #0]
 80038de:	3503      	adds	r5, #3
 80038e0:	1a6d      	subs	r5, r5, r1
 80038e2:	f025 0503 	bic.w	r5, r5, #3
 80038e6:	3508      	adds	r5, #8
 80038e8:	2d0c      	cmp	r5, #12
 80038ea:	bf38      	it	cc
 80038ec:	250c      	movcc	r5, #12
 80038ee:	4629      	mov	r1, r5
 80038f0:	4638      	mov	r0, r7
 80038f2:	f7ff ffa5 	bl	8003840 <sbrk_aligned>
 80038f6:	3001      	adds	r0, #1
 80038f8:	d02b      	beq.n	8003952 <_malloc_r+0xd2>
 80038fa:	6823      	ldr	r3, [r4, #0]
 80038fc:	442b      	add	r3, r5
 80038fe:	6023      	str	r3, [r4, #0]
 8003900:	e00e      	b.n	8003920 <_malloc_r+0xa0>
 8003902:	6822      	ldr	r2, [r4, #0]
 8003904:	1b52      	subs	r2, r2, r5
 8003906:	d41e      	bmi.n	8003946 <_malloc_r+0xc6>
 8003908:	2a0b      	cmp	r2, #11
 800390a:	d916      	bls.n	800393a <_malloc_r+0xba>
 800390c:	1961      	adds	r1, r4, r5
 800390e:	42a3      	cmp	r3, r4
 8003910:	6025      	str	r5, [r4, #0]
 8003912:	bf18      	it	ne
 8003914:	6059      	strne	r1, [r3, #4]
 8003916:	6863      	ldr	r3, [r4, #4]
 8003918:	bf08      	it	eq
 800391a:	6031      	streq	r1, [r6, #0]
 800391c:	5162      	str	r2, [r4, r5]
 800391e:	604b      	str	r3, [r1, #4]
 8003920:	4638      	mov	r0, r7
 8003922:	f104 060b 	add.w	r6, r4, #11
 8003926:	f000 fd83 	bl	8004430 <__malloc_unlock>
 800392a:	f026 0607 	bic.w	r6, r6, #7
 800392e:	1d23      	adds	r3, r4, #4
 8003930:	1af2      	subs	r2, r6, r3
 8003932:	d0b6      	beq.n	80038a2 <_malloc_r+0x22>
 8003934:	1b9b      	subs	r3, r3, r6
 8003936:	50a3      	str	r3, [r4, r2]
 8003938:	e7b3      	b.n	80038a2 <_malloc_r+0x22>
 800393a:	6862      	ldr	r2, [r4, #4]
 800393c:	42a3      	cmp	r3, r4
 800393e:	bf0c      	ite	eq
 8003940:	6032      	streq	r2, [r6, #0]
 8003942:	605a      	strne	r2, [r3, #4]
 8003944:	e7ec      	b.n	8003920 <_malloc_r+0xa0>
 8003946:	4623      	mov	r3, r4
 8003948:	6864      	ldr	r4, [r4, #4]
 800394a:	e7b2      	b.n	80038b2 <_malloc_r+0x32>
 800394c:	4634      	mov	r4, r6
 800394e:	6876      	ldr	r6, [r6, #4]
 8003950:	e7b9      	b.n	80038c6 <_malloc_r+0x46>
 8003952:	230c      	movs	r3, #12
 8003954:	603b      	str	r3, [r7, #0]
 8003956:	4638      	mov	r0, r7
 8003958:	f000 fd6a 	bl	8004430 <__malloc_unlock>
 800395c:	e7a1      	b.n	80038a2 <_malloc_r+0x22>
 800395e:	6025      	str	r5, [r4, #0]
 8003960:	e7de      	b.n	8003920 <_malloc_r+0xa0>
 8003962:	bf00      	nop
 8003964:	200000bc 	.word	0x200000bc

08003968 <__sfputc_r>:
 8003968:	6893      	ldr	r3, [r2, #8]
 800396a:	3b01      	subs	r3, #1
 800396c:	2b00      	cmp	r3, #0
 800396e:	b410      	push	{r4}
 8003970:	6093      	str	r3, [r2, #8]
 8003972:	da08      	bge.n	8003986 <__sfputc_r+0x1e>
 8003974:	6994      	ldr	r4, [r2, #24]
 8003976:	42a3      	cmp	r3, r4
 8003978:	db01      	blt.n	800397e <__sfputc_r+0x16>
 800397a:	290a      	cmp	r1, #10
 800397c:	d103      	bne.n	8003986 <__sfputc_r+0x1e>
 800397e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003982:	f000 bb33 	b.w	8003fec <__swbuf_r>
 8003986:	6813      	ldr	r3, [r2, #0]
 8003988:	1c58      	adds	r0, r3, #1
 800398a:	6010      	str	r0, [r2, #0]
 800398c:	7019      	strb	r1, [r3, #0]
 800398e:	4608      	mov	r0, r1
 8003990:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003994:	4770      	bx	lr

08003996 <__sfputs_r>:
 8003996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003998:	4606      	mov	r6, r0
 800399a:	460f      	mov	r7, r1
 800399c:	4614      	mov	r4, r2
 800399e:	18d5      	adds	r5, r2, r3
 80039a0:	42ac      	cmp	r4, r5
 80039a2:	d101      	bne.n	80039a8 <__sfputs_r+0x12>
 80039a4:	2000      	movs	r0, #0
 80039a6:	e007      	b.n	80039b8 <__sfputs_r+0x22>
 80039a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039ac:	463a      	mov	r2, r7
 80039ae:	4630      	mov	r0, r6
 80039b0:	f7ff ffda 	bl	8003968 <__sfputc_r>
 80039b4:	1c43      	adds	r3, r0, #1
 80039b6:	d1f3      	bne.n	80039a0 <__sfputs_r+0xa>
 80039b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039bc <_vfiprintf_r>:
 80039bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c0:	460d      	mov	r5, r1
 80039c2:	b09d      	sub	sp, #116	; 0x74
 80039c4:	4614      	mov	r4, r2
 80039c6:	4698      	mov	r8, r3
 80039c8:	4606      	mov	r6, r0
 80039ca:	b118      	cbz	r0, 80039d4 <_vfiprintf_r+0x18>
 80039cc:	6983      	ldr	r3, [r0, #24]
 80039ce:	b90b      	cbnz	r3, 80039d4 <_vfiprintf_r+0x18>
 80039d0:	f7ff fe96 	bl	8003700 <__sinit>
 80039d4:	4b89      	ldr	r3, [pc, #548]	; (8003bfc <_vfiprintf_r+0x240>)
 80039d6:	429d      	cmp	r5, r3
 80039d8:	d11b      	bne.n	8003a12 <_vfiprintf_r+0x56>
 80039da:	6875      	ldr	r5, [r6, #4]
 80039dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039de:	07d9      	lsls	r1, r3, #31
 80039e0:	d405      	bmi.n	80039ee <_vfiprintf_r+0x32>
 80039e2:	89ab      	ldrh	r3, [r5, #12]
 80039e4:	059a      	lsls	r2, r3, #22
 80039e6:	d402      	bmi.n	80039ee <_vfiprintf_r+0x32>
 80039e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039ea:	f7ff ff27 	bl	800383c <__retarget_lock_acquire_recursive>
 80039ee:	89ab      	ldrh	r3, [r5, #12]
 80039f0:	071b      	lsls	r3, r3, #28
 80039f2:	d501      	bpl.n	80039f8 <_vfiprintf_r+0x3c>
 80039f4:	692b      	ldr	r3, [r5, #16]
 80039f6:	b9eb      	cbnz	r3, 8003a34 <_vfiprintf_r+0x78>
 80039f8:	4629      	mov	r1, r5
 80039fa:	4630      	mov	r0, r6
 80039fc:	f000 fb5a 	bl	80040b4 <__swsetup_r>
 8003a00:	b1c0      	cbz	r0, 8003a34 <_vfiprintf_r+0x78>
 8003a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a04:	07dc      	lsls	r4, r3, #31
 8003a06:	d50e      	bpl.n	8003a26 <_vfiprintf_r+0x6a>
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a0c:	b01d      	add	sp, #116	; 0x74
 8003a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a12:	4b7b      	ldr	r3, [pc, #492]	; (8003c00 <_vfiprintf_r+0x244>)
 8003a14:	429d      	cmp	r5, r3
 8003a16:	d101      	bne.n	8003a1c <_vfiprintf_r+0x60>
 8003a18:	68b5      	ldr	r5, [r6, #8]
 8003a1a:	e7df      	b.n	80039dc <_vfiprintf_r+0x20>
 8003a1c:	4b79      	ldr	r3, [pc, #484]	; (8003c04 <_vfiprintf_r+0x248>)
 8003a1e:	429d      	cmp	r5, r3
 8003a20:	bf08      	it	eq
 8003a22:	68f5      	ldreq	r5, [r6, #12]
 8003a24:	e7da      	b.n	80039dc <_vfiprintf_r+0x20>
 8003a26:	89ab      	ldrh	r3, [r5, #12]
 8003a28:	0598      	lsls	r0, r3, #22
 8003a2a:	d4ed      	bmi.n	8003a08 <_vfiprintf_r+0x4c>
 8003a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a2e:	f7ff ff06 	bl	800383e <__retarget_lock_release_recursive>
 8003a32:	e7e9      	b.n	8003a08 <_vfiprintf_r+0x4c>
 8003a34:	2300      	movs	r3, #0
 8003a36:	9309      	str	r3, [sp, #36]	; 0x24
 8003a38:	2320      	movs	r3, #32
 8003a3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a42:	2330      	movs	r3, #48	; 0x30
 8003a44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003c08 <_vfiprintf_r+0x24c>
 8003a48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a4c:	f04f 0901 	mov.w	r9, #1
 8003a50:	4623      	mov	r3, r4
 8003a52:	469a      	mov	sl, r3
 8003a54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a58:	b10a      	cbz	r2, 8003a5e <_vfiprintf_r+0xa2>
 8003a5a:	2a25      	cmp	r2, #37	; 0x25
 8003a5c:	d1f9      	bne.n	8003a52 <_vfiprintf_r+0x96>
 8003a5e:	ebba 0b04 	subs.w	fp, sl, r4
 8003a62:	d00b      	beq.n	8003a7c <_vfiprintf_r+0xc0>
 8003a64:	465b      	mov	r3, fp
 8003a66:	4622      	mov	r2, r4
 8003a68:	4629      	mov	r1, r5
 8003a6a:	4630      	mov	r0, r6
 8003a6c:	f7ff ff93 	bl	8003996 <__sfputs_r>
 8003a70:	3001      	adds	r0, #1
 8003a72:	f000 80aa 	beq.w	8003bca <_vfiprintf_r+0x20e>
 8003a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a78:	445a      	add	r2, fp
 8003a7a:	9209      	str	r2, [sp, #36]	; 0x24
 8003a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 80a2 	beq.w	8003bca <_vfiprintf_r+0x20e>
 8003a86:	2300      	movs	r3, #0
 8003a88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a90:	f10a 0a01 	add.w	sl, sl, #1
 8003a94:	9304      	str	r3, [sp, #16]
 8003a96:	9307      	str	r3, [sp, #28]
 8003a98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a9c:	931a      	str	r3, [sp, #104]	; 0x68
 8003a9e:	4654      	mov	r4, sl
 8003aa0:	2205      	movs	r2, #5
 8003aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aa6:	4858      	ldr	r0, [pc, #352]	; (8003c08 <_vfiprintf_r+0x24c>)
 8003aa8:	f7fc fb92 	bl	80001d0 <memchr>
 8003aac:	9a04      	ldr	r2, [sp, #16]
 8003aae:	b9d8      	cbnz	r0, 8003ae8 <_vfiprintf_r+0x12c>
 8003ab0:	06d1      	lsls	r1, r2, #27
 8003ab2:	bf44      	itt	mi
 8003ab4:	2320      	movmi	r3, #32
 8003ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003aba:	0713      	lsls	r3, r2, #28
 8003abc:	bf44      	itt	mi
 8003abe:	232b      	movmi	r3, #43	; 0x2b
 8003ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8003aca:	d015      	beq.n	8003af8 <_vfiprintf_r+0x13c>
 8003acc:	9a07      	ldr	r2, [sp, #28]
 8003ace:	4654      	mov	r4, sl
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	f04f 0c0a 	mov.w	ip, #10
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003adc:	3b30      	subs	r3, #48	; 0x30
 8003ade:	2b09      	cmp	r3, #9
 8003ae0:	d94e      	bls.n	8003b80 <_vfiprintf_r+0x1c4>
 8003ae2:	b1b0      	cbz	r0, 8003b12 <_vfiprintf_r+0x156>
 8003ae4:	9207      	str	r2, [sp, #28]
 8003ae6:	e014      	b.n	8003b12 <_vfiprintf_r+0x156>
 8003ae8:	eba0 0308 	sub.w	r3, r0, r8
 8003aec:	fa09 f303 	lsl.w	r3, r9, r3
 8003af0:	4313      	orrs	r3, r2
 8003af2:	9304      	str	r3, [sp, #16]
 8003af4:	46a2      	mov	sl, r4
 8003af6:	e7d2      	b.n	8003a9e <_vfiprintf_r+0xe2>
 8003af8:	9b03      	ldr	r3, [sp, #12]
 8003afa:	1d19      	adds	r1, r3, #4
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	9103      	str	r1, [sp, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	bfbb      	ittet	lt
 8003b04:	425b      	neglt	r3, r3
 8003b06:	f042 0202 	orrlt.w	r2, r2, #2
 8003b0a:	9307      	strge	r3, [sp, #28]
 8003b0c:	9307      	strlt	r3, [sp, #28]
 8003b0e:	bfb8      	it	lt
 8003b10:	9204      	strlt	r2, [sp, #16]
 8003b12:	7823      	ldrb	r3, [r4, #0]
 8003b14:	2b2e      	cmp	r3, #46	; 0x2e
 8003b16:	d10c      	bne.n	8003b32 <_vfiprintf_r+0x176>
 8003b18:	7863      	ldrb	r3, [r4, #1]
 8003b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8003b1c:	d135      	bne.n	8003b8a <_vfiprintf_r+0x1ce>
 8003b1e:	9b03      	ldr	r3, [sp, #12]
 8003b20:	1d1a      	adds	r2, r3, #4
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	9203      	str	r2, [sp, #12]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	bfb8      	it	lt
 8003b2a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003b2e:	3402      	adds	r4, #2
 8003b30:	9305      	str	r3, [sp, #20]
 8003b32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003c18 <_vfiprintf_r+0x25c>
 8003b36:	7821      	ldrb	r1, [r4, #0]
 8003b38:	2203      	movs	r2, #3
 8003b3a:	4650      	mov	r0, sl
 8003b3c:	f7fc fb48 	bl	80001d0 <memchr>
 8003b40:	b140      	cbz	r0, 8003b54 <_vfiprintf_r+0x198>
 8003b42:	2340      	movs	r3, #64	; 0x40
 8003b44:	eba0 000a 	sub.w	r0, r0, sl
 8003b48:	fa03 f000 	lsl.w	r0, r3, r0
 8003b4c:	9b04      	ldr	r3, [sp, #16]
 8003b4e:	4303      	orrs	r3, r0
 8003b50:	3401      	adds	r4, #1
 8003b52:	9304      	str	r3, [sp, #16]
 8003b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b58:	482c      	ldr	r0, [pc, #176]	; (8003c0c <_vfiprintf_r+0x250>)
 8003b5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b5e:	2206      	movs	r2, #6
 8003b60:	f7fc fb36 	bl	80001d0 <memchr>
 8003b64:	2800      	cmp	r0, #0
 8003b66:	d03f      	beq.n	8003be8 <_vfiprintf_r+0x22c>
 8003b68:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <_vfiprintf_r+0x254>)
 8003b6a:	bb1b      	cbnz	r3, 8003bb4 <_vfiprintf_r+0x1f8>
 8003b6c:	9b03      	ldr	r3, [sp, #12]
 8003b6e:	3307      	adds	r3, #7
 8003b70:	f023 0307 	bic.w	r3, r3, #7
 8003b74:	3308      	adds	r3, #8
 8003b76:	9303      	str	r3, [sp, #12]
 8003b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b7a:	443b      	add	r3, r7
 8003b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b7e:	e767      	b.n	8003a50 <_vfiprintf_r+0x94>
 8003b80:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b84:	460c      	mov	r4, r1
 8003b86:	2001      	movs	r0, #1
 8003b88:	e7a5      	b.n	8003ad6 <_vfiprintf_r+0x11a>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	3401      	adds	r4, #1
 8003b8e:	9305      	str	r3, [sp, #20]
 8003b90:	4619      	mov	r1, r3
 8003b92:	f04f 0c0a 	mov.w	ip, #10
 8003b96:	4620      	mov	r0, r4
 8003b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b9c:	3a30      	subs	r2, #48	; 0x30
 8003b9e:	2a09      	cmp	r2, #9
 8003ba0:	d903      	bls.n	8003baa <_vfiprintf_r+0x1ee>
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0c5      	beq.n	8003b32 <_vfiprintf_r+0x176>
 8003ba6:	9105      	str	r1, [sp, #20]
 8003ba8:	e7c3      	b.n	8003b32 <_vfiprintf_r+0x176>
 8003baa:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bae:	4604      	mov	r4, r0
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e7f0      	b.n	8003b96 <_vfiprintf_r+0x1da>
 8003bb4:	ab03      	add	r3, sp, #12
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	462a      	mov	r2, r5
 8003bba:	4b16      	ldr	r3, [pc, #88]	; (8003c14 <_vfiprintf_r+0x258>)
 8003bbc:	a904      	add	r1, sp, #16
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	f3af 8000 	nop.w
 8003bc4:	4607      	mov	r7, r0
 8003bc6:	1c78      	adds	r0, r7, #1
 8003bc8:	d1d6      	bne.n	8003b78 <_vfiprintf_r+0x1bc>
 8003bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003bcc:	07d9      	lsls	r1, r3, #31
 8003bce:	d405      	bmi.n	8003bdc <_vfiprintf_r+0x220>
 8003bd0:	89ab      	ldrh	r3, [r5, #12]
 8003bd2:	059a      	lsls	r2, r3, #22
 8003bd4:	d402      	bmi.n	8003bdc <_vfiprintf_r+0x220>
 8003bd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bd8:	f7ff fe31 	bl	800383e <__retarget_lock_release_recursive>
 8003bdc:	89ab      	ldrh	r3, [r5, #12]
 8003bde:	065b      	lsls	r3, r3, #25
 8003be0:	f53f af12 	bmi.w	8003a08 <_vfiprintf_r+0x4c>
 8003be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003be6:	e711      	b.n	8003a0c <_vfiprintf_r+0x50>
 8003be8:	ab03      	add	r3, sp, #12
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	462a      	mov	r2, r5
 8003bee:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <_vfiprintf_r+0x258>)
 8003bf0:	a904      	add	r1, sp, #16
 8003bf2:	4630      	mov	r0, r6
 8003bf4:	f000 f880 	bl	8003cf8 <_printf_i>
 8003bf8:	e7e4      	b.n	8003bc4 <_vfiprintf_r+0x208>
 8003bfa:	bf00      	nop
 8003bfc:	08004614 	.word	0x08004614
 8003c00:	08004634 	.word	0x08004634
 8003c04:	080045f4 	.word	0x080045f4
 8003c08:	08004654 	.word	0x08004654
 8003c0c:	0800465e 	.word	0x0800465e
 8003c10:	00000000 	.word	0x00000000
 8003c14:	08003997 	.word	0x08003997
 8003c18:	0800465a 	.word	0x0800465a

08003c1c <_printf_common>:
 8003c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c20:	4616      	mov	r6, r2
 8003c22:	4699      	mov	r9, r3
 8003c24:	688a      	ldr	r2, [r1, #8]
 8003c26:	690b      	ldr	r3, [r1, #16]
 8003c28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	bfb8      	it	lt
 8003c30:	4613      	movlt	r3, r2
 8003c32:	6033      	str	r3, [r6, #0]
 8003c34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c38:	4607      	mov	r7, r0
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	b10a      	cbz	r2, 8003c42 <_printf_common+0x26>
 8003c3e:	3301      	adds	r3, #1
 8003c40:	6033      	str	r3, [r6, #0]
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	0699      	lsls	r1, r3, #26
 8003c46:	bf42      	ittt	mi
 8003c48:	6833      	ldrmi	r3, [r6, #0]
 8003c4a:	3302      	addmi	r3, #2
 8003c4c:	6033      	strmi	r3, [r6, #0]
 8003c4e:	6825      	ldr	r5, [r4, #0]
 8003c50:	f015 0506 	ands.w	r5, r5, #6
 8003c54:	d106      	bne.n	8003c64 <_printf_common+0x48>
 8003c56:	f104 0a19 	add.w	sl, r4, #25
 8003c5a:	68e3      	ldr	r3, [r4, #12]
 8003c5c:	6832      	ldr	r2, [r6, #0]
 8003c5e:	1a9b      	subs	r3, r3, r2
 8003c60:	42ab      	cmp	r3, r5
 8003c62:	dc26      	bgt.n	8003cb2 <_printf_common+0x96>
 8003c64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c68:	1e13      	subs	r3, r2, #0
 8003c6a:	6822      	ldr	r2, [r4, #0]
 8003c6c:	bf18      	it	ne
 8003c6e:	2301      	movne	r3, #1
 8003c70:	0692      	lsls	r2, r2, #26
 8003c72:	d42b      	bmi.n	8003ccc <_printf_common+0xb0>
 8003c74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c78:	4649      	mov	r1, r9
 8003c7a:	4638      	mov	r0, r7
 8003c7c:	47c0      	blx	r8
 8003c7e:	3001      	adds	r0, #1
 8003c80:	d01e      	beq.n	8003cc0 <_printf_common+0xa4>
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	68e5      	ldr	r5, [r4, #12]
 8003c86:	6832      	ldr	r2, [r6, #0]
 8003c88:	f003 0306 	and.w	r3, r3, #6
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	bf08      	it	eq
 8003c90:	1aad      	subeq	r5, r5, r2
 8003c92:	68a3      	ldr	r3, [r4, #8]
 8003c94:	6922      	ldr	r2, [r4, #16]
 8003c96:	bf0c      	ite	eq
 8003c98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c9c:	2500      	movne	r5, #0
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	bfc4      	itt	gt
 8003ca2:	1a9b      	subgt	r3, r3, r2
 8003ca4:	18ed      	addgt	r5, r5, r3
 8003ca6:	2600      	movs	r6, #0
 8003ca8:	341a      	adds	r4, #26
 8003caa:	42b5      	cmp	r5, r6
 8003cac:	d11a      	bne.n	8003ce4 <_printf_common+0xc8>
 8003cae:	2000      	movs	r0, #0
 8003cb0:	e008      	b.n	8003cc4 <_printf_common+0xa8>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	4652      	mov	r2, sl
 8003cb6:	4649      	mov	r1, r9
 8003cb8:	4638      	mov	r0, r7
 8003cba:	47c0      	blx	r8
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	d103      	bne.n	8003cc8 <_printf_common+0xac>
 8003cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc8:	3501      	adds	r5, #1
 8003cca:	e7c6      	b.n	8003c5a <_printf_common+0x3e>
 8003ccc:	18e1      	adds	r1, r4, r3
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	2030      	movs	r0, #48	; 0x30
 8003cd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cd6:	4422      	add	r2, r4
 8003cd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	e7c7      	b.n	8003c74 <_printf_common+0x58>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	4649      	mov	r1, r9
 8003cea:	4638      	mov	r0, r7
 8003cec:	47c0      	blx	r8
 8003cee:	3001      	adds	r0, #1
 8003cf0:	d0e6      	beq.n	8003cc0 <_printf_common+0xa4>
 8003cf2:	3601      	adds	r6, #1
 8003cf4:	e7d9      	b.n	8003caa <_printf_common+0x8e>
	...

08003cf8 <_printf_i>:
 8003cf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cfc:	7e0f      	ldrb	r7, [r1, #24]
 8003cfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d00:	2f78      	cmp	r7, #120	; 0x78
 8003d02:	4691      	mov	r9, r2
 8003d04:	4680      	mov	r8, r0
 8003d06:	460c      	mov	r4, r1
 8003d08:	469a      	mov	sl, r3
 8003d0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d0e:	d807      	bhi.n	8003d20 <_printf_i+0x28>
 8003d10:	2f62      	cmp	r7, #98	; 0x62
 8003d12:	d80a      	bhi.n	8003d2a <_printf_i+0x32>
 8003d14:	2f00      	cmp	r7, #0
 8003d16:	f000 80d8 	beq.w	8003eca <_printf_i+0x1d2>
 8003d1a:	2f58      	cmp	r7, #88	; 0x58
 8003d1c:	f000 80a3 	beq.w	8003e66 <_printf_i+0x16e>
 8003d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d28:	e03a      	b.n	8003da0 <_printf_i+0xa8>
 8003d2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d2e:	2b15      	cmp	r3, #21
 8003d30:	d8f6      	bhi.n	8003d20 <_printf_i+0x28>
 8003d32:	a101      	add	r1, pc, #4	; (adr r1, 8003d38 <_printf_i+0x40>)
 8003d34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d38:	08003d91 	.word	0x08003d91
 8003d3c:	08003da5 	.word	0x08003da5
 8003d40:	08003d21 	.word	0x08003d21
 8003d44:	08003d21 	.word	0x08003d21
 8003d48:	08003d21 	.word	0x08003d21
 8003d4c:	08003d21 	.word	0x08003d21
 8003d50:	08003da5 	.word	0x08003da5
 8003d54:	08003d21 	.word	0x08003d21
 8003d58:	08003d21 	.word	0x08003d21
 8003d5c:	08003d21 	.word	0x08003d21
 8003d60:	08003d21 	.word	0x08003d21
 8003d64:	08003eb1 	.word	0x08003eb1
 8003d68:	08003dd5 	.word	0x08003dd5
 8003d6c:	08003e93 	.word	0x08003e93
 8003d70:	08003d21 	.word	0x08003d21
 8003d74:	08003d21 	.word	0x08003d21
 8003d78:	08003ed3 	.word	0x08003ed3
 8003d7c:	08003d21 	.word	0x08003d21
 8003d80:	08003dd5 	.word	0x08003dd5
 8003d84:	08003d21 	.word	0x08003d21
 8003d88:	08003d21 	.word	0x08003d21
 8003d8c:	08003e9b 	.word	0x08003e9b
 8003d90:	682b      	ldr	r3, [r5, #0]
 8003d92:	1d1a      	adds	r2, r3, #4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	602a      	str	r2, [r5, #0]
 8003d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003da0:	2301      	movs	r3, #1
 8003da2:	e0a3      	b.n	8003eec <_printf_i+0x1f4>
 8003da4:	6820      	ldr	r0, [r4, #0]
 8003da6:	6829      	ldr	r1, [r5, #0]
 8003da8:	0606      	lsls	r6, r0, #24
 8003daa:	f101 0304 	add.w	r3, r1, #4
 8003dae:	d50a      	bpl.n	8003dc6 <_printf_i+0xce>
 8003db0:	680e      	ldr	r6, [r1, #0]
 8003db2:	602b      	str	r3, [r5, #0]
 8003db4:	2e00      	cmp	r6, #0
 8003db6:	da03      	bge.n	8003dc0 <_printf_i+0xc8>
 8003db8:	232d      	movs	r3, #45	; 0x2d
 8003dba:	4276      	negs	r6, r6
 8003dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dc0:	485e      	ldr	r0, [pc, #376]	; (8003f3c <_printf_i+0x244>)
 8003dc2:	230a      	movs	r3, #10
 8003dc4:	e019      	b.n	8003dfa <_printf_i+0x102>
 8003dc6:	680e      	ldr	r6, [r1, #0]
 8003dc8:	602b      	str	r3, [r5, #0]
 8003dca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003dce:	bf18      	it	ne
 8003dd0:	b236      	sxthne	r6, r6
 8003dd2:	e7ef      	b.n	8003db4 <_printf_i+0xbc>
 8003dd4:	682b      	ldr	r3, [r5, #0]
 8003dd6:	6820      	ldr	r0, [r4, #0]
 8003dd8:	1d19      	adds	r1, r3, #4
 8003dda:	6029      	str	r1, [r5, #0]
 8003ddc:	0601      	lsls	r1, r0, #24
 8003dde:	d501      	bpl.n	8003de4 <_printf_i+0xec>
 8003de0:	681e      	ldr	r6, [r3, #0]
 8003de2:	e002      	b.n	8003dea <_printf_i+0xf2>
 8003de4:	0646      	lsls	r6, r0, #25
 8003de6:	d5fb      	bpl.n	8003de0 <_printf_i+0xe8>
 8003de8:	881e      	ldrh	r6, [r3, #0]
 8003dea:	4854      	ldr	r0, [pc, #336]	; (8003f3c <_printf_i+0x244>)
 8003dec:	2f6f      	cmp	r7, #111	; 0x6f
 8003dee:	bf0c      	ite	eq
 8003df0:	2308      	moveq	r3, #8
 8003df2:	230a      	movne	r3, #10
 8003df4:	2100      	movs	r1, #0
 8003df6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dfa:	6865      	ldr	r5, [r4, #4]
 8003dfc:	60a5      	str	r5, [r4, #8]
 8003dfe:	2d00      	cmp	r5, #0
 8003e00:	bfa2      	ittt	ge
 8003e02:	6821      	ldrge	r1, [r4, #0]
 8003e04:	f021 0104 	bicge.w	r1, r1, #4
 8003e08:	6021      	strge	r1, [r4, #0]
 8003e0a:	b90e      	cbnz	r6, 8003e10 <_printf_i+0x118>
 8003e0c:	2d00      	cmp	r5, #0
 8003e0e:	d04d      	beq.n	8003eac <_printf_i+0x1b4>
 8003e10:	4615      	mov	r5, r2
 8003e12:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e16:	fb03 6711 	mls	r7, r3, r1, r6
 8003e1a:	5dc7      	ldrb	r7, [r0, r7]
 8003e1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e20:	4637      	mov	r7, r6
 8003e22:	42bb      	cmp	r3, r7
 8003e24:	460e      	mov	r6, r1
 8003e26:	d9f4      	bls.n	8003e12 <_printf_i+0x11a>
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d10b      	bne.n	8003e44 <_printf_i+0x14c>
 8003e2c:	6823      	ldr	r3, [r4, #0]
 8003e2e:	07de      	lsls	r6, r3, #31
 8003e30:	d508      	bpl.n	8003e44 <_printf_i+0x14c>
 8003e32:	6923      	ldr	r3, [r4, #16]
 8003e34:	6861      	ldr	r1, [r4, #4]
 8003e36:	4299      	cmp	r1, r3
 8003e38:	bfde      	ittt	le
 8003e3a:	2330      	movle	r3, #48	; 0x30
 8003e3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003e44:	1b52      	subs	r2, r2, r5
 8003e46:	6122      	str	r2, [r4, #16]
 8003e48:	f8cd a000 	str.w	sl, [sp]
 8003e4c:	464b      	mov	r3, r9
 8003e4e:	aa03      	add	r2, sp, #12
 8003e50:	4621      	mov	r1, r4
 8003e52:	4640      	mov	r0, r8
 8003e54:	f7ff fee2 	bl	8003c1c <_printf_common>
 8003e58:	3001      	adds	r0, #1
 8003e5a:	d14c      	bne.n	8003ef6 <_printf_i+0x1fe>
 8003e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e60:	b004      	add	sp, #16
 8003e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e66:	4835      	ldr	r0, [pc, #212]	; (8003f3c <_printf_i+0x244>)
 8003e68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e6c:	6829      	ldr	r1, [r5, #0]
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e74:	6029      	str	r1, [r5, #0]
 8003e76:	061d      	lsls	r5, r3, #24
 8003e78:	d514      	bpl.n	8003ea4 <_printf_i+0x1ac>
 8003e7a:	07df      	lsls	r7, r3, #31
 8003e7c:	bf44      	itt	mi
 8003e7e:	f043 0320 	orrmi.w	r3, r3, #32
 8003e82:	6023      	strmi	r3, [r4, #0]
 8003e84:	b91e      	cbnz	r6, 8003e8e <_printf_i+0x196>
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	f023 0320 	bic.w	r3, r3, #32
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	2310      	movs	r3, #16
 8003e90:	e7b0      	b.n	8003df4 <_printf_i+0xfc>
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	f043 0320 	orr.w	r3, r3, #32
 8003e98:	6023      	str	r3, [r4, #0]
 8003e9a:	2378      	movs	r3, #120	; 0x78
 8003e9c:	4828      	ldr	r0, [pc, #160]	; (8003f40 <_printf_i+0x248>)
 8003e9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ea2:	e7e3      	b.n	8003e6c <_printf_i+0x174>
 8003ea4:	0659      	lsls	r1, r3, #25
 8003ea6:	bf48      	it	mi
 8003ea8:	b2b6      	uxthmi	r6, r6
 8003eaa:	e7e6      	b.n	8003e7a <_printf_i+0x182>
 8003eac:	4615      	mov	r5, r2
 8003eae:	e7bb      	b.n	8003e28 <_printf_i+0x130>
 8003eb0:	682b      	ldr	r3, [r5, #0]
 8003eb2:	6826      	ldr	r6, [r4, #0]
 8003eb4:	6961      	ldr	r1, [r4, #20]
 8003eb6:	1d18      	adds	r0, r3, #4
 8003eb8:	6028      	str	r0, [r5, #0]
 8003eba:	0635      	lsls	r5, r6, #24
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	d501      	bpl.n	8003ec4 <_printf_i+0x1cc>
 8003ec0:	6019      	str	r1, [r3, #0]
 8003ec2:	e002      	b.n	8003eca <_printf_i+0x1d2>
 8003ec4:	0670      	lsls	r0, r6, #25
 8003ec6:	d5fb      	bpl.n	8003ec0 <_printf_i+0x1c8>
 8003ec8:	8019      	strh	r1, [r3, #0]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	6123      	str	r3, [r4, #16]
 8003ece:	4615      	mov	r5, r2
 8003ed0:	e7ba      	b.n	8003e48 <_printf_i+0x150>
 8003ed2:	682b      	ldr	r3, [r5, #0]
 8003ed4:	1d1a      	adds	r2, r3, #4
 8003ed6:	602a      	str	r2, [r5, #0]
 8003ed8:	681d      	ldr	r5, [r3, #0]
 8003eda:	6862      	ldr	r2, [r4, #4]
 8003edc:	2100      	movs	r1, #0
 8003ede:	4628      	mov	r0, r5
 8003ee0:	f7fc f976 	bl	80001d0 <memchr>
 8003ee4:	b108      	cbz	r0, 8003eea <_printf_i+0x1f2>
 8003ee6:	1b40      	subs	r0, r0, r5
 8003ee8:	6060      	str	r0, [r4, #4]
 8003eea:	6863      	ldr	r3, [r4, #4]
 8003eec:	6123      	str	r3, [r4, #16]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ef4:	e7a8      	b.n	8003e48 <_printf_i+0x150>
 8003ef6:	6923      	ldr	r3, [r4, #16]
 8003ef8:	462a      	mov	r2, r5
 8003efa:	4649      	mov	r1, r9
 8003efc:	4640      	mov	r0, r8
 8003efe:	47d0      	blx	sl
 8003f00:	3001      	adds	r0, #1
 8003f02:	d0ab      	beq.n	8003e5c <_printf_i+0x164>
 8003f04:	6823      	ldr	r3, [r4, #0]
 8003f06:	079b      	lsls	r3, r3, #30
 8003f08:	d413      	bmi.n	8003f32 <_printf_i+0x23a>
 8003f0a:	68e0      	ldr	r0, [r4, #12]
 8003f0c:	9b03      	ldr	r3, [sp, #12]
 8003f0e:	4298      	cmp	r0, r3
 8003f10:	bfb8      	it	lt
 8003f12:	4618      	movlt	r0, r3
 8003f14:	e7a4      	b.n	8003e60 <_printf_i+0x168>
 8003f16:	2301      	movs	r3, #1
 8003f18:	4632      	mov	r2, r6
 8003f1a:	4649      	mov	r1, r9
 8003f1c:	4640      	mov	r0, r8
 8003f1e:	47d0      	blx	sl
 8003f20:	3001      	adds	r0, #1
 8003f22:	d09b      	beq.n	8003e5c <_printf_i+0x164>
 8003f24:	3501      	adds	r5, #1
 8003f26:	68e3      	ldr	r3, [r4, #12]
 8003f28:	9903      	ldr	r1, [sp, #12]
 8003f2a:	1a5b      	subs	r3, r3, r1
 8003f2c:	42ab      	cmp	r3, r5
 8003f2e:	dcf2      	bgt.n	8003f16 <_printf_i+0x21e>
 8003f30:	e7eb      	b.n	8003f0a <_printf_i+0x212>
 8003f32:	2500      	movs	r5, #0
 8003f34:	f104 0619 	add.w	r6, r4, #25
 8003f38:	e7f5      	b.n	8003f26 <_printf_i+0x22e>
 8003f3a:	bf00      	nop
 8003f3c:	08004665 	.word	0x08004665
 8003f40:	08004676 	.word	0x08004676

08003f44 <_sbrk_r>:
 8003f44:	b538      	push	{r3, r4, r5, lr}
 8003f46:	4d06      	ldr	r5, [pc, #24]	; (8003f60 <_sbrk_r+0x1c>)
 8003f48:	2300      	movs	r3, #0
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	602b      	str	r3, [r5, #0]
 8003f50:	f7fd fdc0 	bl	8001ad4 <_sbrk>
 8003f54:	1c43      	adds	r3, r0, #1
 8003f56:	d102      	bne.n	8003f5e <_sbrk_r+0x1a>
 8003f58:	682b      	ldr	r3, [r5, #0]
 8003f5a:	b103      	cbz	r3, 8003f5e <_sbrk_r+0x1a>
 8003f5c:	6023      	str	r3, [r4, #0]
 8003f5e:	bd38      	pop	{r3, r4, r5, pc}
 8003f60:	200000c4 	.word	0x200000c4

08003f64 <__sread>:
 8003f64:	b510      	push	{r4, lr}
 8003f66:	460c      	mov	r4, r1
 8003f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f6c:	f000 fab2 	bl	80044d4 <_read_r>
 8003f70:	2800      	cmp	r0, #0
 8003f72:	bfab      	itete	ge
 8003f74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f76:	89a3      	ldrhlt	r3, [r4, #12]
 8003f78:	181b      	addge	r3, r3, r0
 8003f7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f7e:	bfac      	ite	ge
 8003f80:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f82:	81a3      	strhlt	r3, [r4, #12]
 8003f84:	bd10      	pop	{r4, pc}

08003f86 <__swrite>:
 8003f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8a:	461f      	mov	r7, r3
 8003f8c:	898b      	ldrh	r3, [r1, #12]
 8003f8e:	05db      	lsls	r3, r3, #23
 8003f90:	4605      	mov	r5, r0
 8003f92:	460c      	mov	r4, r1
 8003f94:	4616      	mov	r6, r2
 8003f96:	d505      	bpl.n	8003fa4 <__swrite+0x1e>
 8003f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f000 f9c8 	bl	8004334 <_lseek_r>
 8003fa4:	89a3      	ldrh	r3, [r4, #12]
 8003fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003faa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fae:	81a3      	strh	r3, [r4, #12]
 8003fb0:	4632      	mov	r2, r6
 8003fb2:	463b      	mov	r3, r7
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fba:	f000 b869 	b.w	8004090 <_write_r>

08003fbe <__sseek>:
 8003fbe:	b510      	push	{r4, lr}
 8003fc0:	460c      	mov	r4, r1
 8003fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fc6:	f000 f9b5 	bl	8004334 <_lseek_r>
 8003fca:	1c43      	adds	r3, r0, #1
 8003fcc:	89a3      	ldrh	r3, [r4, #12]
 8003fce:	bf15      	itete	ne
 8003fd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003fd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003fd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003fda:	81a3      	strheq	r3, [r4, #12]
 8003fdc:	bf18      	it	ne
 8003fde:	81a3      	strhne	r3, [r4, #12]
 8003fe0:	bd10      	pop	{r4, pc}

08003fe2 <__sclose>:
 8003fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fe6:	f000 b8d3 	b.w	8004190 <_close_r>
	...

08003fec <__swbuf_r>:
 8003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fee:	460e      	mov	r6, r1
 8003ff0:	4614      	mov	r4, r2
 8003ff2:	4605      	mov	r5, r0
 8003ff4:	b118      	cbz	r0, 8003ffe <__swbuf_r+0x12>
 8003ff6:	6983      	ldr	r3, [r0, #24]
 8003ff8:	b90b      	cbnz	r3, 8003ffe <__swbuf_r+0x12>
 8003ffa:	f7ff fb81 	bl	8003700 <__sinit>
 8003ffe:	4b21      	ldr	r3, [pc, #132]	; (8004084 <__swbuf_r+0x98>)
 8004000:	429c      	cmp	r4, r3
 8004002:	d12b      	bne.n	800405c <__swbuf_r+0x70>
 8004004:	686c      	ldr	r4, [r5, #4]
 8004006:	69a3      	ldr	r3, [r4, #24]
 8004008:	60a3      	str	r3, [r4, #8]
 800400a:	89a3      	ldrh	r3, [r4, #12]
 800400c:	071a      	lsls	r2, r3, #28
 800400e:	d52f      	bpl.n	8004070 <__swbuf_r+0x84>
 8004010:	6923      	ldr	r3, [r4, #16]
 8004012:	b36b      	cbz	r3, 8004070 <__swbuf_r+0x84>
 8004014:	6923      	ldr	r3, [r4, #16]
 8004016:	6820      	ldr	r0, [r4, #0]
 8004018:	1ac0      	subs	r0, r0, r3
 800401a:	6963      	ldr	r3, [r4, #20]
 800401c:	b2f6      	uxtb	r6, r6
 800401e:	4283      	cmp	r3, r0
 8004020:	4637      	mov	r7, r6
 8004022:	dc04      	bgt.n	800402e <__swbuf_r+0x42>
 8004024:	4621      	mov	r1, r4
 8004026:	4628      	mov	r0, r5
 8004028:	f000 f948 	bl	80042bc <_fflush_r>
 800402c:	bb30      	cbnz	r0, 800407c <__swbuf_r+0x90>
 800402e:	68a3      	ldr	r3, [r4, #8]
 8004030:	3b01      	subs	r3, #1
 8004032:	60a3      	str	r3, [r4, #8]
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	6022      	str	r2, [r4, #0]
 800403a:	701e      	strb	r6, [r3, #0]
 800403c:	6963      	ldr	r3, [r4, #20]
 800403e:	3001      	adds	r0, #1
 8004040:	4283      	cmp	r3, r0
 8004042:	d004      	beq.n	800404e <__swbuf_r+0x62>
 8004044:	89a3      	ldrh	r3, [r4, #12]
 8004046:	07db      	lsls	r3, r3, #31
 8004048:	d506      	bpl.n	8004058 <__swbuf_r+0x6c>
 800404a:	2e0a      	cmp	r6, #10
 800404c:	d104      	bne.n	8004058 <__swbuf_r+0x6c>
 800404e:	4621      	mov	r1, r4
 8004050:	4628      	mov	r0, r5
 8004052:	f000 f933 	bl	80042bc <_fflush_r>
 8004056:	b988      	cbnz	r0, 800407c <__swbuf_r+0x90>
 8004058:	4638      	mov	r0, r7
 800405a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800405c:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <__swbuf_r+0x9c>)
 800405e:	429c      	cmp	r4, r3
 8004060:	d101      	bne.n	8004066 <__swbuf_r+0x7a>
 8004062:	68ac      	ldr	r4, [r5, #8]
 8004064:	e7cf      	b.n	8004006 <__swbuf_r+0x1a>
 8004066:	4b09      	ldr	r3, [pc, #36]	; (800408c <__swbuf_r+0xa0>)
 8004068:	429c      	cmp	r4, r3
 800406a:	bf08      	it	eq
 800406c:	68ec      	ldreq	r4, [r5, #12]
 800406e:	e7ca      	b.n	8004006 <__swbuf_r+0x1a>
 8004070:	4621      	mov	r1, r4
 8004072:	4628      	mov	r0, r5
 8004074:	f000 f81e 	bl	80040b4 <__swsetup_r>
 8004078:	2800      	cmp	r0, #0
 800407a:	d0cb      	beq.n	8004014 <__swbuf_r+0x28>
 800407c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004080:	e7ea      	b.n	8004058 <__swbuf_r+0x6c>
 8004082:	bf00      	nop
 8004084:	08004614 	.word	0x08004614
 8004088:	08004634 	.word	0x08004634
 800408c:	080045f4 	.word	0x080045f4

08004090 <_write_r>:
 8004090:	b538      	push	{r3, r4, r5, lr}
 8004092:	4d07      	ldr	r5, [pc, #28]	; (80040b0 <_write_r+0x20>)
 8004094:	4604      	mov	r4, r0
 8004096:	4608      	mov	r0, r1
 8004098:	4611      	mov	r1, r2
 800409a:	2200      	movs	r2, #0
 800409c:	602a      	str	r2, [r5, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	f7fd f932 	bl	8001308 <_write>
 80040a4:	1c43      	adds	r3, r0, #1
 80040a6:	d102      	bne.n	80040ae <_write_r+0x1e>
 80040a8:	682b      	ldr	r3, [r5, #0]
 80040aa:	b103      	cbz	r3, 80040ae <_write_r+0x1e>
 80040ac:	6023      	str	r3, [r4, #0]
 80040ae:	bd38      	pop	{r3, r4, r5, pc}
 80040b0:	200000c4 	.word	0x200000c4

080040b4 <__swsetup_r>:
 80040b4:	4b32      	ldr	r3, [pc, #200]	; (8004180 <__swsetup_r+0xcc>)
 80040b6:	b570      	push	{r4, r5, r6, lr}
 80040b8:	681d      	ldr	r5, [r3, #0]
 80040ba:	4606      	mov	r6, r0
 80040bc:	460c      	mov	r4, r1
 80040be:	b125      	cbz	r5, 80040ca <__swsetup_r+0x16>
 80040c0:	69ab      	ldr	r3, [r5, #24]
 80040c2:	b913      	cbnz	r3, 80040ca <__swsetup_r+0x16>
 80040c4:	4628      	mov	r0, r5
 80040c6:	f7ff fb1b 	bl	8003700 <__sinit>
 80040ca:	4b2e      	ldr	r3, [pc, #184]	; (8004184 <__swsetup_r+0xd0>)
 80040cc:	429c      	cmp	r4, r3
 80040ce:	d10f      	bne.n	80040f0 <__swsetup_r+0x3c>
 80040d0:	686c      	ldr	r4, [r5, #4]
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040d8:	0719      	lsls	r1, r3, #28
 80040da:	d42c      	bmi.n	8004136 <__swsetup_r+0x82>
 80040dc:	06dd      	lsls	r5, r3, #27
 80040de:	d411      	bmi.n	8004104 <__swsetup_r+0x50>
 80040e0:	2309      	movs	r3, #9
 80040e2:	6033      	str	r3, [r6, #0]
 80040e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80040e8:	81a3      	strh	r3, [r4, #12]
 80040ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040ee:	e03e      	b.n	800416e <__swsetup_r+0xba>
 80040f0:	4b25      	ldr	r3, [pc, #148]	; (8004188 <__swsetup_r+0xd4>)
 80040f2:	429c      	cmp	r4, r3
 80040f4:	d101      	bne.n	80040fa <__swsetup_r+0x46>
 80040f6:	68ac      	ldr	r4, [r5, #8]
 80040f8:	e7eb      	b.n	80040d2 <__swsetup_r+0x1e>
 80040fa:	4b24      	ldr	r3, [pc, #144]	; (800418c <__swsetup_r+0xd8>)
 80040fc:	429c      	cmp	r4, r3
 80040fe:	bf08      	it	eq
 8004100:	68ec      	ldreq	r4, [r5, #12]
 8004102:	e7e6      	b.n	80040d2 <__swsetup_r+0x1e>
 8004104:	0758      	lsls	r0, r3, #29
 8004106:	d512      	bpl.n	800412e <__swsetup_r+0x7a>
 8004108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800410a:	b141      	cbz	r1, 800411e <__swsetup_r+0x6a>
 800410c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004110:	4299      	cmp	r1, r3
 8004112:	d002      	beq.n	800411a <__swsetup_r+0x66>
 8004114:	4630      	mov	r0, r6
 8004116:	f000 f991 	bl	800443c <_free_r>
 800411a:	2300      	movs	r3, #0
 800411c:	6363      	str	r3, [r4, #52]	; 0x34
 800411e:	89a3      	ldrh	r3, [r4, #12]
 8004120:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004124:	81a3      	strh	r3, [r4, #12]
 8004126:	2300      	movs	r3, #0
 8004128:	6063      	str	r3, [r4, #4]
 800412a:	6923      	ldr	r3, [r4, #16]
 800412c:	6023      	str	r3, [r4, #0]
 800412e:	89a3      	ldrh	r3, [r4, #12]
 8004130:	f043 0308 	orr.w	r3, r3, #8
 8004134:	81a3      	strh	r3, [r4, #12]
 8004136:	6923      	ldr	r3, [r4, #16]
 8004138:	b94b      	cbnz	r3, 800414e <__swsetup_r+0x9a>
 800413a:	89a3      	ldrh	r3, [r4, #12]
 800413c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004144:	d003      	beq.n	800414e <__swsetup_r+0x9a>
 8004146:	4621      	mov	r1, r4
 8004148:	4630      	mov	r0, r6
 800414a:	f000 f92b 	bl	80043a4 <__smakebuf_r>
 800414e:	89a0      	ldrh	r0, [r4, #12]
 8004150:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004154:	f010 0301 	ands.w	r3, r0, #1
 8004158:	d00a      	beq.n	8004170 <__swsetup_r+0xbc>
 800415a:	2300      	movs	r3, #0
 800415c:	60a3      	str	r3, [r4, #8]
 800415e:	6963      	ldr	r3, [r4, #20]
 8004160:	425b      	negs	r3, r3
 8004162:	61a3      	str	r3, [r4, #24]
 8004164:	6923      	ldr	r3, [r4, #16]
 8004166:	b943      	cbnz	r3, 800417a <__swsetup_r+0xc6>
 8004168:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800416c:	d1ba      	bne.n	80040e4 <__swsetup_r+0x30>
 800416e:	bd70      	pop	{r4, r5, r6, pc}
 8004170:	0781      	lsls	r1, r0, #30
 8004172:	bf58      	it	pl
 8004174:	6963      	ldrpl	r3, [r4, #20]
 8004176:	60a3      	str	r3, [r4, #8]
 8004178:	e7f4      	b.n	8004164 <__swsetup_r+0xb0>
 800417a:	2000      	movs	r0, #0
 800417c:	e7f7      	b.n	800416e <__swsetup_r+0xba>
 800417e:	bf00      	nop
 8004180:	20000004 	.word	0x20000004
 8004184:	08004614 	.word	0x08004614
 8004188:	08004634 	.word	0x08004634
 800418c:	080045f4 	.word	0x080045f4

08004190 <_close_r>:
 8004190:	b538      	push	{r3, r4, r5, lr}
 8004192:	4d06      	ldr	r5, [pc, #24]	; (80041ac <_close_r+0x1c>)
 8004194:	2300      	movs	r3, #0
 8004196:	4604      	mov	r4, r0
 8004198:	4608      	mov	r0, r1
 800419a:	602b      	str	r3, [r5, #0]
 800419c:	f7fd fc65 	bl	8001a6a <_close>
 80041a0:	1c43      	adds	r3, r0, #1
 80041a2:	d102      	bne.n	80041aa <_close_r+0x1a>
 80041a4:	682b      	ldr	r3, [r5, #0]
 80041a6:	b103      	cbz	r3, 80041aa <_close_r+0x1a>
 80041a8:	6023      	str	r3, [r4, #0]
 80041aa:	bd38      	pop	{r3, r4, r5, pc}
 80041ac:	200000c4 	.word	0x200000c4

080041b0 <__sflush_r>:
 80041b0:	898a      	ldrh	r2, [r1, #12]
 80041b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041b6:	4605      	mov	r5, r0
 80041b8:	0710      	lsls	r0, r2, #28
 80041ba:	460c      	mov	r4, r1
 80041bc:	d458      	bmi.n	8004270 <__sflush_r+0xc0>
 80041be:	684b      	ldr	r3, [r1, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	dc05      	bgt.n	80041d0 <__sflush_r+0x20>
 80041c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	dc02      	bgt.n	80041d0 <__sflush_r+0x20>
 80041ca:	2000      	movs	r0, #0
 80041cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041d2:	2e00      	cmp	r6, #0
 80041d4:	d0f9      	beq.n	80041ca <__sflush_r+0x1a>
 80041d6:	2300      	movs	r3, #0
 80041d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041dc:	682f      	ldr	r7, [r5, #0]
 80041de:	602b      	str	r3, [r5, #0]
 80041e0:	d032      	beq.n	8004248 <__sflush_r+0x98>
 80041e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041e4:	89a3      	ldrh	r3, [r4, #12]
 80041e6:	075a      	lsls	r2, r3, #29
 80041e8:	d505      	bpl.n	80041f6 <__sflush_r+0x46>
 80041ea:	6863      	ldr	r3, [r4, #4]
 80041ec:	1ac0      	subs	r0, r0, r3
 80041ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041f0:	b10b      	cbz	r3, 80041f6 <__sflush_r+0x46>
 80041f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041f4:	1ac0      	subs	r0, r0, r3
 80041f6:	2300      	movs	r3, #0
 80041f8:	4602      	mov	r2, r0
 80041fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041fc:	6a21      	ldr	r1, [r4, #32]
 80041fe:	4628      	mov	r0, r5
 8004200:	47b0      	blx	r6
 8004202:	1c43      	adds	r3, r0, #1
 8004204:	89a3      	ldrh	r3, [r4, #12]
 8004206:	d106      	bne.n	8004216 <__sflush_r+0x66>
 8004208:	6829      	ldr	r1, [r5, #0]
 800420a:	291d      	cmp	r1, #29
 800420c:	d82c      	bhi.n	8004268 <__sflush_r+0xb8>
 800420e:	4a2a      	ldr	r2, [pc, #168]	; (80042b8 <__sflush_r+0x108>)
 8004210:	40ca      	lsrs	r2, r1
 8004212:	07d6      	lsls	r6, r2, #31
 8004214:	d528      	bpl.n	8004268 <__sflush_r+0xb8>
 8004216:	2200      	movs	r2, #0
 8004218:	6062      	str	r2, [r4, #4]
 800421a:	04d9      	lsls	r1, r3, #19
 800421c:	6922      	ldr	r2, [r4, #16]
 800421e:	6022      	str	r2, [r4, #0]
 8004220:	d504      	bpl.n	800422c <__sflush_r+0x7c>
 8004222:	1c42      	adds	r2, r0, #1
 8004224:	d101      	bne.n	800422a <__sflush_r+0x7a>
 8004226:	682b      	ldr	r3, [r5, #0]
 8004228:	b903      	cbnz	r3, 800422c <__sflush_r+0x7c>
 800422a:	6560      	str	r0, [r4, #84]	; 0x54
 800422c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800422e:	602f      	str	r7, [r5, #0]
 8004230:	2900      	cmp	r1, #0
 8004232:	d0ca      	beq.n	80041ca <__sflush_r+0x1a>
 8004234:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004238:	4299      	cmp	r1, r3
 800423a:	d002      	beq.n	8004242 <__sflush_r+0x92>
 800423c:	4628      	mov	r0, r5
 800423e:	f000 f8fd 	bl	800443c <_free_r>
 8004242:	2000      	movs	r0, #0
 8004244:	6360      	str	r0, [r4, #52]	; 0x34
 8004246:	e7c1      	b.n	80041cc <__sflush_r+0x1c>
 8004248:	6a21      	ldr	r1, [r4, #32]
 800424a:	2301      	movs	r3, #1
 800424c:	4628      	mov	r0, r5
 800424e:	47b0      	blx	r6
 8004250:	1c41      	adds	r1, r0, #1
 8004252:	d1c7      	bne.n	80041e4 <__sflush_r+0x34>
 8004254:	682b      	ldr	r3, [r5, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0c4      	beq.n	80041e4 <__sflush_r+0x34>
 800425a:	2b1d      	cmp	r3, #29
 800425c:	d001      	beq.n	8004262 <__sflush_r+0xb2>
 800425e:	2b16      	cmp	r3, #22
 8004260:	d101      	bne.n	8004266 <__sflush_r+0xb6>
 8004262:	602f      	str	r7, [r5, #0]
 8004264:	e7b1      	b.n	80041ca <__sflush_r+0x1a>
 8004266:	89a3      	ldrh	r3, [r4, #12]
 8004268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800426c:	81a3      	strh	r3, [r4, #12]
 800426e:	e7ad      	b.n	80041cc <__sflush_r+0x1c>
 8004270:	690f      	ldr	r7, [r1, #16]
 8004272:	2f00      	cmp	r7, #0
 8004274:	d0a9      	beq.n	80041ca <__sflush_r+0x1a>
 8004276:	0793      	lsls	r3, r2, #30
 8004278:	680e      	ldr	r6, [r1, #0]
 800427a:	bf08      	it	eq
 800427c:	694b      	ldreq	r3, [r1, #20]
 800427e:	600f      	str	r7, [r1, #0]
 8004280:	bf18      	it	ne
 8004282:	2300      	movne	r3, #0
 8004284:	eba6 0807 	sub.w	r8, r6, r7
 8004288:	608b      	str	r3, [r1, #8]
 800428a:	f1b8 0f00 	cmp.w	r8, #0
 800428e:	dd9c      	ble.n	80041ca <__sflush_r+0x1a>
 8004290:	6a21      	ldr	r1, [r4, #32]
 8004292:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004294:	4643      	mov	r3, r8
 8004296:	463a      	mov	r2, r7
 8004298:	4628      	mov	r0, r5
 800429a:	47b0      	blx	r6
 800429c:	2800      	cmp	r0, #0
 800429e:	dc06      	bgt.n	80042ae <__sflush_r+0xfe>
 80042a0:	89a3      	ldrh	r3, [r4, #12]
 80042a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042a6:	81a3      	strh	r3, [r4, #12]
 80042a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042ac:	e78e      	b.n	80041cc <__sflush_r+0x1c>
 80042ae:	4407      	add	r7, r0
 80042b0:	eba8 0800 	sub.w	r8, r8, r0
 80042b4:	e7e9      	b.n	800428a <__sflush_r+0xda>
 80042b6:	bf00      	nop
 80042b8:	20400001 	.word	0x20400001

080042bc <_fflush_r>:
 80042bc:	b538      	push	{r3, r4, r5, lr}
 80042be:	690b      	ldr	r3, [r1, #16]
 80042c0:	4605      	mov	r5, r0
 80042c2:	460c      	mov	r4, r1
 80042c4:	b913      	cbnz	r3, 80042cc <_fflush_r+0x10>
 80042c6:	2500      	movs	r5, #0
 80042c8:	4628      	mov	r0, r5
 80042ca:	bd38      	pop	{r3, r4, r5, pc}
 80042cc:	b118      	cbz	r0, 80042d6 <_fflush_r+0x1a>
 80042ce:	6983      	ldr	r3, [r0, #24]
 80042d0:	b90b      	cbnz	r3, 80042d6 <_fflush_r+0x1a>
 80042d2:	f7ff fa15 	bl	8003700 <__sinit>
 80042d6:	4b14      	ldr	r3, [pc, #80]	; (8004328 <_fflush_r+0x6c>)
 80042d8:	429c      	cmp	r4, r3
 80042da:	d11b      	bne.n	8004314 <_fflush_r+0x58>
 80042dc:	686c      	ldr	r4, [r5, #4]
 80042de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0ef      	beq.n	80042c6 <_fflush_r+0xa>
 80042e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042e8:	07d0      	lsls	r0, r2, #31
 80042ea:	d404      	bmi.n	80042f6 <_fflush_r+0x3a>
 80042ec:	0599      	lsls	r1, r3, #22
 80042ee:	d402      	bmi.n	80042f6 <_fflush_r+0x3a>
 80042f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042f2:	f7ff faa3 	bl	800383c <__retarget_lock_acquire_recursive>
 80042f6:	4628      	mov	r0, r5
 80042f8:	4621      	mov	r1, r4
 80042fa:	f7ff ff59 	bl	80041b0 <__sflush_r>
 80042fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004300:	07da      	lsls	r2, r3, #31
 8004302:	4605      	mov	r5, r0
 8004304:	d4e0      	bmi.n	80042c8 <_fflush_r+0xc>
 8004306:	89a3      	ldrh	r3, [r4, #12]
 8004308:	059b      	lsls	r3, r3, #22
 800430a:	d4dd      	bmi.n	80042c8 <_fflush_r+0xc>
 800430c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800430e:	f7ff fa96 	bl	800383e <__retarget_lock_release_recursive>
 8004312:	e7d9      	b.n	80042c8 <_fflush_r+0xc>
 8004314:	4b05      	ldr	r3, [pc, #20]	; (800432c <_fflush_r+0x70>)
 8004316:	429c      	cmp	r4, r3
 8004318:	d101      	bne.n	800431e <_fflush_r+0x62>
 800431a:	68ac      	ldr	r4, [r5, #8]
 800431c:	e7df      	b.n	80042de <_fflush_r+0x22>
 800431e:	4b04      	ldr	r3, [pc, #16]	; (8004330 <_fflush_r+0x74>)
 8004320:	429c      	cmp	r4, r3
 8004322:	bf08      	it	eq
 8004324:	68ec      	ldreq	r4, [r5, #12]
 8004326:	e7da      	b.n	80042de <_fflush_r+0x22>
 8004328:	08004614 	.word	0x08004614
 800432c:	08004634 	.word	0x08004634
 8004330:	080045f4 	.word	0x080045f4

08004334 <_lseek_r>:
 8004334:	b538      	push	{r3, r4, r5, lr}
 8004336:	4d07      	ldr	r5, [pc, #28]	; (8004354 <_lseek_r+0x20>)
 8004338:	4604      	mov	r4, r0
 800433a:	4608      	mov	r0, r1
 800433c:	4611      	mov	r1, r2
 800433e:	2200      	movs	r2, #0
 8004340:	602a      	str	r2, [r5, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	f7fd fbb8 	bl	8001ab8 <_lseek>
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d102      	bne.n	8004352 <_lseek_r+0x1e>
 800434c:	682b      	ldr	r3, [r5, #0]
 800434e:	b103      	cbz	r3, 8004352 <_lseek_r+0x1e>
 8004350:	6023      	str	r3, [r4, #0]
 8004352:	bd38      	pop	{r3, r4, r5, pc}
 8004354:	200000c4 	.word	0x200000c4

08004358 <__swhatbuf_r>:
 8004358:	b570      	push	{r4, r5, r6, lr}
 800435a:	460e      	mov	r6, r1
 800435c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004360:	2900      	cmp	r1, #0
 8004362:	b096      	sub	sp, #88	; 0x58
 8004364:	4614      	mov	r4, r2
 8004366:	461d      	mov	r5, r3
 8004368:	da08      	bge.n	800437c <__swhatbuf_r+0x24>
 800436a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	602a      	str	r2, [r5, #0]
 8004372:	061a      	lsls	r2, r3, #24
 8004374:	d410      	bmi.n	8004398 <__swhatbuf_r+0x40>
 8004376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800437a:	e00e      	b.n	800439a <__swhatbuf_r+0x42>
 800437c:	466a      	mov	r2, sp
 800437e:	f000 f8bb 	bl	80044f8 <_fstat_r>
 8004382:	2800      	cmp	r0, #0
 8004384:	dbf1      	blt.n	800436a <__swhatbuf_r+0x12>
 8004386:	9a01      	ldr	r2, [sp, #4]
 8004388:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800438c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004390:	425a      	negs	r2, r3
 8004392:	415a      	adcs	r2, r3
 8004394:	602a      	str	r2, [r5, #0]
 8004396:	e7ee      	b.n	8004376 <__swhatbuf_r+0x1e>
 8004398:	2340      	movs	r3, #64	; 0x40
 800439a:	2000      	movs	r0, #0
 800439c:	6023      	str	r3, [r4, #0]
 800439e:	b016      	add	sp, #88	; 0x58
 80043a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080043a4 <__smakebuf_r>:
 80043a4:	898b      	ldrh	r3, [r1, #12]
 80043a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80043a8:	079d      	lsls	r5, r3, #30
 80043aa:	4606      	mov	r6, r0
 80043ac:	460c      	mov	r4, r1
 80043ae:	d507      	bpl.n	80043c0 <__smakebuf_r+0x1c>
 80043b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80043b4:	6023      	str	r3, [r4, #0]
 80043b6:	6123      	str	r3, [r4, #16]
 80043b8:	2301      	movs	r3, #1
 80043ba:	6163      	str	r3, [r4, #20]
 80043bc:	b002      	add	sp, #8
 80043be:	bd70      	pop	{r4, r5, r6, pc}
 80043c0:	ab01      	add	r3, sp, #4
 80043c2:	466a      	mov	r2, sp
 80043c4:	f7ff ffc8 	bl	8004358 <__swhatbuf_r>
 80043c8:	9900      	ldr	r1, [sp, #0]
 80043ca:	4605      	mov	r5, r0
 80043cc:	4630      	mov	r0, r6
 80043ce:	f7ff fa57 	bl	8003880 <_malloc_r>
 80043d2:	b948      	cbnz	r0, 80043e8 <__smakebuf_r+0x44>
 80043d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043d8:	059a      	lsls	r2, r3, #22
 80043da:	d4ef      	bmi.n	80043bc <__smakebuf_r+0x18>
 80043dc:	f023 0303 	bic.w	r3, r3, #3
 80043e0:	f043 0302 	orr.w	r3, r3, #2
 80043e4:	81a3      	strh	r3, [r4, #12]
 80043e6:	e7e3      	b.n	80043b0 <__smakebuf_r+0xc>
 80043e8:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <__smakebuf_r+0x7c>)
 80043ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80043ec:	89a3      	ldrh	r3, [r4, #12]
 80043ee:	6020      	str	r0, [r4, #0]
 80043f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f4:	81a3      	strh	r3, [r4, #12]
 80043f6:	9b00      	ldr	r3, [sp, #0]
 80043f8:	6163      	str	r3, [r4, #20]
 80043fa:	9b01      	ldr	r3, [sp, #4]
 80043fc:	6120      	str	r0, [r4, #16]
 80043fe:	b15b      	cbz	r3, 8004418 <__smakebuf_r+0x74>
 8004400:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004404:	4630      	mov	r0, r6
 8004406:	f000 f889 	bl	800451c <_isatty_r>
 800440a:	b128      	cbz	r0, 8004418 <__smakebuf_r+0x74>
 800440c:	89a3      	ldrh	r3, [r4, #12]
 800440e:	f023 0303 	bic.w	r3, r3, #3
 8004412:	f043 0301 	orr.w	r3, r3, #1
 8004416:	81a3      	strh	r3, [r4, #12]
 8004418:	89a0      	ldrh	r0, [r4, #12]
 800441a:	4305      	orrs	r5, r0
 800441c:	81a5      	strh	r5, [r4, #12]
 800441e:	e7cd      	b.n	80043bc <__smakebuf_r+0x18>
 8004420:	08003699 	.word	0x08003699

08004424 <__malloc_lock>:
 8004424:	4801      	ldr	r0, [pc, #4]	; (800442c <__malloc_lock+0x8>)
 8004426:	f7ff ba09 	b.w	800383c <__retarget_lock_acquire_recursive>
 800442a:	bf00      	nop
 800442c:	200000b8 	.word	0x200000b8

08004430 <__malloc_unlock>:
 8004430:	4801      	ldr	r0, [pc, #4]	; (8004438 <__malloc_unlock+0x8>)
 8004432:	f7ff ba04 	b.w	800383e <__retarget_lock_release_recursive>
 8004436:	bf00      	nop
 8004438:	200000b8 	.word	0x200000b8

0800443c <_free_r>:
 800443c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800443e:	2900      	cmp	r1, #0
 8004440:	d044      	beq.n	80044cc <_free_r+0x90>
 8004442:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004446:	9001      	str	r0, [sp, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	f1a1 0404 	sub.w	r4, r1, #4
 800444e:	bfb8      	it	lt
 8004450:	18e4      	addlt	r4, r4, r3
 8004452:	f7ff ffe7 	bl	8004424 <__malloc_lock>
 8004456:	4a1e      	ldr	r2, [pc, #120]	; (80044d0 <_free_r+0x94>)
 8004458:	9801      	ldr	r0, [sp, #4]
 800445a:	6813      	ldr	r3, [r2, #0]
 800445c:	b933      	cbnz	r3, 800446c <_free_r+0x30>
 800445e:	6063      	str	r3, [r4, #4]
 8004460:	6014      	str	r4, [r2, #0]
 8004462:	b003      	add	sp, #12
 8004464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004468:	f7ff bfe2 	b.w	8004430 <__malloc_unlock>
 800446c:	42a3      	cmp	r3, r4
 800446e:	d908      	bls.n	8004482 <_free_r+0x46>
 8004470:	6825      	ldr	r5, [r4, #0]
 8004472:	1961      	adds	r1, r4, r5
 8004474:	428b      	cmp	r3, r1
 8004476:	bf01      	itttt	eq
 8004478:	6819      	ldreq	r1, [r3, #0]
 800447a:	685b      	ldreq	r3, [r3, #4]
 800447c:	1949      	addeq	r1, r1, r5
 800447e:	6021      	streq	r1, [r4, #0]
 8004480:	e7ed      	b.n	800445e <_free_r+0x22>
 8004482:	461a      	mov	r2, r3
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	b10b      	cbz	r3, 800448c <_free_r+0x50>
 8004488:	42a3      	cmp	r3, r4
 800448a:	d9fa      	bls.n	8004482 <_free_r+0x46>
 800448c:	6811      	ldr	r1, [r2, #0]
 800448e:	1855      	adds	r5, r2, r1
 8004490:	42a5      	cmp	r5, r4
 8004492:	d10b      	bne.n	80044ac <_free_r+0x70>
 8004494:	6824      	ldr	r4, [r4, #0]
 8004496:	4421      	add	r1, r4
 8004498:	1854      	adds	r4, r2, r1
 800449a:	42a3      	cmp	r3, r4
 800449c:	6011      	str	r1, [r2, #0]
 800449e:	d1e0      	bne.n	8004462 <_free_r+0x26>
 80044a0:	681c      	ldr	r4, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	6053      	str	r3, [r2, #4]
 80044a6:	4421      	add	r1, r4
 80044a8:	6011      	str	r1, [r2, #0]
 80044aa:	e7da      	b.n	8004462 <_free_r+0x26>
 80044ac:	d902      	bls.n	80044b4 <_free_r+0x78>
 80044ae:	230c      	movs	r3, #12
 80044b0:	6003      	str	r3, [r0, #0]
 80044b2:	e7d6      	b.n	8004462 <_free_r+0x26>
 80044b4:	6825      	ldr	r5, [r4, #0]
 80044b6:	1961      	adds	r1, r4, r5
 80044b8:	428b      	cmp	r3, r1
 80044ba:	bf04      	itt	eq
 80044bc:	6819      	ldreq	r1, [r3, #0]
 80044be:	685b      	ldreq	r3, [r3, #4]
 80044c0:	6063      	str	r3, [r4, #4]
 80044c2:	bf04      	itt	eq
 80044c4:	1949      	addeq	r1, r1, r5
 80044c6:	6021      	streq	r1, [r4, #0]
 80044c8:	6054      	str	r4, [r2, #4]
 80044ca:	e7ca      	b.n	8004462 <_free_r+0x26>
 80044cc:	b003      	add	sp, #12
 80044ce:	bd30      	pop	{r4, r5, pc}
 80044d0:	200000bc 	.word	0x200000bc

080044d4 <_read_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4d07      	ldr	r5, [pc, #28]	; (80044f4 <_read_r+0x20>)
 80044d8:	4604      	mov	r4, r0
 80044da:	4608      	mov	r0, r1
 80044dc:	4611      	mov	r1, r2
 80044de:	2200      	movs	r2, #0
 80044e0:	602a      	str	r2, [r5, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	f7fd faa4 	bl	8001a30 <_read>
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	d102      	bne.n	80044f2 <_read_r+0x1e>
 80044ec:	682b      	ldr	r3, [r5, #0]
 80044ee:	b103      	cbz	r3, 80044f2 <_read_r+0x1e>
 80044f0:	6023      	str	r3, [r4, #0]
 80044f2:	bd38      	pop	{r3, r4, r5, pc}
 80044f4:	200000c4 	.word	0x200000c4

080044f8 <_fstat_r>:
 80044f8:	b538      	push	{r3, r4, r5, lr}
 80044fa:	4d07      	ldr	r5, [pc, #28]	; (8004518 <_fstat_r+0x20>)
 80044fc:	2300      	movs	r3, #0
 80044fe:	4604      	mov	r4, r0
 8004500:	4608      	mov	r0, r1
 8004502:	4611      	mov	r1, r2
 8004504:	602b      	str	r3, [r5, #0]
 8004506:	f7fd fabc 	bl	8001a82 <_fstat>
 800450a:	1c43      	adds	r3, r0, #1
 800450c:	d102      	bne.n	8004514 <_fstat_r+0x1c>
 800450e:	682b      	ldr	r3, [r5, #0]
 8004510:	b103      	cbz	r3, 8004514 <_fstat_r+0x1c>
 8004512:	6023      	str	r3, [r4, #0]
 8004514:	bd38      	pop	{r3, r4, r5, pc}
 8004516:	bf00      	nop
 8004518:	200000c4 	.word	0x200000c4

0800451c <_isatty_r>:
 800451c:	b538      	push	{r3, r4, r5, lr}
 800451e:	4d06      	ldr	r5, [pc, #24]	; (8004538 <_isatty_r+0x1c>)
 8004520:	2300      	movs	r3, #0
 8004522:	4604      	mov	r4, r0
 8004524:	4608      	mov	r0, r1
 8004526:	602b      	str	r3, [r5, #0]
 8004528:	f7fd fabb 	bl	8001aa2 <_isatty>
 800452c:	1c43      	adds	r3, r0, #1
 800452e:	d102      	bne.n	8004536 <_isatty_r+0x1a>
 8004530:	682b      	ldr	r3, [r5, #0]
 8004532:	b103      	cbz	r3, 8004536 <_isatty_r+0x1a>
 8004534:	6023      	str	r3, [r4, #0]
 8004536:	bd38      	pop	{r3, r4, r5, pc}
 8004538:	200000c4 	.word	0x200000c4

0800453c <_init>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	bf00      	nop
 8004540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004542:	bc08      	pop	{r3}
 8004544:	469e      	mov	lr, r3
 8004546:	4770      	bx	lr

08004548 <_fini>:
 8004548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454a:	bf00      	nop
 800454c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454e:	bc08      	pop	{r3}
 8004550:	469e      	mov	lr, r3
 8004552:	4770      	bx	lr
