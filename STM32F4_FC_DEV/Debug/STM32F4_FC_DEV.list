
STM32F4_FC_DEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008814  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  080089a8  080089a8  000189a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ed4  08008ed4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008ed4  08008ed4  00018ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008edc  08008edc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008edc  08008edc  00018edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ee0  08008ee0  00018ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          00000240  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000428  20000428  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cb45  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000293c  00000000  00000000  0002cd5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  0002f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b08  00000000  00000000  00030300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cfff  00000000  00000000  00030e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ac4e  00000000  00000000  0004de07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099141  00000000  00000000  00058a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f1b96  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044b4  00000000  00000000  000f1be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800898c 	.word	0x0800898c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800898c 	.word	0x0800898c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <LL_DMA_SetDataLength+0x44>)
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4413      	add	r3, r2
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	0c1b      	lsrs	r3, r3, #16
 8000f6a:	041b      	lsls	r3, r3, #16
 8000f6c:	4908      	ldr	r1, [pc, #32]	; (8000f90 <LL_DMA_SetDataLength+0x44>)
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	440a      	add	r2, r1
 8000f72:	7812      	ldrb	r2, [r2, #0]
 8000f74:	4611      	mov	r1, r2
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	440a      	add	r2, r1
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	604b      	str	r3, [r1, #4]
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	08008a78 	.word	0x08008a78

08000f94 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <LL_DMA_SetMemoryAddress+0x2c>)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4413      	add	r3, r2
 8000fae:	461a      	mov	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	08008a78 	.word	0x08008a78

08000fc4 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <LL_DMA_SetPeriphAddress+0x2c>)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4413      	add	r3, r2
 8000fde:	461a      	mov	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6093      	str	r3, [r2, #8]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	08008a78 	.word	0x08008a78

08000ff4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000ffe:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <LL_DMA_EnableIT_TC+0x3c>)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4908      	ldr	r1, [pc, #32]	; (8001030 <LL_DMA_EnableIT_TC+0x3c>)
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	440a      	add	r2, r1
 8001014:	7812      	ldrb	r2, [r2, #0]
 8001016:	4611      	mov	r1, r2
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	440a      	add	r2, r1
 800101c:	f043 0310 	orr.w	r3, r3, #16
 8001020:	6013      	str	r3, [r2, #0]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	08008a78 	.word	0x08008a78

08001034 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3314      	adds	r3, #20
 8001040:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	e853 3f00 	ldrex	r3, [r3]
 8001048:	60bb      	str	r3, [r7, #8]
   return(result);
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001050:	61fb      	str	r3, [r7, #28]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3314      	adds	r3, #20
 8001056:	69fa      	ldr	r2, [r7, #28]
 8001058:	61ba      	str	r2, [r7, #24]
 800105a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800105c:	6979      	ldr	r1, [r7, #20]
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	e841 2300 	strex	r3, r2, [r1]
 8001064:	613b      	str	r3, [r7, #16]
   return(result);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1e7      	bne.n	800103c <LL_USART_EnableDMAReq_RX+0x8>
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3304      	adds	r3, #4
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <GPS_DMA_init>:

int recv_cnt;
int err_cnt;

void GPS_DMA_init(GPS_RAW_MESSAGE* gps_raw_message, USART_TypeDef* UART,DMA_TypeDef* DMA,uint32_t DMA_STREAM)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	603b      	str	r3, [r7, #0]


	//DMA, INTERRUPT SETTINGS
	LL_DMA_SetMemoryAddress(DMA,DMA_STREAM,(uint32_t)(gps_raw_message->gps_raw_buf));
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3308      	adds	r3, #8
 80010a4:	461a      	mov	r2, r3
 80010a6:	6839      	ldr	r1, [r7, #0]
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff73 	bl	8000f94 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetPeriphAddress(DMA,DMA_STREAM,LL_USART_DMA_GetRegAddr(UART));
 80010ae:	68b8      	ldr	r0, [r7, #8]
 80010b0:	f7ff ffe3 	bl	800107a <LL_USART_DMA_GetRegAddr>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	6839      	ldr	r1, [r7, #0]
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff82 	bl	8000fc4 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetDataLength(DMA,DMA_STREAM,MSG_LENGTH_NAV_SOL);
 80010c0:	223c      	movs	r2, #60	; 0x3c
 80010c2:	6839      	ldr	r1, [r7, #0]
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff41 	bl	8000f4c <LL_DMA_SetDataLength>

	//  LL_DMA_EnableIT_HT(DMA1, LL_DMA_STREAM_1);
    LL_DMA_EnableIT_TC(DMA, DMA_STREAM);
 80010ca:	6839      	ldr	r1, [r7, #0]
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff91 	bl	8000ff4 <LL_DMA_EnableIT_TC>
	LL_USART_EnableDMAReq_RX(UART);
 80010d2:	68b8      	ldr	r0, [r7, #8]
 80010d4:	f7ff ffae 	bl	8001034 <LL_USART_EnableDMAReq_RX>

}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <GPS_Parsing>:



void GPS_Parsing(GPS_RAW_MESSAGE* message, MSG_NAV* msg_nav, int* recv_cnt, int* err_cnt)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	603b      	str	r3, [r7, #0]
	uint8_t* ptr,*gps_ptr = message->gps_raw_buf;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	3308      	adds	r3, #8
 80010f2:	61fb      	str	r3, [r7, #28]
	int32_t temp;
	unsigned short msg_length = 0, checksum = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	837b      	strh	r3, [r7, #26]
 80010f8:	2300      	movs	r3, #0
 80010fa:	833b      	strh	r3, [r7, #24]
	unsigned char classID = 0, messageID = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	75fb      	strb	r3, [r7, #23]
 8001100:	2300      	movs	r3, #0
 8001102:	75bb      	strb	r3, [r7, #22]
	if(gps_ptr[0]==MSG_UBX_SOF1 && gps_ptr[1]==MSG_UBX_SOF2){
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2bb5      	cmp	r3, #181	; 0xb5
 800110a:	d14a      	bne.n	80011a2 <GPS_Parsing+0xc2>
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	3301      	adds	r3, #1
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b62      	cmp	r3, #98	; 0x62
 8001114:	d145      	bne.n	80011a2 <GPS_Parsing+0xc2>

		ptr 		= gps_ptr + 2;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3302      	adds	r3, #2
 800111a:	613b      	str	r3, [r7, #16]
		classID 	= *ptr++;
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	613a      	str	r2, [r7, #16]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	75fb      	strb	r3, [r7, #23]
		messageID 	= *ptr++;
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	613a      	str	r2, [r7, #16]
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	75bb      	strb	r3, [r7, #22]

		if(messageID==MSG_ID_UBX_NAV_POSLLH) {
 8001130:	7dbb      	ldrb	r3, [r7, #22]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d114      	bne.n	8001160 <GPS_Parsing+0x80>
			msg_length 	= (ptr[1] << 8) + (ptr[0]);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	3301      	adds	r3, #1
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b29b      	uxth	r3, r3
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	b29a      	uxth	r2, r3
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	4413      	add	r3, r2
 800114a:	837b      	strh	r3, [r7, #26]
			ptr = ptr +2;
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	3302      	adds	r3, #2
 8001150:	613b      	str	r3, [r7, #16]
			memcpy(msg_nav, ptr, msg_length);
 8001152:	8b7b      	ldrh	r3, [r7, #26]
 8001154:	461a      	mov	r2, r3
 8001156:	6939      	ldr	r1, [r7, #16]
 8001158:	68b8      	ldr	r0, [r7, #8]
 800115a:	f004 fb69 	bl	8005830 <memcpy>
 800115e:	e01a      	b.n	8001196 <GPS_Parsing+0xb6>

//			printf("time:[%d]ms\t lon: [%d]deg\t lat: [%d]deg\t h: [%d]mm\t hMSL: [%d]mm\t hAcc: [%d]mm\t vAcc: [%d]mm\n",msg_nav->iTOW, msg_nav->lon,msg_nav->lat, msg_nav->h, msg_nav->hMSL, msg_nav->hAcc, msg_nav->vAcc);

		}
		else if(messageID==MSG_ID_UBX_NAV_SOL) {
 8001160:	7dbb      	ldrb	r3, [r7, #22]
 8001162:	2b06      	cmp	r3, #6
 8001164:	d117      	bne.n	8001196 <GPS_Parsing+0xb6>
			msg_length 	= (ptr[1] << 8) + (ptr[0]);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	3301      	adds	r3, #1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b29b      	uxth	r3, r3
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b29a      	uxth	r2, r3
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b29b      	uxth	r3, r3
 8001178:	4413      	add	r3, r2
 800117a:	837b      	strh	r3, [r7, #26]
			ptr = ptr +2;
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	3302      	adds	r3, #2
 8001180:	613b      	str	r3, [r7, #16]
			msg_nav = msg_nav + MSG_LENGTH_NAV_POSLLH - 8;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8001188:	60bb      	str	r3, [r7, #8]
			memcpy(msg_nav, ptr, msg_length);
 800118a:	8b7b      	ldrh	r3, [r7, #26]
 800118c:	461a      	mov	r2, r3
 800118e:	6939      	ldr	r1, [r7, #16]
 8001190:	68b8      	ldr	r0, [r7, #8]
 8001192:	f004 fb4d 	bl	8005830 <memcpy>
		}

		recv_cnt[0]++;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	e005      	b.n	80011ae <GPS_Parsing+0xce>

	}

	else
	{
		err_cnt[0]++;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	601a      	str	r2, [r3, #0]
	}
//	printf("recv: %d\t err: %d\n", recv_cnt[0], err_cnt[0]);

}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3720      	adds	r7, #32
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011c4:	4907      	ldr	r1, [pc, #28]	; (80011e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4013      	ands	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011d6:	68fb      	ldr	r3, [r7, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	40023800 	.word	0x40023800

080011e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011f4:	4907      	ldr	r1, [pc, #28]	; (8001214 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4013      	ands	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40023800 	.word	0x40023800

08001218 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	601a      	str	r2, [r3, #0]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f023 0210 	bic.w	r2, r3, #16
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	431a      	orrs	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	605a      	str	r2, [r3, #4]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b01      	cmp	r3, #1
 8001270:	d101      	bne.n	8001276 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b02      	cmp	r3, #2
 8001296:	d101      	bne.n	800129c <LL_SPI_IsActiveFlag_TXE+0x18>
 8001298:	2301      	movs	r3, #1
 800129a:	e000      	b.n	800129e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	330c      	adds	r3, #12
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b085      	sub	sp, #20
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	330c      	adds	r3, #12
 80012d6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	78fa      	ldrb	r2, [r7, #3]
 80012dc:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	4013      	ands	r3, r2
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	bf0c      	ite	eq
 8001302:	2301      	moveq	r3, #1
 8001304:	2300      	movne	r3, #0
 8001306:	b2db      	uxtb	r3, r3
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	619a      	str	r2, [r3, #24]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	041a      	lsls	r2, r3, #16
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	619a      	str	r2, [r3, #24]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b090      	sub	sp, #64	; 0x40
 8001354:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	2228      	movs	r2, #40	; 0x28
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f004 fa74 	bl	800584c <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001374:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001378:	f7ff ff36 	bl	80011e8 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff ff1b 	bl	80011b8 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001382:	2004      	movs	r0, #4
 8001384:	f7ff ff18 	bl	80011b8 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001388:	23e0      	movs	r3, #224	; 0xe0
 800138a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800138c:	2302      	movs	r3, #2
 800138e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800139c:	2305      	movs	r3, #5
 800139e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	463b      	mov	r3, r7
 80013a2:	4619      	mov	r1, r3
 80013a4:	4825      	ldr	r0, [pc, #148]	; (800143c <ICM20602_GPIO_SPI_Initialization+0xec>)
 80013a6:	f003 f9e5 	bl	8004774 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80013ae:	f44f 7382 	mov.w	r3, #260	; 0x104
 80013b2:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80013b8:	2302      	movs	r3, #2
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80013bc:	2301      	movs	r3, #1
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80013c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80013c6:	2310      	movs	r3, #16
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80013ca:	2300      	movs	r3, #0
 80013cc:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80013d2:	230a      	movs	r3, #10
 80013d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 80013d6:	f107 0318 	add.w	r3, r7, #24
 80013da:	4619      	mov	r1, r3
 80013dc:	4818      	ldr	r0, [pc, #96]	; (8001440 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80013de:	f003 fb9a 	bl	8004b16 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80013e2:	2100      	movs	r1, #0
 80013e4:	4816      	ldr	r0, [pc, #88]	; (8001440 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80013e6:	f7ff ff27 	bl	8001238 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80013ea:	2110      	movs	r1, #16
 80013ec:	4813      	ldr	r0, [pc, #76]	; (800143c <ICM20602_GPIO_SPI_Initialization+0xec>)
 80013ee:	f7ff ff9f 	bl	8001330 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80013f2:	2310      	movs	r3, #16
 80013f4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013f6:	2301      	movs	r3, #1
 80013f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8001406:	463b      	mov	r3, r7
 8001408:	4619      	mov	r1, r3
 800140a:	480c      	ldr	r0, [pc, #48]	; (800143c <ICM20602_GPIO_SPI_Initialization+0xec>)
 800140c:	f003 f9b2 	bl	8004774 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8001410:	2310      	movs	r3, #16
 8001412:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001418:	2301      	movs	r3, #1
 800141a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 800141c:	463b      	mov	r3, r7
 800141e:	4619      	mov	r1, r3
 8001420:	4808      	ldr	r0, [pc, #32]	; (8001444 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001422:	f003 f9a7 	bl	8004774 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001428:	f7ff fef6 	bl	8001218 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 800142c:	2110      	movs	r1, #16
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001430:	f7ff ff70 	bl	8001314 <LL_GPIO_SetOutputPin>
}
 8001434:	bf00      	nop
 8001436:	3740      	adds	r7, #64	; 0x40
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40020000 	.word	0x40020000
 8001440:	40013000 	.word	0x40013000
 8001444:	40020800 	.word	0x40020800

08001448 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8001452:	bf00      	nop
 8001454:	480c      	ldr	r0, [pc, #48]	; (8001488 <SPI1_SendByte+0x40>)
 8001456:	f7ff ff15 	bl	8001284 <LL_SPI_IsActiveFlag_TXE>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f9      	beq.n	8001454 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	4619      	mov	r1, r3
 8001464:	4808      	ldr	r0, [pc, #32]	; (8001488 <SPI1_SendByte+0x40>)
 8001466:	f7ff ff2e 	bl	80012c6 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 800146a:	bf00      	nop
 800146c:	4806      	ldr	r0, [pc, #24]	; (8001488 <SPI1_SendByte+0x40>)
 800146e:	f7ff fef6 	bl	800125e <LL_SPI_IsActiveFlag_RXNE>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f9      	beq.n	800146c <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8001478:	4803      	ldr	r0, [pc, #12]	; (8001488 <SPI1_SendByte+0x40>)
 800147a:	f7ff ff16 	bl	80012aa <LL_SPI_ReceiveData8>
 800147e:	4603      	mov	r3, r0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40013000 	.word	0x40013000

0800148c <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8001496:	2110      	movs	r1, #16
 8001498:	480b      	ldr	r0, [pc, #44]	; (80014c8 <ICM20602_Readbyte+0x3c>)
 800149a:	f7ff ff49 	bl	8001330 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff ffce 	bl	8001448 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff ffcb 	bl	8001448 <SPI1_SendByte>
 80014b2:	4603      	mov	r3, r0
 80014b4:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 80014b6:	2110      	movs	r1, #16
 80014b8:	4803      	ldr	r0, [pc, #12]	; (80014c8 <ICM20602_Readbyte+0x3c>)
 80014ba:	f7ff ff2b 	bl	8001314 <LL_GPIO_SetOutputPin>
	
	return val;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40020000 	.word	0x40020000

080014cc <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	603a      	str	r2, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
 80014d8:	460b      	mov	r3, r1
 80014da:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 80014e0:	2110      	movs	r1, #16
 80014e2:	4810      	ldr	r0, [pc, #64]	; (8001524 <ICM20602_Readbytes+0x58>)
 80014e4:	f7ff ff24 	bl	8001330 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ffa9 	bl	8001448 <SPI1_SendByte>
	while(i < len)
 80014f6:	e009      	b.n	800150c <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	60fa      	str	r2, [r7, #12]
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	18d4      	adds	r4, r2, r3
 8001502:	2000      	movs	r0, #0
 8001504:	f7ff ffa0 	bl	8001448 <SPI1_SendByte>
 8001508:	4603      	mov	r3, r0
 800150a:	7023      	strb	r3, [r4, #0]
	while(i < len)
 800150c:	79bb      	ldrb	r3, [r7, #6]
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d3f1      	bcc.n	80014f8 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 8001514:	2110      	movs	r1, #16
 8001516:	4803      	ldr	r0, [pc, #12]	; (8001524 <ICM20602_Readbytes+0x58>)
 8001518:	f7ff fefc 	bl	8001314 <LL_GPIO_SetOutputPin>
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bd90      	pop	{r4, r7, pc}
 8001524:	40020000 	.word	0x40020000

08001528 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	460a      	mov	r2, r1
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	4613      	mov	r3, r2
 8001536:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8001538:	2110      	movs	r1, #16
 800153a:	480b      	ldr	r0, [pc, #44]	; (8001568 <ICM20602_Writebyte+0x40>)
 800153c:	f7ff fef8 	bl	8001330 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001546:	b2db      	uxtb	r3, r3
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff7d 	bl	8001448 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800154e:	79bb      	ldrb	r3, [r7, #6]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff79 	bl	8001448 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8001556:	2110      	movs	r1, #16
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <ICM20602_Writebyte+0x40>)
 800155a:	f7ff fedb 	bl	8001314 <LL_GPIO_SetOutputPin>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40020000 	.word	0x40020000

0800156c <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001588:	f7ff fee2 	bl	8001350 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 800158c:	4838      	ldr	r0, [pc, #224]	; (8001670 <ICM20602_Initialization+0x104>)
 800158e:	f004 fdcf 	bl	8006130 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8001592:	2075      	movs	r0, #117	; 0x75
 8001594:	f7ff ff7a 	bl	800148c <ICM20602_Readbyte>
 8001598:	4603      	mov	r3, r0
 800159a:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	2b12      	cmp	r3, #18
 80015a0:	d105      	bne.n	80015ae <ICM20602_Initialization+0x42>
	{
		printf("\r\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4833      	ldr	r0, [pc, #204]	; (8001674 <ICM20602_Initialization+0x108>)
 80015a8:	f004 fdc2 	bl	8006130 <iprintf>
 80015ac:	e012      	b.n	80015d4 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	2b12      	cmp	r3, #18
 80015b2:	d00f      	beq.n	80015d4 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 80015b4:	2075      	movs	r0, #117	; 0x75
 80015b6:	f7ff ff69 	bl	800148c <ICM20602_Readbyte>
 80015ba:	4603      	mov	r3, r0
 80015bc:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	2b12      	cmp	r3, #18
 80015c2:	d007      	beq.n	80015d4 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	2212      	movs	r2, #18
 80015c8:	4619      	mov	r1, r3
 80015ca:	482b      	ldr	r0, [pc, #172]	; (8001678 <ICM20602_Initialization+0x10c>)
 80015cc:	f004 fdb0 	bl	8006130 <iprintf>
			return 1; //ERROR
 80015d0:	2301      	movs	r3, #1
 80015d2:	e048      	b.n	8001666 <ICM20602_Initialization+0xfa>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	206b      	movs	r0, #107	; 0x6b
 80015d8:	f7ff ffa6 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 80015dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015e0:	f001 fd62 	bl	80030a8 <usDelay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 80015e4:	2101      	movs	r1, #1
 80015e6:	206b      	movs	r0, #107	; 0x6b
 80015e8:	f7ff ff9e 	bl	8001528 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	usDelay(50000);
 80015ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015f0:	f001 fd5a 	bl	80030a8 <usDelay>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 80015f4:	2100      	movs	r1, #0
 80015f6:	206c      	movs	r0, #108	; 0x6c
 80015f8:	f7ff ff96 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 80015fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001600:	f001 fd52 	bl	80030a8 <usDelay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8001604:	2100      	movs	r1, #0
 8001606:	2019      	movs	r0, #25
 8001608:	f7ff ff8e 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800160c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001610:	f001 fd4a 	bl	80030a8 <usDelay>
	
	// Gyro DLPF Config
//	ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001614:	2105      	movs	r1, #5
 8001616:	201a      	movs	r0, #26
 8001618:	f7ff ff86 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800161c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001620:	f001 fd42 	bl	80030a8 <usDelay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001624:	2118      	movs	r1, #24
 8001626:	201b      	movs	r0, #27
 8001628:	f7ff ff7e 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800162c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001630:	f001 fd3a 	bl	80030a8 <usDelay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001634:	2118      	movs	r1, #24
 8001636:	201c      	movs	r0, #28
 8001638:	f7ff ff76 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800163c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001640:	f001 fd32 	bl	80030a8 <usDelay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001644:	2103      	movs	r1, #3
 8001646:	201d      	movs	r0, #29
 8001648:	f7ff ff6e 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800164c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001650:	f001 fd2a 	bl	80030a8 <usDelay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001654:	2101      	movs	r1, #1
 8001656:	2038      	movs	r0, #56	; 0x38
 8001658:	f7ff ff66 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800165c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001660:	f001 fd22 	bl	80030a8 <usDelay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	080089a8 	.word	0x080089a8
 8001674:	080089c0 	.word	0x080089c0
 8001678:	080089e4 	.word	0x080089e4

0800167c <ICM20602_Get6AxisRawData>:

void ICM20602_Get6AxisRawData(short* accel, short* gyro)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
	unsigned char data[14];
	ICM20602_Readbytes(ACCEL_XOUT_H, 14, data);
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	461a      	mov	r2, r3
 800168c:	210e      	movs	r1, #14
 800168e:	203b      	movs	r0, #59	; 0x3b
 8001690:	f7ff ff1c 	bl	80014cc <ICM20602_Readbytes>
	
	accel[0] = (data[0] << 8) | data[1];
 8001694:	7a3b      	ldrb	r3, [r7, #8]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	b21a      	sxth	r2, r3
 800169a:	7a7b      	ldrb	r3, [r7, #9]
 800169c:	b21b      	sxth	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	801a      	strh	r2, [r3, #0]
	accel[1] = (data[2] << 8) | data[3];
 80016a6:	7abb      	ldrb	r3, [r7, #10]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	b219      	sxth	r1, r3
 80016ac:	7afb      	ldrb	r3, [r7, #11]
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3302      	adds	r3, #2
 80016b4:	430a      	orrs	r2, r1
 80016b6:	b212      	sxth	r2, r2
 80016b8:	801a      	strh	r2, [r3, #0]
	accel[2] = (data[4] << 8) | data[5];
 80016ba:	7b3b      	ldrb	r3, [r7, #12]
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b219      	sxth	r1, r3
 80016c0:	7b7b      	ldrb	r3, [r7, #13]
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3304      	adds	r3, #4
 80016c8:	430a      	orrs	r2, r1
 80016ca:	b212      	sxth	r2, r2
 80016cc:	801a      	strh	r2, [r3, #0]

	gyro[0] = ((data[8] << 8) | data[9]);
 80016ce:	7c3b      	ldrb	r3, [r7, #16]
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	b21a      	sxth	r2, r3
 80016d4:	7c7b      	ldrb	r3, [r7, #17]
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	b21a      	sxth	r2, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[10] << 8) | data[11]);
 80016e0:	7cbb      	ldrb	r3, [r7, #18]
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b219      	sxth	r1, r3
 80016e6:	7cfb      	ldrb	r3, [r7, #19]
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	3302      	adds	r3, #2
 80016ee:	430a      	orrs	r2, r1
 80016f0:	b212      	sxth	r2, r2
 80016f2:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[12] << 8) | data[13]);
 80016f4:	7d3b      	ldrb	r3, [r7, #20]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b219      	sxth	r1, r3
 80016fa:	7d7b      	ldrb	r3, [r7, #21]
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	3304      	adds	r3, #4
 8001702:	430a      	orrs	r2, r1
 8001704:	b212      	sxth	r2, r2
 8001706:	801a      	strh	r2, [r3, #0]
}
 8001708:	bf00      	nop
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8001714:	2110      	movs	r1, #16
 8001716:	4803      	ldr	r0, [pc, #12]	; (8001724 <ICM20602_DataReady+0x14>)
 8001718:	f7ff fde7 	bl	80012ea <LL_GPIO_IsInputPinSet>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40020800 	.word	0x40020800

08001728 <GetRPY>:
float twoKi = 0.0f;                      // 2 * integral gain (Ki)
float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f; // integral error terms scaled by Ki


void GetRPY(float* sampleFreq)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af02      	add	r7, sp, #8
 800172e:	6078      	str	r0, [r7, #4]


	  ICM20602_Get6AxisRawData(&ICM20602.acc_x_raw, &ICM20602.gyro_x_raw);	//	39.11us
 8001730:	4967      	ldr	r1, [pc, #412]	; (80018d0 <GetRPY+0x1a8>)
 8001732:	4868      	ldr	r0, [pc, #416]	; (80018d4 <GetRPY+0x1ac>)
 8001734:	f7ff ffa2 	bl	800167c <ICM20602_Get6AxisRawData>
	  GYROX_RATE = (ICM20602.gyro_x_raw - gx_cal) * 0.06103515625 * 0.017453289;
 8001738:	4b66      	ldr	r3, [pc, #408]	; (80018d4 <GetRPY+0x1ac>)
 800173a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800173e:	ee07 3a90 	vmov	s15, r3
 8001742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001746:	4b64      	ldr	r3, [pc, #400]	; (80018d8 <GetRPY+0x1b0>)
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001750:	ee17 0a90 	vmov	r0, s15
 8001754:	f7fe fef8 	bl	8000548 <__aeabi_f2d>
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	4b5f      	ldr	r3, [pc, #380]	; (80018dc <GetRPY+0x1b4>)
 800175e:	f7fe ff4b 	bl	80005f8 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	a357      	add	r3, pc, #348	; (adr r3, 80018c8 <GetRPY+0x1a0>)
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	f7fe ff42 	bl	80005f8 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f7ff fa14 	bl	8000ba8 <__aeabi_d2f>
 8001780:	4603      	mov	r3, r0
 8001782:	4a57      	ldr	r2, [pc, #348]	; (80018e0 <GetRPY+0x1b8>)
 8001784:	6013      	str	r3, [r2, #0]
	  GYROY_RATE = (ICM20602.gyro_y_raw - gy_cal) * 0.06103515625 * 0.017453289;
 8001786:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <GetRPY+0x1ac>)
 8001788:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001794:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <GetRPY+0x1bc>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179e:	ee17 0a90 	vmov	r0, s15
 80017a2:	f7fe fed1 	bl	8000548 <__aeabi_f2d>
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	4b4c      	ldr	r3, [pc, #304]	; (80018dc <GetRPY+0x1b4>)
 80017ac:	f7fe ff24 	bl	80005f8 <__aeabi_dmul>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	a343      	add	r3, pc, #268	; (adr r3, 80018c8 <GetRPY+0x1a0>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7fe ff1b 	bl	80005f8 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f9ed 	bl	8000ba8 <__aeabi_d2f>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4a45      	ldr	r2, [pc, #276]	; (80018e8 <GetRPY+0x1c0>)
 80017d2:	6013      	str	r3, [r2, #0]
	  GYROZ_RATE = (ICM20602.gyro_z_raw - gz_cal) * 0.06103515625 * 0.017453289;
 80017d4:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <GetRPY+0x1ac>)
 80017d6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e2:	4b42      	ldr	r3, [pc, #264]	; (80018ec <GetRPY+0x1c4>)
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ec:	ee17 0a90 	vmov	r0, s15
 80017f0:	f7fe feaa 	bl	8000548 <__aeabi_f2d>
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4b38      	ldr	r3, [pc, #224]	; (80018dc <GetRPY+0x1b4>)
 80017fa:	f7fe fefd 	bl	80005f8 <__aeabi_dmul>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	a330      	add	r3, pc, #192	; (adr r3, 80018c8 <GetRPY+0x1a0>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe fef4 	bl	80005f8 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f9c6 	bl	8000ba8 <__aeabi_d2f>
 800181c:	4603      	mov	r3, r0
 800181e:	4a34      	ldr	r2, [pc, #208]	; (80018f0 <GetRPY+0x1c8>)
 8001820:	6013      	str	r3, [r2, #0]

	  ACCX_RATE = (ICM20602.acc_x_raw - ax_cal) * 0.00048828125;
 8001822:	4b2c      	ldr	r3, [pc, #176]	; (80018d4 <GetRPY+0x1ac>)
 8001824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001828:	ee07 3a90 	vmov	s15, r3
 800182c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001830:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <GetRPY+0x1cc>)
 8001832:	edd3 7a00 	vldr	s15, [r3]
 8001836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800183a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80018f8 <GetRPY+0x1d0>
 800183e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <GetRPY+0x1d4>)
 8001844:	edc3 7a00 	vstr	s15, [r3]
	  ACCY_RATE = (ICM20602.acc_y_raw - ay_cal) * 0.00048828125;
 8001848:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <GetRPY+0x1ac>)
 800184a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001856:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <GetRPY+0x1d8>)
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001860:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80018f8 <GetRPY+0x1d0>
 8001864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001868:	4b26      	ldr	r3, [pc, #152]	; (8001904 <GetRPY+0x1dc>)
 800186a:	edc3 7a00 	vstr	s15, [r3]
	  ACCZ_RATE = (ICM20602.acc_z_raw) * 0.00048828125;
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <GetRPY+0x1ac>)
 8001870:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe55 	bl	8000524 <__aeabi_i2d>
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8001882:	f7fe feb9 	bl	80005f8 <__aeabi_dmul>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff f98b 	bl	8000ba8 <__aeabi_d2f>
 8001892:	4603      	mov	r3, r0
 8001894:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <GetRPY+0x1e0>)
 8001896:	6013      	str	r3, [r2, #0]

//		  MadgwickQuaternionUpdate(&ACCX_RATE,&ACCY_RATE,&ACCZ_RATE,&GYROX_RATE,&GYROY_RATE,&GYROZ_RATE);	//57us
	  MahonyAHRSupdateIMU(&GYROX_RATE,&GYROY_RATE,&GYROZ_RATE, &ACCX_RATE,&ACCY_RATE,&ACCZ_RATE, *sampleFreq);		//42us
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <GetRPY+0x1e0>)
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <GetRPY+0x1dc>)
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	eeb0 0a67 	vmov.f32	s0, s15
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <GetRPY+0x1d4>)
 80018ac:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <GetRPY+0x1c8>)
 80018ae:	490e      	ldr	r1, [pc, #56]	; (80018e8 <GetRPY+0x1c0>)
 80018b0:	480b      	ldr	r0, [pc, #44]	; (80018e0 <GetRPY+0x1b8>)
 80018b2:	f000 f903 	bl	8001abc <MahonyAHRSupdateIMU>
	  Quaternion_Update(&q);	//10us
 80018b6:	4815      	ldr	r0, [pc, #84]	; (800190c <GetRPY+0x1e4>)
 80018b8:	f000 f82a 	bl	8001910 <Quaternion_Update>

//		  printf("%.2f\n",(sampleFreq[0]));
//		  printf("%.d %.d %.d\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
//		  printf("%.1f %.1f %.1f\n", GYROX_RATE, GYROY_RATE, GYROZ_RATE);
//		  printf("%.1f %.1f %.1f\n", ACCX_RATE, ACCY_RATE, ACCZ_RATE);
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	f3af 8000 	nop.w
 80018c8:	65d9bd65 	.word	0x65d9bd65
 80018cc:	3f91df46 	.word	0x3f91df46
 80018d0:	20000214 	.word	0x20000214
 80018d4:	2000020c 	.word	0x2000020c
 80018d8:	20000258 	.word	0x20000258
 80018dc:	3faf4000 	.word	0x3faf4000
 80018e0:	20000240 	.word	0x20000240
 80018e4:	2000025c 	.word	0x2000025c
 80018e8:	20000244 	.word	0x20000244
 80018ec:	20000260 	.word	0x20000260
 80018f0:	20000248 	.word	0x20000248
 80018f4:	20000264 	.word	0x20000264
 80018f8:	3a000000 	.word	0x3a000000
 80018fc:	2000024c 	.word	0x2000024c
 8001900:	20000268 	.word	0x20000268
 8001904:	20000250 	.word	0x20000250
 8001908:	20000254 	.word	0x20000254
 800190c:	20000000 	.word	0x20000000

08001910 <Quaternion_Update>:

void Quaternion_Update(float* q)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;

	q1 = q[0]; //x
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	617b      	str	r3, [r7, #20]
	q2 = q[1]; //y
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	613b      	str	r3, [r7, #16]
	q3 = q[2]; //z
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	60fb      	str	r3, [r7, #12]
	q4 = q[3]; //w
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	60bb      	str	r3, [r7, #8]


	Yaw 	= -atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8001930:	ed97 7a04 	vldr	s14, [r7, #16]
 8001934:	edd7 7a03 	vldr	s15, [r7, #12]
 8001938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800193c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001940:	edd7 7a02 	vldr	s15, [r7, #8]
 8001944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800194c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001950:	edd7 7a05 	vldr	s15, [r7, #20]
 8001954:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001958:	edd7 7a04 	vldr	s15, [r7, #16]
 800195c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001960:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001964:	edd7 7a03 	vldr	s15, [r7, #12]
 8001968:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800196c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001970:	edd7 7a02 	vldr	s15, [r7, #8]
 8001974:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197c:	eef0 0a67 	vmov.f32	s1, s15
 8001980:	eeb0 0a66 	vmov.f32	s0, s13
 8001984:	f006 fce2 	bl	800834c <atan2f>
 8001988:	eef0 7a40 	vmov.f32	s15, s0
 800198c:	eef1 7a67 	vneg.f32	s15, s15
 8001990:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <Quaternion_Update+0x198>)
 8001992:	edc3 7a00 	vstr	s15, [r3]
	Pitch  	= -asinf(2.0f * (q2*q4 - q1*q3));
 8001996:	ed97 7a04 	vldr	s14, [r7, #16]
 800199a:	edd7 7a02 	vldr	s15, [r7, #8]
 800199e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a2:	edd7 6a05 	vldr	s13, [r7, #20]
 80019a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80019aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019b6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ba:	f006 fc9b 	bl	80082f4 <asinf>
 80019be:	eef0 7a40 	vmov.f32	s15, s0
 80019c2:	eef1 7a67 	vneg.f32	s15, s15
 80019c6:	4b39      	ldr	r3, [pc, #228]	; (8001aac <Quaternion_Update+0x19c>)
 80019c8:	edc3 7a00 	vstr	s15, [r3]
	Roll   	= atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 80019cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80019d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80019d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d8:	edd7 6a03 	vldr	s13, [r7, #12]
 80019dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80019f0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80019f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a00:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a18:	eef0 0a67 	vmov.f32	s1, s15
 8001a1c:	eeb0 0a66 	vmov.f32	s0, s13
 8001a20:	f006 fc94 	bl	800834c <atan2f>
 8001a24:	eef0 7a40 	vmov.f32	s15, s0
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <Quaternion_Update+0x1a0>)
 8001a2a:	edc3 7a00 	vstr	s15, [r3]

	Pitch *= RAD2DEG;
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <Quaternion_Update+0x19c>)
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001ab4 <Quaternion_Update+0x1a4>
 8001a38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <Quaternion_Update+0x19c>)
 8001a3e:	edc3 7a00 	vstr	s15, [r3]
	Roll  *= RAD2DEG;
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <Quaternion_Update+0x1a0>)
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001ab4 <Quaternion_Update+0x1a4>
 8001a4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <Quaternion_Update+0x1a0>)
 8001a52:	edc3 7a00 	vstr	s15, [r3]
	Yaw   *= RAD2DEG;
 8001a56:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001ab4 <Quaternion_Update+0x1a4>
 8001a60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a64:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a66:	edc3 7a00 	vstr	s15, [r3]
	
	if(Yaw>=0)
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a6c:	edd3 7a00 	vldr	s15, [r3]
 8001a70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a78:	db0a      	blt.n	8001a90 <Quaternion_Update+0x180>
		Yaw = 360.f - Yaw;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001ab8 <Quaternion_Update+0x1a8>
 8001a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a8a:	edc3 7a00 	vstr	s15, [r3]
	
//	 printf("%d %d %d\n", (int)(Roll), (int)(Pitch), (int)(Yaw));
//	 printf("%d %d %d\n", (int)(q[0]*100), (int)(q[1]*100),(int)(q[2]*100));


}
 8001a8e:	e007      	b.n	8001aa0 <Quaternion_Update+0x190>
		Yaw = -Yaw;
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	eef1 7a67 	vneg.f32	s15, s15
 8001a9a:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a9c:	edc3 7a00 	vstr	s15, [r3]
}
 8001aa0:	bf00      	nop
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	2000023c 	.word	0x2000023c
 8001aac:	20000238 	.word	0x20000238
 8001ab0:	20000234 	.word	0x20000234
 8001ab4:	42652ee1 	.word	0x42652ee1
 8001ab8:	43b40000 	.word	0x43b40000

08001abc <MahonyAHRSupdateIMU>:
    q[2] = q3 * norm;
    q[3] = q4 * norm;
}


void MahonyAHRSupdateIMU(float* gx, float* gy, float* gz, float* ax, float* ay, float* az, float sampleFreq) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b090      	sub	sp, #64	; 0x40
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6178      	str	r0, [r7, #20]
 8001ac4:	6139      	str	r1, [r7, #16]
 8001ac6:	60fa      	str	r2, [r7, #12]
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	ed87 0a01 	vstr	s0, [r7, #4]
  float halfvx, halfvy, halfvz;
  float halfex, halfey, halfez;
  float qa, qb, qc;

  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if(!((ax[0] == 0.0f) && (ay[0] == 0.0f) && (az[0] == 0.0f))) {
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001adc:	d110      	bne.n	8001b00 <MahonyAHRSupdateIMU+0x44>
 8001ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aec:	d108      	bne.n	8001b00 <MahonyAHRSupdateIMU+0x44>
 8001aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afc:	f000 8175 	beq.w	8001dea <MahonyAHRSupdateIMU+0x32e>

    // Normalise accelerometer measurement
    norm = sqrt(ax[0] * ax[0] + ay[0] * ay[0] + az[0] * az[0]);
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	ed93 7a00 	vldr	s14, [r3]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b12:	edd3 6a00 	vldr	s13, [r3]
 8001b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b26:	edd3 6a00 	vldr	s13, [r3]
 8001b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b38:	ee17 0a90 	vmov	r0, s15
 8001b3c:	f7fe fd04 	bl	8000548 <__aeabi_f2d>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	ec43 2b10 	vmov	d0, r2, r3
 8001b48:	f006 fba8 	bl	800829c <sqrt>
 8001b4c:	ec53 2b10 	vmov	r2, r3, d0
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	f7ff f828 	bl	8000ba8 <__aeabi_d2f>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    ax[0] /= norm;
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	edd3 6a00 	vldr	s13, [r3]
 8001b62:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	edc3 7a00 	vstr	s15, [r3]
    ay[0] /= norm;
 8001b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b72:	edd3 6a00 	vldr	s13, [r3]
 8001b76:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b80:	edc3 7a00 	vstr	s15, [r3]
    az[0] /= norm;
 8001b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b86:	edd3 6a00 	vldr	s13, [r3]
 8001b8a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b94:	edc3 7a00 	vstr	s15, [r3]

    // Estimated direction of gravity and vector perpendicular to magnetic flux
    halfvx = q[1] * q[3] - q[0] * q[2];
 8001b98:	4b72      	ldr	r3, [pc, #456]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001b9a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b9e:	4b71      	ldr	r3, [pc, #452]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001ba0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba8:	4b6e      	ldr	r3, [pc, #440]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001baa:	edd3 6a00 	vldr	s13, [r3]
 8001bae:	4b6d      	ldr	r3, [pc, #436]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bbc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    halfvy = q[0] * q[1] + q[2] * q[3];
 8001bc0:	4b68      	ldr	r3, [pc, #416]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bc2:	ed93 7a00 	vldr	s14, [r3]
 8001bc6:	4b67      	ldr	r3, [pc, #412]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd0:	4b64      	ldr	r3, [pc, #400]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bd2:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bd6:	4b63      	ldr	r3, [pc, #396]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bd8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8001be8:	4b5e      	ldr	r3, [pc, #376]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bea:	ed93 7a00 	vldr	s14, [r3]
 8001bee:	4b5d      	ldr	r3, [pc, #372]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bf0:	edd3 7a00 	vldr	s15, [r3]
 8001bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001bfc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c00:	4b58      	ldr	r3, [pc, #352]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001c02:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c06:	4b57      	ldr	r3, [pc, #348]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001c08:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c14:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    // Error is sum of cross product between estimated and measured direction of gravity
    halfex = (ay[0] * halfvz - az[0] * halfvy);
 8001c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c1a:	ed93 7a00 	vldr	s14, [r3]
 8001c1e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001c22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c28:	edd3 6a00 	vldr	s13, [r3]
 8001c2c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c38:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    halfey = (az[0] * halfvx - ax[0] * halfvz);
 8001c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c3e:	ed93 7a00 	vldr	s14, [r3]
 8001c42:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	edd3 6a00 	vldr	s13, [r3]
 8001c50:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001c54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c5c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    halfez = (ax[0] * halfvy - ay[0] * halfvx);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	ed93 7a00 	vldr	s14, [r3]
 8001c66:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c70:	edd3 6a00 	vldr	s13, [r3]
 8001c74:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // Compute and apply integral feedback if enabled
    if(twoKi > 0.0f) {
 8001c84:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <MahonyAHRSupdateIMU+0x2ac>)
 8001c86:	edd3 7a00 	vldr	s15, [r3]
 8001c8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	dd71      	ble.n	8001d78 <MahonyAHRSupdateIMU+0x2bc>
      integralFBx += twoKi * halfex * (1.0f / sampleFreq);  // integral error scaled by Ki
 8001c94:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <MahonyAHRSupdateIMU+0x2ac>)
 8001c96:	ed93 7a00 	vldr	s14, [r3]
 8001c9a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ca2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001ca6:	edd7 6a01 	vldr	s13, [r7, #4]
 8001caa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001cae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb2:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <MahonyAHRSupdateIMU+0x2b0>)
 8001cb4:	edd3 7a00 	vldr	s15, [r3]
 8001cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <MahonyAHRSupdateIMU+0x2b0>)
 8001cbe:	edc3 7a00 	vstr	s15, [r3]
      integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 8001cc2:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <MahonyAHRSupdateIMU+0x2ac>)
 8001cc4:	ed93 7a00 	vldr	s14, [r3]
 8001cc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ccc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001cd4:	edd7 6a01 	vldr	s13, [r7, #4]
 8001cd8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce0:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <MahonyAHRSupdateIMU+0x2b4>)
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cea:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <MahonyAHRSupdateIMU+0x2b4>)
 8001cec:	edc3 7a00 	vstr	s15, [r3]
      integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <MahonyAHRSupdateIMU+0x2ac>)
 8001cf2:	ed93 7a00 	vldr	s14, [r3]
 8001cf6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cfe:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001d02:	edd7 6a01 	vldr	s13, [r7, #4]
 8001d06:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001d0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <MahonyAHRSupdateIMU+0x2b8>)
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d18:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <MahonyAHRSupdateIMU+0x2b8>)
 8001d1a:	edc3 7a00 	vstr	s15, [r3]
      gx[0] += integralFBx;  // apply integral feedback
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	ed93 7a00 	vldr	s14, [r3]
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MahonyAHRSupdateIMU+0x2b0>)
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	edc3 7a00 	vstr	s15, [r3]
      gy[0] += integralFBy;
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	ed93 7a00 	vldr	s14, [r3]
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <MahonyAHRSupdateIMU+0x2b4>)
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	edc3 7a00 	vstr	s15, [r3]
      gz[0] += integralFBz;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	ed93 7a00 	vldr	s14, [r3]
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <MahonyAHRSupdateIMU+0x2b8>)
 8001d52:	edd3 7a00 	vldr	s15, [r3]
 8001d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	edc3 7a00 	vstr	s15, [r3]
 8001d60:	e016      	b.n	8001d90 <MahonyAHRSupdateIMU+0x2d4>
 8001d62:	bf00      	nop
 8001d64:	20000000 	.word	0x20000000
 8001d68:	2000026c 	.word	0x2000026c
 8001d6c:	20000270 	.word	0x20000270
 8001d70:	20000274 	.word	0x20000274
 8001d74:	20000278 	.word	0x20000278
    }
    else {
      integralFBx = 0.0f; // prevent integral windup
 8001d78:	4bb2      	ldr	r3, [pc, #712]	; (8002044 <MahonyAHRSupdateIMU+0x588>)
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
      integralFBy = 0.0f;
 8001d80:	4bb1      	ldr	r3, [pc, #708]	; (8002048 <MahonyAHRSupdateIMU+0x58c>)
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
      integralFBz = 0.0f;
 8001d88:	4bb0      	ldr	r3, [pc, #704]	; (800204c <MahonyAHRSupdateIMU+0x590>)
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
    }

    // Apply proportional feedback
    gx[0] += twoKp * halfex;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	ed93 7a00 	vldr	s14, [r3]
 8001d96:	4bae      	ldr	r3, [pc, #696]	; (8002050 <MahonyAHRSupdateIMU+0x594>)
 8001d98:	edd3 6a00 	vldr	s13, [r3]
 8001d9c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	edc3 7a00 	vstr	s15, [r3]
    gy[0] += twoKp * halfey;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	ed93 7a00 	vldr	s14, [r3]
 8001db4:	4ba6      	ldr	r3, [pc, #664]	; (8002050 <MahonyAHRSupdateIMU+0x594>)
 8001db6:	edd3 6a00 	vldr	s13, [r3]
 8001dba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001dbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	edc3 7a00 	vstr	s15, [r3]
    gz[0] += twoKp * halfez;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	ed93 7a00 	vldr	s14, [r3]
 8001dd2:	4b9f      	ldr	r3, [pc, #636]	; (8002050 <MahonyAHRSupdateIMU+0x594>)
 8001dd4:	edd3 6a00 	vldr	s13, [r3]
 8001dd8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ddc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	edc3 7a00 	vstr	s15, [r3]
  }

  // Integrate rate of change of quaternion
  gx[0] *= (0.5f * (1.0f / sampleFreq));   // pre-multiply common factors
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	ed93 7a00 	vldr	s14, [r3]
 8001df0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001df4:	edd7 6a01 	vldr	s13, [r7, #4]
 8001df8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001dfc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001e00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	edc3 7a00 	vstr	s15, [r3]
  gy[0] *= (0.5f * (1.0f / sampleFreq));
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	ed93 7a00 	vldr	s14, [r3]
 8001e14:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001e18:	edd7 6a01 	vldr	s13, [r7, #4]
 8001e1c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e20:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001e24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	edc3 7a00 	vstr	s15, [r3]
  gz[0] *= (0.5f * (1.0f / sampleFreq));
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	ed93 7a00 	vldr	s14, [r3]
 8001e38:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001e3c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001e40:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e44:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001e48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	edc3 7a00 	vstr	s15, [r3]
  qa = q[0];
 8001e56:	4b7f      	ldr	r3, [pc, #508]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	623b      	str	r3, [r7, #32]
  qb = q[1];
 8001e5c:	4b7d      	ldr	r3, [pc, #500]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	61fb      	str	r3, [r7, #28]
  qc = q[2];
 8001e62:	4b7c      	ldr	r3, [pc, #496]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	61bb      	str	r3, [r7, #24]
  q[0] += (-qb * gx[0] - qc * gy[0] - q[3] * gz[0]);
 8001e68:	4b7a      	ldr	r3, [pc, #488]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001e6a:	ed93 7a00 	vldr	s14, [r3]
 8001e6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e72:	eef1 6a67 	vneg.f32	s13, s15
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	ed93 6a00 	vldr	s12, [r3]
 8001e86:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e8e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e92:	4b70      	ldr	r3, [pc, #448]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001e94:	ed93 6a03 	vldr	s12, [r3, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ea2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eaa:	4b6a      	ldr	r3, [pc, #424]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001eac:	edc3 7a00 	vstr	s15, [r3]
  q[1] += (qa * gx[0] + qc * gz[0] - q[3] * gy[0]);
 8001eb0:	4b68      	ldr	r3, [pc, #416]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001eb2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	edd3 6a00 	vldr	s13, [r3]
 8001ebc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ec0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	ed93 6a00 	vldr	s12, [r3]
 8001eca:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ece:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ed2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ed6:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001ed8:	ed93 6a03 	vldr	s12, [r3, #12]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	edd3 7a00 	vldr	s15, [r3]
 8001ee2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ee6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eee:	4b59      	ldr	r3, [pc, #356]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001ef0:	edc3 7a01 	vstr	s15, [r3, #4]
  q[2] += (qa * gy[0] - qb * gz[0] + q[3] * gx[0]);
 8001ef4:	4b57      	ldr	r3, [pc, #348]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001ef6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	edd3 6a00 	vldr	s13, [r3]
 8001f00:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	ed93 6a00 	vldr	s12, [r3]
 8001f0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f16:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f1a:	4b4e      	ldr	r3, [pc, #312]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f1c:	ed93 6a03 	vldr	s12, [r3, #12]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f32:	4b48      	ldr	r3, [pc, #288]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f34:	edc3 7a02 	vstr	s15, [r3, #8]
  q[3] += (qa * gz[0] + qb * gy[0] - qc * gx[0]);
 8001f38:	4b46      	ldr	r3, [pc, #280]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f3a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	edd3 6a00 	vldr	s13, [r3]
 8001f44:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	ed93 6a00 	vldr	s12, [r3]
 8001f52:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f5a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	ed93 6a00 	vldr	s12, [r3]
 8001f64:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f6c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f74:	4b37      	ldr	r3, [pc, #220]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f76:	edc3 7a03 	vstr	s15, [r3, #12]

  // Normalise quaternion
  norm = sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8001f7a:	4b36      	ldr	r3, [pc, #216]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f7c:	ed93 7a00 	vldr	s14, [r3]
 8001f80:	4b34      	ldr	r3, [pc, #208]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f82:	edd3 7a00 	vldr	s15, [r3]
 8001f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f8a:	4b32      	ldr	r3, [pc, #200]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f8c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f90:	4b30      	ldr	r3, [pc, #192]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f92:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f9e:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001fa0:	edd3 6a02 	vldr	s13, [r3, #8]
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001fa6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001faa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fb2:	4b28      	ldr	r3, [pc, #160]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001fb4:	edd3 6a03 	vldr	s13, [r3, #12]
 8001fb8:	4b26      	ldr	r3, [pc, #152]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001fba:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc6:	ee17 0a90 	vmov	r0, s15
 8001fca:	f7fe fabd 	bl	8000548 <__aeabi_f2d>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	ec43 2b10 	vmov	d0, r2, r3
 8001fd6:	f006 f961 	bl	800829c <sqrt>
 8001fda:	ec53 2b10 	vmov	r2, r3, d0
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f7fe fde1 	bl	8000ba8 <__aeabi_d2f>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  q[0] /= norm;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001fec:	edd3 6a00 	vldr	s13, [r3]
 8001ff0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001ffa:	edc3 7a00 	vstr	s15, [r3]
  q[1] /= norm;
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8002000:	edd3 6a01 	vldr	s13, [r3, #4]
 8002004:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 800200e:	edc3 7a01 	vstr	s15, [r3, #4]
  q[2] /= norm;
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8002014:	edd3 6a02 	vldr	s13, [r3, #8]
 8002018:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800201c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8002022:	edc3 7a02 	vstr	s15, [r3, #8]
  q[3] /= norm;
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8002028:	edd3 6a03 	vldr	s13, [r3, #12]
 800202c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8002036:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800203a:	bf00      	nop
 800203c:	3740      	adds	r7, #64	; 0x40
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000270 	.word	0x20000270
 8002048:	20000274 	.word	0x20000274
 800204c:	20000278 	.word	0x20000278
 8002050:	20000010 	.word	0x20000010
 8002054:	20000000 	.word	0x20000000

08002058 <SBUS_Parsing>:

}


void SBUS_Parsing(SBUS_RAW_MESSAGE* raw, MSG_SBUS* msg_sbus, int* rx_recv_cnt, int* rx_err_cnt)
{
 8002058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800205a:	b093      	sub	sp, #76	; 0x4c
 800205c:	af08      	add	r7, sp, #32
 800205e:	6178      	str	r0, [r7, #20]
 8002060:	6139      	str	r1, [r7, #16]
 8002062:	60fa      	str	r2, [r7, #12]
 8002064:	60bb      	str	r3, [r7, #8]
	uint8_t* ptr = raw->rx_buf;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3308      	adds	r3, #8
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t temp;
	unsigned short msg_length = 0, checksum = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002070:	2300      	movs	r3, #0
 8002072:	843b      	strh	r3, [r7, #32]
	unsigned char classID = 0, messageID = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	77fb      	strb	r3, [r7, #31]
 8002078:	2300      	movs	r3, #0
 800207a:	77bb      	strb	r3, [r7, #30]
	if(ptr[0]==MSG_SBUS_SOF ){
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b0f      	cmp	r3, #15
 8002082:	f040 819e 	bne.w	80023c2 <SBUS_Parsing+0x36a>
		msg_sbus->header = ptr[0];
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	701a      	strb	r2, [r3, #0]
	       msg_sbus->rx_channel[0]   = (int16_t)(ptr[1] | ((ptr[2] << 8) & 0x07FF));
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	3301      	adds	r3, #1
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b21a      	sxth	r2, r3
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	3302      	adds	r3, #2
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	b21b      	sxth	r3, r3
 80020a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b21a      	sxth	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	805a      	strh	r2, [r3, #2]
	        msg_sbus->rx_channel[1]  = (int16_t)((ptr[2] >> 3) | ((ptr[3] << 5) & 0x07FF));
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	3302      	adds	r3, #2
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	b21a      	sxth	r2, r3
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	3303      	adds	r3, #3
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	015b      	lsls	r3, r3, #5
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	4313      	orrs	r3, r2
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	809a      	strh	r2, [r3, #4]
	        msg_sbus->rx_channel[2]  = (int16_t)((ptr[3] >> 6) | (ptr[4] << 2) | ((ptr[5] << 10) & 0x07FF));
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	3303      	adds	r3, #3
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	099b      	lsrs	r3, r3, #6
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	b21a      	sxth	r2, r3
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	3304      	adds	r3, #4
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	4313      	orrs	r3, r2
 80020ea:	b21a      	sxth	r2, r3
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	3305      	adds	r3, #5
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	029b      	lsls	r3, r3, #10
 80020f4:	b21b      	sxth	r3, r3
 80020f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020fa:	b21b      	sxth	r3, r3
 80020fc:	4313      	orrs	r3, r2
 80020fe:	b21a      	sxth	r2, r3
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	80da      	strh	r2, [r3, #6]
	        msg_sbus->rx_channel[3]  = (int16_t)((ptr[5] >> 1) | ((ptr[6] << 7) & 0x07FF));
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	3305      	adds	r3, #5
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	b21a      	sxth	r2, r3
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	3306      	adds	r3, #6
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	01db      	lsls	r3, r3, #7
 8002118:	b21b      	sxth	r3, r3
 800211a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800211e:	b21b      	sxth	r3, r3
 8002120:	4313      	orrs	r3, r2
 8002122:	b21a      	sxth	r2, r3
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	811a      	strh	r2, [r3, #8]
	        msg_sbus->rx_channel[4]  = (int16_t)((ptr[6] >> 4) | ((ptr[7] << 4) & 0x07FF));
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	3306      	adds	r3, #6
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	b2db      	uxtb	r3, r3
 8002132:	b21a      	sxth	r2, r3
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	3307      	adds	r3, #7
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	b21b      	sxth	r3, r3
 800213e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002142:	b21b      	sxth	r3, r3
 8002144:	4313      	orrs	r3, r2
 8002146:	b21a      	sxth	r2, r3
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	815a      	strh	r2, [r3, #10]
	        msg_sbus->rx_channel[5]  = (int16_t)((ptr[7] >> 7) | (ptr[8] << 1) | ((ptr[9] << 9) & 0x07FF));
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	3307      	adds	r3, #7
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	09db      	lsrs	r3, r3, #7
 8002154:	b2db      	uxtb	r3, r3
 8002156:	b21a      	sxth	r2, r3
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	3308      	adds	r3, #8
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	b21b      	sxth	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b21a      	sxth	r2, r3
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	3309      	adds	r3, #9
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	025b      	lsls	r3, r3, #9
 800216e:	b21b      	sxth	r3, r3
 8002170:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002174:	b21b      	sxth	r3, r3
 8002176:	4313      	orrs	r3, r2
 8002178:	b21a      	sxth	r2, r3
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	819a      	strh	r2, [r3, #12]
	        msg_sbus->rx_channel[6]  = (int16_t)((ptr[9] >> 2) | ((ptr[10] << 6) & 0x07FF));
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	3309      	adds	r3, #9
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	b2db      	uxtb	r3, r3
 8002188:	b21a      	sxth	r2, r3
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	330a      	adds	r3, #10
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	019b      	lsls	r3, r3, #6
 8002192:	b21b      	sxth	r3, r3
 8002194:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002198:	b21b      	sxth	r3, r3
 800219a:	4313      	orrs	r3, r2
 800219c:	b21a      	sxth	r2, r3
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	81da      	strh	r2, [r3, #14]
	        msg_sbus->rx_channel[7]  = (int16_t)((ptr[10] >> 5) | ((ptr[11] << 3) & 0x07FF));
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	330a      	adds	r3, #10
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	b21a      	sxth	r2, r3
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	330b      	adds	r3, #11
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021bc:	b21b      	sxth	r3, r3
 80021be:	4313      	orrs	r3, r2
 80021c0:	b21a      	sxth	r2, r3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	821a      	strh	r2, [r3, #16]
	        msg_sbus->rx_channel[8]  = (int16_t)(ptr[12] | ((ptr[13] << 8) & 0x07FF));
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	330c      	adds	r3, #12
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b21a      	sxth	r2, r3
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	330d      	adds	r3, #13
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021dc:	b21b      	sxth	r3, r3
 80021de:	4313      	orrs	r3, r2
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	825a      	strh	r2, [r3, #18]
	        msg_sbus->rx_channel[9]  = (int16_t)((ptr[13] >> 3) | ((ptr[14] << 5) & 0x07FF));
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	330d      	adds	r3, #13
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	08db      	lsrs	r3, r3, #3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	b21a      	sxth	r2, r3
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	330e      	adds	r3, #14
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	015b      	lsls	r3, r3, #5
 80021fa:	b21b      	sxth	r3, r3
 80021fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002200:	b21b      	sxth	r3, r3
 8002202:	4313      	orrs	r3, r2
 8002204:	b21a      	sxth	r2, r3
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	829a      	strh	r2, [r3, #20]
	        msg_sbus->rx_channel[10] = (int16_t)((ptr[14] >> 6) | (ptr[15] << 2) |((ptr[16] << 10) & 0x07FF));
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	330e      	adds	r3, #14
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	099b      	lsrs	r3, r3, #6
 8002212:	b2db      	uxtb	r3, r3
 8002214:	b21a      	sxth	r2, r3
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	330f      	adds	r3, #15
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	b21b      	sxth	r3, r3
 8002220:	4313      	orrs	r3, r2
 8002222:	b21a      	sxth	r2, r3
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	3310      	adds	r3, #16
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	029b      	lsls	r3, r3, #10
 800222c:	b21b      	sxth	r3, r3
 800222e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002232:	b21b      	sxth	r3, r3
 8002234:	4313      	orrs	r3, r2
 8002236:	b21a      	sxth	r2, r3
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	82da      	strh	r2, [r3, #22]
	        msg_sbus->rx_channel[11] = (int16_t)((ptr[16] >> 1) | ((ptr[17] << 7) & 0x07FF));
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	3310      	adds	r3, #16
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	085b      	lsrs	r3, r3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	b21a      	sxth	r2, r3
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	3311      	adds	r3, #17
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	01db      	lsls	r3, r3, #7
 8002250:	b21b      	sxth	r3, r3
 8002252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002256:	b21b      	sxth	r3, r3
 8002258:	4313      	orrs	r3, r2
 800225a:	b21a      	sxth	r2, r3
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	831a      	strh	r2, [r3, #24]
	        msg_sbus->rx_channel[12] = (int16_t)((ptr[17] >> 4) | ((ptr[18] << 4) & 0x07FF));
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	3311      	adds	r3, #17
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	b2db      	uxtb	r3, r3
 800226a:	b21a      	sxth	r2, r3
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	3312      	adds	r3, #18
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	b21b      	sxth	r3, r3
 8002276:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800227a:	b21b      	sxth	r3, r3
 800227c:	4313      	orrs	r3, r2
 800227e:	b21a      	sxth	r2, r3
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	835a      	strh	r2, [r3, #26]
	        msg_sbus->rx_channel[13] = (int16_t)((ptr[18] >> 7) | (ptr[19] << 1) | ((ptr[20] << 9) & 0x07FF));
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	3312      	adds	r3, #18
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	09db      	lsrs	r3, r3, #7
 800228c:	b2db      	uxtb	r3, r3
 800228e:	b21a      	sxth	r2, r3
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	3313      	adds	r3, #19
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	b21b      	sxth	r3, r3
 800229a:	4313      	orrs	r3, r2
 800229c:	b21a      	sxth	r2, r3
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	3314      	adds	r3, #20
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	025b      	lsls	r3, r3, #9
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ac:	b21b      	sxth	r3, r3
 80022ae:	4313      	orrs	r3, r2
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	839a      	strh	r2, [r3, #28]
	        msg_sbus->rx_channel[14] = (int16_t)((ptr[20] >> 2) | ((ptr[21] << 6) & 0x07FF));
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	3314      	adds	r3, #20
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	089b      	lsrs	r3, r3, #2
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	b21a      	sxth	r2, r3
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	3315      	adds	r3, #21
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	019b      	lsls	r3, r3, #6
 80022ca:	b21b      	sxth	r3, r3
 80022cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	4313      	orrs	r3, r2
 80022d4:	b21a      	sxth	r2, r3
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	83da      	strh	r2, [r3, #30]
	        msg_sbus->rx_channel[15] = (int16_t)((ptr[21] >> 5) | ((ptr[22] << 3) & 0x07FF));
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	3315      	adds	r3, #21
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	b21a      	sxth	r2, r3
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	3316      	adds	r3, #22
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	b21b      	sxth	r3, r3
 80022f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022f4:	b21b      	sxth	r3, r3
 80022f6:	4313      	orrs	r3, r2
 80022f8:	b21a      	sxth	r2, r3
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	841a      	strh	r2, [r3, #32]
	        msg_sbus->rx_channel17 	= ptr[23] & MSG_SBUS_CH17_BIT_MASK;
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	3317      	adds	r3, #23
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	b2da      	uxtb	r2, r3
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	        msg_sbus->rx_channel18 	= ptr[23] & MSG_SBUS_CH18_BIT_MASK;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	3317      	adds	r3, #23
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	b2da      	uxtb	r2, r3
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	        msg_sbus->frame_lost 	= ptr[23] & MSG_SBUS_FL_BIT_MASK;
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	3317      	adds	r3, #23
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	b2da      	uxtb	r2, r3
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	        msg_sbus->failsafe 		= ptr[23] & MSG_SBUS_FS_BIT_MASK;
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	3317      	adds	r3, #23
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	b2da      	uxtb	r2, r3
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25


		rx_recv_cnt[0]++;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	601a      	str	r2, [r3, #0]

		printf("cnt: %d\t ch[1]:%d\t ch[2]:%d\t ch[3]:%d\t ch[4]:%d\t ch[5]:%d\t ch[6]:%d\t ch[7]:%d\t ch[8]:%d\t FL:%d FS:%d\n",rx_recv_cnt[0], msg_sbus->rx_channel[0],msg_sbus->rx_channel[1],msg_sbus->rx_channel[2],msg_sbus->rx_channel[3],msg_sbus->rx_channel[4],msg_sbus->rx_channel[5],msg_sbus->rx_channel[6],msg_sbus->rx_channel[7], msg_sbus->frame_lost, msg_sbus->failsafe);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6819      	ldr	r1, [r3, #0]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800235a:	469c      	mov	ip, r3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002362:	469e      	mov	lr, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800236a:	461a      	mov	r2, r3
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002372:	4618      	mov	r0, r3
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800237a:	461c      	mov	r4, r3
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002382:	461d      	mov	r5, r3
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800238a:	461e      	mov	r6, r3
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023a2:	9307      	str	r3, [sp, #28]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	9306      	str	r3, [sp, #24]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	9305      	str	r3, [sp, #20]
 80023ac:	9604      	str	r6, [sp, #16]
 80023ae:	9503      	str	r5, [sp, #12]
 80023b0:	9402      	str	r4, [sp, #8]
 80023b2:	9001      	str	r0, [sp, #4]
 80023b4:	9200      	str	r2, [sp, #0]
 80023b6:	4673      	mov	r3, lr
 80023b8:	4662      	mov	r2, ip
 80023ba:	4806      	ldr	r0, [pc, #24]	; (80023d4 <SBUS_Parsing+0x37c>)
 80023bc:	f003 feb8 	bl	8006130 <iprintf>
	{
		rx_err_cnt[0]++;
	}
//	printf("recv: %d\t err: %d\n", rx_recv_cnt[0], rx_err_cnt[0]);

}
 80023c0:	e004      	b.n	80023cc <SBUS_Parsing+0x374>
		rx_err_cnt[0]++;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	601a      	str	r2, [r3, #0]
}
 80023cc:	bf00      	nop
 80023ce:	372c      	adds	r7, #44	; 0x2c
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d4:	08008a10 	.word	0x08008a10

080023d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <__NVIC_GetPriorityGrouping+0x18>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	f003 0307 	and.w	r3, r3, #7
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	2b00      	cmp	r3, #0
 8002404:	db0b      	blt.n	800241e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	f003 021f 	and.w	r2, r3, #31
 800240c:	4907      	ldr	r1, [pc, #28]	; (800242c <__NVIC_EnableIRQ+0x38>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	2001      	movs	r0, #1
 8002416:	fa00 f202 	lsl.w	r2, r0, r2
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	e000e100 	.word	0xe000e100

08002430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	6039      	str	r1, [r7, #0]
 800243a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002440:	2b00      	cmp	r3, #0
 8002442:	db0a      	blt.n	800245a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	b2da      	uxtb	r2, r3
 8002448:	490c      	ldr	r1, [pc, #48]	; (800247c <__NVIC_SetPriority+0x4c>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	0112      	lsls	r2, r2, #4
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	440b      	add	r3, r1
 8002454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002458:	e00a      	b.n	8002470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4908      	ldr	r1, [pc, #32]	; (8002480 <__NVIC_SetPriority+0x50>)
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	3b04      	subs	r3, #4
 8002468:	0112      	lsls	r2, r2, #4
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	440b      	add	r3, r1
 800246e:	761a      	strb	r2, [r3, #24]
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000e100 	.word	0xe000e100
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002484:	b480      	push	{r7}
 8002486:	b089      	sub	sp, #36	; 0x24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f1c3 0307 	rsb	r3, r3, #7
 800249e:	2b04      	cmp	r3, #4
 80024a0:	bf28      	it	cs
 80024a2:	2304      	movcs	r3, #4
 80024a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3304      	adds	r3, #4
 80024aa:	2b06      	cmp	r3, #6
 80024ac:	d902      	bls.n	80024b4 <NVIC_EncodePriority+0x30>
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3b03      	subs	r3, #3
 80024b2:	e000      	b.n	80024b6 <NVIC_EncodePriority+0x32>
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43da      	mvns	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	401a      	ands	r2, r3
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fa01 f303 	lsl.w	r3, r1, r3
 80024d6:	43d9      	mvns	r1, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	4313      	orrs	r3, r2
         );
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3724      	adds	r7, #36	; 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <LL_AHB1_GRP1_EnableClock>:
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80024f4:	4b08      	ldr	r3, [pc, #32]	; (8002518 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f8:	4907      	ldr	r1, [pc, #28]	; (8002518 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4013      	ands	r3, r2
 8002508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800250a:	68fb      	ldr	r3, [r7, #12]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	40023800 	.word	0x40023800

0800251c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002520:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002524:	f7ff ffe2 	bl	80024ec <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002528:	f7ff ff56 	bl	80023d8 <__NVIC_GetPriorityGrouping>
 800252c:	4603      	mov	r3, r0
 800252e:	2200      	movs	r2, #0
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff ffa6 	bl	8002484 <NVIC_EncodePriority>
 8002538:	4603      	mov	r3, r0
 800253a:	4619      	mov	r1, r3
 800253c:	200c      	movs	r0, #12
 800253e:	f7ff ff77 	bl	8002430 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002542:	200c      	movs	r0, #12
 8002544:	f7ff ff56 	bl	80023f4 <__NVIC_EnableIRQ>

}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}

0800254c <__NVIC_GetPriorityGrouping>:
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <__NVIC_GetPriorityGrouping+0x18>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	f003 0307 	and.w	r3, r3, #7
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <__NVIC_EnableIRQ>:
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	2b00      	cmp	r3, #0
 8002578:	db0b      	blt.n	8002592 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	f003 021f 	and.w	r2, r3, #31
 8002580:	4907      	ldr	r1, [pc, #28]	; (80025a0 <__NVIC_EnableIRQ+0x38>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	2001      	movs	r0, #1
 800258a:	fa00 f202 	lsl.w	r2, r0, r2
 800258e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000e100 	.word	0xe000e100

080025a4 <__NVIC_SetPriority>:
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	db0a      	blt.n	80025ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	490c      	ldr	r1, [pc, #48]	; (80025f0 <__NVIC_SetPriority+0x4c>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	0112      	lsls	r2, r2, #4
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	440b      	add	r3, r1
 80025c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025cc:	e00a      	b.n	80025e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4908      	ldr	r1, [pc, #32]	; (80025f4 <__NVIC_SetPriority+0x50>)
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	3b04      	subs	r3, #4
 80025dc:	0112      	lsls	r2, r2, #4
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	440b      	add	r3, r1
 80025e2:	761a      	strb	r2, [r3, #24]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000e100 	.word	0xe000e100
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <NVIC_EncodePriority>:
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	; 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f1c3 0307 	rsb	r3, r3, #7
 8002612:	2b04      	cmp	r3, #4
 8002614:	bf28      	it	cs
 8002616:	2304      	movcs	r3, #4
 8002618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3304      	adds	r3, #4
 800261e:	2b06      	cmp	r3, #6
 8002620:	d902      	bls.n	8002628 <NVIC_EncodePriority+0x30>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3b03      	subs	r3, #3
 8002626:	e000      	b.n	800262a <NVIC_EncodePriority+0x32>
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	401a      	ands	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002640:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	43d9      	mvns	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	4313      	orrs	r3, r2
}
 8002652:	4618      	mov	r0, r3
 8002654:	3724      	adds	r7, #36	; 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <LL_AHB1_GRP1_EnableClock>:
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002668:	4b08      	ldr	r3, [pc, #32]	; (800268c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800266a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800266c:	4907      	ldr	r1, [pc, #28]	; (800268c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4313      	orrs	r3, r2
 8002672:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4013      	ands	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	40023800 	.word	0x40023800

08002690 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800269a:	4a13      	ldr	r2, [pc, #76]	; (80026e8 <LL_SYSCFG_SetEXTISource+0x58>)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	3302      	adds	r3, #2
 80026a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	0c1b      	lsrs	r3, r3, #16
 80026aa:	43db      	mvns	r3, r3
 80026ac:	ea02 0103 	and.w	r1, r2, r3
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	0c1b      	lsrs	r3, r3, #16
 80026b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	fa93 f3a3 	rbit	r3, r3
 80026bc:	60bb      	str	r3, [r7, #8]
  return result;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	fab3 f383 	clz	r3, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	fa03 f202 	lsl.w	r2, r3, r2
 80026ce:	4806      	ldr	r0, [pc, #24]	; (80026e8 <LL_SYSCFG_SetEXTISource+0x58>)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	430a      	orrs	r2, r1
 80026d6:	3302      	adds	r3, #2
 80026d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	40013800 	.word	0x40013800

080026ec <LL_GPIO_SetPinMode>:
{
 80026ec:	b480      	push	{r7}
 80026ee:	b089      	sub	sp, #36	; 0x24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	613b      	str	r3, [r7, #16]
  return result;
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	2103      	movs	r1, #3
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	401a      	ands	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	fa93 f3a3 	rbit	r3, r3
 8002726:	61bb      	str	r3, [r7, #24]
  return result;
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	fa01 f303 	lsl.w	r3, r1, r3
 8002738:	431a      	orrs	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	601a      	str	r2, [r3, #0]
}
 800273e:	bf00      	nop
 8002740:	3724      	adds	r7, #36	; 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <LL_GPIO_SetPinPull>:
{
 800274a:	b480      	push	{r7}
 800274c:	b089      	sub	sp, #36	; 0x24
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	fa93 f3a3 	rbit	r3, r3
 8002764:	613b      	str	r3, [r7, #16]
  return result;
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	2103      	movs	r1, #3
 8002772:	fa01 f303 	lsl.w	r3, r1, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	401a      	ands	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	61bb      	str	r3, [r7, #24]
  return result;
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	fab3 f383 	clz	r3, r3
 800278c:	b2db      	uxtb	r3, r3
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	fa01 f303 	lsl.w	r3, r1, r3
 8002796:	431a      	orrs	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	60da      	str	r2, [r3, #12]
}
 800279c:	bf00      	nop
 800279e:	3724      	adds	r7, #36	; 0x24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <LL_GPIO_ResetOutputPin>:
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	041a      	lsls	r2, r3, #16
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	619a      	str	r2, [r3, #24]
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80027ce:	f107 0318 	add.w	r3, r7, #24
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	463b      	mov	r3, r7
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	60da      	str	r2, [r3, #12]
 80027e4:	611a      	str	r2, [r3, #16]
 80027e6:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80027e8:	2080      	movs	r0, #128	; 0x80
 80027ea:	f7ff ff39 	bl	8002660 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80027ee:	2001      	movs	r0, #1
 80027f0:	f7ff ff36 	bl	8002660 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80027f4:	2004      	movs	r0, #4
 80027f6:	f7ff ff33 	bl	8002660 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80027fa:	2002      	movs	r0, #2
 80027fc:	f7ff ff30 	bl	8002660 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8002800:	2110      	movs	r1, #16
 8002802:	482a      	ldr	r0, [pc, #168]	; (80028ac <MX_GPIO_Init+0xe4>)
 8002804:	f7ff ffd0 	bl	80027a8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8002808:	2120      	movs	r1, #32
 800280a:	4829      	ldr	r0, [pc, #164]	; (80028b0 <MX_GPIO_Init+0xe8>)
 800280c:	f7ff ffcc 	bl	80027a8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8002810:	2310      	movs	r3, #16
 8002812:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002814:	2301      	movs	r3, #1
 8002816:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002818:	2300      	movs	r3, #0
 800281a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002820:	2300      	movs	r3, #0
 8002822:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002824:	463b      	mov	r3, r7
 8002826:	4619      	mov	r1, r3
 8002828:	4820      	ldr	r0, [pc, #128]	; (80028ac <MX_GPIO_Init+0xe4>)
 800282a:	f001 ffa3 	bl	8004774 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800282e:	2320      	movs	r3, #32
 8002830:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002832:	2301      	movs	r3, #1
 8002834:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002842:	463b      	mov	r3, r7
 8002844:	4619      	mov	r1, r3
 8002846:	481a      	ldr	r0, [pc, #104]	; (80028b0 <MX_GPIO_Init+0xe8>)
 8002848:	f001 ff94 	bl	8004774 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE4);
 800284c:	4919      	ldr	r1, [pc, #100]	; (80028b4 <MX_GPIO_Init+0xec>)
 800284e:	2002      	movs	r0, #2
 8002850:	f7ff ff1e 	bl	8002690 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8002854:	2310      	movs	r3, #16
 8002856:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002858:	2301      	movs	r3, #1
 800285a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800285c:	2300      	movs	r3, #0
 800285e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8002860:	2301      	movs	r3, #1
 8002862:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8002864:	f107 0318 	add.w	r3, r7, #24
 8002868:	4618      	mov	r0, r3
 800286a:	f001 fdfd 	bl	8004468 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 800286e:	2200      	movs	r2, #0
 8002870:	2110      	movs	r1, #16
 8002872:	4811      	ldr	r0, [pc, #68]	; (80028b8 <MX_GPIO_Init+0xf0>)
 8002874:	f7ff ff69 	bl	800274a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_4, LL_GPIO_MODE_INPUT);
 8002878:	2200      	movs	r2, #0
 800287a:	2110      	movs	r1, #16
 800287c:	480e      	ldr	r0, [pc, #56]	; (80028b8 <MX_GPIO_Init+0xf0>)
 800287e:	f7ff ff35 	bl	80026ec <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002882:	f7ff fe63 	bl	800254c <__NVIC_GetPriorityGrouping>
 8002886:	4603      	mov	r3, r0
 8002888:	2200      	movs	r2, #0
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff feb3 	bl	80025f8 <NVIC_EncodePriority>
 8002892:	4603      	mov	r3, r0
 8002894:	4619      	mov	r1, r3
 8002896:	200a      	movs	r0, #10
 8002898:	f7ff fe84 	bl	80025a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 800289c:	200a      	movs	r0, #10
 800289e:	f7ff fe63 	bl	8002568 <__NVIC_EnableIRQ>

}
 80028a2:	bf00      	nop
 80028a4:	3720      	adds	r7, #32
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40020000 	.word	0x40020000
 80028b0:	40020400 	.word	0x40020400
 80028b4:	000f0001 	.word	0x000f0001
 80028b8:	40020800 	.word	0x40020800

080028bc <__NVIC_SetPriorityGrouping>:
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <__NVIC_SetPriorityGrouping+0x44>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d8:	4013      	ands	r3, r2
 80028da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ee:	4a04      	ldr	r2, [pc, #16]	; (8002900 <__NVIC_SetPriorityGrouping+0x44>)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	60d3      	str	r3, [r2, #12]
}
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <__NVIC_GetPriorityGrouping>:
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002908:	4b04      	ldr	r3, [pc, #16]	; (800291c <__NVIC_GetPriorityGrouping+0x18>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	0a1b      	lsrs	r3, r3, #8
 800290e:	f003 0307 	and.w	r3, r3, #7
}
 8002912:	4618      	mov	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <__NVIC_SetPriority>:
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	6039      	str	r1, [r7, #0]
 800292a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800292c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002930:	2b00      	cmp	r3, #0
 8002932:	db0a      	blt.n	800294a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	b2da      	uxtb	r2, r3
 8002938:	490c      	ldr	r1, [pc, #48]	; (800296c <__NVIC_SetPriority+0x4c>)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	0112      	lsls	r2, r2, #4
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	440b      	add	r3, r1
 8002944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002948:	e00a      	b.n	8002960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	b2da      	uxtb	r2, r3
 800294e:	4908      	ldr	r1, [pc, #32]	; (8002970 <__NVIC_SetPriority+0x50>)
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	f003 030f 	and.w	r3, r3, #15
 8002956:	3b04      	subs	r3, #4
 8002958:	0112      	lsls	r2, r2, #4
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	440b      	add	r3, r1
 800295e:	761a      	strb	r2, [r3, #24]
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000e100 	.word	0xe000e100
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <NVIC_EncodePriority>:
{
 8002974:	b480      	push	{r7}
 8002976:	b089      	sub	sp, #36	; 0x24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f1c3 0307 	rsb	r3, r3, #7
 800298e:	2b04      	cmp	r3, #4
 8002990:	bf28      	it	cs
 8002992:	2304      	movcs	r3, #4
 8002994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	3304      	adds	r3, #4
 800299a:	2b06      	cmp	r3, #6
 800299c:	d902      	bls.n	80029a4 <NVIC_EncodePriority+0x30>
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	3b03      	subs	r3, #3
 80029a2:	e000      	b.n	80029a6 <NVIC_EncodePriority+0x32>
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43da      	mvns	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	401a      	ands	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	fa01 f303 	lsl.w	r3, r1, r3
 80029c6:	43d9      	mvns	r1, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029cc:	4313      	orrs	r3, r2
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3724      	adds	r7, #36	; 0x24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <LL_DMA_EnableStream>:
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80029e6:	4a0c      	ldr	r2, [pc, #48]	; (8002a18 <LL_DMA_EnableStream+0x3c>)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4413      	add	r3, r2
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4908      	ldr	r1, [pc, #32]	; (8002a18 <LL_DMA_EnableStream+0x3c>)
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	440a      	add	r2, r1
 80029fc:	7812      	ldrb	r2, [r2, #0]
 80029fe:	4611      	mov	r1, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	440a      	add	r2, r1
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6013      	str	r3, [r2, #0]
}
 8002a0a:	bf00      	nop
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	08008a80 	.word	0x08008a80

08002a1c <LL_DMA_DisableStream>:
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002a26:	4a0c      	ldr	r2, [pc, #48]	; (8002a58 <LL_DMA_DisableStream+0x3c>)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4413      	add	r3, r2
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4908      	ldr	r1, [pc, #32]	; (8002a58 <LL_DMA_DisableStream+0x3c>)
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	440a      	add	r2, r1
 8002a3c:	7812      	ldrb	r2, [r2, #0]
 8002a3e:	4611      	mov	r1, r2
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	440a      	add	r2, r1
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	6013      	str	r3, [r2, #0]
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	08008a80 	.word	0x08008a80

08002a5c <LL_DMA_ClearFlag_TC1>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a6a:	609a      	str	r2, [r3, #8]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002a7c:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <LL_RCC_HSE_Enable+0x1c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a04      	ldr	r2, [pc, #16]	; (8002a94 <LL_RCC_HSE_Enable+0x1c>)
 8002a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a86:	6013      	str	r3, [r2, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800

08002a98 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8002a9c:	4b07      	ldr	r3, [pc, #28]	; (8002abc <LL_RCC_HSE_IsReady+0x24>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aa8:	bf0c      	ite	eq
 8002aaa:	2301      	moveq	r3, #1
 8002aac:	2300      	movne	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800

08002ac0 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002ac8:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <LL_RCC_SetSysClkSource+0x24>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 0203 	bic.w	r2, r3, #3
 8002ad0:	4904      	ldr	r1, [pc, #16]	; (8002ae4 <LL_RCC_SetSysClkSource+0x24>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	608b      	str	r3, [r1, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40023800 	.word	0x40023800

08002ae8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002aec:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <LL_RCC_GetSysClkSource+0x18>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 030c 	and.w	r3, r3, #12
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40023800 	.word	0x40023800

08002b04 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <LL_RCC_SetAHBPrescaler+0x24>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b14:	4904      	ldr	r1, [pc, #16]	; (8002b28 <LL_RCC_SetAHBPrescaler+0x24>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	608b      	str	r3, [r1, #8]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	40023800 	.word	0x40023800

08002b2c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b34:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b3c:	4904      	ldr	r1, [pc, #16]	; (8002b50 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	40023800 	.word	0x40023800

08002b54 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b64:	4904      	ldr	r1, [pc, #16]	; (8002b78 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	608b      	str	r3, [r1, #8]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	40023800 	.word	0x40023800

08002b7c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <LL_RCC_PLL_Enable+0x1c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <LL_RCC_PLL_Enable+0x1c>)
 8002b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b8a:	6013      	str	r3, [r2, #0]
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800

08002b9c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002ba0:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <LL_RCC_PLL_IsReady+0x24>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bac:	bf0c      	ite	eq
 8002bae:	2301      	moveq	r3, #1
 8002bb0:	2300      	movne	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800

08002bc4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
 8002bd0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	68f9      	ldr	r1, [r7, #12]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	4311      	orrs	r1, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	0192      	lsls	r2, r2, #6
 8002be4:	430a      	orrs	r2, r1
 8002be6:	4908      	ldr	r1, [pc, #32]	; (8002c08 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bf4:	4904      	ldr	r1, [pc, #16]	; (8002c08 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	ffbf8000 	.word	0xffbf8000

08002c10 <LL_APB1_GRP1_EnableClock>:
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002c18:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002c1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c1c:	4907      	ldr	r1, [pc, #28]	; (8002c3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	40023800 	.word	0x40023800

08002c40 <LL_APB2_GRP1_EnableClock>:
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002c48:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002c4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c4c:	4907      	ldr	r1, [pc, #28]	; (8002c6c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002c56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	40023800 	.word	0x40023800

08002c70 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <LL_FLASH_SetLatency+0x24>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f023 0207 	bic.w	r2, r3, #7
 8002c80:	4904      	ldr	r1, [pc, #16]	; (8002c94 <LL_FLASH_SetLatency+0x24>)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	40023c00 	.word	0x40023c00

08002c98 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <LL_FLASH_GetLatency+0x18>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40023c00 	.word	0x40023c00

08002cb4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc6:	4a07      	ldr	r2, [pc, #28]	; (8002ce4 <LL_InitTick+0x30>)
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002ccc:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <LL_InitTick+0x30>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cd2:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <LL_InitTick+0x30>)
 8002cd4:	2205      	movs	r2, #5
 8002cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000e010 	.word	0xe000e010

08002ce8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002cf8:	4904      	ldr	r1, [pc, #16]	; (8002d0c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	600b      	str	r3, [r1, #0]
}
 8002d00:	bf00      	nop
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	40007000 	.word	0x40007000

08002d10 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f043 0201 	orr.w	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	601a      	str	r2, [r3, #0]
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1a      	ldr	r2, [r3, #32]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	621a      	str	r2, [r3, #32]
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1a      	ldr	r2, [r3, #32]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	401a      	ands	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	621a      	str	r2, [r3, #32]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <LL_USART_EnableIT_IDLE>:
{
 8002d76:	b480      	push	{r7}
 8002d78:	b089      	sub	sp, #36	; 0x24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	330c      	adds	r3, #12
 8002d82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	e853 3f00 	ldrex	r3, [r3]
 8002d8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f043 0310 	orr.w	r3, r3, #16
 8002d92:	61fb      	str	r3, [r7, #28]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	330c      	adds	r3, #12
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	61ba      	str	r2, [r7, #24]
 8002d9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9e:	6979      	ldr	r1, [r7, #20]
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	e841 2300 	strex	r3, r2, [r1]
 8002da6:	613b      	str	r3, [r7, #16]
   return(result);
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1e7      	bne.n	8002d7e <LL_USART_EnableIT_IDLE+0x8>
}
 8002dae:	bf00      	nop
 8002db0:	bf00      	nop
 8002db2:	3724      	adds	r7, #36	; 0x24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <LL_USART_EnableIT_RXNE>:
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b089      	sub	sp, #36	; 0x24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	330c      	adds	r3, #12
 8002dc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	e853 3f00 	ldrex	r3, [r3]
 8002dd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	f043 0320 	orr.w	r3, r3, #32
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	330c      	adds	r3, #12
 8002dde:	69fa      	ldr	r2, [r7, #28]
 8002de0:	61ba      	str	r2, [r7, #24]
 8002de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de4:	6979      	ldr	r1, [r7, #20]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	e841 2300 	strex	r3, r2, [r1]
 8002dec:	613b      	str	r3, [r7, #16]
   return(result);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1e7      	bne.n	8002dc4 <LL_USART_EnableIT_RXNE+0x8>
}
 8002df4:	bf00      	nop
 8002df6:	bf00      	nop
 8002df8:	3724      	adds	r7, #36	; 0x24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	b2db      	uxtb	r3, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e1c:	b598      	push	{r3, r4, r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002e20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e24:	f7ff ff0c 	bl	8002c40 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002e28:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002e2c:	f7ff fef0 	bl	8002c10 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e30:	2003      	movs	r0, #3
 8002e32:	f7ff fd43 	bl	80028bc <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002e36:	f7ff fd65 	bl	8002904 <__NVIC_GetPriorityGrouping>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	210f      	movs	r1, #15
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fd97 	bl	8002974 <NVIC_EncodePriority>
 8002e46:	4603      	mov	r3, r0
 8002e48:	4619      	mov	r1, r3
 8002e4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e4e:	f7ff fd67 	bl	8002920 <__NVIC_SetPriority>

  /* USER CODE BEGIN Init */
  memset(&rx_buf,0,27);
 8002e52:	221b      	movs	r2, #27
 8002e54:	2100      	movs	r1, #0
 8002e56:	4856      	ldr	r0, [pc, #344]	; (8002fb0 <main+0x194>)
 8002e58:	f002 fcf8 	bl	800584c <memset>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e5c:	f000 f8e0 	bl	8003020 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LL_InitTick(168000000, 1000000U);		//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음
 8002e60:	4954      	ldr	r1, [pc, #336]	; (8002fb4 <main+0x198>)
 8002e62:	4855      	ldr	r0, [pc, #340]	; (8002fb8 <main+0x19c>)
 8002e64:	f7ff ff26 	bl	8002cb4 <LL_InitTick>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e68:	f7ff fcae 	bl	80027c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e6c:	f7ff fb56 	bl	800251c <MX_DMA_Init>
  MX_USART6_UART_Init();
 8002e70:	f001 f9b2 	bl	80041d8 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8002e74:	f000 fa0e 	bl	8003294 <MX_SPI1_Init>
  MX_TIM3_Init();
 8002e78:	f000 fdd6 	bl	8003a28 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8002e7c:	f001 f91a 	bl	80040b4 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8002e80:	f001 f8b8 	bl	8003ff4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  LL_TIM_EnableCounter(TIM3);
 8002e84:	484d      	ldr	r0, [pc, #308]	; (8002fbc <main+0x1a0>)
 8002e86:	f7ff ff43 	bl	8002d10 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	484b      	ldr	r0, [pc, #300]	; (8002fbc <main+0x1a0>)
 8002e8e:	f7ff ff4f 	bl	8002d30 <LL_TIM_CC_EnableChannel>
  usDelay(100000);
  TIM3->PSC = 1000;
  usDelay(100000);
*/

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 8002e92:	2101      	movs	r1, #1
 8002e94:	4849      	ldr	r0, [pc, #292]	; (8002fbc <main+0x1a0>)
 8002e96:	f7ff ff5c 	bl	8002d52 <LL_TIM_CC_DisableChannel>
  LL_USART_EnableIT_RXNE(USART6);	// UART6 인터럽트 활성화
 8002e9a:	4849      	ldr	r0, [pc, #292]	; (8002fc0 <main+0x1a4>)
 8002e9c:	f7ff ff8e 	bl	8002dbc <LL_USART_EnableIT_RXNE>
  ICM20602_Initialization();
 8002ea0:	f7fe fb64 	bl	800156c <ICM20602_Initialization>



  // 시간측정을 위한 레지스터 초기화 값
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002ea4:	4b47      	ldr	r3, [pc, #284]	; (8002fc4 <main+0x1a8>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a46      	ldr	r2, [pc, #280]	; (8002fc4 <main+0x1a8>)
 8002eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eae:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 8002eb0:	4b45      	ldr	r3, [pc, #276]	; (8002fc8 <main+0x1ac>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002eb6:	4b44      	ldr	r3, [pc, #272]	; (8002fc8 <main+0x1ac>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a43      	ldr	r2, [pc, #268]	; (8002fc8 <main+0x1ac>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6013      	str	r3, [r2, #0]


//  DMA1->LIFCR |= DMA_LIFCR_CTCIF1|DMA_LIFCR_CHTIF1|DMA_LIFCR_CTEIF1|DMA_LIFCR_CDMEIF1|DMA_LIFCR_CFEIF1;
  GPS_DMA_init(&raw_gps, USART3, DMA1, LL_DMA_STREAM_1);
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	4a41      	ldr	r2, [pc, #260]	; (8002fcc <main+0x1b0>)
 8002ec6:	4942      	ldr	r1, [pc, #264]	; (8002fd0 <main+0x1b4>)
 8002ec8:	4842      	ldr	r0, [pc, #264]	; (8002fd4 <main+0x1b8>)
 8002eca:	f7fe f8e2 	bl	8001092 <GPS_DMA_init>
  LL_DMA_EnableStream(DMA1,LL_DMA_STREAM_1);
 8002ece:	2101      	movs	r1, #1
 8002ed0:	483e      	ldr	r0, [pc, #248]	; (8002fcc <main+0x1b0>)
 8002ed2:	f7ff fd83 	bl	80029dc <LL_DMA_EnableStream>
  LL_USART_EnableIT_IDLE(USART3);
 8002ed6:	483e      	ldr	r0, [pc, #248]	; (8002fd0 <main+0x1b4>)
 8002ed8:	f7ff ff4d 	bl	8002d76 <LL_USART_EnableIT_IDLE>
  LL_USART_EnableIT_IDLE(USART1);
 8002edc:	483e      	ldr	r0, [pc, #248]	; (8002fd8 <main+0x1bc>)
 8002ede:	f7ff ff4a 	bl	8002d76 <LL_USART_EnableIT_IDLE>
  LL_USART_EnableIT_RXNE(USART1);
 8002ee2:	483d      	ldr	r0, [pc, #244]	; (8002fd8 <main+0x1bc>)
 8002ee4:	f7ff ff6a 	bl	8002dbc <LL_USART_EnableIT_RXNE>
  {
  //	  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
  //	  usDelay(1000000);
  //	  LL_USART_TransmitData8(USART6,'B');

	  if(flag_INT_UART1_RX==1){
 8002ee8:	4b3c      	ldr	r3, [pc, #240]	; (8002fdc <main+0x1c0>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d111      	bne.n	8002f14 <main+0xf8>
		  raw_rx.rx_buf[cnt1++] = LL_USART_ReceiveData8(USART1);
 8002ef0:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <main+0x1c4>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	b2d1      	uxtb	r1, r2
 8002ef8:	4a39      	ldr	r2, [pc, #228]	; (8002fe0 <main+0x1c4>)
 8002efa:	7011      	strb	r1, [r2, #0]
 8002efc:	461c      	mov	r4, r3
 8002efe:	4836      	ldr	r0, [pc, #216]	; (8002fd8 <main+0x1bc>)
 8002f00:	f7ff ff7f 	bl	8002e02 <LL_USART_ReceiveData8>
 8002f04:	4603      	mov	r3, r0
 8002f06:	461a      	mov	r2, r3
 8002f08:	4b36      	ldr	r3, [pc, #216]	; (8002fe4 <main+0x1c8>)
 8002f0a:	4423      	add	r3, r4
 8002f0c:	721a      	strb	r2, [r3, #8]
          flag_INT_UART1_RX =0;
 8002f0e:	4b33      	ldr	r3, [pc, #204]	; (8002fdc <main+0x1c0>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_INT_UART1_RX_DONE == 1)
 8002f14:	4b34      	ldr	r3, [pc, #208]	; (8002fe8 <main+0x1cc>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d10b      	bne.n	8002f34 <main+0x118>
	  {
		  SBUS_Parsing(&raw_rx, &msg_sbus, &rx_recv_cnt, &rx_err_cnt);
 8002f1c:	4b33      	ldr	r3, [pc, #204]	; (8002fec <main+0x1d0>)
 8002f1e:	4a34      	ldr	r2, [pc, #208]	; (8002ff0 <main+0x1d4>)
 8002f20:	4934      	ldr	r1, [pc, #208]	; (8002ff4 <main+0x1d8>)
 8002f22:	4830      	ldr	r0, [pc, #192]	; (8002fe4 <main+0x1c8>)
 8002f24:	f7ff f898 	bl	8002058 <SBUS_Parsing>
          cnt1=0;
 8002f28:	4b2d      	ldr	r3, [pc, #180]	; (8002fe0 <main+0x1c4>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
		  flag_INT_UART1_RX_DONE = 0;
 8002f2e:	4b2e      	ldr	r3, [pc, #184]	; (8002fe8 <main+0x1cc>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_INT_UART4_RX==1){
 8002f34:	4b30      	ldr	r3, [pc, #192]	; (8002ff8 <main+0x1dc>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d102      	bne.n	8002f42 <main+0x126>
		  flag_INT_UART4_RX = 0;
 8002f3c:	4b2e      	ldr	r3, [pc, #184]	; (8002ff8 <main+0x1dc>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
	  }


	  if(flag_INT_USART6 == 1){
 8002f42:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <main+0x1e0>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d102      	bne.n	8002f50 <main+0x134>
		  flag_INT_USART6 =0;
 8002f4a:	4b2c      	ldr	r3, [pc, #176]	; (8002ffc <main+0x1e0>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
//		  LL_USART_TransmitData8(USART6,rxd); // 호스트로부터 수신한 데이터를 그대로 다시 보냄
//		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
	  }

	  // UART3에서 한 프레임 GPS 데이터 수신완료에 인터럽트 발생, GPS데이터가 수신될 때마다 DMA는 데이터카운트를 하나씩 감소하면서 0이 될 때까지 전송
	  if(flag_INT_UART3_GPS == 1){
 8002f50:	4b2b      	ldr	r3, [pc, #172]	; (8003000 <main+0x1e4>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d109      	bne.n	8002f6c <main+0x150>
//		  cnt=(uint8_t)(MSG_LENGTH_NAV_SOL-LL_DMA_GetDataLength(DMA1,LL_DMA_STREAM_1));
		  LL_DMA_DisableStream(DMA1,LL_DMA_STREAM_1);
 8002f58:	2101      	movs	r1, #1
 8002f5a:	481c      	ldr	r0, [pc, #112]	; (8002fcc <main+0x1b0>)
 8002f5c:	f7ff fd5e 	bl	8002a1c <LL_DMA_DisableStream>
		  LL_DMA_ClearFlag_TC1(DMA1);
 8002f60:	481a      	ldr	r0, [pc, #104]	; (8002fcc <main+0x1b0>)
 8002f62:	f7ff fd7b 	bl	8002a5c <LL_DMA_ClearFlag_TC1>
//		  cnt = 0;
		  flag_INT_UART3_GPS =0;
 8002f66:	4b26      	ldr	r3, [pc, #152]	; (8003000 <main+0x1e4>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	701a      	strb	r2, [r3, #0]

	  }

	  // DMA 데이터카운트가 0이되면 인터럽트 발생, 데이터를 버퍼로 수신 완료
	  if(flag_DMA1_DONE == 1)
 8002f6c:	4b25      	ldr	r3, [pc, #148]	; (8003004 <main+0x1e8>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d10c      	bne.n	8002f8e <main+0x172>
	  {
//		  cnt=(uint8_t)(MSG_LENGTH_NAV_SOL-LL_DMA_GetDataLength(DMA1,LL_DMA_STREAM_1));
		  GPS_Parsing(&raw_gps, &msg_nav, &recv_cnt, &err_cnt);
 8002f74:	4b24      	ldr	r3, [pc, #144]	; (8003008 <main+0x1ec>)
 8002f76:	4a25      	ldr	r2, [pc, #148]	; (800300c <main+0x1f0>)
 8002f78:	4925      	ldr	r1, [pc, #148]	; (8003010 <main+0x1f4>)
 8002f7a:	4816      	ldr	r0, [pc, #88]	; (8002fd4 <main+0x1b8>)
 8002f7c:	f7fe f8b0 	bl	80010e0 <GPS_Parsing>
		  LL_DMA_EnableStream(DMA1,LL_DMA_STREAM_1);
 8002f80:	2101      	movs	r1, #1
 8002f82:	4812      	ldr	r0, [pc, #72]	; (8002fcc <main+0x1b0>)
 8002f84:	f7ff fd2a 	bl	80029dc <LL_DMA_EnableStream>
		  flag_DMA1_DONE = 0;
 8002f88:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <main+0x1e8>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	701a      	strb	r2, [r3, #0]
	  }




	  if(ICM20602_DataReady() == 1)
 8002f8e:	f7fe fbbf 	bl	8001710 <ICM20602_DataReady>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d1a7      	bne.n	8002ee8 <main+0xcc>
	  {

		  t2 = DWT->CYCCNT;
 8002f98:	4b0b      	ldr	r3, [pc, #44]	; (8002fc8 <main+0x1ac>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4a1d      	ldr	r2, [pc, #116]	; (8003014 <main+0x1f8>)
 8002f9e:	6013      	str	r3, [r2, #0]
//		  sampleFreq = (1000000.0f /(((float)(t2-t1))/CLOCK_PER_USEC)); // set integration time by time elapsed since last filter update
		  t1 = t2;
 8002fa0:	4b1c      	ldr	r3, [pc, #112]	; (8003014 <main+0x1f8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1c      	ldr	r2, [pc, #112]	; (8003018 <main+0x1fc>)
 8002fa6:	6013      	str	r3, [r2, #0]
//		  printf("%.2f\n",(sampleFreq));
		  GetRPY(&sampleFreq);
 8002fa8:	481c      	ldr	r0, [pc, #112]	; (800301c <main+0x200>)
 8002faa:	f7fe fbbd 	bl	8001728 <GetRPY>
	  if(flag_INT_UART1_RX==1){
 8002fae:	e79b      	b.n	8002ee8 <main+0xcc>
 8002fb0:	20000348 	.word	0x20000348
 8002fb4:	000f4240 	.word	0x000f4240
 8002fb8:	0a037a00 	.word	0x0a037a00
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40011400 	.word	0x40011400
 8002fc4:	e000edf0 	.word	0xe000edf0
 8002fc8:	e0001000 	.word	0xe0001000
 8002fcc:	40026000 	.word	0x40026000
 8002fd0:	40004800 	.word	0x40004800
 8002fd4:	20000294 	.word	0x20000294
 8002fd8:	40011000 	.word	0x40011000
 8002fdc:	20000343 	.word	0x20000343
 8002fe0:	20000284 	.word	0x20000284
 8002fe4:	200002d8 	.word	0x200002d8
 8002fe8:	20000344 	.word	0x20000344
 8002fec:	20000280 	.word	0x20000280
 8002ff0:	2000027c 	.word	0x2000027c
 8002ff4:	20000318 	.word	0x20000318
 8002ff8:	20000345 	.word	0x20000345
 8002ffc:	20000340 	.word	0x20000340
 8003000:	20000341 	.word	0x20000341
 8003004:	20000342 	.word	0x20000342
 8003008:	20000208 	.word	0x20000208
 800300c:	20000204 	.word	0x20000204
 8003010:	200002fc 	.word	0x200002fc
 8003014:	2000028c 	.word	0x2000028c
 8003018:	20000288 	.word	0x20000288
 800301c:	20000290 	.word	0x20000290

08003020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8003024:	2005      	movs	r0, #5
 8003026:	f7ff fe23 	bl	8002c70 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 800302a:	bf00      	nop
 800302c:	f7ff fe34 	bl	8002c98 <LL_FLASH_GetLatency>
 8003030:	4603      	mov	r3, r0
 8003032:	2b05      	cmp	r3, #5
 8003034:	d1fa      	bne.n	800302c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8003036:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800303a:	f7ff fe55 	bl	8002ce8 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 800303e:	f7ff fd1b 	bl	8002a78 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8003042:	bf00      	nop
 8003044:	f7ff fd28 	bl	8002a98 <LL_RCC_HSE_IsReady>
 8003048:	4603      	mov	r3, r0
 800304a:	2b01      	cmp	r3, #1
 800304c:	d1fa      	bne.n	8003044 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 800304e:	2300      	movs	r3, #0
 8003050:	22a8      	movs	r2, #168	; 0xa8
 8003052:	2104      	movs	r1, #4
 8003054:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003058:	f7ff fdb4 	bl	8002bc4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800305c:	f7ff fd8e 	bl	8002b7c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8003060:	bf00      	nop
 8003062:	f7ff fd9b 	bl	8002b9c <LL_RCC_PLL_IsReady>
 8003066:	4603      	mov	r3, r0
 8003068:	2b01      	cmp	r3, #1
 800306a:	d1fa      	bne.n	8003062 <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800306c:	2000      	movs	r0, #0
 800306e:	f7ff fd49 	bl	8002b04 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8003072:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003076:	f7ff fd59 	bl	8002b2c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 800307a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800307e:	f7ff fd69 	bl	8002b54 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8003082:	2002      	movs	r0, #2
 8003084:	f7ff fd1c 	bl	8002ac0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003088:	bf00      	nop
 800308a:	f7ff fd2d 	bl	8002ae8 <LL_RCC_GetSysClkSource>
 800308e:	4603      	mov	r3, r0
 8003090:	2b08      	cmp	r3, #8
 8003092:	d1fa      	bne.n	800308a <SystemClock_Config+0x6a>
  {

  }
  LL_Init1msTick(168000000);
 8003094:	4803      	ldr	r0, [pc, #12]	; (80030a4 <SystemClock_Config+0x84>)
 8003096:	f002 fb83 	bl	80057a0 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 800309a:	4802      	ldr	r0, [pc, #8]	; (80030a4 <SystemClock_Config+0x84>)
 800309c:	f002 fb8e 	bl	80057bc <LL_SetSystemCoreClock>
}
 80030a0:	bf00      	nop
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	0a037a00 	.word	0x0a037a00

080030a8 <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(unsigned int nTime)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
	__IO unsigned int  tmp = SysTick->CTRL;
 80030b0:	4b0f      	ldr	r3, [pc, #60]	; (80030f0 <usDelay+0x48>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	60fb      	str	r3, [r7, #12]
	((void)tmp);
 80030b6:	68fb      	ldr	r3, [r7, #12]

	SysTick->VAL = 0;
 80030b8:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <usDelay+0x48>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	609a      	str	r2, [r3, #8]

	SysTick->CTRL = SysTick->CTRL | SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk; // clock source
 80030be:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <usDelay+0x48>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a0b      	ldr	r2, [pc, #44]	; (80030f0 <usDelay+0x48>)
 80030c4:	f043 0307 	orr.w	r3, r3, #7
 80030c8:	6013      	str	r3, [r2, #0]

	TimingDelay = nTime-1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <usDelay+0x4c>)
 80030d0:	6013      	str	r3, [r2, #0]

	while(TimingDelay);
 80030d2:	bf00      	nop
 80030d4:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <usDelay+0x4c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1fb      	bne.n	80030d4 <usDelay+0x2c>

	SysTick->CTRL = 0;
 80030dc:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <usDelay+0x48>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]

}
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	e000e010 	.word	0xe000e010
 80030f4:	20000410 	.word	0x20000410

080030f8 <__NVIC_GetPriorityGrouping>:
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030fc:	4b04      	ldr	r3, [pc, #16]	; (8003110 <__NVIC_GetPriorityGrouping+0x18>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	0a1b      	lsrs	r3, r3, #8
 8003102:	f003 0307 	and.w	r3, r3, #7
}
 8003106:	4618      	mov	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	e000ed00 	.word	0xe000ed00

08003114 <__NVIC_EnableIRQ>:
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	2b00      	cmp	r3, #0
 8003124:	db0b      	blt.n	800313e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	f003 021f 	and.w	r2, r3, #31
 800312c:	4907      	ldr	r1, [pc, #28]	; (800314c <__NVIC_EnableIRQ+0x38>)
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	2001      	movs	r0, #1
 8003136:	fa00 f202 	lsl.w	r2, r0, r2
 800313a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	e000e100 	.word	0xe000e100

08003150 <__NVIC_SetPriority>:
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	6039      	str	r1, [r7, #0]
 800315a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800315c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003160:	2b00      	cmp	r3, #0
 8003162:	db0a      	blt.n	800317a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	b2da      	uxtb	r2, r3
 8003168:	490c      	ldr	r1, [pc, #48]	; (800319c <__NVIC_SetPriority+0x4c>)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	0112      	lsls	r2, r2, #4
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	440b      	add	r3, r1
 8003174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003178:	e00a      	b.n	8003190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	b2da      	uxtb	r2, r3
 800317e:	4908      	ldr	r1, [pc, #32]	; (80031a0 <__NVIC_SetPriority+0x50>)
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	3b04      	subs	r3, #4
 8003188:	0112      	lsls	r2, r2, #4
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	440b      	add	r3, r1
 800318e:	761a      	strb	r2, [r3, #24]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	e000e100 	.word	0xe000e100
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <NVIC_EncodePriority>:
{
 80031a4:	b480      	push	{r7}
 80031a6:	b089      	sub	sp, #36	; 0x24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f1c3 0307 	rsb	r3, r3, #7
 80031be:	2b04      	cmp	r3, #4
 80031c0:	bf28      	it	cs
 80031c2:	2304      	movcs	r3, #4
 80031c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	3304      	adds	r3, #4
 80031ca:	2b06      	cmp	r3, #6
 80031cc:	d902      	bls.n	80031d4 <NVIC_EncodePriority+0x30>
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	3b03      	subs	r3, #3
 80031d2:	e000      	b.n	80031d6 <NVIC_EncodePriority+0x32>
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43da      	mvns	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	401a      	ands	r2, r3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	fa01 f303 	lsl.w	r3, r1, r3
 80031f6:	43d9      	mvns	r1, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031fc:	4313      	orrs	r3, r2
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3724      	adds	r7, #36	; 0x24
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
	...

0800320c <LL_AHB1_GRP1_EnableClock>:
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003218:	4907      	ldr	r1, [pc, #28]	; (8003238 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4313      	orrs	r3, r2
 800321e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003220:	4b05      	ldr	r3, [pc, #20]	; (8003238 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4013      	ands	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800322a:	68fb      	ldr	r3, [r7, #12]
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	40023800 	.word	0x40023800

0800323c <LL_APB2_GRP1_EnableClock>:
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003244:	4b08      	ldr	r3, [pc, #32]	; (8003268 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003246:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003248:	4907      	ldr	r1, [pc, #28]	; (8003268 <LL_APB2_GRP1_EnableClock+0x2c>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4313      	orrs	r3, r2
 800324e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003252:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4013      	ands	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800325a:	68fb      	ldr	r3, [r7, #12]
}
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40023800 	.word	0x40023800

0800326c <LL_SPI_SetStandard>:
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f023 0210 	bic.w	r2, r3, #16
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	431a      	orrs	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	605a      	str	r2, [r3, #4]
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b090      	sub	sp, #64	; 0x40
 8003298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800329a:	f107 0318 	add.w	r3, r7, #24
 800329e:	2228      	movs	r2, #40	; 0x28
 80032a0:	2100      	movs	r1, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f002 fad2 	bl	800584c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	463b      	mov	r3, r7
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	605a      	str	r2, [r3, #4]
 80032b0:	609a      	str	r2, [r3, #8]
 80032b2:	60da      	str	r2, [r3, #12]
 80032b4:	611a      	str	r2, [r3, #16]
 80032b6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80032b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80032bc:	f7ff ffbe 	bl	800323c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80032c0:	2001      	movs	r0, #1
 80032c2:	f7ff ffa3 	bl	800320c <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80032c6:	23e0      	movs	r3, #224	; 0xe0
 80032c8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80032ca:	2302      	movs	r3, #2
 80032cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80032ce:	2303      	movs	r3, #3
 80032d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80032da:	2305      	movs	r3, #5
 80032dc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032de:	463b      	mov	r3, r7
 80032e0:	4619      	mov	r1, r3
 80032e2:	481b      	ldr	r0, [pc, #108]	; (8003350 <MX_SPI1_Init+0xbc>)
 80032e4:	f001 fa46 	bl	8004774 <LL_GPIO_Init>

  /* SPI1 interrupt Init */
  NVIC_SetPriority(SPI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80032e8:	f7ff ff06 	bl	80030f8 <__NVIC_GetPriorityGrouping>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2200      	movs	r2, #0
 80032f0:	2100      	movs	r1, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff ff56 	bl	80031a4 <NVIC_EncodePriority>
 80032f8:	4603      	mov	r3, r0
 80032fa:	4619      	mov	r1, r3
 80032fc:	2023      	movs	r0, #35	; 0x23
 80032fe:	f7ff ff27 	bl	8003150 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI1_IRQn);
 8003302:	2023      	movs	r0, #35	; 0x23
 8003304:	f7ff ff06 	bl	8003114 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003308:	2300      	movs	r3, #0
 800330a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800330c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003310:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003312:	2300      	movs	r3, #0
 8003314:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003316:	2302      	movs	r3, #2
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800331a:	2301      	movs	r3, #1
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800331e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8003324:	2310      	movs	r3, #16
 8003326:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003328:	2300      	movs	r3, #0
 800332a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800332c:	2300      	movs	r3, #0
 800332e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003330:	230a      	movs	r3, #10
 8003332:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003334:	f107 0318 	add.w	r3, r7, #24
 8003338:	4619      	mov	r1, r3
 800333a:	4806      	ldr	r0, [pc, #24]	; (8003354 <MX_SPI1_Init+0xc0>)
 800333c:	f001 fbeb 	bl	8004b16 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003340:	2100      	movs	r1, #0
 8003342:	4804      	ldr	r0, [pc, #16]	; (8003354 <MX_SPI1_Init+0xc0>)
 8003344:	f7ff ff92 	bl	800326c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003348:	bf00      	nop
 800334a:	3740      	adds	r7, #64	; 0x40
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40020000 	.word	0x40020000
 8003354:	40013000 	.word	0x40013000

08003358 <LL_DMA_IsActiveFlag_TC1>:
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336c:	bf0c      	ite	eq
 800336e:	2301      	moveq	r3, #1
 8003370:	2300      	movne	r3, #0
 8003372:	b2db      	uxtb	r3, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <LL_DMA_ClearFlag_TC1>:
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800338e:	609a      	str	r2, [r3, #8]
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE) == DMA_SxCR_TCIE);
 80033a6:	4a0a      	ldr	r2, [pc, #40]	; (80033d0 <LL_DMA_IsEnabledIT_TC+0x34>)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	4413      	add	r3, r2
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4413      	add	r3, r2
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b10      	cmp	r3, #16
 80033bc:	bf0c      	ite	eq
 80033be:	2301      	moveq	r3, #1
 80033c0:	2300      	movne	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	08008a88 	.word	0x08008a88

080033d4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80033dc:	4b07      	ldr	r3, [pc, #28]	; (80033fc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80033de:	695a      	ldr	r2, [r3, #20]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4013      	ands	r3, r2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	bf0c      	ite	eq
 80033ea:	2301      	moveq	r3, #1
 80033ec:	2300      	movne	r3, #0
 80033ee:	b2db      	uxtb	r3, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	40013c00 	.word	0x40013c00

08003400 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8003408:	4a04      	ldr	r2, [pc, #16]	; (800341c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6153      	str	r3, [r2, #20]
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40013c00 	.word	0x40013c00

08003420 <LL_USART_IsActiveFlag_IDLE>:
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b10      	cmp	r3, #16
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <LL_USART_IsActiveFlag_RXNE>:
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b20      	cmp	r3, #32
 8003458:	bf0c      	ite	eq
 800345a:	2301      	moveq	r3, #1
 800345c:	2300      	movne	r3, #0
 800345e:	b2db      	uxtb	r3, r3
}
 8003460:	4618      	mov	r0, r3
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <LL_USART_ClearFlag_IDLE>:
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800347a:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8003482:	68fb      	ldr	r3, [r7, #12]
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <LL_USART_ClearFlag_RXNE>:
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f06f 0220 	mvn.w	r2, #32
 800349e:	601a      	str	r2, [r3, #0]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <LL_USART_IsEnabledIT_IDLE>:
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b10      	cmp	r3, #16
 80034be:	bf0c      	ite	eq
 80034c0:	2301      	moveq	r3, #1
 80034c2:	2300      	movne	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <LL_USART_IsEnabledIT_RXNE>:
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	bf0c      	ite	eq
 80034e6:	2301      	moveq	r3, #1
 80034e8:	2300      	movne	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <LL_USART_ReceiveData8>:
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	b2db      	uxtb	r3, r3
}
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003512:	b480      	push	{r7}
 8003514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003516:	e7fe      	b.n	8003516 <NMI_Handler+0x4>

08003518 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800351c:	e7fe      	b.n	800351c <HardFault_Handler+0x4>

0800351e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800351e:	b480      	push	{r7}
 8003520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003522:	e7fe      	b.n	8003522 <MemManage_Handler+0x4>

08003524 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003528:	e7fe      	b.n	8003528 <BusFault_Handler+0x4>

0800352a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800352a:	b480      	push	{r7}
 800352c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800352e:	e7fe      	b.n	800352e <UsageFault_Handler+0x4>

08003530 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800353e:	b480      	push	{r7}
 8003540:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003542:	bf00      	nop
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003550:	bf00      	nop
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 8003560:	4b06      	ldr	r3, [pc, #24]	; (800357c <SysTick_Handler+0x20>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d004      	beq.n	8003572 <SysTick_Handler+0x16>
		TimingDelay--;
 8003568:	4b04      	ldr	r3, [pc, #16]	; (800357c <SysTick_Handler+0x20>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3b01      	subs	r3, #1
 800356e:	4a03      	ldr	r2, [pc, #12]	; (800357c <SysTick_Handler+0x20>)
 8003570:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	20000410 	.word	0x20000410

08003580 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	// IMU SPI External interrupt
  /* USER CODE END EXTI4_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8003584:	2010      	movs	r0, #16
 8003586:	f7ff ff25 	bl	80033d4 <LL_EXTI_IsActiveFlag_0_31>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <EXTI4_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 8003590:	2010      	movs	r0, #16
 8003592:	f7ff ff35 	bl	8003400 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

    /* Check transfer-complete interrupt */
    if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_TC1(DMA1)) {
 80035a0:	2101      	movs	r1, #1
 80035a2:	480a      	ldr	r0, [pc, #40]	; (80035cc <DMA1_Stream1_IRQHandler+0x30>)
 80035a4:	f7ff fefa 	bl	800339c <LL_DMA_IsEnabledIT_TC>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <DMA1_Stream1_IRQHandler+0x2a>
 80035ae:	4807      	ldr	r0, [pc, #28]	; (80035cc <DMA1_Stream1_IRQHandler+0x30>)
 80035b0:	f7ff fed2 	bl	8003358 <LL_DMA_IsActiveFlag_TC1>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <DMA1_Stream1_IRQHandler+0x2a>
		LL_DMA_ClearFlag_TC1(DMA1);
 80035ba:	4804      	ldr	r0, [pc, #16]	; (80035cc <DMA1_Stream1_IRQHandler+0x30>)
 80035bc:	f7ff fee0 	bl	8003380 <LL_DMA_ClearFlag_TC1>
        flag_DMA1_DONE = 1;
 80035c0:	4b03      	ldr	r3, [pc, #12]	; (80035d0 <DMA1_Stream1_IRQHandler+0x34>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Stream1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40026000 	.word	0x40026000
 80035d0:	20000342 	.word	0x20000342

080035d4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0

  /* USER CODE END SPI1_IRQn 0 */
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	if(LL_USART_IsEnabledIT_RXNE(USART1) && LL_USART_IsActiveFlag_RXNE(USART1)) // 인터럽트중 USART6인지 확인
 80035e8:	4812      	ldr	r0, [pc, #72]	; (8003634 <USART1_IRQHandler+0x50>)
 80035ea:	f7ff ff72 	bl	80034d2 <LL_USART_IsEnabledIT_RXNE>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00b      	beq.n	800360c <USART1_IRQHandler+0x28>
 80035f4:	480f      	ldr	r0, [pc, #60]	; (8003634 <USART1_IRQHandler+0x50>)
 80035f6:	f7ff ff26 	bl	8003446 <LL_USART_IsActiveFlag_RXNE>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <USART1_IRQHandler+0x28>
	{
			LL_USART_ClearFlag_RXNE(USART1); // 맞으면 비트 클리어
 8003600:	480c      	ldr	r0, [pc, #48]	; (8003634 <USART1_IRQHandler+0x50>)
 8003602:	f7ff ff45 	bl	8003490 <LL_USART_ClearFlag_RXNE>
			flag_INT_UART1_RX = 1; // flag 클리어
 8003606:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <USART1_IRQHandler+0x54>)
 8003608:	2201      	movs	r2, #1
 800360a:	701a      	strb	r2, [r3, #0]

	}


	if(LL_USART_IsEnabledIT_IDLE(USART1) && LL_USART_IsActiveFlag_IDLE(USART1)) {
 800360c:	4809      	ldr	r0, [pc, #36]	; (8003634 <USART1_IRQHandler+0x50>)
 800360e:	f7ff ff4d 	bl	80034ac <LL_USART_IsEnabledIT_IDLE>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00b      	beq.n	8003630 <USART1_IRQHandler+0x4c>
 8003618:	4806      	ldr	r0, [pc, #24]	; (8003634 <USART1_IRQHandler+0x50>)
 800361a:	f7ff ff01 	bl	8003420 <LL_USART_IsActiveFlag_IDLE>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <USART1_IRQHandler+0x4c>
		LL_USART_ClearFlag_IDLE(USART1);
 8003624:	4803      	ldr	r0, [pc, #12]	; (8003634 <USART1_IRQHandler+0x50>)
 8003626:	f7ff ff21 	bl	800346c <LL_USART_ClearFlag_IDLE>
		flag_INT_UART1_RX_DONE = 1; // 수신완료
 800362a:	4b04      	ldr	r3, [pc, #16]	; (800363c <USART1_IRQHandler+0x58>)
 800362c:	2201      	movs	r2, #1
 800362e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003630:	bf00      	nop
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40011000 	.word	0x40011000
 8003638:	20000343 	.word	0x20000343
 800363c:	20000344 	.word	0x20000344

08003640 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
			rxd_gps = LL_USART_ReceiveData8(USART3); // 데이터 수신
			flag_INT_UART3_GPS = 1; // flag 클리어

	}
*/
	if(LL_USART_IsEnabledIT_IDLE(USART3) && LL_USART_IsActiveFlag_IDLE(USART3)) {
 8003644:	4809      	ldr	r0, [pc, #36]	; (800366c <USART3_IRQHandler+0x2c>)
 8003646:	f7ff ff31 	bl	80034ac <LL_USART_IsEnabledIT_IDLE>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00b      	beq.n	8003668 <USART3_IRQHandler+0x28>
 8003650:	4806      	ldr	r0, [pc, #24]	; (800366c <USART3_IRQHandler+0x2c>)
 8003652:	f7ff fee5 	bl	8003420 <LL_USART_IsActiveFlag_IDLE>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <USART3_IRQHandler+0x28>
		LL_USART_ClearFlag_IDLE(USART3);
 800365c:	4803      	ldr	r0, [pc, #12]	; (800366c <USART3_IRQHandler+0x2c>)
 800365e:	f7ff ff05 	bl	800346c <LL_USART_ClearFlag_IDLE>
		flag_INT_UART3_GPS = 1; // flag 클리어
 8003662:	4b03      	ldr	r3, [pc, #12]	; (8003670 <USART3_IRQHandler+0x30>)
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003668:	bf00      	nop
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40004800 	.word	0x40004800
 8003670:	20000341 	.word	0x20000341

08003674 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6)) // 인터럽트중 USART6인지 확인
 8003678:	480a      	ldr	r0, [pc, #40]	; (80036a4 <USART6_IRQHandler+0x30>)
 800367a:	f7ff fee4 	bl	8003446 <LL_USART_IsActiveFlag_RXNE>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00c      	beq.n	800369e <USART6_IRQHandler+0x2a>
	{
			LL_USART_ClearFlag_RXNE(USART6); // 맞으면 비트 클리어
 8003684:	4807      	ldr	r0, [pc, #28]	; (80036a4 <USART6_IRQHandler+0x30>)
 8003686:	f7ff ff03 	bl	8003490 <LL_USART_ClearFlag_RXNE>
			rxd = LL_USART_ReceiveData8(USART6); // 데이터 수신
 800368a:	4806      	ldr	r0, [pc, #24]	; (80036a4 <USART6_IRQHandler+0x30>)
 800368c:	f7ff ff34 	bl	80034f8 <LL_USART_ReceiveData8>
 8003690:	4603      	mov	r3, r0
 8003692:	461a      	mov	r2, r3
 8003694:	4b04      	ldr	r3, [pc, #16]	; (80036a8 <USART6_IRQHandler+0x34>)
 8003696:	701a      	strb	r2, [r3, #0]
			flag_INT_USART6 = 1; // flag 클리어
 8003698:	4b04      	ldr	r3, [pc, #16]	; (80036ac <USART6_IRQHandler+0x38>)
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40011400 	.word	0x40011400
 80036a8:	20000346 	.word	0x20000346
 80036ac:	20000340 	.word	0x20000340

080036b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  return 1;
 80036b4:	2301      	movs	r3, #1
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <_kill>:

int _kill(int pid, int sig)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80036ca:	f002 f887 	bl	80057dc <__errno>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2216      	movs	r2, #22
 80036d2:	601a      	str	r2, [r3, #0]
  return -1;
 80036d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <_exit>:

void _exit (int status)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80036e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff ffe7 	bl	80036c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80036f2:	e7fe      	b.n	80036f2 <_exit+0x12>

080036f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	e00a      	b.n	800371c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003706:	f3af 8000 	nop.w
 800370a:	4601      	mov	r1, r0
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	60ba      	str	r2, [r7, #8]
 8003712:	b2ca      	uxtb	r2, r1
 8003714:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	3301      	adds	r3, #1
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	429a      	cmp	r2, r3
 8003722:	dbf0      	blt.n	8003706 <_read+0x12>
  }

  return len;
 8003724:	687b      	ldr	r3, [r7, #4]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <_close>:
  }
  return len;
}

int _close(int file)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800373a:	4618      	mov	r0, r3
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003756:	605a      	str	r2, [r3, #4]
  return 0;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <_isatty>:

int _isatty(int file)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800376e:	2301      	movs	r3, #1
}
 8003770:	4618      	mov	r0, r3
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037a0:	4a14      	ldr	r2, [pc, #80]	; (80037f4 <_sbrk+0x5c>)
 80037a2:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <_sbrk+0x60>)
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037ac:	4b13      	ldr	r3, [pc, #76]	; (80037fc <_sbrk+0x64>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d102      	bne.n	80037ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037b4:	4b11      	ldr	r3, [pc, #68]	; (80037fc <_sbrk+0x64>)
 80037b6:	4a12      	ldr	r2, [pc, #72]	; (8003800 <_sbrk+0x68>)
 80037b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <_sbrk+0x64>)
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4413      	add	r3, r2
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d207      	bcs.n	80037d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037c8:	f002 f808 	bl	80057dc <__errno>
 80037cc:	4603      	mov	r3, r0
 80037ce:	220c      	movs	r2, #12
 80037d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037d6:	e009      	b.n	80037ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037d8:	4b08      	ldr	r3, [pc, #32]	; (80037fc <_sbrk+0x64>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037de:	4b07      	ldr	r3, [pc, #28]	; (80037fc <_sbrk+0x64>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	4a05      	ldr	r2, [pc, #20]	; (80037fc <_sbrk+0x64>)
 80037e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037ea:	68fb      	ldr	r3, [r7, #12]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20020000 	.word	0x20020000
 80037f8:	00000400 	.word	0x00000400
 80037fc:	20000414 	.word	0x20000414
 8003800:	20000428 	.word	0x20000428

08003804 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <SystemInit+0x20>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	4a05      	ldr	r2, [pc, #20]	; (8003824 <SystemInit+0x20>)
 8003810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <LL_AHB1_GRP1_EnableClock>:
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003830:	4b08      	ldr	r3, [pc, #32]	; (8003854 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003834:	4907      	ldr	r1, [pc, #28]	; (8003854 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4313      	orrs	r3, r2
 800383a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800383c:	4b05      	ldr	r3, [pc, #20]	; (8003854 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800383e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4013      	ands	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003846:	68fb      	ldr	r3, [r7, #12]
}
 8003848:	bf00      	nop
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	40023800 	.word	0x40023800

08003858 <LL_APB1_GRP1_EnableClock>:
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003860:	4b08      	ldr	r3, [pc, #32]	; (8003884 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003864:	4907      	ldr	r1, [pc, #28]	; (8003884 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4313      	orrs	r3, r2
 800386a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <LL_APB1_GRP1_EnableClock+0x2c>)
 800386e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4013      	ands	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003876:	68fb      	ldr	r3, [r7, #12]
}
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	40023800 	.word	0x40023800

08003888 <LL_TIM_EnableARRPreload>:
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	601a      	str	r2, [r3, #0]
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d01c      	beq.n	80038f2 <LL_TIM_OC_EnableFast+0x4a>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d017      	beq.n	80038ee <LL_TIM_OC_EnableFast+0x46>
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	2b10      	cmp	r3, #16
 80038c2:	d012      	beq.n	80038ea <LL_TIM_OC_EnableFast+0x42>
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	2b40      	cmp	r3, #64	; 0x40
 80038c8:	d00d      	beq.n	80038e6 <LL_TIM_OC_EnableFast+0x3e>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038d0:	d007      	beq.n	80038e2 <LL_TIM_OC_EnableFast+0x3a>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d8:	d101      	bne.n	80038de <LL_TIM_OC_EnableFast+0x36>
 80038da:	2305      	movs	r3, #5
 80038dc:	e00a      	b.n	80038f4 <LL_TIM_OC_EnableFast+0x4c>
 80038de:	2306      	movs	r3, #6
 80038e0:	e008      	b.n	80038f4 <LL_TIM_OC_EnableFast+0x4c>
 80038e2:	2304      	movs	r3, #4
 80038e4:	e006      	b.n	80038f4 <LL_TIM_OC_EnableFast+0x4c>
 80038e6:	2303      	movs	r3, #3
 80038e8:	e004      	b.n	80038f4 <LL_TIM_OC_EnableFast+0x4c>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e002      	b.n	80038f4 <LL_TIM_OC_EnableFast+0x4c>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <LL_TIM_OC_EnableFast+0x4c>
 80038f2:	2300      	movs	r3, #0
 80038f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3318      	adds	r3, #24
 80038fa:	4619      	mov	r1, r3
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <LL_TIM_OC_EnableFast+0x80>)
 8003900:	5cd3      	ldrb	r3, [r2, r3]
 8003902:	440b      	add	r3, r1
 8003904:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	4907      	ldr	r1, [pc, #28]	; (800392c <LL_TIM_OC_EnableFast+0x84>)
 800390e:	5ccb      	ldrb	r3, [r1, r3]
 8003910:	4619      	mov	r1, r3
 8003912:	2304      	movs	r3, #4
 8003914:	408b      	lsls	r3, r1
 8003916:	431a      	orrs	r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	601a      	str	r2, [r3, #0]

}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	08008aa8 	.word	0x08008aa8
 800392c:	08008ab0 	.word	0x08008ab0

08003930 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d01c      	beq.n	800397a <LL_TIM_OC_EnablePreload+0x4a>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b04      	cmp	r3, #4
 8003944:	d017      	beq.n	8003976 <LL_TIM_OC_EnablePreload+0x46>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b10      	cmp	r3, #16
 800394a:	d012      	beq.n	8003972 <LL_TIM_OC_EnablePreload+0x42>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b40      	cmp	r3, #64	; 0x40
 8003950:	d00d      	beq.n	800396e <LL_TIM_OC_EnablePreload+0x3e>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003958:	d007      	beq.n	800396a <LL_TIM_OC_EnablePreload+0x3a>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003960:	d101      	bne.n	8003966 <LL_TIM_OC_EnablePreload+0x36>
 8003962:	2305      	movs	r3, #5
 8003964:	e00a      	b.n	800397c <LL_TIM_OC_EnablePreload+0x4c>
 8003966:	2306      	movs	r3, #6
 8003968:	e008      	b.n	800397c <LL_TIM_OC_EnablePreload+0x4c>
 800396a:	2304      	movs	r3, #4
 800396c:	e006      	b.n	800397c <LL_TIM_OC_EnablePreload+0x4c>
 800396e:	2303      	movs	r3, #3
 8003970:	e004      	b.n	800397c <LL_TIM_OC_EnablePreload+0x4c>
 8003972:	2302      	movs	r3, #2
 8003974:	e002      	b.n	800397c <LL_TIM_OC_EnablePreload+0x4c>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <LL_TIM_OC_EnablePreload+0x4c>
 800397a:	2300      	movs	r3, #0
 800397c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3318      	adds	r3, #24
 8003982:	4619      	mov	r1, r3
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <LL_TIM_OC_EnablePreload+0x80>)
 8003988:	5cd3      	ldrb	r3, [r2, r3]
 800398a:	440b      	add	r3, r1
 800398c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	7bfb      	ldrb	r3, [r7, #15]
 8003994:	4907      	ldr	r1, [pc, #28]	; (80039b4 <LL_TIM_OC_EnablePreload+0x84>)
 8003996:	5ccb      	ldrb	r3, [r1, r3]
 8003998:	4619      	mov	r1, r3
 800399a:	2308      	movs	r3, #8
 800399c:	408b      	lsls	r3, r1
 800399e:	431a      	orrs	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	601a      	str	r2, [r3, #0]
}
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	08008aa8 	.word	0x08008aa8
 80039b4:	08008ab0 	.word	0x08008ab0

080039b8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039ca:	f023 0307 	bic.w	r3, r3, #7
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	609a      	str	r2, [r3, #8]
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	605a      	str	r2, [r3, #4]
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	609a      	str	r2, [r3, #8]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b094      	sub	sp, #80	; 0x50
 8003a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003a2e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	609a      	str	r2, [r3, #8]
 8003a3a:	60da      	str	r2, [r3, #12]
 8003a3c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003a3e:	f107 031c 	add.w	r3, r7, #28
 8003a42:	2220      	movs	r2, #32
 8003a44:	2100      	movs	r1, #0
 8003a46:	4618      	mov	r0, r3
 8003a48:	f001 ff00 	bl	800584c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a4c:	1d3b      	adds	r3, r7, #4
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	605a      	str	r2, [r3, #4]
 8003a54:	609a      	str	r2, [r3, #8]
 8003a56:	60da      	str	r2, [r3, #12]
 8003a58:	611a      	str	r2, [r3, #16]
 8003a5a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8003a5c:	2002      	movs	r0, #2
 8003a5e:	f7ff fefb 	bl	8003858 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8003a62:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003a66:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 8003a6c:	2314      	movs	r3, #20
 8003a6e:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003a70:	2300      	movs	r3, #0
 8003a72:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003a74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4821      	ldr	r0, [pc, #132]	; (8003b00 <MX_TIM3_Init+0xd8>)
 8003a7c:	f001 f910 	bl	8004ca0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8003a80:	481f      	ldr	r0, [pc, #124]	; (8003b00 <MX_TIM3_Init+0xd8>)
 8003a82:	f7ff ff01 	bl	8003888 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003a86:	2100      	movs	r1, #0
 8003a88:	481d      	ldr	r0, [pc, #116]	; (8003b00 <MX_TIM3_Init+0xd8>)
 8003a8a:	f7ff ff95 	bl	80039b8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8003a8e:	2101      	movs	r1, #1
 8003a90:	481b      	ldr	r0, [pc, #108]	; (8003b00 <MX_TIM3_Init+0xd8>)
 8003a92:	f7ff ff4d 	bl	8003930 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003a96:	2360      	movs	r3, #96	; 0x60
 8003a98:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003aaa:	f107 031c 	add.w	r3, r7, #28
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	4813      	ldr	r0, [pc, #76]	; (8003b00 <MX_TIM3_Init+0xd8>)
 8003ab4:	f001 f98e 	bl	8004dd4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8003ab8:	2101      	movs	r1, #1
 8003aba:	4811      	ldr	r0, [pc, #68]	; (8003b00 <MX_TIM3_Init+0xd8>)
 8003abc:	f7ff fef4 	bl	80038a8 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	480f      	ldr	r0, [pc, #60]	; (8003b00 <MX_TIM3_Init+0xd8>)
 8003ac4:	f7ff ff8d 	bl	80039e2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8003ac8:	480d      	ldr	r0, [pc, #52]	; (8003b00 <MX_TIM3_Init+0xd8>)
 8003aca:	f7ff ff9d 	bl	8003a08 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003ace:	2002      	movs	r0, #2
 8003ad0:	f7ff feaa 	bl	8003828 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003ad8:	2302      	movs	r3, #2
 8003ada:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aec:	1d3b      	adds	r3, r7, #4
 8003aee:	4619      	mov	r1, r3
 8003af0:	4804      	ldr	r0, [pc, #16]	; (8003b04 <MX_TIM3_Init+0xdc>)
 8003af2:	f000 fe3f 	bl	8004774 <LL_GPIO_Init>

}
 8003af6:	bf00      	nop
 8003af8:	3750      	adds	r7, #80	; 0x50
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	40000400 	.word	0x40000400
 8003b04:	40020400 	.word	0x40020400

08003b08 <__NVIC_GetPriorityGrouping>:
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b0c:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <__NVIC_GetPriorityGrouping+0x18>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	0a1b      	lsrs	r3, r3, #8
 8003b12:	f003 0307 	and.w	r3, r3, #7
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	e000ed00 	.word	0xe000ed00

08003b24 <__NVIC_EnableIRQ>:
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	db0b      	blt.n	8003b4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	f003 021f 	and.w	r2, r3, #31
 8003b3c:	4907      	ldr	r1, [pc, #28]	; (8003b5c <__NVIC_EnableIRQ+0x38>)
 8003b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	2001      	movs	r0, #1
 8003b46:	fa00 f202 	lsl.w	r2, r0, r2
 8003b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	e000e100 	.word	0xe000e100

08003b60 <__NVIC_SetPriority>:
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	6039      	str	r1, [r7, #0]
 8003b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	db0a      	blt.n	8003b8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	490c      	ldr	r1, [pc, #48]	; (8003bac <__NVIC_SetPriority+0x4c>)
 8003b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7e:	0112      	lsls	r2, r2, #4
 8003b80:	b2d2      	uxtb	r2, r2
 8003b82:	440b      	add	r3, r1
 8003b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b88:	e00a      	b.n	8003ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	4908      	ldr	r1, [pc, #32]	; (8003bb0 <__NVIC_SetPriority+0x50>)
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	3b04      	subs	r3, #4
 8003b98:	0112      	lsls	r2, r2, #4
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	761a      	strb	r2, [r3, #24]
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	e000e100 	.word	0xe000e100
 8003bb0:	e000ed00 	.word	0xe000ed00

08003bb4 <NVIC_EncodePriority>:
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b089      	sub	sp, #36	; 0x24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f1c3 0307 	rsb	r3, r3, #7
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	bf28      	it	cs
 8003bd2:	2304      	movcs	r3, #4
 8003bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	2b06      	cmp	r3, #6
 8003bdc:	d902      	bls.n	8003be4 <NVIC_EncodePriority+0x30>
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	3b03      	subs	r3, #3
 8003be2:	e000      	b.n	8003be6 <NVIC_EncodePriority+0x32>
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43da      	mvns	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	401a      	ands	r2, r3
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	fa01 f303 	lsl.w	r3, r1, r3
 8003c06:	43d9      	mvns	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c0c:	4313      	orrs	r3, r2
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3724      	adds	r7, #36	; 0x24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <LL_DMA_SetDataTransferDirection>:
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8003c28:	4a0d      	ldr	r2, [pc, #52]	; (8003c60 <LL_DMA_SetDataTransferDirection+0x44>)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	461a      	mov	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4413      	add	r3, r2
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c3c:	4908      	ldr	r1, [pc, #32]	; (8003c60 <LL_DMA_SetDataTransferDirection+0x44>)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	440b      	add	r3, r1
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	4619      	mov	r1, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	440b      	add	r3, r1
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	600b      	str	r3, [r1, #0]
}
 8003c52:	bf00      	nop
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	08008ab8 	.word	0x08008ab8

08003c64 <LL_DMA_SetMode>:
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8003c70:	4a0d      	ldr	r2, [pc, #52]	; (8003ca8 <LL_DMA_SetMode+0x44>)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	4413      	add	r3, r2
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8003c84:	4908      	ldr	r1, [pc, #32]	; (8003ca8 <LL_DMA_SetMode+0x44>)
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	440b      	add	r3, r1
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	440b      	add	r3, r1
 8003c92:	4619      	mov	r1, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]
}
 8003c9a:	bf00      	nop
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	08008ab8 	.word	0x08008ab8

08003cac <LL_DMA_SetPeriphIncMode>:
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8003cb8:	4a0d      	ldr	r2, [pc, #52]	; (8003cf0 <LL_DMA_SetPeriphIncMode+0x44>)
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ccc:	4908      	ldr	r1, [pc, #32]	; (8003cf0 <LL_DMA_SetPeriphIncMode+0x44>)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	440b      	add	r3, r1
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	440b      	add	r3, r1
 8003cda:	4619      	mov	r1, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	08008ab8 	.word	0x08008ab8

08003cf4 <LL_DMA_SetMemoryIncMode>:
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8003d00:	4a0d      	ldr	r2, [pc, #52]	; (8003d38 <LL_DMA_SetMemoryIncMode+0x44>)
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4413      	add	r3, r2
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d14:	4908      	ldr	r1, [pc, #32]	; (8003d38 <LL_DMA_SetMemoryIncMode+0x44>)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	440b      	add	r3, r1
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	440b      	add	r3, r1
 8003d22:	4619      	mov	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]
}
 8003d2a:	bf00      	nop
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	08008ab8 	.word	0x08008ab8

08003d3c <LL_DMA_SetPeriphSize>:
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8003d48:	4a0d      	ldr	r2, [pc, #52]	; (8003d80 <LL_DMA_SetPeriphSize+0x44>)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4413      	add	r3, r2
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8003d5c:	4908      	ldr	r1, [pc, #32]	; (8003d80 <LL_DMA_SetPeriphSize+0x44>)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	440b      	add	r3, r1
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	4619      	mov	r1, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	440b      	add	r3, r1
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	08008ab8 	.word	0x08008ab8

08003d84 <LL_DMA_SetMemorySize>:
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8003d90:	4a0d      	ldr	r2, [pc, #52]	; (8003dc8 <LL_DMA_SetMemorySize+0x44>)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	4413      	add	r3, r2
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8003da4:	4908      	ldr	r1, [pc, #32]	; (8003dc8 <LL_DMA_SetMemorySize+0x44>)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	440b      	add	r3, r1
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	4619      	mov	r1, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	440b      	add	r3, r1
 8003db2:	4619      	mov	r1, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	600b      	str	r3, [r1, #0]
}
 8003dba:	bf00      	nop
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	08008ab8 	.word	0x08008ab8

08003dcc <LL_DMA_SetStreamPriorityLevel>:
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8003dd8:	4a0d      	ldr	r2, [pc, #52]	; (8003e10 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	4413      	add	r3, r2
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4413      	add	r3, r2
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003dec:	4908      	ldr	r1, [pc, #32]	; (8003e10 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	440b      	add	r3, r1
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	4619      	mov	r1, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	440b      	add	r3, r1
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]
}
 8003e02:	bf00      	nop
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	08008ab8 	.word	0x08008ab8

08003e14 <LL_DMA_SetChannelSelection>:
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8003e20:	4a0d      	ldr	r2, [pc, #52]	; (8003e58 <LL_DMA_SetChannelSelection+0x44>)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	4413      	add	r3, r2
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003e34:	4908      	ldr	r1, [pc, #32]	; (8003e58 <LL_DMA_SetChannelSelection+0x44>)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	440b      	add	r3, r1
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	440b      	add	r3, r1
 8003e42:	4619      	mov	r1, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]
}
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	08008ab8 	.word	0x08008ab8

08003e5c <LL_DMA_DisableFifoMode>:
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8003e66:	4a0c      	ldr	r2, [pc, #48]	; (8003e98 <LL_DMA_DisableFifoMode+0x3c>)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4413      	add	r3, r2
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	4908      	ldr	r1, [pc, #32]	; (8003e98 <LL_DMA_DisableFifoMode+0x3c>)
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	440a      	add	r2, r1
 8003e7c:	7812      	ldrb	r2, [r2, #0]
 8003e7e:	4611      	mov	r1, r2
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	440a      	add	r2, r1
 8003e84:	f023 0304 	bic.w	r3, r3, #4
 8003e88:	6153      	str	r3, [r2, #20]
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	08008ab8 	.word	0x08008ab8

08003e9c <LL_AHB1_GRP1_EnableClock>:
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003ea4:	4b08      	ldr	r3, [pc, #32]	; (8003ec8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea8:	4907      	ldr	r1, [pc, #28]	; (8003ec8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003eba:	68fb      	ldr	r3, [r7, #12]
}
 8003ebc:	bf00      	nop
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	40023800 	.word	0x40023800

08003ecc <LL_APB1_GRP1_EnableClock>:
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003ed4:	4b08      	ldr	r3, [pc, #32]	; (8003ef8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ed8:	4907      	ldr	r1, [pc, #28]	; (8003ef8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003ee2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003eea:	68fb      	ldr	r3, [r7, #12]
}
 8003eec:	bf00      	nop
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	40023800 	.word	0x40023800

08003efc <LL_APB2_GRP1_EnableClock>:
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003f04:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003f06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f08:	4907      	ldr	r1, [pc, #28]	; (8003f28 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003f10:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003f12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4013      	ands	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
}
 8003f1c:	bf00      	nop
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	40023800 	.word	0x40023800

08003f2c <LL_USART_Enable>:
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	60da      	str	r2, [r3, #12]
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <LL_USART_ConfigAsyncMode>:
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	615a      	str	r2, [r3, #20]
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <LL_USART_ConfigHalfDuplexMode>:
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	f023 0222 	bic.w	r2, r3, #34	; 0x22
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	615a      	str	r2, [r3, #20]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	f043 0208 	orr.w	r2, r3, #8
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	615a      	str	r2, [r3, #20]
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <LL_USART_IsActiveFlag_TXE>:
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc0:	2b80      	cmp	r3, #128	; 0x80
 8003fc2:	bf0c      	ite	eq
 8003fc4:	2301      	moveq	r3, #1
 8003fc6:	2300      	movne	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	460b      	mov	r3, r1
 8003fe0:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8003fe2:	78fa      	ldrb	r2, [r7, #3]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	605a      	str	r2, [r3, #4]
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08e      	sub	sp, #56	; 0x38
 8003ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003ffa:	f107 031c 	add.w	r3, r7, #28
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	605a      	str	r2, [r3, #4]
 8004004:	609a      	str	r2, [r3, #8]
 8004006:	60da      	str	r2, [r3, #12]
 8004008:	611a      	str	r2, [r3, #16]
 800400a:	615a      	str	r2, [r3, #20]
 800400c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800400e:	1d3b      	adds	r3, r7, #4
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	605a      	str	r2, [r3, #4]
 8004016:	609a      	str	r2, [r3, #8]
 8004018:	60da      	str	r2, [r3, #12]
 800401a:	611a      	str	r2, [r3, #16]
 800401c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800401e:	2010      	movs	r0, #16
 8004020:	f7ff ff6c 	bl	8003efc <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004024:	2001      	movs	r0, #1
 8004026:	f7ff ff39 	bl	8003e9c <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800402a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800402e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004030:	2302      	movs	r3, #2
 8004032:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004034:	2303      	movs	r3, #3
 8004036:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004038:	2301      	movs	r3, #1
 800403a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004040:	2307      	movs	r3, #7
 8004042:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004044:	1d3b      	adds	r3, r7, #4
 8004046:	4619      	mov	r1, r3
 8004048:	4817      	ldr	r0, [pc, #92]	; (80040a8 <MX_USART1_UART_Init+0xb4>)
 800404a:	f000 fb93 	bl	8004774 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800404e:	f7ff fd5b 	bl	8003b08 <__NVIC_GetPriorityGrouping>
 8004052:	4603      	mov	r3, r0
 8004054:	2200      	movs	r2, #0
 8004056:	2100      	movs	r1, #0
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fdab 	bl	8003bb4 <NVIC_EncodePriority>
 800405e:	4603      	mov	r3, r0
 8004060:	4619      	mov	r1, r3
 8004062:	2025      	movs	r0, #37	; 0x25
 8004064:	f7ff fd7c 	bl	8003b60 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8004068:	2025      	movs	r0, #37	; 0x25
 800406a:	f7ff fd5b 	bl	8003b24 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 100000;
 800406e:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <MX_USART1_UART_Init+0xb8>)
 8004070:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004072:	2300      	movs	r3, #0
 8004074:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_2;
 8004076:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800407c:	2300      	movs	r3, #0
 800407e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004080:	230c      	movs	r3, #12
 8004082:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004084:	2300      	movs	r3, #0
 8004086:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8004088:	f107 031c 	add.w	r3, r7, #28
 800408c:	4619      	mov	r1, r3
 800408e:	4808      	ldr	r0, [pc, #32]	; (80040b0 <MX_USART1_UART_Init+0xbc>)
 8004090:	f001 faec 	bl	800566c <LL_USART_Init>
  LL_USART_Enable(USART1);
 8004094:	4806      	ldr	r0, [pc, #24]	; (80040b0 <MX_USART1_UART_Init+0xbc>)
 8004096:	f7ff ff49 	bl	8003f2c <LL_USART_Enable>
  LL_USART_ConfigHalfDuplexMode(USART1);
 800409a:	4805      	ldr	r0, [pc, #20]	; (80040b0 <MX_USART1_UART_Init+0xbc>)
 800409c:	f7ff ff6c 	bl	8003f78 <LL_USART_ConfigHalfDuplexMode>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80040a0:	bf00      	nop
 80040a2:	3738      	adds	r7, #56	; 0x38
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40020000 	.word	0x40020000
 80040ac:	000186a0 	.word	0x000186a0
 80040b0:	40011000 	.word	0x40011000

080040b4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08e      	sub	sp, #56	; 0x38
 80040b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80040ba:	f107 031c 	add.w	r3, r7, #28
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	605a      	str	r2, [r3, #4]
 80040c4:	609a      	str	r2, [r3, #8]
 80040c6:	60da      	str	r2, [r3, #12]
 80040c8:	611a      	str	r2, [r3, #16]
 80040ca:	615a      	str	r2, [r3, #20]
 80040cc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ce:	1d3b      	adds	r3, r7, #4
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	605a      	str	r2, [r3, #4]
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	60da      	str	r2, [r3, #12]
 80040da:	611a      	str	r2, [r3, #16]
 80040dc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80040de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80040e2:	f7ff fef3 	bl	8003ecc <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80040e6:	2002      	movs	r0, #2
 80040e8:	f7ff fed8 	bl	8003e9c <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = UART3_GPS_TX_Pin|UART3_GPS_RX_Pin;
 80040ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80040f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80040f2:	2302      	movs	r3, #2
 80040f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80040f6:	2303      	movs	r3, #3
 80040f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004102:	2307      	movs	r3, #7
 8004104:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004106:	1d3b      	adds	r3, r7, #4
 8004108:	4619      	mov	r1, r3
 800410a:	4830      	ldr	r0, [pc, #192]	; (80041cc <MX_USART3_UART_Init+0x118>)
 800410c:	f000 fb32 	bl	8004774 <LL_GPIO_Init>

  /* USART3 DMA Init */

  /* USART3_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_1, LL_DMA_CHANNEL_4);
 8004110:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004114:	2101      	movs	r1, #1
 8004116:	482e      	ldr	r0, [pc, #184]	; (80041d0 <MX_USART3_UART_Init+0x11c>)
 8004118:	f7ff fe7c 	bl	8003e14 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800411c:	2200      	movs	r2, #0
 800411e:	2101      	movs	r1, #1
 8004120:	482b      	ldr	r0, [pc, #172]	; (80041d0 <MX_USART3_UART_Init+0x11c>)
 8004122:	f7ff fd7b 	bl	8003c1c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 8004126:	2200      	movs	r2, #0
 8004128:	2101      	movs	r1, #1
 800412a:	4829      	ldr	r0, [pc, #164]	; (80041d0 <MX_USART3_UART_Init+0x11c>)
 800412c:	f7ff fe4e 	bl	8003dcc <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 8004130:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004134:	2101      	movs	r1, #1
 8004136:	4826      	ldr	r0, [pc, #152]	; (80041d0 <MX_USART3_UART_Init+0x11c>)
 8004138:	f7ff fd94 	bl	8003c64 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 800413c:	2200      	movs	r2, #0
 800413e:	2101      	movs	r1, #1
 8004140:	4823      	ldr	r0, [pc, #140]	; (80041d0 <MX_USART3_UART_Init+0x11c>)
 8004142:	f7ff fdb3 	bl	8003cac <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 8004146:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800414a:	2101      	movs	r1, #1
 800414c:	4820      	ldr	r0, [pc, #128]	; (80041d0 <MX_USART3_UART_Init+0x11c>)
 800414e:	f7ff fdd1 	bl	8003cf4 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 8004152:	2200      	movs	r2, #0
 8004154:	2101      	movs	r1, #1
 8004156:	481e      	ldr	r0, [pc, #120]	; (80041d0 <MX_USART3_UART_Init+0x11c>)
 8004158:	f7ff fdf0 	bl	8003d3c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 800415c:	2200      	movs	r2, #0
 800415e:	2101      	movs	r1, #1
 8004160:	481b      	ldr	r0, [pc, #108]	; (80041d0 <MX_USART3_UART_Init+0x11c>)
 8004162:	f7ff fe0f 	bl	8003d84 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_1);
 8004166:	2101      	movs	r1, #1
 8004168:	4819      	ldr	r0, [pc, #100]	; (80041d0 <MX_USART3_UART_Init+0x11c>)
 800416a:	f7ff fe77 	bl	8003e5c <LL_DMA_DisableFifoMode>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800416e:	f7ff fccb 	bl	8003b08 <__NVIC_GetPriorityGrouping>
 8004172:	4603      	mov	r3, r0
 8004174:	2200      	movs	r2, #0
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff fd1b 	bl	8003bb4 <NVIC_EncodePriority>
 800417e:	4603      	mov	r3, r0
 8004180:	4619      	mov	r1, r3
 8004182:	2027      	movs	r0, #39	; 0x27
 8004184:	f7ff fcec 	bl	8003b60 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8004188:	2027      	movs	r0, #39	; 0x27
 800418a:	f7ff fccb 	bl	8003b24 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */


  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800418e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004192:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004194:	2300      	movs	r3, #0
 8004196:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004198:	2300      	movs	r3, #0
 800419a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800419c:	2300      	movs	r3, #0
 800419e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80041a0:	230c      	movs	r3, #12
 80041a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80041a4:	2300      	movs	r3, #0
 80041a6:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80041a8:	2300      	movs	r3, #0
 80041aa:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 80041ac:	f107 031c 	add.w	r3, r7, #28
 80041b0:	4619      	mov	r1, r3
 80041b2:	4808      	ldr	r0, [pc, #32]	; (80041d4 <MX_USART3_UART_Init+0x120>)
 80041b4:	f001 fa5a 	bl	800566c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80041b8:	4806      	ldr	r0, [pc, #24]	; (80041d4 <MX_USART3_UART_Init+0x120>)
 80041ba:	f7ff fec7 	bl	8003f4c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80041be:	4805      	ldr	r0, [pc, #20]	; (80041d4 <MX_USART3_UART_Init+0x120>)
 80041c0:	f7ff feb4 	bl	8003f2c <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80041c4:	bf00      	nop
 80041c6:	3738      	adds	r7, #56	; 0x38
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40020400 	.word	0x40020400
 80041d0:	40026000 	.word	0x40026000
 80041d4:	40004800 	.word	0x40004800

080041d8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08e      	sub	sp, #56	; 0x38
 80041dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80041de:	f107 031c 	add.w	r3, r7, #28
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	605a      	str	r2, [r3, #4]
 80041e8:	609a      	str	r2, [r3, #8]
 80041ea:	60da      	str	r2, [r3, #12]
 80041ec:	611a      	str	r2, [r3, #16]
 80041ee:	615a      	str	r2, [r3, #20]
 80041f0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041f2:	1d3b      	adds	r3, r7, #4
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	605a      	str	r2, [r3, #4]
 80041fa:	609a      	str	r2, [r3, #8]
 80041fc:	60da      	str	r2, [r3, #12]
 80041fe:	611a      	str	r2, [r3, #16]
 8004200:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8004202:	2020      	movs	r0, #32
 8004204:	f7ff fe7a 	bl	8003efc <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004208:	2004      	movs	r0, #4
 800420a:	f7ff fe47 	bl	8003e9c <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800420e:	23c0      	movs	r3, #192	; 0xc0
 8004210:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004212:	2302      	movs	r3, #2
 8004214:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004216:	2303      	movs	r3, #3
 8004218:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800421a:	2300      	movs	r3, #0
 800421c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004222:	2308      	movs	r3, #8
 8004224:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004226:	1d3b      	adds	r3, r7, #4
 8004228:	4619      	mov	r1, r3
 800422a:	4819      	ldr	r0, [pc, #100]	; (8004290 <MX_USART6_UART_Init+0xb8>)
 800422c:	f000 faa2 	bl	8004774 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004230:	f7ff fc6a 	bl	8003b08 <__NVIC_GetPriorityGrouping>
 8004234:	4603      	mov	r3, r0
 8004236:	2200      	movs	r2, #0
 8004238:	2100      	movs	r1, #0
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff fcba 	bl	8003bb4 <NVIC_EncodePriority>
 8004240:	4603      	mov	r3, r0
 8004242:	4619      	mov	r1, r3
 8004244:	2047      	movs	r0, #71	; 0x47
 8004246:	f7ff fc8b 	bl	8003b60 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800424a:	2047      	movs	r0, #71	; 0x47
 800424c:	f7ff fc6a 	bl	8003b24 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8004250:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004254:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004256:	2300      	movs	r3, #0
 8004258:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800425a:	2300      	movs	r3, #0
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800425e:	2300      	movs	r3, #0
 8004260:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004262:	230c      	movs	r3, #12
 8004264:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004266:	2300      	movs	r3, #0
 8004268:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800426a:	2300      	movs	r3, #0
 800426c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800426e:	f107 031c 	add.w	r3, r7, #28
 8004272:	4619      	mov	r1, r3
 8004274:	4807      	ldr	r0, [pc, #28]	; (8004294 <MX_USART6_UART_Init+0xbc>)
 8004276:	f001 f9f9 	bl	800566c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800427a:	4806      	ldr	r0, [pc, #24]	; (8004294 <MX_USART6_UART_Init+0xbc>)
 800427c:	f7ff fe66 	bl	8003f4c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8004280:	4804      	ldr	r0, [pc, #16]	; (8004294 <MX_USART6_UART_Init+0xbc>)
 8004282:	f7ff fe53 	bl	8003f2c <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004286:	bf00      	nop
 8004288:	3738      	adds	r7, #56	; 0x38
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40020800 	.word	0x40020800
 8004294:	40011400 	.word	0x40011400

08004298 <_write>:

/* USER CODE BEGIN 1 */
int _write(int file, char* p, int len)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	e011      	b.n	80042ce <_write+0x36>
	{
		LL_USART_TransmitData8(USART6, *(p+i));
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	4413      	add	r3, r2
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	4619      	mov	r1, r3
 80042b4:	480a      	ldr	r0, [pc, #40]	; (80042e0 <_write+0x48>)
 80042b6:	f7ff fe8e 	bl	8003fd6 <LL_USART_TransmitData8>
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 80042ba:	bf00      	nop
 80042bc:	4808      	ldr	r0, [pc, #32]	; (80042e0 <_write+0x48>)
 80042be:	f7ff fe77 	bl	8003fb0 <LL_USART_IsActiveFlag_TXE>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0f9      	beq.n	80042bc <_write+0x24>
	for(int i=0;i<len;i++)
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	3301      	adds	r3, #1
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	dbe9      	blt.n	80042aa <_write+0x12>
//		usDelay(100);	// 문자 1개 출력당 약 100us 소요, Float, int형 차이 없음
	}
	return len;
 80042d6:	687b      	ldr	r3, [r7, #4]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3718      	adds	r7, #24
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40011400 	.word	0x40011400

080042e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80042e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800431c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042e8:	480d      	ldr	r0, [pc, #52]	; (8004320 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80042ea:	490e      	ldr	r1, [pc, #56]	; (8004324 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80042ec:	4a0e      	ldr	r2, [pc, #56]	; (8004328 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042f0:	e002      	b.n	80042f8 <LoopCopyDataInit>

080042f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042f6:	3304      	adds	r3, #4

080042f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042fc:	d3f9      	bcc.n	80042f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042fe:	4a0b      	ldr	r2, [pc, #44]	; (800432c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004300:	4c0b      	ldr	r4, [pc, #44]	; (8004330 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004304:	e001      	b.n	800430a <LoopFillZerobss>

08004306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004308:	3204      	adds	r2, #4

0800430a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800430a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800430c:	d3fb      	bcc.n	8004306 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800430e:	f7ff fa79 	bl	8003804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004312:	f001 fa69 	bl	80057e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004316:	f7fe fd81 	bl	8002e1c <main>
  bx  lr    
 800431a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800431c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004324:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8004328:	08008ee4 	.word	0x08008ee4
  ldr r2, =_sbss
 800432c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004330:	20000428 	.word	0x20000428

08004334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004334:	e7fe      	b.n	8004334 <ADC_IRQHandler>
	...

08004338 <LL_EXTI_EnableIT_0_31>:
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8004340:	4b05      	ldr	r3, [pc, #20]	; (8004358 <LL_EXTI_EnableIT_0_31+0x20>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4904      	ldr	r1, [pc, #16]	; (8004358 <LL_EXTI_EnableIT_0_31+0x20>)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4313      	orrs	r3, r2
 800434a:	600b      	str	r3, [r1, #0]
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	40013c00 	.word	0x40013c00

0800435c <LL_EXTI_DisableIT_0_31>:
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004364:	4b06      	ldr	r3, [pc, #24]	; (8004380 <LL_EXTI_DisableIT_0_31+0x24>)
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	43db      	mvns	r3, r3
 800436c:	4904      	ldr	r1, [pc, #16]	; (8004380 <LL_EXTI_DisableIT_0_31+0x24>)
 800436e:	4013      	ands	r3, r2
 8004370:	600b      	str	r3, [r1, #0]
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	40013c00 	.word	0x40013c00

08004384 <LL_EXTI_EnableEvent_0_31>:
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	4904      	ldr	r1, [pc, #16]	; (80043a4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4313      	orrs	r3, r2
 8004396:	604b      	str	r3, [r1, #4]
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	40013c00 	.word	0x40013c00

080043a8 <LL_EXTI_DisableEvent_0_31>:
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80043b0:	4b06      	ldr	r3, [pc, #24]	; (80043cc <LL_EXTI_DisableEvent_0_31+0x24>)
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	43db      	mvns	r3, r3
 80043b8:	4904      	ldr	r1, [pc, #16]	; (80043cc <LL_EXTI_DisableEvent_0_31+0x24>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	604b      	str	r3, [r1, #4]
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40013c00 	.word	0x40013c00

080043d0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80043d8:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	4904      	ldr	r1, [pc, #16]	; (80043f0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	608b      	str	r3, [r1, #8]
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	40013c00 	.word	0x40013c00

080043f4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80043fc:	4b06      	ldr	r3, [pc, #24]	; (8004418 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	43db      	mvns	r3, r3
 8004404:	4904      	ldr	r1, [pc, #16]	; (8004418 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004406:	4013      	ands	r3, r2
 8004408:	608b      	str	r3, [r1, #8]
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40013c00 	.word	0x40013c00

0800441c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	4904      	ldr	r1, [pc, #16]	; (800443c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4313      	orrs	r3, r2
 800442e:	60cb      	str	r3, [r1, #12]
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	40013c00 	.word	0x40013c00

08004440 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004448:	4b06      	ldr	r3, [pc, #24]	; (8004464 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	43db      	mvns	r3, r3
 8004450:	4904      	ldr	r1, [pc, #16]	; (8004464 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004452:	4013      	ands	r3, r2
 8004454:	60cb      	str	r3, [r1, #12]
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40013c00 	.word	0x40013c00

08004468 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004470:	2300      	movs	r3, #0
 8004472:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	791b      	ldrb	r3, [r3, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d065      	beq.n	8004548 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d06c      	beq.n	800455e <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	795b      	ldrb	r3, [r3, #5]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d01c      	beq.n	80044c6 <LL_EXTI_Init+0x5e>
 800448c:	2b02      	cmp	r3, #2
 800448e:	dc25      	bgt.n	80044dc <LL_EXTI_Init+0x74>
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <LL_EXTI_Init+0x32>
 8004494:	2b01      	cmp	r3, #1
 8004496:	d00b      	beq.n	80044b0 <LL_EXTI_Init+0x48>
 8004498:	e020      	b.n	80044dc <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff ff82 	bl	80043a8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff ff45 	bl	8004338 <LL_EXTI_EnableIT_0_31>
          break;
 80044ae:	e018      	b.n	80044e2 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff ff51 	bl	800435c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff ff60 	bl	8004384 <LL_EXTI_EnableEvent_0_31>
          break;
 80044c4:	e00d      	b.n	80044e2 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff ff34 	bl	8004338 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff ff55 	bl	8004384 <LL_EXTI_EnableEvent_0_31>
          break;
 80044da:	e002      	b.n	80044e2 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	73fb      	strb	r3, [r7, #15]
          break;
 80044e0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	799b      	ldrb	r3, [r3, #6]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d039      	beq.n	800455e <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	799b      	ldrb	r3, [r3, #6]
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d01c      	beq.n	800452c <LL_EXTI_Init+0xc4>
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	dc25      	bgt.n	8004542 <LL_EXTI_Init+0xda>
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d002      	beq.n	8004500 <LL_EXTI_Init+0x98>
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d00b      	beq.n	8004516 <LL_EXTI_Init+0xae>
 80044fe:	e020      	b.n	8004542 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff ff9b 	bl	8004440 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff ff5e 	bl	80043d0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8004514:	e024      	b.n	8004560 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff ff6a 	bl	80043f4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff ff79 	bl	800441c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800452a:	e019      	b.n	8004560 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff ff4d 	bl	80043d0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff ff6e 	bl	800441c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004540:	e00e      	b.n	8004560 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	73fb      	strb	r3, [r7, #15]
            break;
 8004546:	e00b      	b.n	8004560 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff ff05 	bl	800435c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff ff26 	bl	80043a8 <LL_EXTI_DisableEvent_0_31>
 800455c:	e000      	b.n	8004560 <LL_EXTI_Init+0xf8>
      }
 800455e:	bf00      	nop
  }
  return status;
 8004560:	7bfb      	ldrb	r3, [r7, #15]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <LL_GPIO_SetPinMode>:
{
 800456a:	b480      	push	{r7}
 800456c:	b089      	sub	sp, #36	; 0x24
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	fa93 f3a3 	rbit	r3, r3
 8004584:	613b      	str	r3, [r7, #16]
  return result;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	fab3 f383 	clz	r3, r3
 800458c:	b2db      	uxtb	r3, r3
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	2103      	movs	r1, #3
 8004592:	fa01 f303 	lsl.w	r3, r1, r3
 8004596:	43db      	mvns	r3, r3
 8004598:	401a      	ands	r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	fa93 f3a3 	rbit	r3, r3
 80045a4:	61bb      	str	r3, [r7, #24]
  return result;
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	fab3 f383 	clz	r3, r3
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	fa01 f303 	lsl.w	r3, r1, r3
 80045b6:	431a      	orrs	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	601a      	str	r2, [r3, #0]
}
 80045bc:	bf00      	nop
 80045be:	3724      	adds	r7, #36	; 0x24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <LL_GPIO_SetPinOutputType>:
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	43db      	mvns	r3, r3
 80045dc:	401a      	ands	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	fb01 f303 	mul.w	r3, r1, r3
 80045e6:	431a      	orrs	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	605a      	str	r2, [r3, #4]
}
 80045ec:	bf00      	nop
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <LL_GPIO_SetPinSpeed>:
{
 80045f8:	b480      	push	{r7}
 80045fa:	b089      	sub	sp, #36	; 0x24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	fa93 f3a3 	rbit	r3, r3
 8004612:	613b      	str	r3, [r7, #16]
  return result;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	fab3 f383 	clz	r3, r3
 800461a:	b2db      	uxtb	r3, r3
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	2103      	movs	r1, #3
 8004620:	fa01 f303 	lsl.w	r3, r1, r3
 8004624:	43db      	mvns	r3, r3
 8004626:	401a      	ands	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	fa93 f3a3 	rbit	r3, r3
 8004632:	61bb      	str	r3, [r7, #24]
  return result;
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	fab3 f383 	clz	r3, r3
 800463a:	b2db      	uxtb	r3, r3
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	fa01 f303 	lsl.w	r3, r1, r3
 8004644:	431a      	orrs	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	609a      	str	r2, [r3, #8]
}
 800464a:	bf00      	nop
 800464c:	3724      	adds	r7, #36	; 0x24
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <LL_GPIO_SetPinPull>:
{
 8004656:	b480      	push	{r7}
 8004658:	b089      	sub	sp, #36	; 0x24
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	fa93 f3a3 	rbit	r3, r3
 8004670:	613b      	str	r3, [r7, #16]
  return result;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	fab3 f383 	clz	r3, r3
 8004678:	b2db      	uxtb	r3, r3
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	2103      	movs	r1, #3
 800467e:	fa01 f303 	lsl.w	r3, r1, r3
 8004682:	43db      	mvns	r3, r3
 8004684:	401a      	ands	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	fa93 f3a3 	rbit	r3, r3
 8004690:	61bb      	str	r3, [r7, #24]
  return result;
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	fab3 f383 	clz	r3, r3
 8004698:	b2db      	uxtb	r3, r3
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	fa01 f303 	lsl.w	r3, r1, r3
 80046a2:	431a      	orrs	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	60da      	str	r2, [r3, #12]
}
 80046a8:	bf00      	nop
 80046aa:	3724      	adds	r7, #36	; 0x24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <LL_GPIO_SetAFPin_0_7>:
{
 80046b4:	b480      	push	{r7}
 80046b6:	b089      	sub	sp, #36	; 0x24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6a1a      	ldr	r2, [r3, #32]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	fa93 f3a3 	rbit	r3, r3
 80046ce:	613b      	str	r3, [r7, #16]
  return result;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	fab3 f383 	clz	r3, r3
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	210f      	movs	r1, #15
 80046dc:	fa01 f303 	lsl.w	r3, r1, r3
 80046e0:	43db      	mvns	r3, r3
 80046e2:	401a      	ands	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	fa93 f3a3 	rbit	r3, r3
 80046ee:	61bb      	str	r3, [r7, #24]
  return result;
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	fab3 f383 	clz	r3, r3
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004700:	431a      	orrs	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	621a      	str	r2, [r3, #32]
}
 8004706:	bf00      	nop
 8004708:	3724      	adds	r7, #36	; 0x24
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <LL_GPIO_SetAFPin_8_15>:
{
 8004712:	b480      	push	{r7}
 8004714:	b089      	sub	sp, #36	; 0x24
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	0a1b      	lsrs	r3, r3, #8
 8004726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	fa93 f3a3 	rbit	r3, r3
 800472e:	613b      	str	r3, [r7, #16]
  return result;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	fab3 f383 	clz	r3, r3
 8004736:	b2db      	uxtb	r3, r3
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	210f      	movs	r1, #15
 800473c:	fa01 f303 	lsl.w	r3, r1, r3
 8004740:	43db      	mvns	r3, r3
 8004742:	401a      	ands	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	0a1b      	lsrs	r3, r3, #8
 8004748:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	fa93 f3a3 	rbit	r3, r3
 8004750:	61bb      	str	r3, [r7, #24]
  return result;
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	fab3 f383 	clz	r3, r3
 8004758:	b2db      	uxtb	r3, r3
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	fa01 f303 	lsl.w	r3, r1, r3
 8004762:	431a      	orrs	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004768:	bf00      	nop
 800476a:	3724      	adds	r7, #36	; 0x24
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b088      	sub	sp, #32
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800477e:	2300      	movs	r3, #0
 8004780:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004782:	2300      	movs	r3, #0
 8004784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	fa93 f3a3 	rbit	r3, r3
 8004792:	613b      	str	r3, [r7, #16]
  return result;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	fab3 f383 	clz	r3, r3
 800479a:	b2db      	uxtb	r3, r3
 800479c:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800479e:	e050      	b.n	8004842 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	2101      	movs	r1, #1
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ac:	4013      	ands	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d042      	beq.n	800483c <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d003      	beq.n	80047c6 <LL_GPIO_Init+0x52>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d10d      	bne.n	80047e2 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	461a      	mov	r2, r3
 80047cc:	69b9      	ldr	r1, [r7, #24]
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7ff ff12 	bl	80045f8 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	461a      	mov	r2, r3
 80047da:	69b9      	ldr	r1, [r7, #24]
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff fef3 	bl	80045c8 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	461a      	mov	r2, r3
 80047e8:	69b9      	ldr	r1, [r7, #24]
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff ff33 	bl	8004656 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d11a      	bne.n	800482e <LL_GPIO_Init+0xba>
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	fa93 f3a3 	rbit	r3, r3
 8004802:	60bb      	str	r3, [r7, #8]
  return result;
 8004804:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004806:	fab3 f383 	clz	r3, r3
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b07      	cmp	r3, #7
 800480e:	d807      	bhi.n	8004820 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	461a      	mov	r2, r3
 8004816:	69b9      	ldr	r1, [r7, #24]
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff ff4b 	bl	80046b4 <LL_GPIO_SetAFPin_0_7>
 800481e:	e006      	b.n	800482e <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	461a      	mov	r2, r3
 8004826:	69b9      	ldr	r1, [r7, #24]
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff ff72 	bl	8004712 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	461a      	mov	r2, r3
 8004834:	69b9      	ldr	r1, [r7, #24]
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff fe97 	bl	800456a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	3301      	adds	r3, #1
 8004840:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	fa22 f303 	lsr.w	r3, r2, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1a7      	bne.n	80047a0 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3720      	adds	r7, #32
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <LL_RCC_GetSysClkSource>:
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004860:	4b04      	ldr	r3, [pc, #16]	; (8004874 <LL_RCC_GetSysClkSource+0x18>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f003 030c 	and.w	r3, r3, #12
}
 8004868:	4618      	mov	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800

08004878 <LL_RCC_GetAHBPrescaler>:
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800487c:	4b04      	ldr	r3, [pc, #16]	; (8004890 <LL_RCC_GetAHBPrescaler+0x18>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004884:	4618      	mov	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40023800 	.word	0x40023800

08004894 <LL_RCC_GetAPB1Prescaler>:
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004898:	4b04      	ldr	r3, [pc, #16]	; (80048ac <LL_RCC_GetAPB1Prescaler+0x18>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40023800 	.word	0x40023800

080048b0 <LL_RCC_GetAPB2Prescaler>:
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80048b4:	4b04      	ldr	r3, [pc, #16]	; (80048c8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800

080048cc <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80048d0:	4b04      	ldr	r3, [pc, #16]	; (80048e4 <LL_RCC_PLL_GetMainSource+0x18>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80048d8:	4618      	mov	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40023800 	.word	0x40023800

080048e8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80048ec:	4b04      	ldr	r3, [pc, #16]	; (8004900 <LL_RCC_PLL_GetN+0x18>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	099b      	lsrs	r3, r3, #6
 80048f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	40023800 	.word	0x40023800

08004904 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004908:	4b04      	ldr	r3, [pc, #16]	; (800491c <LL_RCC_PLL_GetP+0x18>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004910:	4618      	mov	r0, r3
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40023800 	.word	0x40023800

08004920 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004924:	4b04      	ldr	r3, [pc, #16]	; (8004938 <LL_RCC_PLL_GetDivider+0x18>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800492c:	4618      	mov	r0, r3
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40023800 	.word	0x40023800

0800493c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004944:	f000 f820 	bl	8004988 <RCC_GetSystemClockFreq>
 8004948:	4602      	mov	r2, r0
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f000 f840 	bl	80049d8 <RCC_GetHCLKClockFreq>
 8004958:	4602      	mov	r2, r0
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	4618      	mov	r0, r3
 8004964:	f000 f84e 	bl	8004a04 <RCC_GetPCLK1ClockFreq>
 8004968:	4602      	mov	r2, r0
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4618      	mov	r0, r3
 8004974:	f000 f85a 	bl	8004a2c <RCC_GetPCLK2ClockFreq>
 8004978:	4602      	mov	r2, r0
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	60da      	str	r2, [r3, #12]
}
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004992:	f7ff ff63 	bl	800485c <LL_RCC_GetSysClkSource>
 8004996:	4603      	mov	r3, r0
 8004998:	2b08      	cmp	r3, #8
 800499a:	d00c      	beq.n	80049b6 <RCC_GetSystemClockFreq+0x2e>
 800499c:	2b08      	cmp	r3, #8
 800499e:	d80f      	bhi.n	80049c0 <RCC_GetSystemClockFreq+0x38>
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <RCC_GetSystemClockFreq+0x22>
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d003      	beq.n	80049b0 <RCC_GetSystemClockFreq+0x28>
 80049a8:	e00a      	b.n	80049c0 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80049aa:	4b09      	ldr	r3, [pc, #36]	; (80049d0 <RCC_GetSystemClockFreq+0x48>)
 80049ac:	607b      	str	r3, [r7, #4]
      break;
 80049ae:	e00a      	b.n	80049c6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80049b0:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <RCC_GetSystemClockFreq+0x4c>)
 80049b2:	607b      	str	r3, [r7, #4]
      break;
 80049b4:	e007      	b.n	80049c6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80049b6:	2008      	movs	r0, #8
 80049b8:	f000 f84c 	bl	8004a54 <RCC_PLL_GetFreqDomain_SYS>
 80049bc:	6078      	str	r0, [r7, #4]
      break;
 80049be:	e002      	b.n	80049c6 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80049c0:	4b03      	ldr	r3, [pc, #12]	; (80049d0 <RCC_GetSystemClockFreq+0x48>)
 80049c2:	607b      	str	r3, [r7, #4]
      break;
 80049c4:	bf00      	nop
  }

  return frequency;
 80049c6:	687b      	ldr	r3, [r7, #4]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	00f42400 	.word	0x00f42400
 80049d4:	007a1200 	.word	0x007a1200

080049d8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80049e0:	f7ff ff4a 	bl	8004878 <LL_RCC_GetAHBPrescaler>
 80049e4:	4603      	mov	r3, r0
 80049e6:	091b      	lsrs	r3, r3, #4
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	4a04      	ldr	r2, [pc, #16]	; (8004a00 <RCC_GetHCLKClockFreq+0x28>)
 80049ee:	5cd3      	ldrb	r3, [r2, r3]
 80049f0:	461a      	mov	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	40d3      	lsrs	r3, r2
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	08008a90 	.word	0x08008a90

08004a04 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004a0c:	f7ff ff42 	bl	8004894 <LL_RCC_GetAPB1Prescaler>
 8004a10:	4603      	mov	r3, r0
 8004a12:	0a9b      	lsrs	r3, r3, #10
 8004a14:	4a04      	ldr	r2, [pc, #16]	; (8004a28 <RCC_GetPCLK1ClockFreq+0x24>)
 8004a16:	5cd3      	ldrb	r3, [r2, r3]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	40d3      	lsrs	r3, r2
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	08008aa0 	.word	0x08008aa0

08004a2c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004a34:	f7ff ff3c 	bl	80048b0 <LL_RCC_GetAPB2Prescaler>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	0b5b      	lsrs	r3, r3, #13
 8004a3c:	4a04      	ldr	r2, [pc, #16]	; (8004a50 <RCC_GetPCLK2ClockFreq+0x24>)
 8004a3e:	5cd3      	ldrb	r3, [r2, r3]
 8004a40:	461a      	mov	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	40d3      	lsrs	r3, r2
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	08008aa0 	.word	0x08008aa0

08004a54 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004a54:	b590      	push	{r4, r7, lr}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004a68:	f7ff ff30 	bl	80048cc <LL_RCC_PLL_GetMainSource>
 8004a6c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d004      	beq.n	8004a7e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a7a:	d003      	beq.n	8004a84 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004a7c:	e005      	b.n	8004a8a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004a7e:	4b12      	ldr	r3, [pc, #72]	; (8004ac8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004a80:	617b      	str	r3, [r7, #20]
      break;
 8004a82:	e005      	b.n	8004a90 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004a84:	4b11      	ldr	r3, [pc, #68]	; (8004acc <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004a86:	617b      	str	r3, [r7, #20]
      break;
 8004a88:	e002      	b.n	8004a90 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004a8a:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004a8c:	617b      	str	r3, [r7, #20]
      break;
 8004a8e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b08      	cmp	r3, #8
 8004a94:	d113      	bne.n	8004abe <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004a96:	f7ff ff43 	bl	8004920 <LL_RCC_PLL_GetDivider>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	fbb3 f4f2 	udiv	r4, r3, r2
 8004aa2:	f7ff ff21 	bl	80048e8 <LL_RCC_PLL_GetN>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	fb03 f404 	mul.w	r4, r3, r4
 8004aac:	f7ff ff2a 	bl	8004904 <LL_RCC_PLL_GetP>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	0c1b      	lsrs	r3, r3, #16
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	fbb4 f3f3 	udiv	r3, r4, r3
 8004abc:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004abe:	693b      	ldr	r3, [r7, #16]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	371c      	adds	r7, #28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd90      	pop	{r4, r7, pc}
 8004ac8:	00f42400 	.word	0x00f42400
 8004acc:	007a1200 	.word	0x007a1200

08004ad0 <LL_SPI_IsEnabled>:
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae0:	2b40      	cmp	r3, #64	; 0x40
 8004ae2:	d101      	bne.n	8004ae8 <LL_SPI_IsEnabled+0x18>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e000      	b.n	8004aea <LL_SPI_IsEnabled+0x1a>
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <LL_SPI_SetCRCPolynomial>:
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	461a      	mov	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	611a      	str	r2, [r3, #16]
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b084      	sub	sp, #16
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff ffd3 	bl	8004ad0 <LL_SPI_IsEnabled>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d139      	bne.n	8004ba4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b38:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	6811      	ldr	r1, [r2, #0]
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	6852      	ldr	r2, [r2, #4]
 8004b44:	4311      	orrs	r1, r2
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	6892      	ldr	r2, [r2, #8]
 8004b4a:	4311      	orrs	r1, r2
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	68d2      	ldr	r2, [r2, #12]
 8004b50:	4311      	orrs	r1, r2
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	6912      	ldr	r2, [r2, #16]
 8004b56:	4311      	orrs	r1, r2
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	6952      	ldr	r2, [r2, #20]
 8004b5c:	4311      	orrs	r1, r2
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	6992      	ldr	r2, [r2, #24]
 8004b62:	4311      	orrs	r1, r2
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	69d2      	ldr	r2, [r2, #28]
 8004b68:	4311      	orrs	r1, r2
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	6a12      	ldr	r2, [r2, #32]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	431a      	orrs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f023 0204 	bic.w	r2, r3, #4
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	0c1b      	lsrs	r3, r3, #16
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b92:	d105      	bne.n	8004ba0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff ffab 	bl	8004af6 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	61da      	str	r2, [r3, #28]
  return status;
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <LL_TIM_SetPrescaler>:
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
 8004bc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <LL_TIM_SetAutoReload>:
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <LL_TIM_SetRepetitionCounter>:
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <LL_TIM_OC_SetCompareCH1>:
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <LL_TIM_OC_SetCompareCH2>:
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <LL_TIM_OC_SetCompareCH3>:
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <LL_TIM_OC_SetCompareCH4>:
{
 8004c62:	b480      	push	{r7}
 8004c64:	b083      	sub	sp, #12
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f043 0201 	orr.w	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	615a      	str	r2, [r3, #20]
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
	...

08004ca0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a3d      	ldr	r2, [pc, #244]	; (8004da8 <LL_TIM_Init+0x108>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d013      	beq.n	8004ce0 <LL_TIM_Init+0x40>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cbe:	d00f      	beq.n	8004ce0 <LL_TIM_Init+0x40>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a3a      	ldr	r2, [pc, #232]	; (8004dac <LL_TIM_Init+0x10c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d00b      	beq.n	8004ce0 <LL_TIM_Init+0x40>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a39      	ldr	r2, [pc, #228]	; (8004db0 <LL_TIM_Init+0x110>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d007      	beq.n	8004ce0 <LL_TIM_Init+0x40>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a38      	ldr	r2, [pc, #224]	; (8004db4 <LL_TIM_Init+0x114>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d003      	beq.n	8004ce0 <LL_TIM_Init+0x40>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a37      	ldr	r2, [pc, #220]	; (8004db8 <LL_TIM_Init+0x118>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d106      	bne.n	8004cee <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a2d      	ldr	r2, [pc, #180]	; (8004da8 <LL_TIM_Init+0x108>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d02b      	beq.n	8004d4e <LL_TIM_Init+0xae>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfc:	d027      	beq.n	8004d4e <LL_TIM_Init+0xae>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a2a      	ldr	r2, [pc, #168]	; (8004dac <LL_TIM_Init+0x10c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d023      	beq.n	8004d4e <LL_TIM_Init+0xae>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a29      	ldr	r2, [pc, #164]	; (8004db0 <LL_TIM_Init+0x110>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d01f      	beq.n	8004d4e <LL_TIM_Init+0xae>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a28      	ldr	r2, [pc, #160]	; (8004db4 <LL_TIM_Init+0x114>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01b      	beq.n	8004d4e <LL_TIM_Init+0xae>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a27      	ldr	r2, [pc, #156]	; (8004db8 <LL_TIM_Init+0x118>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d017      	beq.n	8004d4e <LL_TIM_Init+0xae>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a26      	ldr	r2, [pc, #152]	; (8004dbc <LL_TIM_Init+0x11c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d013      	beq.n	8004d4e <LL_TIM_Init+0xae>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a25      	ldr	r2, [pc, #148]	; (8004dc0 <LL_TIM_Init+0x120>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00f      	beq.n	8004d4e <LL_TIM_Init+0xae>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a24      	ldr	r2, [pc, #144]	; (8004dc4 <LL_TIM_Init+0x124>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d00b      	beq.n	8004d4e <LL_TIM_Init+0xae>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a23      	ldr	r2, [pc, #140]	; (8004dc8 <LL_TIM_Init+0x128>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d007      	beq.n	8004d4e <LL_TIM_Init+0xae>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a22      	ldr	r2, [pc, #136]	; (8004dcc <LL_TIM_Init+0x12c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d003      	beq.n	8004d4e <LL_TIM_Init+0xae>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a21      	ldr	r2, [pc, #132]	; (8004dd0 <LL_TIM_Init+0x130>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d106      	bne.n	8004d5c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	4619      	mov	r1, r3
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff ff34 	bl	8004bd6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	4619      	mov	r1, r3
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff ff20 	bl	8004bba <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a0a      	ldr	r2, [pc, #40]	; (8004da8 <LL_TIM_Init+0x108>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d003      	beq.n	8004d8a <LL_TIM_Init+0xea>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a0c      	ldr	r2, [pc, #48]	; (8004db8 <LL_TIM_Init+0x118>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d105      	bne.n	8004d96 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f7ff ff2e 	bl	8004bf2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7ff ff71 	bl	8004c7e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40010000 	.word	0x40010000
 8004dac:	40000400 	.word	0x40000400
 8004db0:	40000800 	.word	0x40000800
 8004db4:	40000c00 	.word	0x40000c00
 8004db8:	40010400 	.word	0x40010400
 8004dbc:	40014000 	.word	0x40014000
 8004dc0:	40014400 	.word	0x40014400
 8004dc4:	40014800 	.word	0x40014800
 8004dc8:	40001800 	.word	0x40001800
 8004dcc:	40001c00 	.word	0x40001c00
 8004dd0:	40002000 	.word	0x40002000

08004dd4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dea:	d027      	beq.n	8004e3c <LL_TIM_OC_Init+0x68>
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df2:	d82a      	bhi.n	8004e4a <LL_TIM_OC_Init+0x76>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dfa:	d018      	beq.n	8004e2e <LL_TIM_OC_Init+0x5a>
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e02:	d822      	bhi.n	8004e4a <LL_TIM_OC_Init+0x76>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d003      	beq.n	8004e12 <LL_TIM_OC_Init+0x3e>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2b10      	cmp	r3, #16
 8004e0e:	d007      	beq.n	8004e20 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004e10:	e01b      	b.n	8004e4a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 f81f 	bl	8004e58 <OC1Config>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e1e:	e015      	b.n	8004e4c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f884 	bl	8004f30 <OC2Config>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e2c:	e00e      	b.n	8004e4c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 f8ed 	bl	8005010 <OC3Config>
 8004e36:	4603      	mov	r3, r0
 8004e38:	75fb      	strb	r3, [r7, #23]
      break;
 8004e3a:	e007      	b.n	8004e4c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 f956 	bl	80050f0 <OC4Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	75fb      	strb	r3, [r7, #23]
      break;
 8004e48:	e000      	b.n	8004e4c <LL_TIM_OC_Init+0x78>
      break;
 8004e4a:	bf00      	nop
  }

  return result;
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	f023 0201 	bic.w	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0303 	bic.w	r3, r3, #3
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f023 0202 	bic.w	r2, r3, #2
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f023 0201 	bic.w	r2, r3, #1
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a1c      	ldr	r2, [pc, #112]	; (8004f28 <OC1Config+0xd0>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d003      	beq.n	8004ec2 <OC1Config+0x6a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a1b      	ldr	r2, [pc, #108]	; (8004f2c <OC1Config+0xd4>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d11e      	bne.n	8004f00 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f023 0208 	bic.w	r2, r3, #8
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f023 0204 	bic.w	r2, r3, #4
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	4313      	orrs	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4619      	mov	r1, r3
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff fe7b 	bl	8004c0e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40010000 	.word	0x40010000
 8004f2c:	40010400 	.word	0x40010400

08004f30 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f023 0210 	bic.w	r2, r3, #16
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f023 0220 	bic.w	r2, r3, #32
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f023 0210 	bic.w	r2, r3, #16
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a1d      	ldr	r2, [pc, #116]	; (8005008 <OC2Config+0xd8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <OC2Config+0x70>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a1c      	ldr	r2, [pc, #112]	; (800500c <OC2Config+0xdc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d11f      	bne.n	8004fe0 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	019b      	lsls	r3, r3, #6
 8004fac:	4313      	orrs	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	019b      	lsls	r3, r3, #6
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7ff fe19 	bl	8004c2a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40010000 	.word	0x40010000
 800500c:	40010400 	.word	0x40010400

08005010 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0303 	bic.w	r3, r3, #3
 800503e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	021b      	lsls	r3, r3, #8
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a1d      	ldr	r2, [pc, #116]	; (80050e8 <OC3Config+0xd8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d003      	beq.n	800507e <OC3Config+0x6e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a1c      	ldr	r2, [pc, #112]	; (80050ec <OC3Config+0xdc>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d11f      	bne.n	80050be <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	029b      	lsls	r3, r3, #10
 800508a:	4313      	orrs	r3, r2
 800508c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	029b      	lsls	r3, r3, #10
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	015b      	lsls	r3, r3, #5
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	4619      	mov	r1, r3
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff fdb8 	bl	8004c46 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40010000 	.word	0x40010000
 80050ec:	40010400 	.word	0x40010400

080050f0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800511e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	4313      	orrs	r3, r2
 800512e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	031b      	lsls	r3, r3, #12
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	031b      	lsls	r3, r3, #12
 800514c:	4313      	orrs	r3, r2
 800514e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a11      	ldr	r2, [pc, #68]	; (8005198 <OC4Config+0xa8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d003      	beq.n	8005160 <OC4Config+0x70>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a10      	ldr	r2, [pc, #64]	; (800519c <OC4Config+0xac>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d107      	bne.n	8005170 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	019b      	lsls	r3, r3, #6
 800516c:	4313      	orrs	r3, r2
 800516e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	4619      	mov	r1, r3
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff fd6d 	bl	8004c62 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40010000 	.word	0x40010000
 800519c:	40010400 	.word	0x40010400

080051a0 <LL_USART_IsEnabled>:
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b4:	bf0c      	ite	eq
 80051b6:	2301      	moveq	r3, #1
 80051b8:	2300      	movne	r3, #0
 80051ba:	b2db      	uxtb	r3, r3
}
 80051bc:	4618      	mov	r0, r3
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <LL_USART_SetStopBitsLength>:
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	611a      	str	r2, [r3, #16]
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <LL_USART_SetHWFlowCtrl>:
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
 80051f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	615a      	str	r2, [r3, #20]
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <LL_USART_SetBaudRate>:
{
 8005214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005218:	b0c0      	sub	sp, #256	; 0x100
 800521a:	af00      	add	r7, sp, #0
 800521c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005220:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8005224:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005228:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800522c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005234:	f040 810c 	bne.w	8005450 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005238:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800523c:	2200      	movs	r2, #0
 800523e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005242:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005246:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800524a:	4622      	mov	r2, r4
 800524c:	462b      	mov	r3, r5
 800524e:	1891      	adds	r1, r2, r2
 8005250:	6639      	str	r1, [r7, #96]	; 0x60
 8005252:	415b      	adcs	r3, r3
 8005254:	667b      	str	r3, [r7, #100]	; 0x64
 8005256:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800525a:	4621      	mov	r1, r4
 800525c:	eb12 0801 	adds.w	r8, r2, r1
 8005260:	4629      	mov	r1, r5
 8005262:	eb43 0901 	adc.w	r9, r3, r1
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800527a:	4690      	mov	r8, r2
 800527c:	4699      	mov	r9, r3
 800527e:	4623      	mov	r3, r4
 8005280:	eb18 0303 	adds.w	r3, r8, r3
 8005284:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005288:	462b      	mov	r3, r5
 800528a:	eb49 0303 	adc.w	r3, r9, r3
 800528e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005292:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005296:	2200      	movs	r2, #0
 8005298:	469a      	mov	sl, r3
 800529a:	4693      	mov	fp, r2
 800529c:	eb1a 030a 	adds.w	r3, sl, sl
 80052a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80052a2:	eb4b 030b 	adc.w	r3, fp, fp
 80052a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80052b0:	f7fb fcca 	bl	8000c48 <__aeabi_uldivmod>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4b64      	ldr	r3, [pc, #400]	; (800544c <LL_USART_SetBaudRate+0x238>)
 80052ba:	fba3 2302 	umull	r2, r3, r3, r2
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	b29c      	uxth	r4, r3
 80052c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052ca:	2200      	movs	r2, #0
 80052cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80052d0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80052d4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80052d8:	4642      	mov	r2, r8
 80052da:	464b      	mov	r3, r9
 80052dc:	1891      	adds	r1, r2, r2
 80052de:	6539      	str	r1, [r7, #80]	; 0x50
 80052e0:	415b      	adcs	r3, r3
 80052e2:	657b      	str	r3, [r7, #84]	; 0x54
 80052e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80052e8:	4641      	mov	r1, r8
 80052ea:	1851      	adds	r1, r2, r1
 80052ec:	64b9      	str	r1, [r7, #72]	; 0x48
 80052ee:	4649      	mov	r1, r9
 80052f0:	414b      	adcs	r3, r1
 80052f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8005300:	4659      	mov	r1, fp
 8005302:	00cb      	lsls	r3, r1, #3
 8005304:	4651      	mov	r1, sl
 8005306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800530a:	4651      	mov	r1, sl
 800530c:	00ca      	lsls	r2, r1, #3
 800530e:	4610      	mov	r0, r2
 8005310:	4619      	mov	r1, r3
 8005312:	4603      	mov	r3, r0
 8005314:	4642      	mov	r2, r8
 8005316:	189b      	adds	r3, r3, r2
 8005318:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800531c:	464b      	mov	r3, r9
 800531e:	460a      	mov	r2, r1
 8005320:	eb42 0303 	adc.w	r3, r2, r3
 8005324:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005328:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800532c:	2200      	movs	r2, #0
 800532e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005332:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8005336:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800533a:	460b      	mov	r3, r1
 800533c:	18db      	adds	r3, r3, r3
 800533e:	643b      	str	r3, [r7, #64]	; 0x40
 8005340:	4613      	mov	r3, r2
 8005342:	eb42 0303 	adc.w	r3, r2, r3
 8005346:	647b      	str	r3, [r7, #68]	; 0x44
 8005348:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800534c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005350:	f7fb fc7a 	bl	8000c48 <__aeabi_uldivmod>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	4611      	mov	r1, r2
 800535a:	4b3c      	ldr	r3, [pc, #240]	; (800544c <LL_USART_SetBaudRate+0x238>)
 800535c:	fba3 2301 	umull	r2, r3, r3, r1
 8005360:	095b      	lsrs	r3, r3, #5
 8005362:	2264      	movs	r2, #100	; 0x64
 8005364:	fb02 f303 	mul.w	r3, r2, r3
 8005368:	1acb      	subs	r3, r1, r3
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005370:	4b36      	ldr	r3, [pc, #216]	; (800544c <LL_USART_SetBaudRate+0x238>)
 8005372:	fba3 2302 	umull	r2, r3, r3, r2
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	b29b      	uxth	r3, r3
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	b29b      	uxth	r3, r3
 800537e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005382:	b29b      	uxth	r3, r3
 8005384:	4423      	add	r3, r4
 8005386:	b29c      	uxth	r4, r3
 8005388:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800538c:	2200      	movs	r2, #0
 800538e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005392:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005396:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800539a:	4642      	mov	r2, r8
 800539c:	464b      	mov	r3, r9
 800539e:	1891      	adds	r1, r2, r2
 80053a0:	63b9      	str	r1, [r7, #56]	; 0x38
 80053a2:	415b      	adcs	r3, r3
 80053a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053a6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053aa:	4641      	mov	r1, r8
 80053ac:	1851      	adds	r1, r2, r1
 80053ae:	6339      	str	r1, [r7, #48]	; 0x30
 80053b0:	4649      	mov	r1, r9
 80053b2:	414b      	adcs	r3, r1
 80053b4:	637b      	str	r3, [r7, #52]	; 0x34
 80053b6:	f04f 0200 	mov.w	r2, #0
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80053c2:	4659      	mov	r1, fp
 80053c4:	00cb      	lsls	r3, r1, #3
 80053c6:	4651      	mov	r1, sl
 80053c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053cc:	4651      	mov	r1, sl
 80053ce:	00ca      	lsls	r2, r1, #3
 80053d0:	4610      	mov	r0, r2
 80053d2:	4619      	mov	r1, r3
 80053d4:	4603      	mov	r3, r0
 80053d6:	4642      	mov	r2, r8
 80053d8:	189b      	adds	r3, r3, r2
 80053da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80053de:	464b      	mov	r3, r9
 80053e0:	460a      	mov	r2, r1
 80053e2:	eb42 0303 	adc.w	r3, r2, r3
 80053e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80053ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80053ee:	2200      	movs	r2, #0
 80053f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053f4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80053f8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80053fc:	460b      	mov	r3, r1
 80053fe:	18db      	adds	r3, r3, r3
 8005400:	62bb      	str	r3, [r7, #40]	; 0x28
 8005402:	4613      	mov	r3, r2
 8005404:	eb42 0303 	adc.w	r3, r2, r3
 8005408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800540a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800540e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005412:	f7fb fc19 	bl	8000c48 <__aeabi_uldivmod>
 8005416:	4602      	mov	r2, r0
 8005418:	460b      	mov	r3, r1
 800541a:	4b0c      	ldr	r3, [pc, #48]	; (800544c <LL_USART_SetBaudRate+0x238>)
 800541c:	fba3 1302 	umull	r1, r3, r3, r2
 8005420:	095b      	lsrs	r3, r3, #5
 8005422:	2164      	movs	r1, #100	; 0x64
 8005424:	fb01 f303 	mul.w	r3, r1, r3
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	3332      	adds	r3, #50	; 0x32
 800542e:	4a07      	ldr	r2, [pc, #28]	; (800544c <LL_USART_SetBaudRate+0x238>)
 8005430:	fba2 2303 	umull	r2, r3, r2, r3
 8005434:	095b      	lsrs	r3, r3, #5
 8005436:	b29b      	uxth	r3, r3
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	b29b      	uxth	r3, r3
 800543e:	4423      	add	r3, r4
 8005440:	b29b      	uxth	r3, r3
 8005442:	461a      	mov	r2, r3
 8005444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005448:	609a      	str	r2, [r3, #8]
}
 800544a:	e107      	b.n	800565c <LL_USART_SetBaudRate+0x448>
 800544c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005450:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005454:	2200      	movs	r2, #0
 8005456:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800545a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800545e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8005462:	4642      	mov	r2, r8
 8005464:	464b      	mov	r3, r9
 8005466:	1891      	adds	r1, r2, r2
 8005468:	6239      	str	r1, [r7, #32]
 800546a:	415b      	adcs	r3, r3
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
 800546e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005472:	4641      	mov	r1, r8
 8005474:	1854      	adds	r4, r2, r1
 8005476:	4649      	mov	r1, r9
 8005478:	eb43 0501 	adc.w	r5, r3, r1
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	00eb      	lsls	r3, r5, #3
 8005486:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800548a:	00e2      	lsls	r2, r4, #3
 800548c:	4614      	mov	r4, r2
 800548e:	461d      	mov	r5, r3
 8005490:	4643      	mov	r3, r8
 8005492:	18e3      	adds	r3, r4, r3
 8005494:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005498:	464b      	mov	r3, r9
 800549a:	eb45 0303 	adc.w	r3, r5, r3
 800549e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80054a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80054a6:	2200      	movs	r2, #0
 80054a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80054ac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80054bc:	4629      	mov	r1, r5
 80054be:	008b      	lsls	r3, r1, #2
 80054c0:	4621      	mov	r1, r4
 80054c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054c6:	4621      	mov	r1, r4
 80054c8:	008a      	lsls	r2, r1, #2
 80054ca:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80054ce:	f7fb fbbb 	bl	8000c48 <__aeabi_uldivmod>
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4b64      	ldr	r3, [pc, #400]	; (8005668 <LL_USART_SetBaudRate+0x454>)
 80054d8:	fba3 2302 	umull	r2, r3, r3, r2
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	b29b      	uxth	r3, r3
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	b29c      	uxth	r4, r3
 80054e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054e8:	2200      	movs	r2, #0
 80054ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054f2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80054f6:	4642      	mov	r2, r8
 80054f8:	464b      	mov	r3, r9
 80054fa:	1891      	adds	r1, r2, r2
 80054fc:	61b9      	str	r1, [r7, #24]
 80054fe:	415b      	adcs	r3, r3
 8005500:	61fb      	str	r3, [r7, #28]
 8005502:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005506:	4641      	mov	r1, r8
 8005508:	1851      	adds	r1, r2, r1
 800550a:	6139      	str	r1, [r7, #16]
 800550c:	4649      	mov	r1, r9
 800550e:	414b      	adcs	r3, r1
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	f04f 0200 	mov.w	r2, #0
 8005516:	f04f 0300 	mov.w	r3, #0
 800551a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800551e:	4659      	mov	r1, fp
 8005520:	00cb      	lsls	r3, r1, #3
 8005522:	4651      	mov	r1, sl
 8005524:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005528:	4651      	mov	r1, sl
 800552a:	00ca      	lsls	r2, r1, #3
 800552c:	4610      	mov	r0, r2
 800552e:	4619      	mov	r1, r3
 8005530:	4603      	mov	r3, r0
 8005532:	4642      	mov	r2, r8
 8005534:	189b      	adds	r3, r3, r2
 8005536:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800553a:	464b      	mov	r3, r9
 800553c:	460a      	mov	r2, r1
 800553e:	eb42 0303 	adc.w	r3, r2, r3
 8005542:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005546:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800554a:	2200      	movs	r2, #0
 800554c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005550:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8005560:	4649      	mov	r1, r9
 8005562:	008b      	lsls	r3, r1, #2
 8005564:	4641      	mov	r1, r8
 8005566:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800556a:	4641      	mov	r1, r8
 800556c:	008a      	lsls	r2, r1, #2
 800556e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8005572:	f7fb fb69 	bl	8000c48 <__aeabi_uldivmod>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4b3b      	ldr	r3, [pc, #236]	; (8005668 <LL_USART_SetBaudRate+0x454>)
 800557c:	fba3 1302 	umull	r1, r3, r3, r2
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	2164      	movs	r1, #100	; 0x64
 8005584:	fb01 f303 	mul.w	r3, r1, r3
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	3332      	adds	r3, #50	; 0x32
 800558e:	4a36      	ldr	r2, [pc, #216]	; (8005668 <LL_USART_SetBaudRate+0x454>)
 8005590:	fba2 2303 	umull	r2, r3, r2, r3
 8005594:	095b      	lsrs	r3, r3, #5
 8005596:	b29b      	uxth	r3, r3
 8005598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800559c:	b29b      	uxth	r3, r3
 800559e:	4423      	add	r3, r4
 80055a0:	b29c      	uxth	r4, r3
 80055a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055a6:	2200      	movs	r2, #0
 80055a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80055aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055b0:	4642      	mov	r2, r8
 80055b2:	464b      	mov	r3, r9
 80055b4:	1891      	adds	r1, r2, r2
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	415b      	adcs	r3, r3
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055c0:	4641      	mov	r1, r8
 80055c2:	1851      	adds	r1, r2, r1
 80055c4:	6039      	str	r1, [r7, #0]
 80055c6:	4649      	mov	r1, r9
 80055c8:	414b      	adcs	r3, r1
 80055ca:	607b      	str	r3, [r7, #4]
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055d8:	4659      	mov	r1, fp
 80055da:	00cb      	lsls	r3, r1, #3
 80055dc:	4651      	mov	r1, sl
 80055de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055e2:	4651      	mov	r1, sl
 80055e4:	00ca      	lsls	r2, r1, #3
 80055e6:	4610      	mov	r0, r2
 80055e8:	4619      	mov	r1, r3
 80055ea:	4603      	mov	r3, r0
 80055ec:	4642      	mov	r2, r8
 80055ee:	189b      	adds	r3, r3, r2
 80055f0:	673b      	str	r3, [r7, #112]	; 0x70
 80055f2:	464b      	mov	r3, r9
 80055f4:	460a      	mov	r2, r1
 80055f6:	eb42 0303 	adc.w	r3, r2, r3
 80055fa:	677b      	str	r3, [r7, #116]	; 0x74
 80055fc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005600:	2200      	movs	r2, #0
 8005602:	66bb      	str	r3, [r7, #104]	; 0x68
 8005604:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8005612:	4649      	mov	r1, r9
 8005614:	008b      	lsls	r3, r1, #2
 8005616:	4641      	mov	r1, r8
 8005618:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800561c:	4641      	mov	r1, r8
 800561e:	008a      	lsls	r2, r1, #2
 8005620:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005624:	f7fb fb10 	bl	8000c48 <__aeabi_uldivmod>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4b0e      	ldr	r3, [pc, #56]	; (8005668 <LL_USART_SetBaudRate+0x454>)
 800562e:	fba3 1302 	umull	r1, r3, r3, r2
 8005632:	095b      	lsrs	r3, r3, #5
 8005634:	2164      	movs	r1, #100	; 0x64
 8005636:	fb01 f303 	mul.w	r3, r1, r3
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	011b      	lsls	r3, r3, #4
 800563e:	3332      	adds	r3, #50	; 0x32
 8005640:	4a09      	ldr	r2, [pc, #36]	; (8005668 <LL_USART_SetBaudRate+0x454>)
 8005642:	fba2 2303 	umull	r2, r3, r2, r3
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	b29b      	uxth	r3, r3
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	b29b      	uxth	r3, r3
 8005650:	4423      	add	r3, r4
 8005652:	b29b      	uxth	r3, r3
 8005654:	461a      	mov	r2, r3
 8005656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800565a:	609a      	str	r2, [r3, #8]
}
 800565c:	bf00      	nop
 800565e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005662:	46bd      	mov	sp, r7
 8005664:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005668:	51eb851f 	.word	0x51eb851f

0800566c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800567a:	2300      	movs	r3, #0
 800567c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7ff fd8e 	bl	80051a0 <LL_USART_IsEnabled>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d15e      	bne.n	8005748 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005692:	f023 030c 	bic.w	r3, r3, #12
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	6851      	ldr	r1, [r2, #4]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	68d2      	ldr	r2, [r2, #12]
 800569e:	4311      	orrs	r1, r2
 80056a0:	683a      	ldr	r2, [r7, #0]
 80056a2:	6912      	ldr	r2, [r2, #16]
 80056a4:	4311      	orrs	r1, r2
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	6992      	ldr	r2, [r2, #24]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	431a      	orrs	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	4619      	mov	r1, r3
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff fd85 	bl	80051c8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	4619      	mov	r1, r3
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff fd92 	bl	80051ee <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80056ca:	f107 0308 	add.w	r3, r7, #8
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7ff f934 	bl	800493c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a1f      	ldr	r2, [pc, #124]	; (8005754 <LL_USART_Init+0xe8>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d102      	bne.n	80056e2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	61bb      	str	r3, [r7, #24]
 80056e0:	e021      	b.n	8005726 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a1c      	ldr	r2, [pc, #112]	; (8005758 <LL_USART_Init+0xec>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d102      	bne.n	80056f0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	e01a      	b.n	8005726 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a1a      	ldr	r2, [pc, #104]	; (800575c <LL_USART_Init+0xf0>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d102      	bne.n	80056fe <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	61bb      	str	r3, [r7, #24]
 80056fc:	e013      	b.n	8005726 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a17      	ldr	r2, [pc, #92]	; (8005760 <LL_USART_Init+0xf4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d102      	bne.n	800570c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	e00c      	b.n	8005726 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a15      	ldr	r2, [pc, #84]	; (8005764 <LL_USART_Init+0xf8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d102      	bne.n	800571a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	61bb      	str	r3, [r7, #24]
 8005718:	e005      	b.n	8005726 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a12      	ldr	r2, [pc, #72]	; (8005768 <LL_USART_Init+0xfc>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d101      	bne.n	8005726 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00d      	beq.n	8005748 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d009      	beq.n	8005748 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8005734:	2300      	movs	r3, #0
 8005736:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	699a      	ldr	r2, [r3, #24]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	69b9      	ldr	r1, [r7, #24]
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7ff fd66 	bl	8005214 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005748:	7ffb      	ldrb	r3, [r7, #31]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	40011000 	.word	0x40011000
 8005758:	40004400 	.word	0x40004400
 800575c:	40004800 	.word	0x40004800
 8005760:	40011400 	.word	0x40011400
 8005764:	40004c00 	.word	0x40004c00
 8005768:	40005000 	.word	0x40005000

0800576c <LL_InitTick>:
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	fbb2 f3f3 	udiv	r3, r2, r3
 800577e:	4a07      	ldr	r2, [pc, #28]	; (800579c <LL_InitTick+0x30>)
 8005780:	3b01      	subs	r3, #1
 8005782:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8005784:	4b05      	ldr	r3, [pc, #20]	; (800579c <LL_InitTick+0x30>)
 8005786:	2200      	movs	r2, #0
 8005788:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800578a:	4b04      	ldr	r3, [pc, #16]	; (800579c <LL_InitTick+0x30>)
 800578c:	2205      	movs	r2, #5
 800578e:	601a      	str	r2, [r3, #0]
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	e000e010 	.word	0xe000e010

080057a0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80057a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7ff ffdd 	bl	800576c <LL_InitTick>
}
 80057b2:	bf00      	nop
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80057c4:	4a04      	ldr	r2, [pc, #16]	; (80057d8 <LL_SetSystemCoreClock+0x1c>)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6013      	str	r3, [r2, #0]
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	20000014 	.word	0x20000014

080057dc <__errno>:
 80057dc:	4b01      	ldr	r3, [pc, #4]	; (80057e4 <__errno+0x8>)
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	20000018 	.word	0x20000018

080057e8 <__libc_init_array>:
 80057e8:	b570      	push	{r4, r5, r6, lr}
 80057ea:	4d0d      	ldr	r5, [pc, #52]	; (8005820 <__libc_init_array+0x38>)
 80057ec:	4c0d      	ldr	r4, [pc, #52]	; (8005824 <__libc_init_array+0x3c>)
 80057ee:	1b64      	subs	r4, r4, r5
 80057f0:	10a4      	asrs	r4, r4, #2
 80057f2:	2600      	movs	r6, #0
 80057f4:	42a6      	cmp	r6, r4
 80057f6:	d109      	bne.n	800580c <__libc_init_array+0x24>
 80057f8:	4d0b      	ldr	r5, [pc, #44]	; (8005828 <__libc_init_array+0x40>)
 80057fa:	4c0c      	ldr	r4, [pc, #48]	; (800582c <__libc_init_array+0x44>)
 80057fc:	f003 f8c6 	bl	800898c <_init>
 8005800:	1b64      	subs	r4, r4, r5
 8005802:	10a4      	asrs	r4, r4, #2
 8005804:	2600      	movs	r6, #0
 8005806:	42a6      	cmp	r6, r4
 8005808:	d105      	bne.n	8005816 <__libc_init_array+0x2e>
 800580a:	bd70      	pop	{r4, r5, r6, pc}
 800580c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005810:	4798      	blx	r3
 8005812:	3601      	adds	r6, #1
 8005814:	e7ee      	b.n	80057f4 <__libc_init_array+0xc>
 8005816:	f855 3b04 	ldr.w	r3, [r5], #4
 800581a:	4798      	blx	r3
 800581c:	3601      	adds	r6, #1
 800581e:	e7f2      	b.n	8005806 <__libc_init_array+0x1e>
 8005820:	08008edc 	.word	0x08008edc
 8005824:	08008edc 	.word	0x08008edc
 8005828:	08008edc 	.word	0x08008edc
 800582c:	08008ee0 	.word	0x08008ee0

08005830 <memcpy>:
 8005830:	440a      	add	r2, r1
 8005832:	4291      	cmp	r1, r2
 8005834:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005838:	d100      	bne.n	800583c <memcpy+0xc>
 800583a:	4770      	bx	lr
 800583c:	b510      	push	{r4, lr}
 800583e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005846:	4291      	cmp	r1, r2
 8005848:	d1f9      	bne.n	800583e <memcpy+0xe>
 800584a:	bd10      	pop	{r4, pc}

0800584c <memset>:
 800584c:	4402      	add	r2, r0
 800584e:	4603      	mov	r3, r0
 8005850:	4293      	cmp	r3, r2
 8005852:	d100      	bne.n	8005856 <memset+0xa>
 8005854:	4770      	bx	lr
 8005856:	f803 1b01 	strb.w	r1, [r3], #1
 800585a:	e7f9      	b.n	8005850 <memset+0x4>

0800585c <__cvt>:
 800585c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005860:	ec55 4b10 	vmov	r4, r5, d0
 8005864:	2d00      	cmp	r5, #0
 8005866:	460e      	mov	r6, r1
 8005868:	4619      	mov	r1, r3
 800586a:	462b      	mov	r3, r5
 800586c:	bfbb      	ittet	lt
 800586e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005872:	461d      	movlt	r5, r3
 8005874:	2300      	movge	r3, #0
 8005876:	232d      	movlt	r3, #45	; 0x2d
 8005878:	700b      	strb	r3, [r1, #0]
 800587a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800587c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005880:	4691      	mov	r9, r2
 8005882:	f023 0820 	bic.w	r8, r3, #32
 8005886:	bfbc      	itt	lt
 8005888:	4622      	movlt	r2, r4
 800588a:	4614      	movlt	r4, r2
 800588c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005890:	d005      	beq.n	800589e <__cvt+0x42>
 8005892:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005896:	d100      	bne.n	800589a <__cvt+0x3e>
 8005898:	3601      	adds	r6, #1
 800589a:	2102      	movs	r1, #2
 800589c:	e000      	b.n	80058a0 <__cvt+0x44>
 800589e:	2103      	movs	r1, #3
 80058a0:	ab03      	add	r3, sp, #12
 80058a2:	9301      	str	r3, [sp, #4]
 80058a4:	ab02      	add	r3, sp, #8
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	ec45 4b10 	vmov	d0, r4, r5
 80058ac:	4653      	mov	r3, sl
 80058ae:	4632      	mov	r2, r6
 80058b0:	f000 fce2 	bl	8006278 <_dtoa_r>
 80058b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80058b8:	4607      	mov	r7, r0
 80058ba:	d102      	bne.n	80058c2 <__cvt+0x66>
 80058bc:	f019 0f01 	tst.w	r9, #1
 80058c0:	d022      	beq.n	8005908 <__cvt+0xac>
 80058c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058c6:	eb07 0906 	add.w	r9, r7, r6
 80058ca:	d110      	bne.n	80058ee <__cvt+0x92>
 80058cc:	783b      	ldrb	r3, [r7, #0]
 80058ce:	2b30      	cmp	r3, #48	; 0x30
 80058d0:	d10a      	bne.n	80058e8 <__cvt+0x8c>
 80058d2:	2200      	movs	r2, #0
 80058d4:	2300      	movs	r3, #0
 80058d6:	4620      	mov	r0, r4
 80058d8:	4629      	mov	r1, r5
 80058da:	f7fb f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80058de:	b918      	cbnz	r0, 80058e8 <__cvt+0x8c>
 80058e0:	f1c6 0601 	rsb	r6, r6, #1
 80058e4:	f8ca 6000 	str.w	r6, [sl]
 80058e8:	f8da 3000 	ldr.w	r3, [sl]
 80058ec:	4499      	add	r9, r3
 80058ee:	2200      	movs	r2, #0
 80058f0:	2300      	movs	r3, #0
 80058f2:	4620      	mov	r0, r4
 80058f4:	4629      	mov	r1, r5
 80058f6:	f7fb f8e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80058fa:	b108      	cbz	r0, 8005900 <__cvt+0xa4>
 80058fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005900:	2230      	movs	r2, #48	; 0x30
 8005902:	9b03      	ldr	r3, [sp, #12]
 8005904:	454b      	cmp	r3, r9
 8005906:	d307      	bcc.n	8005918 <__cvt+0xbc>
 8005908:	9b03      	ldr	r3, [sp, #12]
 800590a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800590c:	1bdb      	subs	r3, r3, r7
 800590e:	4638      	mov	r0, r7
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	b004      	add	sp, #16
 8005914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005918:	1c59      	adds	r1, r3, #1
 800591a:	9103      	str	r1, [sp, #12]
 800591c:	701a      	strb	r2, [r3, #0]
 800591e:	e7f0      	b.n	8005902 <__cvt+0xa6>

08005920 <__exponent>:
 8005920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005922:	4603      	mov	r3, r0
 8005924:	2900      	cmp	r1, #0
 8005926:	bfb8      	it	lt
 8005928:	4249      	neglt	r1, r1
 800592a:	f803 2b02 	strb.w	r2, [r3], #2
 800592e:	bfb4      	ite	lt
 8005930:	222d      	movlt	r2, #45	; 0x2d
 8005932:	222b      	movge	r2, #43	; 0x2b
 8005934:	2909      	cmp	r1, #9
 8005936:	7042      	strb	r2, [r0, #1]
 8005938:	dd2a      	ble.n	8005990 <__exponent+0x70>
 800593a:	f10d 0407 	add.w	r4, sp, #7
 800593e:	46a4      	mov	ip, r4
 8005940:	270a      	movs	r7, #10
 8005942:	46a6      	mov	lr, r4
 8005944:	460a      	mov	r2, r1
 8005946:	fb91 f6f7 	sdiv	r6, r1, r7
 800594a:	fb07 1516 	mls	r5, r7, r6, r1
 800594e:	3530      	adds	r5, #48	; 0x30
 8005950:	2a63      	cmp	r2, #99	; 0x63
 8005952:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005956:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800595a:	4631      	mov	r1, r6
 800595c:	dcf1      	bgt.n	8005942 <__exponent+0x22>
 800595e:	3130      	adds	r1, #48	; 0x30
 8005960:	f1ae 0502 	sub.w	r5, lr, #2
 8005964:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005968:	1c44      	adds	r4, r0, #1
 800596a:	4629      	mov	r1, r5
 800596c:	4561      	cmp	r1, ip
 800596e:	d30a      	bcc.n	8005986 <__exponent+0x66>
 8005970:	f10d 0209 	add.w	r2, sp, #9
 8005974:	eba2 020e 	sub.w	r2, r2, lr
 8005978:	4565      	cmp	r5, ip
 800597a:	bf88      	it	hi
 800597c:	2200      	movhi	r2, #0
 800597e:	4413      	add	r3, r2
 8005980:	1a18      	subs	r0, r3, r0
 8005982:	b003      	add	sp, #12
 8005984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005986:	f811 2b01 	ldrb.w	r2, [r1], #1
 800598a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800598e:	e7ed      	b.n	800596c <__exponent+0x4c>
 8005990:	2330      	movs	r3, #48	; 0x30
 8005992:	3130      	adds	r1, #48	; 0x30
 8005994:	7083      	strb	r3, [r0, #2]
 8005996:	70c1      	strb	r1, [r0, #3]
 8005998:	1d03      	adds	r3, r0, #4
 800599a:	e7f1      	b.n	8005980 <__exponent+0x60>

0800599c <_printf_float>:
 800599c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a0:	ed2d 8b02 	vpush	{d8}
 80059a4:	b08d      	sub	sp, #52	; 0x34
 80059a6:	460c      	mov	r4, r1
 80059a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80059ac:	4616      	mov	r6, r2
 80059ae:	461f      	mov	r7, r3
 80059b0:	4605      	mov	r5, r0
 80059b2:	f001 fb45 	bl	8007040 <_localeconv_r>
 80059b6:	f8d0 a000 	ldr.w	sl, [r0]
 80059ba:	4650      	mov	r0, sl
 80059bc:	f7fa fc08 	bl	80001d0 <strlen>
 80059c0:	2300      	movs	r3, #0
 80059c2:	930a      	str	r3, [sp, #40]	; 0x28
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	9305      	str	r3, [sp, #20]
 80059c8:	f8d8 3000 	ldr.w	r3, [r8]
 80059cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80059d0:	3307      	adds	r3, #7
 80059d2:	f023 0307 	bic.w	r3, r3, #7
 80059d6:	f103 0208 	add.w	r2, r3, #8
 80059da:	f8c8 2000 	str.w	r2, [r8]
 80059de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80059e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80059ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80059ee:	9307      	str	r3, [sp, #28]
 80059f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80059f4:	ee08 0a10 	vmov	s16, r0
 80059f8:	4b9f      	ldr	r3, [pc, #636]	; (8005c78 <_printf_float+0x2dc>)
 80059fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a02:	f7fb f893 	bl	8000b2c <__aeabi_dcmpun>
 8005a06:	bb88      	cbnz	r0, 8005a6c <_printf_float+0xd0>
 8005a08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a0c:	4b9a      	ldr	r3, [pc, #616]	; (8005c78 <_printf_float+0x2dc>)
 8005a0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a12:	f7fb f86d 	bl	8000af0 <__aeabi_dcmple>
 8005a16:	bb48      	cbnz	r0, 8005a6c <_printf_float+0xd0>
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	4640      	mov	r0, r8
 8005a1e:	4649      	mov	r1, r9
 8005a20:	f7fb f85c 	bl	8000adc <__aeabi_dcmplt>
 8005a24:	b110      	cbz	r0, 8005a2c <_printf_float+0x90>
 8005a26:	232d      	movs	r3, #45	; 0x2d
 8005a28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a2c:	4b93      	ldr	r3, [pc, #588]	; (8005c7c <_printf_float+0x2e0>)
 8005a2e:	4894      	ldr	r0, [pc, #592]	; (8005c80 <_printf_float+0x2e4>)
 8005a30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a34:	bf94      	ite	ls
 8005a36:	4698      	movls	r8, r3
 8005a38:	4680      	movhi	r8, r0
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	6123      	str	r3, [r4, #16]
 8005a3e:	9b05      	ldr	r3, [sp, #20]
 8005a40:	f023 0204 	bic.w	r2, r3, #4
 8005a44:	6022      	str	r2, [r4, #0]
 8005a46:	f04f 0900 	mov.w	r9, #0
 8005a4a:	9700      	str	r7, [sp, #0]
 8005a4c:	4633      	mov	r3, r6
 8005a4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a50:	4621      	mov	r1, r4
 8005a52:	4628      	mov	r0, r5
 8005a54:	f000 f9d8 	bl	8005e08 <_printf_common>
 8005a58:	3001      	adds	r0, #1
 8005a5a:	f040 8090 	bne.w	8005b7e <_printf_float+0x1e2>
 8005a5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a62:	b00d      	add	sp, #52	; 0x34
 8005a64:	ecbd 8b02 	vpop	{d8}
 8005a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a6c:	4642      	mov	r2, r8
 8005a6e:	464b      	mov	r3, r9
 8005a70:	4640      	mov	r0, r8
 8005a72:	4649      	mov	r1, r9
 8005a74:	f7fb f85a 	bl	8000b2c <__aeabi_dcmpun>
 8005a78:	b140      	cbz	r0, 8005a8c <_printf_float+0xf0>
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	bfbc      	itt	lt
 8005a80:	232d      	movlt	r3, #45	; 0x2d
 8005a82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005a86:	487f      	ldr	r0, [pc, #508]	; (8005c84 <_printf_float+0x2e8>)
 8005a88:	4b7f      	ldr	r3, [pc, #508]	; (8005c88 <_printf_float+0x2ec>)
 8005a8a:	e7d1      	b.n	8005a30 <_printf_float+0x94>
 8005a8c:	6863      	ldr	r3, [r4, #4]
 8005a8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005a92:	9206      	str	r2, [sp, #24]
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	d13f      	bne.n	8005b18 <_printf_float+0x17c>
 8005a98:	2306      	movs	r3, #6
 8005a9a:	6063      	str	r3, [r4, #4]
 8005a9c:	9b05      	ldr	r3, [sp, #20]
 8005a9e:	6861      	ldr	r1, [r4, #4]
 8005aa0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	9303      	str	r3, [sp, #12]
 8005aa8:	ab0a      	add	r3, sp, #40	; 0x28
 8005aaa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005aae:	ab09      	add	r3, sp, #36	; 0x24
 8005ab0:	ec49 8b10 	vmov	d0, r8, r9
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	6022      	str	r2, [r4, #0]
 8005ab8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005abc:	4628      	mov	r0, r5
 8005abe:	f7ff fecd 	bl	800585c <__cvt>
 8005ac2:	9b06      	ldr	r3, [sp, #24]
 8005ac4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ac6:	2b47      	cmp	r3, #71	; 0x47
 8005ac8:	4680      	mov	r8, r0
 8005aca:	d108      	bne.n	8005ade <_printf_float+0x142>
 8005acc:	1cc8      	adds	r0, r1, #3
 8005ace:	db02      	blt.n	8005ad6 <_printf_float+0x13a>
 8005ad0:	6863      	ldr	r3, [r4, #4]
 8005ad2:	4299      	cmp	r1, r3
 8005ad4:	dd41      	ble.n	8005b5a <_printf_float+0x1be>
 8005ad6:	f1ab 0b02 	sub.w	fp, fp, #2
 8005ada:	fa5f fb8b 	uxtb.w	fp, fp
 8005ade:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ae2:	d820      	bhi.n	8005b26 <_printf_float+0x18a>
 8005ae4:	3901      	subs	r1, #1
 8005ae6:	465a      	mov	r2, fp
 8005ae8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005aec:	9109      	str	r1, [sp, #36]	; 0x24
 8005aee:	f7ff ff17 	bl	8005920 <__exponent>
 8005af2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005af4:	1813      	adds	r3, r2, r0
 8005af6:	2a01      	cmp	r2, #1
 8005af8:	4681      	mov	r9, r0
 8005afa:	6123      	str	r3, [r4, #16]
 8005afc:	dc02      	bgt.n	8005b04 <_printf_float+0x168>
 8005afe:	6822      	ldr	r2, [r4, #0]
 8005b00:	07d2      	lsls	r2, r2, #31
 8005b02:	d501      	bpl.n	8005b08 <_printf_float+0x16c>
 8005b04:	3301      	adds	r3, #1
 8005b06:	6123      	str	r3, [r4, #16]
 8005b08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d09c      	beq.n	8005a4a <_printf_float+0xae>
 8005b10:	232d      	movs	r3, #45	; 0x2d
 8005b12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b16:	e798      	b.n	8005a4a <_printf_float+0xae>
 8005b18:	9a06      	ldr	r2, [sp, #24]
 8005b1a:	2a47      	cmp	r2, #71	; 0x47
 8005b1c:	d1be      	bne.n	8005a9c <_printf_float+0x100>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1bc      	bne.n	8005a9c <_printf_float+0x100>
 8005b22:	2301      	movs	r3, #1
 8005b24:	e7b9      	b.n	8005a9a <_printf_float+0xfe>
 8005b26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b2a:	d118      	bne.n	8005b5e <_printf_float+0x1c2>
 8005b2c:	2900      	cmp	r1, #0
 8005b2e:	6863      	ldr	r3, [r4, #4]
 8005b30:	dd0b      	ble.n	8005b4a <_printf_float+0x1ae>
 8005b32:	6121      	str	r1, [r4, #16]
 8005b34:	b913      	cbnz	r3, 8005b3c <_printf_float+0x1a0>
 8005b36:	6822      	ldr	r2, [r4, #0]
 8005b38:	07d0      	lsls	r0, r2, #31
 8005b3a:	d502      	bpl.n	8005b42 <_printf_float+0x1a6>
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	440b      	add	r3, r1
 8005b40:	6123      	str	r3, [r4, #16]
 8005b42:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b44:	f04f 0900 	mov.w	r9, #0
 8005b48:	e7de      	b.n	8005b08 <_printf_float+0x16c>
 8005b4a:	b913      	cbnz	r3, 8005b52 <_printf_float+0x1b6>
 8005b4c:	6822      	ldr	r2, [r4, #0]
 8005b4e:	07d2      	lsls	r2, r2, #31
 8005b50:	d501      	bpl.n	8005b56 <_printf_float+0x1ba>
 8005b52:	3302      	adds	r3, #2
 8005b54:	e7f4      	b.n	8005b40 <_printf_float+0x1a4>
 8005b56:	2301      	movs	r3, #1
 8005b58:	e7f2      	b.n	8005b40 <_printf_float+0x1a4>
 8005b5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b60:	4299      	cmp	r1, r3
 8005b62:	db05      	blt.n	8005b70 <_printf_float+0x1d4>
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	6121      	str	r1, [r4, #16]
 8005b68:	07d8      	lsls	r0, r3, #31
 8005b6a:	d5ea      	bpl.n	8005b42 <_printf_float+0x1a6>
 8005b6c:	1c4b      	adds	r3, r1, #1
 8005b6e:	e7e7      	b.n	8005b40 <_printf_float+0x1a4>
 8005b70:	2900      	cmp	r1, #0
 8005b72:	bfd4      	ite	le
 8005b74:	f1c1 0202 	rsble	r2, r1, #2
 8005b78:	2201      	movgt	r2, #1
 8005b7a:	4413      	add	r3, r2
 8005b7c:	e7e0      	b.n	8005b40 <_printf_float+0x1a4>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	055a      	lsls	r2, r3, #21
 8005b82:	d407      	bmi.n	8005b94 <_printf_float+0x1f8>
 8005b84:	6923      	ldr	r3, [r4, #16]
 8005b86:	4642      	mov	r2, r8
 8005b88:	4631      	mov	r1, r6
 8005b8a:	4628      	mov	r0, r5
 8005b8c:	47b8      	blx	r7
 8005b8e:	3001      	adds	r0, #1
 8005b90:	d12c      	bne.n	8005bec <_printf_float+0x250>
 8005b92:	e764      	b.n	8005a5e <_printf_float+0xc2>
 8005b94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b98:	f240 80e0 	bls.w	8005d5c <_printf_float+0x3c0>
 8005b9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f7fa ff90 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	d034      	beq.n	8005c16 <_printf_float+0x27a>
 8005bac:	4a37      	ldr	r2, [pc, #220]	; (8005c8c <_printf_float+0x2f0>)
 8005bae:	2301      	movs	r3, #1
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	47b8      	blx	r7
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	f43f af51 	beq.w	8005a5e <_printf_float+0xc2>
 8005bbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	db02      	blt.n	8005bca <_printf_float+0x22e>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	07d8      	lsls	r0, r3, #31
 8005bc8:	d510      	bpl.n	8005bec <_printf_float+0x250>
 8005bca:	ee18 3a10 	vmov	r3, s16
 8005bce:	4652      	mov	r2, sl
 8005bd0:	4631      	mov	r1, r6
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	47b8      	blx	r7
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	f43f af41 	beq.w	8005a5e <_printf_float+0xc2>
 8005bdc:	f04f 0800 	mov.w	r8, #0
 8005be0:	f104 091a 	add.w	r9, r4, #26
 8005be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005be6:	3b01      	subs	r3, #1
 8005be8:	4543      	cmp	r3, r8
 8005bea:	dc09      	bgt.n	8005c00 <_printf_float+0x264>
 8005bec:	6823      	ldr	r3, [r4, #0]
 8005bee:	079b      	lsls	r3, r3, #30
 8005bf0:	f100 8105 	bmi.w	8005dfe <_printf_float+0x462>
 8005bf4:	68e0      	ldr	r0, [r4, #12]
 8005bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bf8:	4298      	cmp	r0, r3
 8005bfa:	bfb8      	it	lt
 8005bfc:	4618      	movlt	r0, r3
 8005bfe:	e730      	b.n	8005a62 <_printf_float+0xc6>
 8005c00:	2301      	movs	r3, #1
 8005c02:	464a      	mov	r2, r9
 8005c04:	4631      	mov	r1, r6
 8005c06:	4628      	mov	r0, r5
 8005c08:	47b8      	blx	r7
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	f43f af27 	beq.w	8005a5e <_printf_float+0xc2>
 8005c10:	f108 0801 	add.w	r8, r8, #1
 8005c14:	e7e6      	b.n	8005be4 <_printf_float+0x248>
 8005c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	dc39      	bgt.n	8005c90 <_printf_float+0x2f4>
 8005c1c:	4a1b      	ldr	r2, [pc, #108]	; (8005c8c <_printf_float+0x2f0>)
 8005c1e:	2301      	movs	r3, #1
 8005c20:	4631      	mov	r1, r6
 8005c22:	4628      	mov	r0, r5
 8005c24:	47b8      	blx	r7
 8005c26:	3001      	adds	r0, #1
 8005c28:	f43f af19 	beq.w	8005a5e <_printf_float+0xc2>
 8005c2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c30:	4313      	orrs	r3, r2
 8005c32:	d102      	bne.n	8005c3a <_printf_float+0x29e>
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	07d9      	lsls	r1, r3, #31
 8005c38:	d5d8      	bpl.n	8005bec <_printf_float+0x250>
 8005c3a:	ee18 3a10 	vmov	r3, s16
 8005c3e:	4652      	mov	r2, sl
 8005c40:	4631      	mov	r1, r6
 8005c42:	4628      	mov	r0, r5
 8005c44:	47b8      	blx	r7
 8005c46:	3001      	adds	r0, #1
 8005c48:	f43f af09 	beq.w	8005a5e <_printf_float+0xc2>
 8005c4c:	f04f 0900 	mov.w	r9, #0
 8005c50:	f104 0a1a 	add.w	sl, r4, #26
 8005c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c56:	425b      	negs	r3, r3
 8005c58:	454b      	cmp	r3, r9
 8005c5a:	dc01      	bgt.n	8005c60 <_printf_float+0x2c4>
 8005c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c5e:	e792      	b.n	8005b86 <_printf_float+0x1ea>
 8005c60:	2301      	movs	r3, #1
 8005c62:	4652      	mov	r2, sl
 8005c64:	4631      	mov	r1, r6
 8005c66:	4628      	mov	r0, r5
 8005c68:	47b8      	blx	r7
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	f43f aef7 	beq.w	8005a5e <_printf_float+0xc2>
 8005c70:	f109 0901 	add.w	r9, r9, #1
 8005c74:	e7ee      	b.n	8005c54 <_printf_float+0x2b8>
 8005c76:	bf00      	nop
 8005c78:	7fefffff 	.word	0x7fefffff
 8005c7c:	08008ac4 	.word	0x08008ac4
 8005c80:	08008ac8 	.word	0x08008ac8
 8005c84:	08008ad0 	.word	0x08008ad0
 8005c88:	08008acc 	.word	0x08008acc
 8005c8c:	08008ad4 	.word	0x08008ad4
 8005c90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c94:	429a      	cmp	r2, r3
 8005c96:	bfa8      	it	ge
 8005c98:	461a      	movge	r2, r3
 8005c9a:	2a00      	cmp	r2, #0
 8005c9c:	4691      	mov	r9, r2
 8005c9e:	dc37      	bgt.n	8005d10 <_printf_float+0x374>
 8005ca0:	f04f 0b00 	mov.w	fp, #0
 8005ca4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ca8:	f104 021a 	add.w	r2, r4, #26
 8005cac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cae:	9305      	str	r3, [sp, #20]
 8005cb0:	eba3 0309 	sub.w	r3, r3, r9
 8005cb4:	455b      	cmp	r3, fp
 8005cb6:	dc33      	bgt.n	8005d20 <_printf_float+0x384>
 8005cb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	db3b      	blt.n	8005d38 <_printf_float+0x39c>
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	07da      	lsls	r2, r3, #31
 8005cc4:	d438      	bmi.n	8005d38 <_printf_float+0x39c>
 8005cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cc8:	9a05      	ldr	r2, [sp, #20]
 8005cca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ccc:	1a9a      	subs	r2, r3, r2
 8005cce:	eba3 0901 	sub.w	r9, r3, r1
 8005cd2:	4591      	cmp	r9, r2
 8005cd4:	bfa8      	it	ge
 8005cd6:	4691      	movge	r9, r2
 8005cd8:	f1b9 0f00 	cmp.w	r9, #0
 8005cdc:	dc35      	bgt.n	8005d4a <_printf_float+0x3ae>
 8005cde:	f04f 0800 	mov.w	r8, #0
 8005ce2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ce6:	f104 0a1a 	add.w	sl, r4, #26
 8005cea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cee:	1a9b      	subs	r3, r3, r2
 8005cf0:	eba3 0309 	sub.w	r3, r3, r9
 8005cf4:	4543      	cmp	r3, r8
 8005cf6:	f77f af79 	ble.w	8005bec <_printf_float+0x250>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4652      	mov	r2, sl
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4628      	mov	r0, r5
 8005d02:	47b8      	blx	r7
 8005d04:	3001      	adds	r0, #1
 8005d06:	f43f aeaa 	beq.w	8005a5e <_printf_float+0xc2>
 8005d0a:	f108 0801 	add.w	r8, r8, #1
 8005d0e:	e7ec      	b.n	8005cea <_printf_float+0x34e>
 8005d10:	4613      	mov	r3, r2
 8005d12:	4631      	mov	r1, r6
 8005d14:	4642      	mov	r2, r8
 8005d16:	4628      	mov	r0, r5
 8005d18:	47b8      	blx	r7
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	d1c0      	bne.n	8005ca0 <_printf_float+0x304>
 8005d1e:	e69e      	b.n	8005a5e <_printf_float+0xc2>
 8005d20:	2301      	movs	r3, #1
 8005d22:	4631      	mov	r1, r6
 8005d24:	4628      	mov	r0, r5
 8005d26:	9205      	str	r2, [sp, #20]
 8005d28:	47b8      	blx	r7
 8005d2a:	3001      	adds	r0, #1
 8005d2c:	f43f ae97 	beq.w	8005a5e <_printf_float+0xc2>
 8005d30:	9a05      	ldr	r2, [sp, #20]
 8005d32:	f10b 0b01 	add.w	fp, fp, #1
 8005d36:	e7b9      	b.n	8005cac <_printf_float+0x310>
 8005d38:	ee18 3a10 	vmov	r3, s16
 8005d3c:	4652      	mov	r2, sl
 8005d3e:	4631      	mov	r1, r6
 8005d40:	4628      	mov	r0, r5
 8005d42:	47b8      	blx	r7
 8005d44:	3001      	adds	r0, #1
 8005d46:	d1be      	bne.n	8005cc6 <_printf_float+0x32a>
 8005d48:	e689      	b.n	8005a5e <_printf_float+0xc2>
 8005d4a:	9a05      	ldr	r2, [sp, #20]
 8005d4c:	464b      	mov	r3, r9
 8005d4e:	4442      	add	r2, r8
 8005d50:	4631      	mov	r1, r6
 8005d52:	4628      	mov	r0, r5
 8005d54:	47b8      	blx	r7
 8005d56:	3001      	adds	r0, #1
 8005d58:	d1c1      	bne.n	8005cde <_printf_float+0x342>
 8005d5a:	e680      	b.n	8005a5e <_printf_float+0xc2>
 8005d5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d5e:	2a01      	cmp	r2, #1
 8005d60:	dc01      	bgt.n	8005d66 <_printf_float+0x3ca>
 8005d62:	07db      	lsls	r3, r3, #31
 8005d64:	d538      	bpl.n	8005dd8 <_printf_float+0x43c>
 8005d66:	2301      	movs	r3, #1
 8005d68:	4642      	mov	r2, r8
 8005d6a:	4631      	mov	r1, r6
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	47b8      	blx	r7
 8005d70:	3001      	adds	r0, #1
 8005d72:	f43f ae74 	beq.w	8005a5e <_printf_float+0xc2>
 8005d76:	ee18 3a10 	vmov	r3, s16
 8005d7a:	4652      	mov	r2, sl
 8005d7c:	4631      	mov	r1, r6
 8005d7e:	4628      	mov	r0, r5
 8005d80:	47b8      	blx	r7
 8005d82:	3001      	adds	r0, #1
 8005d84:	f43f ae6b 	beq.w	8005a5e <_printf_float+0xc2>
 8005d88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f7fa fe9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d94:	b9d8      	cbnz	r0, 8005dce <_printf_float+0x432>
 8005d96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d98:	f108 0201 	add.w	r2, r8, #1
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	4631      	mov	r1, r6
 8005da0:	4628      	mov	r0, r5
 8005da2:	47b8      	blx	r7
 8005da4:	3001      	adds	r0, #1
 8005da6:	d10e      	bne.n	8005dc6 <_printf_float+0x42a>
 8005da8:	e659      	b.n	8005a5e <_printf_float+0xc2>
 8005daa:	2301      	movs	r3, #1
 8005dac:	4652      	mov	r2, sl
 8005dae:	4631      	mov	r1, r6
 8005db0:	4628      	mov	r0, r5
 8005db2:	47b8      	blx	r7
 8005db4:	3001      	adds	r0, #1
 8005db6:	f43f ae52 	beq.w	8005a5e <_printf_float+0xc2>
 8005dba:	f108 0801 	add.w	r8, r8, #1
 8005dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	4543      	cmp	r3, r8
 8005dc4:	dcf1      	bgt.n	8005daa <_printf_float+0x40e>
 8005dc6:	464b      	mov	r3, r9
 8005dc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005dcc:	e6dc      	b.n	8005b88 <_printf_float+0x1ec>
 8005dce:	f04f 0800 	mov.w	r8, #0
 8005dd2:	f104 0a1a 	add.w	sl, r4, #26
 8005dd6:	e7f2      	b.n	8005dbe <_printf_float+0x422>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	4642      	mov	r2, r8
 8005ddc:	e7df      	b.n	8005d9e <_printf_float+0x402>
 8005dde:	2301      	movs	r3, #1
 8005de0:	464a      	mov	r2, r9
 8005de2:	4631      	mov	r1, r6
 8005de4:	4628      	mov	r0, r5
 8005de6:	47b8      	blx	r7
 8005de8:	3001      	adds	r0, #1
 8005dea:	f43f ae38 	beq.w	8005a5e <_printf_float+0xc2>
 8005dee:	f108 0801 	add.w	r8, r8, #1
 8005df2:	68e3      	ldr	r3, [r4, #12]
 8005df4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005df6:	1a5b      	subs	r3, r3, r1
 8005df8:	4543      	cmp	r3, r8
 8005dfa:	dcf0      	bgt.n	8005dde <_printf_float+0x442>
 8005dfc:	e6fa      	b.n	8005bf4 <_printf_float+0x258>
 8005dfe:	f04f 0800 	mov.w	r8, #0
 8005e02:	f104 0919 	add.w	r9, r4, #25
 8005e06:	e7f4      	b.n	8005df2 <_printf_float+0x456>

08005e08 <_printf_common>:
 8005e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e0c:	4616      	mov	r6, r2
 8005e0e:	4699      	mov	r9, r3
 8005e10:	688a      	ldr	r2, [r1, #8]
 8005e12:	690b      	ldr	r3, [r1, #16]
 8005e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	bfb8      	it	lt
 8005e1c:	4613      	movlt	r3, r2
 8005e1e:	6033      	str	r3, [r6, #0]
 8005e20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e24:	4607      	mov	r7, r0
 8005e26:	460c      	mov	r4, r1
 8005e28:	b10a      	cbz	r2, 8005e2e <_printf_common+0x26>
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	6033      	str	r3, [r6, #0]
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	0699      	lsls	r1, r3, #26
 8005e32:	bf42      	ittt	mi
 8005e34:	6833      	ldrmi	r3, [r6, #0]
 8005e36:	3302      	addmi	r3, #2
 8005e38:	6033      	strmi	r3, [r6, #0]
 8005e3a:	6825      	ldr	r5, [r4, #0]
 8005e3c:	f015 0506 	ands.w	r5, r5, #6
 8005e40:	d106      	bne.n	8005e50 <_printf_common+0x48>
 8005e42:	f104 0a19 	add.w	sl, r4, #25
 8005e46:	68e3      	ldr	r3, [r4, #12]
 8005e48:	6832      	ldr	r2, [r6, #0]
 8005e4a:	1a9b      	subs	r3, r3, r2
 8005e4c:	42ab      	cmp	r3, r5
 8005e4e:	dc26      	bgt.n	8005e9e <_printf_common+0x96>
 8005e50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e54:	1e13      	subs	r3, r2, #0
 8005e56:	6822      	ldr	r2, [r4, #0]
 8005e58:	bf18      	it	ne
 8005e5a:	2301      	movne	r3, #1
 8005e5c:	0692      	lsls	r2, r2, #26
 8005e5e:	d42b      	bmi.n	8005eb8 <_printf_common+0xb0>
 8005e60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e64:	4649      	mov	r1, r9
 8005e66:	4638      	mov	r0, r7
 8005e68:	47c0      	blx	r8
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	d01e      	beq.n	8005eac <_printf_common+0xa4>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	68e5      	ldr	r5, [r4, #12]
 8005e72:	6832      	ldr	r2, [r6, #0]
 8005e74:	f003 0306 	and.w	r3, r3, #6
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	bf08      	it	eq
 8005e7c:	1aad      	subeq	r5, r5, r2
 8005e7e:	68a3      	ldr	r3, [r4, #8]
 8005e80:	6922      	ldr	r2, [r4, #16]
 8005e82:	bf0c      	ite	eq
 8005e84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e88:	2500      	movne	r5, #0
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	bfc4      	itt	gt
 8005e8e:	1a9b      	subgt	r3, r3, r2
 8005e90:	18ed      	addgt	r5, r5, r3
 8005e92:	2600      	movs	r6, #0
 8005e94:	341a      	adds	r4, #26
 8005e96:	42b5      	cmp	r5, r6
 8005e98:	d11a      	bne.n	8005ed0 <_printf_common+0xc8>
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	e008      	b.n	8005eb0 <_printf_common+0xa8>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	4652      	mov	r2, sl
 8005ea2:	4649      	mov	r1, r9
 8005ea4:	4638      	mov	r0, r7
 8005ea6:	47c0      	blx	r8
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	d103      	bne.n	8005eb4 <_printf_common+0xac>
 8005eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb4:	3501      	adds	r5, #1
 8005eb6:	e7c6      	b.n	8005e46 <_printf_common+0x3e>
 8005eb8:	18e1      	adds	r1, r4, r3
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	2030      	movs	r0, #48	; 0x30
 8005ebe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ec2:	4422      	add	r2, r4
 8005ec4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ec8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ecc:	3302      	adds	r3, #2
 8005ece:	e7c7      	b.n	8005e60 <_printf_common+0x58>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	4622      	mov	r2, r4
 8005ed4:	4649      	mov	r1, r9
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	47c0      	blx	r8
 8005eda:	3001      	adds	r0, #1
 8005edc:	d0e6      	beq.n	8005eac <_printf_common+0xa4>
 8005ede:	3601      	adds	r6, #1
 8005ee0:	e7d9      	b.n	8005e96 <_printf_common+0x8e>
	...

08005ee4 <_printf_i>:
 8005ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee8:	7e0f      	ldrb	r7, [r1, #24]
 8005eea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005eec:	2f78      	cmp	r7, #120	; 0x78
 8005eee:	4691      	mov	r9, r2
 8005ef0:	4680      	mov	r8, r0
 8005ef2:	460c      	mov	r4, r1
 8005ef4:	469a      	mov	sl, r3
 8005ef6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005efa:	d807      	bhi.n	8005f0c <_printf_i+0x28>
 8005efc:	2f62      	cmp	r7, #98	; 0x62
 8005efe:	d80a      	bhi.n	8005f16 <_printf_i+0x32>
 8005f00:	2f00      	cmp	r7, #0
 8005f02:	f000 80d8 	beq.w	80060b6 <_printf_i+0x1d2>
 8005f06:	2f58      	cmp	r7, #88	; 0x58
 8005f08:	f000 80a3 	beq.w	8006052 <_printf_i+0x16e>
 8005f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f14:	e03a      	b.n	8005f8c <_printf_i+0xa8>
 8005f16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f1a:	2b15      	cmp	r3, #21
 8005f1c:	d8f6      	bhi.n	8005f0c <_printf_i+0x28>
 8005f1e:	a101      	add	r1, pc, #4	; (adr r1, 8005f24 <_printf_i+0x40>)
 8005f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f24:	08005f7d 	.word	0x08005f7d
 8005f28:	08005f91 	.word	0x08005f91
 8005f2c:	08005f0d 	.word	0x08005f0d
 8005f30:	08005f0d 	.word	0x08005f0d
 8005f34:	08005f0d 	.word	0x08005f0d
 8005f38:	08005f0d 	.word	0x08005f0d
 8005f3c:	08005f91 	.word	0x08005f91
 8005f40:	08005f0d 	.word	0x08005f0d
 8005f44:	08005f0d 	.word	0x08005f0d
 8005f48:	08005f0d 	.word	0x08005f0d
 8005f4c:	08005f0d 	.word	0x08005f0d
 8005f50:	0800609d 	.word	0x0800609d
 8005f54:	08005fc1 	.word	0x08005fc1
 8005f58:	0800607f 	.word	0x0800607f
 8005f5c:	08005f0d 	.word	0x08005f0d
 8005f60:	08005f0d 	.word	0x08005f0d
 8005f64:	080060bf 	.word	0x080060bf
 8005f68:	08005f0d 	.word	0x08005f0d
 8005f6c:	08005fc1 	.word	0x08005fc1
 8005f70:	08005f0d 	.word	0x08005f0d
 8005f74:	08005f0d 	.word	0x08005f0d
 8005f78:	08006087 	.word	0x08006087
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	1d1a      	adds	r2, r3, #4
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	602a      	str	r2, [r5, #0]
 8005f84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e0a3      	b.n	80060d8 <_printf_i+0x1f4>
 8005f90:	6820      	ldr	r0, [r4, #0]
 8005f92:	6829      	ldr	r1, [r5, #0]
 8005f94:	0606      	lsls	r6, r0, #24
 8005f96:	f101 0304 	add.w	r3, r1, #4
 8005f9a:	d50a      	bpl.n	8005fb2 <_printf_i+0xce>
 8005f9c:	680e      	ldr	r6, [r1, #0]
 8005f9e:	602b      	str	r3, [r5, #0]
 8005fa0:	2e00      	cmp	r6, #0
 8005fa2:	da03      	bge.n	8005fac <_printf_i+0xc8>
 8005fa4:	232d      	movs	r3, #45	; 0x2d
 8005fa6:	4276      	negs	r6, r6
 8005fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fac:	485e      	ldr	r0, [pc, #376]	; (8006128 <_printf_i+0x244>)
 8005fae:	230a      	movs	r3, #10
 8005fb0:	e019      	b.n	8005fe6 <_printf_i+0x102>
 8005fb2:	680e      	ldr	r6, [r1, #0]
 8005fb4:	602b      	str	r3, [r5, #0]
 8005fb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fba:	bf18      	it	ne
 8005fbc:	b236      	sxthne	r6, r6
 8005fbe:	e7ef      	b.n	8005fa0 <_printf_i+0xbc>
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	6820      	ldr	r0, [r4, #0]
 8005fc4:	1d19      	adds	r1, r3, #4
 8005fc6:	6029      	str	r1, [r5, #0]
 8005fc8:	0601      	lsls	r1, r0, #24
 8005fca:	d501      	bpl.n	8005fd0 <_printf_i+0xec>
 8005fcc:	681e      	ldr	r6, [r3, #0]
 8005fce:	e002      	b.n	8005fd6 <_printf_i+0xf2>
 8005fd0:	0646      	lsls	r6, r0, #25
 8005fd2:	d5fb      	bpl.n	8005fcc <_printf_i+0xe8>
 8005fd4:	881e      	ldrh	r6, [r3, #0]
 8005fd6:	4854      	ldr	r0, [pc, #336]	; (8006128 <_printf_i+0x244>)
 8005fd8:	2f6f      	cmp	r7, #111	; 0x6f
 8005fda:	bf0c      	ite	eq
 8005fdc:	2308      	moveq	r3, #8
 8005fde:	230a      	movne	r3, #10
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fe6:	6865      	ldr	r5, [r4, #4]
 8005fe8:	60a5      	str	r5, [r4, #8]
 8005fea:	2d00      	cmp	r5, #0
 8005fec:	bfa2      	ittt	ge
 8005fee:	6821      	ldrge	r1, [r4, #0]
 8005ff0:	f021 0104 	bicge.w	r1, r1, #4
 8005ff4:	6021      	strge	r1, [r4, #0]
 8005ff6:	b90e      	cbnz	r6, 8005ffc <_printf_i+0x118>
 8005ff8:	2d00      	cmp	r5, #0
 8005ffa:	d04d      	beq.n	8006098 <_printf_i+0x1b4>
 8005ffc:	4615      	mov	r5, r2
 8005ffe:	fbb6 f1f3 	udiv	r1, r6, r3
 8006002:	fb03 6711 	mls	r7, r3, r1, r6
 8006006:	5dc7      	ldrb	r7, [r0, r7]
 8006008:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800600c:	4637      	mov	r7, r6
 800600e:	42bb      	cmp	r3, r7
 8006010:	460e      	mov	r6, r1
 8006012:	d9f4      	bls.n	8005ffe <_printf_i+0x11a>
 8006014:	2b08      	cmp	r3, #8
 8006016:	d10b      	bne.n	8006030 <_printf_i+0x14c>
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	07de      	lsls	r6, r3, #31
 800601c:	d508      	bpl.n	8006030 <_printf_i+0x14c>
 800601e:	6923      	ldr	r3, [r4, #16]
 8006020:	6861      	ldr	r1, [r4, #4]
 8006022:	4299      	cmp	r1, r3
 8006024:	bfde      	ittt	le
 8006026:	2330      	movle	r3, #48	; 0x30
 8006028:	f805 3c01 	strble.w	r3, [r5, #-1]
 800602c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006030:	1b52      	subs	r2, r2, r5
 8006032:	6122      	str	r2, [r4, #16]
 8006034:	f8cd a000 	str.w	sl, [sp]
 8006038:	464b      	mov	r3, r9
 800603a:	aa03      	add	r2, sp, #12
 800603c:	4621      	mov	r1, r4
 800603e:	4640      	mov	r0, r8
 8006040:	f7ff fee2 	bl	8005e08 <_printf_common>
 8006044:	3001      	adds	r0, #1
 8006046:	d14c      	bne.n	80060e2 <_printf_i+0x1fe>
 8006048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800604c:	b004      	add	sp, #16
 800604e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006052:	4835      	ldr	r0, [pc, #212]	; (8006128 <_printf_i+0x244>)
 8006054:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006058:	6829      	ldr	r1, [r5, #0]
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006060:	6029      	str	r1, [r5, #0]
 8006062:	061d      	lsls	r5, r3, #24
 8006064:	d514      	bpl.n	8006090 <_printf_i+0x1ac>
 8006066:	07df      	lsls	r7, r3, #31
 8006068:	bf44      	itt	mi
 800606a:	f043 0320 	orrmi.w	r3, r3, #32
 800606e:	6023      	strmi	r3, [r4, #0]
 8006070:	b91e      	cbnz	r6, 800607a <_printf_i+0x196>
 8006072:	6823      	ldr	r3, [r4, #0]
 8006074:	f023 0320 	bic.w	r3, r3, #32
 8006078:	6023      	str	r3, [r4, #0]
 800607a:	2310      	movs	r3, #16
 800607c:	e7b0      	b.n	8005fe0 <_printf_i+0xfc>
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	f043 0320 	orr.w	r3, r3, #32
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	2378      	movs	r3, #120	; 0x78
 8006088:	4828      	ldr	r0, [pc, #160]	; (800612c <_printf_i+0x248>)
 800608a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800608e:	e7e3      	b.n	8006058 <_printf_i+0x174>
 8006090:	0659      	lsls	r1, r3, #25
 8006092:	bf48      	it	mi
 8006094:	b2b6      	uxthmi	r6, r6
 8006096:	e7e6      	b.n	8006066 <_printf_i+0x182>
 8006098:	4615      	mov	r5, r2
 800609a:	e7bb      	b.n	8006014 <_printf_i+0x130>
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	6826      	ldr	r6, [r4, #0]
 80060a0:	6961      	ldr	r1, [r4, #20]
 80060a2:	1d18      	adds	r0, r3, #4
 80060a4:	6028      	str	r0, [r5, #0]
 80060a6:	0635      	lsls	r5, r6, #24
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	d501      	bpl.n	80060b0 <_printf_i+0x1cc>
 80060ac:	6019      	str	r1, [r3, #0]
 80060ae:	e002      	b.n	80060b6 <_printf_i+0x1d2>
 80060b0:	0670      	lsls	r0, r6, #25
 80060b2:	d5fb      	bpl.n	80060ac <_printf_i+0x1c8>
 80060b4:	8019      	strh	r1, [r3, #0]
 80060b6:	2300      	movs	r3, #0
 80060b8:	6123      	str	r3, [r4, #16]
 80060ba:	4615      	mov	r5, r2
 80060bc:	e7ba      	b.n	8006034 <_printf_i+0x150>
 80060be:	682b      	ldr	r3, [r5, #0]
 80060c0:	1d1a      	adds	r2, r3, #4
 80060c2:	602a      	str	r2, [r5, #0]
 80060c4:	681d      	ldr	r5, [r3, #0]
 80060c6:	6862      	ldr	r2, [r4, #4]
 80060c8:	2100      	movs	r1, #0
 80060ca:	4628      	mov	r0, r5
 80060cc:	f7fa f888 	bl	80001e0 <memchr>
 80060d0:	b108      	cbz	r0, 80060d6 <_printf_i+0x1f2>
 80060d2:	1b40      	subs	r0, r0, r5
 80060d4:	6060      	str	r0, [r4, #4]
 80060d6:	6863      	ldr	r3, [r4, #4]
 80060d8:	6123      	str	r3, [r4, #16]
 80060da:	2300      	movs	r3, #0
 80060dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060e0:	e7a8      	b.n	8006034 <_printf_i+0x150>
 80060e2:	6923      	ldr	r3, [r4, #16]
 80060e4:	462a      	mov	r2, r5
 80060e6:	4649      	mov	r1, r9
 80060e8:	4640      	mov	r0, r8
 80060ea:	47d0      	blx	sl
 80060ec:	3001      	adds	r0, #1
 80060ee:	d0ab      	beq.n	8006048 <_printf_i+0x164>
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	079b      	lsls	r3, r3, #30
 80060f4:	d413      	bmi.n	800611e <_printf_i+0x23a>
 80060f6:	68e0      	ldr	r0, [r4, #12]
 80060f8:	9b03      	ldr	r3, [sp, #12]
 80060fa:	4298      	cmp	r0, r3
 80060fc:	bfb8      	it	lt
 80060fe:	4618      	movlt	r0, r3
 8006100:	e7a4      	b.n	800604c <_printf_i+0x168>
 8006102:	2301      	movs	r3, #1
 8006104:	4632      	mov	r2, r6
 8006106:	4649      	mov	r1, r9
 8006108:	4640      	mov	r0, r8
 800610a:	47d0      	blx	sl
 800610c:	3001      	adds	r0, #1
 800610e:	d09b      	beq.n	8006048 <_printf_i+0x164>
 8006110:	3501      	adds	r5, #1
 8006112:	68e3      	ldr	r3, [r4, #12]
 8006114:	9903      	ldr	r1, [sp, #12]
 8006116:	1a5b      	subs	r3, r3, r1
 8006118:	42ab      	cmp	r3, r5
 800611a:	dcf2      	bgt.n	8006102 <_printf_i+0x21e>
 800611c:	e7eb      	b.n	80060f6 <_printf_i+0x212>
 800611e:	2500      	movs	r5, #0
 8006120:	f104 0619 	add.w	r6, r4, #25
 8006124:	e7f5      	b.n	8006112 <_printf_i+0x22e>
 8006126:	bf00      	nop
 8006128:	08008ad6 	.word	0x08008ad6
 800612c:	08008ae7 	.word	0x08008ae7

08006130 <iprintf>:
 8006130:	b40f      	push	{r0, r1, r2, r3}
 8006132:	4b0a      	ldr	r3, [pc, #40]	; (800615c <iprintf+0x2c>)
 8006134:	b513      	push	{r0, r1, r4, lr}
 8006136:	681c      	ldr	r4, [r3, #0]
 8006138:	b124      	cbz	r4, 8006144 <iprintf+0x14>
 800613a:	69a3      	ldr	r3, [r4, #24]
 800613c:	b913      	cbnz	r3, 8006144 <iprintf+0x14>
 800613e:	4620      	mov	r0, r4
 8006140:	f000 fee0 	bl	8006f04 <__sinit>
 8006144:	ab05      	add	r3, sp, #20
 8006146:	9a04      	ldr	r2, [sp, #16]
 8006148:	68a1      	ldr	r1, [r4, #8]
 800614a:	9301      	str	r3, [sp, #4]
 800614c:	4620      	mov	r0, r4
 800614e:	f001 fc2b 	bl	80079a8 <_vfiprintf_r>
 8006152:	b002      	add	sp, #8
 8006154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006158:	b004      	add	sp, #16
 800615a:	4770      	bx	lr
 800615c:	20000018 	.word	0x20000018

08006160 <quorem>:
 8006160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006164:	6903      	ldr	r3, [r0, #16]
 8006166:	690c      	ldr	r4, [r1, #16]
 8006168:	42a3      	cmp	r3, r4
 800616a:	4607      	mov	r7, r0
 800616c:	f2c0 8081 	blt.w	8006272 <quorem+0x112>
 8006170:	3c01      	subs	r4, #1
 8006172:	f101 0814 	add.w	r8, r1, #20
 8006176:	f100 0514 	add.w	r5, r0, #20
 800617a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800617e:	9301      	str	r3, [sp, #4]
 8006180:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006184:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006188:	3301      	adds	r3, #1
 800618a:	429a      	cmp	r2, r3
 800618c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006190:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006194:	fbb2 f6f3 	udiv	r6, r2, r3
 8006198:	d331      	bcc.n	80061fe <quorem+0x9e>
 800619a:	f04f 0e00 	mov.w	lr, #0
 800619e:	4640      	mov	r0, r8
 80061a0:	46ac      	mov	ip, r5
 80061a2:	46f2      	mov	sl, lr
 80061a4:	f850 2b04 	ldr.w	r2, [r0], #4
 80061a8:	b293      	uxth	r3, r2
 80061aa:	fb06 e303 	mla	r3, r6, r3, lr
 80061ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	ebaa 0303 	sub.w	r3, sl, r3
 80061b8:	f8dc a000 	ldr.w	sl, [ip]
 80061bc:	0c12      	lsrs	r2, r2, #16
 80061be:	fa13 f38a 	uxtah	r3, r3, sl
 80061c2:	fb06 e202 	mla	r2, r6, r2, lr
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	9b00      	ldr	r3, [sp, #0]
 80061ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80061ce:	b292      	uxth	r2, r2
 80061d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80061d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80061d8:	f8bd 3000 	ldrh.w	r3, [sp]
 80061dc:	4581      	cmp	r9, r0
 80061de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061e2:	f84c 3b04 	str.w	r3, [ip], #4
 80061e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80061ea:	d2db      	bcs.n	80061a4 <quorem+0x44>
 80061ec:	f855 300b 	ldr.w	r3, [r5, fp]
 80061f0:	b92b      	cbnz	r3, 80061fe <quorem+0x9e>
 80061f2:	9b01      	ldr	r3, [sp, #4]
 80061f4:	3b04      	subs	r3, #4
 80061f6:	429d      	cmp	r5, r3
 80061f8:	461a      	mov	r2, r3
 80061fa:	d32e      	bcc.n	800625a <quorem+0xfa>
 80061fc:	613c      	str	r4, [r7, #16]
 80061fe:	4638      	mov	r0, r7
 8006200:	f001 f9b0 	bl	8007564 <__mcmp>
 8006204:	2800      	cmp	r0, #0
 8006206:	db24      	blt.n	8006252 <quorem+0xf2>
 8006208:	3601      	adds	r6, #1
 800620a:	4628      	mov	r0, r5
 800620c:	f04f 0c00 	mov.w	ip, #0
 8006210:	f858 2b04 	ldr.w	r2, [r8], #4
 8006214:	f8d0 e000 	ldr.w	lr, [r0]
 8006218:	b293      	uxth	r3, r2
 800621a:	ebac 0303 	sub.w	r3, ip, r3
 800621e:	0c12      	lsrs	r2, r2, #16
 8006220:	fa13 f38e 	uxtah	r3, r3, lr
 8006224:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006228:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800622c:	b29b      	uxth	r3, r3
 800622e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006232:	45c1      	cmp	r9, r8
 8006234:	f840 3b04 	str.w	r3, [r0], #4
 8006238:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800623c:	d2e8      	bcs.n	8006210 <quorem+0xb0>
 800623e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006242:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006246:	b922      	cbnz	r2, 8006252 <quorem+0xf2>
 8006248:	3b04      	subs	r3, #4
 800624a:	429d      	cmp	r5, r3
 800624c:	461a      	mov	r2, r3
 800624e:	d30a      	bcc.n	8006266 <quorem+0x106>
 8006250:	613c      	str	r4, [r7, #16]
 8006252:	4630      	mov	r0, r6
 8006254:	b003      	add	sp, #12
 8006256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800625a:	6812      	ldr	r2, [r2, #0]
 800625c:	3b04      	subs	r3, #4
 800625e:	2a00      	cmp	r2, #0
 8006260:	d1cc      	bne.n	80061fc <quorem+0x9c>
 8006262:	3c01      	subs	r4, #1
 8006264:	e7c7      	b.n	80061f6 <quorem+0x96>
 8006266:	6812      	ldr	r2, [r2, #0]
 8006268:	3b04      	subs	r3, #4
 800626a:	2a00      	cmp	r2, #0
 800626c:	d1f0      	bne.n	8006250 <quorem+0xf0>
 800626e:	3c01      	subs	r4, #1
 8006270:	e7eb      	b.n	800624a <quorem+0xea>
 8006272:	2000      	movs	r0, #0
 8006274:	e7ee      	b.n	8006254 <quorem+0xf4>
	...

08006278 <_dtoa_r>:
 8006278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627c:	ed2d 8b04 	vpush	{d8-d9}
 8006280:	ec57 6b10 	vmov	r6, r7, d0
 8006284:	b093      	sub	sp, #76	; 0x4c
 8006286:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006288:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800628c:	9106      	str	r1, [sp, #24]
 800628e:	ee10 aa10 	vmov	sl, s0
 8006292:	4604      	mov	r4, r0
 8006294:	9209      	str	r2, [sp, #36]	; 0x24
 8006296:	930c      	str	r3, [sp, #48]	; 0x30
 8006298:	46bb      	mov	fp, r7
 800629a:	b975      	cbnz	r5, 80062ba <_dtoa_r+0x42>
 800629c:	2010      	movs	r0, #16
 800629e:	f000 fed7 	bl	8007050 <malloc>
 80062a2:	4602      	mov	r2, r0
 80062a4:	6260      	str	r0, [r4, #36]	; 0x24
 80062a6:	b920      	cbnz	r0, 80062b2 <_dtoa_r+0x3a>
 80062a8:	4ba7      	ldr	r3, [pc, #668]	; (8006548 <_dtoa_r+0x2d0>)
 80062aa:	21ea      	movs	r1, #234	; 0xea
 80062ac:	48a7      	ldr	r0, [pc, #668]	; (800654c <_dtoa_r+0x2d4>)
 80062ae:	f001 fdd1 	bl	8007e54 <__assert_func>
 80062b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80062b6:	6005      	str	r5, [r0, #0]
 80062b8:	60c5      	str	r5, [r0, #12]
 80062ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062bc:	6819      	ldr	r1, [r3, #0]
 80062be:	b151      	cbz	r1, 80062d6 <_dtoa_r+0x5e>
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	604a      	str	r2, [r1, #4]
 80062c4:	2301      	movs	r3, #1
 80062c6:	4093      	lsls	r3, r2
 80062c8:	608b      	str	r3, [r1, #8]
 80062ca:	4620      	mov	r0, r4
 80062cc:	f000 ff08 	bl	80070e0 <_Bfree>
 80062d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	1e3b      	subs	r3, r7, #0
 80062d8:	bfaa      	itet	ge
 80062da:	2300      	movge	r3, #0
 80062dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80062e0:	f8c8 3000 	strge.w	r3, [r8]
 80062e4:	4b9a      	ldr	r3, [pc, #616]	; (8006550 <_dtoa_r+0x2d8>)
 80062e6:	bfbc      	itt	lt
 80062e8:	2201      	movlt	r2, #1
 80062ea:	f8c8 2000 	strlt.w	r2, [r8]
 80062ee:	ea33 030b 	bics.w	r3, r3, fp
 80062f2:	d11b      	bne.n	800632c <_dtoa_r+0xb4>
 80062f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006300:	4333      	orrs	r3, r6
 8006302:	f000 8592 	beq.w	8006e2a <_dtoa_r+0xbb2>
 8006306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006308:	b963      	cbnz	r3, 8006324 <_dtoa_r+0xac>
 800630a:	4b92      	ldr	r3, [pc, #584]	; (8006554 <_dtoa_r+0x2dc>)
 800630c:	e022      	b.n	8006354 <_dtoa_r+0xdc>
 800630e:	4b92      	ldr	r3, [pc, #584]	; (8006558 <_dtoa_r+0x2e0>)
 8006310:	9301      	str	r3, [sp, #4]
 8006312:	3308      	adds	r3, #8
 8006314:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006316:	6013      	str	r3, [r2, #0]
 8006318:	9801      	ldr	r0, [sp, #4]
 800631a:	b013      	add	sp, #76	; 0x4c
 800631c:	ecbd 8b04 	vpop	{d8-d9}
 8006320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006324:	4b8b      	ldr	r3, [pc, #556]	; (8006554 <_dtoa_r+0x2dc>)
 8006326:	9301      	str	r3, [sp, #4]
 8006328:	3303      	adds	r3, #3
 800632a:	e7f3      	b.n	8006314 <_dtoa_r+0x9c>
 800632c:	2200      	movs	r2, #0
 800632e:	2300      	movs	r3, #0
 8006330:	4650      	mov	r0, sl
 8006332:	4659      	mov	r1, fp
 8006334:	f7fa fbc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006338:	ec4b ab19 	vmov	d9, sl, fp
 800633c:	4680      	mov	r8, r0
 800633e:	b158      	cbz	r0, 8006358 <_dtoa_r+0xe0>
 8006340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006342:	2301      	movs	r3, #1
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 856b 	beq.w	8006e24 <_dtoa_r+0xbac>
 800634e:	4883      	ldr	r0, [pc, #524]	; (800655c <_dtoa_r+0x2e4>)
 8006350:	6018      	str	r0, [r3, #0]
 8006352:	1e43      	subs	r3, r0, #1
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	e7df      	b.n	8006318 <_dtoa_r+0xa0>
 8006358:	ec4b ab10 	vmov	d0, sl, fp
 800635c:	aa10      	add	r2, sp, #64	; 0x40
 800635e:	a911      	add	r1, sp, #68	; 0x44
 8006360:	4620      	mov	r0, r4
 8006362:	f001 f9a5 	bl	80076b0 <__d2b>
 8006366:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800636a:	ee08 0a10 	vmov	s16, r0
 800636e:	2d00      	cmp	r5, #0
 8006370:	f000 8084 	beq.w	800647c <_dtoa_r+0x204>
 8006374:	ee19 3a90 	vmov	r3, s19
 8006378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800637c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006380:	4656      	mov	r6, sl
 8006382:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006386:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800638a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800638e:	4b74      	ldr	r3, [pc, #464]	; (8006560 <_dtoa_r+0x2e8>)
 8006390:	2200      	movs	r2, #0
 8006392:	4630      	mov	r0, r6
 8006394:	4639      	mov	r1, r7
 8006396:	f7f9 ff77 	bl	8000288 <__aeabi_dsub>
 800639a:	a365      	add	r3, pc, #404	; (adr r3, 8006530 <_dtoa_r+0x2b8>)
 800639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a0:	f7fa f92a 	bl	80005f8 <__aeabi_dmul>
 80063a4:	a364      	add	r3, pc, #400	; (adr r3, 8006538 <_dtoa_r+0x2c0>)
 80063a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063aa:	f7f9 ff6f 	bl	800028c <__adddf3>
 80063ae:	4606      	mov	r6, r0
 80063b0:	4628      	mov	r0, r5
 80063b2:	460f      	mov	r7, r1
 80063b4:	f7fa f8b6 	bl	8000524 <__aeabi_i2d>
 80063b8:	a361      	add	r3, pc, #388	; (adr r3, 8006540 <_dtoa_r+0x2c8>)
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f7fa f91b 	bl	80005f8 <__aeabi_dmul>
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	4630      	mov	r0, r6
 80063c8:	4639      	mov	r1, r7
 80063ca:	f7f9 ff5f 	bl	800028c <__adddf3>
 80063ce:	4606      	mov	r6, r0
 80063d0:	460f      	mov	r7, r1
 80063d2:	f7fa fbc1 	bl	8000b58 <__aeabi_d2iz>
 80063d6:	2200      	movs	r2, #0
 80063d8:	9000      	str	r0, [sp, #0]
 80063da:	2300      	movs	r3, #0
 80063dc:	4630      	mov	r0, r6
 80063de:	4639      	mov	r1, r7
 80063e0:	f7fa fb7c 	bl	8000adc <__aeabi_dcmplt>
 80063e4:	b150      	cbz	r0, 80063fc <_dtoa_r+0x184>
 80063e6:	9800      	ldr	r0, [sp, #0]
 80063e8:	f7fa f89c 	bl	8000524 <__aeabi_i2d>
 80063ec:	4632      	mov	r2, r6
 80063ee:	463b      	mov	r3, r7
 80063f0:	f7fa fb6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80063f4:	b910      	cbnz	r0, 80063fc <_dtoa_r+0x184>
 80063f6:	9b00      	ldr	r3, [sp, #0]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	9b00      	ldr	r3, [sp, #0]
 80063fe:	2b16      	cmp	r3, #22
 8006400:	d85a      	bhi.n	80064b8 <_dtoa_r+0x240>
 8006402:	9a00      	ldr	r2, [sp, #0]
 8006404:	4b57      	ldr	r3, [pc, #348]	; (8006564 <_dtoa_r+0x2ec>)
 8006406:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640e:	ec51 0b19 	vmov	r0, r1, d9
 8006412:	f7fa fb63 	bl	8000adc <__aeabi_dcmplt>
 8006416:	2800      	cmp	r0, #0
 8006418:	d050      	beq.n	80064bc <_dtoa_r+0x244>
 800641a:	9b00      	ldr	r3, [sp, #0]
 800641c:	3b01      	subs	r3, #1
 800641e:	9300      	str	r3, [sp, #0]
 8006420:	2300      	movs	r3, #0
 8006422:	930b      	str	r3, [sp, #44]	; 0x2c
 8006424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006426:	1b5d      	subs	r5, r3, r5
 8006428:	1e6b      	subs	r3, r5, #1
 800642a:	9305      	str	r3, [sp, #20]
 800642c:	bf45      	ittet	mi
 800642e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006432:	9304      	strmi	r3, [sp, #16]
 8006434:	2300      	movpl	r3, #0
 8006436:	2300      	movmi	r3, #0
 8006438:	bf4c      	ite	mi
 800643a:	9305      	strmi	r3, [sp, #20]
 800643c:	9304      	strpl	r3, [sp, #16]
 800643e:	9b00      	ldr	r3, [sp, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	db3d      	blt.n	80064c0 <_dtoa_r+0x248>
 8006444:	9b05      	ldr	r3, [sp, #20]
 8006446:	9a00      	ldr	r2, [sp, #0]
 8006448:	920a      	str	r2, [sp, #40]	; 0x28
 800644a:	4413      	add	r3, r2
 800644c:	9305      	str	r3, [sp, #20]
 800644e:	2300      	movs	r3, #0
 8006450:	9307      	str	r3, [sp, #28]
 8006452:	9b06      	ldr	r3, [sp, #24]
 8006454:	2b09      	cmp	r3, #9
 8006456:	f200 8089 	bhi.w	800656c <_dtoa_r+0x2f4>
 800645a:	2b05      	cmp	r3, #5
 800645c:	bfc4      	itt	gt
 800645e:	3b04      	subgt	r3, #4
 8006460:	9306      	strgt	r3, [sp, #24]
 8006462:	9b06      	ldr	r3, [sp, #24]
 8006464:	f1a3 0302 	sub.w	r3, r3, #2
 8006468:	bfcc      	ite	gt
 800646a:	2500      	movgt	r5, #0
 800646c:	2501      	movle	r5, #1
 800646e:	2b03      	cmp	r3, #3
 8006470:	f200 8087 	bhi.w	8006582 <_dtoa_r+0x30a>
 8006474:	e8df f003 	tbb	[pc, r3]
 8006478:	59383a2d 	.word	0x59383a2d
 800647c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006480:	441d      	add	r5, r3
 8006482:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006486:	2b20      	cmp	r3, #32
 8006488:	bfc1      	itttt	gt
 800648a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800648e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006492:	fa0b f303 	lslgt.w	r3, fp, r3
 8006496:	fa26 f000 	lsrgt.w	r0, r6, r0
 800649a:	bfda      	itte	le
 800649c:	f1c3 0320 	rsble	r3, r3, #32
 80064a0:	fa06 f003 	lslle.w	r0, r6, r3
 80064a4:	4318      	orrgt	r0, r3
 80064a6:	f7fa f82d 	bl	8000504 <__aeabi_ui2d>
 80064aa:	2301      	movs	r3, #1
 80064ac:	4606      	mov	r6, r0
 80064ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80064b2:	3d01      	subs	r5, #1
 80064b4:	930e      	str	r3, [sp, #56]	; 0x38
 80064b6:	e76a      	b.n	800638e <_dtoa_r+0x116>
 80064b8:	2301      	movs	r3, #1
 80064ba:	e7b2      	b.n	8006422 <_dtoa_r+0x1aa>
 80064bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80064be:	e7b1      	b.n	8006424 <_dtoa_r+0x1ac>
 80064c0:	9b04      	ldr	r3, [sp, #16]
 80064c2:	9a00      	ldr	r2, [sp, #0]
 80064c4:	1a9b      	subs	r3, r3, r2
 80064c6:	9304      	str	r3, [sp, #16]
 80064c8:	4253      	negs	r3, r2
 80064ca:	9307      	str	r3, [sp, #28]
 80064cc:	2300      	movs	r3, #0
 80064ce:	930a      	str	r3, [sp, #40]	; 0x28
 80064d0:	e7bf      	b.n	8006452 <_dtoa_r+0x1da>
 80064d2:	2300      	movs	r3, #0
 80064d4:	9308      	str	r3, [sp, #32]
 80064d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d8:	2b00      	cmp	r3, #0
 80064da:	dc55      	bgt.n	8006588 <_dtoa_r+0x310>
 80064dc:	2301      	movs	r3, #1
 80064de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80064e2:	461a      	mov	r2, r3
 80064e4:	9209      	str	r2, [sp, #36]	; 0x24
 80064e6:	e00c      	b.n	8006502 <_dtoa_r+0x28a>
 80064e8:	2301      	movs	r3, #1
 80064ea:	e7f3      	b.n	80064d4 <_dtoa_r+0x25c>
 80064ec:	2300      	movs	r3, #0
 80064ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064f0:	9308      	str	r3, [sp, #32]
 80064f2:	9b00      	ldr	r3, [sp, #0]
 80064f4:	4413      	add	r3, r2
 80064f6:	9302      	str	r3, [sp, #8]
 80064f8:	3301      	adds	r3, #1
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	9303      	str	r3, [sp, #12]
 80064fe:	bfb8      	it	lt
 8006500:	2301      	movlt	r3, #1
 8006502:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006504:	2200      	movs	r2, #0
 8006506:	6042      	str	r2, [r0, #4]
 8006508:	2204      	movs	r2, #4
 800650a:	f102 0614 	add.w	r6, r2, #20
 800650e:	429e      	cmp	r6, r3
 8006510:	6841      	ldr	r1, [r0, #4]
 8006512:	d93d      	bls.n	8006590 <_dtoa_r+0x318>
 8006514:	4620      	mov	r0, r4
 8006516:	f000 fda3 	bl	8007060 <_Balloc>
 800651a:	9001      	str	r0, [sp, #4]
 800651c:	2800      	cmp	r0, #0
 800651e:	d13b      	bne.n	8006598 <_dtoa_r+0x320>
 8006520:	4b11      	ldr	r3, [pc, #68]	; (8006568 <_dtoa_r+0x2f0>)
 8006522:	4602      	mov	r2, r0
 8006524:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006528:	e6c0      	b.n	80062ac <_dtoa_r+0x34>
 800652a:	2301      	movs	r3, #1
 800652c:	e7df      	b.n	80064ee <_dtoa_r+0x276>
 800652e:	bf00      	nop
 8006530:	636f4361 	.word	0x636f4361
 8006534:	3fd287a7 	.word	0x3fd287a7
 8006538:	8b60c8b3 	.word	0x8b60c8b3
 800653c:	3fc68a28 	.word	0x3fc68a28
 8006540:	509f79fb 	.word	0x509f79fb
 8006544:	3fd34413 	.word	0x3fd34413
 8006548:	08008b05 	.word	0x08008b05
 800654c:	08008b1c 	.word	0x08008b1c
 8006550:	7ff00000 	.word	0x7ff00000
 8006554:	08008b01 	.word	0x08008b01
 8006558:	08008af8 	.word	0x08008af8
 800655c:	08008ad5 	.word	0x08008ad5
 8006560:	3ff80000 	.word	0x3ff80000
 8006564:	08008c70 	.word	0x08008c70
 8006568:	08008b77 	.word	0x08008b77
 800656c:	2501      	movs	r5, #1
 800656e:	2300      	movs	r3, #0
 8006570:	9306      	str	r3, [sp, #24]
 8006572:	9508      	str	r5, [sp, #32]
 8006574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006578:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800657c:	2200      	movs	r2, #0
 800657e:	2312      	movs	r3, #18
 8006580:	e7b0      	b.n	80064e4 <_dtoa_r+0x26c>
 8006582:	2301      	movs	r3, #1
 8006584:	9308      	str	r3, [sp, #32]
 8006586:	e7f5      	b.n	8006574 <_dtoa_r+0x2fc>
 8006588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800658a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800658e:	e7b8      	b.n	8006502 <_dtoa_r+0x28a>
 8006590:	3101      	adds	r1, #1
 8006592:	6041      	str	r1, [r0, #4]
 8006594:	0052      	lsls	r2, r2, #1
 8006596:	e7b8      	b.n	800650a <_dtoa_r+0x292>
 8006598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800659a:	9a01      	ldr	r2, [sp, #4]
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	9b03      	ldr	r3, [sp, #12]
 80065a0:	2b0e      	cmp	r3, #14
 80065a2:	f200 809d 	bhi.w	80066e0 <_dtoa_r+0x468>
 80065a6:	2d00      	cmp	r5, #0
 80065a8:	f000 809a 	beq.w	80066e0 <_dtoa_r+0x468>
 80065ac:	9b00      	ldr	r3, [sp, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	dd32      	ble.n	8006618 <_dtoa_r+0x3a0>
 80065b2:	4ab7      	ldr	r2, [pc, #732]	; (8006890 <_dtoa_r+0x618>)
 80065b4:	f003 030f 	and.w	r3, r3, #15
 80065b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80065bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065c0:	9b00      	ldr	r3, [sp, #0]
 80065c2:	05d8      	lsls	r0, r3, #23
 80065c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80065c8:	d516      	bpl.n	80065f8 <_dtoa_r+0x380>
 80065ca:	4bb2      	ldr	r3, [pc, #712]	; (8006894 <_dtoa_r+0x61c>)
 80065cc:	ec51 0b19 	vmov	r0, r1, d9
 80065d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065d4:	f7fa f93a 	bl	800084c <__aeabi_ddiv>
 80065d8:	f007 070f 	and.w	r7, r7, #15
 80065dc:	4682      	mov	sl, r0
 80065de:	468b      	mov	fp, r1
 80065e0:	2503      	movs	r5, #3
 80065e2:	4eac      	ldr	r6, [pc, #688]	; (8006894 <_dtoa_r+0x61c>)
 80065e4:	b957      	cbnz	r7, 80065fc <_dtoa_r+0x384>
 80065e6:	4642      	mov	r2, r8
 80065e8:	464b      	mov	r3, r9
 80065ea:	4650      	mov	r0, sl
 80065ec:	4659      	mov	r1, fp
 80065ee:	f7fa f92d 	bl	800084c <__aeabi_ddiv>
 80065f2:	4682      	mov	sl, r0
 80065f4:	468b      	mov	fp, r1
 80065f6:	e028      	b.n	800664a <_dtoa_r+0x3d2>
 80065f8:	2502      	movs	r5, #2
 80065fa:	e7f2      	b.n	80065e2 <_dtoa_r+0x36a>
 80065fc:	07f9      	lsls	r1, r7, #31
 80065fe:	d508      	bpl.n	8006612 <_dtoa_r+0x39a>
 8006600:	4640      	mov	r0, r8
 8006602:	4649      	mov	r1, r9
 8006604:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006608:	f7f9 fff6 	bl	80005f8 <__aeabi_dmul>
 800660c:	3501      	adds	r5, #1
 800660e:	4680      	mov	r8, r0
 8006610:	4689      	mov	r9, r1
 8006612:	107f      	asrs	r7, r7, #1
 8006614:	3608      	adds	r6, #8
 8006616:	e7e5      	b.n	80065e4 <_dtoa_r+0x36c>
 8006618:	f000 809b 	beq.w	8006752 <_dtoa_r+0x4da>
 800661c:	9b00      	ldr	r3, [sp, #0]
 800661e:	4f9d      	ldr	r7, [pc, #628]	; (8006894 <_dtoa_r+0x61c>)
 8006620:	425e      	negs	r6, r3
 8006622:	4b9b      	ldr	r3, [pc, #620]	; (8006890 <_dtoa_r+0x618>)
 8006624:	f006 020f 	and.w	r2, r6, #15
 8006628:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	ec51 0b19 	vmov	r0, r1, d9
 8006634:	f7f9 ffe0 	bl	80005f8 <__aeabi_dmul>
 8006638:	1136      	asrs	r6, r6, #4
 800663a:	4682      	mov	sl, r0
 800663c:	468b      	mov	fp, r1
 800663e:	2300      	movs	r3, #0
 8006640:	2502      	movs	r5, #2
 8006642:	2e00      	cmp	r6, #0
 8006644:	d17a      	bne.n	800673c <_dtoa_r+0x4c4>
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1d3      	bne.n	80065f2 <_dtoa_r+0x37a>
 800664a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 8082 	beq.w	8006756 <_dtoa_r+0x4de>
 8006652:	4b91      	ldr	r3, [pc, #580]	; (8006898 <_dtoa_r+0x620>)
 8006654:	2200      	movs	r2, #0
 8006656:	4650      	mov	r0, sl
 8006658:	4659      	mov	r1, fp
 800665a:	f7fa fa3f 	bl	8000adc <__aeabi_dcmplt>
 800665e:	2800      	cmp	r0, #0
 8006660:	d079      	beq.n	8006756 <_dtoa_r+0x4de>
 8006662:	9b03      	ldr	r3, [sp, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d076      	beq.n	8006756 <_dtoa_r+0x4de>
 8006668:	9b02      	ldr	r3, [sp, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	dd36      	ble.n	80066dc <_dtoa_r+0x464>
 800666e:	9b00      	ldr	r3, [sp, #0]
 8006670:	4650      	mov	r0, sl
 8006672:	4659      	mov	r1, fp
 8006674:	1e5f      	subs	r7, r3, #1
 8006676:	2200      	movs	r2, #0
 8006678:	4b88      	ldr	r3, [pc, #544]	; (800689c <_dtoa_r+0x624>)
 800667a:	f7f9 ffbd 	bl	80005f8 <__aeabi_dmul>
 800667e:	9e02      	ldr	r6, [sp, #8]
 8006680:	4682      	mov	sl, r0
 8006682:	468b      	mov	fp, r1
 8006684:	3501      	adds	r5, #1
 8006686:	4628      	mov	r0, r5
 8006688:	f7f9 ff4c 	bl	8000524 <__aeabi_i2d>
 800668c:	4652      	mov	r2, sl
 800668e:	465b      	mov	r3, fp
 8006690:	f7f9 ffb2 	bl	80005f8 <__aeabi_dmul>
 8006694:	4b82      	ldr	r3, [pc, #520]	; (80068a0 <_dtoa_r+0x628>)
 8006696:	2200      	movs	r2, #0
 8006698:	f7f9 fdf8 	bl	800028c <__adddf3>
 800669c:	46d0      	mov	r8, sl
 800669e:	46d9      	mov	r9, fp
 80066a0:	4682      	mov	sl, r0
 80066a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80066a6:	2e00      	cmp	r6, #0
 80066a8:	d158      	bne.n	800675c <_dtoa_r+0x4e4>
 80066aa:	4b7e      	ldr	r3, [pc, #504]	; (80068a4 <_dtoa_r+0x62c>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	4640      	mov	r0, r8
 80066b0:	4649      	mov	r1, r9
 80066b2:	f7f9 fde9 	bl	8000288 <__aeabi_dsub>
 80066b6:	4652      	mov	r2, sl
 80066b8:	465b      	mov	r3, fp
 80066ba:	4680      	mov	r8, r0
 80066bc:	4689      	mov	r9, r1
 80066be:	f7fa fa2b 	bl	8000b18 <__aeabi_dcmpgt>
 80066c2:	2800      	cmp	r0, #0
 80066c4:	f040 8295 	bne.w	8006bf2 <_dtoa_r+0x97a>
 80066c8:	4652      	mov	r2, sl
 80066ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80066ce:	4640      	mov	r0, r8
 80066d0:	4649      	mov	r1, r9
 80066d2:	f7fa fa03 	bl	8000adc <__aeabi_dcmplt>
 80066d6:	2800      	cmp	r0, #0
 80066d8:	f040 8289 	bne.w	8006bee <_dtoa_r+0x976>
 80066dc:	ec5b ab19 	vmov	sl, fp, d9
 80066e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f2c0 8148 	blt.w	8006978 <_dtoa_r+0x700>
 80066e8:	9a00      	ldr	r2, [sp, #0]
 80066ea:	2a0e      	cmp	r2, #14
 80066ec:	f300 8144 	bgt.w	8006978 <_dtoa_r+0x700>
 80066f0:	4b67      	ldr	r3, [pc, #412]	; (8006890 <_dtoa_r+0x618>)
 80066f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f280 80d5 	bge.w	80068ac <_dtoa_r+0x634>
 8006702:	9b03      	ldr	r3, [sp, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	f300 80d1 	bgt.w	80068ac <_dtoa_r+0x634>
 800670a:	f040 826f 	bne.w	8006bec <_dtoa_r+0x974>
 800670e:	4b65      	ldr	r3, [pc, #404]	; (80068a4 <_dtoa_r+0x62c>)
 8006710:	2200      	movs	r2, #0
 8006712:	4640      	mov	r0, r8
 8006714:	4649      	mov	r1, r9
 8006716:	f7f9 ff6f 	bl	80005f8 <__aeabi_dmul>
 800671a:	4652      	mov	r2, sl
 800671c:	465b      	mov	r3, fp
 800671e:	f7fa f9f1 	bl	8000b04 <__aeabi_dcmpge>
 8006722:	9e03      	ldr	r6, [sp, #12]
 8006724:	4637      	mov	r7, r6
 8006726:	2800      	cmp	r0, #0
 8006728:	f040 8245 	bne.w	8006bb6 <_dtoa_r+0x93e>
 800672c:	9d01      	ldr	r5, [sp, #4]
 800672e:	2331      	movs	r3, #49	; 0x31
 8006730:	f805 3b01 	strb.w	r3, [r5], #1
 8006734:	9b00      	ldr	r3, [sp, #0]
 8006736:	3301      	adds	r3, #1
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	e240      	b.n	8006bbe <_dtoa_r+0x946>
 800673c:	07f2      	lsls	r2, r6, #31
 800673e:	d505      	bpl.n	800674c <_dtoa_r+0x4d4>
 8006740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006744:	f7f9 ff58 	bl	80005f8 <__aeabi_dmul>
 8006748:	3501      	adds	r5, #1
 800674a:	2301      	movs	r3, #1
 800674c:	1076      	asrs	r6, r6, #1
 800674e:	3708      	adds	r7, #8
 8006750:	e777      	b.n	8006642 <_dtoa_r+0x3ca>
 8006752:	2502      	movs	r5, #2
 8006754:	e779      	b.n	800664a <_dtoa_r+0x3d2>
 8006756:	9f00      	ldr	r7, [sp, #0]
 8006758:	9e03      	ldr	r6, [sp, #12]
 800675a:	e794      	b.n	8006686 <_dtoa_r+0x40e>
 800675c:	9901      	ldr	r1, [sp, #4]
 800675e:	4b4c      	ldr	r3, [pc, #304]	; (8006890 <_dtoa_r+0x618>)
 8006760:	4431      	add	r1, r6
 8006762:	910d      	str	r1, [sp, #52]	; 0x34
 8006764:	9908      	ldr	r1, [sp, #32]
 8006766:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800676a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800676e:	2900      	cmp	r1, #0
 8006770:	d043      	beq.n	80067fa <_dtoa_r+0x582>
 8006772:	494d      	ldr	r1, [pc, #308]	; (80068a8 <_dtoa_r+0x630>)
 8006774:	2000      	movs	r0, #0
 8006776:	f7fa f869 	bl	800084c <__aeabi_ddiv>
 800677a:	4652      	mov	r2, sl
 800677c:	465b      	mov	r3, fp
 800677e:	f7f9 fd83 	bl	8000288 <__aeabi_dsub>
 8006782:	9d01      	ldr	r5, [sp, #4]
 8006784:	4682      	mov	sl, r0
 8006786:	468b      	mov	fp, r1
 8006788:	4649      	mov	r1, r9
 800678a:	4640      	mov	r0, r8
 800678c:	f7fa f9e4 	bl	8000b58 <__aeabi_d2iz>
 8006790:	4606      	mov	r6, r0
 8006792:	f7f9 fec7 	bl	8000524 <__aeabi_i2d>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	4640      	mov	r0, r8
 800679c:	4649      	mov	r1, r9
 800679e:	f7f9 fd73 	bl	8000288 <__aeabi_dsub>
 80067a2:	3630      	adds	r6, #48	; 0x30
 80067a4:	f805 6b01 	strb.w	r6, [r5], #1
 80067a8:	4652      	mov	r2, sl
 80067aa:	465b      	mov	r3, fp
 80067ac:	4680      	mov	r8, r0
 80067ae:	4689      	mov	r9, r1
 80067b0:	f7fa f994 	bl	8000adc <__aeabi_dcmplt>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	d163      	bne.n	8006880 <_dtoa_r+0x608>
 80067b8:	4642      	mov	r2, r8
 80067ba:	464b      	mov	r3, r9
 80067bc:	4936      	ldr	r1, [pc, #216]	; (8006898 <_dtoa_r+0x620>)
 80067be:	2000      	movs	r0, #0
 80067c0:	f7f9 fd62 	bl	8000288 <__aeabi_dsub>
 80067c4:	4652      	mov	r2, sl
 80067c6:	465b      	mov	r3, fp
 80067c8:	f7fa f988 	bl	8000adc <__aeabi_dcmplt>
 80067cc:	2800      	cmp	r0, #0
 80067ce:	f040 80b5 	bne.w	800693c <_dtoa_r+0x6c4>
 80067d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067d4:	429d      	cmp	r5, r3
 80067d6:	d081      	beq.n	80066dc <_dtoa_r+0x464>
 80067d8:	4b30      	ldr	r3, [pc, #192]	; (800689c <_dtoa_r+0x624>)
 80067da:	2200      	movs	r2, #0
 80067dc:	4650      	mov	r0, sl
 80067de:	4659      	mov	r1, fp
 80067e0:	f7f9 ff0a 	bl	80005f8 <__aeabi_dmul>
 80067e4:	4b2d      	ldr	r3, [pc, #180]	; (800689c <_dtoa_r+0x624>)
 80067e6:	4682      	mov	sl, r0
 80067e8:	468b      	mov	fp, r1
 80067ea:	4640      	mov	r0, r8
 80067ec:	4649      	mov	r1, r9
 80067ee:	2200      	movs	r2, #0
 80067f0:	f7f9 ff02 	bl	80005f8 <__aeabi_dmul>
 80067f4:	4680      	mov	r8, r0
 80067f6:	4689      	mov	r9, r1
 80067f8:	e7c6      	b.n	8006788 <_dtoa_r+0x510>
 80067fa:	4650      	mov	r0, sl
 80067fc:	4659      	mov	r1, fp
 80067fe:	f7f9 fefb 	bl	80005f8 <__aeabi_dmul>
 8006802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006804:	9d01      	ldr	r5, [sp, #4]
 8006806:	930f      	str	r3, [sp, #60]	; 0x3c
 8006808:	4682      	mov	sl, r0
 800680a:	468b      	mov	fp, r1
 800680c:	4649      	mov	r1, r9
 800680e:	4640      	mov	r0, r8
 8006810:	f7fa f9a2 	bl	8000b58 <__aeabi_d2iz>
 8006814:	4606      	mov	r6, r0
 8006816:	f7f9 fe85 	bl	8000524 <__aeabi_i2d>
 800681a:	3630      	adds	r6, #48	; 0x30
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4640      	mov	r0, r8
 8006822:	4649      	mov	r1, r9
 8006824:	f7f9 fd30 	bl	8000288 <__aeabi_dsub>
 8006828:	f805 6b01 	strb.w	r6, [r5], #1
 800682c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800682e:	429d      	cmp	r5, r3
 8006830:	4680      	mov	r8, r0
 8006832:	4689      	mov	r9, r1
 8006834:	f04f 0200 	mov.w	r2, #0
 8006838:	d124      	bne.n	8006884 <_dtoa_r+0x60c>
 800683a:	4b1b      	ldr	r3, [pc, #108]	; (80068a8 <_dtoa_r+0x630>)
 800683c:	4650      	mov	r0, sl
 800683e:	4659      	mov	r1, fp
 8006840:	f7f9 fd24 	bl	800028c <__adddf3>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4640      	mov	r0, r8
 800684a:	4649      	mov	r1, r9
 800684c:	f7fa f964 	bl	8000b18 <__aeabi_dcmpgt>
 8006850:	2800      	cmp	r0, #0
 8006852:	d173      	bne.n	800693c <_dtoa_r+0x6c4>
 8006854:	4652      	mov	r2, sl
 8006856:	465b      	mov	r3, fp
 8006858:	4913      	ldr	r1, [pc, #76]	; (80068a8 <_dtoa_r+0x630>)
 800685a:	2000      	movs	r0, #0
 800685c:	f7f9 fd14 	bl	8000288 <__aeabi_dsub>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	4640      	mov	r0, r8
 8006866:	4649      	mov	r1, r9
 8006868:	f7fa f938 	bl	8000adc <__aeabi_dcmplt>
 800686c:	2800      	cmp	r0, #0
 800686e:	f43f af35 	beq.w	80066dc <_dtoa_r+0x464>
 8006872:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006874:	1e6b      	subs	r3, r5, #1
 8006876:	930f      	str	r3, [sp, #60]	; 0x3c
 8006878:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800687c:	2b30      	cmp	r3, #48	; 0x30
 800687e:	d0f8      	beq.n	8006872 <_dtoa_r+0x5fa>
 8006880:	9700      	str	r7, [sp, #0]
 8006882:	e049      	b.n	8006918 <_dtoa_r+0x6a0>
 8006884:	4b05      	ldr	r3, [pc, #20]	; (800689c <_dtoa_r+0x624>)
 8006886:	f7f9 feb7 	bl	80005f8 <__aeabi_dmul>
 800688a:	4680      	mov	r8, r0
 800688c:	4689      	mov	r9, r1
 800688e:	e7bd      	b.n	800680c <_dtoa_r+0x594>
 8006890:	08008c70 	.word	0x08008c70
 8006894:	08008c48 	.word	0x08008c48
 8006898:	3ff00000 	.word	0x3ff00000
 800689c:	40240000 	.word	0x40240000
 80068a0:	401c0000 	.word	0x401c0000
 80068a4:	40140000 	.word	0x40140000
 80068a8:	3fe00000 	.word	0x3fe00000
 80068ac:	9d01      	ldr	r5, [sp, #4]
 80068ae:	4656      	mov	r6, sl
 80068b0:	465f      	mov	r7, fp
 80068b2:	4642      	mov	r2, r8
 80068b4:	464b      	mov	r3, r9
 80068b6:	4630      	mov	r0, r6
 80068b8:	4639      	mov	r1, r7
 80068ba:	f7f9 ffc7 	bl	800084c <__aeabi_ddiv>
 80068be:	f7fa f94b 	bl	8000b58 <__aeabi_d2iz>
 80068c2:	4682      	mov	sl, r0
 80068c4:	f7f9 fe2e 	bl	8000524 <__aeabi_i2d>
 80068c8:	4642      	mov	r2, r8
 80068ca:	464b      	mov	r3, r9
 80068cc:	f7f9 fe94 	bl	80005f8 <__aeabi_dmul>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	4630      	mov	r0, r6
 80068d6:	4639      	mov	r1, r7
 80068d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80068dc:	f7f9 fcd4 	bl	8000288 <__aeabi_dsub>
 80068e0:	f805 6b01 	strb.w	r6, [r5], #1
 80068e4:	9e01      	ldr	r6, [sp, #4]
 80068e6:	9f03      	ldr	r7, [sp, #12]
 80068e8:	1bae      	subs	r6, r5, r6
 80068ea:	42b7      	cmp	r7, r6
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	d135      	bne.n	800695e <_dtoa_r+0x6e6>
 80068f2:	f7f9 fccb 	bl	800028c <__adddf3>
 80068f6:	4642      	mov	r2, r8
 80068f8:	464b      	mov	r3, r9
 80068fa:	4606      	mov	r6, r0
 80068fc:	460f      	mov	r7, r1
 80068fe:	f7fa f90b 	bl	8000b18 <__aeabi_dcmpgt>
 8006902:	b9d0      	cbnz	r0, 800693a <_dtoa_r+0x6c2>
 8006904:	4642      	mov	r2, r8
 8006906:	464b      	mov	r3, r9
 8006908:	4630      	mov	r0, r6
 800690a:	4639      	mov	r1, r7
 800690c:	f7fa f8dc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006910:	b110      	cbz	r0, 8006918 <_dtoa_r+0x6a0>
 8006912:	f01a 0f01 	tst.w	sl, #1
 8006916:	d110      	bne.n	800693a <_dtoa_r+0x6c2>
 8006918:	4620      	mov	r0, r4
 800691a:	ee18 1a10 	vmov	r1, s16
 800691e:	f000 fbdf 	bl	80070e0 <_Bfree>
 8006922:	2300      	movs	r3, #0
 8006924:	9800      	ldr	r0, [sp, #0]
 8006926:	702b      	strb	r3, [r5, #0]
 8006928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800692a:	3001      	adds	r0, #1
 800692c:	6018      	str	r0, [r3, #0]
 800692e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006930:	2b00      	cmp	r3, #0
 8006932:	f43f acf1 	beq.w	8006318 <_dtoa_r+0xa0>
 8006936:	601d      	str	r5, [r3, #0]
 8006938:	e4ee      	b.n	8006318 <_dtoa_r+0xa0>
 800693a:	9f00      	ldr	r7, [sp, #0]
 800693c:	462b      	mov	r3, r5
 800693e:	461d      	mov	r5, r3
 8006940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006944:	2a39      	cmp	r2, #57	; 0x39
 8006946:	d106      	bne.n	8006956 <_dtoa_r+0x6de>
 8006948:	9a01      	ldr	r2, [sp, #4]
 800694a:	429a      	cmp	r2, r3
 800694c:	d1f7      	bne.n	800693e <_dtoa_r+0x6c6>
 800694e:	9901      	ldr	r1, [sp, #4]
 8006950:	2230      	movs	r2, #48	; 0x30
 8006952:	3701      	adds	r7, #1
 8006954:	700a      	strb	r2, [r1, #0]
 8006956:	781a      	ldrb	r2, [r3, #0]
 8006958:	3201      	adds	r2, #1
 800695a:	701a      	strb	r2, [r3, #0]
 800695c:	e790      	b.n	8006880 <_dtoa_r+0x608>
 800695e:	4ba6      	ldr	r3, [pc, #664]	; (8006bf8 <_dtoa_r+0x980>)
 8006960:	2200      	movs	r2, #0
 8006962:	f7f9 fe49 	bl	80005f8 <__aeabi_dmul>
 8006966:	2200      	movs	r2, #0
 8006968:	2300      	movs	r3, #0
 800696a:	4606      	mov	r6, r0
 800696c:	460f      	mov	r7, r1
 800696e:	f7fa f8ab 	bl	8000ac8 <__aeabi_dcmpeq>
 8006972:	2800      	cmp	r0, #0
 8006974:	d09d      	beq.n	80068b2 <_dtoa_r+0x63a>
 8006976:	e7cf      	b.n	8006918 <_dtoa_r+0x6a0>
 8006978:	9a08      	ldr	r2, [sp, #32]
 800697a:	2a00      	cmp	r2, #0
 800697c:	f000 80d7 	beq.w	8006b2e <_dtoa_r+0x8b6>
 8006980:	9a06      	ldr	r2, [sp, #24]
 8006982:	2a01      	cmp	r2, #1
 8006984:	f300 80ba 	bgt.w	8006afc <_dtoa_r+0x884>
 8006988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800698a:	2a00      	cmp	r2, #0
 800698c:	f000 80b2 	beq.w	8006af4 <_dtoa_r+0x87c>
 8006990:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006994:	9e07      	ldr	r6, [sp, #28]
 8006996:	9d04      	ldr	r5, [sp, #16]
 8006998:	9a04      	ldr	r2, [sp, #16]
 800699a:	441a      	add	r2, r3
 800699c:	9204      	str	r2, [sp, #16]
 800699e:	9a05      	ldr	r2, [sp, #20]
 80069a0:	2101      	movs	r1, #1
 80069a2:	441a      	add	r2, r3
 80069a4:	4620      	mov	r0, r4
 80069a6:	9205      	str	r2, [sp, #20]
 80069a8:	f000 fc52 	bl	8007250 <__i2b>
 80069ac:	4607      	mov	r7, r0
 80069ae:	2d00      	cmp	r5, #0
 80069b0:	dd0c      	ble.n	80069cc <_dtoa_r+0x754>
 80069b2:	9b05      	ldr	r3, [sp, #20]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	dd09      	ble.n	80069cc <_dtoa_r+0x754>
 80069b8:	42ab      	cmp	r3, r5
 80069ba:	9a04      	ldr	r2, [sp, #16]
 80069bc:	bfa8      	it	ge
 80069be:	462b      	movge	r3, r5
 80069c0:	1ad2      	subs	r2, r2, r3
 80069c2:	9204      	str	r2, [sp, #16]
 80069c4:	9a05      	ldr	r2, [sp, #20]
 80069c6:	1aed      	subs	r5, r5, r3
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	9305      	str	r3, [sp, #20]
 80069cc:	9b07      	ldr	r3, [sp, #28]
 80069ce:	b31b      	cbz	r3, 8006a18 <_dtoa_r+0x7a0>
 80069d0:	9b08      	ldr	r3, [sp, #32]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 80af 	beq.w	8006b36 <_dtoa_r+0x8be>
 80069d8:	2e00      	cmp	r6, #0
 80069da:	dd13      	ble.n	8006a04 <_dtoa_r+0x78c>
 80069dc:	4639      	mov	r1, r7
 80069de:	4632      	mov	r2, r6
 80069e0:	4620      	mov	r0, r4
 80069e2:	f000 fcf5 	bl	80073d0 <__pow5mult>
 80069e6:	ee18 2a10 	vmov	r2, s16
 80069ea:	4601      	mov	r1, r0
 80069ec:	4607      	mov	r7, r0
 80069ee:	4620      	mov	r0, r4
 80069f0:	f000 fc44 	bl	800727c <__multiply>
 80069f4:	ee18 1a10 	vmov	r1, s16
 80069f8:	4680      	mov	r8, r0
 80069fa:	4620      	mov	r0, r4
 80069fc:	f000 fb70 	bl	80070e0 <_Bfree>
 8006a00:	ee08 8a10 	vmov	s16, r8
 8006a04:	9b07      	ldr	r3, [sp, #28]
 8006a06:	1b9a      	subs	r2, r3, r6
 8006a08:	d006      	beq.n	8006a18 <_dtoa_r+0x7a0>
 8006a0a:	ee18 1a10 	vmov	r1, s16
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f000 fcde 	bl	80073d0 <__pow5mult>
 8006a14:	ee08 0a10 	vmov	s16, r0
 8006a18:	2101      	movs	r1, #1
 8006a1a:	4620      	mov	r0, r4
 8006a1c:	f000 fc18 	bl	8007250 <__i2b>
 8006a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	4606      	mov	r6, r0
 8006a26:	f340 8088 	ble.w	8006b3a <_dtoa_r+0x8c2>
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	4601      	mov	r1, r0
 8006a2e:	4620      	mov	r0, r4
 8006a30:	f000 fcce 	bl	80073d0 <__pow5mult>
 8006a34:	9b06      	ldr	r3, [sp, #24]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	4606      	mov	r6, r0
 8006a3a:	f340 8081 	ble.w	8006b40 <_dtoa_r+0x8c8>
 8006a3e:	f04f 0800 	mov.w	r8, #0
 8006a42:	6933      	ldr	r3, [r6, #16]
 8006a44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006a48:	6918      	ldr	r0, [r3, #16]
 8006a4a:	f000 fbb1 	bl	80071b0 <__hi0bits>
 8006a4e:	f1c0 0020 	rsb	r0, r0, #32
 8006a52:	9b05      	ldr	r3, [sp, #20]
 8006a54:	4418      	add	r0, r3
 8006a56:	f010 001f 	ands.w	r0, r0, #31
 8006a5a:	f000 8092 	beq.w	8006b82 <_dtoa_r+0x90a>
 8006a5e:	f1c0 0320 	rsb	r3, r0, #32
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	f340 808a 	ble.w	8006b7c <_dtoa_r+0x904>
 8006a68:	f1c0 001c 	rsb	r0, r0, #28
 8006a6c:	9b04      	ldr	r3, [sp, #16]
 8006a6e:	4403      	add	r3, r0
 8006a70:	9304      	str	r3, [sp, #16]
 8006a72:	9b05      	ldr	r3, [sp, #20]
 8006a74:	4403      	add	r3, r0
 8006a76:	4405      	add	r5, r0
 8006a78:	9305      	str	r3, [sp, #20]
 8006a7a:	9b04      	ldr	r3, [sp, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	dd07      	ble.n	8006a90 <_dtoa_r+0x818>
 8006a80:	ee18 1a10 	vmov	r1, s16
 8006a84:	461a      	mov	r2, r3
 8006a86:	4620      	mov	r0, r4
 8006a88:	f000 fcfc 	bl	8007484 <__lshift>
 8006a8c:	ee08 0a10 	vmov	s16, r0
 8006a90:	9b05      	ldr	r3, [sp, #20]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	dd05      	ble.n	8006aa2 <_dtoa_r+0x82a>
 8006a96:	4631      	mov	r1, r6
 8006a98:	461a      	mov	r2, r3
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f000 fcf2 	bl	8007484 <__lshift>
 8006aa0:	4606      	mov	r6, r0
 8006aa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d06e      	beq.n	8006b86 <_dtoa_r+0x90e>
 8006aa8:	ee18 0a10 	vmov	r0, s16
 8006aac:	4631      	mov	r1, r6
 8006aae:	f000 fd59 	bl	8007564 <__mcmp>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	da67      	bge.n	8006b86 <_dtoa_r+0x90e>
 8006ab6:	9b00      	ldr	r3, [sp, #0]
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	ee18 1a10 	vmov	r1, s16
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	220a      	movs	r2, #10
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	f000 fb2d 	bl	8007124 <__multadd>
 8006aca:	9b08      	ldr	r3, [sp, #32]
 8006acc:	ee08 0a10 	vmov	s16, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 81b1 	beq.w	8006e38 <_dtoa_r+0xbc0>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	4639      	mov	r1, r7
 8006ada:	220a      	movs	r2, #10
 8006adc:	4620      	mov	r0, r4
 8006ade:	f000 fb21 	bl	8007124 <__multadd>
 8006ae2:	9b02      	ldr	r3, [sp, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	4607      	mov	r7, r0
 8006ae8:	f300 808e 	bgt.w	8006c08 <_dtoa_r+0x990>
 8006aec:	9b06      	ldr	r3, [sp, #24]
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	dc51      	bgt.n	8006b96 <_dtoa_r+0x91e>
 8006af2:	e089      	b.n	8006c08 <_dtoa_r+0x990>
 8006af4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006af6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006afa:	e74b      	b.n	8006994 <_dtoa_r+0x71c>
 8006afc:	9b03      	ldr	r3, [sp, #12]
 8006afe:	1e5e      	subs	r6, r3, #1
 8006b00:	9b07      	ldr	r3, [sp, #28]
 8006b02:	42b3      	cmp	r3, r6
 8006b04:	bfbf      	itttt	lt
 8006b06:	9b07      	ldrlt	r3, [sp, #28]
 8006b08:	9607      	strlt	r6, [sp, #28]
 8006b0a:	1af2      	sublt	r2, r6, r3
 8006b0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006b0e:	bfb6      	itet	lt
 8006b10:	189b      	addlt	r3, r3, r2
 8006b12:	1b9e      	subge	r6, r3, r6
 8006b14:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006b16:	9b03      	ldr	r3, [sp, #12]
 8006b18:	bfb8      	it	lt
 8006b1a:	2600      	movlt	r6, #0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	bfb7      	itett	lt
 8006b20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006b24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006b28:	1a9d      	sublt	r5, r3, r2
 8006b2a:	2300      	movlt	r3, #0
 8006b2c:	e734      	b.n	8006998 <_dtoa_r+0x720>
 8006b2e:	9e07      	ldr	r6, [sp, #28]
 8006b30:	9d04      	ldr	r5, [sp, #16]
 8006b32:	9f08      	ldr	r7, [sp, #32]
 8006b34:	e73b      	b.n	80069ae <_dtoa_r+0x736>
 8006b36:	9a07      	ldr	r2, [sp, #28]
 8006b38:	e767      	b.n	8006a0a <_dtoa_r+0x792>
 8006b3a:	9b06      	ldr	r3, [sp, #24]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	dc18      	bgt.n	8006b72 <_dtoa_r+0x8fa>
 8006b40:	f1ba 0f00 	cmp.w	sl, #0
 8006b44:	d115      	bne.n	8006b72 <_dtoa_r+0x8fa>
 8006b46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b4a:	b993      	cbnz	r3, 8006b72 <_dtoa_r+0x8fa>
 8006b4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006b50:	0d1b      	lsrs	r3, r3, #20
 8006b52:	051b      	lsls	r3, r3, #20
 8006b54:	b183      	cbz	r3, 8006b78 <_dtoa_r+0x900>
 8006b56:	9b04      	ldr	r3, [sp, #16]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	9304      	str	r3, [sp, #16]
 8006b5c:	9b05      	ldr	r3, [sp, #20]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	9305      	str	r3, [sp, #20]
 8006b62:	f04f 0801 	mov.w	r8, #1
 8006b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f47f af6a 	bne.w	8006a42 <_dtoa_r+0x7ca>
 8006b6e:	2001      	movs	r0, #1
 8006b70:	e76f      	b.n	8006a52 <_dtoa_r+0x7da>
 8006b72:	f04f 0800 	mov.w	r8, #0
 8006b76:	e7f6      	b.n	8006b66 <_dtoa_r+0x8ee>
 8006b78:	4698      	mov	r8, r3
 8006b7a:	e7f4      	b.n	8006b66 <_dtoa_r+0x8ee>
 8006b7c:	f43f af7d 	beq.w	8006a7a <_dtoa_r+0x802>
 8006b80:	4618      	mov	r0, r3
 8006b82:	301c      	adds	r0, #28
 8006b84:	e772      	b.n	8006a6c <_dtoa_r+0x7f4>
 8006b86:	9b03      	ldr	r3, [sp, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	dc37      	bgt.n	8006bfc <_dtoa_r+0x984>
 8006b8c:	9b06      	ldr	r3, [sp, #24]
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	dd34      	ble.n	8006bfc <_dtoa_r+0x984>
 8006b92:	9b03      	ldr	r3, [sp, #12]
 8006b94:	9302      	str	r3, [sp, #8]
 8006b96:	9b02      	ldr	r3, [sp, #8]
 8006b98:	b96b      	cbnz	r3, 8006bb6 <_dtoa_r+0x93e>
 8006b9a:	4631      	mov	r1, r6
 8006b9c:	2205      	movs	r2, #5
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f000 fac0 	bl	8007124 <__multadd>
 8006ba4:	4601      	mov	r1, r0
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	ee18 0a10 	vmov	r0, s16
 8006bac:	f000 fcda 	bl	8007564 <__mcmp>
 8006bb0:	2800      	cmp	r0, #0
 8006bb2:	f73f adbb 	bgt.w	800672c <_dtoa_r+0x4b4>
 8006bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb8:	9d01      	ldr	r5, [sp, #4]
 8006bba:	43db      	mvns	r3, r3
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	f04f 0800 	mov.w	r8, #0
 8006bc2:	4631      	mov	r1, r6
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f000 fa8b 	bl	80070e0 <_Bfree>
 8006bca:	2f00      	cmp	r7, #0
 8006bcc:	f43f aea4 	beq.w	8006918 <_dtoa_r+0x6a0>
 8006bd0:	f1b8 0f00 	cmp.w	r8, #0
 8006bd4:	d005      	beq.n	8006be2 <_dtoa_r+0x96a>
 8006bd6:	45b8      	cmp	r8, r7
 8006bd8:	d003      	beq.n	8006be2 <_dtoa_r+0x96a>
 8006bda:	4641      	mov	r1, r8
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f000 fa7f 	bl	80070e0 <_Bfree>
 8006be2:	4639      	mov	r1, r7
 8006be4:	4620      	mov	r0, r4
 8006be6:	f000 fa7b 	bl	80070e0 <_Bfree>
 8006bea:	e695      	b.n	8006918 <_dtoa_r+0x6a0>
 8006bec:	2600      	movs	r6, #0
 8006bee:	4637      	mov	r7, r6
 8006bf0:	e7e1      	b.n	8006bb6 <_dtoa_r+0x93e>
 8006bf2:	9700      	str	r7, [sp, #0]
 8006bf4:	4637      	mov	r7, r6
 8006bf6:	e599      	b.n	800672c <_dtoa_r+0x4b4>
 8006bf8:	40240000 	.word	0x40240000
 8006bfc:	9b08      	ldr	r3, [sp, #32]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 80ca 	beq.w	8006d98 <_dtoa_r+0xb20>
 8006c04:	9b03      	ldr	r3, [sp, #12]
 8006c06:	9302      	str	r3, [sp, #8]
 8006c08:	2d00      	cmp	r5, #0
 8006c0a:	dd05      	ble.n	8006c18 <_dtoa_r+0x9a0>
 8006c0c:	4639      	mov	r1, r7
 8006c0e:	462a      	mov	r2, r5
 8006c10:	4620      	mov	r0, r4
 8006c12:	f000 fc37 	bl	8007484 <__lshift>
 8006c16:	4607      	mov	r7, r0
 8006c18:	f1b8 0f00 	cmp.w	r8, #0
 8006c1c:	d05b      	beq.n	8006cd6 <_dtoa_r+0xa5e>
 8006c1e:	6879      	ldr	r1, [r7, #4]
 8006c20:	4620      	mov	r0, r4
 8006c22:	f000 fa1d 	bl	8007060 <_Balloc>
 8006c26:	4605      	mov	r5, r0
 8006c28:	b928      	cbnz	r0, 8006c36 <_dtoa_r+0x9be>
 8006c2a:	4b87      	ldr	r3, [pc, #540]	; (8006e48 <_dtoa_r+0xbd0>)
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006c32:	f7ff bb3b 	b.w	80062ac <_dtoa_r+0x34>
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	3202      	adds	r2, #2
 8006c3a:	0092      	lsls	r2, r2, #2
 8006c3c:	f107 010c 	add.w	r1, r7, #12
 8006c40:	300c      	adds	r0, #12
 8006c42:	f7fe fdf5 	bl	8005830 <memcpy>
 8006c46:	2201      	movs	r2, #1
 8006c48:	4629      	mov	r1, r5
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f000 fc1a 	bl	8007484 <__lshift>
 8006c50:	9b01      	ldr	r3, [sp, #4]
 8006c52:	f103 0901 	add.w	r9, r3, #1
 8006c56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	9305      	str	r3, [sp, #20]
 8006c5e:	f00a 0301 	and.w	r3, sl, #1
 8006c62:	46b8      	mov	r8, r7
 8006c64:	9304      	str	r3, [sp, #16]
 8006c66:	4607      	mov	r7, r0
 8006c68:	4631      	mov	r1, r6
 8006c6a:	ee18 0a10 	vmov	r0, s16
 8006c6e:	f7ff fa77 	bl	8006160 <quorem>
 8006c72:	4641      	mov	r1, r8
 8006c74:	9002      	str	r0, [sp, #8]
 8006c76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006c7a:	ee18 0a10 	vmov	r0, s16
 8006c7e:	f000 fc71 	bl	8007564 <__mcmp>
 8006c82:	463a      	mov	r2, r7
 8006c84:	9003      	str	r0, [sp, #12]
 8006c86:	4631      	mov	r1, r6
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f000 fc87 	bl	800759c <__mdiff>
 8006c8e:	68c2      	ldr	r2, [r0, #12]
 8006c90:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006c94:	4605      	mov	r5, r0
 8006c96:	bb02      	cbnz	r2, 8006cda <_dtoa_r+0xa62>
 8006c98:	4601      	mov	r1, r0
 8006c9a:	ee18 0a10 	vmov	r0, s16
 8006c9e:	f000 fc61 	bl	8007564 <__mcmp>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	9207      	str	r2, [sp, #28]
 8006caa:	f000 fa19 	bl	80070e0 <_Bfree>
 8006cae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006cb2:	ea43 0102 	orr.w	r1, r3, r2
 8006cb6:	9b04      	ldr	r3, [sp, #16]
 8006cb8:	430b      	orrs	r3, r1
 8006cba:	464d      	mov	r5, r9
 8006cbc:	d10f      	bne.n	8006cde <_dtoa_r+0xa66>
 8006cbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006cc2:	d02a      	beq.n	8006d1a <_dtoa_r+0xaa2>
 8006cc4:	9b03      	ldr	r3, [sp, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	dd02      	ble.n	8006cd0 <_dtoa_r+0xa58>
 8006cca:	9b02      	ldr	r3, [sp, #8]
 8006ccc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006cd0:	f88b a000 	strb.w	sl, [fp]
 8006cd4:	e775      	b.n	8006bc2 <_dtoa_r+0x94a>
 8006cd6:	4638      	mov	r0, r7
 8006cd8:	e7ba      	b.n	8006c50 <_dtoa_r+0x9d8>
 8006cda:	2201      	movs	r2, #1
 8006cdc:	e7e2      	b.n	8006ca4 <_dtoa_r+0xa2c>
 8006cde:	9b03      	ldr	r3, [sp, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	db04      	blt.n	8006cee <_dtoa_r+0xa76>
 8006ce4:	9906      	ldr	r1, [sp, #24]
 8006ce6:	430b      	orrs	r3, r1
 8006ce8:	9904      	ldr	r1, [sp, #16]
 8006cea:	430b      	orrs	r3, r1
 8006cec:	d122      	bne.n	8006d34 <_dtoa_r+0xabc>
 8006cee:	2a00      	cmp	r2, #0
 8006cf0:	ddee      	ble.n	8006cd0 <_dtoa_r+0xa58>
 8006cf2:	ee18 1a10 	vmov	r1, s16
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 fbc3 	bl	8007484 <__lshift>
 8006cfe:	4631      	mov	r1, r6
 8006d00:	ee08 0a10 	vmov	s16, r0
 8006d04:	f000 fc2e 	bl	8007564 <__mcmp>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	dc03      	bgt.n	8006d14 <_dtoa_r+0xa9c>
 8006d0c:	d1e0      	bne.n	8006cd0 <_dtoa_r+0xa58>
 8006d0e:	f01a 0f01 	tst.w	sl, #1
 8006d12:	d0dd      	beq.n	8006cd0 <_dtoa_r+0xa58>
 8006d14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006d18:	d1d7      	bne.n	8006cca <_dtoa_r+0xa52>
 8006d1a:	2339      	movs	r3, #57	; 0x39
 8006d1c:	f88b 3000 	strb.w	r3, [fp]
 8006d20:	462b      	mov	r3, r5
 8006d22:	461d      	mov	r5, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006d2a:	2a39      	cmp	r2, #57	; 0x39
 8006d2c:	d071      	beq.n	8006e12 <_dtoa_r+0xb9a>
 8006d2e:	3201      	adds	r2, #1
 8006d30:	701a      	strb	r2, [r3, #0]
 8006d32:	e746      	b.n	8006bc2 <_dtoa_r+0x94a>
 8006d34:	2a00      	cmp	r2, #0
 8006d36:	dd07      	ble.n	8006d48 <_dtoa_r+0xad0>
 8006d38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006d3c:	d0ed      	beq.n	8006d1a <_dtoa_r+0xaa2>
 8006d3e:	f10a 0301 	add.w	r3, sl, #1
 8006d42:	f88b 3000 	strb.w	r3, [fp]
 8006d46:	e73c      	b.n	8006bc2 <_dtoa_r+0x94a>
 8006d48:	9b05      	ldr	r3, [sp, #20]
 8006d4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006d4e:	4599      	cmp	r9, r3
 8006d50:	d047      	beq.n	8006de2 <_dtoa_r+0xb6a>
 8006d52:	ee18 1a10 	vmov	r1, s16
 8006d56:	2300      	movs	r3, #0
 8006d58:	220a      	movs	r2, #10
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	f000 f9e2 	bl	8007124 <__multadd>
 8006d60:	45b8      	cmp	r8, r7
 8006d62:	ee08 0a10 	vmov	s16, r0
 8006d66:	f04f 0300 	mov.w	r3, #0
 8006d6a:	f04f 020a 	mov.w	r2, #10
 8006d6e:	4641      	mov	r1, r8
 8006d70:	4620      	mov	r0, r4
 8006d72:	d106      	bne.n	8006d82 <_dtoa_r+0xb0a>
 8006d74:	f000 f9d6 	bl	8007124 <__multadd>
 8006d78:	4680      	mov	r8, r0
 8006d7a:	4607      	mov	r7, r0
 8006d7c:	f109 0901 	add.w	r9, r9, #1
 8006d80:	e772      	b.n	8006c68 <_dtoa_r+0x9f0>
 8006d82:	f000 f9cf 	bl	8007124 <__multadd>
 8006d86:	4639      	mov	r1, r7
 8006d88:	4680      	mov	r8, r0
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	220a      	movs	r2, #10
 8006d8e:	4620      	mov	r0, r4
 8006d90:	f000 f9c8 	bl	8007124 <__multadd>
 8006d94:	4607      	mov	r7, r0
 8006d96:	e7f1      	b.n	8006d7c <_dtoa_r+0xb04>
 8006d98:	9b03      	ldr	r3, [sp, #12]
 8006d9a:	9302      	str	r3, [sp, #8]
 8006d9c:	9d01      	ldr	r5, [sp, #4]
 8006d9e:	ee18 0a10 	vmov	r0, s16
 8006da2:	4631      	mov	r1, r6
 8006da4:	f7ff f9dc 	bl	8006160 <quorem>
 8006da8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006dac:	9b01      	ldr	r3, [sp, #4]
 8006dae:	f805 ab01 	strb.w	sl, [r5], #1
 8006db2:	1aea      	subs	r2, r5, r3
 8006db4:	9b02      	ldr	r3, [sp, #8]
 8006db6:	4293      	cmp	r3, r2
 8006db8:	dd09      	ble.n	8006dce <_dtoa_r+0xb56>
 8006dba:	ee18 1a10 	vmov	r1, s16
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	220a      	movs	r2, #10
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 f9ae 	bl	8007124 <__multadd>
 8006dc8:	ee08 0a10 	vmov	s16, r0
 8006dcc:	e7e7      	b.n	8006d9e <_dtoa_r+0xb26>
 8006dce:	9b02      	ldr	r3, [sp, #8]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	bfc8      	it	gt
 8006dd4:	461d      	movgt	r5, r3
 8006dd6:	9b01      	ldr	r3, [sp, #4]
 8006dd8:	bfd8      	it	le
 8006dda:	2501      	movle	r5, #1
 8006ddc:	441d      	add	r5, r3
 8006dde:	f04f 0800 	mov.w	r8, #0
 8006de2:	ee18 1a10 	vmov	r1, s16
 8006de6:	2201      	movs	r2, #1
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 fb4b 	bl	8007484 <__lshift>
 8006dee:	4631      	mov	r1, r6
 8006df0:	ee08 0a10 	vmov	s16, r0
 8006df4:	f000 fbb6 	bl	8007564 <__mcmp>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	dc91      	bgt.n	8006d20 <_dtoa_r+0xaa8>
 8006dfc:	d102      	bne.n	8006e04 <_dtoa_r+0xb8c>
 8006dfe:	f01a 0f01 	tst.w	sl, #1
 8006e02:	d18d      	bne.n	8006d20 <_dtoa_r+0xaa8>
 8006e04:	462b      	mov	r3, r5
 8006e06:	461d      	mov	r5, r3
 8006e08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e0c:	2a30      	cmp	r2, #48	; 0x30
 8006e0e:	d0fa      	beq.n	8006e06 <_dtoa_r+0xb8e>
 8006e10:	e6d7      	b.n	8006bc2 <_dtoa_r+0x94a>
 8006e12:	9a01      	ldr	r2, [sp, #4]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d184      	bne.n	8006d22 <_dtoa_r+0xaaa>
 8006e18:	9b00      	ldr	r3, [sp, #0]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	2331      	movs	r3, #49	; 0x31
 8006e20:	7013      	strb	r3, [r2, #0]
 8006e22:	e6ce      	b.n	8006bc2 <_dtoa_r+0x94a>
 8006e24:	4b09      	ldr	r3, [pc, #36]	; (8006e4c <_dtoa_r+0xbd4>)
 8006e26:	f7ff ba95 	b.w	8006354 <_dtoa_r+0xdc>
 8006e2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f47f aa6e 	bne.w	800630e <_dtoa_r+0x96>
 8006e32:	4b07      	ldr	r3, [pc, #28]	; (8006e50 <_dtoa_r+0xbd8>)
 8006e34:	f7ff ba8e 	b.w	8006354 <_dtoa_r+0xdc>
 8006e38:	9b02      	ldr	r3, [sp, #8]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	dcae      	bgt.n	8006d9c <_dtoa_r+0xb24>
 8006e3e:	9b06      	ldr	r3, [sp, #24]
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	f73f aea8 	bgt.w	8006b96 <_dtoa_r+0x91e>
 8006e46:	e7a9      	b.n	8006d9c <_dtoa_r+0xb24>
 8006e48:	08008b77 	.word	0x08008b77
 8006e4c:	08008ad4 	.word	0x08008ad4
 8006e50:	08008af8 	.word	0x08008af8

08006e54 <std>:
 8006e54:	2300      	movs	r3, #0
 8006e56:	b510      	push	{r4, lr}
 8006e58:	4604      	mov	r4, r0
 8006e5a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e62:	6083      	str	r3, [r0, #8]
 8006e64:	8181      	strh	r1, [r0, #12]
 8006e66:	6643      	str	r3, [r0, #100]	; 0x64
 8006e68:	81c2      	strh	r2, [r0, #14]
 8006e6a:	6183      	str	r3, [r0, #24]
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	2208      	movs	r2, #8
 8006e70:	305c      	adds	r0, #92	; 0x5c
 8006e72:	f7fe fceb 	bl	800584c <memset>
 8006e76:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <std+0x38>)
 8006e78:	6263      	str	r3, [r4, #36]	; 0x24
 8006e7a:	4b05      	ldr	r3, [pc, #20]	; (8006e90 <std+0x3c>)
 8006e7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e7e:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <std+0x40>)
 8006e80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e82:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <std+0x44>)
 8006e84:	6224      	str	r4, [r4, #32]
 8006e86:	6323      	str	r3, [r4, #48]	; 0x30
 8006e88:	bd10      	pop	{r4, pc}
 8006e8a:	bf00      	nop
 8006e8c:	08007c29 	.word	0x08007c29
 8006e90:	08007c4b 	.word	0x08007c4b
 8006e94:	08007c83 	.word	0x08007c83
 8006e98:	08007ca7 	.word	0x08007ca7

08006e9c <_cleanup_r>:
 8006e9c:	4901      	ldr	r1, [pc, #4]	; (8006ea4 <_cleanup_r+0x8>)
 8006e9e:	f000 b8af 	b.w	8007000 <_fwalk_reent>
 8006ea2:	bf00      	nop
 8006ea4:	08007fbd 	.word	0x08007fbd

08006ea8 <__sfmoreglue>:
 8006ea8:	b570      	push	{r4, r5, r6, lr}
 8006eaa:	2268      	movs	r2, #104	; 0x68
 8006eac:	1e4d      	subs	r5, r1, #1
 8006eae:	4355      	muls	r5, r2
 8006eb0:	460e      	mov	r6, r1
 8006eb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006eb6:	f000 fcd9 	bl	800786c <_malloc_r>
 8006eba:	4604      	mov	r4, r0
 8006ebc:	b140      	cbz	r0, 8006ed0 <__sfmoreglue+0x28>
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	e9c0 1600 	strd	r1, r6, [r0]
 8006ec4:	300c      	adds	r0, #12
 8006ec6:	60a0      	str	r0, [r4, #8]
 8006ec8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ecc:	f7fe fcbe 	bl	800584c <memset>
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	bd70      	pop	{r4, r5, r6, pc}

08006ed4 <__sfp_lock_acquire>:
 8006ed4:	4801      	ldr	r0, [pc, #4]	; (8006edc <__sfp_lock_acquire+0x8>)
 8006ed6:	f000 b8b8 	b.w	800704a <__retarget_lock_acquire_recursive>
 8006eda:	bf00      	nop
 8006edc:	20000419 	.word	0x20000419

08006ee0 <__sfp_lock_release>:
 8006ee0:	4801      	ldr	r0, [pc, #4]	; (8006ee8 <__sfp_lock_release+0x8>)
 8006ee2:	f000 b8b3 	b.w	800704c <__retarget_lock_release_recursive>
 8006ee6:	bf00      	nop
 8006ee8:	20000419 	.word	0x20000419

08006eec <__sinit_lock_acquire>:
 8006eec:	4801      	ldr	r0, [pc, #4]	; (8006ef4 <__sinit_lock_acquire+0x8>)
 8006eee:	f000 b8ac 	b.w	800704a <__retarget_lock_acquire_recursive>
 8006ef2:	bf00      	nop
 8006ef4:	2000041a 	.word	0x2000041a

08006ef8 <__sinit_lock_release>:
 8006ef8:	4801      	ldr	r0, [pc, #4]	; (8006f00 <__sinit_lock_release+0x8>)
 8006efa:	f000 b8a7 	b.w	800704c <__retarget_lock_release_recursive>
 8006efe:	bf00      	nop
 8006f00:	2000041a 	.word	0x2000041a

08006f04 <__sinit>:
 8006f04:	b510      	push	{r4, lr}
 8006f06:	4604      	mov	r4, r0
 8006f08:	f7ff fff0 	bl	8006eec <__sinit_lock_acquire>
 8006f0c:	69a3      	ldr	r3, [r4, #24]
 8006f0e:	b11b      	cbz	r3, 8006f18 <__sinit+0x14>
 8006f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f14:	f7ff bff0 	b.w	8006ef8 <__sinit_lock_release>
 8006f18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f1c:	6523      	str	r3, [r4, #80]	; 0x50
 8006f1e:	4b13      	ldr	r3, [pc, #76]	; (8006f6c <__sinit+0x68>)
 8006f20:	4a13      	ldr	r2, [pc, #76]	; (8006f70 <__sinit+0x6c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f26:	42a3      	cmp	r3, r4
 8006f28:	bf04      	itt	eq
 8006f2a:	2301      	moveq	r3, #1
 8006f2c:	61a3      	streq	r3, [r4, #24]
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f000 f820 	bl	8006f74 <__sfp>
 8006f34:	6060      	str	r0, [r4, #4]
 8006f36:	4620      	mov	r0, r4
 8006f38:	f000 f81c 	bl	8006f74 <__sfp>
 8006f3c:	60a0      	str	r0, [r4, #8]
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f000 f818 	bl	8006f74 <__sfp>
 8006f44:	2200      	movs	r2, #0
 8006f46:	60e0      	str	r0, [r4, #12]
 8006f48:	2104      	movs	r1, #4
 8006f4a:	6860      	ldr	r0, [r4, #4]
 8006f4c:	f7ff ff82 	bl	8006e54 <std>
 8006f50:	68a0      	ldr	r0, [r4, #8]
 8006f52:	2201      	movs	r2, #1
 8006f54:	2109      	movs	r1, #9
 8006f56:	f7ff ff7d 	bl	8006e54 <std>
 8006f5a:	68e0      	ldr	r0, [r4, #12]
 8006f5c:	2202      	movs	r2, #2
 8006f5e:	2112      	movs	r1, #18
 8006f60:	f7ff ff78 	bl	8006e54 <std>
 8006f64:	2301      	movs	r3, #1
 8006f66:	61a3      	str	r3, [r4, #24]
 8006f68:	e7d2      	b.n	8006f10 <__sinit+0xc>
 8006f6a:	bf00      	nop
 8006f6c:	08008ac0 	.word	0x08008ac0
 8006f70:	08006e9d 	.word	0x08006e9d

08006f74 <__sfp>:
 8006f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f76:	4607      	mov	r7, r0
 8006f78:	f7ff ffac 	bl	8006ed4 <__sfp_lock_acquire>
 8006f7c:	4b1e      	ldr	r3, [pc, #120]	; (8006ff8 <__sfp+0x84>)
 8006f7e:	681e      	ldr	r6, [r3, #0]
 8006f80:	69b3      	ldr	r3, [r6, #24]
 8006f82:	b913      	cbnz	r3, 8006f8a <__sfp+0x16>
 8006f84:	4630      	mov	r0, r6
 8006f86:	f7ff ffbd 	bl	8006f04 <__sinit>
 8006f8a:	3648      	adds	r6, #72	; 0x48
 8006f8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f90:	3b01      	subs	r3, #1
 8006f92:	d503      	bpl.n	8006f9c <__sfp+0x28>
 8006f94:	6833      	ldr	r3, [r6, #0]
 8006f96:	b30b      	cbz	r3, 8006fdc <__sfp+0x68>
 8006f98:	6836      	ldr	r6, [r6, #0]
 8006f9a:	e7f7      	b.n	8006f8c <__sfp+0x18>
 8006f9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006fa0:	b9d5      	cbnz	r5, 8006fd8 <__sfp+0x64>
 8006fa2:	4b16      	ldr	r3, [pc, #88]	; (8006ffc <__sfp+0x88>)
 8006fa4:	60e3      	str	r3, [r4, #12]
 8006fa6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006faa:	6665      	str	r5, [r4, #100]	; 0x64
 8006fac:	f000 f84c 	bl	8007048 <__retarget_lock_init_recursive>
 8006fb0:	f7ff ff96 	bl	8006ee0 <__sfp_lock_release>
 8006fb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006fb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006fbc:	6025      	str	r5, [r4, #0]
 8006fbe:	61a5      	str	r5, [r4, #24]
 8006fc0:	2208      	movs	r2, #8
 8006fc2:	4629      	mov	r1, r5
 8006fc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fc8:	f7fe fc40 	bl	800584c <memset>
 8006fcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fd8:	3468      	adds	r4, #104	; 0x68
 8006fda:	e7d9      	b.n	8006f90 <__sfp+0x1c>
 8006fdc:	2104      	movs	r1, #4
 8006fde:	4638      	mov	r0, r7
 8006fe0:	f7ff ff62 	bl	8006ea8 <__sfmoreglue>
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	6030      	str	r0, [r6, #0]
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	d1d5      	bne.n	8006f98 <__sfp+0x24>
 8006fec:	f7ff ff78 	bl	8006ee0 <__sfp_lock_release>
 8006ff0:	230c      	movs	r3, #12
 8006ff2:	603b      	str	r3, [r7, #0]
 8006ff4:	e7ee      	b.n	8006fd4 <__sfp+0x60>
 8006ff6:	bf00      	nop
 8006ff8:	08008ac0 	.word	0x08008ac0
 8006ffc:	ffff0001 	.word	0xffff0001

08007000 <_fwalk_reent>:
 8007000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007004:	4606      	mov	r6, r0
 8007006:	4688      	mov	r8, r1
 8007008:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800700c:	2700      	movs	r7, #0
 800700e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007012:	f1b9 0901 	subs.w	r9, r9, #1
 8007016:	d505      	bpl.n	8007024 <_fwalk_reent+0x24>
 8007018:	6824      	ldr	r4, [r4, #0]
 800701a:	2c00      	cmp	r4, #0
 800701c:	d1f7      	bne.n	800700e <_fwalk_reent+0xe>
 800701e:	4638      	mov	r0, r7
 8007020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007024:	89ab      	ldrh	r3, [r5, #12]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d907      	bls.n	800703a <_fwalk_reent+0x3a>
 800702a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800702e:	3301      	adds	r3, #1
 8007030:	d003      	beq.n	800703a <_fwalk_reent+0x3a>
 8007032:	4629      	mov	r1, r5
 8007034:	4630      	mov	r0, r6
 8007036:	47c0      	blx	r8
 8007038:	4307      	orrs	r7, r0
 800703a:	3568      	adds	r5, #104	; 0x68
 800703c:	e7e9      	b.n	8007012 <_fwalk_reent+0x12>
	...

08007040 <_localeconv_r>:
 8007040:	4800      	ldr	r0, [pc, #0]	; (8007044 <_localeconv_r+0x4>)
 8007042:	4770      	bx	lr
 8007044:	2000016c 	.word	0x2000016c

08007048 <__retarget_lock_init_recursive>:
 8007048:	4770      	bx	lr

0800704a <__retarget_lock_acquire_recursive>:
 800704a:	4770      	bx	lr

0800704c <__retarget_lock_release_recursive>:
 800704c:	4770      	bx	lr
	...

08007050 <malloc>:
 8007050:	4b02      	ldr	r3, [pc, #8]	; (800705c <malloc+0xc>)
 8007052:	4601      	mov	r1, r0
 8007054:	6818      	ldr	r0, [r3, #0]
 8007056:	f000 bc09 	b.w	800786c <_malloc_r>
 800705a:	bf00      	nop
 800705c:	20000018 	.word	0x20000018

08007060 <_Balloc>:
 8007060:	b570      	push	{r4, r5, r6, lr}
 8007062:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007064:	4604      	mov	r4, r0
 8007066:	460d      	mov	r5, r1
 8007068:	b976      	cbnz	r6, 8007088 <_Balloc+0x28>
 800706a:	2010      	movs	r0, #16
 800706c:	f7ff fff0 	bl	8007050 <malloc>
 8007070:	4602      	mov	r2, r0
 8007072:	6260      	str	r0, [r4, #36]	; 0x24
 8007074:	b920      	cbnz	r0, 8007080 <_Balloc+0x20>
 8007076:	4b18      	ldr	r3, [pc, #96]	; (80070d8 <_Balloc+0x78>)
 8007078:	4818      	ldr	r0, [pc, #96]	; (80070dc <_Balloc+0x7c>)
 800707a:	2166      	movs	r1, #102	; 0x66
 800707c:	f000 feea 	bl	8007e54 <__assert_func>
 8007080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007084:	6006      	str	r6, [r0, #0]
 8007086:	60c6      	str	r6, [r0, #12]
 8007088:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800708a:	68f3      	ldr	r3, [r6, #12]
 800708c:	b183      	cbz	r3, 80070b0 <_Balloc+0x50>
 800708e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007096:	b9b8      	cbnz	r0, 80070c8 <_Balloc+0x68>
 8007098:	2101      	movs	r1, #1
 800709a:	fa01 f605 	lsl.w	r6, r1, r5
 800709e:	1d72      	adds	r2, r6, #5
 80070a0:	0092      	lsls	r2, r2, #2
 80070a2:	4620      	mov	r0, r4
 80070a4:	f000 fb60 	bl	8007768 <_calloc_r>
 80070a8:	b160      	cbz	r0, 80070c4 <_Balloc+0x64>
 80070aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070ae:	e00e      	b.n	80070ce <_Balloc+0x6e>
 80070b0:	2221      	movs	r2, #33	; 0x21
 80070b2:	2104      	movs	r1, #4
 80070b4:	4620      	mov	r0, r4
 80070b6:	f000 fb57 	bl	8007768 <_calloc_r>
 80070ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070bc:	60f0      	str	r0, [r6, #12]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e4      	bne.n	800708e <_Balloc+0x2e>
 80070c4:	2000      	movs	r0, #0
 80070c6:	bd70      	pop	{r4, r5, r6, pc}
 80070c8:	6802      	ldr	r2, [r0, #0]
 80070ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80070ce:	2300      	movs	r3, #0
 80070d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070d4:	e7f7      	b.n	80070c6 <_Balloc+0x66>
 80070d6:	bf00      	nop
 80070d8:	08008b05 	.word	0x08008b05
 80070dc:	08008be8 	.word	0x08008be8

080070e0 <_Bfree>:
 80070e0:	b570      	push	{r4, r5, r6, lr}
 80070e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070e4:	4605      	mov	r5, r0
 80070e6:	460c      	mov	r4, r1
 80070e8:	b976      	cbnz	r6, 8007108 <_Bfree+0x28>
 80070ea:	2010      	movs	r0, #16
 80070ec:	f7ff ffb0 	bl	8007050 <malloc>
 80070f0:	4602      	mov	r2, r0
 80070f2:	6268      	str	r0, [r5, #36]	; 0x24
 80070f4:	b920      	cbnz	r0, 8007100 <_Bfree+0x20>
 80070f6:	4b09      	ldr	r3, [pc, #36]	; (800711c <_Bfree+0x3c>)
 80070f8:	4809      	ldr	r0, [pc, #36]	; (8007120 <_Bfree+0x40>)
 80070fa:	218a      	movs	r1, #138	; 0x8a
 80070fc:	f000 feaa 	bl	8007e54 <__assert_func>
 8007100:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007104:	6006      	str	r6, [r0, #0]
 8007106:	60c6      	str	r6, [r0, #12]
 8007108:	b13c      	cbz	r4, 800711a <_Bfree+0x3a>
 800710a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800710c:	6862      	ldr	r2, [r4, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007114:	6021      	str	r1, [r4, #0]
 8007116:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800711a:	bd70      	pop	{r4, r5, r6, pc}
 800711c:	08008b05 	.word	0x08008b05
 8007120:	08008be8 	.word	0x08008be8

08007124 <__multadd>:
 8007124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007128:	690d      	ldr	r5, [r1, #16]
 800712a:	4607      	mov	r7, r0
 800712c:	460c      	mov	r4, r1
 800712e:	461e      	mov	r6, r3
 8007130:	f101 0c14 	add.w	ip, r1, #20
 8007134:	2000      	movs	r0, #0
 8007136:	f8dc 3000 	ldr.w	r3, [ip]
 800713a:	b299      	uxth	r1, r3
 800713c:	fb02 6101 	mla	r1, r2, r1, r6
 8007140:	0c1e      	lsrs	r6, r3, #16
 8007142:	0c0b      	lsrs	r3, r1, #16
 8007144:	fb02 3306 	mla	r3, r2, r6, r3
 8007148:	b289      	uxth	r1, r1
 800714a:	3001      	adds	r0, #1
 800714c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007150:	4285      	cmp	r5, r0
 8007152:	f84c 1b04 	str.w	r1, [ip], #4
 8007156:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800715a:	dcec      	bgt.n	8007136 <__multadd+0x12>
 800715c:	b30e      	cbz	r6, 80071a2 <__multadd+0x7e>
 800715e:	68a3      	ldr	r3, [r4, #8]
 8007160:	42ab      	cmp	r3, r5
 8007162:	dc19      	bgt.n	8007198 <__multadd+0x74>
 8007164:	6861      	ldr	r1, [r4, #4]
 8007166:	4638      	mov	r0, r7
 8007168:	3101      	adds	r1, #1
 800716a:	f7ff ff79 	bl	8007060 <_Balloc>
 800716e:	4680      	mov	r8, r0
 8007170:	b928      	cbnz	r0, 800717e <__multadd+0x5a>
 8007172:	4602      	mov	r2, r0
 8007174:	4b0c      	ldr	r3, [pc, #48]	; (80071a8 <__multadd+0x84>)
 8007176:	480d      	ldr	r0, [pc, #52]	; (80071ac <__multadd+0x88>)
 8007178:	21b5      	movs	r1, #181	; 0xb5
 800717a:	f000 fe6b 	bl	8007e54 <__assert_func>
 800717e:	6922      	ldr	r2, [r4, #16]
 8007180:	3202      	adds	r2, #2
 8007182:	f104 010c 	add.w	r1, r4, #12
 8007186:	0092      	lsls	r2, r2, #2
 8007188:	300c      	adds	r0, #12
 800718a:	f7fe fb51 	bl	8005830 <memcpy>
 800718e:	4621      	mov	r1, r4
 8007190:	4638      	mov	r0, r7
 8007192:	f7ff ffa5 	bl	80070e0 <_Bfree>
 8007196:	4644      	mov	r4, r8
 8007198:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800719c:	3501      	adds	r5, #1
 800719e:	615e      	str	r6, [r3, #20]
 80071a0:	6125      	str	r5, [r4, #16]
 80071a2:	4620      	mov	r0, r4
 80071a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071a8:	08008b77 	.word	0x08008b77
 80071ac:	08008be8 	.word	0x08008be8

080071b0 <__hi0bits>:
 80071b0:	0c03      	lsrs	r3, r0, #16
 80071b2:	041b      	lsls	r3, r3, #16
 80071b4:	b9d3      	cbnz	r3, 80071ec <__hi0bits+0x3c>
 80071b6:	0400      	lsls	r0, r0, #16
 80071b8:	2310      	movs	r3, #16
 80071ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80071be:	bf04      	itt	eq
 80071c0:	0200      	lsleq	r0, r0, #8
 80071c2:	3308      	addeq	r3, #8
 80071c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80071c8:	bf04      	itt	eq
 80071ca:	0100      	lsleq	r0, r0, #4
 80071cc:	3304      	addeq	r3, #4
 80071ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80071d2:	bf04      	itt	eq
 80071d4:	0080      	lsleq	r0, r0, #2
 80071d6:	3302      	addeq	r3, #2
 80071d8:	2800      	cmp	r0, #0
 80071da:	db05      	blt.n	80071e8 <__hi0bits+0x38>
 80071dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80071e0:	f103 0301 	add.w	r3, r3, #1
 80071e4:	bf08      	it	eq
 80071e6:	2320      	moveq	r3, #32
 80071e8:	4618      	mov	r0, r3
 80071ea:	4770      	bx	lr
 80071ec:	2300      	movs	r3, #0
 80071ee:	e7e4      	b.n	80071ba <__hi0bits+0xa>

080071f0 <__lo0bits>:
 80071f0:	6803      	ldr	r3, [r0, #0]
 80071f2:	f013 0207 	ands.w	r2, r3, #7
 80071f6:	4601      	mov	r1, r0
 80071f8:	d00b      	beq.n	8007212 <__lo0bits+0x22>
 80071fa:	07da      	lsls	r2, r3, #31
 80071fc:	d423      	bmi.n	8007246 <__lo0bits+0x56>
 80071fe:	0798      	lsls	r0, r3, #30
 8007200:	bf49      	itett	mi
 8007202:	085b      	lsrmi	r3, r3, #1
 8007204:	089b      	lsrpl	r3, r3, #2
 8007206:	2001      	movmi	r0, #1
 8007208:	600b      	strmi	r3, [r1, #0]
 800720a:	bf5c      	itt	pl
 800720c:	600b      	strpl	r3, [r1, #0]
 800720e:	2002      	movpl	r0, #2
 8007210:	4770      	bx	lr
 8007212:	b298      	uxth	r0, r3
 8007214:	b9a8      	cbnz	r0, 8007242 <__lo0bits+0x52>
 8007216:	0c1b      	lsrs	r3, r3, #16
 8007218:	2010      	movs	r0, #16
 800721a:	b2da      	uxtb	r2, r3
 800721c:	b90a      	cbnz	r2, 8007222 <__lo0bits+0x32>
 800721e:	3008      	adds	r0, #8
 8007220:	0a1b      	lsrs	r3, r3, #8
 8007222:	071a      	lsls	r2, r3, #28
 8007224:	bf04      	itt	eq
 8007226:	091b      	lsreq	r3, r3, #4
 8007228:	3004      	addeq	r0, #4
 800722a:	079a      	lsls	r2, r3, #30
 800722c:	bf04      	itt	eq
 800722e:	089b      	lsreq	r3, r3, #2
 8007230:	3002      	addeq	r0, #2
 8007232:	07da      	lsls	r2, r3, #31
 8007234:	d403      	bmi.n	800723e <__lo0bits+0x4e>
 8007236:	085b      	lsrs	r3, r3, #1
 8007238:	f100 0001 	add.w	r0, r0, #1
 800723c:	d005      	beq.n	800724a <__lo0bits+0x5a>
 800723e:	600b      	str	r3, [r1, #0]
 8007240:	4770      	bx	lr
 8007242:	4610      	mov	r0, r2
 8007244:	e7e9      	b.n	800721a <__lo0bits+0x2a>
 8007246:	2000      	movs	r0, #0
 8007248:	4770      	bx	lr
 800724a:	2020      	movs	r0, #32
 800724c:	4770      	bx	lr
	...

08007250 <__i2b>:
 8007250:	b510      	push	{r4, lr}
 8007252:	460c      	mov	r4, r1
 8007254:	2101      	movs	r1, #1
 8007256:	f7ff ff03 	bl	8007060 <_Balloc>
 800725a:	4602      	mov	r2, r0
 800725c:	b928      	cbnz	r0, 800726a <__i2b+0x1a>
 800725e:	4b05      	ldr	r3, [pc, #20]	; (8007274 <__i2b+0x24>)
 8007260:	4805      	ldr	r0, [pc, #20]	; (8007278 <__i2b+0x28>)
 8007262:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007266:	f000 fdf5 	bl	8007e54 <__assert_func>
 800726a:	2301      	movs	r3, #1
 800726c:	6144      	str	r4, [r0, #20]
 800726e:	6103      	str	r3, [r0, #16]
 8007270:	bd10      	pop	{r4, pc}
 8007272:	bf00      	nop
 8007274:	08008b77 	.word	0x08008b77
 8007278:	08008be8 	.word	0x08008be8

0800727c <__multiply>:
 800727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007280:	4691      	mov	r9, r2
 8007282:	690a      	ldr	r2, [r1, #16]
 8007284:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007288:	429a      	cmp	r2, r3
 800728a:	bfb8      	it	lt
 800728c:	460b      	movlt	r3, r1
 800728e:	460c      	mov	r4, r1
 8007290:	bfbc      	itt	lt
 8007292:	464c      	movlt	r4, r9
 8007294:	4699      	movlt	r9, r3
 8007296:	6927      	ldr	r7, [r4, #16]
 8007298:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800729c:	68a3      	ldr	r3, [r4, #8]
 800729e:	6861      	ldr	r1, [r4, #4]
 80072a0:	eb07 060a 	add.w	r6, r7, sl
 80072a4:	42b3      	cmp	r3, r6
 80072a6:	b085      	sub	sp, #20
 80072a8:	bfb8      	it	lt
 80072aa:	3101      	addlt	r1, #1
 80072ac:	f7ff fed8 	bl	8007060 <_Balloc>
 80072b0:	b930      	cbnz	r0, 80072c0 <__multiply+0x44>
 80072b2:	4602      	mov	r2, r0
 80072b4:	4b44      	ldr	r3, [pc, #272]	; (80073c8 <__multiply+0x14c>)
 80072b6:	4845      	ldr	r0, [pc, #276]	; (80073cc <__multiply+0x150>)
 80072b8:	f240 115d 	movw	r1, #349	; 0x15d
 80072bc:	f000 fdca 	bl	8007e54 <__assert_func>
 80072c0:	f100 0514 	add.w	r5, r0, #20
 80072c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80072c8:	462b      	mov	r3, r5
 80072ca:	2200      	movs	r2, #0
 80072cc:	4543      	cmp	r3, r8
 80072ce:	d321      	bcc.n	8007314 <__multiply+0x98>
 80072d0:	f104 0314 	add.w	r3, r4, #20
 80072d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80072d8:	f109 0314 	add.w	r3, r9, #20
 80072dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80072e0:	9202      	str	r2, [sp, #8]
 80072e2:	1b3a      	subs	r2, r7, r4
 80072e4:	3a15      	subs	r2, #21
 80072e6:	f022 0203 	bic.w	r2, r2, #3
 80072ea:	3204      	adds	r2, #4
 80072ec:	f104 0115 	add.w	r1, r4, #21
 80072f0:	428f      	cmp	r7, r1
 80072f2:	bf38      	it	cc
 80072f4:	2204      	movcc	r2, #4
 80072f6:	9201      	str	r2, [sp, #4]
 80072f8:	9a02      	ldr	r2, [sp, #8]
 80072fa:	9303      	str	r3, [sp, #12]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d80c      	bhi.n	800731a <__multiply+0x9e>
 8007300:	2e00      	cmp	r6, #0
 8007302:	dd03      	ble.n	800730c <__multiply+0x90>
 8007304:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007308:	2b00      	cmp	r3, #0
 800730a:	d05a      	beq.n	80073c2 <__multiply+0x146>
 800730c:	6106      	str	r6, [r0, #16]
 800730e:	b005      	add	sp, #20
 8007310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007314:	f843 2b04 	str.w	r2, [r3], #4
 8007318:	e7d8      	b.n	80072cc <__multiply+0x50>
 800731a:	f8b3 a000 	ldrh.w	sl, [r3]
 800731e:	f1ba 0f00 	cmp.w	sl, #0
 8007322:	d024      	beq.n	800736e <__multiply+0xf2>
 8007324:	f104 0e14 	add.w	lr, r4, #20
 8007328:	46a9      	mov	r9, r5
 800732a:	f04f 0c00 	mov.w	ip, #0
 800732e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007332:	f8d9 1000 	ldr.w	r1, [r9]
 8007336:	fa1f fb82 	uxth.w	fp, r2
 800733a:	b289      	uxth	r1, r1
 800733c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007340:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007344:	f8d9 2000 	ldr.w	r2, [r9]
 8007348:	4461      	add	r1, ip
 800734a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800734e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007352:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007356:	b289      	uxth	r1, r1
 8007358:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800735c:	4577      	cmp	r7, lr
 800735e:	f849 1b04 	str.w	r1, [r9], #4
 8007362:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007366:	d8e2      	bhi.n	800732e <__multiply+0xb2>
 8007368:	9a01      	ldr	r2, [sp, #4]
 800736a:	f845 c002 	str.w	ip, [r5, r2]
 800736e:	9a03      	ldr	r2, [sp, #12]
 8007370:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007374:	3304      	adds	r3, #4
 8007376:	f1b9 0f00 	cmp.w	r9, #0
 800737a:	d020      	beq.n	80073be <__multiply+0x142>
 800737c:	6829      	ldr	r1, [r5, #0]
 800737e:	f104 0c14 	add.w	ip, r4, #20
 8007382:	46ae      	mov	lr, r5
 8007384:	f04f 0a00 	mov.w	sl, #0
 8007388:	f8bc b000 	ldrh.w	fp, [ip]
 800738c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007390:	fb09 220b 	mla	r2, r9, fp, r2
 8007394:	4492      	add	sl, r2
 8007396:	b289      	uxth	r1, r1
 8007398:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800739c:	f84e 1b04 	str.w	r1, [lr], #4
 80073a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80073a4:	f8be 1000 	ldrh.w	r1, [lr]
 80073a8:	0c12      	lsrs	r2, r2, #16
 80073aa:	fb09 1102 	mla	r1, r9, r2, r1
 80073ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80073b2:	4567      	cmp	r7, ip
 80073b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80073b8:	d8e6      	bhi.n	8007388 <__multiply+0x10c>
 80073ba:	9a01      	ldr	r2, [sp, #4]
 80073bc:	50a9      	str	r1, [r5, r2]
 80073be:	3504      	adds	r5, #4
 80073c0:	e79a      	b.n	80072f8 <__multiply+0x7c>
 80073c2:	3e01      	subs	r6, #1
 80073c4:	e79c      	b.n	8007300 <__multiply+0x84>
 80073c6:	bf00      	nop
 80073c8:	08008b77 	.word	0x08008b77
 80073cc:	08008be8 	.word	0x08008be8

080073d0 <__pow5mult>:
 80073d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073d4:	4615      	mov	r5, r2
 80073d6:	f012 0203 	ands.w	r2, r2, #3
 80073da:	4606      	mov	r6, r0
 80073dc:	460f      	mov	r7, r1
 80073de:	d007      	beq.n	80073f0 <__pow5mult+0x20>
 80073e0:	4c25      	ldr	r4, [pc, #148]	; (8007478 <__pow5mult+0xa8>)
 80073e2:	3a01      	subs	r2, #1
 80073e4:	2300      	movs	r3, #0
 80073e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073ea:	f7ff fe9b 	bl	8007124 <__multadd>
 80073ee:	4607      	mov	r7, r0
 80073f0:	10ad      	asrs	r5, r5, #2
 80073f2:	d03d      	beq.n	8007470 <__pow5mult+0xa0>
 80073f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80073f6:	b97c      	cbnz	r4, 8007418 <__pow5mult+0x48>
 80073f8:	2010      	movs	r0, #16
 80073fa:	f7ff fe29 	bl	8007050 <malloc>
 80073fe:	4602      	mov	r2, r0
 8007400:	6270      	str	r0, [r6, #36]	; 0x24
 8007402:	b928      	cbnz	r0, 8007410 <__pow5mult+0x40>
 8007404:	4b1d      	ldr	r3, [pc, #116]	; (800747c <__pow5mult+0xac>)
 8007406:	481e      	ldr	r0, [pc, #120]	; (8007480 <__pow5mult+0xb0>)
 8007408:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800740c:	f000 fd22 	bl	8007e54 <__assert_func>
 8007410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007414:	6004      	str	r4, [r0, #0]
 8007416:	60c4      	str	r4, [r0, #12]
 8007418:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800741c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007420:	b94c      	cbnz	r4, 8007436 <__pow5mult+0x66>
 8007422:	f240 2171 	movw	r1, #625	; 0x271
 8007426:	4630      	mov	r0, r6
 8007428:	f7ff ff12 	bl	8007250 <__i2b>
 800742c:	2300      	movs	r3, #0
 800742e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007432:	4604      	mov	r4, r0
 8007434:	6003      	str	r3, [r0, #0]
 8007436:	f04f 0900 	mov.w	r9, #0
 800743a:	07eb      	lsls	r3, r5, #31
 800743c:	d50a      	bpl.n	8007454 <__pow5mult+0x84>
 800743e:	4639      	mov	r1, r7
 8007440:	4622      	mov	r2, r4
 8007442:	4630      	mov	r0, r6
 8007444:	f7ff ff1a 	bl	800727c <__multiply>
 8007448:	4639      	mov	r1, r7
 800744a:	4680      	mov	r8, r0
 800744c:	4630      	mov	r0, r6
 800744e:	f7ff fe47 	bl	80070e0 <_Bfree>
 8007452:	4647      	mov	r7, r8
 8007454:	106d      	asrs	r5, r5, #1
 8007456:	d00b      	beq.n	8007470 <__pow5mult+0xa0>
 8007458:	6820      	ldr	r0, [r4, #0]
 800745a:	b938      	cbnz	r0, 800746c <__pow5mult+0x9c>
 800745c:	4622      	mov	r2, r4
 800745e:	4621      	mov	r1, r4
 8007460:	4630      	mov	r0, r6
 8007462:	f7ff ff0b 	bl	800727c <__multiply>
 8007466:	6020      	str	r0, [r4, #0]
 8007468:	f8c0 9000 	str.w	r9, [r0]
 800746c:	4604      	mov	r4, r0
 800746e:	e7e4      	b.n	800743a <__pow5mult+0x6a>
 8007470:	4638      	mov	r0, r7
 8007472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007476:	bf00      	nop
 8007478:	08008d38 	.word	0x08008d38
 800747c:	08008b05 	.word	0x08008b05
 8007480:	08008be8 	.word	0x08008be8

08007484 <__lshift>:
 8007484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007488:	460c      	mov	r4, r1
 800748a:	6849      	ldr	r1, [r1, #4]
 800748c:	6923      	ldr	r3, [r4, #16]
 800748e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007492:	68a3      	ldr	r3, [r4, #8]
 8007494:	4607      	mov	r7, r0
 8007496:	4691      	mov	r9, r2
 8007498:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800749c:	f108 0601 	add.w	r6, r8, #1
 80074a0:	42b3      	cmp	r3, r6
 80074a2:	db0b      	blt.n	80074bc <__lshift+0x38>
 80074a4:	4638      	mov	r0, r7
 80074a6:	f7ff fddb 	bl	8007060 <_Balloc>
 80074aa:	4605      	mov	r5, r0
 80074ac:	b948      	cbnz	r0, 80074c2 <__lshift+0x3e>
 80074ae:	4602      	mov	r2, r0
 80074b0:	4b2a      	ldr	r3, [pc, #168]	; (800755c <__lshift+0xd8>)
 80074b2:	482b      	ldr	r0, [pc, #172]	; (8007560 <__lshift+0xdc>)
 80074b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80074b8:	f000 fccc 	bl	8007e54 <__assert_func>
 80074bc:	3101      	adds	r1, #1
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	e7ee      	b.n	80074a0 <__lshift+0x1c>
 80074c2:	2300      	movs	r3, #0
 80074c4:	f100 0114 	add.w	r1, r0, #20
 80074c8:	f100 0210 	add.w	r2, r0, #16
 80074cc:	4618      	mov	r0, r3
 80074ce:	4553      	cmp	r3, sl
 80074d0:	db37      	blt.n	8007542 <__lshift+0xbe>
 80074d2:	6920      	ldr	r0, [r4, #16]
 80074d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074d8:	f104 0314 	add.w	r3, r4, #20
 80074dc:	f019 091f 	ands.w	r9, r9, #31
 80074e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80074e8:	d02f      	beq.n	800754a <__lshift+0xc6>
 80074ea:	f1c9 0e20 	rsb	lr, r9, #32
 80074ee:	468a      	mov	sl, r1
 80074f0:	f04f 0c00 	mov.w	ip, #0
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	fa02 f209 	lsl.w	r2, r2, r9
 80074fa:	ea42 020c 	orr.w	r2, r2, ip
 80074fe:	f84a 2b04 	str.w	r2, [sl], #4
 8007502:	f853 2b04 	ldr.w	r2, [r3], #4
 8007506:	4298      	cmp	r0, r3
 8007508:	fa22 fc0e 	lsr.w	ip, r2, lr
 800750c:	d8f2      	bhi.n	80074f4 <__lshift+0x70>
 800750e:	1b03      	subs	r3, r0, r4
 8007510:	3b15      	subs	r3, #21
 8007512:	f023 0303 	bic.w	r3, r3, #3
 8007516:	3304      	adds	r3, #4
 8007518:	f104 0215 	add.w	r2, r4, #21
 800751c:	4290      	cmp	r0, r2
 800751e:	bf38      	it	cc
 8007520:	2304      	movcc	r3, #4
 8007522:	f841 c003 	str.w	ip, [r1, r3]
 8007526:	f1bc 0f00 	cmp.w	ip, #0
 800752a:	d001      	beq.n	8007530 <__lshift+0xac>
 800752c:	f108 0602 	add.w	r6, r8, #2
 8007530:	3e01      	subs	r6, #1
 8007532:	4638      	mov	r0, r7
 8007534:	612e      	str	r6, [r5, #16]
 8007536:	4621      	mov	r1, r4
 8007538:	f7ff fdd2 	bl	80070e0 <_Bfree>
 800753c:	4628      	mov	r0, r5
 800753e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007542:	f842 0f04 	str.w	r0, [r2, #4]!
 8007546:	3301      	adds	r3, #1
 8007548:	e7c1      	b.n	80074ce <__lshift+0x4a>
 800754a:	3904      	subs	r1, #4
 800754c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007550:	f841 2f04 	str.w	r2, [r1, #4]!
 8007554:	4298      	cmp	r0, r3
 8007556:	d8f9      	bhi.n	800754c <__lshift+0xc8>
 8007558:	e7ea      	b.n	8007530 <__lshift+0xac>
 800755a:	bf00      	nop
 800755c:	08008b77 	.word	0x08008b77
 8007560:	08008be8 	.word	0x08008be8

08007564 <__mcmp>:
 8007564:	b530      	push	{r4, r5, lr}
 8007566:	6902      	ldr	r2, [r0, #16]
 8007568:	690c      	ldr	r4, [r1, #16]
 800756a:	1b12      	subs	r2, r2, r4
 800756c:	d10e      	bne.n	800758c <__mcmp+0x28>
 800756e:	f100 0314 	add.w	r3, r0, #20
 8007572:	3114      	adds	r1, #20
 8007574:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007578:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800757c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007580:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007584:	42a5      	cmp	r5, r4
 8007586:	d003      	beq.n	8007590 <__mcmp+0x2c>
 8007588:	d305      	bcc.n	8007596 <__mcmp+0x32>
 800758a:	2201      	movs	r2, #1
 800758c:	4610      	mov	r0, r2
 800758e:	bd30      	pop	{r4, r5, pc}
 8007590:	4283      	cmp	r3, r0
 8007592:	d3f3      	bcc.n	800757c <__mcmp+0x18>
 8007594:	e7fa      	b.n	800758c <__mcmp+0x28>
 8007596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800759a:	e7f7      	b.n	800758c <__mcmp+0x28>

0800759c <__mdiff>:
 800759c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075a0:	460c      	mov	r4, r1
 80075a2:	4606      	mov	r6, r0
 80075a4:	4611      	mov	r1, r2
 80075a6:	4620      	mov	r0, r4
 80075a8:	4690      	mov	r8, r2
 80075aa:	f7ff ffdb 	bl	8007564 <__mcmp>
 80075ae:	1e05      	subs	r5, r0, #0
 80075b0:	d110      	bne.n	80075d4 <__mdiff+0x38>
 80075b2:	4629      	mov	r1, r5
 80075b4:	4630      	mov	r0, r6
 80075b6:	f7ff fd53 	bl	8007060 <_Balloc>
 80075ba:	b930      	cbnz	r0, 80075ca <__mdiff+0x2e>
 80075bc:	4b3a      	ldr	r3, [pc, #232]	; (80076a8 <__mdiff+0x10c>)
 80075be:	4602      	mov	r2, r0
 80075c0:	f240 2132 	movw	r1, #562	; 0x232
 80075c4:	4839      	ldr	r0, [pc, #228]	; (80076ac <__mdiff+0x110>)
 80075c6:	f000 fc45 	bl	8007e54 <__assert_func>
 80075ca:	2301      	movs	r3, #1
 80075cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d4:	bfa4      	itt	ge
 80075d6:	4643      	movge	r3, r8
 80075d8:	46a0      	movge	r8, r4
 80075da:	4630      	mov	r0, r6
 80075dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80075e0:	bfa6      	itte	ge
 80075e2:	461c      	movge	r4, r3
 80075e4:	2500      	movge	r5, #0
 80075e6:	2501      	movlt	r5, #1
 80075e8:	f7ff fd3a 	bl	8007060 <_Balloc>
 80075ec:	b920      	cbnz	r0, 80075f8 <__mdiff+0x5c>
 80075ee:	4b2e      	ldr	r3, [pc, #184]	; (80076a8 <__mdiff+0x10c>)
 80075f0:	4602      	mov	r2, r0
 80075f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80075f6:	e7e5      	b.n	80075c4 <__mdiff+0x28>
 80075f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80075fc:	6926      	ldr	r6, [r4, #16]
 80075fe:	60c5      	str	r5, [r0, #12]
 8007600:	f104 0914 	add.w	r9, r4, #20
 8007604:	f108 0514 	add.w	r5, r8, #20
 8007608:	f100 0e14 	add.w	lr, r0, #20
 800760c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007610:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007614:	f108 0210 	add.w	r2, r8, #16
 8007618:	46f2      	mov	sl, lr
 800761a:	2100      	movs	r1, #0
 800761c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007620:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007624:	fa1f f883 	uxth.w	r8, r3
 8007628:	fa11 f18b 	uxtah	r1, r1, fp
 800762c:	0c1b      	lsrs	r3, r3, #16
 800762e:	eba1 0808 	sub.w	r8, r1, r8
 8007632:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007636:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800763a:	fa1f f888 	uxth.w	r8, r8
 800763e:	1419      	asrs	r1, r3, #16
 8007640:	454e      	cmp	r6, r9
 8007642:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007646:	f84a 3b04 	str.w	r3, [sl], #4
 800764a:	d8e7      	bhi.n	800761c <__mdiff+0x80>
 800764c:	1b33      	subs	r3, r6, r4
 800764e:	3b15      	subs	r3, #21
 8007650:	f023 0303 	bic.w	r3, r3, #3
 8007654:	3304      	adds	r3, #4
 8007656:	3415      	adds	r4, #21
 8007658:	42a6      	cmp	r6, r4
 800765a:	bf38      	it	cc
 800765c:	2304      	movcc	r3, #4
 800765e:	441d      	add	r5, r3
 8007660:	4473      	add	r3, lr
 8007662:	469e      	mov	lr, r3
 8007664:	462e      	mov	r6, r5
 8007666:	4566      	cmp	r6, ip
 8007668:	d30e      	bcc.n	8007688 <__mdiff+0xec>
 800766a:	f10c 0203 	add.w	r2, ip, #3
 800766e:	1b52      	subs	r2, r2, r5
 8007670:	f022 0203 	bic.w	r2, r2, #3
 8007674:	3d03      	subs	r5, #3
 8007676:	45ac      	cmp	ip, r5
 8007678:	bf38      	it	cc
 800767a:	2200      	movcc	r2, #0
 800767c:	441a      	add	r2, r3
 800767e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007682:	b17b      	cbz	r3, 80076a4 <__mdiff+0x108>
 8007684:	6107      	str	r7, [r0, #16]
 8007686:	e7a3      	b.n	80075d0 <__mdiff+0x34>
 8007688:	f856 8b04 	ldr.w	r8, [r6], #4
 800768c:	fa11 f288 	uxtah	r2, r1, r8
 8007690:	1414      	asrs	r4, r2, #16
 8007692:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007696:	b292      	uxth	r2, r2
 8007698:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800769c:	f84e 2b04 	str.w	r2, [lr], #4
 80076a0:	1421      	asrs	r1, r4, #16
 80076a2:	e7e0      	b.n	8007666 <__mdiff+0xca>
 80076a4:	3f01      	subs	r7, #1
 80076a6:	e7ea      	b.n	800767e <__mdiff+0xe2>
 80076a8:	08008b77 	.word	0x08008b77
 80076ac:	08008be8 	.word	0x08008be8

080076b0 <__d2b>:
 80076b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076b4:	4689      	mov	r9, r1
 80076b6:	2101      	movs	r1, #1
 80076b8:	ec57 6b10 	vmov	r6, r7, d0
 80076bc:	4690      	mov	r8, r2
 80076be:	f7ff fccf 	bl	8007060 <_Balloc>
 80076c2:	4604      	mov	r4, r0
 80076c4:	b930      	cbnz	r0, 80076d4 <__d2b+0x24>
 80076c6:	4602      	mov	r2, r0
 80076c8:	4b25      	ldr	r3, [pc, #148]	; (8007760 <__d2b+0xb0>)
 80076ca:	4826      	ldr	r0, [pc, #152]	; (8007764 <__d2b+0xb4>)
 80076cc:	f240 310a 	movw	r1, #778	; 0x30a
 80076d0:	f000 fbc0 	bl	8007e54 <__assert_func>
 80076d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80076d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80076dc:	bb35      	cbnz	r5, 800772c <__d2b+0x7c>
 80076de:	2e00      	cmp	r6, #0
 80076e0:	9301      	str	r3, [sp, #4]
 80076e2:	d028      	beq.n	8007736 <__d2b+0x86>
 80076e4:	4668      	mov	r0, sp
 80076e6:	9600      	str	r6, [sp, #0]
 80076e8:	f7ff fd82 	bl	80071f0 <__lo0bits>
 80076ec:	9900      	ldr	r1, [sp, #0]
 80076ee:	b300      	cbz	r0, 8007732 <__d2b+0x82>
 80076f0:	9a01      	ldr	r2, [sp, #4]
 80076f2:	f1c0 0320 	rsb	r3, r0, #32
 80076f6:	fa02 f303 	lsl.w	r3, r2, r3
 80076fa:	430b      	orrs	r3, r1
 80076fc:	40c2      	lsrs	r2, r0
 80076fe:	6163      	str	r3, [r4, #20]
 8007700:	9201      	str	r2, [sp, #4]
 8007702:	9b01      	ldr	r3, [sp, #4]
 8007704:	61a3      	str	r3, [r4, #24]
 8007706:	2b00      	cmp	r3, #0
 8007708:	bf14      	ite	ne
 800770a:	2202      	movne	r2, #2
 800770c:	2201      	moveq	r2, #1
 800770e:	6122      	str	r2, [r4, #16]
 8007710:	b1d5      	cbz	r5, 8007748 <__d2b+0x98>
 8007712:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007716:	4405      	add	r5, r0
 8007718:	f8c9 5000 	str.w	r5, [r9]
 800771c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007720:	f8c8 0000 	str.w	r0, [r8]
 8007724:	4620      	mov	r0, r4
 8007726:	b003      	add	sp, #12
 8007728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800772c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007730:	e7d5      	b.n	80076de <__d2b+0x2e>
 8007732:	6161      	str	r1, [r4, #20]
 8007734:	e7e5      	b.n	8007702 <__d2b+0x52>
 8007736:	a801      	add	r0, sp, #4
 8007738:	f7ff fd5a 	bl	80071f0 <__lo0bits>
 800773c:	9b01      	ldr	r3, [sp, #4]
 800773e:	6163      	str	r3, [r4, #20]
 8007740:	2201      	movs	r2, #1
 8007742:	6122      	str	r2, [r4, #16]
 8007744:	3020      	adds	r0, #32
 8007746:	e7e3      	b.n	8007710 <__d2b+0x60>
 8007748:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800774c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007750:	f8c9 0000 	str.w	r0, [r9]
 8007754:	6918      	ldr	r0, [r3, #16]
 8007756:	f7ff fd2b 	bl	80071b0 <__hi0bits>
 800775a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800775e:	e7df      	b.n	8007720 <__d2b+0x70>
 8007760:	08008b77 	.word	0x08008b77
 8007764:	08008be8 	.word	0x08008be8

08007768 <_calloc_r>:
 8007768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800776a:	fba1 2402 	umull	r2, r4, r1, r2
 800776e:	b94c      	cbnz	r4, 8007784 <_calloc_r+0x1c>
 8007770:	4611      	mov	r1, r2
 8007772:	9201      	str	r2, [sp, #4]
 8007774:	f000 f87a 	bl	800786c <_malloc_r>
 8007778:	9a01      	ldr	r2, [sp, #4]
 800777a:	4605      	mov	r5, r0
 800777c:	b930      	cbnz	r0, 800778c <_calloc_r+0x24>
 800777e:	4628      	mov	r0, r5
 8007780:	b003      	add	sp, #12
 8007782:	bd30      	pop	{r4, r5, pc}
 8007784:	220c      	movs	r2, #12
 8007786:	6002      	str	r2, [r0, #0]
 8007788:	2500      	movs	r5, #0
 800778a:	e7f8      	b.n	800777e <_calloc_r+0x16>
 800778c:	4621      	mov	r1, r4
 800778e:	f7fe f85d 	bl	800584c <memset>
 8007792:	e7f4      	b.n	800777e <_calloc_r+0x16>

08007794 <_free_r>:
 8007794:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007796:	2900      	cmp	r1, #0
 8007798:	d044      	beq.n	8007824 <_free_r+0x90>
 800779a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800779e:	9001      	str	r0, [sp, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f1a1 0404 	sub.w	r4, r1, #4
 80077a6:	bfb8      	it	lt
 80077a8:	18e4      	addlt	r4, r4, r3
 80077aa:	f000 fcdf 	bl	800816c <__malloc_lock>
 80077ae:	4a1e      	ldr	r2, [pc, #120]	; (8007828 <_free_r+0x94>)
 80077b0:	9801      	ldr	r0, [sp, #4]
 80077b2:	6813      	ldr	r3, [r2, #0]
 80077b4:	b933      	cbnz	r3, 80077c4 <_free_r+0x30>
 80077b6:	6063      	str	r3, [r4, #4]
 80077b8:	6014      	str	r4, [r2, #0]
 80077ba:	b003      	add	sp, #12
 80077bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077c0:	f000 bcda 	b.w	8008178 <__malloc_unlock>
 80077c4:	42a3      	cmp	r3, r4
 80077c6:	d908      	bls.n	80077da <_free_r+0x46>
 80077c8:	6825      	ldr	r5, [r4, #0]
 80077ca:	1961      	adds	r1, r4, r5
 80077cc:	428b      	cmp	r3, r1
 80077ce:	bf01      	itttt	eq
 80077d0:	6819      	ldreq	r1, [r3, #0]
 80077d2:	685b      	ldreq	r3, [r3, #4]
 80077d4:	1949      	addeq	r1, r1, r5
 80077d6:	6021      	streq	r1, [r4, #0]
 80077d8:	e7ed      	b.n	80077b6 <_free_r+0x22>
 80077da:	461a      	mov	r2, r3
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	b10b      	cbz	r3, 80077e4 <_free_r+0x50>
 80077e0:	42a3      	cmp	r3, r4
 80077e2:	d9fa      	bls.n	80077da <_free_r+0x46>
 80077e4:	6811      	ldr	r1, [r2, #0]
 80077e6:	1855      	adds	r5, r2, r1
 80077e8:	42a5      	cmp	r5, r4
 80077ea:	d10b      	bne.n	8007804 <_free_r+0x70>
 80077ec:	6824      	ldr	r4, [r4, #0]
 80077ee:	4421      	add	r1, r4
 80077f0:	1854      	adds	r4, r2, r1
 80077f2:	42a3      	cmp	r3, r4
 80077f4:	6011      	str	r1, [r2, #0]
 80077f6:	d1e0      	bne.n	80077ba <_free_r+0x26>
 80077f8:	681c      	ldr	r4, [r3, #0]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	6053      	str	r3, [r2, #4]
 80077fe:	4421      	add	r1, r4
 8007800:	6011      	str	r1, [r2, #0]
 8007802:	e7da      	b.n	80077ba <_free_r+0x26>
 8007804:	d902      	bls.n	800780c <_free_r+0x78>
 8007806:	230c      	movs	r3, #12
 8007808:	6003      	str	r3, [r0, #0]
 800780a:	e7d6      	b.n	80077ba <_free_r+0x26>
 800780c:	6825      	ldr	r5, [r4, #0]
 800780e:	1961      	adds	r1, r4, r5
 8007810:	428b      	cmp	r3, r1
 8007812:	bf04      	itt	eq
 8007814:	6819      	ldreq	r1, [r3, #0]
 8007816:	685b      	ldreq	r3, [r3, #4]
 8007818:	6063      	str	r3, [r4, #4]
 800781a:	bf04      	itt	eq
 800781c:	1949      	addeq	r1, r1, r5
 800781e:	6021      	streq	r1, [r4, #0]
 8007820:	6054      	str	r4, [r2, #4]
 8007822:	e7ca      	b.n	80077ba <_free_r+0x26>
 8007824:	b003      	add	sp, #12
 8007826:	bd30      	pop	{r4, r5, pc}
 8007828:	2000041c 	.word	0x2000041c

0800782c <sbrk_aligned>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	4e0e      	ldr	r6, [pc, #56]	; (8007868 <sbrk_aligned+0x3c>)
 8007830:	460c      	mov	r4, r1
 8007832:	6831      	ldr	r1, [r6, #0]
 8007834:	4605      	mov	r5, r0
 8007836:	b911      	cbnz	r1, 800783e <sbrk_aligned+0x12>
 8007838:	f000 f9e6 	bl	8007c08 <_sbrk_r>
 800783c:	6030      	str	r0, [r6, #0]
 800783e:	4621      	mov	r1, r4
 8007840:	4628      	mov	r0, r5
 8007842:	f000 f9e1 	bl	8007c08 <_sbrk_r>
 8007846:	1c43      	adds	r3, r0, #1
 8007848:	d00a      	beq.n	8007860 <sbrk_aligned+0x34>
 800784a:	1cc4      	adds	r4, r0, #3
 800784c:	f024 0403 	bic.w	r4, r4, #3
 8007850:	42a0      	cmp	r0, r4
 8007852:	d007      	beq.n	8007864 <sbrk_aligned+0x38>
 8007854:	1a21      	subs	r1, r4, r0
 8007856:	4628      	mov	r0, r5
 8007858:	f000 f9d6 	bl	8007c08 <_sbrk_r>
 800785c:	3001      	adds	r0, #1
 800785e:	d101      	bne.n	8007864 <sbrk_aligned+0x38>
 8007860:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007864:	4620      	mov	r0, r4
 8007866:	bd70      	pop	{r4, r5, r6, pc}
 8007868:	20000420 	.word	0x20000420

0800786c <_malloc_r>:
 800786c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007870:	1ccd      	adds	r5, r1, #3
 8007872:	f025 0503 	bic.w	r5, r5, #3
 8007876:	3508      	adds	r5, #8
 8007878:	2d0c      	cmp	r5, #12
 800787a:	bf38      	it	cc
 800787c:	250c      	movcc	r5, #12
 800787e:	2d00      	cmp	r5, #0
 8007880:	4607      	mov	r7, r0
 8007882:	db01      	blt.n	8007888 <_malloc_r+0x1c>
 8007884:	42a9      	cmp	r1, r5
 8007886:	d905      	bls.n	8007894 <_malloc_r+0x28>
 8007888:	230c      	movs	r3, #12
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	2600      	movs	r6, #0
 800788e:	4630      	mov	r0, r6
 8007890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007894:	4e2e      	ldr	r6, [pc, #184]	; (8007950 <_malloc_r+0xe4>)
 8007896:	f000 fc69 	bl	800816c <__malloc_lock>
 800789a:	6833      	ldr	r3, [r6, #0]
 800789c:	461c      	mov	r4, r3
 800789e:	bb34      	cbnz	r4, 80078ee <_malloc_r+0x82>
 80078a0:	4629      	mov	r1, r5
 80078a2:	4638      	mov	r0, r7
 80078a4:	f7ff ffc2 	bl	800782c <sbrk_aligned>
 80078a8:	1c43      	adds	r3, r0, #1
 80078aa:	4604      	mov	r4, r0
 80078ac:	d14d      	bne.n	800794a <_malloc_r+0xde>
 80078ae:	6834      	ldr	r4, [r6, #0]
 80078b0:	4626      	mov	r6, r4
 80078b2:	2e00      	cmp	r6, #0
 80078b4:	d140      	bne.n	8007938 <_malloc_r+0xcc>
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	4631      	mov	r1, r6
 80078ba:	4638      	mov	r0, r7
 80078bc:	eb04 0803 	add.w	r8, r4, r3
 80078c0:	f000 f9a2 	bl	8007c08 <_sbrk_r>
 80078c4:	4580      	cmp	r8, r0
 80078c6:	d13a      	bne.n	800793e <_malloc_r+0xd2>
 80078c8:	6821      	ldr	r1, [r4, #0]
 80078ca:	3503      	adds	r5, #3
 80078cc:	1a6d      	subs	r5, r5, r1
 80078ce:	f025 0503 	bic.w	r5, r5, #3
 80078d2:	3508      	adds	r5, #8
 80078d4:	2d0c      	cmp	r5, #12
 80078d6:	bf38      	it	cc
 80078d8:	250c      	movcc	r5, #12
 80078da:	4629      	mov	r1, r5
 80078dc:	4638      	mov	r0, r7
 80078de:	f7ff ffa5 	bl	800782c <sbrk_aligned>
 80078e2:	3001      	adds	r0, #1
 80078e4:	d02b      	beq.n	800793e <_malloc_r+0xd2>
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	442b      	add	r3, r5
 80078ea:	6023      	str	r3, [r4, #0]
 80078ec:	e00e      	b.n	800790c <_malloc_r+0xa0>
 80078ee:	6822      	ldr	r2, [r4, #0]
 80078f0:	1b52      	subs	r2, r2, r5
 80078f2:	d41e      	bmi.n	8007932 <_malloc_r+0xc6>
 80078f4:	2a0b      	cmp	r2, #11
 80078f6:	d916      	bls.n	8007926 <_malloc_r+0xba>
 80078f8:	1961      	adds	r1, r4, r5
 80078fa:	42a3      	cmp	r3, r4
 80078fc:	6025      	str	r5, [r4, #0]
 80078fe:	bf18      	it	ne
 8007900:	6059      	strne	r1, [r3, #4]
 8007902:	6863      	ldr	r3, [r4, #4]
 8007904:	bf08      	it	eq
 8007906:	6031      	streq	r1, [r6, #0]
 8007908:	5162      	str	r2, [r4, r5]
 800790a:	604b      	str	r3, [r1, #4]
 800790c:	4638      	mov	r0, r7
 800790e:	f104 060b 	add.w	r6, r4, #11
 8007912:	f000 fc31 	bl	8008178 <__malloc_unlock>
 8007916:	f026 0607 	bic.w	r6, r6, #7
 800791a:	1d23      	adds	r3, r4, #4
 800791c:	1af2      	subs	r2, r6, r3
 800791e:	d0b6      	beq.n	800788e <_malloc_r+0x22>
 8007920:	1b9b      	subs	r3, r3, r6
 8007922:	50a3      	str	r3, [r4, r2]
 8007924:	e7b3      	b.n	800788e <_malloc_r+0x22>
 8007926:	6862      	ldr	r2, [r4, #4]
 8007928:	42a3      	cmp	r3, r4
 800792a:	bf0c      	ite	eq
 800792c:	6032      	streq	r2, [r6, #0]
 800792e:	605a      	strne	r2, [r3, #4]
 8007930:	e7ec      	b.n	800790c <_malloc_r+0xa0>
 8007932:	4623      	mov	r3, r4
 8007934:	6864      	ldr	r4, [r4, #4]
 8007936:	e7b2      	b.n	800789e <_malloc_r+0x32>
 8007938:	4634      	mov	r4, r6
 800793a:	6876      	ldr	r6, [r6, #4]
 800793c:	e7b9      	b.n	80078b2 <_malloc_r+0x46>
 800793e:	230c      	movs	r3, #12
 8007940:	603b      	str	r3, [r7, #0]
 8007942:	4638      	mov	r0, r7
 8007944:	f000 fc18 	bl	8008178 <__malloc_unlock>
 8007948:	e7a1      	b.n	800788e <_malloc_r+0x22>
 800794a:	6025      	str	r5, [r4, #0]
 800794c:	e7de      	b.n	800790c <_malloc_r+0xa0>
 800794e:	bf00      	nop
 8007950:	2000041c 	.word	0x2000041c

08007954 <__sfputc_r>:
 8007954:	6893      	ldr	r3, [r2, #8]
 8007956:	3b01      	subs	r3, #1
 8007958:	2b00      	cmp	r3, #0
 800795a:	b410      	push	{r4}
 800795c:	6093      	str	r3, [r2, #8]
 800795e:	da08      	bge.n	8007972 <__sfputc_r+0x1e>
 8007960:	6994      	ldr	r4, [r2, #24]
 8007962:	42a3      	cmp	r3, r4
 8007964:	db01      	blt.n	800796a <__sfputc_r+0x16>
 8007966:	290a      	cmp	r1, #10
 8007968:	d103      	bne.n	8007972 <__sfputc_r+0x1e>
 800796a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800796e:	f000 b99f 	b.w	8007cb0 <__swbuf_r>
 8007972:	6813      	ldr	r3, [r2, #0]
 8007974:	1c58      	adds	r0, r3, #1
 8007976:	6010      	str	r0, [r2, #0]
 8007978:	7019      	strb	r1, [r3, #0]
 800797a:	4608      	mov	r0, r1
 800797c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007980:	4770      	bx	lr

08007982 <__sfputs_r>:
 8007982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007984:	4606      	mov	r6, r0
 8007986:	460f      	mov	r7, r1
 8007988:	4614      	mov	r4, r2
 800798a:	18d5      	adds	r5, r2, r3
 800798c:	42ac      	cmp	r4, r5
 800798e:	d101      	bne.n	8007994 <__sfputs_r+0x12>
 8007990:	2000      	movs	r0, #0
 8007992:	e007      	b.n	80079a4 <__sfputs_r+0x22>
 8007994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007998:	463a      	mov	r2, r7
 800799a:	4630      	mov	r0, r6
 800799c:	f7ff ffda 	bl	8007954 <__sfputc_r>
 80079a0:	1c43      	adds	r3, r0, #1
 80079a2:	d1f3      	bne.n	800798c <__sfputs_r+0xa>
 80079a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079a8 <_vfiprintf_r>:
 80079a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ac:	460d      	mov	r5, r1
 80079ae:	b09d      	sub	sp, #116	; 0x74
 80079b0:	4614      	mov	r4, r2
 80079b2:	4698      	mov	r8, r3
 80079b4:	4606      	mov	r6, r0
 80079b6:	b118      	cbz	r0, 80079c0 <_vfiprintf_r+0x18>
 80079b8:	6983      	ldr	r3, [r0, #24]
 80079ba:	b90b      	cbnz	r3, 80079c0 <_vfiprintf_r+0x18>
 80079bc:	f7ff faa2 	bl	8006f04 <__sinit>
 80079c0:	4b89      	ldr	r3, [pc, #548]	; (8007be8 <_vfiprintf_r+0x240>)
 80079c2:	429d      	cmp	r5, r3
 80079c4:	d11b      	bne.n	80079fe <_vfiprintf_r+0x56>
 80079c6:	6875      	ldr	r5, [r6, #4]
 80079c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079ca:	07d9      	lsls	r1, r3, #31
 80079cc:	d405      	bmi.n	80079da <_vfiprintf_r+0x32>
 80079ce:	89ab      	ldrh	r3, [r5, #12]
 80079d0:	059a      	lsls	r2, r3, #22
 80079d2:	d402      	bmi.n	80079da <_vfiprintf_r+0x32>
 80079d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079d6:	f7ff fb38 	bl	800704a <__retarget_lock_acquire_recursive>
 80079da:	89ab      	ldrh	r3, [r5, #12]
 80079dc:	071b      	lsls	r3, r3, #28
 80079de:	d501      	bpl.n	80079e4 <_vfiprintf_r+0x3c>
 80079e0:	692b      	ldr	r3, [r5, #16]
 80079e2:	b9eb      	cbnz	r3, 8007a20 <_vfiprintf_r+0x78>
 80079e4:	4629      	mov	r1, r5
 80079e6:	4630      	mov	r0, r6
 80079e8:	f000 f9c6 	bl	8007d78 <__swsetup_r>
 80079ec:	b1c0      	cbz	r0, 8007a20 <_vfiprintf_r+0x78>
 80079ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079f0:	07dc      	lsls	r4, r3, #31
 80079f2:	d50e      	bpl.n	8007a12 <_vfiprintf_r+0x6a>
 80079f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079f8:	b01d      	add	sp, #116	; 0x74
 80079fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fe:	4b7b      	ldr	r3, [pc, #492]	; (8007bec <_vfiprintf_r+0x244>)
 8007a00:	429d      	cmp	r5, r3
 8007a02:	d101      	bne.n	8007a08 <_vfiprintf_r+0x60>
 8007a04:	68b5      	ldr	r5, [r6, #8]
 8007a06:	e7df      	b.n	80079c8 <_vfiprintf_r+0x20>
 8007a08:	4b79      	ldr	r3, [pc, #484]	; (8007bf0 <_vfiprintf_r+0x248>)
 8007a0a:	429d      	cmp	r5, r3
 8007a0c:	bf08      	it	eq
 8007a0e:	68f5      	ldreq	r5, [r6, #12]
 8007a10:	e7da      	b.n	80079c8 <_vfiprintf_r+0x20>
 8007a12:	89ab      	ldrh	r3, [r5, #12]
 8007a14:	0598      	lsls	r0, r3, #22
 8007a16:	d4ed      	bmi.n	80079f4 <_vfiprintf_r+0x4c>
 8007a18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a1a:	f7ff fb17 	bl	800704c <__retarget_lock_release_recursive>
 8007a1e:	e7e9      	b.n	80079f4 <_vfiprintf_r+0x4c>
 8007a20:	2300      	movs	r3, #0
 8007a22:	9309      	str	r3, [sp, #36]	; 0x24
 8007a24:	2320      	movs	r3, #32
 8007a26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a2e:	2330      	movs	r3, #48	; 0x30
 8007a30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007bf4 <_vfiprintf_r+0x24c>
 8007a34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a38:	f04f 0901 	mov.w	r9, #1
 8007a3c:	4623      	mov	r3, r4
 8007a3e:	469a      	mov	sl, r3
 8007a40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a44:	b10a      	cbz	r2, 8007a4a <_vfiprintf_r+0xa2>
 8007a46:	2a25      	cmp	r2, #37	; 0x25
 8007a48:	d1f9      	bne.n	8007a3e <_vfiprintf_r+0x96>
 8007a4a:	ebba 0b04 	subs.w	fp, sl, r4
 8007a4e:	d00b      	beq.n	8007a68 <_vfiprintf_r+0xc0>
 8007a50:	465b      	mov	r3, fp
 8007a52:	4622      	mov	r2, r4
 8007a54:	4629      	mov	r1, r5
 8007a56:	4630      	mov	r0, r6
 8007a58:	f7ff ff93 	bl	8007982 <__sfputs_r>
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	f000 80aa 	beq.w	8007bb6 <_vfiprintf_r+0x20e>
 8007a62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a64:	445a      	add	r2, fp
 8007a66:	9209      	str	r2, [sp, #36]	; 0x24
 8007a68:	f89a 3000 	ldrb.w	r3, [sl]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	f000 80a2 	beq.w	8007bb6 <_vfiprintf_r+0x20e>
 8007a72:	2300      	movs	r3, #0
 8007a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a7c:	f10a 0a01 	add.w	sl, sl, #1
 8007a80:	9304      	str	r3, [sp, #16]
 8007a82:	9307      	str	r3, [sp, #28]
 8007a84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a88:	931a      	str	r3, [sp, #104]	; 0x68
 8007a8a:	4654      	mov	r4, sl
 8007a8c:	2205      	movs	r2, #5
 8007a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a92:	4858      	ldr	r0, [pc, #352]	; (8007bf4 <_vfiprintf_r+0x24c>)
 8007a94:	f7f8 fba4 	bl	80001e0 <memchr>
 8007a98:	9a04      	ldr	r2, [sp, #16]
 8007a9a:	b9d8      	cbnz	r0, 8007ad4 <_vfiprintf_r+0x12c>
 8007a9c:	06d1      	lsls	r1, r2, #27
 8007a9e:	bf44      	itt	mi
 8007aa0:	2320      	movmi	r3, #32
 8007aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aa6:	0713      	lsls	r3, r2, #28
 8007aa8:	bf44      	itt	mi
 8007aaa:	232b      	movmi	r3, #43	; 0x2b
 8007aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ab4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ab6:	d015      	beq.n	8007ae4 <_vfiprintf_r+0x13c>
 8007ab8:	9a07      	ldr	r2, [sp, #28]
 8007aba:	4654      	mov	r4, sl
 8007abc:	2000      	movs	r0, #0
 8007abe:	f04f 0c0a 	mov.w	ip, #10
 8007ac2:	4621      	mov	r1, r4
 8007ac4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ac8:	3b30      	subs	r3, #48	; 0x30
 8007aca:	2b09      	cmp	r3, #9
 8007acc:	d94e      	bls.n	8007b6c <_vfiprintf_r+0x1c4>
 8007ace:	b1b0      	cbz	r0, 8007afe <_vfiprintf_r+0x156>
 8007ad0:	9207      	str	r2, [sp, #28]
 8007ad2:	e014      	b.n	8007afe <_vfiprintf_r+0x156>
 8007ad4:	eba0 0308 	sub.w	r3, r0, r8
 8007ad8:	fa09 f303 	lsl.w	r3, r9, r3
 8007adc:	4313      	orrs	r3, r2
 8007ade:	9304      	str	r3, [sp, #16]
 8007ae0:	46a2      	mov	sl, r4
 8007ae2:	e7d2      	b.n	8007a8a <_vfiprintf_r+0xe2>
 8007ae4:	9b03      	ldr	r3, [sp, #12]
 8007ae6:	1d19      	adds	r1, r3, #4
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	9103      	str	r1, [sp, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	bfbb      	ittet	lt
 8007af0:	425b      	neglt	r3, r3
 8007af2:	f042 0202 	orrlt.w	r2, r2, #2
 8007af6:	9307      	strge	r3, [sp, #28]
 8007af8:	9307      	strlt	r3, [sp, #28]
 8007afa:	bfb8      	it	lt
 8007afc:	9204      	strlt	r2, [sp, #16]
 8007afe:	7823      	ldrb	r3, [r4, #0]
 8007b00:	2b2e      	cmp	r3, #46	; 0x2e
 8007b02:	d10c      	bne.n	8007b1e <_vfiprintf_r+0x176>
 8007b04:	7863      	ldrb	r3, [r4, #1]
 8007b06:	2b2a      	cmp	r3, #42	; 0x2a
 8007b08:	d135      	bne.n	8007b76 <_vfiprintf_r+0x1ce>
 8007b0a:	9b03      	ldr	r3, [sp, #12]
 8007b0c:	1d1a      	adds	r2, r3, #4
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	9203      	str	r2, [sp, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	bfb8      	it	lt
 8007b16:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007b1a:	3402      	adds	r4, #2
 8007b1c:	9305      	str	r3, [sp, #20]
 8007b1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c04 <_vfiprintf_r+0x25c>
 8007b22:	7821      	ldrb	r1, [r4, #0]
 8007b24:	2203      	movs	r2, #3
 8007b26:	4650      	mov	r0, sl
 8007b28:	f7f8 fb5a 	bl	80001e0 <memchr>
 8007b2c:	b140      	cbz	r0, 8007b40 <_vfiprintf_r+0x198>
 8007b2e:	2340      	movs	r3, #64	; 0x40
 8007b30:	eba0 000a 	sub.w	r0, r0, sl
 8007b34:	fa03 f000 	lsl.w	r0, r3, r0
 8007b38:	9b04      	ldr	r3, [sp, #16]
 8007b3a:	4303      	orrs	r3, r0
 8007b3c:	3401      	adds	r4, #1
 8007b3e:	9304      	str	r3, [sp, #16]
 8007b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b44:	482c      	ldr	r0, [pc, #176]	; (8007bf8 <_vfiprintf_r+0x250>)
 8007b46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b4a:	2206      	movs	r2, #6
 8007b4c:	f7f8 fb48 	bl	80001e0 <memchr>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	d03f      	beq.n	8007bd4 <_vfiprintf_r+0x22c>
 8007b54:	4b29      	ldr	r3, [pc, #164]	; (8007bfc <_vfiprintf_r+0x254>)
 8007b56:	bb1b      	cbnz	r3, 8007ba0 <_vfiprintf_r+0x1f8>
 8007b58:	9b03      	ldr	r3, [sp, #12]
 8007b5a:	3307      	adds	r3, #7
 8007b5c:	f023 0307 	bic.w	r3, r3, #7
 8007b60:	3308      	adds	r3, #8
 8007b62:	9303      	str	r3, [sp, #12]
 8007b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b66:	443b      	add	r3, r7
 8007b68:	9309      	str	r3, [sp, #36]	; 0x24
 8007b6a:	e767      	b.n	8007a3c <_vfiprintf_r+0x94>
 8007b6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b70:	460c      	mov	r4, r1
 8007b72:	2001      	movs	r0, #1
 8007b74:	e7a5      	b.n	8007ac2 <_vfiprintf_r+0x11a>
 8007b76:	2300      	movs	r3, #0
 8007b78:	3401      	adds	r4, #1
 8007b7a:	9305      	str	r3, [sp, #20]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	f04f 0c0a 	mov.w	ip, #10
 8007b82:	4620      	mov	r0, r4
 8007b84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b88:	3a30      	subs	r2, #48	; 0x30
 8007b8a:	2a09      	cmp	r2, #9
 8007b8c:	d903      	bls.n	8007b96 <_vfiprintf_r+0x1ee>
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0c5      	beq.n	8007b1e <_vfiprintf_r+0x176>
 8007b92:	9105      	str	r1, [sp, #20]
 8007b94:	e7c3      	b.n	8007b1e <_vfiprintf_r+0x176>
 8007b96:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e7f0      	b.n	8007b82 <_vfiprintf_r+0x1da>
 8007ba0:	ab03      	add	r3, sp, #12
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	462a      	mov	r2, r5
 8007ba6:	4b16      	ldr	r3, [pc, #88]	; (8007c00 <_vfiprintf_r+0x258>)
 8007ba8:	a904      	add	r1, sp, #16
 8007baa:	4630      	mov	r0, r6
 8007bac:	f7fd fef6 	bl	800599c <_printf_float>
 8007bb0:	4607      	mov	r7, r0
 8007bb2:	1c78      	adds	r0, r7, #1
 8007bb4:	d1d6      	bne.n	8007b64 <_vfiprintf_r+0x1bc>
 8007bb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bb8:	07d9      	lsls	r1, r3, #31
 8007bba:	d405      	bmi.n	8007bc8 <_vfiprintf_r+0x220>
 8007bbc:	89ab      	ldrh	r3, [r5, #12]
 8007bbe:	059a      	lsls	r2, r3, #22
 8007bc0:	d402      	bmi.n	8007bc8 <_vfiprintf_r+0x220>
 8007bc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bc4:	f7ff fa42 	bl	800704c <__retarget_lock_release_recursive>
 8007bc8:	89ab      	ldrh	r3, [r5, #12]
 8007bca:	065b      	lsls	r3, r3, #25
 8007bcc:	f53f af12 	bmi.w	80079f4 <_vfiprintf_r+0x4c>
 8007bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bd2:	e711      	b.n	80079f8 <_vfiprintf_r+0x50>
 8007bd4:	ab03      	add	r3, sp, #12
 8007bd6:	9300      	str	r3, [sp, #0]
 8007bd8:	462a      	mov	r2, r5
 8007bda:	4b09      	ldr	r3, [pc, #36]	; (8007c00 <_vfiprintf_r+0x258>)
 8007bdc:	a904      	add	r1, sp, #16
 8007bde:	4630      	mov	r0, r6
 8007be0:	f7fe f980 	bl	8005ee4 <_printf_i>
 8007be4:	e7e4      	b.n	8007bb0 <_vfiprintf_r+0x208>
 8007be6:	bf00      	nop
 8007be8:	08008ba8 	.word	0x08008ba8
 8007bec:	08008bc8 	.word	0x08008bc8
 8007bf0:	08008b88 	.word	0x08008b88
 8007bf4:	08008d44 	.word	0x08008d44
 8007bf8:	08008d4e 	.word	0x08008d4e
 8007bfc:	0800599d 	.word	0x0800599d
 8007c00:	08007983 	.word	0x08007983
 8007c04:	08008d4a 	.word	0x08008d4a

08007c08 <_sbrk_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	4d06      	ldr	r5, [pc, #24]	; (8007c24 <_sbrk_r+0x1c>)
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	4604      	mov	r4, r0
 8007c10:	4608      	mov	r0, r1
 8007c12:	602b      	str	r3, [r5, #0]
 8007c14:	f7fb fdc0 	bl	8003798 <_sbrk>
 8007c18:	1c43      	adds	r3, r0, #1
 8007c1a:	d102      	bne.n	8007c22 <_sbrk_r+0x1a>
 8007c1c:	682b      	ldr	r3, [r5, #0]
 8007c1e:	b103      	cbz	r3, 8007c22 <_sbrk_r+0x1a>
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	bd38      	pop	{r3, r4, r5, pc}
 8007c24:	20000424 	.word	0x20000424

08007c28 <__sread>:
 8007c28:	b510      	push	{r4, lr}
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c30:	f000 faa8 	bl	8008184 <_read_r>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	bfab      	itete	ge
 8007c38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c3a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c3c:	181b      	addge	r3, r3, r0
 8007c3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c42:	bfac      	ite	ge
 8007c44:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c46:	81a3      	strhlt	r3, [r4, #12]
 8007c48:	bd10      	pop	{r4, pc}

08007c4a <__swrite>:
 8007c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c4e:	461f      	mov	r7, r3
 8007c50:	898b      	ldrh	r3, [r1, #12]
 8007c52:	05db      	lsls	r3, r3, #23
 8007c54:	4605      	mov	r5, r0
 8007c56:	460c      	mov	r4, r1
 8007c58:	4616      	mov	r6, r2
 8007c5a:	d505      	bpl.n	8007c68 <__swrite+0x1e>
 8007c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c60:	2302      	movs	r3, #2
 8007c62:	2200      	movs	r2, #0
 8007c64:	f000 f9f8 	bl	8008058 <_lseek_r>
 8007c68:	89a3      	ldrh	r3, [r4, #12]
 8007c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c72:	81a3      	strh	r3, [r4, #12]
 8007c74:	4632      	mov	r2, r6
 8007c76:	463b      	mov	r3, r7
 8007c78:	4628      	mov	r0, r5
 8007c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7e:	f000 b869 	b.w	8007d54 <_write_r>

08007c82 <__sseek>:
 8007c82:	b510      	push	{r4, lr}
 8007c84:	460c      	mov	r4, r1
 8007c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c8a:	f000 f9e5 	bl	8008058 <_lseek_r>
 8007c8e:	1c43      	adds	r3, r0, #1
 8007c90:	89a3      	ldrh	r3, [r4, #12]
 8007c92:	bf15      	itete	ne
 8007c94:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c9e:	81a3      	strheq	r3, [r4, #12]
 8007ca0:	bf18      	it	ne
 8007ca2:	81a3      	strhne	r3, [r4, #12]
 8007ca4:	bd10      	pop	{r4, pc}

08007ca6 <__sclose>:
 8007ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007caa:	f000 b8f1 	b.w	8007e90 <_close_r>
	...

08007cb0 <__swbuf_r>:
 8007cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb2:	460e      	mov	r6, r1
 8007cb4:	4614      	mov	r4, r2
 8007cb6:	4605      	mov	r5, r0
 8007cb8:	b118      	cbz	r0, 8007cc2 <__swbuf_r+0x12>
 8007cba:	6983      	ldr	r3, [r0, #24]
 8007cbc:	b90b      	cbnz	r3, 8007cc2 <__swbuf_r+0x12>
 8007cbe:	f7ff f921 	bl	8006f04 <__sinit>
 8007cc2:	4b21      	ldr	r3, [pc, #132]	; (8007d48 <__swbuf_r+0x98>)
 8007cc4:	429c      	cmp	r4, r3
 8007cc6:	d12b      	bne.n	8007d20 <__swbuf_r+0x70>
 8007cc8:	686c      	ldr	r4, [r5, #4]
 8007cca:	69a3      	ldr	r3, [r4, #24]
 8007ccc:	60a3      	str	r3, [r4, #8]
 8007cce:	89a3      	ldrh	r3, [r4, #12]
 8007cd0:	071a      	lsls	r2, r3, #28
 8007cd2:	d52f      	bpl.n	8007d34 <__swbuf_r+0x84>
 8007cd4:	6923      	ldr	r3, [r4, #16]
 8007cd6:	b36b      	cbz	r3, 8007d34 <__swbuf_r+0x84>
 8007cd8:	6923      	ldr	r3, [r4, #16]
 8007cda:	6820      	ldr	r0, [r4, #0]
 8007cdc:	1ac0      	subs	r0, r0, r3
 8007cde:	6963      	ldr	r3, [r4, #20]
 8007ce0:	b2f6      	uxtb	r6, r6
 8007ce2:	4283      	cmp	r3, r0
 8007ce4:	4637      	mov	r7, r6
 8007ce6:	dc04      	bgt.n	8007cf2 <__swbuf_r+0x42>
 8007ce8:	4621      	mov	r1, r4
 8007cea:	4628      	mov	r0, r5
 8007cec:	f000 f966 	bl	8007fbc <_fflush_r>
 8007cf0:	bb30      	cbnz	r0, 8007d40 <__swbuf_r+0x90>
 8007cf2:	68a3      	ldr	r3, [r4, #8]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	60a3      	str	r3, [r4, #8]
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	1c5a      	adds	r2, r3, #1
 8007cfc:	6022      	str	r2, [r4, #0]
 8007cfe:	701e      	strb	r6, [r3, #0]
 8007d00:	6963      	ldr	r3, [r4, #20]
 8007d02:	3001      	adds	r0, #1
 8007d04:	4283      	cmp	r3, r0
 8007d06:	d004      	beq.n	8007d12 <__swbuf_r+0x62>
 8007d08:	89a3      	ldrh	r3, [r4, #12]
 8007d0a:	07db      	lsls	r3, r3, #31
 8007d0c:	d506      	bpl.n	8007d1c <__swbuf_r+0x6c>
 8007d0e:	2e0a      	cmp	r6, #10
 8007d10:	d104      	bne.n	8007d1c <__swbuf_r+0x6c>
 8007d12:	4621      	mov	r1, r4
 8007d14:	4628      	mov	r0, r5
 8007d16:	f000 f951 	bl	8007fbc <_fflush_r>
 8007d1a:	b988      	cbnz	r0, 8007d40 <__swbuf_r+0x90>
 8007d1c:	4638      	mov	r0, r7
 8007d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d20:	4b0a      	ldr	r3, [pc, #40]	; (8007d4c <__swbuf_r+0x9c>)
 8007d22:	429c      	cmp	r4, r3
 8007d24:	d101      	bne.n	8007d2a <__swbuf_r+0x7a>
 8007d26:	68ac      	ldr	r4, [r5, #8]
 8007d28:	e7cf      	b.n	8007cca <__swbuf_r+0x1a>
 8007d2a:	4b09      	ldr	r3, [pc, #36]	; (8007d50 <__swbuf_r+0xa0>)
 8007d2c:	429c      	cmp	r4, r3
 8007d2e:	bf08      	it	eq
 8007d30:	68ec      	ldreq	r4, [r5, #12]
 8007d32:	e7ca      	b.n	8007cca <__swbuf_r+0x1a>
 8007d34:	4621      	mov	r1, r4
 8007d36:	4628      	mov	r0, r5
 8007d38:	f000 f81e 	bl	8007d78 <__swsetup_r>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d0cb      	beq.n	8007cd8 <__swbuf_r+0x28>
 8007d40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007d44:	e7ea      	b.n	8007d1c <__swbuf_r+0x6c>
 8007d46:	bf00      	nop
 8007d48:	08008ba8 	.word	0x08008ba8
 8007d4c:	08008bc8 	.word	0x08008bc8
 8007d50:	08008b88 	.word	0x08008b88

08007d54 <_write_r>:
 8007d54:	b538      	push	{r3, r4, r5, lr}
 8007d56:	4d07      	ldr	r5, [pc, #28]	; (8007d74 <_write_r+0x20>)
 8007d58:	4604      	mov	r4, r0
 8007d5a:	4608      	mov	r0, r1
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	2200      	movs	r2, #0
 8007d60:	602a      	str	r2, [r5, #0]
 8007d62:	461a      	mov	r2, r3
 8007d64:	f7fc fa98 	bl	8004298 <_write>
 8007d68:	1c43      	adds	r3, r0, #1
 8007d6a:	d102      	bne.n	8007d72 <_write_r+0x1e>
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	b103      	cbz	r3, 8007d72 <_write_r+0x1e>
 8007d70:	6023      	str	r3, [r4, #0]
 8007d72:	bd38      	pop	{r3, r4, r5, pc}
 8007d74:	20000424 	.word	0x20000424

08007d78 <__swsetup_r>:
 8007d78:	4b32      	ldr	r3, [pc, #200]	; (8007e44 <__swsetup_r+0xcc>)
 8007d7a:	b570      	push	{r4, r5, r6, lr}
 8007d7c:	681d      	ldr	r5, [r3, #0]
 8007d7e:	4606      	mov	r6, r0
 8007d80:	460c      	mov	r4, r1
 8007d82:	b125      	cbz	r5, 8007d8e <__swsetup_r+0x16>
 8007d84:	69ab      	ldr	r3, [r5, #24]
 8007d86:	b913      	cbnz	r3, 8007d8e <__swsetup_r+0x16>
 8007d88:	4628      	mov	r0, r5
 8007d8a:	f7ff f8bb 	bl	8006f04 <__sinit>
 8007d8e:	4b2e      	ldr	r3, [pc, #184]	; (8007e48 <__swsetup_r+0xd0>)
 8007d90:	429c      	cmp	r4, r3
 8007d92:	d10f      	bne.n	8007db4 <__swsetup_r+0x3c>
 8007d94:	686c      	ldr	r4, [r5, #4]
 8007d96:	89a3      	ldrh	r3, [r4, #12]
 8007d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d9c:	0719      	lsls	r1, r3, #28
 8007d9e:	d42c      	bmi.n	8007dfa <__swsetup_r+0x82>
 8007da0:	06dd      	lsls	r5, r3, #27
 8007da2:	d411      	bmi.n	8007dc8 <__swsetup_r+0x50>
 8007da4:	2309      	movs	r3, #9
 8007da6:	6033      	str	r3, [r6, #0]
 8007da8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007dac:	81a3      	strh	r3, [r4, #12]
 8007dae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007db2:	e03e      	b.n	8007e32 <__swsetup_r+0xba>
 8007db4:	4b25      	ldr	r3, [pc, #148]	; (8007e4c <__swsetup_r+0xd4>)
 8007db6:	429c      	cmp	r4, r3
 8007db8:	d101      	bne.n	8007dbe <__swsetup_r+0x46>
 8007dba:	68ac      	ldr	r4, [r5, #8]
 8007dbc:	e7eb      	b.n	8007d96 <__swsetup_r+0x1e>
 8007dbe:	4b24      	ldr	r3, [pc, #144]	; (8007e50 <__swsetup_r+0xd8>)
 8007dc0:	429c      	cmp	r4, r3
 8007dc2:	bf08      	it	eq
 8007dc4:	68ec      	ldreq	r4, [r5, #12]
 8007dc6:	e7e6      	b.n	8007d96 <__swsetup_r+0x1e>
 8007dc8:	0758      	lsls	r0, r3, #29
 8007dca:	d512      	bpl.n	8007df2 <__swsetup_r+0x7a>
 8007dcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dce:	b141      	cbz	r1, 8007de2 <__swsetup_r+0x6a>
 8007dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dd4:	4299      	cmp	r1, r3
 8007dd6:	d002      	beq.n	8007dde <__swsetup_r+0x66>
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f7ff fcdb 	bl	8007794 <_free_r>
 8007dde:	2300      	movs	r3, #0
 8007de0:	6363      	str	r3, [r4, #52]	; 0x34
 8007de2:	89a3      	ldrh	r3, [r4, #12]
 8007de4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007de8:	81a3      	strh	r3, [r4, #12]
 8007dea:	2300      	movs	r3, #0
 8007dec:	6063      	str	r3, [r4, #4]
 8007dee:	6923      	ldr	r3, [r4, #16]
 8007df0:	6023      	str	r3, [r4, #0]
 8007df2:	89a3      	ldrh	r3, [r4, #12]
 8007df4:	f043 0308 	orr.w	r3, r3, #8
 8007df8:	81a3      	strh	r3, [r4, #12]
 8007dfa:	6923      	ldr	r3, [r4, #16]
 8007dfc:	b94b      	cbnz	r3, 8007e12 <__swsetup_r+0x9a>
 8007dfe:	89a3      	ldrh	r3, [r4, #12]
 8007e00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e08:	d003      	beq.n	8007e12 <__swsetup_r+0x9a>
 8007e0a:	4621      	mov	r1, r4
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	f000 f95b 	bl	80080c8 <__smakebuf_r>
 8007e12:	89a0      	ldrh	r0, [r4, #12]
 8007e14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e18:	f010 0301 	ands.w	r3, r0, #1
 8007e1c:	d00a      	beq.n	8007e34 <__swsetup_r+0xbc>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	60a3      	str	r3, [r4, #8]
 8007e22:	6963      	ldr	r3, [r4, #20]
 8007e24:	425b      	negs	r3, r3
 8007e26:	61a3      	str	r3, [r4, #24]
 8007e28:	6923      	ldr	r3, [r4, #16]
 8007e2a:	b943      	cbnz	r3, 8007e3e <__swsetup_r+0xc6>
 8007e2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e30:	d1ba      	bne.n	8007da8 <__swsetup_r+0x30>
 8007e32:	bd70      	pop	{r4, r5, r6, pc}
 8007e34:	0781      	lsls	r1, r0, #30
 8007e36:	bf58      	it	pl
 8007e38:	6963      	ldrpl	r3, [r4, #20]
 8007e3a:	60a3      	str	r3, [r4, #8]
 8007e3c:	e7f4      	b.n	8007e28 <__swsetup_r+0xb0>
 8007e3e:	2000      	movs	r0, #0
 8007e40:	e7f7      	b.n	8007e32 <__swsetup_r+0xba>
 8007e42:	bf00      	nop
 8007e44:	20000018 	.word	0x20000018
 8007e48:	08008ba8 	.word	0x08008ba8
 8007e4c:	08008bc8 	.word	0x08008bc8
 8007e50:	08008b88 	.word	0x08008b88

08007e54 <__assert_func>:
 8007e54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e56:	4614      	mov	r4, r2
 8007e58:	461a      	mov	r2, r3
 8007e5a:	4b09      	ldr	r3, [pc, #36]	; (8007e80 <__assert_func+0x2c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4605      	mov	r5, r0
 8007e60:	68d8      	ldr	r0, [r3, #12]
 8007e62:	b14c      	cbz	r4, 8007e78 <__assert_func+0x24>
 8007e64:	4b07      	ldr	r3, [pc, #28]	; (8007e84 <__assert_func+0x30>)
 8007e66:	9100      	str	r1, [sp, #0]
 8007e68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e6c:	4906      	ldr	r1, [pc, #24]	; (8007e88 <__assert_func+0x34>)
 8007e6e:	462b      	mov	r3, r5
 8007e70:	f000 f8e0 	bl	8008034 <fiprintf>
 8007e74:	f000 f9a5 	bl	80081c2 <abort>
 8007e78:	4b04      	ldr	r3, [pc, #16]	; (8007e8c <__assert_func+0x38>)
 8007e7a:	461c      	mov	r4, r3
 8007e7c:	e7f3      	b.n	8007e66 <__assert_func+0x12>
 8007e7e:	bf00      	nop
 8007e80:	20000018 	.word	0x20000018
 8007e84:	08008d55 	.word	0x08008d55
 8007e88:	08008d62 	.word	0x08008d62
 8007e8c:	08008d90 	.word	0x08008d90

08007e90 <_close_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	4d06      	ldr	r5, [pc, #24]	; (8007eac <_close_r+0x1c>)
 8007e94:	2300      	movs	r3, #0
 8007e96:	4604      	mov	r4, r0
 8007e98:	4608      	mov	r0, r1
 8007e9a:	602b      	str	r3, [r5, #0]
 8007e9c:	f7fb fc47 	bl	800372e <_close>
 8007ea0:	1c43      	adds	r3, r0, #1
 8007ea2:	d102      	bne.n	8007eaa <_close_r+0x1a>
 8007ea4:	682b      	ldr	r3, [r5, #0]
 8007ea6:	b103      	cbz	r3, 8007eaa <_close_r+0x1a>
 8007ea8:	6023      	str	r3, [r4, #0]
 8007eaa:	bd38      	pop	{r3, r4, r5, pc}
 8007eac:	20000424 	.word	0x20000424

08007eb0 <__sflush_r>:
 8007eb0:	898a      	ldrh	r2, [r1, #12]
 8007eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	0710      	lsls	r0, r2, #28
 8007eba:	460c      	mov	r4, r1
 8007ebc:	d458      	bmi.n	8007f70 <__sflush_r+0xc0>
 8007ebe:	684b      	ldr	r3, [r1, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	dc05      	bgt.n	8007ed0 <__sflush_r+0x20>
 8007ec4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	dc02      	bgt.n	8007ed0 <__sflush_r+0x20>
 8007eca:	2000      	movs	r0, #0
 8007ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ed0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ed2:	2e00      	cmp	r6, #0
 8007ed4:	d0f9      	beq.n	8007eca <__sflush_r+0x1a>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007edc:	682f      	ldr	r7, [r5, #0]
 8007ede:	602b      	str	r3, [r5, #0]
 8007ee0:	d032      	beq.n	8007f48 <__sflush_r+0x98>
 8007ee2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ee4:	89a3      	ldrh	r3, [r4, #12]
 8007ee6:	075a      	lsls	r2, r3, #29
 8007ee8:	d505      	bpl.n	8007ef6 <__sflush_r+0x46>
 8007eea:	6863      	ldr	r3, [r4, #4]
 8007eec:	1ac0      	subs	r0, r0, r3
 8007eee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ef0:	b10b      	cbz	r3, 8007ef6 <__sflush_r+0x46>
 8007ef2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ef4:	1ac0      	subs	r0, r0, r3
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	4602      	mov	r2, r0
 8007efa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007efc:	6a21      	ldr	r1, [r4, #32]
 8007efe:	4628      	mov	r0, r5
 8007f00:	47b0      	blx	r6
 8007f02:	1c43      	adds	r3, r0, #1
 8007f04:	89a3      	ldrh	r3, [r4, #12]
 8007f06:	d106      	bne.n	8007f16 <__sflush_r+0x66>
 8007f08:	6829      	ldr	r1, [r5, #0]
 8007f0a:	291d      	cmp	r1, #29
 8007f0c:	d82c      	bhi.n	8007f68 <__sflush_r+0xb8>
 8007f0e:	4a2a      	ldr	r2, [pc, #168]	; (8007fb8 <__sflush_r+0x108>)
 8007f10:	40ca      	lsrs	r2, r1
 8007f12:	07d6      	lsls	r6, r2, #31
 8007f14:	d528      	bpl.n	8007f68 <__sflush_r+0xb8>
 8007f16:	2200      	movs	r2, #0
 8007f18:	6062      	str	r2, [r4, #4]
 8007f1a:	04d9      	lsls	r1, r3, #19
 8007f1c:	6922      	ldr	r2, [r4, #16]
 8007f1e:	6022      	str	r2, [r4, #0]
 8007f20:	d504      	bpl.n	8007f2c <__sflush_r+0x7c>
 8007f22:	1c42      	adds	r2, r0, #1
 8007f24:	d101      	bne.n	8007f2a <__sflush_r+0x7a>
 8007f26:	682b      	ldr	r3, [r5, #0]
 8007f28:	b903      	cbnz	r3, 8007f2c <__sflush_r+0x7c>
 8007f2a:	6560      	str	r0, [r4, #84]	; 0x54
 8007f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f2e:	602f      	str	r7, [r5, #0]
 8007f30:	2900      	cmp	r1, #0
 8007f32:	d0ca      	beq.n	8007eca <__sflush_r+0x1a>
 8007f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f38:	4299      	cmp	r1, r3
 8007f3a:	d002      	beq.n	8007f42 <__sflush_r+0x92>
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	f7ff fc29 	bl	8007794 <_free_r>
 8007f42:	2000      	movs	r0, #0
 8007f44:	6360      	str	r0, [r4, #52]	; 0x34
 8007f46:	e7c1      	b.n	8007ecc <__sflush_r+0x1c>
 8007f48:	6a21      	ldr	r1, [r4, #32]
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	47b0      	blx	r6
 8007f50:	1c41      	adds	r1, r0, #1
 8007f52:	d1c7      	bne.n	8007ee4 <__sflush_r+0x34>
 8007f54:	682b      	ldr	r3, [r5, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d0c4      	beq.n	8007ee4 <__sflush_r+0x34>
 8007f5a:	2b1d      	cmp	r3, #29
 8007f5c:	d001      	beq.n	8007f62 <__sflush_r+0xb2>
 8007f5e:	2b16      	cmp	r3, #22
 8007f60:	d101      	bne.n	8007f66 <__sflush_r+0xb6>
 8007f62:	602f      	str	r7, [r5, #0]
 8007f64:	e7b1      	b.n	8007eca <__sflush_r+0x1a>
 8007f66:	89a3      	ldrh	r3, [r4, #12]
 8007f68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f6c:	81a3      	strh	r3, [r4, #12]
 8007f6e:	e7ad      	b.n	8007ecc <__sflush_r+0x1c>
 8007f70:	690f      	ldr	r7, [r1, #16]
 8007f72:	2f00      	cmp	r7, #0
 8007f74:	d0a9      	beq.n	8007eca <__sflush_r+0x1a>
 8007f76:	0793      	lsls	r3, r2, #30
 8007f78:	680e      	ldr	r6, [r1, #0]
 8007f7a:	bf08      	it	eq
 8007f7c:	694b      	ldreq	r3, [r1, #20]
 8007f7e:	600f      	str	r7, [r1, #0]
 8007f80:	bf18      	it	ne
 8007f82:	2300      	movne	r3, #0
 8007f84:	eba6 0807 	sub.w	r8, r6, r7
 8007f88:	608b      	str	r3, [r1, #8]
 8007f8a:	f1b8 0f00 	cmp.w	r8, #0
 8007f8e:	dd9c      	ble.n	8007eca <__sflush_r+0x1a>
 8007f90:	6a21      	ldr	r1, [r4, #32]
 8007f92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f94:	4643      	mov	r3, r8
 8007f96:	463a      	mov	r2, r7
 8007f98:	4628      	mov	r0, r5
 8007f9a:	47b0      	blx	r6
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	dc06      	bgt.n	8007fae <__sflush_r+0xfe>
 8007fa0:	89a3      	ldrh	r3, [r4, #12]
 8007fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fa6:	81a3      	strh	r3, [r4, #12]
 8007fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fac:	e78e      	b.n	8007ecc <__sflush_r+0x1c>
 8007fae:	4407      	add	r7, r0
 8007fb0:	eba8 0800 	sub.w	r8, r8, r0
 8007fb4:	e7e9      	b.n	8007f8a <__sflush_r+0xda>
 8007fb6:	bf00      	nop
 8007fb8:	20400001 	.word	0x20400001

08007fbc <_fflush_r>:
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	690b      	ldr	r3, [r1, #16]
 8007fc0:	4605      	mov	r5, r0
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	b913      	cbnz	r3, 8007fcc <_fflush_r+0x10>
 8007fc6:	2500      	movs	r5, #0
 8007fc8:	4628      	mov	r0, r5
 8007fca:	bd38      	pop	{r3, r4, r5, pc}
 8007fcc:	b118      	cbz	r0, 8007fd6 <_fflush_r+0x1a>
 8007fce:	6983      	ldr	r3, [r0, #24]
 8007fd0:	b90b      	cbnz	r3, 8007fd6 <_fflush_r+0x1a>
 8007fd2:	f7fe ff97 	bl	8006f04 <__sinit>
 8007fd6:	4b14      	ldr	r3, [pc, #80]	; (8008028 <_fflush_r+0x6c>)
 8007fd8:	429c      	cmp	r4, r3
 8007fda:	d11b      	bne.n	8008014 <_fflush_r+0x58>
 8007fdc:	686c      	ldr	r4, [r5, #4]
 8007fde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d0ef      	beq.n	8007fc6 <_fflush_r+0xa>
 8007fe6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fe8:	07d0      	lsls	r0, r2, #31
 8007fea:	d404      	bmi.n	8007ff6 <_fflush_r+0x3a>
 8007fec:	0599      	lsls	r1, r3, #22
 8007fee:	d402      	bmi.n	8007ff6 <_fflush_r+0x3a>
 8007ff0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ff2:	f7ff f82a 	bl	800704a <__retarget_lock_acquire_recursive>
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	f7ff ff59 	bl	8007eb0 <__sflush_r>
 8007ffe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008000:	07da      	lsls	r2, r3, #31
 8008002:	4605      	mov	r5, r0
 8008004:	d4e0      	bmi.n	8007fc8 <_fflush_r+0xc>
 8008006:	89a3      	ldrh	r3, [r4, #12]
 8008008:	059b      	lsls	r3, r3, #22
 800800a:	d4dd      	bmi.n	8007fc8 <_fflush_r+0xc>
 800800c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800800e:	f7ff f81d 	bl	800704c <__retarget_lock_release_recursive>
 8008012:	e7d9      	b.n	8007fc8 <_fflush_r+0xc>
 8008014:	4b05      	ldr	r3, [pc, #20]	; (800802c <_fflush_r+0x70>)
 8008016:	429c      	cmp	r4, r3
 8008018:	d101      	bne.n	800801e <_fflush_r+0x62>
 800801a:	68ac      	ldr	r4, [r5, #8]
 800801c:	e7df      	b.n	8007fde <_fflush_r+0x22>
 800801e:	4b04      	ldr	r3, [pc, #16]	; (8008030 <_fflush_r+0x74>)
 8008020:	429c      	cmp	r4, r3
 8008022:	bf08      	it	eq
 8008024:	68ec      	ldreq	r4, [r5, #12]
 8008026:	e7da      	b.n	8007fde <_fflush_r+0x22>
 8008028:	08008ba8 	.word	0x08008ba8
 800802c:	08008bc8 	.word	0x08008bc8
 8008030:	08008b88 	.word	0x08008b88

08008034 <fiprintf>:
 8008034:	b40e      	push	{r1, r2, r3}
 8008036:	b503      	push	{r0, r1, lr}
 8008038:	4601      	mov	r1, r0
 800803a:	ab03      	add	r3, sp, #12
 800803c:	4805      	ldr	r0, [pc, #20]	; (8008054 <fiprintf+0x20>)
 800803e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008042:	6800      	ldr	r0, [r0, #0]
 8008044:	9301      	str	r3, [sp, #4]
 8008046:	f7ff fcaf 	bl	80079a8 <_vfiprintf_r>
 800804a:	b002      	add	sp, #8
 800804c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008050:	b003      	add	sp, #12
 8008052:	4770      	bx	lr
 8008054:	20000018 	.word	0x20000018

08008058 <_lseek_r>:
 8008058:	b538      	push	{r3, r4, r5, lr}
 800805a:	4d07      	ldr	r5, [pc, #28]	; (8008078 <_lseek_r+0x20>)
 800805c:	4604      	mov	r4, r0
 800805e:	4608      	mov	r0, r1
 8008060:	4611      	mov	r1, r2
 8008062:	2200      	movs	r2, #0
 8008064:	602a      	str	r2, [r5, #0]
 8008066:	461a      	mov	r2, r3
 8008068:	f7fb fb88 	bl	800377c <_lseek>
 800806c:	1c43      	adds	r3, r0, #1
 800806e:	d102      	bne.n	8008076 <_lseek_r+0x1e>
 8008070:	682b      	ldr	r3, [r5, #0]
 8008072:	b103      	cbz	r3, 8008076 <_lseek_r+0x1e>
 8008074:	6023      	str	r3, [r4, #0]
 8008076:	bd38      	pop	{r3, r4, r5, pc}
 8008078:	20000424 	.word	0x20000424

0800807c <__swhatbuf_r>:
 800807c:	b570      	push	{r4, r5, r6, lr}
 800807e:	460e      	mov	r6, r1
 8008080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008084:	2900      	cmp	r1, #0
 8008086:	b096      	sub	sp, #88	; 0x58
 8008088:	4614      	mov	r4, r2
 800808a:	461d      	mov	r5, r3
 800808c:	da08      	bge.n	80080a0 <__swhatbuf_r+0x24>
 800808e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	602a      	str	r2, [r5, #0]
 8008096:	061a      	lsls	r2, r3, #24
 8008098:	d410      	bmi.n	80080bc <__swhatbuf_r+0x40>
 800809a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800809e:	e00e      	b.n	80080be <__swhatbuf_r+0x42>
 80080a0:	466a      	mov	r2, sp
 80080a2:	f000 f895 	bl	80081d0 <_fstat_r>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	dbf1      	blt.n	800808e <__swhatbuf_r+0x12>
 80080aa:	9a01      	ldr	r2, [sp, #4]
 80080ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080b4:	425a      	negs	r2, r3
 80080b6:	415a      	adcs	r2, r3
 80080b8:	602a      	str	r2, [r5, #0]
 80080ba:	e7ee      	b.n	800809a <__swhatbuf_r+0x1e>
 80080bc:	2340      	movs	r3, #64	; 0x40
 80080be:	2000      	movs	r0, #0
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	b016      	add	sp, #88	; 0x58
 80080c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080080c8 <__smakebuf_r>:
 80080c8:	898b      	ldrh	r3, [r1, #12]
 80080ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080cc:	079d      	lsls	r5, r3, #30
 80080ce:	4606      	mov	r6, r0
 80080d0:	460c      	mov	r4, r1
 80080d2:	d507      	bpl.n	80080e4 <__smakebuf_r+0x1c>
 80080d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	6123      	str	r3, [r4, #16]
 80080dc:	2301      	movs	r3, #1
 80080de:	6163      	str	r3, [r4, #20]
 80080e0:	b002      	add	sp, #8
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	ab01      	add	r3, sp, #4
 80080e6:	466a      	mov	r2, sp
 80080e8:	f7ff ffc8 	bl	800807c <__swhatbuf_r>
 80080ec:	9900      	ldr	r1, [sp, #0]
 80080ee:	4605      	mov	r5, r0
 80080f0:	4630      	mov	r0, r6
 80080f2:	f7ff fbbb 	bl	800786c <_malloc_r>
 80080f6:	b948      	cbnz	r0, 800810c <__smakebuf_r+0x44>
 80080f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080fc:	059a      	lsls	r2, r3, #22
 80080fe:	d4ef      	bmi.n	80080e0 <__smakebuf_r+0x18>
 8008100:	f023 0303 	bic.w	r3, r3, #3
 8008104:	f043 0302 	orr.w	r3, r3, #2
 8008108:	81a3      	strh	r3, [r4, #12]
 800810a:	e7e3      	b.n	80080d4 <__smakebuf_r+0xc>
 800810c:	4b0d      	ldr	r3, [pc, #52]	; (8008144 <__smakebuf_r+0x7c>)
 800810e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008110:	89a3      	ldrh	r3, [r4, #12]
 8008112:	6020      	str	r0, [r4, #0]
 8008114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008118:	81a3      	strh	r3, [r4, #12]
 800811a:	9b00      	ldr	r3, [sp, #0]
 800811c:	6163      	str	r3, [r4, #20]
 800811e:	9b01      	ldr	r3, [sp, #4]
 8008120:	6120      	str	r0, [r4, #16]
 8008122:	b15b      	cbz	r3, 800813c <__smakebuf_r+0x74>
 8008124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008128:	4630      	mov	r0, r6
 800812a:	f000 f863 	bl	80081f4 <_isatty_r>
 800812e:	b128      	cbz	r0, 800813c <__smakebuf_r+0x74>
 8008130:	89a3      	ldrh	r3, [r4, #12]
 8008132:	f023 0303 	bic.w	r3, r3, #3
 8008136:	f043 0301 	orr.w	r3, r3, #1
 800813a:	81a3      	strh	r3, [r4, #12]
 800813c:	89a0      	ldrh	r0, [r4, #12]
 800813e:	4305      	orrs	r5, r0
 8008140:	81a5      	strh	r5, [r4, #12]
 8008142:	e7cd      	b.n	80080e0 <__smakebuf_r+0x18>
 8008144:	08006e9d 	.word	0x08006e9d

08008148 <__ascii_mbtowc>:
 8008148:	b082      	sub	sp, #8
 800814a:	b901      	cbnz	r1, 800814e <__ascii_mbtowc+0x6>
 800814c:	a901      	add	r1, sp, #4
 800814e:	b142      	cbz	r2, 8008162 <__ascii_mbtowc+0x1a>
 8008150:	b14b      	cbz	r3, 8008166 <__ascii_mbtowc+0x1e>
 8008152:	7813      	ldrb	r3, [r2, #0]
 8008154:	600b      	str	r3, [r1, #0]
 8008156:	7812      	ldrb	r2, [r2, #0]
 8008158:	1e10      	subs	r0, r2, #0
 800815a:	bf18      	it	ne
 800815c:	2001      	movne	r0, #1
 800815e:	b002      	add	sp, #8
 8008160:	4770      	bx	lr
 8008162:	4610      	mov	r0, r2
 8008164:	e7fb      	b.n	800815e <__ascii_mbtowc+0x16>
 8008166:	f06f 0001 	mvn.w	r0, #1
 800816a:	e7f8      	b.n	800815e <__ascii_mbtowc+0x16>

0800816c <__malloc_lock>:
 800816c:	4801      	ldr	r0, [pc, #4]	; (8008174 <__malloc_lock+0x8>)
 800816e:	f7fe bf6c 	b.w	800704a <__retarget_lock_acquire_recursive>
 8008172:	bf00      	nop
 8008174:	20000418 	.word	0x20000418

08008178 <__malloc_unlock>:
 8008178:	4801      	ldr	r0, [pc, #4]	; (8008180 <__malloc_unlock+0x8>)
 800817a:	f7fe bf67 	b.w	800704c <__retarget_lock_release_recursive>
 800817e:	bf00      	nop
 8008180:	20000418 	.word	0x20000418

08008184 <_read_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4d07      	ldr	r5, [pc, #28]	; (80081a4 <_read_r+0x20>)
 8008188:	4604      	mov	r4, r0
 800818a:	4608      	mov	r0, r1
 800818c:	4611      	mov	r1, r2
 800818e:	2200      	movs	r2, #0
 8008190:	602a      	str	r2, [r5, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	f7fb faae 	bl	80036f4 <_read>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_read_r+0x1e>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_read_r+0x1e>
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	20000424 	.word	0x20000424

080081a8 <__ascii_wctomb>:
 80081a8:	b149      	cbz	r1, 80081be <__ascii_wctomb+0x16>
 80081aa:	2aff      	cmp	r2, #255	; 0xff
 80081ac:	bf85      	ittet	hi
 80081ae:	238a      	movhi	r3, #138	; 0x8a
 80081b0:	6003      	strhi	r3, [r0, #0]
 80081b2:	700a      	strbls	r2, [r1, #0]
 80081b4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80081b8:	bf98      	it	ls
 80081ba:	2001      	movls	r0, #1
 80081bc:	4770      	bx	lr
 80081be:	4608      	mov	r0, r1
 80081c0:	4770      	bx	lr

080081c2 <abort>:
 80081c2:	b508      	push	{r3, lr}
 80081c4:	2006      	movs	r0, #6
 80081c6:	f000 f84d 	bl	8008264 <raise>
 80081ca:	2001      	movs	r0, #1
 80081cc:	f7fb fa88 	bl	80036e0 <_exit>

080081d0 <_fstat_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	4d07      	ldr	r5, [pc, #28]	; (80081f0 <_fstat_r+0x20>)
 80081d4:	2300      	movs	r3, #0
 80081d6:	4604      	mov	r4, r0
 80081d8:	4608      	mov	r0, r1
 80081da:	4611      	mov	r1, r2
 80081dc:	602b      	str	r3, [r5, #0]
 80081de:	f7fb fab2 	bl	8003746 <_fstat>
 80081e2:	1c43      	adds	r3, r0, #1
 80081e4:	d102      	bne.n	80081ec <_fstat_r+0x1c>
 80081e6:	682b      	ldr	r3, [r5, #0]
 80081e8:	b103      	cbz	r3, 80081ec <_fstat_r+0x1c>
 80081ea:	6023      	str	r3, [r4, #0]
 80081ec:	bd38      	pop	{r3, r4, r5, pc}
 80081ee:	bf00      	nop
 80081f0:	20000424 	.word	0x20000424

080081f4 <_isatty_r>:
 80081f4:	b538      	push	{r3, r4, r5, lr}
 80081f6:	4d06      	ldr	r5, [pc, #24]	; (8008210 <_isatty_r+0x1c>)
 80081f8:	2300      	movs	r3, #0
 80081fa:	4604      	mov	r4, r0
 80081fc:	4608      	mov	r0, r1
 80081fe:	602b      	str	r3, [r5, #0]
 8008200:	f7fb fab1 	bl	8003766 <_isatty>
 8008204:	1c43      	adds	r3, r0, #1
 8008206:	d102      	bne.n	800820e <_isatty_r+0x1a>
 8008208:	682b      	ldr	r3, [r5, #0]
 800820a:	b103      	cbz	r3, 800820e <_isatty_r+0x1a>
 800820c:	6023      	str	r3, [r4, #0]
 800820e:	bd38      	pop	{r3, r4, r5, pc}
 8008210:	20000424 	.word	0x20000424

08008214 <_raise_r>:
 8008214:	291f      	cmp	r1, #31
 8008216:	b538      	push	{r3, r4, r5, lr}
 8008218:	4604      	mov	r4, r0
 800821a:	460d      	mov	r5, r1
 800821c:	d904      	bls.n	8008228 <_raise_r+0x14>
 800821e:	2316      	movs	r3, #22
 8008220:	6003      	str	r3, [r0, #0]
 8008222:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008226:	bd38      	pop	{r3, r4, r5, pc}
 8008228:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800822a:	b112      	cbz	r2, 8008232 <_raise_r+0x1e>
 800822c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008230:	b94b      	cbnz	r3, 8008246 <_raise_r+0x32>
 8008232:	4620      	mov	r0, r4
 8008234:	f000 f830 	bl	8008298 <_getpid_r>
 8008238:	462a      	mov	r2, r5
 800823a:	4601      	mov	r1, r0
 800823c:	4620      	mov	r0, r4
 800823e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008242:	f000 b817 	b.w	8008274 <_kill_r>
 8008246:	2b01      	cmp	r3, #1
 8008248:	d00a      	beq.n	8008260 <_raise_r+0x4c>
 800824a:	1c59      	adds	r1, r3, #1
 800824c:	d103      	bne.n	8008256 <_raise_r+0x42>
 800824e:	2316      	movs	r3, #22
 8008250:	6003      	str	r3, [r0, #0]
 8008252:	2001      	movs	r0, #1
 8008254:	e7e7      	b.n	8008226 <_raise_r+0x12>
 8008256:	2400      	movs	r4, #0
 8008258:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800825c:	4628      	mov	r0, r5
 800825e:	4798      	blx	r3
 8008260:	2000      	movs	r0, #0
 8008262:	e7e0      	b.n	8008226 <_raise_r+0x12>

08008264 <raise>:
 8008264:	4b02      	ldr	r3, [pc, #8]	; (8008270 <raise+0xc>)
 8008266:	4601      	mov	r1, r0
 8008268:	6818      	ldr	r0, [r3, #0]
 800826a:	f7ff bfd3 	b.w	8008214 <_raise_r>
 800826e:	bf00      	nop
 8008270:	20000018 	.word	0x20000018

08008274 <_kill_r>:
 8008274:	b538      	push	{r3, r4, r5, lr}
 8008276:	4d07      	ldr	r5, [pc, #28]	; (8008294 <_kill_r+0x20>)
 8008278:	2300      	movs	r3, #0
 800827a:	4604      	mov	r4, r0
 800827c:	4608      	mov	r0, r1
 800827e:	4611      	mov	r1, r2
 8008280:	602b      	str	r3, [r5, #0]
 8008282:	f7fb fa1d 	bl	80036c0 <_kill>
 8008286:	1c43      	adds	r3, r0, #1
 8008288:	d102      	bne.n	8008290 <_kill_r+0x1c>
 800828a:	682b      	ldr	r3, [r5, #0]
 800828c:	b103      	cbz	r3, 8008290 <_kill_r+0x1c>
 800828e:	6023      	str	r3, [r4, #0]
 8008290:	bd38      	pop	{r3, r4, r5, pc}
 8008292:	bf00      	nop
 8008294:	20000424 	.word	0x20000424

08008298 <_getpid_r>:
 8008298:	f7fb ba0a 	b.w	80036b0 <_getpid>

0800829c <sqrt>:
 800829c:	b538      	push	{r3, r4, r5, lr}
 800829e:	ed2d 8b02 	vpush	{d8}
 80082a2:	ec55 4b10 	vmov	r4, r5, d0
 80082a6:	f000 f853 	bl	8008350 <__ieee754_sqrt>
 80082aa:	4622      	mov	r2, r4
 80082ac:	462b      	mov	r3, r5
 80082ae:	4620      	mov	r0, r4
 80082b0:	4629      	mov	r1, r5
 80082b2:	eeb0 8a40 	vmov.f32	s16, s0
 80082b6:	eef0 8a60 	vmov.f32	s17, s1
 80082ba:	f7f8 fc37 	bl	8000b2c <__aeabi_dcmpun>
 80082be:	b990      	cbnz	r0, 80082e6 <sqrt+0x4a>
 80082c0:	2200      	movs	r2, #0
 80082c2:	2300      	movs	r3, #0
 80082c4:	4620      	mov	r0, r4
 80082c6:	4629      	mov	r1, r5
 80082c8:	f7f8 fc08 	bl	8000adc <__aeabi_dcmplt>
 80082cc:	b158      	cbz	r0, 80082e6 <sqrt+0x4a>
 80082ce:	f7fd fa85 	bl	80057dc <__errno>
 80082d2:	2321      	movs	r3, #33	; 0x21
 80082d4:	6003      	str	r3, [r0, #0]
 80082d6:	2200      	movs	r2, #0
 80082d8:	2300      	movs	r3, #0
 80082da:	4610      	mov	r0, r2
 80082dc:	4619      	mov	r1, r3
 80082de:	f7f8 fab5 	bl	800084c <__aeabi_ddiv>
 80082e2:	ec41 0b18 	vmov	d8, r0, r1
 80082e6:	eeb0 0a48 	vmov.f32	s0, s16
 80082ea:	eef0 0a68 	vmov.f32	s1, s17
 80082ee:	ecbd 8b02 	vpop	{d8}
 80082f2:	bd38      	pop	{r3, r4, r5, pc}

080082f4 <asinf>:
 80082f4:	b508      	push	{r3, lr}
 80082f6:	ed2d 8b02 	vpush	{d8}
 80082fa:	eeb0 8a40 	vmov.f32	s16, s0
 80082fe:	f000 f8d9 	bl	80084b4 <__ieee754_asinf>
 8008302:	eeb4 8a48 	vcmp.f32	s16, s16
 8008306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800830a:	eef0 8a40 	vmov.f32	s17, s0
 800830e:	d615      	bvs.n	800833c <asinf+0x48>
 8008310:	eeb0 0a48 	vmov.f32	s0, s16
 8008314:	f000 fb2c 	bl	8008970 <fabsf>
 8008318:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800831c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008324:	dd0a      	ble.n	800833c <asinf+0x48>
 8008326:	f7fd fa59 	bl	80057dc <__errno>
 800832a:	ecbd 8b02 	vpop	{d8}
 800832e:	2321      	movs	r3, #33	; 0x21
 8008330:	6003      	str	r3, [r0, #0]
 8008332:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008336:	4804      	ldr	r0, [pc, #16]	; (8008348 <asinf+0x54>)
 8008338:	f000 bb22 	b.w	8008980 <nanf>
 800833c:	eeb0 0a68 	vmov.f32	s0, s17
 8008340:	ecbd 8b02 	vpop	{d8}
 8008344:	bd08      	pop	{r3, pc}
 8008346:	bf00      	nop
 8008348:	08008d90 	.word	0x08008d90

0800834c <atan2f>:
 800834c:	f000 b998 	b.w	8008680 <__ieee754_atan2f>

08008350 <__ieee754_sqrt>:
 8008350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008354:	ec55 4b10 	vmov	r4, r5, d0
 8008358:	4e55      	ldr	r6, [pc, #340]	; (80084b0 <__ieee754_sqrt+0x160>)
 800835a:	43ae      	bics	r6, r5
 800835c:	ee10 0a10 	vmov	r0, s0
 8008360:	ee10 3a10 	vmov	r3, s0
 8008364:	462a      	mov	r2, r5
 8008366:	4629      	mov	r1, r5
 8008368:	d110      	bne.n	800838c <__ieee754_sqrt+0x3c>
 800836a:	ee10 2a10 	vmov	r2, s0
 800836e:	462b      	mov	r3, r5
 8008370:	f7f8 f942 	bl	80005f8 <__aeabi_dmul>
 8008374:	4602      	mov	r2, r0
 8008376:	460b      	mov	r3, r1
 8008378:	4620      	mov	r0, r4
 800837a:	4629      	mov	r1, r5
 800837c:	f7f7 ff86 	bl	800028c <__adddf3>
 8008380:	4604      	mov	r4, r0
 8008382:	460d      	mov	r5, r1
 8008384:	ec45 4b10 	vmov	d0, r4, r5
 8008388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800838c:	2d00      	cmp	r5, #0
 800838e:	dc10      	bgt.n	80083b2 <__ieee754_sqrt+0x62>
 8008390:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008394:	4330      	orrs	r0, r6
 8008396:	d0f5      	beq.n	8008384 <__ieee754_sqrt+0x34>
 8008398:	b15d      	cbz	r5, 80083b2 <__ieee754_sqrt+0x62>
 800839a:	ee10 2a10 	vmov	r2, s0
 800839e:	462b      	mov	r3, r5
 80083a0:	ee10 0a10 	vmov	r0, s0
 80083a4:	f7f7 ff70 	bl	8000288 <__aeabi_dsub>
 80083a8:	4602      	mov	r2, r0
 80083aa:	460b      	mov	r3, r1
 80083ac:	f7f8 fa4e 	bl	800084c <__aeabi_ddiv>
 80083b0:	e7e6      	b.n	8008380 <__ieee754_sqrt+0x30>
 80083b2:	1512      	asrs	r2, r2, #20
 80083b4:	d074      	beq.n	80084a0 <__ieee754_sqrt+0x150>
 80083b6:	07d4      	lsls	r4, r2, #31
 80083b8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80083bc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80083c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80083c4:	bf5e      	ittt	pl
 80083c6:	0fda      	lsrpl	r2, r3, #31
 80083c8:	005b      	lslpl	r3, r3, #1
 80083ca:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80083ce:	2400      	movs	r4, #0
 80083d0:	0fda      	lsrs	r2, r3, #31
 80083d2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80083d6:	107f      	asrs	r7, r7, #1
 80083d8:	005b      	lsls	r3, r3, #1
 80083da:	2516      	movs	r5, #22
 80083dc:	4620      	mov	r0, r4
 80083de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80083e2:	1886      	adds	r6, r0, r2
 80083e4:	428e      	cmp	r6, r1
 80083e6:	bfde      	ittt	le
 80083e8:	1b89      	suble	r1, r1, r6
 80083ea:	18b0      	addle	r0, r6, r2
 80083ec:	18a4      	addle	r4, r4, r2
 80083ee:	0049      	lsls	r1, r1, #1
 80083f0:	3d01      	subs	r5, #1
 80083f2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80083f6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80083fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80083fe:	d1f0      	bne.n	80083e2 <__ieee754_sqrt+0x92>
 8008400:	462a      	mov	r2, r5
 8008402:	f04f 0e20 	mov.w	lr, #32
 8008406:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800840a:	4281      	cmp	r1, r0
 800840c:	eb06 0c05 	add.w	ip, r6, r5
 8008410:	dc02      	bgt.n	8008418 <__ieee754_sqrt+0xc8>
 8008412:	d113      	bne.n	800843c <__ieee754_sqrt+0xec>
 8008414:	459c      	cmp	ip, r3
 8008416:	d811      	bhi.n	800843c <__ieee754_sqrt+0xec>
 8008418:	f1bc 0f00 	cmp.w	ip, #0
 800841c:	eb0c 0506 	add.w	r5, ip, r6
 8008420:	da43      	bge.n	80084aa <__ieee754_sqrt+0x15a>
 8008422:	2d00      	cmp	r5, #0
 8008424:	db41      	blt.n	80084aa <__ieee754_sqrt+0x15a>
 8008426:	f100 0801 	add.w	r8, r0, #1
 800842a:	1a09      	subs	r1, r1, r0
 800842c:	459c      	cmp	ip, r3
 800842e:	bf88      	it	hi
 8008430:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8008434:	eba3 030c 	sub.w	r3, r3, ip
 8008438:	4432      	add	r2, r6
 800843a:	4640      	mov	r0, r8
 800843c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008440:	f1be 0e01 	subs.w	lr, lr, #1
 8008444:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008448:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800844c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008450:	d1db      	bne.n	800840a <__ieee754_sqrt+0xba>
 8008452:	430b      	orrs	r3, r1
 8008454:	d006      	beq.n	8008464 <__ieee754_sqrt+0x114>
 8008456:	1c50      	adds	r0, r2, #1
 8008458:	bf13      	iteet	ne
 800845a:	3201      	addne	r2, #1
 800845c:	3401      	addeq	r4, #1
 800845e:	4672      	moveq	r2, lr
 8008460:	f022 0201 	bicne.w	r2, r2, #1
 8008464:	1063      	asrs	r3, r4, #1
 8008466:	0852      	lsrs	r2, r2, #1
 8008468:	07e1      	lsls	r1, r4, #31
 800846a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800846e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008472:	bf48      	it	mi
 8008474:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008478:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800847c:	4614      	mov	r4, r2
 800847e:	e781      	b.n	8008384 <__ieee754_sqrt+0x34>
 8008480:	0ad9      	lsrs	r1, r3, #11
 8008482:	3815      	subs	r0, #21
 8008484:	055b      	lsls	r3, r3, #21
 8008486:	2900      	cmp	r1, #0
 8008488:	d0fa      	beq.n	8008480 <__ieee754_sqrt+0x130>
 800848a:	02cd      	lsls	r5, r1, #11
 800848c:	d50a      	bpl.n	80084a4 <__ieee754_sqrt+0x154>
 800848e:	f1c2 0420 	rsb	r4, r2, #32
 8008492:	fa23 f404 	lsr.w	r4, r3, r4
 8008496:	1e55      	subs	r5, r2, #1
 8008498:	4093      	lsls	r3, r2
 800849a:	4321      	orrs	r1, r4
 800849c:	1b42      	subs	r2, r0, r5
 800849e:	e78a      	b.n	80083b6 <__ieee754_sqrt+0x66>
 80084a0:	4610      	mov	r0, r2
 80084a2:	e7f0      	b.n	8008486 <__ieee754_sqrt+0x136>
 80084a4:	0049      	lsls	r1, r1, #1
 80084a6:	3201      	adds	r2, #1
 80084a8:	e7ef      	b.n	800848a <__ieee754_sqrt+0x13a>
 80084aa:	4680      	mov	r8, r0
 80084ac:	e7bd      	b.n	800842a <__ieee754_sqrt+0xda>
 80084ae:	bf00      	nop
 80084b0:	7ff00000 	.word	0x7ff00000

080084b4 <__ieee754_asinf>:
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	ee10 5a10 	vmov	r5, s0
 80084ba:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80084be:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80084c2:	ed2d 8b04 	vpush	{d8-d9}
 80084c6:	d10c      	bne.n	80084e2 <__ieee754_asinf+0x2e>
 80084c8:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8008640 <__ieee754_asinf+0x18c>
 80084cc:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8008644 <__ieee754_asinf+0x190>
 80084d0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80084d4:	eee0 7a07 	vfma.f32	s15, s0, s14
 80084d8:	eeb0 0a67 	vmov.f32	s0, s15
 80084dc:	ecbd 8b04 	vpop	{d8-d9}
 80084e0:	bd38      	pop	{r3, r4, r5, pc}
 80084e2:	dd04      	ble.n	80084ee <__ieee754_asinf+0x3a>
 80084e4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80084e8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80084ec:	e7f6      	b.n	80084dc <__ieee754_asinf+0x28>
 80084ee:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80084f2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80084f6:	da0b      	bge.n	8008510 <__ieee754_asinf+0x5c>
 80084f8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80084fc:	da52      	bge.n	80085a4 <__ieee754_asinf+0xf0>
 80084fe:	eddf 7a52 	vldr	s15, [pc, #328]	; 8008648 <__ieee754_asinf+0x194>
 8008502:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008506:	eef4 7ae8 	vcmpe.f32	s15, s17
 800850a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800850e:	dce5      	bgt.n	80084dc <__ieee754_asinf+0x28>
 8008510:	f000 fa2e 	bl	8008970 <fabsf>
 8008514:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8008518:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800851c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8008520:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800864c <__ieee754_asinf+0x198>
 8008524:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8008650 <__ieee754_asinf+0x19c>
 8008528:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8008654 <__ieee754_asinf+0x1a0>
 800852c:	eea8 7a27 	vfma.f32	s14, s16, s15
 8008530:	eddf 7a49 	vldr	s15, [pc, #292]	; 8008658 <__ieee754_asinf+0x1a4>
 8008534:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008538:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800865c <__ieee754_asinf+0x1a8>
 800853c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008540:	eddf 7a47 	vldr	s15, [pc, #284]	; 8008660 <__ieee754_asinf+0x1ac>
 8008544:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008548:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8008664 <__ieee754_asinf+0x1b0>
 800854c:	eea7 9a88 	vfma.f32	s18, s15, s16
 8008550:	eddf 7a45 	vldr	s15, [pc, #276]	; 8008668 <__ieee754_asinf+0x1b4>
 8008554:	eee8 7a07 	vfma.f32	s15, s16, s14
 8008558:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800866c <__ieee754_asinf+0x1b8>
 800855c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008560:	eddf 7a43 	vldr	s15, [pc, #268]	; 8008670 <__ieee754_asinf+0x1bc>
 8008564:	eee7 7a08 	vfma.f32	s15, s14, s16
 8008568:	eeb0 0a48 	vmov.f32	s0, s16
 800856c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8008570:	f000 f926 	bl	80087c0 <__ieee754_sqrtf>
 8008574:	4b3f      	ldr	r3, [pc, #252]	; (8008674 <__ieee754_asinf+0x1c0>)
 8008576:	ee29 9a08 	vmul.f32	s18, s18, s16
 800857a:	429c      	cmp	r4, r3
 800857c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8008580:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008584:	dd3d      	ble.n	8008602 <__ieee754_asinf+0x14e>
 8008586:	eea0 0a06 	vfma.f32	s0, s0, s12
 800858a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8008678 <__ieee754_asinf+0x1c4>
 800858e:	eee0 7a26 	vfma.f32	s15, s0, s13
 8008592:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8008644 <__ieee754_asinf+0x190>
 8008596:	ee30 0a67 	vsub.f32	s0, s0, s15
 800859a:	2d00      	cmp	r5, #0
 800859c:	bfd8      	it	le
 800859e:	eeb1 0a40 	vnegle.f32	s0, s0
 80085a2:	e79b      	b.n	80084dc <__ieee754_asinf+0x28>
 80085a4:	ee60 7a00 	vmul.f32	s15, s0, s0
 80085a8:	eddf 6a28 	vldr	s13, [pc, #160]	; 800864c <__ieee754_asinf+0x198>
 80085ac:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8008650 <__ieee754_asinf+0x19c>
 80085b0:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8008664 <__ieee754_asinf+0x1b0>
 80085b4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80085b8:	eddf 6a27 	vldr	s13, [pc, #156]	; 8008658 <__ieee754_asinf+0x1a4>
 80085bc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80085c0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800865c <__ieee754_asinf+0x1a8>
 80085c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80085c8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8008660 <__ieee754_asinf+0x1ac>
 80085cc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80085d0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8008654 <__ieee754_asinf+0x1a0>
 80085d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80085d8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8008668 <__ieee754_asinf+0x1b4>
 80085dc:	eee7 6a86 	vfma.f32	s13, s15, s12
 80085e0:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800866c <__ieee754_asinf+0x1b8>
 80085e4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80085e8:	eddf 6a21 	vldr	s13, [pc, #132]	; 8008670 <__ieee754_asinf+0x1bc>
 80085ec:	eee6 6a27 	vfma.f32	s13, s12, s15
 80085f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80085f4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80085f8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80085fc:	eea0 0a27 	vfma.f32	s0, s0, s15
 8008600:	e76c      	b.n	80084dc <__ieee754_asinf+0x28>
 8008602:	ee10 3a10 	vmov	r3, s0
 8008606:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800860a:	f023 030f 	bic.w	r3, r3, #15
 800860e:	ee07 3a10 	vmov	s14, r3
 8008612:	eea7 8a47 	vfms.f32	s16, s14, s14
 8008616:	ee70 7a07 	vadd.f32	s15, s0, s14
 800861a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800861e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8008622:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008640 <__ieee754_asinf+0x18c>
 8008626:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800862a:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800862e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800867c <__ieee754_asinf+0x1c8>
 8008632:	eeb0 6a40 	vmov.f32	s12, s0
 8008636:	eea7 6a66 	vfms.f32	s12, s14, s13
 800863a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800863e:	e7aa      	b.n	8008596 <__ieee754_asinf+0xe2>
 8008640:	b33bbd2e 	.word	0xb33bbd2e
 8008644:	3fc90fdb 	.word	0x3fc90fdb
 8008648:	7149f2ca 	.word	0x7149f2ca
 800864c:	3811ef08 	.word	0x3811ef08
 8008650:	3a4f7f04 	.word	0x3a4f7f04
 8008654:	3e2aaaab 	.word	0x3e2aaaab
 8008658:	bd241146 	.word	0xbd241146
 800865c:	3e4e0aa8 	.word	0x3e4e0aa8
 8008660:	bea6b090 	.word	0xbea6b090
 8008664:	3d9dc62e 	.word	0x3d9dc62e
 8008668:	bf303361 	.word	0xbf303361
 800866c:	4001572d 	.word	0x4001572d
 8008670:	c019d139 	.word	0xc019d139
 8008674:	3f799999 	.word	0x3f799999
 8008678:	333bbd2e 	.word	0x333bbd2e
 800867c:	3f490fdb 	.word	0x3f490fdb

08008680 <__ieee754_atan2f>:
 8008680:	ee10 2a90 	vmov	r2, s1
 8008684:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008688:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800868c:	b510      	push	{r4, lr}
 800868e:	eef0 7a40 	vmov.f32	s15, s0
 8008692:	dc06      	bgt.n	80086a2 <__ieee754_atan2f+0x22>
 8008694:	ee10 0a10 	vmov	r0, s0
 8008698:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800869c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80086a0:	dd04      	ble.n	80086ac <__ieee754_atan2f+0x2c>
 80086a2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80086a6:	eeb0 0a67 	vmov.f32	s0, s15
 80086aa:	bd10      	pop	{r4, pc}
 80086ac:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80086b0:	d103      	bne.n	80086ba <__ieee754_atan2f+0x3a>
 80086b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086b6:	f000 b887 	b.w	80087c8 <atanf>
 80086ba:	1794      	asrs	r4, r2, #30
 80086bc:	f004 0402 	and.w	r4, r4, #2
 80086c0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80086c4:	b943      	cbnz	r3, 80086d8 <__ieee754_atan2f+0x58>
 80086c6:	2c02      	cmp	r4, #2
 80086c8:	d05e      	beq.n	8008788 <__ieee754_atan2f+0x108>
 80086ca:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800879c <__ieee754_atan2f+0x11c>
 80086ce:	2c03      	cmp	r4, #3
 80086d0:	bf08      	it	eq
 80086d2:	eef0 7a47 	vmoveq.f32	s15, s14
 80086d6:	e7e6      	b.n	80086a6 <__ieee754_atan2f+0x26>
 80086d8:	b941      	cbnz	r1, 80086ec <__ieee754_atan2f+0x6c>
 80086da:	eddf 7a31 	vldr	s15, [pc, #196]	; 80087a0 <__ieee754_atan2f+0x120>
 80086de:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80087a4 <__ieee754_atan2f+0x124>
 80086e2:	2800      	cmp	r0, #0
 80086e4:	bfb8      	it	lt
 80086e6:	eef0 7a40 	vmovlt.f32	s15, s0
 80086ea:	e7dc      	b.n	80086a6 <__ieee754_atan2f+0x26>
 80086ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80086f0:	d110      	bne.n	8008714 <__ieee754_atan2f+0x94>
 80086f2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80086f6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80086fa:	d107      	bne.n	800870c <__ieee754_atan2f+0x8c>
 80086fc:	2c02      	cmp	r4, #2
 80086fe:	d846      	bhi.n	800878e <__ieee754_atan2f+0x10e>
 8008700:	4b29      	ldr	r3, [pc, #164]	; (80087a8 <__ieee754_atan2f+0x128>)
 8008702:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008706:	edd4 7a00 	vldr	s15, [r4]
 800870a:	e7cc      	b.n	80086a6 <__ieee754_atan2f+0x26>
 800870c:	2c02      	cmp	r4, #2
 800870e:	d841      	bhi.n	8008794 <__ieee754_atan2f+0x114>
 8008710:	4b26      	ldr	r3, [pc, #152]	; (80087ac <__ieee754_atan2f+0x12c>)
 8008712:	e7f6      	b.n	8008702 <__ieee754_atan2f+0x82>
 8008714:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008718:	d0df      	beq.n	80086da <__ieee754_atan2f+0x5a>
 800871a:	1a5b      	subs	r3, r3, r1
 800871c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8008720:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008724:	da1a      	bge.n	800875c <__ieee754_atan2f+0xdc>
 8008726:	2a00      	cmp	r2, #0
 8008728:	da01      	bge.n	800872e <__ieee754_atan2f+0xae>
 800872a:	313c      	adds	r1, #60	; 0x3c
 800872c:	db19      	blt.n	8008762 <__ieee754_atan2f+0xe2>
 800872e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8008732:	f000 f91d 	bl	8008970 <fabsf>
 8008736:	f000 f847 	bl	80087c8 <atanf>
 800873a:	eef0 7a40 	vmov.f32	s15, s0
 800873e:	2c01      	cmp	r4, #1
 8008740:	d012      	beq.n	8008768 <__ieee754_atan2f+0xe8>
 8008742:	2c02      	cmp	r4, #2
 8008744:	d017      	beq.n	8008776 <__ieee754_atan2f+0xf6>
 8008746:	2c00      	cmp	r4, #0
 8008748:	d0ad      	beq.n	80086a6 <__ieee754_atan2f+0x26>
 800874a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80087b0 <__ieee754_atan2f+0x130>
 800874e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008752:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80087b4 <__ieee754_atan2f+0x134>
 8008756:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800875a:	e7a4      	b.n	80086a6 <__ieee754_atan2f+0x26>
 800875c:	eddf 7a10 	vldr	s15, [pc, #64]	; 80087a0 <__ieee754_atan2f+0x120>
 8008760:	e7ed      	b.n	800873e <__ieee754_atan2f+0xbe>
 8008762:	eddf 7a15 	vldr	s15, [pc, #84]	; 80087b8 <__ieee754_atan2f+0x138>
 8008766:	e7ea      	b.n	800873e <__ieee754_atan2f+0xbe>
 8008768:	ee17 3a90 	vmov	r3, s15
 800876c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008770:	ee07 3a90 	vmov	s15, r3
 8008774:	e797      	b.n	80086a6 <__ieee754_atan2f+0x26>
 8008776:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80087b0 <__ieee754_atan2f+0x130>
 800877a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800877e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80087b4 <__ieee754_atan2f+0x134>
 8008782:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008786:	e78e      	b.n	80086a6 <__ieee754_atan2f+0x26>
 8008788:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80087b4 <__ieee754_atan2f+0x134>
 800878c:	e78b      	b.n	80086a6 <__ieee754_atan2f+0x26>
 800878e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80087bc <__ieee754_atan2f+0x13c>
 8008792:	e788      	b.n	80086a6 <__ieee754_atan2f+0x26>
 8008794:	eddf 7a08 	vldr	s15, [pc, #32]	; 80087b8 <__ieee754_atan2f+0x138>
 8008798:	e785      	b.n	80086a6 <__ieee754_atan2f+0x26>
 800879a:	bf00      	nop
 800879c:	c0490fdb 	.word	0xc0490fdb
 80087a0:	3fc90fdb 	.word	0x3fc90fdb
 80087a4:	bfc90fdb 	.word	0xbfc90fdb
 80087a8:	08008e9c 	.word	0x08008e9c
 80087ac:	08008ea8 	.word	0x08008ea8
 80087b0:	33bbbd2e 	.word	0x33bbbd2e
 80087b4:	40490fdb 	.word	0x40490fdb
 80087b8:	00000000 	.word	0x00000000
 80087bc:	3f490fdb 	.word	0x3f490fdb

080087c0 <__ieee754_sqrtf>:
 80087c0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80087c4:	4770      	bx	lr
	...

080087c8 <atanf>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	ee10 5a10 	vmov	r5, s0
 80087ce:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80087d2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80087d6:	eef0 7a40 	vmov.f32	s15, s0
 80087da:	db10      	blt.n	80087fe <atanf+0x36>
 80087dc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80087e0:	dd04      	ble.n	80087ec <atanf+0x24>
 80087e2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80087e6:	eeb0 0a67 	vmov.f32	s0, s15
 80087ea:	bd38      	pop	{r3, r4, r5, pc}
 80087ec:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8008924 <atanf+0x15c>
 80087f0:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8008928 <atanf+0x160>
 80087f4:	2d00      	cmp	r5, #0
 80087f6:	bfd8      	it	le
 80087f8:	eef0 7a40 	vmovle.f32	s15, s0
 80087fc:	e7f3      	b.n	80087e6 <atanf+0x1e>
 80087fe:	4b4b      	ldr	r3, [pc, #300]	; (800892c <atanf+0x164>)
 8008800:	429c      	cmp	r4, r3
 8008802:	dc10      	bgt.n	8008826 <atanf+0x5e>
 8008804:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8008808:	da0a      	bge.n	8008820 <atanf+0x58>
 800880a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008930 <atanf+0x168>
 800880e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8008812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008816:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800881a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800881e:	dce2      	bgt.n	80087e6 <atanf+0x1e>
 8008820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008824:	e013      	b.n	800884e <atanf+0x86>
 8008826:	f000 f8a3 	bl	8008970 <fabsf>
 800882a:	4b42      	ldr	r3, [pc, #264]	; (8008934 <atanf+0x16c>)
 800882c:	429c      	cmp	r4, r3
 800882e:	dc4f      	bgt.n	80088d0 <atanf+0x108>
 8008830:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008834:	429c      	cmp	r4, r3
 8008836:	dc41      	bgt.n	80088bc <atanf+0xf4>
 8008838:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800883c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008840:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008844:	2300      	movs	r3, #0
 8008846:	ee30 0a27 	vadd.f32	s0, s0, s15
 800884a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800884e:	1c5a      	adds	r2, r3, #1
 8008850:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8008854:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8008938 <atanf+0x170>
 8008858:	eddf 5a38 	vldr	s11, [pc, #224]	; 800893c <atanf+0x174>
 800885c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8008940 <atanf+0x178>
 8008860:	ee66 6a06 	vmul.f32	s13, s12, s12
 8008864:	eee6 5a87 	vfma.f32	s11, s13, s14
 8008868:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008944 <atanf+0x17c>
 800886c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008870:	eddf 5a35 	vldr	s11, [pc, #212]	; 8008948 <atanf+0x180>
 8008874:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008878:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800894c <atanf+0x184>
 800887c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008880:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008950 <atanf+0x188>
 8008884:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008888:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008954 <atanf+0x18c>
 800888c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008890:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008958 <atanf+0x190>
 8008894:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008898:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800895c <atanf+0x194>
 800889c:	eea7 5a26 	vfma.f32	s10, s14, s13
 80088a0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008960 <atanf+0x198>
 80088a4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80088a8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80088ac:	eea5 7a86 	vfma.f32	s14, s11, s12
 80088b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80088b4:	d121      	bne.n	80088fa <atanf+0x132>
 80088b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80088ba:	e794      	b.n	80087e6 <atanf+0x1e>
 80088bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80088c0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80088c4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80088c8:	2301      	movs	r3, #1
 80088ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80088ce:	e7be      	b.n	800884e <atanf+0x86>
 80088d0:	4b24      	ldr	r3, [pc, #144]	; (8008964 <atanf+0x19c>)
 80088d2:	429c      	cmp	r4, r3
 80088d4:	dc0b      	bgt.n	80088ee <atanf+0x126>
 80088d6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80088da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088de:	eea0 7a27 	vfma.f32	s14, s0, s15
 80088e2:	2302      	movs	r3, #2
 80088e4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80088e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088ec:	e7af      	b.n	800884e <atanf+0x86>
 80088ee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80088f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80088f6:	2303      	movs	r3, #3
 80088f8:	e7a9      	b.n	800884e <atanf+0x86>
 80088fa:	4a1b      	ldr	r2, [pc, #108]	; (8008968 <atanf+0x1a0>)
 80088fc:	491b      	ldr	r1, [pc, #108]	; (800896c <atanf+0x1a4>)
 80088fe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008902:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008906:	ed93 0a00 	vldr	s0, [r3]
 800890a:	ee37 7a40 	vsub.f32	s14, s14, s0
 800890e:	ed92 0a00 	vldr	s0, [r2]
 8008912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008916:	2d00      	cmp	r5, #0
 8008918:	ee70 7a67 	vsub.f32	s15, s0, s15
 800891c:	bfb8      	it	lt
 800891e:	eef1 7a67 	vneglt.f32	s15, s15
 8008922:	e760      	b.n	80087e6 <atanf+0x1e>
 8008924:	3fc90fdb 	.word	0x3fc90fdb
 8008928:	bfc90fdb 	.word	0xbfc90fdb
 800892c:	3edfffff 	.word	0x3edfffff
 8008930:	7149f2ca 	.word	0x7149f2ca
 8008934:	3f97ffff 	.word	0x3f97ffff
 8008938:	3c8569d7 	.word	0x3c8569d7
 800893c:	3d4bda59 	.word	0x3d4bda59
 8008940:	bd6ef16b 	.word	0xbd6ef16b
 8008944:	3d886b35 	.word	0x3d886b35
 8008948:	3dba2e6e 	.word	0x3dba2e6e
 800894c:	3e124925 	.word	0x3e124925
 8008950:	3eaaaaab 	.word	0x3eaaaaab
 8008954:	bd15a221 	.word	0xbd15a221
 8008958:	bd9d8795 	.word	0xbd9d8795
 800895c:	bde38e38 	.word	0xbde38e38
 8008960:	be4ccccd 	.word	0xbe4ccccd
 8008964:	401bffff 	.word	0x401bffff
 8008968:	08008eb4 	.word	0x08008eb4
 800896c:	08008ec4 	.word	0x08008ec4

08008970 <fabsf>:
 8008970:	ee10 3a10 	vmov	r3, s0
 8008974:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008978:	ee00 3a10 	vmov	s0, r3
 800897c:	4770      	bx	lr
	...

08008980 <nanf>:
 8008980:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008988 <nanf+0x8>
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	7fc00000 	.word	0x7fc00000

0800898c <_init>:
 800898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898e:	bf00      	nop
 8008990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008992:	bc08      	pop	{r3}
 8008994:	469e      	mov	lr, r3
 8008996:	4770      	bx	lr

08008998 <_fini>:
 8008998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899a:	bf00      	nop
 800899c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800899e:	bc08      	pop	{r3}
 80089a0:	469e      	mov	lr, r3
 80089a2:	4770      	bx	lr
