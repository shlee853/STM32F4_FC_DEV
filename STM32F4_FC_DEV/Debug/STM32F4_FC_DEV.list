
STM32F4_FC_DEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004354  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  080044e4  080044e4  000144e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004618  08004618  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004618  08004618  00014618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004620  08004620  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004620  08004620  00014620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004624  08004624  00014624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          0000005c  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000c4  200000c4  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c9f  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020aa  00000000  00000000  00029d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  0002bde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000918  00000000  00000000  0002c818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bdd2  00000000  00000000  0002d130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000084e2  00000000  00000000  00048f02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009846c  00000000  00000000  000513e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e9850  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030c4  00000000  00000000  000e98a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044cc 	.word	0x080044cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080044cc 	.word	0x080044cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800057c:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800057e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000580:	4907      	ldr	r1, [pc, #28]	; (80005a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4313      	orrs	r3, r2
 8000586:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800058a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4013      	ands	r3, r2
 8000590:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000592:	68fb      	ldr	r3, [r7, #12]
}
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	40023800 	.word	0x40023800

080005a4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005b0:	4907      	ldr	r1, [pc, #28]	; (80005d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4013      	ands	r3, r2
 80005c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005c2:	68fb      	ldr	r3, [r7, #12]
}
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	40023800 	.word	0x40023800

080005d4 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	601a      	str	r2, [r3, #0]
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	f023 0210 	bic.w	r2, r3, #16
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	431a      	orrs	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	605a      	str	r2, [r3, #4]
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800061a:	b480      	push	{r7}
 800061c:	b083      	sub	sp, #12
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	2b01      	cmp	r3, #1
 800062c:	d101      	bne.n	8000632 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800062e:	2301      	movs	r3, #1
 8000630:	e000      	b.n	8000634 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8000632:	2300      	movs	r3, #0
}
 8000634:	4618      	mov	r0, r3
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	f003 0302 	and.w	r3, r3, #2
 8000650:	2b02      	cmp	r3, #2
 8000652:	d101      	bne.n	8000658 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000654:	2301      	movs	r3, #1
 8000656:	e000      	b.n	800065a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000658:	2300      	movs	r3, #0
}
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr

08000666 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000666:	b480      	push	{r7}
 8000668:	b083      	sub	sp, #12
 800066a:	af00      	add	r7, sp, #0
 800066c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	330c      	adds	r3, #12
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
}
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000682:	b480      	push	{r7}
 8000684:	b085      	sub	sp, #20
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
 800068a:	460b      	mov	r3, r1
 800068c:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	330c      	adds	r3, #12
 8000692:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	78fa      	ldrb	r2, [r7, #3]
 8000698:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006a6:	b480      	push	{r7}
 80006a8:	b083      	sub	sp, #12
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
 80006ae:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	691a      	ldr	r2, [r3, #16]
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	4013      	ands	r3, r2
 80006b8:	683a      	ldr	r2, [r7, #0]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	bf0c      	ite	eq
 80006be:	2301      	moveq	r3, #1
 80006c0:	2300      	movne	r3, #0
 80006c2:	b2db      	uxtb	r3, r3
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	683a      	ldr	r2, [r7, #0]
 80006de:	619a      	str	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	041a      	lsls	r2, r3, #16
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	619a      	str	r2, [r3, #24]
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
	...

0800070c <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b090      	sub	sp, #64	; 0x40
 8000710:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000712:	f107 0318 	add.w	r3, r7, #24
 8000716:	2228      	movs	r2, #40	; 0x28
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f002 ff40 	bl	80035a0 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	463b      	mov	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
 800072e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000730:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000734:	f7ff ff36 	bl	80005a4 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000738:	2001      	movs	r0, #1
 800073a:	f7ff ff1b 	bl	8000574 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800073e:	2004      	movs	r0, #4
 8000740:	f7ff ff18 	bl	8000574 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000744:	23e0      	movs	r3, #224	; 0xe0
 8000746:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000748:	2302      	movs	r3, #2
 800074a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000758:	2305      	movs	r3, #5
 800075a:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4825      	ldr	r0, [pc, #148]	; (80007f8 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8000762:	f001 fe99 	bl	8002498 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000766:	2300      	movs	r3, #0
 8000768:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800076a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800076e:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8000774:	2302      	movs	r3, #2
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8000778:	2301      	movs	r3, #1
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800077c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 8000782:	2310      	movs	r3, #16
 8000784:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000786:	2300      	movs	r3, #0
 8000788:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 800078e:	230a      	movs	r3, #10
 8000790:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 8000792:	f107 0318 	add.w	r3, r7, #24
 8000796:	4619      	mov	r1, r3
 8000798:	4818      	ldr	r0, [pc, #96]	; (80007fc <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800079a:	f002 f84e 	bl	800283a <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800079e:	2100      	movs	r1, #0
 80007a0:	4816      	ldr	r0, [pc, #88]	; (80007fc <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80007a2:	f7ff ff27 	bl	80005f4 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80007a6:	2110      	movs	r1, #16
 80007a8:	4813      	ldr	r0, [pc, #76]	; (80007f8 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80007aa:	f7ff ff9f 	bl	80006ec <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80007ae:	2310      	movs	r3, #16
 80007b0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007b2:	2301      	movs	r3, #1
 80007b4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80007b6:	2303      	movs	r3, #3
 80007b8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 80007c2:	463b      	mov	r3, r7
 80007c4:	4619      	mov	r1, r3
 80007c6:	480c      	ldr	r0, [pc, #48]	; (80007f8 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80007c8:	f001 fe66 	bl	8002498 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 80007cc:	2310      	movs	r3, #16
 80007ce:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 80007d8:	463b      	mov	r3, r7
 80007da:	4619      	mov	r1, r3
 80007dc:	4808      	ldr	r0, [pc, #32]	; (8000800 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80007de:	f001 fe5b 	bl	8002498 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80007e4:	f7ff fef6 	bl	80005d4 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 80007e8:	2110      	movs	r1, #16
 80007ea:	4803      	ldr	r0, [pc, #12]	; (80007f8 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80007ec:	f7ff ff70 	bl	80006d0 <LL_GPIO_SetOutputPin>
}
 80007f0:	bf00      	nop
 80007f2:	3740      	adds	r7, #64	; 0x40
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40020000 	.word	0x40020000
 80007fc:	40013000 	.word	0x40013000
 8000800:	40020800 	.word	0x40020800

08000804 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 800080e:	bf00      	nop
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <SPI1_SendByte+0x40>)
 8000812:	f7ff ff15 	bl	8000640 <LL_SPI_IsActiveFlag_TXE>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d0f9      	beq.n	8000810 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	4619      	mov	r1, r3
 8000820:	4808      	ldr	r0, [pc, #32]	; (8000844 <SPI1_SendByte+0x40>)
 8000822:	f7ff ff2e 	bl	8000682 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 8000826:	bf00      	nop
 8000828:	4806      	ldr	r0, [pc, #24]	; (8000844 <SPI1_SendByte+0x40>)
 800082a:	f7ff fef6 	bl	800061a <LL_SPI_IsActiveFlag_RXNE>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d0f9      	beq.n	8000828 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8000834:	4803      	ldr	r0, [pc, #12]	; (8000844 <SPI1_SendByte+0x40>)
 8000836:	f7ff ff16 	bl	8000666 <LL_SPI_ReceiveData8>
 800083a:	4603      	mov	r3, r0
}
 800083c:	4618      	mov	r0, r3
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40013000 	.word	0x40013000

08000848 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8000852:	2110      	movs	r1, #16
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <ICM20602_Readbyte+0x3c>)
 8000856:	f7ff ff49 	bl	80006ec <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ffce 	bl	8000804 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8000868:	2000      	movs	r0, #0
 800086a:	f7ff ffcb 	bl	8000804 <SPI1_SendByte>
 800086e:	4603      	mov	r3, r0
 8000870:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 8000872:	2110      	movs	r1, #16
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <ICM20602_Readbyte+0x3c>)
 8000876:	f7ff ff2b 	bl	80006d0 <LL_GPIO_SetOutputPin>
	
	return val;
 800087a:	7bfb      	ldrb	r3, [r7, #15]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40020000 	.word	0x40020000

08000888 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b085      	sub	sp, #20
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	603a      	str	r2, [r7, #0]
 8000892:	71fb      	strb	r3, [r7, #7]
 8000894:	460b      	mov	r3, r1
 8000896:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 800089c:	2110      	movs	r1, #16
 800089e:	4810      	ldr	r0, [pc, #64]	; (80008e0 <ICM20602_Readbytes+0x58>)
 80008a0:	f7ff ff24 	bl	80006ec <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ffa9 	bl	8000804 <SPI1_SendByte>
	while(i < len)
 80008b2:	e009      	b.n	80008c8 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	60fa      	str	r2, [r7, #12]
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	18d4      	adds	r4, r2, r3
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff ffa0 	bl	8000804 <SPI1_SendByte>
 80008c4:	4603      	mov	r3, r0
 80008c6:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80008c8:	79bb      	ldrb	r3, [r7, #6]
 80008ca:	68fa      	ldr	r2, [r7, #12]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d3f1      	bcc.n	80008b4 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 80008d0:	2110      	movs	r1, #16
 80008d2:	4803      	ldr	r0, [pc, #12]	; (80008e0 <ICM20602_Readbytes+0x58>)
 80008d4:	f7ff fefc 	bl	80006d0 <LL_GPIO_SetOutputPin>
}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd90      	pop	{r4, r7, pc}
 80008e0:	40020000 	.word	0x40020000

080008e4 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	460a      	mov	r2, r1
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	4613      	mov	r3, r2
 80008f2:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80008f4:	2110      	movs	r1, #16
 80008f6:	480b      	ldr	r0, [pc, #44]	; (8000924 <ICM20602_Writebyte+0x40>)
 80008f8:	f7ff fef8 	bl	80006ec <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000902:	b2db      	uxtb	r3, r3
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff7d 	bl	8000804 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800090a:	79bb      	ldrb	r3, [r7, #6]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff79 	bl	8000804 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8000912:	2110      	movs	r1, #16
 8000914:	4803      	ldr	r0, [pc, #12]	; (8000924 <ICM20602_Writebyte+0x40>)
 8000916:	f7ff fedb 	bl	80006d0 <LL_GPIO_SetOutputPin>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40020000 	.word	0x40020000

08000928 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 800093c:	463b      	mov	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8000944:	f7ff fee2 	bl	800070c <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8000948:	4833      	ldr	r0, [pc, #204]	; (8000a18 <ICM20602_Initialization+0xf0>)
 800094a:	f002 fe31 	bl	80035b0 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 800094e:	2075      	movs	r0, #117	; 0x75
 8000950:	f7ff ff7a 	bl	8000848 <ICM20602_Readbyte>
 8000954:	4603      	mov	r3, r0
 8000956:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8000958:	7bfb      	ldrb	r3, [r7, #15]
 800095a:	2b12      	cmp	r3, #18
 800095c:	d105      	bne.n	800096a <ICM20602_Initialization+0x42>
	{
		printf("\r\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	4619      	mov	r1, r3
 8000962:	482e      	ldr	r0, [pc, #184]	; (8000a1c <ICM20602_Initialization+0xf4>)
 8000964:	f002 fe24 	bl	80035b0 <iprintf>
 8000968:	e012      	b.n	8000990 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	2b12      	cmp	r3, #18
 800096e:	d00f      	beq.n	8000990 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8000970:	2075      	movs	r0, #117	; 0x75
 8000972:	f7ff ff69 	bl	8000848 <ICM20602_Readbyte>
 8000976:	4603      	mov	r3, r0
 8000978:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	2b12      	cmp	r3, #18
 800097e:	d007      	beq.n	8000990 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8000980:	7bfb      	ldrb	r3, [r7, #15]
 8000982:	2212      	movs	r2, #18
 8000984:	4619      	mov	r1, r3
 8000986:	4826      	ldr	r0, [pc, #152]	; (8000a20 <ICM20602_Initialization+0xf8>)
 8000988:	f002 fe12 	bl	80035b0 <iprintf>
			return 1; //ERROR
 800098c:	2301      	movs	r3, #1
 800098e:	e03f      	b.n	8000a10 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	206b      	movs	r0, #107	; 0x6b
 8000994:	f7ff ffa6 	bl	80008e4 <ICM20602_Writebyte>
	LL_mDelay(50);
 8000998:	2032      	movs	r0, #50	; 0x32
 800099a:	f002 fda1 	bl	80034e0 <LL_mDelay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 800099e:	2101      	movs	r1, #1
 80009a0:	206b      	movs	r0, #107	; 0x6b
 80009a2:	f7ff ff9f 	bl	80008e4 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	LL_mDelay(50);
 80009a6:	2032      	movs	r0, #50	; 0x32
 80009a8:	f002 fd9a 	bl	80034e0 <LL_mDelay>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 80009ac:	2100      	movs	r1, #0
 80009ae:	206c      	movs	r0, #108	; 0x6c
 80009b0:	f7ff ff98 	bl	80008e4 <ICM20602_Writebyte>
	LL_mDelay(50);
 80009b4:	2032      	movs	r0, #50	; 0x32
 80009b6:	f002 fd93 	bl	80034e0 <LL_mDelay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 80009ba:	2100      	movs	r1, #0
 80009bc:	2019      	movs	r0, #25
 80009be:	f7ff ff91 	bl	80008e4 <ICM20602_Writebyte>
	LL_mDelay(50);
 80009c2:	2032      	movs	r0, #50	; 0x32
 80009c4:	f002 fd8c 	bl	80034e0 <LL_mDelay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 80009c8:	2105      	movs	r1, #5
 80009ca:	201a      	movs	r0, #26
 80009cc:	f7ff ff8a 	bl	80008e4 <ICM20602_Writebyte>
	LL_mDelay(50);
 80009d0:	2032      	movs	r0, #50	; 0x32
 80009d2:	f002 fd85 	bl	80034e0 <LL_mDelay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 80009d6:	2118      	movs	r1, #24
 80009d8:	201b      	movs	r0, #27
 80009da:	f7ff ff83 	bl	80008e4 <ICM20602_Writebyte>
	LL_mDelay(50);
 80009de:	2032      	movs	r0, #50	; 0x32
 80009e0:	f002 fd7e 	bl	80034e0 <LL_mDelay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80009e4:	2118      	movs	r1, #24
 80009e6:	201c      	movs	r0, #28
 80009e8:	f7ff ff7c 	bl	80008e4 <ICM20602_Writebyte>
	LL_mDelay(50);
 80009ec:	2032      	movs	r0, #50	; 0x32
 80009ee:	f002 fd77 	bl	80034e0 <LL_mDelay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80009f2:	2103      	movs	r1, #3
 80009f4:	201d      	movs	r0, #29
 80009f6:	f7ff ff75 	bl	80008e4 <ICM20602_Writebyte>
	LL_mDelay(50);
 80009fa:	2032      	movs	r0, #50	; 0x32
 80009fc:	f002 fd70 	bl	80034e0 <LL_mDelay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8000a00:	2101      	movs	r1, #1
 8000a02:	2038      	movs	r0, #56	; 0x38
 8000a04:	f7ff ff6e 	bl	80008e4 <ICM20602_Writebyte>
	LL_mDelay(50);
 8000a08:	2032      	movs	r0, #50	; 0x32
 8000a0a:	f002 fd69 	bl	80034e0 <LL_mDelay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	080044e4 	.word	0x080044e4
 8000a1c:	080044fc 	.word	0x080044fc
 8000a20:	08004520 	.word	0x08004520

08000a24 <ICM20602_Get6AxisRawData>:

void ICM20602_Get6AxisRawData(short* accel, short* gyro)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
	unsigned char data[14];
	ICM20602_Readbytes(ACCEL_XOUT_H, 14, data);
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	461a      	mov	r2, r3
 8000a34:	210e      	movs	r1, #14
 8000a36:	203b      	movs	r0, #59	; 0x3b
 8000a38:	f7ff ff26 	bl	8000888 <ICM20602_Readbytes>
	
	accel[0] = (data[0] << 8) | data[1];
 8000a3c:	7a3b      	ldrb	r3, [r7, #8]
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	b21a      	sxth	r2, r3
 8000a42:	7a7b      	ldrb	r3, [r7, #9]
 8000a44:	b21b      	sxth	r3, r3
 8000a46:	4313      	orrs	r3, r2
 8000a48:	b21a      	sxth	r2, r3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	801a      	strh	r2, [r3, #0]
	accel[1] = (data[2] << 8) | data[3];
 8000a4e:	7abb      	ldrb	r3, [r7, #10]
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	b219      	sxth	r1, r3
 8000a54:	7afb      	ldrb	r3, [r7, #11]
 8000a56:	b21a      	sxth	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	b212      	sxth	r2, r2
 8000a60:	801a      	strh	r2, [r3, #0]
	accel[2] = (data[4] << 8) | data[5];
 8000a62:	7b3b      	ldrb	r3, [r7, #12]
 8000a64:	021b      	lsls	r3, r3, #8
 8000a66:	b219      	sxth	r1, r3
 8000a68:	7b7b      	ldrb	r3, [r7, #13]
 8000a6a:	b21a      	sxth	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3304      	adds	r3, #4
 8000a70:	430a      	orrs	r2, r1
 8000a72:	b212      	sxth	r2, r2
 8000a74:	801a      	strh	r2, [r3, #0]

	gyro[0] = ((data[8] << 8) | data[9]);
 8000a76:	7c3b      	ldrb	r3, [r7, #16]
 8000a78:	021b      	lsls	r3, r3, #8
 8000a7a:	b21a      	sxth	r2, r3
 8000a7c:	7c7b      	ldrb	r3, [r7, #17]
 8000a7e:	b21b      	sxth	r3, r3
 8000a80:	4313      	orrs	r3, r2
 8000a82:	b21a      	sxth	r2, r3
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[10] << 8) | data[11]);
 8000a88:	7cbb      	ldrb	r3, [r7, #18]
 8000a8a:	021b      	lsls	r3, r3, #8
 8000a8c:	b219      	sxth	r1, r3
 8000a8e:	7cfb      	ldrb	r3, [r7, #19]
 8000a90:	b21a      	sxth	r2, r3
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	3302      	adds	r3, #2
 8000a96:	430a      	orrs	r2, r1
 8000a98:	b212      	sxth	r2, r2
 8000a9a:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[12] << 8) | data[13]);
 8000a9c:	7d3b      	ldrb	r3, [r7, #20]
 8000a9e:	021b      	lsls	r3, r3, #8
 8000aa0:	b219      	sxth	r1, r3
 8000aa2:	7d7b      	ldrb	r3, [r7, #21]
 8000aa4:	b21a      	sxth	r2, r3
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	b212      	sxth	r2, r2
 8000aae:	801a      	strh	r2, [r3, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8000abc:	2110      	movs	r1, #16
 8000abe:	4803      	ldr	r0, [pc, #12]	; (8000acc <ICM20602_DataReady+0x14>)
 8000ac0:	f7ff fdf1 	bl	80006a6 <LL_GPIO_IsInputPinSet>
 8000ac4:	4603      	mov	r3, r0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40020800 	.word	0x40020800

08000ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	f003 0307 	and.w	r3, r3, #7
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db0b      	blt.n	8000b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f003 021f 	and.w	r2, r3, #31
 8000b04:	4907      	ldr	r1, [pc, #28]	; (8000b24 <__NVIC_EnableIRQ+0x38>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	095b      	lsrs	r3, r3, #5
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000e100 	.word	0xe000e100

08000b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	db0a      	blt.n	8000b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	490c      	ldr	r1, [pc, #48]	; (8000b74 <__NVIC_SetPriority+0x4c>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	0112      	lsls	r2, r2, #4
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b50:	e00a      	b.n	8000b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4908      	ldr	r1, [pc, #32]	; (8000b78 <__NVIC_SetPriority+0x50>)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f003 030f 	and.w	r3, r3, #15
 8000b5e:	3b04      	subs	r3, #4
 8000b60:	0112      	lsls	r2, r2, #4
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	440b      	add	r3, r1
 8000b66:	761a      	strb	r2, [r3, #24]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b089      	sub	sp, #36	; 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f1c3 0307 	rsb	r3, r3, #7
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	bf28      	it	cs
 8000b9a:	2304      	movcs	r3, #4
 8000b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d902      	bls.n	8000bac <NVIC_EncodePriority+0x30>
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3b03      	subs	r3, #3
 8000baa:	e000      	b.n	8000bae <NVIC_EncodePriority+0x32>
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	43d9      	mvns	r1, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	4313      	orrs	r3, r2
         );
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3724      	adds	r7, #36	; 0x24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <LL_AHB1_GRP1_EnableClock>:
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bf0:	4907      	ldr	r1, [pc, #28]	; (8000c10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c02:	68fb      	ldr	r3, [r7, #12]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	40023800 	.word	0x40023800

08000c14 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000c1e:	4a13      	ldr	r2, [pc, #76]	; (8000c6c <LL_SYSCFG_SetEXTISource+0x58>)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	3302      	adds	r3, #2
 8000c26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	0c1b      	lsrs	r3, r3, #16
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	ea02 0103 	and.w	r1, r2, r3
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	0c1b      	lsrs	r3, r3, #16
 8000c38:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	fa93 f3a3 	rbit	r3, r3
 8000c40:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	fab3 f383 	clz	r3, r3
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	fa03 f202 	lsl.w	r2, r3, r2
 8000c52:	4806      	ldr	r0, [pc, #24]	; (8000c6c <LL_SYSCFG_SetEXTISource+0x58>)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	3302      	adds	r3, #2
 8000c5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	40013800 	.word	0x40013800

08000c70 <LL_GPIO_SetPinMode>:
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa93 f3a3 	rbit	r3, r3
 8000c8a:	613b      	str	r3, [r7, #16]
  return result;
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	fab3 f383 	clz	r3, r3
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	2103      	movs	r1, #3
 8000c98:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	fa93 f3a3 	rbit	r3, r3
 8000caa:	61bb      	str	r3, [r7, #24]
  return result;
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	fab3 f383 	clz	r3, r3
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	601a      	str	r2, [r3, #0]
}
 8000cc2:	bf00      	nop
 8000cc4:	3724      	adds	r7, #36	; 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <LL_GPIO_SetPinPull>:
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b089      	sub	sp, #36	; 0x24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	60f8      	str	r0, [r7, #12]
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	68da      	ldr	r2, [r3, #12]
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	fa93 f3a3 	rbit	r3, r3
 8000ce8:	613b      	str	r3, [r7, #16]
  return result;
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	fab3 f383 	clz	r3, r3
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2103      	movs	r1, #3
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	401a      	ands	r2, r3
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	fa93 f3a3 	rbit	r3, r3
 8000d08:	61bb      	str	r3, [r7, #24]
  return result;
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	fab3 f383 	clz	r3, r3
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	60da      	str	r2, [r3, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3724      	adds	r7, #36	; 0x24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <LL_GPIO_ResetOutputPin>:
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	041a      	lsls	r2, r3, #16
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	619a      	str	r2, [r3, #24]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b088      	sub	sp, #32
 8000d50:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000d52:	f107 0318 	add.w	r3, r7, #24
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]
 8000d6a:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000d6c:	2080      	movs	r0, #128	; 0x80
 8000d6e:	f7ff ff39 	bl	8000be4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f7ff ff36 	bl	8000be4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000d78:	2004      	movs	r0, #4
 8000d7a:	f7ff ff33 	bl	8000be4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000d7e:	2002      	movs	r0, #2
 8000d80:	f7ff ff30 	bl	8000be4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000d84:	2110      	movs	r1, #16
 8000d86:	482a      	ldr	r0, [pc, #168]	; (8000e30 <MX_GPIO_Init+0xe4>)
 8000d88:	f7ff ffd0 	bl	8000d2c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000d8c:	2120      	movs	r1, #32
 8000d8e:	4829      	ldr	r0, [pc, #164]	; (8000e34 <MX_GPIO_Init+0xe8>)
 8000d90:	f7ff ffcc 	bl	8000d2c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000d94:	2310      	movs	r3, #16
 8000d96:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	463b      	mov	r3, r7
 8000daa:	4619      	mov	r1, r3
 8000dac:	4820      	ldr	r0, [pc, #128]	; (8000e30 <MX_GPIO_Init+0xe4>)
 8000dae:	f001 fb73 	bl	8002498 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000db2:	2320      	movs	r3, #32
 8000db4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000db6:	2301      	movs	r3, #1
 8000db8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	4619      	mov	r1, r3
 8000dca:	481a      	ldr	r0, [pc, #104]	; (8000e34 <MX_GPIO_Init+0xe8>)
 8000dcc:	f001 fb64 	bl	8002498 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE4);
 8000dd0:	4919      	ldr	r1, [pc, #100]	; (8000e38 <MX_GPIO_Init+0xec>)
 8000dd2:	2002      	movs	r0, #2
 8000dd4:	f7ff ff1e 	bl	8000c14 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8000dd8:	2310      	movs	r3, #16
 8000dda:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000de4:	2301      	movs	r3, #1
 8000de6:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000de8:	f107 0318 	add.w	r3, r7, #24
 8000dec:	4618      	mov	r0, r3
 8000dee:	f001 f9cd 	bl	800218c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2110      	movs	r1, #16
 8000df6:	4811      	ldr	r0, [pc, #68]	; (8000e3c <MX_GPIO_Init+0xf0>)
 8000df8:	f7ff ff69 	bl	8000cce <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_4, LL_GPIO_MODE_INPUT);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2110      	movs	r1, #16
 8000e00:	480e      	ldr	r0, [pc, #56]	; (8000e3c <MX_GPIO_Init+0xf0>)
 8000e02:	f7ff ff35 	bl	8000c70 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000e06:	f7ff fe63 	bl	8000ad0 <__NVIC_GetPriorityGrouping>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff feb3 	bl	8000b7c <NVIC_EncodePriority>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4619      	mov	r1, r3
 8000e1a:	200a      	movs	r0, #10
 8000e1c:	f7ff fe84 	bl	8000b28 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 8000e20:	200a      	movs	r0, #10
 8000e22:	f7ff fe63 	bl	8000aec <__NVIC_EnableIRQ>

}
 8000e26:	bf00      	nop
 8000e28:	3720      	adds	r7, #32
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40020400 	.word	0x40020400
 8000e38:	000f0001 	.word	0x000f0001
 8000e3c:	40020800 	.word	0x40020800

08000e40 <__NVIC_SetPriorityGrouping>:
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	; (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_SetPriority>:
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	; (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	; 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <LL_RCC_HSE_Enable+0x1c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <LL_RCC_HSE_Enable+0x1c>)
 8000f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800

08000f80 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <LL_RCC_HSE_IsReady+0x24>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000f90:	bf0c      	ite	eq
 8000f92:	2301      	moveq	r3, #1
 8000f94:	2300      	movne	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <LL_RCC_SetSysClkSource+0x24>)
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f023 0203 	bic.w	r2, r3, #3
 8000fb8:	4904      	ldr	r1, [pc, #16]	; (8000fcc <LL_RCC_SetSysClkSource+0x24>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	608b      	str	r3, [r1, #8]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	40023800 	.word	0x40023800

08000fd0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <LL_RCC_GetSysClkSource+0x18>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f003 030c 	and.w	r3, r3, #12
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800

08000fec <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ffc:	4904      	ldr	r1, [pc, #16]	; (8001010 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4313      	orrs	r3, r2
 8001002:	608b      	str	r3, [r1, #8]
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	40023800 	.word	0x40023800

08001014 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <LL_RCC_SetAPB1Prescaler+0x24>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001024:	4904      	ldr	r1, [pc, #16]	; (8001038 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4313      	orrs	r3, r2
 800102a:	608b      	str	r3, [r1, #8]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	40023800 	.word	0x40023800

0800103c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800104c:	4904      	ldr	r1, [pc, #16]	; (8001060 <LL_RCC_SetAPB2Prescaler+0x24>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4313      	orrs	r3, r2
 8001052:	608b      	str	r3, [r1, #8]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	40023800 	.word	0x40023800

08001064 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <LL_RCC_PLL_Enable+0x1c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <LL_RCC_PLL_Enable+0x1c>)
 800106e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800

08001084 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <LL_RCC_PLL_IsReady+0x24>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001090:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001094:	bf0c      	ite	eq
 8001096:	2301      	moveq	r3, #1
 8001098:	2300      	movne	r3, #0
 800109a:	b2db      	uxtb	r3, r3
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80010ba:	4b0d      	ldr	r3, [pc, #52]	; (80010f0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80010c0:	4013      	ands	r3, r2
 80010c2:	68f9      	ldr	r1, [r7, #12]
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	4311      	orrs	r1, r2
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	0192      	lsls	r2, r2, #6
 80010cc:	430a      	orrs	r2, r1
 80010ce:	4908      	ldr	r1, [pc, #32]	; (80010f0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80010dc:	4904      	ldr	r1, [pc, #16]	; (80010f0 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80010e4:	bf00      	nop
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	40023800 	.word	0x40023800
 80010f4:	ffbf8000 	.word	0xffbf8000

080010f8 <LL_APB1_GRP1_EnableClock>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001104:	4907      	ldr	r1, [pc, #28]	; (8001124 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4313      	orrs	r3, r2
 800110a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <LL_APB1_GRP1_EnableClock+0x2c>)
 800110e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4013      	ands	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001116:	68fb      	ldr	r3, [r7, #12]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	40023800 	.word	0x40023800

08001128 <LL_APB2_GRP1_EnableClock>:
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001132:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001134:	4907      	ldr	r1, [pc, #28]	; (8001154 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4313      	orrs	r3, r2
 800113a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <LL_APB2_GRP1_EnableClock+0x2c>)
 800113e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4013      	ands	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	40023800 	.word	0x40023800

08001158 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <LL_FLASH_SetLatency+0x24>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f023 0207 	bic.w	r2, r3, #7
 8001168:	4904      	ldr	r1, [pc, #16]	; (800117c <LL_FLASH_SetLatency+0x24>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4313      	orrs	r3, r2
 800116e:	600b      	str	r3, [r1, #0]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	40023c00 	.word	0x40023c00

08001180 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <LL_FLASH_GetLatency+0x18>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0307 	and.w	r3, r3, #7
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40023c00 	.word	0x40023c00

0800119c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80011ac:	4904      	ldr	r1, [pc, #16]	; (80011c0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	600b      	str	r3, [r1, #0]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	40007000 	.word	0x40007000

080011c4 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f043 0201 	orr.w	r2, r3, #1
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	601a      	str	r2, [r3, #0]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1a      	ldr	r2, [r3, #32]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	621a      	str	r2, [r3, #32]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a1a      	ldr	r2, [r3, #32]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	43db      	mvns	r3, r3
 8001218:	401a      	ands	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	621a      	str	r2, [r3, #32]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800122a:	b480      	push	{r7}
 800122c:	b089      	sub	sp, #36	; 0x24
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	330c      	adds	r3, #12
 8001236:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	e853 3f00 	ldrex	r3, [r3]
 800123e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	f043 0320 	orr.w	r3, r3, #32
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	330c      	adds	r3, #12
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	61ba      	str	r2, [r7, #24]
 8001250:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001252:	6979      	ldr	r1, [r7, #20]
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	e841 2300 	strex	r3, r2, [r1]
 800125a:	613b      	str	r3, [r7, #16]
   return(result);
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1e7      	bne.n	8001232 <LL_USART_EnableIT_RXNE+0x8>
}
 8001262:	bf00      	nop
 8001264:	bf00      	nop
 8001266:	3724      	adds	r7, #36	; 0x24
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800127c:	78fa      	ldrb	r2, [r7, #3]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	605a      	str	r2, [r3, #4]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800128e:	b480      	push	{r7}
 8001290:	b085      	sub	sp, #20
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	4013      	ands	r3, r2
 80012a4:	041a      	lsls	r2, r3, #16
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43d9      	mvns	r1, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	400b      	ands	r3, r1
 80012ae:	431a      	orrs	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	619a      	str	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	e00d      	b.n	80012ee <_write+0x2e>
	{
		LL_USART_TransmitData8(USART6, *(p+i));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	68ba      	ldr	r2, [r7, #8]
 80012d6:	4413      	add	r3, r2
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	4619      	mov	r1, r3
 80012dc:	4808      	ldr	r0, [pc, #32]	; (8001300 <_write+0x40>)
 80012de:	f7ff ffc7 	bl	8001270 <LL_USART_TransmitData8>
		LL_mDelay(1);
 80012e2:	2001      	movs	r0, #1
 80012e4:	f002 f8fc 	bl	80034e0 <LL_mDelay>
	for(int i=0;i<len;i++)
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	3301      	adds	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	dbed      	blt.n	80012d2 <_write+0x12>
	}
	return len;
 80012f6:	687b      	ldr	r3, [r7, #4]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40011400 	.word	0x40011400

08001304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001308:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800130c:	f7ff ff0c 	bl	8001128 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001310:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001314:	f7ff fef0 	bl	80010f8 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001318:	2003      	movs	r0, #3
 800131a:	f7ff fd91 	bl	8000e40 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800131e:	f7ff fdb3 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 8001322:	4603      	mov	r3, r0
 8001324:	2200      	movs	r2, #0
 8001326:	210f      	movs	r1, #15
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fde5 	bl	8000ef8 <NVIC_EncodePriority>
 800132e:	4603      	mov	r3, r0
 8001330:	4619      	mov	r1, r3
 8001332:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001336:	f7ff fdb5 	bl	8000ea4 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800133a:	f000 f8f5 	bl	8001528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800133e:	f7ff fd05 	bl	8000d4c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001342:	f000 fe01 	bl	8001f48 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8001346:	f000 fa01 	bl	800174c <MX_SPI1_Init>
  MX_TIM3_Init();
 800134a:	f000 fcad 	bl	8001ca8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_EnableCounter(TIM3);
 800134e:	486a      	ldr	r0, [pc, #424]	; (80014f8 <main+0x1f4>)
 8001350:	f7ff ff38 	bl	80011c4 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 8001354:	2101      	movs	r1, #1
 8001356:	4868      	ldr	r0, [pc, #416]	; (80014f8 <main+0x1f4>)
 8001358:	f7ff ff44 	bl	80011e4 <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000;
 800135c:	4b66      	ldr	r3, [pc, #408]	; (80014f8 <main+0x1f4>)
 800135e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001362:	629a      	str	r2, [r3, #40]	; 0x28
  LL_mDelay(100);
 8001364:	2064      	movs	r0, #100	; 0x64
 8001366:	f002 f8bb 	bl	80034e0 <LL_mDelay>
  TIM3->PSC = 1500;
 800136a:	4b63      	ldr	r3, [pc, #396]	; (80014f8 <main+0x1f4>)
 800136c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
  LL_mDelay(100);
 8001372:	2064      	movs	r0, #100	; 0x64
 8001374:	f002 f8b4 	bl	80034e0 <LL_mDelay>
  TIM3->PSC = 1000;
 8001378:	4b5f      	ldr	r3, [pc, #380]	; (80014f8 <main+0x1f4>)
 800137a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800137e:	629a      	str	r2, [r3, #40]	; 0x28
  LL_mDelay(100);
 8001380:	2064      	movs	r0, #100	; 0x64
 8001382:	f002 f8ad 	bl	80034e0 <LL_mDelay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 8001386:	2101      	movs	r1, #1
 8001388:	485b      	ldr	r0, [pc, #364]	; (80014f8 <main+0x1f4>)
 800138a:	f7ff ff3c 	bl	8001206 <LL_TIM_CC_DisableChannel>

  LL_USART_EnableIT_RXNE(USART6);	// UART6 인터럽트 활성화
 800138e:	485b      	ldr	r0, [pc, #364]	; (80014fc <main+0x1f8>)
 8001390:	f7ff ff4b 	bl	800122a <LL_USART_EnableIT_RXNE>
  ICM20602_Initialization();
 8001394:	f7ff fac8 	bl	8000928 <ICM20602_Initialization>
  {
  //	  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
  //	  LL_mDelay(1000);
  //	  LL_USART_TransmitData8(USART6,'B');

	  if(flag_INT_USART6 == 1){
 8001398:	4b59      	ldr	r3, [pc, #356]	; (8001500 <main+0x1fc>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d10c      	bne.n	80013ba <main+0xb6>
		  flag_INT_USART6 =0;
 80013a0:	4b57      	ldr	r3, [pc, #348]	; (8001500 <main+0x1fc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
		  LL_USART_TransmitData8(USART6,rxd); // 호스트로부터 수신한 데이터를 그대로 다시 보냄
 80013a6:	4b57      	ldr	r3, [pc, #348]	; (8001504 <main+0x200>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	4619      	mov	r1, r3
 80013ac:	4853      	ldr	r0, [pc, #332]	; (80014fc <main+0x1f8>)
 80013ae:	f7ff ff5f 	bl	8001270 <LL_USART_TransmitData8>
		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 80013b2:	2120      	movs	r1, #32
 80013b4:	4854      	ldr	r0, [pc, #336]	; (8001508 <main+0x204>)
 80013b6:	f7ff ff6a 	bl	800128e <LL_GPIO_TogglePin>
//		  printf("Hello!!!\n\r");

	   }


	  if(ICM20602_DataReady() == 1)
 80013ba:	f7ff fb7d 	bl	8000ab8 <ICM20602_DataReady>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d1e9      	bne.n	8001398 <main+0x94>
	  {
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 80013c4:	2102      	movs	r1, #2
 80013c6:	4851      	ldr	r0, [pc, #324]	; (800150c <main+0x208>)
 80013c8:	f7ff ff61 	bl	800128e <LL_GPIO_TogglePin>

//		  ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
		  ICM20602_Get6AxisRawData(&ICM20602.acc_x_raw, &ICM20602.gyro_x_raw);
 80013cc:	4950      	ldr	r1, [pc, #320]	; (8001510 <main+0x20c>)
 80013ce:	4851      	ldr	r0, [pc, #324]	; (8001514 <main+0x210>)
 80013d0:	f7ff fb28 	bl	8000a24 <ICM20602_Get6AxisRawData>

		  ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 80013d4:	4b4f      	ldr	r3, [pc, #316]	; (8001514 <main+0x210>)
 80013d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e2:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001518 <main+0x214>
 80013e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013ea:	eddf 6a4c 	vldr	s13, [pc, #304]	; 800151c <main+0x218>
 80013ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f2:	4b48      	ldr	r3, [pc, #288]	; (8001514 <main+0x210>)
 80013f4:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 80013f8:	4b46      	ldr	r3, [pc, #280]	; (8001514 <main+0x210>)
 80013fa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001406:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001518 <main+0x214>
 800140a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800140e:	eddf 6a43 	vldr	s13, [pc, #268]	; 800151c <main+0x218>
 8001412:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001416:	4b3f      	ldr	r3, [pc, #252]	; (8001514 <main+0x210>)
 8001418:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 800141c:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <main+0x210>)
 800141e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001518 <main+0x214>
 800142e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001432:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800151c <main+0x218>
 8001436:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800143a:	4b36      	ldr	r3, [pc, #216]	; (8001514 <main+0x210>)
 800143c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

		  ICM20602.acc_x = ICM20602.acc_x_raw * 16.f / 32768.f;
 8001440:	4b34      	ldr	r3, [pc, #208]	; (8001514 <main+0x210>)
 8001442:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001446:	ee07 3a90 	vmov	s15, r3
 800144a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001452:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001456:	eddf 6a31 	vldr	s13, [pc, #196]	; 800151c <main+0x218>
 800145a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800145e:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <main+0x210>)
 8001460:	edc3 7a04 	vstr	s15, [r3, #16]
		  ICM20602.acc_y = ICM20602.acc_y_raw * 16.f / 32768.f;
 8001464:	4b2b      	ldr	r3, [pc, #172]	; (8001514 <main+0x210>)
 8001466:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800146a:	ee07 3a90 	vmov	s15, r3
 800146e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001472:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001476:	ee27 7a87 	vmul.f32	s14, s15, s14
 800147a:	eddf 6a28 	vldr	s13, [pc, #160]	; 800151c <main+0x218>
 800147e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <main+0x210>)
 8001484:	edc3 7a05 	vstr	s15, [r3, #20]
		  ICM20602.acc_z = ICM20602.acc_z_raw * 16.f / 32768.f;
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <main+0x210>)
 800148a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800148e:	ee07 3a90 	vmov	s15, r3
 8001492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001496:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800149a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800149e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800151c <main+0x218>
 80014a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <main+0x210>)
 80014a8:	edc3 7a06 	vstr	s15, [r3, #24]

//		  printf("%d,%d,%d\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
//		  printf("%d,%d,%d\n", ICM20602.acc_x_raw, ICM20602.acc_y_raw, ICM20602.acc_z_raw);
//		  printf("%d,%d,%d\n", (int)(ICM20602.gyro_x*100), (int)(ICM20602.gyro_y*100), (int)(ICM20602.gyro_z*100));
		  printf("%d,%d,%d\n", (int)(ICM20602.acc_x*100), (int)(ICM20602.acc_y*100), (int)(ICM20602.acc_z*100));
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <main+0x210>)
 80014ae:	edd3 7a04 	vldr	s15, [r3, #16]
 80014b2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001520 <main+0x21c>
 80014b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ba:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <main+0x210>)
 80014c0:	edd3 7a05 	vldr	s15, [r3, #20]
 80014c4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001520 <main+0x21c>
 80014c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014cc:	eebd 6ae7 	vcvt.s32.f32	s12, s15
 80014d0:	4b10      	ldr	r3, [pc, #64]	; (8001514 <main+0x210>)
 80014d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80014d6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001520 <main+0x21c>
 80014da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014e2:	ee17 3a90 	vmov	r3, s15
 80014e6:	ee16 2a10 	vmov	r2, s12
 80014ea:	ee16 1a90 	vmov	r1, s13
 80014ee:	480d      	ldr	r0, [pc, #52]	; (8001524 <main+0x220>)
 80014f0:	f002 f85e 	bl	80035b0 <iprintf>
	  if(flag_INT_USART6 == 1){
 80014f4:	e750      	b.n	8001398 <main+0x94>
 80014f6:	bf00      	nop
 80014f8:	40000400 	.word	0x40000400
 80014fc:	40011400 	.word	0x40011400
 8001500:	200000ac 	.word	0x200000ac
 8001504:	200000ad 	.word	0x200000ad
 8001508:	40020400 	.word	0x40020400
 800150c:	40020800 	.word	0x40020800
 8001510:	2000008c 	.word	0x2000008c
 8001514:	20000084 	.word	0x20000084
 8001518:	44fa0000 	.word	0x44fa0000
 800151c:	47000000 	.word	0x47000000
 8001520:	42c80000 	.word	0x42c80000
 8001524:	0800454c 	.word	0x0800454c

08001528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 800152c:	2005      	movs	r0, #5
 800152e:	f7ff fe13 	bl	8001158 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8001532:	bf00      	nop
 8001534:	f7ff fe24 	bl	8001180 <LL_FLASH_GetLatency>
 8001538:	4603      	mov	r3, r0
 800153a:	2b05      	cmp	r3, #5
 800153c:	d1fa      	bne.n	8001534 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800153e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001542:	f7ff fe2b 	bl	800119c <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8001546:	f7ff fd0b 	bl	8000f60 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800154a:	bf00      	nop
 800154c:	f7ff fd18 	bl	8000f80 <LL_RCC_HSE_IsReady>
 8001550:	4603      	mov	r3, r0
 8001552:	2b01      	cmp	r3, #1
 8001554:	d1fa      	bne.n	800154c <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 8001556:	2300      	movs	r3, #0
 8001558:	22a8      	movs	r2, #168	; 0xa8
 800155a:	2104      	movs	r1, #4
 800155c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001560:	f7ff fda4 	bl	80010ac <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001564:	f7ff fd7e 	bl	8001064 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001568:	bf00      	nop
 800156a:	f7ff fd8b 	bl	8001084 <LL_RCC_PLL_IsReady>
 800156e:	4603      	mov	r3, r0
 8001570:	2b01      	cmp	r3, #1
 8001572:	d1fa      	bne.n	800156a <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001574:	2000      	movs	r0, #0
 8001576:	f7ff fd39 	bl	8000fec <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 800157a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800157e:	f7ff fd49 	bl	8001014 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8001582:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001586:	f7ff fd59 	bl	800103c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800158a:	2002      	movs	r0, #2
 800158c:	f7ff fd0c 	bl	8000fa8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001590:	bf00      	nop
 8001592:	f7ff fd1d 	bl	8000fd0 <LL_RCC_GetSysClkSource>
 8001596:	4603      	mov	r3, r0
 8001598:	2b08      	cmp	r3, #8
 800159a:	d1fa      	bne.n	8001592 <SystemClock_Config+0x6a>
  {

  }
  LL_Init1msTick(168000000);
 800159c:	4803      	ldr	r0, [pc, #12]	; (80015ac <SystemClock_Config+0x84>)
 800159e:	f001 ff91 	bl	80034c4 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 80015a2:	4802      	ldr	r0, [pc, #8]	; (80015ac <SystemClock_Config+0x84>)
 80015a4:	f001 ffc2 	bl	800352c <LL_SetSystemCoreClock>
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	0a037a00 	.word	0x0a037a00

080015b0 <__NVIC_GetPriorityGrouping>:
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <__NVIC_GetPriorityGrouping+0x18>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 0307 	and.w	r3, r3, #7
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_EnableIRQ>:
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	db0b      	blt.n	80015f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	f003 021f 	and.w	r2, r3, #31
 80015e4:	4907      	ldr	r1, [pc, #28]	; (8001604 <__NVIC_EnableIRQ+0x38>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	095b      	lsrs	r3, r3, #5
 80015ec:	2001      	movs	r0, #1
 80015ee:	fa00 f202 	lsl.w	r2, r0, r2
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000e100 	.word	0xe000e100

08001608 <__NVIC_SetPriority>:
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	6039      	str	r1, [r7, #0]
 8001612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	2b00      	cmp	r3, #0
 800161a:	db0a      	blt.n	8001632 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	b2da      	uxtb	r2, r3
 8001620:	490c      	ldr	r1, [pc, #48]	; (8001654 <__NVIC_SetPriority+0x4c>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	0112      	lsls	r2, r2, #4
 8001628:	b2d2      	uxtb	r2, r2
 800162a:	440b      	add	r3, r1
 800162c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001630:	e00a      	b.n	8001648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4908      	ldr	r1, [pc, #32]	; (8001658 <__NVIC_SetPriority+0x50>)
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	3b04      	subs	r3, #4
 8001640:	0112      	lsls	r2, r2, #4
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	440b      	add	r3, r1
 8001646:	761a      	strb	r2, [r3, #24]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000e100 	.word	0xe000e100
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <NVIC_EncodePriority>:
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	; 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f1c3 0307 	rsb	r3, r3, #7
 8001676:	2b04      	cmp	r3, #4
 8001678:	bf28      	it	cs
 800167a:	2304      	movcs	r3, #4
 800167c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3304      	adds	r3, #4
 8001682:	2b06      	cmp	r3, #6
 8001684:	d902      	bls.n	800168c <NVIC_EncodePriority+0x30>
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3b03      	subs	r3, #3
 800168a:	e000      	b.n	800168e <NVIC_EncodePriority+0x32>
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43da      	mvns	r2, r3
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	401a      	ands	r2, r3
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	43d9      	mvns	r1, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	4313      	orrs	r3, r2
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3724      	adds	r7, #36	; 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <LL_AHB1_GRP1_EnableClock>:
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d0:	4907      	ldr	r1, [pc, #28]	; (80016f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4013      	ands	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016e2:	68fb      	ldr	r3, [r7, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	40023800 	.word	0x40023800

080016f4 <LL_APB2_GRP1_EnableClock>:
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <LL_APB2_GRP1_EnableClock+0x2c>)
 80016fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001700:	4907      	ldr	r1, [pc, #28]	; (8001720 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4313      	orrs	r3, r2
 8001706:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <LL_APB2_GRP1_EnableClock+0x2c>)
 800170a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4013      	ands	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001712:	68fb      	ldr	r3, [r7, #12]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40023800 	.word	0x40023800

08001724 <LL_SPI_SetStandard>:
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f023 0210 	bic.w	r2, r3, #16
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	605a      	str	r2, [r3, #4]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b090      	sub	sp, #64	; 0x40
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001752:	f107 0318 	add.w	r3, r7, #24
 8001756:	2228      	movs	r2, #40	; 0x28
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f001 ff20 	bl	80035a0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	463b      	mov	r3, r7
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]
 800176e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001770:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001774:	f7ff ffbe 	bl	80016f4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001778:	2001      	movs	r0, #1
 800177a:	f7ff ffa3 	bl	80016c4 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800177e:	23e0      	movs	r3, #224	; 0xe0
 8001780:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001782:	2302      	movs	r3, #2
 8001784:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001786:	2303      	movs	r3, #3
 8001788:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001792:	2305      	movs	r3, #5
 8001794:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	463b      	mov	r3, r7
 8001798:	4619      	mov	r1, r3
 800179a:	481b      	ldr	r0, [pc, #108]	; (8001808 <MX_SPI1_Init+0xbc>)
 800179c:	f000 fe7c 	bl	8002498 <LL_GPIO_Init>

  /* SPI1 interrupt Init */
  NVIC_SetPriority(SPI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80017a0:	f7ff ff06 	bl	80015b0 <__NVIC_GetPriorityGrouping>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ff56 	bl	800165c <NVIC_EncodePriority>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4619      	mov	r1, r3
 80017b4:	2023      	movs	r0, #35	; 0x23
 80017b6:	f7ff ff27 	bl	8001608 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI1_IRQn);
 80017ba:	2023      	movs	r0, #35	; 0x23
 80017bc:	f7ff ff06 	bl	80015cc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80017c4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80017c8:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80017ca:	2300      	movs	r3, #0
 80017cc:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80017ce:	2302      	movs	r3, #2
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80017d2:	2301      	movs	r3, #1
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80017d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 80017dc:	2310      	movs	r3, #16
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80017e0:	2300      	movs	r3, #0
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80017e8:	230a      	movs	r3, #10
 80017ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80017ec:	f107 0318 	add.w	r3, r7, #24
 80017f0:	4619      	mov	r1, r3
 80017f2:	4806      	ldr	r0, [pc, #24]	; (800180c <MX_SPI1_Init+0xc0>)
 80017f4:	f001 f821 	bl	800283a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80017f8:	2100      	movs	r1, #0
 80017fa:	4804      	ldr	r0, [pc, #16]	; (800180c <MX_SPI1_Init+0xc0>)
 80017fc:	f7ff ff92 	bl	8001724 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	3740      	adds	r7, #64	; 0x40
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40020000 	.word	0x40020000
 800180c:	40013000 	.word	0x40013000

08001810 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800181a:	695a      	ldr	r2, [r3, #20]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4013      	ands	r3, r2
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	429a      	cmp	r2, r3
 8001824:	bf0c      	ite	eq
 8001826:	2301      	moveq	r3, #1
 8001828:	2300      	movne	r3, #0
 800182a:	b2db      	uxtb	r3, r3
}
 800182c:	4618      	mov	r0, r3
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	40013c00 	.word	0x40013c00

0800183c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6153      	str	r3, [r2, #20]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40013c00 	.word	0x40013c00

0800185c <LL_USART_IsActiveFlag_RXNE>:
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0320 	and.w	r3, r3, #32
 800186c:	2b20      	cmp	r3, #32
 800186e:	bf0c      	ite	eq
 8001870:	2301      	moveq	r3, #1
 8001872:	2300      	movne	r3, #0
 8001874:	b2db      	uxtb	r3, r3
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <LL_USART_ClearFlag_RXNE>:
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f06f 0220 	mvn.w	r2, #32
 8001890:	601a      	str	r2, [r3, #0]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <LL_USART_ReceiveData8>:
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	b2db      	uxtb	r3, r3
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <NMI_Handler+0x4>

080018be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <HardFault_Handler+0x4>

080018c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <MemManage_Handler+0x4>

080018ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <BusFault_Handler+0x4>

080018d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <UsageFault_Handler+0x4>

080018d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8001912:	2010      	movs	r0, #16
 8001914:	f7ff ff7c 	bl	8001810 <LL_EXTI_IsActiveFlag_0_31>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <EXTI4_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 800191e:	2010      	movs	r0, #16
 8001920:	f7ff ff8c 	bl	800183c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}

08001928 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE END SPI1_IRQn 0 */
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6)) // 인터럽트중 USART6인지 확인
 800193c:	480a      	ldr	r0, [pc, #40]	; (8001968 <USART6_IRQHandler+0x30>)
 800193e:	f7ff ff8d 	bl	800185c <LL_USART_IsActiveFlag_RXNE>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00c      	beq.n	8001962 <USART6_IRQHandler+0x2a>
	{
			LL_USART_ClearFlag_RXNE(USART6); // 맞으면 비트 클리어
 8001948:	4807      	ldr	r0, [pc, #28]	; (8001968 <USART6_IRQHandler+0x30>)
 800194a:	f7ff ff9a 	bl	8001882 <LL_USART_ClearFlag_RXNE>
			rxd = LL_USART_ReceiveData8(USART6); // 데이터 수신
 800194e:	4806      	ldr	r0, [pc, #24]	; (8001968 <USART6_IRQHandler+0x30>)
 8001950:	f7ff ffa5 	bl	800189e <LL_USART_ReceiveData8>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <USART6_IRQHandler+0x34>)
 800195a:	701a      	strb	r2, [r3, #0]
			flag_INT_USART6 = 1; // flag 클리어
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <USART6_IRQHandler+0x38>)
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40011400 	.word	0x40011400
 800196c:	200000ad 	.word	0x200000ad
 8001970:	200000ac 	.word	0x200000ac

08001974 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	e00a      	b.n	800199c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001986:	f3af 8000 	nop.w
 800198a:	4601      	mov	r1, r0
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	60ba      	str	r2, [r7, #8]
 8001992:	b2ca      	uxtb	r2, r1
 8001994:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	3301      	adds	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	dbf0      	blt.n	8001986 <_read+0x12>
  }

  return len;
 80019a4:	687b      	ldr	r3, [r7, #4]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <_close>:
  }
  return len;
}

int _close(int file)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019d6:	605a      	str	r2, [r3, #4]
  return 0;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <_isatty>:

int _isatty(int file)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a20:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <_sbrk+0x5c>)
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <_sbrk+0x60>)
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d102      	bne.n	8001a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <_sbrk+0x64>)
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <_sbrk+0x68>)
 8001a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <_sbrk+0x64>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d207      	bcs.n	8001a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a48:	f001 fd80 	bl	800354c <__errno>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	220c      	movs	r2, #12
 8001a50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a56:	e009      	b.n	8001a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <_sbrk+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <_sbrk+0x64>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <_sbrk+0x64>)
 8001a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3718      	adds	r7, #24
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20020000 	.word	0x20020000
 8001a78:	00000400 	.word	0x00000400
 8001a7c:	200000b0 	.word	0x200000b0
 8001a80:	200000c8 	.word	0x200000c8

08001a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <SystemInit+0x20>)
 8001a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a8e:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <SystemInit+0x20>)
 8001a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <LL_AHB1_GRP1_EnableClock>:
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ab2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab4:	4907      	ldr	r1, [pc, #28]	; (8001ad4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <LL_APB1_GRP1_EnableClock>:
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ae4:	4907      	ldr	r1, [pc, #28]	; (8001b04 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4013      	ands	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001af6:	68fb      	ldr	r3, [r7, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	40023800 	.word	0x40023800

08001b08 <LL_TIM_EnableARRPreload>:
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	601a      	str	r2, [r3, #0]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d01c      	beq.n	8001b72 <LL_TIM_OC_EnableFast+0x4a>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d017      	beq.n	8001b6e <LL_TIM_OC_EnableFast+0x46>
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2b10      	cmp	r3, #16
 8001b42:	d012      	beq.n	8001b6a <LL_TIM_OC_EnableFast+0x42>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	2b40      	cmp	r3, #64	; 0x40
 8001b48:	d00d      	beq.n	8001b66 <LL_TIM_OC_EnableFast+0x3e>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b50:	d007      	beq.n	8001b62 <LL_TIM_OC_EnableFast+0x3a>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b58:	d101      	bne.n	8001b5e <LL_TIM_OC_EnableFast+0x36>
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	e00a      	b.n	8001b74 <LL_TIM_OC_EnableFast+0x4c>
 8001b5e:	2306      	movs	r3, #6
 8001b60:	e008      	b.n	8001b74 <LL_TIM_OC_EnableFast+0x4c>
 8001b62:	2304      	movs	r3, #4
 8001b64:	e006      	b.n	8001b74 <LL_TIM_OC_EnableFast+0x4c>
 8001b66:	2303      	movs	r3, #3
 8001b68:	e004      	b.n	8001b74 <LL_TIM_OC_EnableFast+0x4c>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e002      	b.n	8001b74 <LL_TIM_OC_EnableFast+0x4c>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <LL_TIM_OC_EnableFast+0x4c>
 8001b72:	2300      	movs	r3, #0
 8001b74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3318      	adds	r3, #24
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <LL_TIM_OC_EnableFast+0x80>)
 8001b80:	5cd3      	ldrb	r3, [r2, r3]
 8001b82:	440b      	add	r3, r1
 8001b84:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	4907      	ldr	r1, [pc, #28]	; (8001bac <LL_TIM_OC_EnableFast+0x84>)
 8001b8e:	5ccb      	ldrb	r3, [r1, r3]
 8001b90:	4619      	mov	r1, r3
 8001b92:	2304      	movs	r3, #4
 8001b94:	408b      	lsls	r3, r1
 8001b96:	431a      	orrs	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	601a      	str	r2, [r3, #0]

}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	08004570 	.word	0x08004570
 8001bac:	08004578 	.word	0x08004578

08001bb0 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d01c      	beq.n	8001bfa <LL_TIM_OC_EnablePreload+0x4a>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d017      	beq.n	8001bf6 <LL_TIM_OC_EnablePreload+0x46>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b10      	cmp	r3, #16
 8001bca:	d012      	beq.n	8001bf2 <LL_TIM_OC_EnablePreload+0x42>
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	2b40      	cmp	r3, #64	; 0x40
 8001bd0:	d00d      	beq.n	8001bee <LL_TIM_OC_EnablePreload+0x3e>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bd8:	d007      	beq.n	8001bea <LL_TIM_OC_EnablePreload+0x3a>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be0:	d101      	bne.n	8001be6 <LL_TIM_OC_EnablePreload+0x36>
 8001be2:	2305      	movs	r3, #5
 8001be4:	e00a      	b.n	8001bfc <LL_TIM_OC_EnablePreload+0x4c>
 8001be6:	2306      	movs	r3, #6
 8001be8:	e008      	b.n	8001bfc <LL_TIM_OC_EnablePreload+0x4c>
 8001bea:	2304      	movs	r3, #4
 8001bec:	e006      	b.n	8001bfc <LL_TIM_OC_EnablePreload+0x4c>
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e004      	b.n	8001bfc <LL_TIM_OC_EnablePreload+0x4c>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e002      	b.n	8001bfc <LL_TIM_OC_EnablePreload+0x4c>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <LL_TIM_OC_EnablePreload+0x4c>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3318      	adds	r3, #24
 8001c02:	4619      	mov	r1, r3
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <LL_TIM_OC_EnablePreload+0x80>)
 8001c08:	5cd3      	ldrb	r3, [r2, r3]
 8001c0a:	440b      	add	r3, r1
 8001c0c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	4907      	ldr	r1, [pc, #28]	; (8001c34 <LL_TIM_OC_EnablePreload+0x84>)
 8001c16:	5ccb      	ldrb	r3, [r1, r3]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	2308      	movs	r3, #8
 8001c1c:	408b      	lsls	r3, r1
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	601a      	str	r2, [r3, #0]
}
 8001c24:	bf00      	nop
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	08004570 	.word	0x08004570
 8001c34:	08004578 	.word	0x08004578

08001c38 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c4a:	f023 0307 	bic.w	r3, r3, #7
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	609a      	str	r2, [r3, #8]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	605a      	str	r2, [r3, #4]
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b094      	sub	sp, #80	; 0x50
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001cae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001cbe:	f107 031c 	add.w	r3, r7, #28
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f001 fc6a 	bl	80035a0 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	611a      	str	r2, [r3, #16]
 8001cda:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001cdc:	2002      	movs	r0, #2
 8001cde:	f7ff fefb 	bl	8001ad8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8001ce2:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001ce6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 8001cec:	2314      	movs	r3, #20
 8001cee:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001cf4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4821      	ldr	r0, [pc, #132]	; (8001d80 <MX_TIM3_Init+0xd8>)
 8001cfc:	f000 fe62 	bl	80029c4 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8001d00:	481f      	ldr	r0, [pc, #124]	; (8001d80 <MX_TIM3_Init+0xd8>)
 8001d02:	f7ff ff01 	bl	8001b08 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001d06:	2100      	movs	r1, #0
 8001d08:	481d      	ldr	r0, [pc, #116]	; (8001d80 <MX_TIM3_Init+0xd8>)
 8001d0a:	f7ff ff95 	bl	8001c38 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8001d0e:	2101      	movs	r1, #1
 8001d10:	481b      	ldr	r0, [pc, #108]	; (8001d80 <MX_TIM3_Init+0xd8>)
 8001d12:	f7ff ff4d 	bl	8001bb0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001d16:	2360      	movs	r3, #96	; 0x60
 8001d18:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001d26:	2300      	movs	r3, #0
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	461a      	mov	r2, r3
 8001d30:	2101      	movs	r1, #1
 8001d32:	4813      	ldr	r0, [pc, #76]	; (8001d80 <MX_TIM3_Init+0xd8>)
 8001d34:	f000 fee0 	bl	8002af8 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8001d38:	2101      	movs	r1, #1
 8001d3a:	4811      	ldr	r0, [pc, #68]	; (8001d80 <MX_TIM3_Init+0xd8>)
 8001d3c:	f7ff fef4 	bl	8001b28 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001d40:	2100      	movs	r1, #0
 8001d42:	480f      	ldr	r0, [pc, #60]	; (8001d80 <MX_TIM3_Init+0xd8>)
 8001d44:	f7ff ff8d 	bl	8001c62 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001d48:	480d      	ldr	r0, [pc, #52]	; (8001d80 <MX_TIM3_Init+0xd8>)
 8001d4a:	f7ff ff9d 	bl	8001c88 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001d4e:	2002      	movs	r0, #2
 8001d50:	f7ff feaa 	bl	8001aa8 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001d54:	2310      	movs	r3, #16
 8001d56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4804      	ldr	r0, [pc, #16]	; (8001d84 <MX_TIM3_Init+0xdc>)
 8001d72:	f000 fb91 	bl	8002498 <LL_GPIO_Init>

}
 8001d76:	bf00      	nop
 8001d78:	3750      	adds	r7, #80	; 0x50
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40000400 	.word	0x40000400
 8001d84:	40020400 	.word	0x40020400

08001d88 <__NVIC_GetPriorityGrouping>:
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d8c:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	f003 0307 	and.w	r3, r3, #7
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <__NVIC_EnableIRQ>:
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	db0b      	blt.n	8001dce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	f003 021f 	and.w	r2, r3, #31
 8001dbc:	4907      	ldr	r1, [pc, #28]	; (8001ddc <__NVIC_EnableIRQ+0x38>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000e100 	.word	0xe000e100

08001de0 <__NVIC_SetPriority>:
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db0a      	blt.n	8001e0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	490c      	ldr	r1, [pc, #48]	; (8001e2c <__NVIC_SetPriority+0x4c>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	440b      	add	r3, r1
 8001e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e08:	e00a      	b.n	8001e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4908      	ldr	r1, [pc, #32]	; (8001e30 <__NVIC_SetPriority+0x50>)
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	3b04      	subs	r3, #4
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	761a      	strb	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000e100 	.word	0xe000e100
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <NVIC_EncodePriority>:
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f1c3 0307 	rsb	r3, r3, #7
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	bf28      	it	cs
 8001e52:	2304      	movcs	r3, #4
 8001e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d902      	bls.n	8001e64 <NVIC_EncodePriority+0x30>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3b03      	subs	r3, #3
 8001e62:	e000      	b.n	8001e66 <NVIC_EncodePriority+0x32>
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	401a      	ands	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43d9      	mvns	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	4313      	orrs	r3, r2
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3724      	adds	r7, #36	; 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <LL_AHB1_GRP1_EnableClock>:
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ea8:	4907      	ldr	r1, [pc, #28]	; (8001ec8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001eba:	68fb      	ldr	r3, [r7, #12]
}
 8001ebc:	bf00      	nop
 8001ebe:	3714      	adds	r7, #20
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	40023800 	.word	0x40023800

08001ecc <LL_APB2_GRP1_EnableClock>:
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ed6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ed8:	4907      	ldr	r1, [pc, #28]	; (8001ef8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001eea:	68fb      	ldr	r3, [r7, #12]
}
 8001eec:	bf00      	nop
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	40023800 	.word	0x40023800

08001efc <LL_USART_Enable>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	60da      	str	r2, [r3, #12]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_USART_ConfigAsyncMode>:
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	615a      	str	r2, [r3, #20]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08e      	sub	sp, #56	; 0x38
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001f4e:	f107 031c 	add.w	r3, r7, #28
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	605a      	str	r2, [r3, #4]
 8001f58:	609a      	str	r2, [r3, #8]
 8001f5a:	60da      	str	r2, [r3, #12]
 8001f5c:	611a      	str	r2, [r3, #16]
 8001f5e:	615a      	str	r2, [r3, #20]
 8001f60:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
 8001f70:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8001f72:	2020      	movs	r0, #32
 8001f74:	f7ff ffaa 	bl	8001ecc <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001f78:	2004      	movs	r0, #4
 8001f7a:	f7ff ff8f 	bl	8001e9c <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001f7e:	23c0      	movs	r3, #192	; 0xc0
 8001f80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f82:	2302      	movs	r3, #2
 8001f84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001f92:	2308      	movs	r3, #8
 8001f94:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4819      	ldr	r0, [pc, #100]	; (8002000 <MX_USART6_UART_Init+0xb8>)
 8001f9c:	f000 fa7c 	bl	8002498 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001fa0:	f7ff fef2 	bl	8001d88 <__NVIC_GetPriorityGrouping>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff ff42 	bl	8001e34 <NVIC_EncodePriority>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	2047      	movs	r0, #71	; 0x47
 8001fb6:	f7ff ff13 	bl	8001de0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8001fba:	2047      	movs	r0, #71	; 0x47
 8001fbc:	f7ff fef2 	bl	8001da4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001fc0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001fc4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001fd2:	230c      	movs	r3, #12
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8001fde:	f107 031c 	add.w	r3, r7, #28
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4807      	ldr	r0, [pc, #28]	; (8002004 <MX_USART6_UART_Init+0xbc>)
 8001fe6:	f001 f9d3 	bl	8003390 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8001fea:	4806      	ldr	r0, [pc, #24]	; (8002004 <MX_USART6_UART_Init+0xbc>)
 8001fec:	f7ff ff96 	bl	8001f1c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8001ff0:	4804      	ldr	r0, [pc, #16]	; (8002004 <MX_USART6_UART_Init+0xbc>)
 8001ff2:	f7ff ff83 	bl	8001efc <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	3738      	adds	r7, #56	; 0x38
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40020800 	.word	0x40020800
 8002004:	40011400 	.word	0x40011400

08002008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002040 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800200c:	480d      	ldr	r0, [pc, #52]	; (8002044 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800200e:	490e      	ldr	r1, [pc, #56]	; (8002048 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002010:	4a0e      	ldr	r2, [pc, #56]	; (800204c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002014:	e002      	b.n	800201c <LoopCopyDataInit>

08002016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800201a:	3304      	adds	r3, #4

0800201c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800201c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800201e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002020:	d3f9      	bcc.n	8002016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002022:	4a0b      	ldr	r2, [pc, #44]	; (8002050 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002024:	4c0b      	ldr	r4, [pc, #44]	; (8002054 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002028:	e001      	b.n	800202e <LoopFillZerobss>

0800202a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800202a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800202c:	3204      	adds	r2, #4

0800202e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800202e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002030:	d3fb      	bcc.n	800202a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002032:	f7ff fd27 	bl	8001a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002036:	f001 fa8f 	bl	8003558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800203a:	f7ff f963 	bl	8001304 <main>
  bx  lr    
 800203e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002048:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800204c:	08004628 	.word	0x08004628
  ldr r2, =_sbss
 8002050:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002054:	200000c4 	.word	0x200000c4

08002058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002058:	e7fe      	b.n	8002058 <ADC_IRQHandler>
	...

0800205c <LL_EXTI_EnableIT_0_31>:
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <LL_EXTI_EnableIT_0_31+0x20>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4904      	ldr	r1, [pc, #16]	; (800207c <LL_EXTI_EnableIT_0_31+0x20>)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4313      	orrs	r3, r2
 800206e:	600b      	str	r3, [r1, #0]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	40013c00 	.word	0x40013c00

08002080 <LL_EXTI_DisableIT_0_31>:
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <LL_EXTI_DisableIT_0_31+0x24>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	43db      	mvns	r3, r3
 8002090:	4904      	ldr	r1, [pc, #16]	; (80020a4 <LL_EXTI_DisableIT_0_31+0x24>)
 8002092:	4013      	ands	r3, r2
 8002094:	600b      	str	r3, [r1, #0]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40013c00 	.word	0x40013c00

080020a8 <LL_EXTI_EnableEvent_0_31>:
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	4904      	ldr	r1, [pc, #16]	; (80020c8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	604b      	str	r3, [r1, #4]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40013c00 	.word	0x40013c00

080020cc <LL_EXTI_DisableEvent_0_31>:
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	43db      	mvns	r3, r3
 80020dc:	4904      	ldr	r1, [pc, #16]	; (80020f0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80020de:	4013      	ands	r3, r2
 80020e0:	604b      	str	r3, [r1, #4]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40013c00 	.word	0x40013c00

080020f4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	4904      	ldr	r1, [pc, #16]	; (8002114 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4313      	orrs	r3, r2
 8002106:	608b      	str	r3, [r1, #8]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	40013c00 	.word	0x40013c00

08002118 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	43db      	mvns	r3, r3
 8002128:	4904      	ldr	r1, [pc, #16]	; (800213c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800212a:	4013      	ands	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40013c00 	.word	0x40013c00

08002140 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	4904      	ldr	r1, [pc, #16]	; (8002160 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4313      	orrs	r3, r2
 8002152:	60cb      	str	r3, [r1, #12]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	40013c00 	.word	0x40013c00

08002164 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	43db      	mvns	r3, r3
 8002174:	4904      	ldr	r1, [pc, #16]	; (8002188 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002176:	4013      	ands	r3, r2
 8002178:	60cb      	str	r3, [r1, #12]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40013c00 	.word	0x40013c00

0800218c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002194:	2300      	movs	r3, #0
 8002196:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	791b      	ldrb	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d065      	beq.n	800226c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d06c      	beq.n	8002282 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	795b      	ldrb	r3, [r3, #5]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d01c      	beq.n	80021ea <LL_EXTI_Init+0x5e>
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	dc25      	bgt.n	8002200 <LL_EXTI_Init+0x74>
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <LL_EXTI_Init+0x32>
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d00b      	beq.n	80021d4 <LL_EXTI_Init+0x48>
 80021bc:	e020      	b.n	8002200 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff ff82 	bl	80020cc <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff45 	bl	800205c <LL_EXTI_EnableIT_0_31>
          break;
 80021d2:	e018      	b.n	8002206 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff51 	bl	8002080 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff ff60 	bl	80020a8 <LL_EXTI_EnableEvent_0_31>
          break;
 80021e8:	e00d      	b.n	8002206 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff ff34 	bl	800205c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff55 	bl	80020a8 <LL_EXTI_EnableEvent_0_31>
          break;
 80021fe:	e002      	b.n	8002206 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
          break;
 8002204:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	799b      	ldrb	r3, [r3, #6]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d039      	beq.n	8002282 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	799b      	ldrb	r3, [r3, #6]
 8002212:	2b03      	cmp	r3, #3
 8002214:	d01c      	beq.n	8002250 <LL_EXTI_Init+0xc4>
 8002216:	2b03      	cmp	r3, #3
 8002218:	dc25      	bgt.n	8002266 <LL_EXTI_Init+0xda>
 800221a:	2b01      	cmp	r3, #1
 800221c:	d002      	beq.n	8002224 <LL_EXTI_Init+0x98>
 800221e:	2b02      	cmp	r3, #2
 8002220:	d00b      	beq.n	800223a <LL_EXTI_Init+0xae>
 8002222:	e020      	b.n	8002266 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff9b 	bl	8002164 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff ff5e 	bl	80020f4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002238:	e024      	b.n	8002284 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ff6a 	bl	8002118 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff79 	bl	8002140 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800224e:	e019      	b.n	8002284 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff4d 	bl	80020f4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff ff6e 	bl	8002140 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002264:	e00e      	b.n	8002284 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
            break;
 800226a:	e00b      	b.n	8002284 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff05 	bl	8002080 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff ff26 	bl	80020cc <LL_EXTI_DisableEvent_0_31>
 8002280:	e000      	b.n	8002284 <LL_EXTI_Init+0xf8>
      }
 8002282:	bf00      	nop
  }
  return status;
 8002284:	7bfb      	ldrb	r3, [r7, #15]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <LL_GPIO_SetPinMode>:
{
 800228e:	b480      	push	{r7}
 8002290:	b089      	sub	sp, #36	; 0x24
 8002292:	af00      	add	r7, sp, #0
 8002294:	60f8      	str	r0, [r7, #12]
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	613b      	str	r3, [r7, #16]
  return result;
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	2103      	movs	r1, #3
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	401a      	ands	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	61bb      	str	r3, [r7, #24]
  return result;
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	fab3 f383 	clz	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	fa01 f303 	lsl.w	r3, r1, r3
 80022da:	431a      	orrs	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	601a      	str	r2, [r3, #0]
}
 80022e0:	bf00      	nop
 80022e2:	3724      	adds	r7, #36	; 0x24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <LL_GPIO_SetPinOutputType>:
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	43db      	mvns	r3, r3
 8002300:	401a      	ands	r2, r3
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	431a      	orrs	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	605a      	str	r2, [r3, #4]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_GPIO_SetPinSpeed>:
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	; 0x24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	613b      	str	r3, [r7, #16]
  return result;
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	fab3 f383 	clz	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	2103      	movs	r1, #3
 8002344:	fa01 f303 	lsl.w	r3, r1, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	401a      	ands	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	61bb      	str	r3, [r7, #24]
  return result;
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	fab3 f383 	clz	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	431a      	orrs	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	609a      	str	r2, [r3, #8]
}
 800236e:	bf00      	nop
 8002370:	3724      	adds	r7, #36	; 0x24
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <LL_GPIO_SetPinPull>:
{
 800237a:	b480      	push	{r7}
 800237c:	b089      	sub	sp, #36	; 0x24
 800237e:	af00      	add	r7, sp, #0
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	613b      	str	r3, [r7, #16]
  return result;
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	2103      	movs	r1, #3
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	401a      	ands	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	61bb      	str	r3, [r7, #24]
  return result;
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	fab3 f383 	clz	r3, r3
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	431a      	orrs	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	60da      	str	r2, [r3, #12]
}
 80023cc:	bf00      	nop
 80023ce:	3724      	adds	r7, #36	; 0x24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_GPIO_SetAFPin_0_7>:
{
 80023d8:	b480      	push	{r7}
 80023da:	b089      	sub	sp, #36	; 0x24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a1a      	ldr	r2, [r3, #32]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa93 f3a3 	rbit	r3, r3
 80023f2:	613b      	str	r3, [r7, #16]
  return result;
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	210f      	movs	r1, #15
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	401a      	ands	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	61bb      	str	r3, [r7, #24]
  return result;
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	431a      	orrs	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	621a      	str	r2, [r3, #32]
}
 800242a:	bf00      	nop
 800242c:	3724      	adds	r7, #36	; 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <LL_GPIO_SetAFPin_8_15>:
{
 8002436:	b480      	push	{r7}
 8002438:	b089      	sub	sp, #36	; 0x24
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	fa93 f3a3 	rbit	r3, r3
 8002452:	613b      	str	r3, [r7, #16]
  return result;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	fab3 f383 	clz	r3, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	210f      	movs	r1, #15
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	43db      	mvns	r3, r3
 8002466:	401a      	ands	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	61bb      	str	r3, [r7, #24]
  return result;
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	431a      	orrs	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800248c:	bf00      	nop
 800248e:	3724      	adds	r7, #36	; 0x24
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	613b      	str	r3, [r7, #16]
  return result;
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80024c2:	e050      	b.n	8002566 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	2101      	movs	r1, #1
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d042      	beq.n	8002560 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d003      	beq.n	80024ea <LL_GPIO_Init+0x52>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d10d      	bne.n	8002506 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	461a      	mov	r2, r3
 80024f0:	69b9      	ldr	r1, [r7, #24]
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff ff12 	bl	800231c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	461a      	mov	r2, r3
 80024fe:	69b9      	ldr	r1, [r7, #24]
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff fef3 	bl	80022ec <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	461a      	mov	r2, r3
 800250c:	69b9      	ldr	r1, [r7, #24]
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ff33 	bl	800237a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d11a      	bne.n	8002552 <LL_GPIO_Init+0xba>
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	fa93 f3a3 	rbit	r3, r3
 8002526:	60bb      	str	r3, [r7, #8]
  return result;
 8002528:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b07      	cmp	r3, #7
 8002532:	d807      	bhi.n	8002544 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	461a      	mov	r2, r3
 800253a:	69b9      	ldr	r1, [r7, #24]
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ff4b 	bl	80023d8 <LL_GPIO_SetAFPin_0_7>
 8002542:	e006      	b.n	8002552 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	461a      	mov	r2, r3
 800254a:	69b9      	ldr	r1, [r7, #24]
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ff72 	bl	8002436 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	461a      	mov	r2, r3
 8002558:	69b9      	ldr	r1, [r7, #24]
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff fe97 	bl	800228e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	3301      	adds	r3, #1
 8002564:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa22 f303 	lsr.w	r3, r2, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1a7      	bne.n	80024c4 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <LL_RCC_GetSysClkSource>:
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <LL_RCC_GetSysClkSource+0x18>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 030c 	and.w	r3, r3, #12
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800

0800259c <LL_RCC_GetAHBPrescaler>:
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <LL_RCC_GetAHBPrescaler+0x18>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40023800 	.word	0x40023800

080025b8 <LL_RCC_GetAPB1Prescaler>:
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80025bc:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800

080025d4 <LL_RCC_GetAPB2Prescaler>:
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <LL_RCC_GetAPB2Prescaler+0x18>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800

080025f0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80025f4:	4b04      	ldr	r3, [pc, #16]	; (8002608 <LL_RCC_PLL_GetMainSource+0x18>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800

0800260c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <LL_RCC_PLL_GetN+0x18>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	099b      	lsrs	r3, r3, #6
 8002616:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800261a:	4618      	mov	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	40023800 	.word	0x40023800

08002628 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <LL_RCC_PLL_GetP+0x18>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800

08002644 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <LL_RCC_PLL_GetDivider+0x18>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8002650:	4618      	mov	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800

08002660 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002668:	f000 f820 	bl	80026ac <RCC_GetSystemClockFreq>
 800266c:	4602      	mov	r2, r0
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f840 	bl	80026fc <RCC_GetHCLKClockFreq>
 800267c:	4602      	mov	r2, r0
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f84e 	bl	8002728 <RCC_GetPCLK1ClockFreq>
 800268c:	4602      	mov	r2, r0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4618      	mov	r0, r3
 8002698:	f000 f85a 	bl	8002750 <RCC_GetPCLK2ClockFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	60da      	str	r2, [r3, #12]
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80026b6:	f7ff ff63 	bl	8002580 <LL_RCC_GetSysClkSource>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d00c      	beq.n	80026da <RCC_GetSystemClockFreq+0x2e>
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d80f      	bhi.n	80026e4 <RCC_GetSystemClockFreq+0x38>
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <RCC_GetSystemClockFreq+0x22>
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d003      	beq.n	80026d4 <RCC_GetSystemClockFreq+0x28>
 80026cc:	e00a      	b.n	80026e4 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <RCC_GetSystemClockFreq+0x48>)
 80026d0:	607b      	str	r3, [r7, #4]
      break;
 80026d2:	e00a      	b.n	80026ea <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <RCC_GetSystemClockFreq+0x4c>)
 80026d6:	607b      	str	r3, [r7, #4]
      break;
 80026d8:	e007      	b.n	80026ea <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80026da:	2008      	movs	r0, #8
 80026dc:	f000 f84c 	bl	8002778 <RCC_PLL_GetFreqDomain_SYS>
 80026e0:	6078      	str	r0, [r7, #4]
      break;
 80026e2:	e002      	b.n	80026ea <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <RCC_GetSystemClockFreq+0x48>)
 80026e6:	607b      	str	r3, [r7, #4]
      break;
 80026e8:	bf00      	nop
  }

  return frequency;
 80026ea:	687b      	ldr	r3, [r7, #4]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	00f42400 	.word	0x00f42400
 80026f8:	007a1200 	.word	0x007a1200

080026fc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002704:	f7ff ff4a 	bl	800259c <LL_RCC_GetAHBPrescaler>
 8002708:	4603      	mov	r3, r0
 800270a:	091b      	lsrs	r3, r3, #4
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	4a04      	ldr	r2, [pc, #16]	; (8002724 <RCC_GetHCLKClockFreq+0x28>)
 8002712:	5cd3      	ldrb	r3, [r2, r3]
 8002714:	461a      	mov	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	40d3      	lsrs	r3, r2
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	08004558 	.word	0x08004558

08002728 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002730:	f7ff ff42 	bl	80025b8 <LL_RCC_GetAPB1Prescaler>
 8002734:	4603      	mov	r3, r0
 8002736:	0a9b      	lsrs	r3, r3, #10
 8002738:	4a04      	ldr	r2, [pc, #16]	; (800274c <RCC_GetPCLK1ClockFreq+0x24>)
 800273a:	5cd3      	ldrb	r3, [r2, r3]
 800273c:	461a      	mov	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	40d3      	lsrs	r3, r2
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	08004568 	.word	0x08004568

08002750 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002758:	f7ff ff3c 	bl	80025d4 <LL_RCC_GetAPB2Prescaler>
 800275c:	4603      	mov	r3, r0
 800275e:	0b5b      	lsrs	r3, r3, #13
 8002760:	4a04      	ldr	r2, [pc, #16]	; (8002774 <RCC_GetPCLK2ClockFreq+0x24>)
 8002762:	5cd3      	ldrb	r3, [r2, r3]
 8002764:	461a      	mov	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	40d3      	lsrs	r3, r2
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	08004568 	.word	0x08004568

08002778 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	2300      	movs	r3, #0
 800278a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800278c:	f7ff ff30 	bl	80025f0 <LL_RCC_PLL_GetMainSource>
 8002790:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d004      	beq.n	80027a2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800279e:	d003      	beq.n	80027a8 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80027a0:	e005      	b.n	80027ae <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80027a2:	4b12      	ldr	r3, [pc, #72]	; (80027ec <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80027a4:	617b      	str	r3, [r7, #20]
      break;
 80027a6:	e005      	b.n	80027b4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80027aa:	617b      	str	r3, [r7, #20]
      break;
 80027ac:	e002      	b.n	80027b4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80027ae:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80027b0:	617b      	str	r3, [r7, #20]
      break;
 80027b2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d113      	bne.n	80027e2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80027ba:	f7ff ff43 	bl	8002644 <LL_RCC_PLL_GetDivider>
 80027be:	4602      	mov	r2, r0
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fbb3 f4f2 	udiv	r4, r3, r2
 80027c6:	f7ff ff21 	bl	800260c <LL_RCC_PLL_GetN>
 80027ca:	4603      	mov	r3, r0
 80027cc:	fb03 f404 	mul.w	r4, r3, r4
 80027d0:	f7ff ff2a 	bl	8002628 <LL_RCC_PLL_GetP>
 80027d4:	4603      	mov	r3, r0
 80027d6:	0c1b      	lsrs	r3, r3, #16
 80027d8:	3301      	adds	r3, #1
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fbb4 f3f3 	udiv	r3, r4, r3
 80027e0:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80027e2:	693b      	ldr	r3, [r7, #16]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	371c      	adds	r7, #28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd90      	pop	{r4, r7, pc}
 80027ec:	00f42400 	.word	0x00f42400
 80027f0:	007a1200 	.word	0x007a1200

080027f4 <LL_SPI_IsEnabled>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002804:	2b40      	cmp	r3, #64	; 0x40
 8002806:	d101      	bne.n	800280c <LL_SPI_IsEnabled+0x18>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <LL_SPI_IsEnabled+0x1a>
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <LL_SPI_SetCRCPolynomial>:
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	611a      	str	r2, [r3, #16]
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
 8002842:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff ffd3 	bl	80027f4 <LL_SPI_IsEnabled>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d139      	bne.n	80028c8 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800285c:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	6811      	ldr	r1, [r2, #0]
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	6852      	ldr	r2, [r2, #4]
 8002868:	4311      	orrs	r1, r2
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	6892      	ldr	r2, [r2, #8]
 800286e:	4311      	orrs	r1, r2
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	68d2      	ldr	r2, [r2, #12]
 8002874:	4311      	orrs	r1, r2
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	6912      	ldr	r2, [r2, #16]
 800287a:	4311      	orrs	r1, r2
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	6952      	ldr	r2, [r2, #20]
 8002880:	4311      	orrs	r1, r2
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	6992      	ldr	r2, [r2, #24]
 8002886:	4311      	orrs	r1, r2
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	69d2      	ldr	r2, [r2, #28]
 800288c:	4311      	orrs	r1, r2
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	6a12      	ldr	r2, [r2, #32]
 8002892:	430a      	orrs	r2, r1
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f023 0204 	bic.w	r2, r3, #4
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	0c1b      	lsrs	r3, r3, #16
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b6:	d105      	bne.n	80028c4 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	4619      	mov	r1, r3
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7ff ffab 	bl	800281a <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80028c4:	2300      	movs	r3, #0
 80028c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	61da      	str	r2, [r3, #28]
  return status;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <LL_TIM_SetPrescaler>:
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <LL_TIM_SetAutoReload>:
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <LL_TIM_SetRepetitionCounter>:
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <LL_TIM_OC_SetCompareCH1>:
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <LL_TIM_OC_SetCompareCH2>:
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <LL_TIM_OC_SetCompareCH3>:
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <LL_TIM_OC_SetCompareCH4>:
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f043 0201 	orr.w	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	615a      	str	r2, [r3, #20]
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a3d      	ldr	r2, [pc, #244]	; (8002acc <LL_TIM_Init+0x108>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d013      	beq.n	8002a04 <LL_TIM_Init+0x40>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e2:	d00f      	beq.n	8002a04 <LL_TIM_Init+0x40>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a3a      	ldr	r2, [pc, #232]	; (8002ad0 <LL_TIM_Init+0x10c>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d00b      	beq.n	8002a04 <LL_TIM_Init+0x40>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a39      	ldr	r2, [pc, #228]	; (8002ad4 <LL_TIM_Init+0x110>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d007      	beq.n	8002a04 <LL_TIM_Init+0x40>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a38      	ldr	r2, [pc, #224]	; (8002ad8 <LL_TIM_Init+0x114>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d003      	beq.n	8002a04 <LL_TIM_Init+0x40>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a37      	ldr	r2, [pc, #220]	; (8002adc <LL_TIM_Init+0x118>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d106      	bne.n	8002a12 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a2d      	ldr	r2, [pc, #180]	; (8002acc <LL_TIM_Init+0x108>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d02b      	beq.n	8002a72 <LL_TIM_Init+0xae>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a20:	d027      	beq.n	8002a72 <LL_TIM_Init+0xae>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a2a      	ldr	r2, [pc, #168]	; (8002ad0 <LL_TIM_Init+0x10c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d023      	beq.n	8002a72 <LL_TIM_Init+0xae>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a29      	ldr	r2, [pc, #164]	; (8002ad4 <LL_TIM_Init+0x110>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01f      	beq.n	8002a72 <LL_TIM_Init+0xae>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a28      	ldr	r2, [pc, #160]	; (8002ad8 <LL_TIM_Init+0x114>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01b      	beq.n	8002a72 <LL_TIM_Init+0xae>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a27      	ldr	r2, [pc, #156]	; (8002adc <LL_TIM_Init+0x118>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d017      	beq.n	8002a72 <LL_TIM_Init+0xae>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a26      	ldr	r2, [pc, #152]	; (8002ae0 <LL_TIM_Init+0x11c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <LL_TIM_Init+0xae>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a25      	ldr	r2, [pc, #148]	; (8002ae4 <LL_TIM_Init+0x120>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00f      	beq.n	8002a72 <LL_TIM_Init+0xae>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a24      	ldr	r2, [pc, #144]	; (8002ae8 <LL_TIM_Init+0x124>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00b      	beq.n	8002a72 <LL_TIM_Init+0xae>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a23      	ldr	r2, [pc, #140]	; (8002aec <LL_TIM_Init+0x128>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d007      	beq.n	8002a72 <LL_TIM_Init+0xae>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a22      	ldr	r2, [pc, #136]	; (8002af0 <LL_TIM_Init+0x12c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d003      	beq.n	8002a72 <LL_TIM_Init+0xae>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a21      	ldr	r2, [pc, #132]	; (8002af4 <LL_TIM_Init+0x130>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d106      	bne.n	8002a80 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ff34 	bl	80028fa <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	4619      	mov	r1, r3
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff ff20 	bl	80028de <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <LL_TIM_Init+0x108>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d003      	beq.n	8002aae <LL_TIM_Init+0xea>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a0c      	ldr	r2, [pc, #48]	; (8002adc <LL_TIM_Init+0x118>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d105      	bne.n	8002aba <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff ff2e 	bl	8002916 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff ff71 	bl	80029a2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	40010000 	.word	0x40010000
 8002ad0:	40000400 	.word	0x40000400
 8002ad4:	40000800 	.word	0x40000800
 8002ad8:	40000c00 	.word	0x40000c00
 8002adc:	40010400 	.word	0x40010400
 8002ae0:	40014000 	.word	0x40014000
 8002ae4:	40014400 	.word	0x40014400
 8002ae8:	40014800 	.word	0x40014800
 8002aec:	40001800 	.word	0x40001800
 8002af0:	40001c00 	.word	0x40001c00
 8002af4:	40002000 	.word	0x40002000

08002af8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0e:	d027      	beq.n	8002b60 <LL_TIM_OC_Init+0x68>
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b16:	d82a      	bhi.n	8002b6e <LL_TIM_OC_Init+0x76>
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b1e:	d018      	beq.n	8002b52 <LL_TIM_OC_Init+0x5a>
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b26:	d822      	bhi.n	8002b6e <LL_TIM_OC_Init+0x76>
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d003      	beq.n	8002b36 <LL_TIM_OC_Init+0x3e>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b10      	cmp	r3, #16
 8002b32:	d007      	beq.n	8002b44 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002b34:	e01b      	b.n	8002b6e <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 f81f 	bl	8002b7c <OC1Config>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	75fb      	strb	r3, [r7, #23]
      break;
 8002b42:	e015      	b.n	8002b70 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f884 	bl	8002c54 <OC2Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b50:	e00e      	b.n	8002b70 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f8ed 	bl	8002d34 <OC3Config>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b5e:	e007      	b.n	8002b70 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 f956 	bl	8002e14 <OC4Config>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b6c:	e000      	b.n	8002b70 <LL_TIM_OC_Init+0x78>
      break;
 8002b6e:	bf00      	nop
  }

  return result;
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	f023 0201 	bic.w	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f023 0303 	bic.w	r3, r3, #3
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f023 0202 	bic.w	r2, r3, #2
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f023 0201 	bic.w	r2, r3, #1
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a1c      	ldr	r2, [pc, #112]	; (8002c4c <OC1Config+0xd0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d003      	beq.n	8002be6 <OC1Config+0x6a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a1b      	ldr	r2, [pc, #108]	; (8002c50 <OC1Config+0xd4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d11e      	bne.n	8002c24 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f023 0208 	bic.w	r2, r3, #8
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f023 0204 	bic.w	r2, r3, #4
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4313      	orrs	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	4619      	mov	r1, r3
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7ff fe7b 	bl	8002932 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40010000 	.word	0x40010000
 8002c50:	40010400 	.word	0x40010400

08002c54 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	f023 0210 	bic.w	r2, r3, #16
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f023 0220 	bic.w	r2, r3, #32
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f023 0210 	bic.w	r2, r3, #16
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a1d      	ldr	r2, [pc, #116]	; (8002d2c <OC2Config+0xd8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d003      	beq.n	8002cc4 <OC2Config+0x70>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a1c      	ldr	r2, [pc, #112]	; (8002d30 <OC2Config+0xdc>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d11f      	bne.n	8002d04 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	019b      	lsls	r3, r3, #6
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	019b      	lsls	r3, r3, #6
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4619      	mov	r1, r3
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff fe19 	bl	800294e <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40010000 	.word	0x40010000
 8002d30:	40010400 	.word	0x40010400

08002d34 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0303 	bic.w	r3, r3, #3
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	021b      	lsls	r3, r3, #8
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a1d      	ldr	r2, [pc, #116]	; (8002e0c <OC3Config+0xd8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d003      	beq.n	8002da2 <OC3Config+0x6e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a1c      	ldr	r2, [pc, #112]	; (8002e10 <OC3Config+0xdc>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d11f      	bne.n	8002de2 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	029b      	lsls	r3, r3, #10
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	029b      	lsls	r3, r3, #10
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	015b      	lsls	r3, r3, #5
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	4619      	mov	r1, r3
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff fdb8 	bl	800296a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40010000 	.word	0x40010000
 8002e10:	40010400 	.word	0x40010400

08002e14 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	021b      	lsls	r3, r3, #8
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	031b      	lsls	r3, r3, #12
 8002e60:	4313      	orrs	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	031b      	lsls	r3, r3, #12
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a11      	ldr	r2, [pc, #68]	; (8002ebc <OC4Config+0xa8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d003      	beq.n	8002e84 <OC4Config+0x70>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <OC4Config+0xac>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d107      	bne.n	8002e94 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	019b      	lsls	r3, r3, #6
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff fd6d 	bl	8002986 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40010000 	.word	0x40010000
 8002ec0:	40010400 	.word	0x40010400

08002ec4 <LL_USART_IsEnabled>:
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ed8:	bf0c      	ite	eq
 8002eda:	2301      	moveq	r3, #1
 8002edc:	2300      	movne	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_USART_SetStopBitsLength>:
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	611a      	str	r2, [r3, #16]
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <LL_USART_SetHWFlowCtrl>:
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	615a      	str	r2, [r3, #20]
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_USART_SetBaudRate>:
{
 8002f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f3c:	b0c0      	sub	sp, #256	; 0x100
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f44:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8002f48:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8002f4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f58:	f040 810c 	bne.w	8003174 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002f5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f60:	2200      	movs	r2, #0
 8002f62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f6e:	4622      	mov	r2, r4
 8002f70:	462b      	mov	r3, r5
 8002f72:	1891      	adds	r1, r2, r2
 8002f74:	6639      	str	r1, [r7, #96]	; 0x60
 8002f76:	415b      	adcs	r3, r3
 8002f78:	667b      	str	r3, [r7, #100]	; 0x64
 8002f7a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002f7e:	4621      	mov	r1, r4
 8002f80:	eb12 0801 	adds.w	r8, r2, r1
 8002f84:	4629      	mov	r1, r5
 8002f86:	eb43 0901 	adc.w	r9, r3, r1
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f9e:	4690      	mov	r8, r2
 8002fa0:	4699      	mov	r9, r3
 8002fa2:	4623      	mov	r3, r4
 8002fa4:	eb18 0303 	adds.w	r3, r8, r3
 8002fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fac:	462b      	mov	r3, r5
 8002fae:	eb49 0303 	adc.w	r3, r9, r3
 8002fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fb6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8002fba:	2200      	movs	r2, #0
 8002fbc:	469a      	mov	sl, r3
 8002fbe:	4693      	mov	fp, r2
 8002fc0:	eb1a 030a 	adds.w	r3, sl, sl
 8002fc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fc6:	eb4b 030b 	adc.w	r3, fp, fp
 8002fca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fcc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fd4:	f7fd f94c 	bl	8000270 <__aeabi_uldivmod>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4b64      	ldr	r3, [pc, #400]	; (8003170 <LL_USART_SetBaudRate+0x238>)
 8002fde:	fba3 2302 	umull	r2, r3, r3, r2
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	b29c      	uxth	r4, r3
 8002fea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ff4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ff8:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8002ffc:	4642      	mov	r2, r8
 8002ffe:	464b      	mov	r3, r9
 8003000:	1891      	adds	r1, r2, r2
 8003002:	6539      	str	r1, [r7, #80]	; 0x50
 8003004:	415b      	adcs	r3, r3
 8003006:	657b      	str	r3, [r7, #84]	; 0x54
 8003008:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800300c:	4641      	mov	r1, r8
 800300e:	1851      	adds	r1, r2, r1
 8003010:	64b9      	str	r1, [r7, #72]	; 0x48
 8003012:	4649      	mov	r1, r9
 8003014:	414b      	adcs	r3, r1
 8003016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8003024:	4659      	mov	r1, fp
 8003026:	00cb      	lsls	r3, r1, #3
 8003028:	4651      	mov	r1, sl
 800302a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800302e:	4651      	mov	r1, sl
 8003030:	00ca      	lsls	r2, r1, #3
 8003032:	4610      	mov	r0, r2
 8003034:	4619      	mov	r1, r3
 8003036:	4603      	mov	r3, r0
 8003038:	4642      	mov	r2, r8
 800303a:	189b      	adds	r3, r3, r2
 800303c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003040:	464b      	mov	r3, r9
 8003042:	460a      	mov	r2, r1
 8003044:	eb42 0303 	adc.w	r3, r2, r3
 8003048:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800304c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003050:	2200      	movs	r2, #0
 8003052:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003056:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800305a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800305e:	460b      	mov	r3, r1
 8003060:	18db      	adds	r3, r3, r3
 8003062:	643b      	str	r3, [r7, #64]	; 0x40
 8003064:	4613      	mov	r3, r2
 8003066:	eb42 0303 	adc.w	r3, r2, r3
 800306a:	647b      	str	r3, [r7, #68]	; 0x44
 800306c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003070:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003074:	f7fd f8fc 	bl	8000270 <__aeabi_uldivmod>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4611      	mov	r1, r2
 800307e:	4b3c      	ldr	r3, [pc, #240]	; (8003170 <LL_USART_SetBaudRate+0x238>)
 8003080:	fba3 2301 	umull	r2, r3, r3, r1
 8003084:	095b      	lsrs	r3, r3, #5
 8003086:	2264      	movs	r2, #100	; 0x64
 8003088:	fb02 f303 	mul.w	r3, r2, r3
 800308c:	1acb      	subs	r3, r1, r3
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003094:	4b36      	ldr	r3, [pc, #216]	; (8003170 <LL_USART_SetBaudRate+0x238>)
 8003096:	fba3 2302 	umull	r2, r3, r3, r2
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	b29b      	uxth	r3, r3
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	4423      	add	r3, r4
 80030aa:	b29c      	uxth	r4, r3
 80030ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030b0:	2200      	movs	r2, #0
 80030b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030b6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030ba:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80030be:	4642      	mov	r2, r8
 80030c0:	464b      	mov	r3, r9
 80030c2:	1891      	adds	r1, r2, r2
 80030c4:	63b9      	str	r1, [r7, #56]	; 0x38
 80030c6:	415b      	adcs	r3, r3
 80030c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030ce:	4641      	mov	r1, r8
 80030d0:	1851      	adds	r1, r2, r1
 80030d2:	6339      	str	r1, [r7, #48]	; 0x30
 80030d4:	4649      	mov	r1, r9
 80030d6:	414b      	adcs	r3, r1
 80030d8:	637b      	str	r3, [r7, #52]	; 0x34
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030e6:	4659      	mov	r1, fp
 80030e8:	00cb      	lsls	r3, r1, #3
 80030ea:	4651      	mov	r1, sl
 80030ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030f0:	4651      	mov	r1, sl
 80030f2:	00ca      	lsls	r2, r1, #3
 80030f4:	4610      	mov	r0, r2
 80030f6:	4619      	mov	r1, r3
 80030f8:	4603      	mov	r3, r0
 80030fa:	4642      	mov	r2, r8
 80030fc:	189b      	adds	r3, r3, r2
 80030fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003102:	464b      	mov	r3, r9
 8003104:	460a      	mov	r2, r1
 8003106:	eb42 0303 	adc.w	r3, r2, r3
 800310a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800310e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003112:	2200      	movs	r2, #0
 8003114:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003118:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800311c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003120:	460b      	mov	r3, r1
 8003122:	18db      	adds	r3, r3, r3
 8003124:	62bb      	str	r3, [r7, #40]	; 0x28
 8003126:	4613      	mov	r3, r2
 8003128:	eb42 0303 	adc.w	r3, r2, r3
 800312c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800312e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003132:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003136:	f7fd f89b 	bl	8000270 <__aeabi_uldivmod>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <LL_USART_SetBaudRate+0x238>)
 8003140:	fba3 1302 	umull	r1, r3, r3, r2
 8003144:	095b      	lsrs	r3, r3, #5
 8003146:	2164      	movs	r1, #100	; 0x64
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	3332      	adds	r3, #50	; 0x32
 8003152:	4a07      	ldr	r2, [pc, #28]	; (8003170 <LL_USART_SetBaudRate+0x238>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	095b      	lsrs	r3, r3, #5
 800315a:	b29b      	uxth	r3, r3
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	b29b      	uxth	r3, r3
 8003162:	4423      	add	r3, r4
 8003164:	b29b      	uxth	r3, r3
 8003166:	461a      	mov	r2, r3
 8003168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800316c:	609a      	str	r2, [r3, #8]
}
 800316e:	e107      	b.n	8003380 <LL_USART_SetBaudRate+0x448>
 8003170:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003174:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003178:	2200      	movs	r2, #0
 800317a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800317e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003182:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8003186:	4642      	mov	r2, r8
 8003188:	464b      	mov	r3, r9
 800318a:	1891      	adds	r1, r2, r2
 800318c:	6239      	str	r1, [r7, #32]
 800318e:	415b      	adcs	r3, r3
 8003190:	627b      	str	r3, [r7, #36]	; 0x24
 8003192:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003196:	4641      	mov	r1, r8
 8003198:	1854      	adds	r4, r2, r1
 800319a:	4649      	mov	r1, r9
 800319c:	eb43 0501 	adc.w	r5, r3, r1
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	00eb      	lsls	r3, r5, #3
 80031aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ae:	00e2      	lsls	r2, r4, #3
 80031b0:	4614      	mov	r4, r2
 80031b2:	461d      	mov	r5, r3
 80031b4:	4643      	mov	r3, r8
 80031b6:	18e3      	adds	r3, r4, r3
 80031b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031bc:	464b      	mov	r3, r9
 80031be:	eb45 0303 	adc.w	r3, r5, r3
 80031c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80031c6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031d0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80031e0:	4629      	mov	r1, r5
 80031e2:	008b      	lsls	r3, r1, #2
 80031e4:	4621      	mov	r1, r4
 80031e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031ea:	4621      	mov	r1, r4
 80031ec:	008a      	lsls	r2, r1, #2
 80031ee:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80031f2:	f7fd f83d 	bl	8000270 <__aeabi_uldivmod>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4b64      	ldr	r3, [pc, #400]	; (800338c <LL_USART_SetBaudRate+0x454>)
 80031fc:	fba3 2302 	umull	r2, r3, r3, r2
 8003200:	095b      	lsrs	r3, r3, #5
 8003202:	b29b      	uxth	r3, r3
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	b29c      	uxth	r4, r3
 8003208:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800320c:	2200      	movs	r2, #0
 800320e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003212:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003216:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800321a:	4642      	mov	r2, r8
 800321c:	464b      	mov	r3, r9
 800321e:	1891      	adds	r1, r2, r2
 8003220:	61b9      	str	r1, [r7, #24]
 8003222:	415b      	adcs	r3, r3
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800322a:	4641      	mov	r1, r8
 800322c:	1851      	adds	r1, r2, r1
 800322e:	6139      	str	r1, [r7, #16]
 8003230:	4649      	mov	r1, r9
 8003232:	414b      	adcs	r3, r1
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	f04f 0300 	mov.w	r3, #0
 800323e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003242:	4659      	mov	r1, fp
 8003244:	00cb      	lsls	r3, r1, #3
 8003246:	4651      	mov	r1, sl
 8003248:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800324c:	4651      	mov	r1, sl
 800324e:	00ca      	lsls	r2, r1, #3
 8003250:	4610      	mov	r0, r2
 8003252:	4619      	mov	r1, r3
 8003254:	4603      	mov	r3, r0
 8003256:	4642      	mov	r2, r8
 8003258:	189b      	adds	r3, r3, r2
 800325a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800325e:	464b      	mov	r3, r9
 8003260:	460a      	mov	r2, r1
 8003262:	eb42 0303 	adc.w	r3, r2, r3
 8003266:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800326a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800326e:	2200      	movs	r2, #0
 8003270:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003274:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8003284:	4649      	mov	r1, r9
 8003286:	008b      	lsls	r3, r1, #2
 8003288:	4641      	mov	r1, r8
 800328a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800328e:	4641      	mov	r1, r8
 8003290:	008a      	lsls	r2, r1, #2
 8003292:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8003296:	f7fc ffeb 	bl	8000270 <__aeabi_uldivmod>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4b3b      	ldr	r3, [pc, #236]	; (800338c <LL_USART_SetBaudRate+0x454>)
 80032a0:	fba3 1302 	umull	r1, r3, r3, r2
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	2164      	movs	r1, #100	; 0x64
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	3332      	adds	r3, #50	; 0x32
 80032b2:	4a36      	ldr	r2, [pc, #216]	; (800338c <LL_USART_SetBaudRate+0x454>)
 80032b4:	fba2 2303 	umull	r2, r3, r2, r3
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	4423      	add	r3, r4
 80032c4:	b29c      	uxth	r4, r3
 80032c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032ca:	2200      	movs	r2, #0
 80032cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80032ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032d4:	4642      	mov	r2, r8
 80032d6:	464b      	mov	r3, r9
 80032d8:	1891      	adds	r1, r2, r2
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	415b      	adcs	r3, r3
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032e4:	4641      	mov	r1, r8
 80032e6:	1851      	adds	r1, r2, r1
 80032e8:	6039      	str	r1, [r7, #0]
 80032ea:	4649      	mov	r1, r9
 80032ec:	414b      	adcs	r3, r1
 80032ee:	607b      	str	r3, [r7, #4]
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032fc:	4659      	mov	r1, fp
 80032fe:	00cb      	lsls	r3, r1, #3
 8003300:	4651      	mov	r1, sl
 8003302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003306:	4651      	mov	r1, sl
 8003308:	00ca      	lsls	r2, r1, #3
 800330a:	4610      	mov	r0, r2
 800330c:	4619      	mov	r1, r3
 800330e:	4603      	mov	r3, r0
 8003310:	4642      	mov	r2, r8
 8003312:	189b      	adds	r3, r3, r2
 8003314:	673b      	str	r3, [r7, #112]	; 0x70
 8003316:	464b      	mov	r3, r9
 8003318:	460a      	mov	r2, r1
 800331a:	eb42 0303 	adc.w	r3, r2, r3
 800331e:	677b      	str	r3, [r7, #116]	; 0x74
 8003320:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003324:	2200      	movs	r2, #0
 8003326:	66bb      	str	r3, [r7, #104]	; 0x68
 8003328:	66fa      	str	r2, [r7, #108]	; 0x6c
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8003336:	4649      	mov	r1, r9
 8003338:	008b      	lsls	r3, r1, #2
 800333a:	4641      	mov	r1, r8
 800333c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003340:	4641      	mov	r1, r8
 8003342:	008a      	lsls	r2, r1, #2
 8003344:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003348:	f7fc ff92 	bl	8000270 <__aeabi_uldivmod>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4b0e      	ldr	r3, [pc, #56]	; (800338c <LL_USART_SetBaudRate+0x454>)
 8003352:	fba3 1302 	umull	r1, r3, r3, r2
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	2164      	movs	r1, #100	; 0x64
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	3332      	adds	r3, #50	; 0x32
 8003364:	4a09      	ldr	r2, [pc, #36]	; (800338c <LL_USART_SetBaudRate+0x454>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	b29b      	uxth	r3, r3
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	b29b      	uxth	r3, r3
 8003374:	4423      	add	r3, r4
 8003376:	b29b      	uxth	r3, r3
 8003378:	461a      	mov	r2, r3
 800337a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800337e:	609a      	str	r2, [r3, #8]
}
 8003380:	bf00      	nop
 8003382:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003386:	46bd      	mov	sp, r7
 8003388:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800338c:	51eb851f 	.word	0x51eb851f

08003390 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff fd8e 	bl	8002ec4 <LL_USART_IsEnabled>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d15e      	bne.n	800346c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80033b6:	f023 030c 	bic.w	r3, r3, #12
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	6851      	ldr	r1, [r2, #4]
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	68d2      	ldr	r2, [r2, #12]
 80033c2:	4311      	orrs	r1, r2
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	6912      	ldr	r2, [r2, #16]
 80033c8:	4311      	orrs	r1, r2
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	6992      	ldr	r2, [r2, #24]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	4619      	mov	r1, r3
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff fd85 	bl	8002eec <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	4619      	mov	r1, r3
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff fd92 	bl	8002f12 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80033ee:	f107 0308 	add.w	r3, r7, #8
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff f934 	bl	8002660 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a1f      	ldr	r2, [pc, #124]	; (8003478 <LL_USART_Init+0xe8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d102      	bne.n	8003406 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	61bb      	str	r3, [r7, #24]
 8003404:	e021      	b.n	800344a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a1c      	ldr	r2, [pc, #112]	; (800347c <LL_USART_Init+0xec>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d102      	bne.n	8003414 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	e01a      	b.n	800344a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a1a      	ldr	r2, [pc, #104]	; (8003480 <LL_USART_Init+0xf0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d102      	bne.n	8003422 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	61bb      	str	r3, [r7, #24]
 8003420:	e013      	b.n	800344a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a17      	ldr	r2, [pc, #92]	; (8003484 <LL_USART_Init+0xf4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d102      	bne.n	8003430 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	e00c      	b.n	800344a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a15      	ldr	r2, [pc, #84]	; (8003488 <LL_USART_Init+0xf8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d102      	bne.n	800343e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	61bb      	str	r3, [r7, #24]
 800343c:	e005      	b.n	800344a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a12      	ldr	r2, [pc, #72]	; (800348c <LL_USART_Init+0xfc>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d101      	bne.n	800344a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00d      	beq.n	800346c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d009      	beq.n	800346c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8003458:	2300      	movs	r3, #0
 800345a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	699a      	ldr	r2, [r3, #24]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69b9      	ldr	r1, [r7, #24]
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff fd66 	bl	8002f38 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800346c:	7ffb      	ldrb	r3, [r7, #31]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40011000 	.word	0x40011000
 800347c:	40004400 	.word	0x40004400
 8003480:	40004800 	.word	0x40004800
 8003484:	40011400 	.word	0x40011400
 8003488:	40004c00 	.word	0x40004c00
 800348c:	40005000 	.word	0x40005000

08003490 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a2:	4a07      	ldr	r2, [pc, #28]	; (80034c0 <LL_InitTick+0x30>)
 80034a4:	3b01      	subs	r3, #1
 80034a6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <LL_InitTick+0x30>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <LL_InitTick+0x30>)
 80034b0:	2205      	movs	r2, #5
 80034b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	e000e010 	.word	0xe000e010

080034c4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80034cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f7ff ffdd 	bl	8003490 <LL_InitTick>
}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80034e8:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <LL_mDelay+0x48>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80034ee:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034f6:	d00c      	beq.n	8003512 <LL_mDelay+0x32>
  {
    Delay++;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3301      	adds	r3, #1
 80034fc:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80034fe:	e008      	b.n	8003512 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003500:	4b09      	ldr	r3, [pc, #36]	; (8003528 <LL_mDelay+0x48>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <LL_mDelay+0x32>
    {
      Delay--;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3b01      	subs	r3, #1
 8003510:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f3      	bne.n	8003500 <LL_mDelay+0x20>
    }
  }
}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	e000e010 	.word	0xe000e010

0800352c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003534:	4a04      	ldr	r2, [pc, #16]	; (8003548 <LL_SetSystemCoreClock+0x1c>)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6013      	str	r3, [r2, #0]
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	20000000 	.word	0x20000000

0800354c <__errno>:
 800354c:	4b01      	ldr	r3, [pc, #4]	; (8003554 <__errno+0x8>)
 800354e:	6818      	ldr	r0, [r3, #0]
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	20000004 	.word	0x20000004

08003558 <__libc_init_array>:
 8003558:	b570      	push	{r4, r5, r6, lr}
 800355a:	4d0d      	ldr	r5, [pc, #52]	; (8003590 <__libc_init_array+0x38>)
 800355c:	4c0d      	ldr	r4, [pc, #52]	; (8003594 <__libc_init_array+0x3c>)
 800355e:	1b64      	subs	r4, r4, r5
 8003560:	10a4      	asrs	r4, r4, #2
 8003562:	2600      	movs	r6, #0
 8003564:	42a6      	cmp	r6, r4
 8003566:	d109      	bne.n	800357c <__libc_init_array+0x24>
 8003568:	4d0b      	ldr	r5, [pc, #44]	; (8003598 <__libc_init_array+0x40>)
 800356a:	4c0c      	ldr	r4, [pc, #48]	; (800359c <__libc_init_array+0x44>)
 800356c:	f000 ffae 	bl	80044cc <_init>
 8003570:	1b64      	subs	r4, r4, r5
 8003572:	10a4      	asrs	r4, r4, #2
 8003574:	2600      	movs	r6, #0
 8003576:	42a6      	cmp	r6, r4
 8003578:	d105      	bne.n	8003586 <__libc_init_array+0x2e>
 800357a:	bd70      	pop	{r4, r5, r6, pc}
 800357c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003580:	4798      	blx	r3
 8003582:	3601      	adds	r6, #1
 8003584:	e7ee      	b.n	8003564 <__libc_init_array+0xc>
 8003586:	f855 3b04 	ldr.w	r3, [r5], #4
 800358a:	4798      	blx	r3
 800358c:	3601      	adds	r6, #1
 800358e:	e7f2      	b.n	8003576 <__libc_init_array+0x1e>
 8003590:	08004620 	.word	0x08004620
 8003594:	08004620 	.word	0x08004620
 8003598:	08004620 	.word	0x08004620
 800359c:	08004624 	.word	0x08004624

080035a0 <memset>:
 80035a0:	4402      	add	r2, r0
 80035a2:	4603      	mov	r3, r0
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d100      	bne.n	80035aa <memset+0xa>
 80035a8:	4770      	bx	lr
 80035aa:	f803 1b01 	strb.w	r1, [r3], #1
 80035ae:	e7f9      	b.n	80035a4 <memset+0x4>

080035b0 <iprintf>:
 80035b0:	b40f      	push	{r0, r1, r2, r3}
 80035b2:	4b0a      	ldr	r3, [pc, #40]	; (80035dc <iprintf+0x2c>)
 80035b4:	b513      	push	{r0, r1, r4, lr}
 80035b6:	681c      	ldr	r4, [r3, #0]
 80035b8:	b124      	cbz	r4, 80035c4 <iprintf+0x14>
 80035ba:	69a3      	ldr	r3, [r4, #24]
 80035bc:	b913      	cbnz	r3, 80035c4 <iprintf+0x14>
 80035be:	4620      	mov	r0, r4
 80035c0:	f000 f866 	bl	8003690 <__sinit>
 80035c4:	ab05      	add	r3, sp, #20
 80035c6:	9a04      	ldr	r2, [sp, #16]
 80035c8:	68a1      	ldr	r1, [r4, #8]
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	4620      	mov	r0, r4
 80035ce:	f000 f9bd 	bl	800394c <_vfiprintf_r>
 80035d2:	b002      	add	sp, #8
 80035d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035d8:	b004      	add	sp, #16
 80035da:	4770      	bx	lr
 80035dc:	20000004 	.word	0x20000004

080035e0 <std>:
 80035e0:	2300      	movs	r3, #0
 80035e2:	b510      	push	{r4, lr}
 80035e4:	4604      	mov	r4, r0
 80035e6:	e9c0 3300 	strd	r3, r3, [r0]
 80035ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035ee:	6083      	str	r3, [r0, #8]
 80035f0:	8181      	strh	r1, [r0, #12]
 80035f2:	6643      	str	r3, [r0, #100]	; 0x64
 80035f4:	81c2      	strh	r2, [r0, #14]
 80035f6:	6183      	str	r3, [r0, #24]
 80035f8:	4619      	mov	r1, r3
 80035fa:	2208      	movs	r2, #8
 80035fc:	305c      	adds	r0, #92	; 0x5c
 80035fe:	f7ff ffcf 	bl	80035a0 <memset>
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <std+0x38>)
 8003604:	6263      	str	r3, [r4, #36]	; 0x24
 8003606:	4b05      	ldr	r3, [pc, #20]	; (800361c <std+0x3c>)
 8003608:	62a3      	str	r3, [r4, #40]	; 0x28
 800360a:	4b05      	ldr	r3, [pc, #20]	; (8003620 <std+0x40>)
 800360c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <std+0x44>)
 8003610:	6224      	str	r4, [r4, #32]
 8003612:	6323      	str	r3, [r4, #48]	; 0x30
 8003614:	bd10      	pop	{r4, pc}
 8003616:	bf00      	nop
 8003618:	08003ef5 	.word	0x08003ef5
 800361c:	08003f17 	.word	0x08003f17
 8003620:	08003f4f 	.word	0x08003f4f
 8003624:	08003f73 	.word	0x08003f73

08003628 <_cleanup_r>:
 8003628:	4901      	ldr	r1, [pc, #4]	; (8003630 <_cleanup_r+0x8>)
 800362a:	f000 b8af 	b.w	800378c <_fwalk_reent>
 800362e:	bf00      	nop
 8003630:	0800424d 	.word	0x0800424d

08003634 <__sfmoreglue>:
 8003634:	b570      	push	{r4, r5, r6, lr}
 8003636:	2268      	movs	r2, #104	; 0x68
 8003638:	1e4d      	subs	r5, r1, #1
 800363a:	4355      	muls	r5, r2
 800363c:	460e      	mov	r6, r1
 800363e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003642:	f000 f8e5 	bl	8003810 <_malloc_r>
 8003646:	4604      	mov	r4, r0
 8003648:	b140      	cbz	r0, 800365c <__sfmoreglue+0x28>
 800364a:	2100      	movs	r1, #0
 800364c:	e9c0 1600 	strd	r1, r6, [r0]
 8003650:	300c      	adds	r0, #12
 8003652:	60a0      	str	r0, [r4, #8]
 8003654:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003658:	f7ff ffa2 	bl	80035a0 <memset>
 800365c:	4620      	mov	r0, r4
 800365e:	bd70      	pop	{r4, r5, r6, pc}

08003660 <__sfp_lock_acquire>:
 8003660:	4801      	ldr	r0, [pc, #4]	; (8003668 <__sfp_lock_acquire+0x8>)
 8003662:	f000 b8b3 	b.w	80037cc <__retarget_lock_acquire_recursive>
 8003666:	bf00      	nop
 8003668:	200000b5 	.word	0x200000b5

0800366c <__sfp_lock_release>:
 800366c:	4801      	ldr	r0, [pc, #4]	; (8003674 <__sfp_lock_release+0x8>)
 800366e:	f000 b8ae 	b.w	80037ce <__retarget_lock_release_recursive>
 8003672:	bf00      	nop
 8003674:	200000b5 	.word	0x200000b5

08003678 <__sinit_lock_acquire>:
 8003678:	4801      	ldr	r0, [pc, #4]	; (8003680 <__sinit_lock_acquire+0x8>)
 800367a:	f000 b8a7 	b.w	80037cc <__retarget_lock_acquire_recursive>
 800367e:	bf00      	nop
 8003680:	200000b6 	.word	0x200000b6

08003684 <__sinit_lock_release>:
 8003684:	4801      	ldr	r0, [pc, #4]	; (800368c <__sinit_lock_release+0x8>)
 8003686:	f000 b8a2 	b.w	80037ce <__retarget_lock_release_recursive>
 800368a:	bf00      	nop
 800368c:	200000b6 	.word	0x200000b6

08003690 <__sinit>:
 8003690:	b510      	push	{r4, lr}
 8003692:	4604      	mov	r4, r0
 8003694:	f7ff fff0 	bl	8003678 <__sinit_lock_acquire>
 8003698:	69a3      	ldr	r3, [r4, #24]
 800369a:	b11b      	cbz	r3, 80036a4 <__sinit+0x14>
 800369c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036a0:	f7ff bff0 	b.w	8003684 <__sinit_lock_release>
 80036a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80036a8:	6523      	str	r3, [r4, #80]	; 0x50
 80036aa:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <__sinit+0x68>)
 80036ac:	4a13      	ldr	r2, [pc, #76]	; (80036fc <__sinit+0x6c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80036b2:	42a3      	cmp	r3, r4
 80036b4:	bf04      	itt	eq
 80036b6:	2301      	moveq	r3, #1
 80036b8:	61a3      	streq	r3, [r4, #24]
 80036ba:	4620      	mov	r0, r4
 80036bc:	f000 f820 	bl	8003700 <__sfp>
 80036c0:	6060      	str	r0, [r4, #4]
 80036c2:	4620      	mov	r0, r4
 80036c4:	f000 f81c 	bl	8003700 <__sfp>
 80036c8:	60a0      	str	r0, [r4, #8]
 80036ca:	4620      	mov	r0, r4
 80036cc:	f000 f818 	bl	8003700 <__sfp>
 80036d0:	2200      	movs	r2, #0
 80036d2:	60e0      	str	r0, [r4, #12]
 80036d4:	2104      	movs	r1, #4
 80036d6:	6860      	ldr	r0, [r4, #4]
 80036d8:	f7ff ff82 	bl	80035e0 <std>
 80036dc:	68a0      	ldr	r0, [r4, #8]
 80036de:	2201      	movs	r2, #1
 80036e0:	2109      	movs	r1, #9
 80036e2:	f7ff ff7d 	bl	80035e0 <std>
 80036e6:	68e0      	ldr	r0, [r4, #12]
 80036e8:	2202      	movs	r2, #2
 80036ea:	2112      	movs	r1, #18
 80036ec:	f7ff ff78 	bl	80035e0 <std>
 80036f0:	2301      	movs	r3, #1
 80036f2:	61a3      	str	r3, [r4, #24]
 80036f4:	e7d2      	b.n	800369c <__sinit+0xc>
 80036f6:	bf00      	nop
 80036f8:	08004580 	.word	0x08004580
 80036fc:	08003629 	.word	0x08003629

08003700 <__sfp>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	4607      	mov	r7, r0
 8003704:	f7ff ffac 	bl	8003660 <__sfp_lock_acquire>
 8003708:	4b1e      	ldr	r3, [pc, #120]	; (8003784 <__sfp+0x84>)
 800370a:	681e      	ldr	r6, [r3, #0]
 800370c:	69b3      	ldr	r3, [r6, #24]
 800370e:	b913      	cbnz	r3, 8003716 <__sfp+0x16>
 8003710:	4630      	mov	r0, r6
 8003712:	f7ff ffbd 	bl	8003690 <__sinit>
 8003716:	3648      	adds	r6, #72	; 0x48
 8003718:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800371c:	3b01      	subs	r3, #1
 800371e:	d503      	bpl.n	8003728 <__sfp+0x28>
 8003720:	6833      	ldr	r3, [r6, #0]
 8003722:	b30b      	cbz	r3, 8003768 <__sfp+0x68>
 8003724:	6836      	ldr	r6, [r6, #0]
 8003726:	e7f7      	b.n	8003718 <__sfp+0x18>
 8003728:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800372c:	b9d5      	cbnz	r5, 8003764 <__sfp+0x64>
 800372e:	4b16      	ldr	r3, [pc, #88]	; (8003788 <__sfp+0x88>)
 8003730:	60e3      	str	r3, [r4, #12]
 8003732:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003736:	6665      	str	r5, [r4, #100]	; 0x64
 8003738:	f000 f847 	bl	80037ca <__retarget_lock_init_recursive>
 800373c:	f7ff ff96 	bl	800366c <__sfp_lock_release>
 8003740:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003744:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003748:	6025      	str	r5, [r4, #0]
 800374a:	61a5      	str	r5, [r4, #24]
 800374c:	2208      	movs	r2, #8
 800374e:	4629      	mov	r1, r5
 8003750:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003754:	f7ff ff24 	bl	80035a0 <memset>
 8003758:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800375c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003760:	4620      	mov	r0, r4
 8003762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003764:	3468      	adds	r4, #104	; 0x68
 8003766:	e7d9      	b.n	800371c <__sfp+0x1c>
 8003768:	2104      	movs	r1, #4
 800376a:	4638      	mov	r0, r7
 800376c:	f7ff ff62 	bl	8003634 <__sfmoreglue>
 8003770:	4604      	mov	r4, r0
 8003772:	6030      	str	r0, [r6, #0]
 8003774:	2800      	cmp	r0, #0
 8003776:	d1d5      	bne.n	8003724 <__sfp+0x24>
 8003778:	f7ff ff78 	bl	800366c <__sfp_lock_release>
 800377c:	230c      	movs	r3, #12
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	e7ee      	b.n	8003760 <__sfp+0x60>
 8003782:	bf00      	nop
 8003784:	08004580 	.word	0x08004580
 8003788:	ffff0001 	.word	0xffff0001

0800378c <_fwalk_reent>:
 800378c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003790:	4606      	mov	r6, r0
 8003792:	4688      	mov	r8, r1
 8003794:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003798:	2700      	movs	r7, #0
 800379a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800379e:	f1b9 0901 	subs.w	r9, r9, #1
 80037a2:	d505      	bpl.n	80037b0 <_fwalk_reent+0x24>
 80037a4:	6824      	ldr	r4, [r4, #0]
 80037a6:	2c00      	cmp	r4, #0
 80037a8:	d1f7      	bne.n	800379a <_fwalk_reent+0xe>
 80037aa:	4638      	mov	r0, r7
 80037ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037b0:	89ab      	ldrh	r3, [r5, #12]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d907      	bls.n	80037c6 <_fwalk_reent+0x3a>
 80037b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037ba:	3301      	adds	r3, #1
 80037bc:	d003      	beq.n	80037c6 <_fwalk_reent+0x3a>
 80037be:	4629      	mov	r1, r5
 80037c0:	4630      	mov	r0, r6
 80037c2:	47c0      	blx	r8
 80037c4:	4307      	orrs	r7, r0
 80037c6:	3568      	adds	r5, #104	; 0x68
 80037c8:	e7e9      	b.n	800379e <_fwalk_reent+0x12>

080037ca <__retarget_lock_init_recursive>:
 80037ca:	4770      	bx	lr

080037cc <__retarget_lock_acquire_recursive>:
 80037cc:	4770      	bx	lr

080037ce <__retarget_lock_release_recursive>:
 80037ce:	4770      	bx	lr

080037d0 <sbrk_aligned>:
 80037d0:	b570      	push	{r4, r5, r6, lr}
 80037d2:	4e0e      	ldr	r6, [pc, #56]	; (800380c <sbrk_aligned+0x3c>)
 80037d4:	460c      	mov	r4, r1
 80037d6:	6831      	ldr	r1, [r6, #0]
 80037d8:	4605      	mov	r5, r0
 80037da:	b911      	cbnz	r1, 80037e2 <sbrk_aligned+0x12>
 80037dc:	f000 fb7a 	bl	8003ed4 <_sbrk_r>
 80037e0:	6030      	str	r0, [r6, #0]
 80037e2:	4621      	mov	r1, r4
 80037e4:	4628      	mov	r0, r5
 80037e6:	f000 fb75 	bl	8003ed4 <_sbrk_r>
 80037ea:	1c43      	adds	r3, r0, #1
 80037ec:	d00a      	beq.n	8003804 <sbrk_aligned+0x34>
 80037ee:	1cc4      	adds	r4, r0, #3
 80037f0:	f024 0403 	bic.w	r4, r4, #3
 80037f4:	42a0      	cmp	r0, r4
 80037f6:	d007      	beq.n	8003808 <sbrk_aligned+0x38>
 80037f8:	1a21      	subs	r1, r4, r0
 80037fa:	4628      	mov	r0, r5
 80037fc:	f000 fb6a 	bl	8003ed4 <_sbrk_r>
 8003800:	3001      	adds	r0, #1
 8003802:	d101      	bne.n	8003808 <sbrk_aligned+0x38>
 8003804:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003808:	4620      	mov	r0, r4
 800380a:	bd70      	pop	{r4, r5, r6, pc}
 800380c:	200000bc 	.word	0x200000bc

08003810 <_malloc_r>:
 8003810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003814:	1ccd      	adds	r5, r1, #3
 8003816:	f025 0503 	bic.w	r5, r5, #3
 800381a:	3508      	adds	r5, #8
 800381c:	2d0c      	cmp	r5, #12
 800381e:	bf38      	it	cc
 8003820:	250c      	movcc	r5, #12
 8003822:	2d00      	cmp	r5, #0
 8003824:	4607      	mov	r7, r0
 8003826:	db01      	blt.n	800382c <_malloc_r+0x1c>
 8003828:	42a9      	cmp	r1, r5
 800382a:	d905      	bls.n	8003838 <_malloc_r+0x28>
 800382c:	230c      	movs	r3, #12
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	2600      	movs	r6, #0
 8003832:	4630      	mov	r0, r6
 8003834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003838:	4e2e      	ldr	r6, [pc, #184]	; (80038f4 <_malloc_r+0xe4>)
 800383a:	f000 fdbb 	bl	80043b4 <__malloc_lock>
 800383e:	6833      	ldr	r3, [r6, #0]
 8003840:	461c      	mov	r4, r3
 8003842:	bb34      	cbnz	r4, 8003892 <_malloc_r+0x82>
 8003844:	4629      	mov	r1, r5
 8003846:	4638      	mov	r0, r7
 8003848:	f7ff ffc2 	bl	80037d0 <sbrk_aligned>
 800384c:	1c43      	adds	r3, r0, #1
 800384e:	4604      	mov	r4, r0
 8003850:	d14d      	bne.n	80038ee <_malloc_r+0xde>
 8003852:	6834      	ldr	r4, [r6, #0]
 8003854:	4626      	mov	r6, r4
 8003856:	2e00      	cmp	r6, #0
 8003858:	d140      	bne.n	80038dc <_malloc_r+0xcc>
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	4631      	mov	r1, r6
 800385e:	4638      	mov	r0, r7
 8003860:	eb04 0803 	add.w	r8, r4, r3
 8003864:	f000 fb36 	bl	8003ed4 <_sbrk_r>
 8003868:	4580      	cmp	r8, r0
 800386a:	d13a      	bne.n	80038e2 <_malloc_r+0xd2>
 800386c:	6821      	ldr	r1, [r4, #0]
 800386e:	3503      	adds	r5, #3
 8003870:	1a6d      	subs	r5, r5, r1
 8003872:	f025 0503 	bic.w	r5, r5, #3
 8003876:	3508      	adds	r5, #8
 8003878:	2d0c      	cmp	r5, #12
 800387a:	bf38      	it	cc
 800387c:	250c      	movcc	r5, #12
 800387e:	4629      	mov	r1, r5
 8003880:	4638      	mov	r0, r7
 8003882:	f7ff ffa5 	bl	80037d0 <sbrk_aligned>
 8003886:	3001      	adds	r0, #1
 8003888:	d02b      	beq.n	80038e2 <_malloc_r+0xd2>
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	442b      	add	r3, r5
 800388e:	6023      	str	r3, [r4, #0]
 8003890:	e00e      	b.n	80038b0 <_malloc_r+0xa0>
 8003892:	6822      	ldr	r2, [r4, #0]
 8003894:	1b52      	subs	r2, r2, r5
 8003896:	d41e      	bmi.n	80038d6 <_malloc_r+0xc6>
 8003898:	2a0b      	cmp	r2, #11
 800389a:	d916      	bls.n	80038ca <_malloc_r+0xba>
 800389c:	1961      	adds	r1, r4, r5
 800389e:	42a3      	cmp	r3, r4
 80038a0:	6025      	str	r5, [r4, #0]
 80038a2:	bf18      	it	ne
 80038a4:	6059      	strne	r1, [r3, #4]
 80038a6:	6863      	ldr	r3, [r4, #4]
 80038a8:	bf08      	it	eq
 80038aa:	6031      	streq	r1, [r6, #0]
 80038ac:	5162      	str	r2, [r4, r5]
 80038ae:	604b      	str	r3, [r1, #4]
 80038b0:	4638      	mov	r0, r7
 80038b2:	f104 060b 	add.w	r6, r4, #11
 80038b6:	f000 fd83 	bl	80043c0 <__malloc_unlock>
 80038ba:	f026 0607 	bic.w	r6, r6, #7
 80038be:	1d23      	adds	r3, r4, #4
 80038c0:	1af2      	subs	r2, r6, r3
 80038c2:	d0b6      	beq.n	8003832 <_malloc_r+0x22>
 80038c4:	1b9b      	subs	r3, r3, r6
 80038c6:	50a3      	str	r3, [r4, r2]
 80038c8:	e7b3      	b.n	8003832 <_malloc_r+0x22>
 80038ca:	6862      	ldr	r2, [r4, #4]
 80038cc:	42a3      	cmp	r3, r4
 80038ce:	bf0c      	ite	eq
 80038d0:	6032      	streq	r2, [r6, #0]
 80038d2:	605a      	strne	r2, [r3, #4]
 80038d4:	e7ec      	b.n	80038b0 <_malloc_r+0xa0>
 80038d6:	4623      	mov	r3, r4
 80038d8:	6864      	ldr	r4, [r4, #4]
 80038da:	e7b2      	b.n	8003842 <_malloc_r+0x32>
 80038dc:	4634      	mov	r4, r6
 80038de:	6876      	ldr	r6, [r6, #4]
 80038e0:	e7b9      	b.n	8003856 <_malloc_r+0x46>
 80038e2:	230c      	movs	r3, #12
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	4638      	mov	r0, r7
 80038e8:	f000 fd6a 	bl	80043c0 <__malloc_unlock>
 80038ec:	e7a1      	b.n	8003832 <_malloc_r+0x22>
 80038ee:	6025      	str	r5, [r4, #0]
 80038f0:	e7de      	b.n	80038b0 <_malloc_r+0xa0>
 80038f2:	bf00      	nop
 80038f4:	200000b8 	.word	0x200000b8

080038f8 <__sfputc_r>:
 80038f8:	6893      	ldr	r3, [r2, #8]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	b410      	push	{r4}
 8003900:	6093      	str	r3, [r2, #8]
 8003902:	da08      	bge.n	8003916 <__sfputc_r+0x1e>
 8003904:	6994      	ldr	r4, [r2, #24]
 8003906:	42a3      	cmp	r3, r4
 8003908:	db01      	blt.n	800390e <__sfputc_r+0x16>
 800390a:	290a      	cmp	r1, #10
 800390c:	d103      	bne.n	8003916 <__sfputc_r+0x1e>
 800390e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003912:	f000 bb33 	b.w	8003f7c <__swbuf_r>
 8003916:	6813      	ldr	r3, [r2, #0]
 8003918:	1c58      	adds	r0, r3, #1
 800391a:	6010      	str	r0, [r2, #0]
 800391c:	7019      	strb	r1, [r3, #0]
 800391e:	4608      	mov	r0, r1
 8003920:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003924:	4770      	bx	lr

08003926 <__sfputs_r>:
 8003926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003928:	4606      	mov	r6, r0
 800392a:	460f      	mov	r7, r1
 800392c:	4614      	mov	r4, r2
 800392e:	18d5      	adds	r5, r2, r3
 8003930:	42ac      	cmp	r4, r5
 8003932:	d101      	bne.n	8003938 <__sfputs_r+0x12>
 8003934:	2000      	movs	r0, #0
 8003936:	e007      	b.n	8003948 <__sfputs_r+0x22>
 8003938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800393c:	463a      	mov	r2, r7
 800393e:	4630      	mov	r0, r6
 8003940:	f7ff ffda 	bl	80038f8 <__sfputc_r>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d1f3      	bne.n	8003930 <__sfputs_r+0xa>
 8003948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800394c <_vfiprintf_r>:
 800394c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003950:	460d      	mov	r5, r1
 8003952:	b09d      	sub	sp, #116	; 0x74
 8003954:	4614      	mov	r4, r2
 8003956:	4698      	mov	r8, r3
 8003958:	4606      	mov	r6, r0
 800395a:	b118      	cbz	r0, 8003964 <_vfiprintf_r+0x18>
 800395c:	6983      	ldr	r3, [r0, #24]
 800395e:	b90b      	cbnz	r3, 8003964 <_vfiprintf_r+0x18>
 8003960:	f7ff fe96 	bl	8003690 <__sinit>
 8003964:	4b89      	ldr	r3, [pc, #548]	; (8003b8c <_vfiprintf_r+0x240>)
 8003966:	429d      	cmp	r5, r3
 8003968:	d11b      	bne.n	80039a2 <_vfiprintf_r+0x56>
 800396a:	6875      	ldr	r5, [r6, #4]
 800396c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800396e:	07d9      	lsls	r1, r3, #31
 8003970:	d405      	bmi.n	800397e <_vfiprintf_r+0x32>
 8003972:	89ab      	ldrh	r3, [r5, #12]
 8003974:	059a      	lsls	r2, r3, #22
 8003976:	d402      	bmi.n	800397e <_vfiprintf_r+0x32>
 8003978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800397a:	f7ff ff27 	bl	80037cc <__retarget_lock_acquire_recursive>
 800397e:	89ab      	ldrh	r3, [r5, #12]
 8003980:	071b      	lsls	r3, r3, #28
 8003982:	d501      	bpl.n	8003988 <_vfiprintf_r+0x3c>
 8003984:	692b      	ldr	r3, [r5, #16]
 8003986:	b9eb      	cbnz	r3, 80039c4 <_vfiprintf_r+0x78>
 8003988:	4629      	mov	r1, r5
 800398a:	4630      	mov	r0, r6
 800398c:	f000 fb5a 	bl	8004044 <__swsetup_r>
 8003990:	b1c0      	cbz	r0, 80039c4 <_vfiprintf_r+0x78>
 8003992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003994:	07dc      	lsls	r4, r3, #31
 8003996:	d50e      	bpl.n	80039b6 <_vfiprintf_r+0x6a>
 8003998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800399c:	b01d      	add	sp, #116	; 0x74
 800399e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039a2:	4b7b      	ldr	r3, [pc, #492]	; (8003b90 <_vfiprintf_r+0x244>)
 80039a4:	429d      	cmp	r5, r3
 80039a6:	d101      	bne.n	80039ac <_vfiprintf_r+0x60>
 80039a8:	68b5      	ldr	r5, [r6, #8]
 80039aa:	e7df      	b.n	800396c <_vfiprintf_r+0x20>
 80039ac:	4b79      	ldr	r3, [pc, #484]	; (8003b94 <_vfiprintf_r+0x248>)
 80039ae:	429d      	cmp	r5, r3
 80039b0:	bf08      	it	eq
 80039b2:	68f5      	ldreq	r5, [r6, #12]
 80039b4:	e7da      	b.n	800396c <_vfiprintf_r+0x20>
 80039b6:	89ab      	ldrh	r3, [r5, #12]
 80039b8:	0598      	lsls	r0, r3, #22
 80039ba:	d4ed      	bmi.n	8003998 <_vfiprintf_r+0x4c>
 80039bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039be:	f7ff ff06 	bl	80037ce <__retarget_lock_release_recursive>
 80039c2:	e7e9      	b.n	8003998 <_vfiprintf_r+0x4c>
 80039c4:	2300      	movs	r3, #0
 80039c6:	9309      	str	r3, [sp, #36]	; 0x24
 80039c8:	2320      	movs	r3, #32
 80039ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80039d2:	2330      	movs	r3, #48	; 0x30
 80039d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003b98 <_vfiprintf_r+0x24c>
 80039d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039dc:	f04f 0901 	mov.w	r9, #1
 80039e0:	4623      	mov	r3, r4
 80039e2:	469a      	mov	sl, r3
 80039e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039e8:	b10a      	cbz	r2, 80039ee <_vfiprintf_r+0xa2>
 80039ea:	2a25      	cmp	r2, #37	; 0x25
 80039ec:	d1f9      	bne.n	80039e2 <_vfiprintf_r+0x96>
 80039ee:	ebba 0b04 	subs.w	fp, sl, r4
 80039f2:	d00b      	beq.n	8003a0c <_vfiprintf_r+0xc0>
 80039f4:	465b      	mov	r3, fp
 80039f6:	4622      	mov	r2, r4
 80039f8:	4629      	mov	r1, r5
 80039fa:	4630      	mov	r0, r6
 80039fc:	f7ff ff93 	bl	8003926 <__sfputs_r>
 8003a00:	3001      	adds	r0, #1
 8003a02:	f000 80aa 	beq.w	8003b5a <_vfiprintf_r+0x20e>
 8003a06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a08:	445a      	add	r2, fp
 8003a0a:	9209      	str	r2, [sp, #36]	; 0x24
 8003a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 80a2 	beq.w	8003b5a <_vfiprintf_r+0x20e>
 8003a16:	2300      	movs	r3, #0
 8003a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a20:	f10a 0a01 	add.w	sl, sl, #1
 8003a24:	9304      	str	r3, [sp, #16]
 8003a26:	9307      	str	r3, [sp, #28]
 8003a28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a2c:	931a      	str	r3, [sp, #104]	; 0x68
 8003a2e:	4654      	mov	r4, sl
 8003a30:	2205      	movs	r2, #5
 8003a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a36:	4858      	ldr	r0, [pc, #352]	; (8003b98 <_vfiprintf_r+0x24c>)
 8003a38:	f7fc fbca 	bl	80001d0 <memchr>
 8003a3c:	9a04      	ldr	r2, [sp, #16]
 8003a3e:	b9d8      	cbnz	r0, 8003a78 <_vfiprintf_r+0x12c>
 8003a40:	06d1      	lsls	r1, r2, #27
 8003a42:	bf44      	itt	mi
 8003a44:	2320      	movmi	r3, #32
 8003a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a4a:	0713      	lsls	r3, r2, #28
 8003a4c:	bf44      	itt	mi
 8003a4e:	232b      	movmi	r3, #43	; 0x2b
 8003a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a54:	f89a 3000 	ldrb.w	r3, [sl]
 8003a58:	2b2a      	cmp	r3, #42	; 0x2a
 8003a5a:	d015      	beq.n	8003a88 <_vfiprintf_r+0x13c>
 8003a5c:	9a07      	ldr	r2, [sp, #28]
 8003a5e:	4654      	mov	r4, sl
 8003a60:	2000      	movs	r0, #0
 8003a62:	f04f 0c0a 	mov.w	ip, #10
 8003a66:	4621      	mov	r1, r4
 8003a68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a6c:	3b30      	subs	r3, #48	; 0x30
 8003a6e:	2b09      	cmp	r3, #9
 8003a70:	d94e      	bls.n	8003b10 <_vfiprintf_r+0x1c4>
 8003a72:	b1b0      	cbz	r0, 8003aa2 <_vfiprintf_r+0x156>
 8003a74:	9207      	str	r2, [sp, #28]
 8003a76:	e014      	b.n	8003aa2 <_vfiprintf_r+0x156>
 8003a78:	eba0 0308 	sub.w	r3, r0, r8
 8003a7c:	fa09 f303 	lsl.w	r3, r9, r3
 8003a80:	4313      	orrs	r3, r2
 8003a82:	9304      	str	r3, [sp, #16]
 8003a84:	46a2      	mov	sl, r4
 8003a86:	e7d2      	b.n	8003a2e <_vfiprintf_r+0xe2>
 8003a88:	9b03      	ldr	r3, [sp, #12]
 8003a8a:	1d19      	adds	r1, r3, #4
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	9103      	str	r1, [sp, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	bfbb      	ittet	lt
 8003a94:	425b      	neglt	r3, r3
 8003a96:	f042 0202 	orrlt.w	r2, r2, #2
 8003a9a:	9307      	strge	r3, [sp, #28]
 8003a9c:	9307      	strlt	r3, [sp, #28]
 8003a9e:	bfb8      	it	lt
 8003aa0:	9204      	strlt	r2, [sp, #16]
 8003aa2:	7823      	ldrb	r3, [r4, #0]
 8003aa4:	2b2e      	cmp	r3, #46	; 0x2e
 8003aa6:	d10c      	bne.n	8003ac2 <_vfiprintf_r+0x176>
 8003aa8:	7863      	ldrb	r3, [r4, #1]
 8003aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8003aac:	d135      	bne.n	8003b1a <_vfiprintf_r+0x1ce>
 8003aae:	9b03      	ldr	r3, [sp, #12]
 8003ab0:	1d1a      	adds	r2, r3, #4
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	9203      	str	r2, [sp, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	bfb8      	it	lt
 8003aba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003abe:	3402      	adds	r4, #2
 8003ac0:	9305      	str	r3, [sp, #20]
 8003ac2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003ba8 <_vfiprintf_r+0x25c>
 8003ac6:	7821      	ldrb	r1, [r4, #0]
 8003ac8:	2203      	movs	r2, #3
 8003aca:	4650      	mov	r0, sl
 8003acc:	f7fc fb80 	bl	80001d0 <memchr>
 8003ad0:	b140      	cbz	r0, 8003ae4 <_vfiprintf_r+0x198>
 8003ad2:	2340      	movs	r3, #64	; 0x40
 8003ad4:	eba0 000a 	sub.w	r0, r0, sl
 8003ad8:	fa03 f000 	lsl.w	r0, r3, r0
 8003adc:	9b04      	ldr	r3, [sp, #16]
 8003ade:	4303      	orrs	r3, r0
 8003ae0:	3401      	adds	r4, #1
 8003ae2:	9304      	str	r3, [sp, #16]
 8003ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ae8:	482c      	ldr	r0, [pc, #176]	; (8003b9c <_vfiprintf_r+0x250>)
 8003aea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003aee:	2206      	movs	r2, #6
 8003af0:	f7fc fb6e 	bl	80001d0 <memchr>
 8003af4:	2800      	cmp	r0, #0
 8003af6:	d03f      	beq.n	8003b78 <_vfiprintf_r+0x22c>
 8003af8:	4b29      	ldr	r3, [pc, #164]	; (8003ba0 <_vfiprintf_r+0x254>)
 8003afa:	bb1b      	cbnz	r3, 8003b44 <_vfiprintf_r+0x1f8>
 8003afc:	9b03      	ldr	r3, [sp, #12]
 8003afe:	3307      	adds	r3, #7
 8003b00:	f023 0307 	bic.w	r3, r3, #7
 8003b04:	3308      	adds	r3, #8
 8003b06:	9303      	str	r3, [sp, #12]
 8003b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b0a:	443b      	add	r3, r7
 8003b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b0e:	e767      	b.n	80039e0 <_vfiprintf_r+0x94>
 8003b10:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b14:	460c      	mov	r4, r1
 8003b16:	2001      	movs	r0, #1
 8003b18:	e7a5      	b.n	8003a66 <_vfiprintf_r+0x11a>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	3401      	adds	r4, #1
 8003b1e:	9305      	str	r3, [sp, #20]
 8003b20:	4619      	mov	r1, r3
 8003b22:	f04f 0c0a 	mov.w	ip, #10
 8003b26:	4620      	mov	r0, r4
 8003b28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b2c:	3a30      	subs	r2, #48	; 0x30
 8003b2e:	2a09      	cmp	r2, #9
 8003b30:	d903      	bls.n	8003b3a <_vfiprintf_r+0x1ee>
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0c5      	beq.n	8003ac2 <_vfiprintf_r+0x176>
 8003b36:	9105      	str	r1, [sp, #20]
 8003b38:	e7c3      	b.n	8003ac2 <_vfiprintf_r+0x176>
 8003b3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b3e:	4604      	mov	r4, r0
 8003b40:	2301      	movs	r3, #1
 8003b42:	e7f0      	b.n	8003b26 <_vfiprintf_r+0x1da>
 8003b44:	ab03      	add	r3, sp, #12
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	462a      	mov	r2, r5
 8003b4a:	4b16      	ldr	r3, [pc, #88]	; (8003ba4 <_vfiprintf_r+0x258>)
 8003b4c:	a904      	add	r1, sp, #16
 8003b4e:	4630      	mov	r0, r6
 8003b50:	f3af 8000 	nop.w
 8003b54:	4607      	mov	r7, r0
 8003b56:	1c78      	adds	r0, r7, #1
 8003b58:	d1d6      	bne.n	8003b08 <_vfiprintf_r+0x1bc>
 8003b5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b5c:	07d9      	lsls	r1, r3, #31
 8003b5e:	d405      	bmi.n	8003b6c <_vfiprintf_r+0x220>
 8003b60:	89ab      	ldrh	r3, [r5, #12]
 8003b62:	059a      	lsls	r2, r3, #22
 8003b64:	d402      	bmi.n	8003b6c <_vfiprintf_r+0x220>
 8003b66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b68:	f7ff fe31 	bl	80037ce <__retarget_lock_release_recursive>
 8003b6c:	89ab      	ldrh	r3, [r5, #12]
 8003b6e:	065b      	lsls	r3, r3, #25
 8003b70:	f53f af12 	bmi.w	8003998 <_vfiprintf_r+0x4c>
 8003b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b76:	e711      	b.n	800399c <_vfiprintf_r+0x50>
 8003b78:	ab03      	add	r3, sp, #12
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	462a      	mov	r2, r5
 8003b7e:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <_vfiprintf_r+0x258>)
 8003b80:	a904      	add	r1, sp, #16
 8003b82:	4630      	mov	r0, r6
 8003b84:	f000 f880 	bl	8003c88 <_printf_i>
 8003b88:	e7e4      	b.n	8003b54 <_vfiprintf_r+0x208>
 8003b8a:	bf00      	nop
 8003b8c:	080045a4 	.word	0x080045a4
 8003b90:	080045c4 	.word	0x080045c4
 8003b94:	08004584 	.word	0x08004584
 8003b98:	080045e4 	.word	0x080045e4
 8003b9c:	080045ee 	.word	0x080045ee
 8003ba0:	00000000 	.word	0x00000000
 8003ba4:	08003927 	.word	0x08003927
 8003ba8:	080045ea 	.word	0x080045ea

08003bac <_printf_common>:
 8003bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bb0:	4616      	mov	r6, r2
 8003bb2:	4699      	mov	r9, r3
 8003bb4:	688a      	ldr	r2, [r1, #8]
 8003bb6:	690b      	ldr	r3, [r1, #16]
 8003bb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	bfb8      	it	lt
 8003bc0:	4613      	movlt	r3, r2
 8003bc2:	6033      	str	r3, [r6, #0]
 8003bc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bc8:	4607      	mov	r7, r0
 8003bca:	460c      	mov	r4, r1
 8003bcc:	b10a      	cbz	r2, 8003bd2 <_printf_common+0x26>
 8003bce:	3301      	adds	r3, #1
 8003bd0:	6033      	str	r3, [r6, #0]
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	0699      	lsls	r1, r3, #26
 8003bd6:	bf42      	ittt	mi
 8003bd8:	6833      	ldrmi	r3, [r6, #0]
 8003bda:	3302      	addmi	r3, #2
 8003bdc:	6033      	strmi	r3, [r6, #0]
 8003bde:	6825      	ldr	r5, [r4, #0]
 8003be0:	f015 0506 	ands.w	r5, r5, #6
 8003be4:	d106      	bne.n	8003bf4 <_printf_common+0x48>
 8003be6:	f104 0a19 	add.w	sl, r4, #25
 8003bea:	68e3      	ldr	r3, [r4, #12]
 8003bec:	6832      	ldr	r2, [r6, #0]
 8003bee:	1a9b      	subs	r3, r3, r2
 8003bf0:	42ab      	cmp	r3, r5
 8003bf2:	dc26      	bgt.n	8003c42 <_printf_common+0x96>
 8003bf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bf8:	1e13      	subs	r3, r2, #0
 8003bfa:	6822      	ldr	r2, [r4, #0]
 8003bfc:	bf18      	it	ne
 8003bfe:	2301      	movne	r3, #1
 8003c00:	0692      	lsls	r2, r2, #26
 8003c02:	d42b      	bmi.n	8003c5c <_printf_common+0xb0>
 8003c04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c08:	4649      	mov	r1, r9
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	47c0      	blx	r8
 8003c0e:	3001      	adds	r0, #1
 8003c10:	d01e      	beq.n	8003c50 <_printf_common+0xa4>
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	68e5      	ldr	r5, [r4, #12]
 8003c16:	6832      	ldr	r2, [r6, #0]
 8003c18:	f003 0306 	and.w	r3, r3, #6
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	bf08      	it	eq
 8003c20:	1aad      	subeq	r5, r5, r2
 8003c22:	68a3      	ldr	r3, [r4, #8]
 8003c24:	6922      	ldr	r2, [r4, #16]
 8003c26:	bf0c      	ite	eq
 8003c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c2c:	2500      	movne	r5, #0
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	bfc4      	itt	gt
 8003c32:	1a9b      	subgt	r3, r3, r2
 8003c34:	18ed      	addgt	r5, r5, r3
 8003c36:	2600      	movs	r6, #0
 8003c38:	341a      	adds	r4, #26
 8003c3a:	42b5      	cmp	r5, r6
 8003c3c:	d11a      	bne.n	8003c74 <_printf_common+0xc8>
 8003c3e:	2000      	movs	r0, #0
 8003c40:	e008      	b.n	8003c54 <_printf_common+0xa8>
 8003c42:	2301      	movs	r3, #1
 8003c44:	4652      	mov	r2, sl
 8003c46:	4649      	mov	r1, r9
 8003c48:	4638      	mov	r0, r7
 8003c4a:	47c0      	blx	r8
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	d103      	bne.n	8003c58 <_printf_common+0xac>
 8003c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c58:	3501      	adds	r5, #1
 8003c5a:	e7c6      	b.n	8003bea <_printf_common+0x3e>
 8003c5c:	18e1      	adds	r1, r4, r3
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	2030      	movs	r0, #48	; 0x30
 8003c62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c66:	4422      	add	r2, r4
 8003c68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c70:	3302      	adds	r3, #2
 8003c72:	e7c7      	b.n	8003c04 <_printf_common+0x58>
 8003c74:	2301      	movs	r3, #1
 8003c76:	4622      	mov	r2, r4
 8003c78:	4649      	mov	r1, r9
 8003c7a:	4638      	mov	r0, r7
 8003c7c:	47c0      	blx	r8
 8003c7e:	3001      	adds	r0, #1
 8003c80:	d0e6      	beq.n	8003c50 <_printf_common+0xa4>
 8003c82:	3601      	adds	r6, #1
 8003c84:	e7d9      	b.n	8003c3a <_printf_common+0x8e>
	...

08003c88 <_printf_i>:
 8003c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c8c:	7e0f      	ldrb	r7, [r1, #24]
 8003c8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c90:	2f78      	cmp	r7, #120	; 0x78
 8003c92:	4691      	mov	r9, r2
 8003c94:	4680      	mov	r8, r0
 8003c96:	460c      	mov	r4, r1
 8003c98:	469a      	mov	sl, r3
 8003c9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c9e:	d807      	bhi.n	8003cb0 <_printf_i+0x28>
 8003ca0:	2f62      	cmp	r7, #98	; 0x62
 8003ca2:	d80a      	bhi.n	8003cba <_printf_i+0x32>
 8003ca4:	2f00      	cmp	r7, #0
 8003ca6:	f000 80d8 	beq.w	8003e5a <_printf_i+0x1d2>
 8003caa:	2f58      	cmp	r7, #88	; 0x58
 8003cac:	f000 80a3 	beq.w	8003df6 <_printf_i+0x16e>
 8003cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cb8:	e03a      	b.n	8003d30 <_printf_i+0xa8>
 8003cba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cbe:	2b15      	cmp	r3, #21
 8003cc0:	d8f6      	bhi.n	8003cb0 <_printf_i+0x28>
 8003cc2:	a101      	add	r1, pc, #4	; (adr r1, 8003cc8 <_printf_i+0x40>)
 8003cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cc8:	08003d21 	.word	0x08003d21
 8003ccc:	08003d35 	.word	0x08003d35
 8003cd0:	08003cb1 	.word	0x08003cb1
 8003cd4:	08003cb1 	.word	0x08003cb1
 8003cd8:	08003cb1 	.word	0x08003cb1
 8003cdc:	08003cb1 	.word	0x08003cb1
 8003ce0:	08003d35 	.word	0x08003d35
 8003ce4:	08003cb1 	.word	0x08003cb1
 8003ce8:	08003cb1 	.word	0x08003cb1
 8003cec:	08003cb1 	.word	0x08003cb1
 8003cf0:	08003cb1 	.word	0x08003cb1
 8003cf4:	08003e41 	.word	0x08003e41
 8003cf8:	08003d65 	.word	0x08003d65
 8003cfc:	08003e23 	.word	0x08003e23
 8003d00:	08003cb1 	.word	0x08003cb1
 8003d04:	08003cb1 	.word	0x08003cb1
 8003d08:	08003e63 	.word	0x08003e63
 8003d0c:	08003cb1 	.word	0x08003cb1
 8003d10:	08003d65 	.word	0x08003d65
 8003d14:	08003cb1 	.word	0x08003cb1
 8003d18:	08003cb1 	.word	0x08003cb1
 8003d1c:	08003e2b 	.word	0x08003e2b
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	1d1a      	adds	r2, r3, #4
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	602a      	str	r2, [r5, #0]
 8003d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0a3      	b.n	8003e7c <_printf_i+0x1f4>
 8003d34:	6820      	ldr	r0, [r4, #0]
 8003d36:	6829      	ldr	r1, [r5, #0]
 8003d38:	0606      	lsls	r6, r0, #24
 8003d3a:	f101 0304 	add.w	r3, r1, #4
 8003d3e:	d50a      	bpl.n	8003d56 <_printf_i+0xce>
 8003d40:	680e      	ldr	r6, [r1, #0]
 8003d42:	602b      	str	r3, [r5, #0]
 8003d44:	2e00      	cmp	r6, #0
 8003d46:	da03      	bge.n	8003d50 <_printf_i+0xc8>
 8003d48:	232d      	movs	r3, #45	; 0x2d
 8003d4a:	4276      	negs	r6, r6
 8003d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d50:	485e      	ldr	r0, [pc, #376]	; (8003ecc <_printf_i+0x244>)
 8003d52:	230a      	movs	r3, #10
 8003d54:	e019      	b.n	8003d8a <_printf_i+0x102>
 8003d56:	680e      	ldr	r6, [r1, #0]
 8003d58:	602b      	str	r3, [r5, #0]
 8003d5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d5e:	bf18      	it	ne
 8003d60:	b236      	sxthne	r6, r6
 8003d62:	e7ef      	b.n	8003d44 <_printf_i+0xbc>
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	6820      	ldr	r0, [r4, #0]
 8003d68:	1d19      	adds	r1, r3, #4
 8003d6a:	6029      	str	r1, [r5, #0]
 8003d6c:	0601      	lsls	r1, r0, #24
 8003d6e:	d501      	bpl.n	8003d74 <_printf_i+0xec>
 8003d70:	681e      	ldr	r6, [r3, #0]
 8003d72:	e002      	b.n	8003d7a <_printf_i+0xf2>
 8003d74:	0646      	lsls	r6, r0, #25
 8003d76:	d5fb      	bpl.n	8003d70 <_printf_i+0xe8>
 8003d78:	881e      	ldrh	r6, [r3, #0]
 8003d7a:	4854      	ldr	r0, [pc, #336]	; (8003ecc <_printf_i+0x244>)
 8003d7c:	2f6f      	cmp	r7, #111	; 0x6f
 8003d7e:	bf0c      	ite	eq
 8003d80:	2308      	moveq	r3, #8
 8003d82:	230a      	movne	r3, #10
 8003d84:	2100      	movs	r1, #0
 8003d86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d8a:	6865      	ldr	r5, [r4, #4]
 8003d8c:	60a5      	str	r5, [r4, #8]
 8003d8e:	2d00      	cmp	r5, #0
 8003d90:	bfa2      	ittt	ge
 8003d92:	6821      	ldrge	r1, [r4, #0]
 8003d94:	f021 0104 	bicge.w	r1, r1, #4
 8003d98:	6021      	strge	r1, [r4, #0]
 8003d9a:	b90e      	cbnz	r6, 8003da0 <_printf_i+0x118>
 8003d9c:	2d00      	cmp	r5, #0
 8003d9e:	d04d      	beq.n	8003e3c <_printf_i+0x1b4>
 8003da0:	4615      	mov	r5, r2
 8003da2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003da6:	fb03 6711 	mls	r7, r3, r1, r6
 8003daa:	5dc7      	ldrb	r7, [r0, r7]
 8003dac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003db0:	4637      	mov	r7, r6
 8003db2:	42bb      	cmp	r3, r7
 8003db4:	460e      	mov	r6, r1
 8003db6:	d9f4      	bls.n	8003da2 <_printf_i+0x11a>
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d10b      	bne.n	8003dd4 <_printf_i+0x14c>
 8003dbc:	6823      	ldr	r3, [r4, #0]
 8003dbe:	07de      	lsls	r6, r3, #31
 8003dc0:	d508      	bpl.n	8003dd4 <_printf_i+0x14c>
 8003dc2:	6923      	ldr	r3, [r4, #16]
 8003dc4:	6861      	ldr	r1, [r4, #4]
 8003dc6:	4299      	cmp	r1, r3
 8003dc8:	bfde      	ittt	le
 8003dca:	2330      	movle	r3, #48	; 0x30
 8003dcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003dd0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003dd4:	1b52      	subs	r2, r2, r5
 8003dd6:	6122      	str	r2, [r4, #16]
 8003dd8:	f8cd a000 	str.w	sl, [sp]
 8003ddc:	464b      	mov	r3, r9
 8003dde:	aa03      	add	r2, sp, #12
 8003de0:	4621      	mov	r1, r4
 8003de2:	4640      	mov	r0, r8
 8003de4:	f7ff fee2 	bl	8003bac <_printf_common>
 8003de8:	3001      	adds	r0, #1
 8003dea:	d14c      	bne.n	8003e86 <_printf_i+0x1fe>
 8003dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003df0:	b004      	add	sp, #16
 8003df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df6:	4835      	ldr	r0, [pc, #212]	; (8003ecc <_printf_i+0x244>)
 8003df8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003dfc:	6829      	ldr	r1, [r5, #0]
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e04:	6029      	str	r1, [r5, #0]
 8003e06:	061d      	lsls	r5, r3, #24
 8003e08:	d514      	bpl.n	8003e34 <_printf_i+0x1ac>
 8003e0a:	07df      	lsls	r7, r3, #31
 8003e0c:	bf44      	itt	mi
 8003e0e:	f043 0320 	orrmi.w	r3, r3, #32
 8003e12:	6023      	strmi	r3, [r4, #0]
 8003e14:	b91e      	cbnz	r6, 8003e1e <_printf_i+0x196>
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	f023 0320 	bic.w	r3, r3, #32
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	2310      	movs	r3, #16
 8003e20:	e7b0      	b.n	8003d84 <_printf_i+0xfc>
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	f043 0320 	orr.w	r3, r3, #32
 8003e28:	6023      	str	r3, [r4, #0]
 8003e2a:	2378      	movs	r3, #120	; 0x78
 8003e2c:	4828      	ldr	r0, [pc, #160]	; (8003ed0 <_printf_i+0x248>)
 8003e2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e32:	e7e3      	b.n	8003dfc <_printf_i+0x174>
 8003e34:	0659      	lsls	r1, r3, #25
 8003e36:	bf48      	it	mi
 8003e38:	b2b6      	uxthmi	r6, r6
 8003e3a:	e7e6      	b.n	8003e0a <_printf_i+0x182>
 8003e3c:	4615      	mov	r5, r2
 8003e3e:	e7bb      	b.n	8003db8 <_printf_i+0x130>
 8003e40:	682b      	ldr	r3, [r5, #0]
 8003e42:	6826      	ldr	r6, [r4, #0]
 8003e44:	6961      	ldr	r1, [r4, #20]
 8003e46:	1d18      	adds	r0, r3, #4
 8003e48:	6028      	str	r0, [r5, #0]
 8003e4a:	0635      	lsls	r5, r6, #24
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	d501      	bpl.n	8003e54 <_printf_i+0x1cc>
 8003e50:	6019      	str	r1, [r3, #0]
 8003e52:	e002      	b.n	8003e5a <_printf_i+0x1d2>
 8003e54:	0670      	lsls	r0, r6, #25
 8003e56:	d5fb      	bpl.n	8003e50 <_printf_i+0x1c8>
 8003e58:	8019      	strh	r1, [r3, #0]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	6123      	str	r3, [r4, #16]
 8003e5e:	4615      	mov	r5, r2
 8003e60:	e7ba      	b.n	8003dd8 <_printf_i+0x150>
 8003e62:	682b      	ldr	r3, [r5, #0]
 8003e64:	1d1a      	adds	r2, r3, #4
 8003e66:	602a      	str	r2, [r5, #0]
 8003e68:	681d      	ldr	r5, [r3, #0]
 8003e6a:	6862      	ldr	r2, [r4, #4]
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4628      	mov	r0, r5
 8003e70:	f7fc f9ae 	bl	80001d0 <memchr>
 8003e74:	b108      	cbz	r0, 8003e7a <_printf_i+0x1f2>
 8003e76:	1b40      	subs	r0, r0, r5
 8003e78:	6060      	str	r0, [r4, #4]
 8003e7a:	6863      	ldr	r3, [r4, #4]
 8003e7c:	6123      	str	r3, [r4, #16]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e84:	e7a8      	b.n	8003dd8 <_printf_i+0x150>
 8003e86:	6923      	ldr	r3, [r4, #16]
 8003e88:	462a      	mov	r2, r5
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	4640      	mov	r0, r8
 8003e8e:	47d0      	blx	sl
 8003e90:	3001      	adds	r0, #1
 8003e92:	d0ab      	beq.n	8003dec <_printf_i+0x164>
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	079b      	lsls	r3, r3, #30
 8003e98:	d413      	bmi.n	8003ec2 <_printf_i+0x23a>
 8003e9a:	68e0      	ldr	r0, [r4, #12]
 8003e9c:	9b03      	ldr	r3, [sp, #12]
 8003e9e:	4298      	cmp	r0, r3
 8003ea0:	bfb8      	it	lt
 8003ea2:	4618      	movlt	r0, r3
 8003ea4:	e7a4      	b.n	8003df0 <_printf_i+0x168>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	4632      	mov	r2, r6
 8003eaa:	4649      	mov	r1, r9
 8003eac:	4640      	mov	r0, r8
 8003eae:	47d0      	blx	sl
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	d09b      	beq.n	8003dec <_printf_i+0x164>
 8003eb4:	3501      	adds	r5, #1
 8003eb6:	68e3      	ldr	r3, [r4, #12]
 8003eb8:	9903      	ldr	r1, [sp, #12]
 8003eba:	1a5b      	subs	r3, r3, r1
 8003ebc:	42ab      	cmp	r3, r5
 8003ebe:	dcf2      	bgt.n	8003ea6 <_printf_i+0x21e>
 8003ec0:	e7eb      	b.n	8003e9a <_printf_i+0x212>
 8003ec2:	2500      	movs	r5, #0
 8003ec4:	f104 0619 	add.w	r6, r4, #25
 8003ec8:	e7f5      	b.n	8003eb6 <_printf_i+0x22e>
 8003eca:	bf00      	nop
 8003ecc:	080045f5 	.word	0x080045f5
 8003ed0:	08004606 	.word	0x08004606

08003ed4 <_sbrk_r>:
 8003ed4:	b538      	push	{r3, r4, r5, lr}
 8003ed6:	4d06      	ldr	r5, [pc, #24]	; (8003ef0 <_sbrk_r+0x1c>)
 8003ed8:	2300      	movs	r3, #0
 8003eda:	4604      	mov	r4, r0
 8003edc:	4608      	mov	r0, r1
 8003ede:	602b      	str	r3, [r5, #0]
 8003ee0:	f7fd fd9a 	bl	8001a18 <_sbrk>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d102      	bne.n	8003eee <_sbrk_r+0x1a>
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	b103      	cbz	r3, 8003eee <_sbrk_r+0x1a>
 8003eec:	6023      	str	r3, [r4, #0]
 8003eee:	bd38      	pop	{r3, r4, r5, pc}
 8003ef0:	200000c0 	.word	0x200000c0

08003ef4 <__sread>:
 8003ef4:	b510      	push	{r4, lr}
 8003ef6:	460c      	mov	r4, r1
 8003ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003efc:	f000 fab2 	bl	8004464 <_read_r>
 8003f00:	2800      	cmp	r0, #0
 8003f02:	bfab      	itete	ge
 8003f04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f06:	89a3      	ldrhlt	r3, [r4, #12]
 8003f08:	181b      	addge	r3, r3, r0
 8003f0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f0e:	bfac      	ite	ge
 8003f10:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f12:	81a3      	strhlt	r3, [r4, #12]
 8003f14:	bd10      	pop	{r4, pc}

08003f16 <__swrite>:
 8003f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f1a:	461f      	mov	r7, r3
 8003f1c:	898b      	ldrh	r3, [r1, #12]
 8003f1e:	05db      	lsls	r3, r3, #23
 8003f20:	4605      	mov	r5, r0
 8003f22:	460c      	mov	r4, r1
 8003f24:	4616      	mov	r6, r2
 8003f26:	d505      	bpl.n	8003f34 <__swrite+0x1e>
 8003f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f000 f9c8 	bl	80042c4 <_lseek_r>
 8003f34:	89a3      	ldrh	r3, [r4, #12]
 8003f36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f3e:	81a3      	strh	r3, [r4, #12]
 8003f40:	4632      	mov	r2, r6
 8003f42:	463b      	mov	r3, r7
 8003f44:	4628      	mov	r0, r5
 8003f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f4a:	f000 b869 	b.w	8004020 <_write_r>

08003f4e <__sseek>:
 8003f4e:	b510      	push	{r4, lr}
 8003f50:	460c      	mov	r4, r1
 8003f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f56:	f000 f9b5 	bl	80042c4 <_lseek_r>
 8003f5a:	1c43      	adds	r3, r0, #1
 8003f5c:	89a3      	ldrh	r3, [r4, #12]
 8003f5e:	bf15      	itete	ne
 8003f60:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f6a:	81a3      	strheq	r3, [r4, #12]
 8003f6c:	bf18      	it	ne
 8003f6e:	81a3      	strhne	r3, [r4, #12]
 8003f70:	bd10      	pop	{r4, pc}

08003f72 <__sclose>:
 8003f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f76:	f000 b8d3 	b.w	8004120 <_close_r>
	...

08003f7c <__swbuf_r>:
 8003f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7e:	460e      	mov	r6, r1
 8003f80:	4614      	mov	r4, r2
 8003f82:	4605      	mov	r5, r0
 8003f84:	b118      	cbz	r0, 8003f8e <__swbuf_r+0x12>
 8003f86:	6983      	ldr	r3, [r0, #24]
 8003f88:	b90b      	cbnz	r3, 8003f8e <__swbuf_r+0x12>
 8003f8a:	f7ff fb81 	bl	8003690 <__sinit>
 8003f8e:	4b21      	ldr	r3, [pc, #132]	; (8004014 <__swbuf_r+0x98>)
 8003f90:	429c      	cmp	r4, r3
 8003f92:	d12b      	bne.n	8003fec <__swbuf_r+0x70>
 8003f94:	686c      	ldr	r4, [r5, #4]
 8003f96:	69a3      	ldr	r3, [r4, #24]
 8003f98:	60a3      	str	r3, [r4, #8]
 8003f9a:	89a3      	ldrh	r3, [r4, #12]
 8003f9c:	071a      	lsls	r2, r3, #28
 8003f9e:	d52f      	bpl.n	8004000 <__swbuf_r+0x84>
 8003fa0:	6923      	ldr	r3, [r4, #16]
 8003fa2:	b36b      	cbz	r3, 8004000 <__swbuf_r+0x84>
 8003fa4:	6923      	ldr	r3, [r4, #16]
 8003fa6:	6820      	ldr	r0, [r4, #0]
 8003fa8:	1ac0      	subs	r0, r0, r3
 8003faa:	6963      	ldr	r3, [r4, #20]
 8003fac:	b2f6      	uxtb	r6, r6
 8003fae:	4283      	cmp	r3, r0
 8003fb0:	4637      	mov	r7, r6
 8003fb2:	dc04      	bgt.n	8003fbe <__swbuf_r+0x42>
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	f000 f948 	bl	800424c <_fflush_r>
 8003fbc:	bb30      	cbnz	r0, 800400c <__swbuf_r+0x90>
 8003fbe:	68a3      	ldr	r3, [r4, #8]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	60a3      	str	r3, [r4, #8]
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	6022      	str	r2, [r4, #0]
 8003fca:	701e      	strb	r6, [r3, #0]
 8003fcc:	6963      	ldr	r3, [r4, #20]
 8003fce:	3001      	adds	r0, #1
 8003fd0:	4283      	cmp	r3, r0
 8003fd2:	d004      	beq.n	8003fde <__swbuf_r+0x62>
 8003fd4:	89a3      	ldrh	r3, [r4, #12]
 8003fd6:	07db      	lsls	r3, r3, #31
 8003fd8:	d506      	bpl.n	8003fe8 <__swbuf_r+0x6c>
 8003fda:	2e0a      	cmp	r6, #10
 8003fdc:	d104      	bne.n	8003fe8 <__swbuf_r+0x6c>
 8003fde:	4621      	mov	r1, r4
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f000 f933 	bl	800424c <_fflush_r>
 8003fe6:	b988      	cbnz	r0, 800400c <__swbuf_r+0x90>
 8003fe8:	4638      	mov	r0, r7
 8003fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fec:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <__swbuf_r+0x9c>)
 8003fee:	429c      	cmp	r4, r3
 8003ff0:	d101      	bne.n	8003ff6 <__swbuf_r+0x7a>
 8003ff2:	68ac      	ldr	r4, [r5, #8]
 8003ff4:	e7cf      	b.n	8003f96 <__swbuf_r+0x1a>
 8003ff6:	4b09      	ldr	r3, [pc, #36]	; (800401c <__swbuf_r+0xa0>)
 8003ff8:	429c      	cmp	r4, r3
 8003ffa:	bf08      	it	eq
 8003ffc:	68ec      	ldreq	r4, [r5, #12]
 8003ffe:	e7ca      	b.n	8003f96 <__swbuf_r+0x1a>
 8004000:	4621      	mov	r1, r4
 8004002:	4628      	mov	r0, r5
 8004004:	f000 f81e 	bl	8004044 <__swsetup_r>
 8004008:	2800      	cmp	r0, #0
 800400a:	d0cb      	beq.n	8003fa4 <__swbuf_r+0x28>
 800400c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004010:	e7ea      	b.n	8003fe8 <__swbuf_r+0x6c>
 8004012:	bf00      	nop
 8004014:	080045a4 	.word	0x080045a4
 8004018:	080045c4 	.word	0x080045c4
 800401c:	08004584 	.word	0x08004584

08004020 <_write_r>:
 8004020:	b538      	push	{r3, r4, r5, lr}
 8004022:	4d07      	ldr	r5, [pc, #28]	; (8004040 <_write_r+0x20>)
 8004024:	4604      	mov	r4, r0
 8004026:	4608      	mov	r0, r1
 8004028:	4611      	mov	r1, r2
 800402a:	2200      	movs	r2, #0
 800402c:	602a      	str	r2, [r5, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	f7fd f946 	bl	80012c0 <_write>
 8004034:	1c43      	adds	r3, r0, #1
 8004036:	d102      	bne.n	800403e <_write_r+0x1e>
 8004038:	682b      	ldr	r3, [r5, #0]
 800403a:	b103      	cbz	r3, 800403e <_write_r+0x1e>
 800403c:	6023      	str	r3, [r4, #0]
 800403e:	bd38      	pop	{r3, r4, r5, pc}
 8004040:	200000c0 	.word	0x200000c0

08004044 <__swsetup_r>:
 8004044:	4b32      	ldr	r3, [pc, #200]	; (8004110 <__swsetup_r+0xcc>)
 8004046:	b570      	push	{r4, r5, r6, lr}
 8004048:	681d      	ldr	r5, [r3, #0]
 800404a:	4606      	mov	r6, r0
 800404c:	460c      	mov	r4, r1
 800404e:	b125      	cbz	r5, 800405a <__swsetup_r+0x16>
 8004050:	69ab      	ldr	r3, [r5, #24]
 8004052:	b913      	cbnz	r3, 800405a <__swsetup_r+0x16>
 8004054:	4628      	mov	r0, r5
 8004056:	f7ff fb1b 	bl	8003690 <__sinit>
 800405a:	4b2e      	ldr	r3, [pc, #184]	; (8004114 <__swsetup_r+0xd0>)
 800405c:	429c      	cmp	r4, r3
 800405e:	d10f      	bne.n	8004080 <__swsetup_r+0x3c>
 8004060:	686c      	ldr	r4, [r5, #4]
 8004062:	89a3      	ldrh	r3, [r4, #12]
 8004064:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004068:	0719      	lsls	r1, r3, #28
 800406a:	d42c      	bmi.n	80040c6 <__swsetup_r+0x82>
 800406c:	06dd      	lsls	r5, r3, #27
 800406e:	d411      	bmi.n	8004094 <__swsetup_r+0x50>
 8004070:	2309      	movs	r3, #9
 8004072:	6033      	str	r3, [r6, #0]
 8004074:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004078:	81a3      	strh	r3, [r4, #12]
 800407a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800407e:	e03e      	b.n	80040fe <__swsetup_r+0xba>
 8004080:	4b25      	ldr	r3, [pc, #148]	; (8004118 <__swsetup_r+0xd4>)
 8004082:	429c      	cmp	r4, r3
 8004084:	d101      	bne.n	800408a <__swsetup_r+0x46>
 8004086:	68ac      	ldr	r4, [r5, #8]
 8004088:	e7eb      	b.n	8004062 <__swsetup_r+0x1e>
 800408a:	4b24      	ldr	r3, [pc, #144]	; (800411c <__swsetup_r+0xd8>)
 800408c:	429c      	cmp	r4, r3
 800408e:	bf08      	it	eq
 8004090:	68ec      	ldreq	r4, [r5, #12]
 8004092:	e7e6      	b.n	8004062 <__swsetup_r+0x1e>
 8004094:	0758      	lsls	r0, r3, #29
 8004096:	d512      	bpl.n	80040be <__swsetup_r+0x7a>
 8004098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800409a:	b141      	cbz	r1, 80040ae <__swsetup_r+0x6a>
 800409c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040a0:	4299      	cmp	r1, r3
 80040a2:	d002      	beq.n	80040aa <__swsetup_r+0x66>
 80040a4:	4630      	mov	r0, r6
 80040a6:	f000 f991 	bl	80043cc <_free_r>
 80040aa:	2300      	movs	r3, #0
 80040ac:	6363      	str	r3, [r4, #52]	; 0x34
 80040ae:	89a3      	ldrh	r3, [r4, #12]
 80040b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040b4:	81a3      	strh	r3, [r4, #12]
 80040b6:	2300      	movs	r3, #0
 80040b8:	6063      	str	r3, [r4, #4]
 80040ba:	6923      	ldr	r3, [r4, #16]
 80040bc:	6023      	str	r3, [r4, #0]
 80040be:	89a3      	ldrh	r3, [r4, #12]
 80040c0:	f043 0308 	orr.w	r3, r3, #8
 80040c4:	81a3      	strh	r3, [r4, #12]
 80040c6:	6923      	ldr	r3, [r4, #16]
 80040c8:	b94b      	cbnz	r3, 80040de <__swsetup_r+0x9a>
 80040ca:	89a3      	ldrh	r3, [r4, #12]
 80040cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040d4:	d003      	beq.n	80040de <__swsetup_r+0x9a>
 80040d6:	4621      	mov	r1, r4
 80040d8:	4630      	mov	r0, r6
 80040da:	f000 f92b 	bl	8004334 <__smakebuf_r>
 80040de:	89a0      	ldrh	r0, [r4, #12]
 80040e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80040e4:	f010 0301 	ands.w	r3, r0, #1
 80040e8:	d00a      	beq.n	8004100 <__swsetup_r+0xbc>
 80040ea:	2300      	movs	r3, #0
 80040ec:	60a3      	str	r3, [r4, #8]
 80040ee:	6963      	ldr	r3, [r4, #20]
 80040f0:	425b      	negs	r3, r3
 80040f2:	61a3      	str	r3, [r4, #24]
 80040f4:	6923      	ldr	r3, [r4, #16]
 80040f6:	b943      	cbnz	r3, 800410a <__swsetup_r+0xc6>
 80040f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80040fc:	d1ba      	bne.n	8004074 <__swsetup_r+0x30>
 80040fe:	bd70      	pop	{r4, r5, r6, pc}
 8004100:	0781      	lsls	r1, r0, #30
 8004102:	bf58      	it	pl
 8004104:	6963      	ldrpl	r3, [r4, #20]
 8004106:	60a3      	str	r3, [r4, #8]
 8004108:	e7f4      	b.n	80040f4 <__swsetup_r+0xb0>
 800410a:	2000      	movs	r0, #0
 800410c:	e7f7      	b.n	80040fe <__swsetup_r+0xba>
 800410e:	bf00      	nop
 8004110:	20000004 	.word	0x20000004
 8004114:	080045a4 	.word	0x080045a4
 8004118:	080045c4 	.word	0x080045c4
 800411c:	08004584 	.word	0x08004584

08004120 <_close_r>:
 8004120:	b538      	push	{r3, r4, r5, lr}
 8004122:	4d06      	ldr	r5, [pc, #24]	; (800413c <_close_r+0x1c>)
 8004124:	2300      	movs	r3, #0
 8004126:	4604      	mov	r4, r0
 8004128:	4608      	mov	r0, r1
 800412a:	602b      	str	r3, [r5, #0]
 800412c:	f7fd fc3f 	bl	80019ae <_close>
 8004130:	1c43      	adds	r3, r0, #1
 8004132:	d102      	bne.n	800413a <_close_r+0x1a>
 8004134:	682b      	ldr	r3, [r5, #0]
 8004136:	b103      	cbz	r3, 800413a <_close_r+0x1a>
 8004138:	6023      	str	r3, [r4, #0]
 800413a:	bd38      	pop	{r3, r4, r5, pc}
 800413c:	200000c0 	.word	0x200000c0

08004140 <__sflush_r>:
 8004140:	898a      	ldrh	r2, [r1, #12]
 8004142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004146:	4605      	mov	r5, r0
 8004148:	0710      	lsls	r0, r2, #28
 800414a:	460c      	mov	r4, r1
 800414c:	d458      	bmi.n	8004200 <__sflush_r+0xc0>
 800414e:	684b      	ldr	r3, [r1, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	dc05      	bgt.n	8004160 <__sflush_r+0x20>
 8004154:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	dc02      	bgt.n	8004160 <__sflush_r+0x20>
 800415a:	2000      	movs	r0, #0
 800415c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004162:	2e00      	cmp	r6, #0
 8004164:	d0f9      	beq.n	800415a <__sflush_r+0x1a>
 8004166:	2300      	movs	r3, #0
 8004168:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800416c:	682f      	ldr	r7, [r5, #0]
 800416e:	602b      	str	r3, [r5, #0]
 8004170:	d032      	beq.n	80041d8 <__sflush_r+0x98>
 8004172:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004174:	89a3      	ldrh	r3, [r4, #12]
 8004176:	075a      	lsls	r2, r3, #29
 8004178:	d505      	bpl.n	8004186 <__sflush_r+0x46>
 800417a:	6863      	ldr	r3, [r4, #4]
 800417c:	1ac0      	subs	r0, r0, r3
 800417e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004180:	b10b      	cbz	r3, 8004186 <__sflush_r+0x46>
 8004182:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004184:	1ac0      	subs	r0, r0, r3
 8004186:	2300      	movs	r3, #0
 8004188:	4602      	mov	r2, r0
 800418a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800418c:	6a21      	ldr	r1, [r4, #32]
 800418e:	4628      	mov	r0, r5
 8004190:	47b0      	blx	r6
 8004192:	1c43      	adds	r3, r0, #1
 8004194:	89a3      	ldrh	r3, [r4, #12]
 8004196:	d106      	bne.n	80041a6 <__sflush_r+0x66>
 8004198:	6829      	ldr	r1, [r5, #0]
 800419a:	291d      	cmp	r1, #29
 800419c:	d82c      	bhi.n	80041f8 <__sflush_r+0xb8>
 800419e:	4a2a      	ldr	r2, [pc, #168]	; (8004248 <__sflush_r+0x108>)
 80041a0:	40ca      	lsrs	r2, r1
 80041a2:	07d6      	lsls	r6, r2, #31
 80041a4:	d528      	bpl.n	80041f8 <__sflush_r+0xb8>
 80041a6:	2200      	movs	r2, #0
 80041a8:	6062      	str	r2, [r4, #4]
 80041aa:	04d9      	lsls	r1, r3, #19
 80041ac:	6922      	ldr	r2, [r4, #16]
 80041ae:	6022      	str	r2, [r4, #0]
 80041b0:	d504      	bpl.n	80041bc <__sflush_r+0x7c>
 80041b2:	1c42      	adds	r2, r0, #1
 80041b4:	d101      	bne.n	80041ba <__sflush_r+0x7a>
 80041b6:	682b      	ldr	r3, [r5, #0]
 80041b8:	b903      	cbnz	r3, 80041bc <__sflush_r+0x7c>
 80041ba:	6560      	str	r0, [r4, #84]	; 0x54
 80041bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041be:	602f      	str	r7, [r5, #0]
 80041c0:	2900      	cmp	r1, #0
 80041c2:	d0ca      	beq.n	800415a <__sflush_r+0x1a>
 80041c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041c8:	4299      	cmp	r1, r3
 80041ca:	d002      	beq.n	80041d2 <__sflush_r+0x92>
 80041cc:	4628      	mov	r0, r5
 80041ce:	f000 f8fd 	bl	80043cc <_free_r>
 80041d2:	2000      	movs	r0, #0
 80041d4:	6360      	str	r0, [r4, #52]	; 0x34
 80041d6:	e7c1      	b.n	800415c <__sflush_r+0x1c>
 80041d8:	6a21      	ldr	r1, [r4, #32]
 80041da:	2301      	movs	r3, #1
 80041dc:	4628      	mov	r0, r5
 80041de:	47b0      	blx	r6
 80041e0:	1c41      	adds	r1, r0, #1
 80041e2:	d1c7      	bne.n	8004174 <__sflush_r+0x34>
 80041e4:	682b      	ldr	r3, [r5, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0c4      	beq.n	8004174 <__sflush_r+0x34>
 80041ea:	2b1d      	cmp	r3, #29
 80041ec:	d001      	beq.n	80041f2 <__sflush_r+0xb2>
 80041ee:	2b16      	cmp	r3, #22
 80041f0:	d101      	bne.n	80041f6 <__sflush_r+0xb6>
 80041f2:	602f      	str	r7, [r5, #0]
 80041f4:	e7b1      	b.n	800415a <__sflush_r+0x1a>
 80041f6:	89a3      	ldrh	r3, [r4, #12]
 80041f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041fc:	81a3      	strh	r3, [r4, #12]
 80041fe:	e7ad      	b.n	800415c <__sflush_r+0x1c>
 8004200:	690f      	ldr	r7, [r1, #16]
 8004202:	2f00      	cmp	r7, #0
 8004204:	d0a9      	beq.n	800415a <__sflush_r+0x1a>
 8004206:	0793      	lsls	r3, r2, #30
 8004208:	680e      	ldr	r6, [r1, #0]
 800420a:	bf08      	it	eq
 800420c:	694b      	ldreq	r3, [r1, #20]
 800420e:	600f      	str	r7, [r1, #0]
 8004210:	bf18      	it	ne
 8004212:	2300      	movne	r3, #0
 8004214:	eba6 0807 	sub.w	r8, r6, r7
 8004218:	608b      	str	r3, [r1, #8]
 800421a:	f1b8 0f00 	cmp.w	r8, #0
 800421e:	dd9c      	ble.n	800415a <__sflush_r+0x1a>
 8004220:	6a21      	ldr	r1, [r4, #32]
 8004222:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004224:	4643      	mov	r3, r8
 8004226:	463a      	mov	r2, r7
 8004228:	4628      	mov	r0, r5
 800422a:	47b0      	blx	r6
 800422c:	2800      	cmp	r0, #0
 800422e:	dc06      	bgt.n	800423e <__sflush_r+0xfe>
 8004230:	89a3      	ldrh	r3, [r4, #12]
 8004232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004236:	81a3      	strh	r3, [r4, #12]
 8004238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800423c:	e78e      	b.n	800415c <__sflush_r+0x1c>
 800423e:	4407      	add	r7, r0
 8004240:	eba8 0800 	sub.w	r8, r8, r0
 8004244:	e7e9      	b.n	800421a <__sflush_r+0xda>
 8004246:	bf00      	nop
 8004248:	20400001 	.word	0x20400001

0800424c <_fflush_r>:
 800424c:	b538      	push	{r3, r4, r5, lr}
 800424e:	690b      	ldr	r3, [r1, #16]
 8004250:	4605      	mov	r5, r0
 8004252:	460c      	mov	r4, r1
 8004254:	b913      	cbnz	r3, 800425c <_fflush_r+0x10>
 8004256:	2500      	movs	r5, #0
 8004258:	4628      	mov	r0, r5
 800425a:	bd38      	pop	{r3, r4, r5, pc}
 800425c:	b118      	cbz	r0, 8004266 <_fflush_r+0x1a>
 800425e:	6983      	ldr	r3, [r0, #24]
 8004260:	b90b      	cbnz	r3, 8004266 <_fflush_r+0x1a>
 8004262:	f7ff fa15 	bl	8003690 <__sinit>
 8004266:	4b14      	ldr	r3, [pc, #80]	; (80042b8 <_fflush_r+0x6c>)
 8004268:	429c      	cmp	r4, r3
 800426a:	d11b      	bne.n	80042a4 <_fflush_r+0x58>
 800426c:	686c      	ldr	r4, [r5, #4]
 800426e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0ef      	beq.n	8004256 <_fflush_r+0xa>
 8004276:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004278:	07d0      	lsls	r0, r2, #31
 800427a:	d404      	bmi.n	8004286 <_fflush_r+0x3a>
 800427c:	0599      	lsls	r1, r3, #22
 800427e:	d402      	bmi.n	8004286 <_fflush_r+0x3a>
 8004280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004282:	f7ff faa3 	bl	80037cc <__retarget_lock_acquire_recursive>
 8004286:	4628      	mov	r0, r5
 8004288:	4621      	mov	r1, r4
 800428a:	f7ff ff59 	bl	8004140 <__sflush_r>
 800428e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004290:	07da      	lsls	r2, r3, #31
 8004292:	4605      	mov	r5, r0
 8004294:	d4e0      	bmi.n	8004258 <_fflush_r+0xc>
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	059b      	lsls	r3, r3, #22
 800429a:	d4dd      	bmi.n	8004258 <_fflush_r+0xc>
 800429c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800429e:	f7ff fa96 	bl	80037ce <__retarget_lock_release_recursive>
 80042a2:	e7d9      	b.n	8004258 <_fflush_r+0xc>
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <_fflush_r+0x70>)
 80042a6:	429c      	cmp	r4, r3
 80042a8:	d101      	bne.n	80042ae <_fflush_r+0x62>
 80042aa:	68ac      	ldr	r4, [r5, #8]
 80042ac:	e7df      	b.n	800426e <_fflush_r+0x22>
 80042ae:	4b04      	ldr	r3, [pc, #16]	; (80042c0 <_fflush_r+0x74>)
 80042b0:	429c      	cmp	r4, r3
 80042b2:	bf08      	it	eq
 80042b4:	68ec      	ldreq	r4, [r5, #12]
 80042b6:	e7da      	b.n	800426e <_fflush_r+0x22>
 80042b8:	080045a4 	.word	0x080045a4
 80042bc:	080045c4 	.word	0x080045c4
 80042c0:	08004584 	.word	0x08004584

080042c4 <_lseek_r>:
 80042c4:	b538      	push	{r3, r4, r5, lr}
 80042c6:	4d07      	ldr	r5, [pc, #28]	; (80042e4 <_lseek_r+0x20>)
 80042c8:	4604      	mov	r4, r0
 80042ca:	4608      	mov	r0, r1
 80042cc:	4611      	mov	r1, r2
 80042ce:	2200      	movs	r2, #0
 80042d0:	602a      	str	r2, [r5, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	f7fd fb92 	bl	80019fc <_lseek>
 80042d8:	1c43      	adds	r3, r0, #1
 80042da:	d102      	bne.n	80042e2 <_lseek_r+0x1e>
 80042dc:	682b      	ldr	r3, [r5, #0]
 80042de:	b103      	cbz	r3, 80042e2 <_lseek_r+0x1e>
 80042e0:	6023      	str	r3, [r4, #0]
 80042e2:	bd38      	pop	{r3, r4, r5, pc}
 80042e4:	200000c0 	.word	0x200000c0

080042e8 <__swhatbuf_r>:
 80042e8:	b570      	push	{r4, r5, r6, lr}
 80042ea:	460e      	mov	r6, r1
 80042ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f0:	2900      	cmp	r1, #0
 80042f2:	b096      	sub	sp, #88	; 0x58
 80042f4:	4614      	mov	r4, r2
 80042f6:	461d      	mov	r5, r3
 80042f8:	da08      	bge.n	800430c <__swhatbuf_r+0x24>
 80042fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	602a      	str	r2, [r5, #0]
 8004302:	061a      	lsls	r2, r3, #24
 8004304:	d410      	bmi.n	8004328 <__swhatbuf_r+0x40>
 8004306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800430a:	e00e      	b.n	800432a <__swhatbuf_r+0x42>
 800430c:	466a      	mov	r2, sp
 800430e:	f000 f8bb 	bl	8004488 <_fstat_r>
 8004312:	2800      	cmp	r0, #0
 8004314:	dbf1      	blt.n	80042fa <__swhatbuf_r+0x12>
 8004316:	9a01      	ldr	r2, [sp, #4]
 8004318:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800431c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004320:	425a      	negs	r2, r3
 8004322:	415a      	adcs	r2, r3
 8004324:	602a      	str	r2, [r5, #0]
 8004326:	e7ee      	b.n	8004306 <__swhatbuf_r+0x1e>
 8004328:	2340      	movs	r3, #64	; 0x40
 800432a:	2000      	movs	r0, #0
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	b016      	add	sp, #88	; 0x58
 8004330:	bd70      	pop	{r4, r5, r6, pc}
	...

08004334 <__smakebuf_r>:
 8004334:	898b      	ldrh	r3, [r1, #12]
 8004336:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004338:	079d      	lsls	r5, r3, #30
 800433a:	4606      	mov	r6, r0
 800433c:	460c      	mov	r4, r1
 800433e:	d507      	bpl.n	8004350 <__smakebuf_r+0x1c>
 8004340:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004344:	6023      	str	r3, [r4, #0]
 8004346:	6123      	str	r3, [r4, #16]
 8004348:	2301      	movs	r3, #1
 800434a:	6163      	str	r3, [r4, #20]
 800434c:	b002      	add	sp, #8
 800434e:	bd70      	pop	{r4, r5, r6, pc}
 8004350:	ab01      	add	r3, sp, #4
 8004352:	466a      	mov	r2, sp
 8004354:	f7ff ffc8 	bl	80042e8 <__swhatbuf_r>
 8004358:	9900      	ldr	r1, [sp, #0]
 800435a:	4605      	mov	r5, r0
 800435c:	4630      	mov	r0, r6
 800435e:	f7ff fa57 	bl	8003810 <_malloc_r>
 8004362:	b948      	cbnz	r0, 8004378 <__smakebuf_r+0x44>
 8004364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004368:	059a      	lsls	r2, r3, #22
 800436a:	d4ef      	bmi.n	800434c <__smakebuf_r+0x18>
 800436c:	f023 0303 	bic.w	r3, r3, #3
 8004370:	f043 0302 	orr.w	r3, r3, #2
 8004374:	81a3      	strh	r3, [r4, #12]
 8004376:	e7e3      	b.n	8004340 <__smakebuf_r+0xc>
 8004378:	4b0d      	ldr	r3, [pc, #52]	; (80043b0 <__smakebuf_r+0x7c>)
 800437a:	62b3      	str	r3, [r6, #40]	; 0x28
 800437c:	89a3      	ldrh	r3, [r4, #12]
 800437e:	6020      	str	r0, [r4, #0]
 8004380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004384:	81a3      	strh	r3, [r4, #12]
 8004386:	9b00      	ldr	r3, [sp, #0]
 8004388:	6163      	str	r3, [r4, #20]
 800438a:	9b01      	ldr	r3, [sp, #4]
 800438c:	6120      	str	r0, [r4, #16]
 800438e:	b15b      	cbz	r3, 80043a8 <__smakebuf_r+0x74>
 8004390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004394:	4630      	mov	r0, r6
 8004396:	f000 f889 	bl	80044ac <_isatty_r>
 800439a:	b128      	cbz	r0, 80043a8 <__smakebuf_r+0x74>
 800439c:	89a3      	ldrh	r3, [r4, #12]
 800439e:	f023 0303 	bic.w	r3, r3, #3
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	81a3      	strh	r3, [r4, #12]
 80043a8:	89a0      	ldrh	r0, [r4, #12]
 80043aa:	4305      	orrs	r5, r0
 80043ac:	81a5      	strh	r5, [r4, #12]
 80043ae:	e7cd      	b.n	800434c <__smakebuf_r+0x18>
 80043b0:	08003629 	.word	0x08003629

080043b4 <__malloc_lock>:
 80043b4:	4801      	ldr	r0, [pc, #4]	; (80043bc <__malloc_lock+0x8>)
 80043b6:	f7ff ba09 	b.w	80037cc <__retarget_lock_acquire_recursive>
 80043ba:	bf00      	nop
 80043bc:	200000b4 	.word	0x200000b4

080043c0 <__malloc_unlock>:
 80043c0:	4801      	ldr	r0, [pc, #4]	; (80043c8 <__malloc_unlock+0x8>)
 80043c2:	f7ff ba04 	b.w	80037ce <__retarget_lock_release_recursive>
 80043c6:	bf00      	nop
 80043c8:	200000b4 	.word	0x200000b4

080043cc <_free_r>:
 80043cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043ce:	2900      	cmp	r1, #0
 80043d0:	d044      	beq.n	800445c <_free_r+0x90>
 80043d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043d6:	9001      	str	r0, [sp, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f1a1 0404 	sub.w	r4, r1, #4
 80043de:	bfb8      	it	lt
 80043e0:	18e4      	addlt	r4, r4, r3
 80043e2:	f7ff ffe7 	bl	80043b4 <__malloc_lock>
 80043e6:	4a1e      	ldr	r2, [pc, #120]	; (8004460 <_free_r+0x94>)
 80043e8:	9801      	ldr	r0, [sp, #4]
 80043ea:	6813      	ldr	r3, [r2, #0]
 80043ec:	b933      	cbnz	r3, 80043fc <_free_r+0x30>
 80043ee:	6063      	str	r3, [r4, #4]
 80043f0:	6014      	str	r4, [r2, #0]
 80043f2:	b003      	add	sp, #12
 80043f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043f8:	f7ff bfe2 	b.w	80043c0 <__malloc_unlock>
 80043fc:	42a3      	cmp	r3, r4
 80043fe:	d908      	bls.n	8004412 <_free_r+0x46>
 8004400:	6825      	ldr	r5, [r4, #0]
 8004402:	1961      	adds	r1, r4, r5
 8004404:	428b      	cmp	r3, r1
 8004406:	bf01      	itttt	eq
 8004408:	6819      	ldreq	r1, [r3, #0]
 800440a:	685b      	ldreq	r3, [r3, #4]
 800440c:	1949      	addeq	r1, r1, r5
 800440e:	6021      	streq	r1, [r4, #0]
 8004410:	e7ed      	b.n	80043ee <_free_r+0x22>
 8004412:	461a      	mov	r2, r3
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	b10b      	cbz	r3, 800441c <_free_r+0x50>
 8004418:	42a3      	cmp	r3, r4
 800441a:	d9fa      	bls.n	8004412 <_free_r+0x46>
 800441c:	6811      	ldr	r1, [r2, #0]
 800441e:	1855      	adds	r5, r2, r1
 8004420:	42a5      	cmp	r5, r4
 8004422:	d10b      	bne.n	800443c <_free_r+0x70>
 8004424:	6824      	ldr	r4, [r4, #0]
 8004426:	4421      	add	r1, r4
 8004428:	1854      	adds	r4, r2, r1
 800442a:	42a3      	cmp	r3, r4
 800442c:	6011      	str	r1, [r2, #0]
 800442e:	d1e0      	bne.n	80043f2 <_free_r+0x26>
 8004430:	681c      	ldr	r4, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	6053      	str	r3, [r2, #4]
 8004436:	4421      	add	r1, r4
 8004438:	6011      	str	r1, [r2, #0]
 800443a:	e7da      	b.n	80043f2 <_free_r+0x26>
 800443c:	d902      	bls.n	8004444 <_free_r+0x78>
 800443e:	230c      	movs	r3, #12
 8004440:	6003      	str	r3, [r0, #0]
 8004442:	e7d6      	b.n	80043f2 <_free_r+0x26>
 8004444:	6825      	ldr	r5, [r4, #0]
 8004446:	1961      	adds	r1, r4, r5
 8004448:	428b      	cmp	r3, r1
 800444a:	bf04      	itt	eq
 800444c:	6819      	ldreq	r1, [r3, #0]
 800444e:	685b      	ldreq	r3, [r3, #4]
 8004450:	6063      	str	r3, [r4, #4]
 8004452:	bf04      	itt	eq
 8004454:	1949      	addeq	r1, r1, r5
 8004456:	6021      	streq	r1, [r4, #0]
 8004458:	6054      	str	r4, [r2, #4]
 800445a:	e7ca      	b.n	80043f2 <_free_r+0x26>
 800445c:	b003      	add	sp, #12
 800445e:	bd30      	pop	{r4, r5, pc}
 8004460:	200000b8 	.word	0x200000b8

08004464 <_read_r>:
 8004464:	b538      	push	{r3, r4, r5, lr}
 8004466:	4d07      	ldr	r5, [pc, #28]	; (8004484 <_read_r+0x20>)
 8004468:	4604      	mov	r4, r0
 800446a:	4608      	mov	r0, r1
 800446c:	4611      	mov	r1, r2
 800446e:	2200      	movs	r2, #0
 8004470:	602a      	str	r2, [r5, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	f7fd fa7e 	bl	8001974 <_read>
 8004478:	1c43      	adds	r3, r0, #1
 800447a:	d102      	bne.n	8004482 <_read_r+0x1e>
 800447c:	682b      	ldr	r3, [r5, #0]
 800447e:	b103      	cbz	r3, 8004482 <_read_r+0x1e>
 8004480:	6023      	str	r3, [r4, #0]
 8004482:	bd38      	pop	{r3, r4, r5, pc}
 8004484:	200000c0 	.word	0x200000c0

08004488 <_fstat_r>:
 8004488:	b538      	push	{r3, r4, r5, lr}
 800448a:	4d07      	ldr	r5, [pc, #28]	; (80044a8 <_fstat_r+0x20>)
 800448c:	2300      	movs	r3, #0
 800448e:	4604      	mov	r4, r0
 8004490:	4608      	mov	r0, r1
 8004492:	4611      	mov	r1, r2
 8004494:	602b      	str	r3, [r5, #0]
 8004496:	f7fd fa96 	bl	80019c6 <_fstat>
 800449a:	1c43      	adds	r3, r0, #1
 800449c:	d102      	bne.n	80044a4 <_fstat_r+0x1c>
 800449e:	682b      	ldr	r3, [r5, #0]
 80044a0:	b103      	cbz	r3, 80044a4 <_fstat_r+0x1c>
 80044a2:	6023      	str	r3, [r4, #0]
 80044a4:	bd38      	pop	{r3, r4, r5, pc}
 80044a6:	bf00      	nop
 80044a8:	200000c0 	.word	0x200000c0

080044ac <_isatty_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	4d06      	ldr	r5, [pc, #24]	; (80044c8 <_isatty_r+0x1c>)
 80044b0:	2300      	movs	r3, #0
 80044b2:	4604      	mov	r4, r0
 80044b4:	4608      	mov	r0, r1
 80044b6:	602b      	str	r3, [r5, #0]
 80044b8:	f7fd fa95 	bl	80019e6 <_isatty>
 80044bc:	1c43      	adds	r3, r0, #1
 80044be:	d102      	bne.n	80044c6 <_isatty_r+0x1a>
 80044c0:	682b      	ldr	r3, [r5, #0]
 80044c2:	b103      	cbz	r3, 80044c6 <_isatty_r+0x1a>
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	bd38      	pop	{r3, r4, r5, pc}
 80044c8:	200000c0 	.word	0x200000c0

080044cc <_init>:
 80044cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ce:	bf00      	nop
 80044d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d2:	bc08      	pop	{r3}
 80044d4:	469e      	mov	lr, r3
 80044d6:	4770      	bx	lr

080044d8 <_fini>:
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	bf00      	nop
 80044dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044de:	bc08      	pop	{r3}
 80044e0:	469e      	mov	lr, r3
 80044e2:	4770      	bx	lr
