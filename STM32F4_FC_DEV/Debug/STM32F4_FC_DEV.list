
STM32F4_FC_DEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08007a68  08007a68  00017a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f14  08007f14  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007f14  08007f14  00017f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f1c  08007f1c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f1c  08007f1c  00017f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f20  08007f20  00017f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08007f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          000000c4  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000029c  2000029c  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a7a8  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002210  00000000  00000000  0002a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a78  00000000  00000000  0002cbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000950  00000000  00000000  0002d638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ca07  00000000  00000000  0002df88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000912e  00000000  00000000  0004a98f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098863  00000000  00000000  00053abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000ec320  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003cb0  00000000  00000000  000ec370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a50 	.word	0x08007a50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08007a50 	.word	0x08007a50

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f58:	4907      	ldr	r1, [pc, #28]	; (8000f78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4013      	ands	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	40023800 	.word	0x40023800

08000f7c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f88:	4907      	ldr	r1, [pc, #28]	; (8000fa8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4013      	ands	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	40023800 	.word	0x40023800

08000fac <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	601a      	str	r2, [r3, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f023 0210 	bic.w	r2, r3, #16
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	605a      	str	r2, [r3, #4]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	2b01      	cmp	r3, #1
 8001004:	d101      	bne.n	800100a <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	2b02      	cmp	r3, #2
 800102a:	d101      	bne.n	8001030 <LL_SPI_IsActiveFlag_TXE+0x18>
 800102c:	2301      	movs	r3, #1
 800102e:	e000      	b.n	8001032 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	330c      	adds	r3, #12
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b2db      	uxtb	r3, r3
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 800105a:	b480      	push	{r7}
 800105c:	b085      	sub	sp, #20
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	330c      	adds	r3, #12
 800106a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	78fa      	ldrb	r2, [r7, #3]
 8001070:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691a      	ldr	r2, [r3, #16]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	4013      	ands	r3, r2
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	429a      	cmp	r2, r3
 8001094:	bf0c      	ite	eq
 8001096:	2301      	moveq	r3, #1
 8001098:	2300      	movne	r3, #0
 800109a:	b2db      	uxtb	r3, r3
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	619a      	str	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	041a      	lsls	r2, r3, #16
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	619a      	str	r2, [r3, #24]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b090      	sub	sp, #64	; 0x40
 80010e8:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80010ea:	f107 0318 	add.w	r3, r7, #24
 80010ee:	2228      	movs	r2, #40	; 0x28
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f003 fbfe 	bl	80048f4 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	463b      	mov	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]
 8001106:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001108:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800110c:	f7ff ff36 	bl	8000f7c <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001110:	2001      	movs	r0, #1
 8001112:	f7ff ff1b 	bl	8000f4c <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001116:	2004      	movs	r0, #4
 8001118:	f7ff ff18 	bl	8000f4c <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800111c:	23e0      	movs	r3, #224	; 0xe0
 800111e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001120:	2302      	movs	r3, #2
 8001122:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001130:	2305      	movs	r3, #5
 8001132:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	463b      	mov	r3, r7
 8001136:	4619      	mov	r1, r3
 8001138:	4825      	ldr	r0, [pc, #148]	; (80011d0 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800113a:	f002 fb7d 	bl	8003838 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001142:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001146:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800114c:	2302      	movs	r3, #2
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001150:	2301      	movs	r3, #1
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 800115a:	2310      	movs	r3, #16
 800115c:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800115e:	2300      	movs	r3, #0
 8001160:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 8001166:	230a      	movs	r3, #10
 8001168:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	4619      	mov	r1, r3
 8001170:	4818      	ldr	r0, [pc, #96]	; (80011d4 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001172:	f002 fd32 	bl	8003bda <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8001176:	2100      	movs	r1, #0
 8001178:	4816      	ldr	r0, [pc, #88]	; (80011d4 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800117a:	f7ff ff27 	bl	8000fcc <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 800117e:	2110      	movs	r1, #16
 8001180:	4813      	ldr	r0, [pc, #76]	; (80011d0 <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001182:	f7ff ff9f 	bl	80010c4 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 8001186:	2310      	movs	r3, #16
 8001188:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800118a:	2301      	movs	r3, #1
 800118c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	480c      	ldr	r0, [pc, #48]	; (80011d0 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80011a0:	f002 fb4a 	bl	8003838 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 80011a4:	2310      	movs	r3, #16
 80011a6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 80011b0:	463b      	mov	r3, r7
 80011b2:	4619      	mov	r1, r3
 80011b4:	4808      	ldr	r0, [pc, #32]	; (80011d8 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80011b6:	f002 fb3f 	bl	8003838 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 80011ba:	4806      	ldr	r0, [pc, #24]	; (80011d4 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80011bc:	f7ff fef6 	bl	8000fac <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 80011c0:	2110      	movs	r1, #16
 80011c2:	4803      	ldr	r0, [pc, #12]	; (80011d0 <ICM20602_GPIO_SPI_Initialization+0xec>)
 80011c4:	f7ff ff70 	bl	80010a8 <LL_GPIO_SetOutputPin>
}
 80011c8:	bf00      	nop
 80011ca:	3740      	adds	r7, #64	; 0x40
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40013000 	.word	0x40013000
 80011d8:	40020800 	.word	0x40020800

080011dc <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 80011e6:	bf00      	nop
 80011e8:	480c      	ldr	r0, [pc, #48]	; (800121c <SPI1_SendByte+0x40>)
 80011ea:	f7ff ff15 	bl	8001018 <LL_SPI_IsActiveFlag_TXE>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0f9      	beq.n	80011e8 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	4619      	mov	r1, r3
 80011f8:	4808      	ldr	r0, [pc, #32]	; (800121c <SPI1_SendByte+0x40>)
 80011fa:	f7ff ff2e 	bl	800105a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 80011fe:	bf00      	nop
 8001200:	4806      	ldr	r0, [pc, #24]	; (800121c <SPI1_SendByte+0x40>)
 8001202:	f7ff fef6 	bl	8000ff2 <LL_SPI_IsActiveFlag_RXNE>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f9      	beq.n	8001200 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 800120c:	4803      	ldr	r0, [pc, #12]	; (800121c <SPI1_SendByte+0x40>)
 800120e:	f7ff ff16 	bl	800103e <LL_SPI_ReceiveData8>
 8001212:	4603      	mov	r3, r0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40013000 	.word	0x40013000

08001220 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 800122a:	2110      	movs	r1, #16
 800122c:	480b      	ldr	r0, [pc, #44]	; (800125c <ICM20602_Readbyte+0x3c>)
 800122e:	f7ff ff49 	bl	80010c4 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ffce 	bl	80011dc <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff ffcb 	bl	80011dc <SPI1_SendByte>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800124a:	2110      	movs	r1, #16
 800124c:	4803      	ldr	r0, [pc, #12]	; (800125c <ICM20602_Readbyte+0x3c>)
 800124e:	f7ff ff2b 	bl	80010a8 <LL_GPIO_SetOutputPin>
	
	return val;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40020000 	.word	0x40020000

08001260 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	603a      	str	r2, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	460b      	mov	r3, r1
 800126e:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 8001274:	2110      	movs	r1, #16
 8001276:	4810      	ldr	r0, [pc, #64]	; (80012b8 <ICM20602_Readbytes+0x58>)
 8001278:	f7ff ff24 	bl	80010c4 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001282:	b2db      	uxtb	r3, r3
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ffa9 	bl	80011dc <SPI1_SendByte>
	while(i < len)
 800128a:	e009      	b.n	80012a0 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	60fa      	str	r2, [r7, #12]
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	18d4      	adds	r4, r2, r3
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff ffa0 	bl	80011dc <SPI1_SendByte>
 800129c:	4603      	mov	r3, r0
 800129e:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80012a0:	79bb      	ldrb	r3, [r7, #6]
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d3f1      	bcc.n	800128c <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 80012a8:	2110      	movs	r1, #16
 80012aa:	4803      	ldr	r0, [pc, #12]	; (80012b8 <ICM20602_Readbytes+0x58>)
 80012ac:	f7ff fefc 	bl	80010a8 <LL_GPIO_SetOutputPin>
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd90      	pop	{r4, r7, pc}
 80012b8:	40020000 	.word	0x40020000

080012bc <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	460a      	mov	r2, r1
 80012c6:	71fb      	strb	r3, [r7, #7]
 80012c8:	4613      	mov	r3, r2
 80012ca:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80012cc:	2110      	movs	r1, #16
 80012ce:	480b      	ldr	r0, [pc, #44]	; (80012fc <ICM20602_Writebyte+0x40>)
 80012d0:	f7ff fef8 	bl	80010c4 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff7d 	bl	80011dc <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 80012e2:	79bb      	ldrb	r3, [r7, #6]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff79 	bl	80011dc <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 80012ea:	2110      	movs	r1, #16
 80012ec:	4803      	ldr	r0, [pc, #12]	; (80012fc <ICM20602_Writebyte+0x40>)
 80012ee:	f7ff fedb 	bl	80010a8 <LL_GPIO_SetOutputPin>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40020000 	.word	0x40020000

08001300 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001314:	463b      	mov	r3, r7
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 800131c:	f7ff fee2 	bl	80010e4 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8001320:	4838      	ldr	r0, [pc, #224]	; (8001404 <ICM20602_Initialization+0x104>)
 8001322:	f003 ff59 	bl	80051d8 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8001326:	2075      	movs	r0, #117	; 0x75
 8001328:	f7ff ff7a 	bl	8001220 <ICM20602_Readbyte>
 800132c:	4603      	mov	r3, r0
 800132e:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	2b12      	cmp	r3, #18
 8001334:	d105      	bne.n	8001342 <ICM20602_Initialization+0x42>
	{
		printf("\r\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	4619      	mov	r1, r3
 800133a:	4833      	ldr	r0, [pc, #204]	; (8001408 <ICM20602_Initialization+0x108>)
 800133c:	f003 ff4c 	bl	80051d8 <iprintf>
 8001340:	e012      	b.n	8001368 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	2b12      	cmp	r3, #18
 8001346:	d00f      	beq.n	8001368 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8001348:	2075      	movs	r0, #117	; 0x75
 800134a:	f7ff ff69 	bl	8001220 <ICM20602_Readbyte>
 800134e:	4603      	mov	r3, r0
 8001350:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	2b12      	cmp	r3, #18
 8001356:	d007      	beq.n	8001368 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	2212      	movs	r2, #18
 800135c:	4619      	mov	r1, r3
 800135e:	482b      	ldr	r0, [pc, #172]	; (800140c <ICM20602_Initialization+0x10c>)
 8001360:	f003 ff3a 	bl	80051d8 <iprintf>
			return 1; //ERROR
 8001364:	2301      	movs	r3, #1
 8001366:	e048      	b.n	80013fa <ICM20602_Initialization+0xfa>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8001368:	2180      	movs	r1, #128	; 0x80
 800136a:	206b      	movs	r0, #107	; 0x6b
 800136c:	f7ff ffa6 	bl	80012bc <ICM20602_Writebyte>
	usDelay(50000);
 8001370:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001374:	f001 fa98 	bl	80028a8 <usDelay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8001378:	2101      	movs	r1, #1
 800137a:	206b      	movs	r0, #107	; 0x6b
 800137c:	f7ff ff9e 	bl	80012bc <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	usDelay(50000);
 8001380:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001384:	f001 fa90 	bl	80028a8 <usDelay>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 8001388:	2100      	movs	r1, #0
 800138a:	206c      	movs	r0, #108	; 0x6c
 800138c:	f7ff ff96 	bl	80012bc <ICM20602_Writebyte>
	usDelay(50000);
 8001390:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001394:	f001 fa88 	bl	80028a8 <usDelay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8001398:	2100      	movs	r1, #0
 800139a:	2019      	movs	r0, #25
 800139c:	f7ff ff8e 	bl	80012bc <ICM20602_Writebyte>
	usDelay(50000);
 80013a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013a4:	f001 fa80 	bl	80028a8 <usDelay>
	
	// Gyro DLPF Config
//	ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 80013a8:	2105      	movs	r1, #5
 80013aa:	201a      	movs	r0, #26
 80013ac:	f7ff ff86 	bl	80012bc <ICM20602_Writebyte>
	usDelay(50000);
 80013b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013b4:	f001 fa78 	bl	80028a8 <usDelay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 80013b8:	2118      	movs	r1, #24
 80013ba:	201b      	movs	r0, #27
 80013bc:	f7ff ff7e 	bl	80012bc <ICM20602_Writebyte>
	usDelay(50000);
 80013c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013c4:	f001 fa70 	bl	80028a8 <usDelay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80013c8:	2118      	movs	r1, #24
 80013ca:	201c      	movs	r0, #28
 80013cc:	f7ff ff76 	bl	80012bc <ICM20602_Writebyte>
	usDelay(50000);
 80013d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013d4:	f001 fa68 	bl	80028a8 <usDelay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80013d8:	2103      	movs	r1, #3
 80013da:	201d      	movs	r0, #29
 80013dc:	f7ff ff6e 	bl	80012bc <ICM20602_Writebyte>
	usDelay(50000);
 80013e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013e4:	f001 fa60 	bl	80028a8 <usDelay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 80013e8:	2101      	movs	r1, #1
 80013ea:	2038      	movs	r0, #56	; 0x38
 80013ec:	f7ff ff66 	bl	80012bc <ICM20602_Writebyte>
	usDelay(50000);
 80013f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013f4:	f001 fa58 	bl	80028a8 <usDelay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	08007a68 	.word	0x08007a68
 8001408:	08007a80 	.word	0x08007a80
 800140c:	08007aa4 	.word	0x08007aa4

08001410 <ICM20602_Get6AxisRawData>:

void ICM20602_Get6AxisRawData(short* accel, short* gyro)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
	unsigned char data[14];
	ICM20602_Readbytes(ACCEL_XOUT_H, 14, data);
 800141a:	f107 0308 	add.w	r3, r7, #8
 800141e:	461a      	mov	r2, r3
 8001420:	210e      	movs	r1, #14
 8001422:	203b      	movs	r0, #59	; 0x3b
 8001424:	f7ff ff1c 	bl	8001260 <ICM20602_Readbytes>
	
	accel[0] = (data[0] << 8) | data[1];
 8001428:	7a3b      	ldrb	r3, [r7, #8]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	b21a      	sxth	r2, r3
 800142e:	7a7b      	ldrb	r3, [r7, #9]
 8001430:	b21b      	sxth	r3, r3
 8001432:	4313      	orrs	r3, r2
 8001434:	b21a      	sxth	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	801a      	strh	r2, [r3, #0]
	accel[1] = (data[2] << 8) | data[3];
 800143a:	7abb      	ldrb	r3, [r7, #10]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	b219      	sxth	r1, r3
 8001440:	7afb      	ldrb	r3, [r7, #11]
 8001442:	b21a      	sxth	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3302      	adds	r3, #2
 8001448:	430a      	orrs	r2, r1
 800144a:	b212      	sxth	r2, r2
 800144c:	801a      	strh	r2, [r3, #0]
	accel[2] = (data[4] << 8) | data[5];
 800144e:	7b3b      	ldrb	r3, [r7, #12]
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	b219      	sxth	r1, r3
 8001454:	7b7b      	ldrb	r3, [r7, #13]
 8001456:	b21a      	sxth	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3304      	adds	r3, #4
 800145c:	430a      	orrs	r2, r1
 800145e:	b212      	sxth	r2, r2
 8001460:	801a      	strh	r2, [r3, #0]

	gyro[0] = ((data[8] << 8) | data[9]);
 8001462:	7c3b      	ldrb	r3, [r7, #16]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	b21a      	sxth	r2, r3
 8001468:	7c7b      	ldrb	r3, [r7, #17]
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21a      	sxth	r2, r3
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[10] << 8) | data[11]);
 8001474:	7cbb      	ldrb	r3, [r7, #18]
 8001476:	021b      	lsls	r3, r3, #8
 8001478:	b219      	sxth	r1, r3
 800147a:	7cfb      	ldrb	r3, [r7, #19]
 800147c:	b21a      	sxth	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	3302      	adds	r3, #2
 8001482:	430a      	orrs	r2, r1
 8001484:	b212      	sxth	r2, r2
 8001486:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[12] << 8) | data[13]);
 8001488:	7d3b      	ldrb	r3, [r7, #20]
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b219      	sxth	r1, r3
 800148e:	7d7b      	ldrb	r3, [r7, #21]
 8001490:	b21a      	sxth	r2, r3
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	3304      	adds	r3, #4
 8001496:	430a      	orrs	r2, r1
 8001498:	b212      	sxth	r2, r2
 800149a:	801a      	strh	r2, [r3, #0]
}
 800149c:	bf00      	nop
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 80014a8:	2110      	movs	r1, #16
 80014aa:	4803      	ldr	r0, [pc, #12]	; (80014b8 <ICM20602_DataReady+0x14>)
 80014ac:	f7ff fde7 	bl	800107e <LL_GPIO_IsInputPinSet>
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40020800 	.word	0x40020800

080014bc <Quaternion_Update>:
float twoKi = 0.0f;                      // 2 * integral gain (Ki)
float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f; // integral error terms scaled by Ki


void Quaternion_Update(float* q)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;

	q1 = q[0]; //x
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	617b      	str	r3, [r7, #20]
	q2 = q[1]; //y
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	613b      	str	r3, [r7, #16]
	q3 = q[2]; //z
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	60fb      	str	r3, [r7, #12]
	q4 = q[3]; //w
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	60bb      	str	r3, [r7, #8]


	Yaw 	= -atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 80014dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80014e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e8:	edd7 6a05 	vldr	s13, [r7, #20]
 80014ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80014f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80014fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001500:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001504:	edd7 7a04 	vldr	s15, [r7, #16]
 8001508:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800150c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001510:	edd7 7a03 	vldr	s15, [r7, #12]
 8001514:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001518:	ee37 7a67 	vsub.f32	s14, s14, s15
 800151c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001520:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001528:	eef0 0a67 	vmov.f32	s1, s15
 800152c:	eeb0 0a66 	vmov.f32	s0, s13
 8001530:	f005 ff6e 	bl	8007410 <atan2f>
 8001534:	eef0 7a40 	vmov.f32	s15, s0
 8001538:	eef1 7a67 	vneg.f32	s15, s15
 800153c:	4b45      	ldr	r3, [pc, #276]	; (8001654 <Quaternion_Update+0x198>)
 800153e:	edc3 7a00 	vstr	s15, [r3]
	Pitch  	= -asinf(2.0f * (q2*q4 - q1*q3));
 8001542:	ed97 7a04 	vldr	s14, [r7, #16]
 8001546:	edd7 7a02 	vldr	s15, [r7, #8]
 800154a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800154e:	edd7 6a05 	vldr	s13, [r7, #20]
 8001552:	edd7 7a03 	vldr	s15, [r7, #12]
 8001556:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800155a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800155e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001562:	eeb0 0a67 	vmov.f32	s0, s15
 8001566:	f005 ff27 	bl	80073b8 <asinf>
 800156a:	eef0 7a40 	vmov.f32	s15, s0
 800156e:	eef1 7a67 	vneg.f32	s15, s15
 8001572:	4b39      	ldr	r3, [pc, #228]	; (8001658 <Quaternion_Update+0x19c>)
 8001574:	edc3 7a00 	vstr	s15, [r3]
	Roll   	= atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 8001578:	ed97 7a05 	vldr	s14, [r7, #20]
 800157c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001584:	edd7 6a03 	vldr	s13, [r7, #12]
 8001588:	edd7 7a02 	vldr	s15, [r7, #8]
 800158c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001594:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001598:	edd7 7a05 	vldr	s15, [r7, #20]
 800159c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80015a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80015b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80015bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c4:	eef0 0a67 	vmov.f32	s1, s15
 80015c8:	eeb0 0a66 	vmov.f32	s0, s13
 80015cc:	f005 ff20 	bl	8007410 <atan2f>
 80015d0:	eef0 7a40 	vmov.f32	s15, s0
 80015d4:	4b21      	ldr	r3, [pc, #132]	; (800165c <Quaternion_Update+0x1a0>)
 80015d6:	edc3 7a00 	vstr	s15, [r3]

	Pitch *= RAD2DEG;
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <Quaternion_Update+0x19c>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001660 <Quaternion_Update+0x1a4>
 80015e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e8:	4b1b      	ldr	r3, [pc, #108]	; (8001658 <Quaternion_Update+0x19c>)
 80015ea:	edc3 7a00 	vstr	s15, [r3]
	Roll  *= RAD2DEG;
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <Quaternion_Update+0x1a0>)
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001660 <Quaternion_Update+0x1a4>
 80015f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <Quaternion_Update+0x1a0>)
 80015fe:	edc3 7a00 	vstr	s15, [r3]
	Yaw   *= RAD2DEG;
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <Quaternion_Update+0x198>)
 8001604:	edd3 7a00 	vldr	s15, [r3]
 8001608:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001660 <Quaternion_Update+0x1a4>
 800160c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001610:	4b10      	ldr	r3, [pc, #64]	; (8001654 <Quaternion_Update+0x198>)
 8001612:	edc3 7a00 	vstr	s15, [r3]
	
	if(Yaw>=0)
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <Quaternion_Update+0x198>)
 8001618:	edd3 7a00 	vldr	s15, [r3]
 800161c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	db0a      	blt.n	800163c <Quaternion_Update+0x180>
		Yaw = 360.f - Yaw;
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <Quaternion_Update+0x198>)
 8001628:	edd3 7a00 	vldr	s15, [r3]
 800162c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001664 <Quaternion_Update+0x1a8>
 8001630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <Quaternion_Update+0x198>)
 8001636:	edc3 7a00 	vstr	s15, [r3]
	else	
		Yaw = -Yaw;
	
}
 800163a:	e007      	b.n	800164c <Quaternion_Update+0x190>
		Yaw = -Yaw;
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <Quaternion_Update+0x198>)
 800163e:	edd3 7a00 	vldr	s15, [r3]
 8001642:	eef1 7a67 	vneg.f32	s15, s15
 8001646:	4b03      	ldr	r3, [pc, #12]	; (8001654 <Quaternion_Update+0x198>)
 8001648:	edc3 7a00 	vstr	s15, [r3]
}
 800164c:	bf00      	nop
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000224 	.word	0x20000224
 8001658:	20000220 	.word	0x20000220
 800165c:	2000021c 	.word	0x2000021c
 8001660:	42652ee1 	.word	0x42652ee1
 8001664:	43b40000 	.word	0x43b40000

08001668 <MahonyAHRSupdateIMU>:
    q[2] = q3 * norm;
    q[3] = q4 * norm;
}


void MahonyAHRSupdateIMU(float* gx, float* gy, float* gz, float* ax, float* ay, float* az) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b08e      	sub	sp, #56	; 0x38
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	603b      	str	r3, [r7, #0]
  float halfvx, halfvy, halfvz;
  float halfex, halfey, halfez;
  float qa, qb, qc;

  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if(!((ax[0] == 0.0f) && (ay[0] == 0.0f) && (az[0] == 0.0f))) {
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	edd3 7a00 	vldr	s15, [r3]
 800167c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001684:	d110      	bne.n	80016a8 <MahonyAHRSupdateIMU+0x40>
 8001686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001694:	d108      	bne.n	80016a8 <MahonyAHRSupdateIMU+0x40>
 8001696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a4:	f000 8179 	beq.w	800199a <MahonyAHRSupdateIMU+0x332>

    // Normalise accelerometer measurement
    norm = sqrt(ax[0] * ax[0] + ay[0] * ay[0] + az[0] * az[0]);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	ed93 7a00 	vldr	s14, [r3]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016ba:	edd3 6a00 	vldr	s13, [r3]
 80016be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016c0:	edd3 7a00 	vldr	s15, [r3]
 80016c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ce:	edd3 6a00 	vldr	s13, [r3]
 80016d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e0:	ee17 0a90 	vmov	r0, s15
 80016e4:	f7fe ff30 	bl	8000548 <__aeabi_f2d>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	ec43 2b10 	vmov	d0, r2, r3
 80016f0:	f005 fe36 	bl	8007360 <sqrt>
 80016f4:	ec53 2b10 	vmov	r2, r3, d0
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	f7ff fa54 	bl	8000ba8 <__aeabi_d2f>
 8001700:	4603      	mov	r3, r0
 8001702:	637b      	str	r3, [r7, #52]	; 0x34
    ax[0] /= norm;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	edd3 6a00 	vldr	s13, [r3]
 800170a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800170e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	edc3 7a00 	vstr	s15, [r3]
    ay[0] /= norm;
 8001718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800171a:	edd3 6a00 	vldr	s13, [r3]
 800171e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001728:	edc3 7a00 	vstr	s15, [r3]
    az[0] /= norm;
 800172c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800172e:	edd3 6a00 	vldr	s13, [r3]
 8001732:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800173a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800173c:	edc3 7a00 	vstr	s15, [r3]

    // Estimated direction of gravity and vector perpendicular to magnetic flux
    halfvx = q[1] * q[3] - q[0] * q[2];
 8001740:	4b73      	ldr	r3, [pc, #460]	; (8001910 <MahonyAHRSupdateIMU+0x2a8>)
 8001742:	ed93 7a01 	vldr	s14, [r3, #4]
 8001746:	4b72      	ldr	r3, [pc, #456]	; (8001910 <MahonyAHRSupdateIMU+0x2a8>)
 8001748:	edd3 7a03 	vldr	s15, [r3, #12]
 800174c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001750:	4b6f      	ldr	r3, [pc, #444]	; (8001910 <MahonyAHRSupdateIMU+0x2a8>)
 8001752:	edd3 6a00 	vldr	s13, [r3]
 8001756:	4b6e      	ldr	r3, [pc, #440]	; (8001910 <MahonyAHRSupdateIMU+0x2a8>)
 8001758:	edd3 7a02 	vldr	s15, [r3, #8]
 800175c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001760:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001764:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    halfvy = q[0] * q[1] + q[2] * q[3];
 8001768:	4b69      	ldr	r3, [pc, #420]	; (8001910 <MahonyAHRSupdateIMU+0x2a8>)
 800176a:	ed93 7a00 	vldr	s14, [r3]
 800176e:	4b68      	ldr	r3, [pc, #416]	; (8001910 <MahonyAHRSupdateIMU+0x2a8>)
 8001770:	edd3 7a01 	vldr	s15, [r3, #4]
 8001774:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001778:	4b65      	ldr	r3, [pc, #404]	; (8001910 <MahonyAHRSupdateIMU+0x2a8>)
 800177a:	edd3 6a02 	vldr	s13, [r3, #8]
 800177e:	4b64      	ldr	r3, [pc, #400]	; (8001910 <MahonyAHRSupdateIMU+0x2a8>)
 8001780:	edd3 7a03 	vldr	s15, [r3, #12]
 8001784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8001790:	4b5f      	ldr	r3, [pc, #380]	; (8001910 <MahonyAHRSupdateIMU+0x2a8>)
 8001792:	ed93 7a00 	vldr	s14, [r3]
 8001796:	4b5e      	ldr	r3, [pc, #376]	; (8001910 <MahonyAHRSupdateIMU+0x2a8>)
 8001798:	edd3 7a00 	vldr	s15, [r3]
 800179c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017a4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80017a8:	4b59      	ldr	r3, [pc, #356]	; (8001910 <MahonyAHRSupdateIMU+0x2a8>)
 80017aa:	edd3 6a03 	vldr	s13, [r3, #12]
 80017ae:	4b58      	ldr	r3, [pc, #352]	; (8001910 <MahonyAHRSupdateIMU+0x2a8>)
 80017b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80017b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017bc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

    // Error is sum of cross product between estimated and measured direction of gravity
    halfex = (ay[0] * halfvz - az[0] * halfvy);
 80017c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017c2:	ed93 7a00 	vldr	s14, [r3]
 80017c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017d0:	edd3 6a00 	vldr	s13, [r3]
 80017d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017e0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    halfey = (az[0] * halfvx - ax[0] * halfvz);
 80017e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017e6:	ed93 7a00 	vldr	s14, [r3]
 80017ea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80017ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	edd3 6a00 	vldr	s13, [r3]
 80017f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001800:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001804:	edc7 7a08 	vstr	s15, [r7, #32]
    halfez = (ax[0] * halfvy - ay[0] * halfvx);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	ed93 7a00 	vldr	s14, [r3]
 800180e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001812:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001818:	edd3 6a00 	vldr	s13, [r3]
 800181c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001824:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001828:	edc7 7a07 	vstr	s15, [r7, #28]

    // Compute and apply integral feedback if enabled
    if(twoKi > 0.0f) {
 800182c:	4b39      	ldr	r3, [pc, #228]	; (8001914 <MahonyAHRSupdateIMU+0x2ac>)
 800182e:	edd3 7a00 	vldr	s15, [r3]
 8001832:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183a:	dd75      	ble.n	8001928 <MahonyAHRSupdateIMU+0x2c0>
      integralFBx += twoKi * halfex * (1.0f / sampleFreq);  // integral error scaled by Ki
 800183c:	4b35      	ldr	r3, [pc, #212]	; (8001914 <MahonyAHRSupdateIMU+0x2ac>)
 800183e:	ed93 7a00 	vldr	s14, [r3]
 8001842:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001846:	ee27 7a27 	vmul.f32	s14, s14, s15
 800184a:	4b33      	ldr	r3, [pc, #204]	; (8001918 <MahonyAHRSupdateIMU+0x2b0>)
 800184c:	edd3 6a00 	vldr	s13, [r3]
 8001850:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001854:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800185c:	4b2f      	ldr	r3, [pc, #188]	; (800191c <MahonyAHRSupdateIMU+0x2b4>)
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001866:	4b2d      	ldr	r3, [pc, #180]	; (800191c <MahonyAHRSupdateIMU+0x2b4>)
 8001868:	edc3 7a00 	vstr	s15, [r3]
      integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 800186c:	4b29      	ldr	r3, [pc, #164]	; (8001914 <MahonyAHRSupdateIMU+0x2ac>)
 800186e:	ed93 7a00 	vldr	s14, [r3]
 8001872:	edd7 7a08 	vldr	s15, [r7, #32]
 8001876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800187a:	4b27      	ldr	r3, [pc, #156]	; (8001918 <MahonyAHRSupdateIMU+0x2b0>)
 800187c:	edd3 6a00 	vldr	s13, [r3]
 8001880:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001884:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001888:	ee27 7a27 	vmul.f32	s14, s14, s15
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <MahonyAHRSupdateIMU+0x2b8>)
 800188e:	edd3 7a00 	vldr	s15, [r3]
 8001892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <MahonyAHRSupdateIMU+0x2b8>)
 8001898:	edc3 7a00 	vstr	s15, [r3]
      integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 800189c:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <MahonyAHRSupdateIMU+0x2ac>)
 800189e:	ed93 7a00 	vldr	s14, [r3]
 80018a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80018a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018aa:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <MahonyAHRSupdateIMU+0x2b0>)
 80018ac:	edd3 6a00 	vldr	s13, [r3]
 80018b0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80018b4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80018b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <MahonyAHRSupdateIMU+0x2bc>)
 80018be:	edd3 7a00 	vldr	s15, [r3]
 80018c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c6:	4b17      	ldr	r3, [pc, #92]	; (8001924 <MahonyAHRSupdateIMU+0x2bc>)
 80018c8:	edc3 7a00 	vstr	s15, [r3]
      gx[0] += integralFBx;  // apply integral feedback
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	ed93 7a00 	vldr	s14, [r3]
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <MahonyAHRSupdateIMU+0x2b4>)
 80018d4:	edd3 7a00 	vldr	s15, [r3]
 80018d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	edc3 7a00 	vstr	s15, [r3]
      gy[0] += integralFBy;
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	ed93 7a00 	vldr	s14, [r3]
 80018e8:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <MahonyAHRSupdateIMU+0x2b8>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	edc3 7a00 	vstr	s15, [r3]
      gz[0] += integralFBz;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	ed93 7a00 	vldr	s14, [r3]
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <MahonyAHRSupdateIMU+0x2bc>)
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	edc3 7a00 	vstr	s15, [r3]
 800190e:	e017      	b.n	8001940 <MahonyAHRSupdateIMU+0x2d8>
 8001910:	20000228 	.word	0x20000228
 8001914:	2000023c 	.word	0x2000023c
 8001918:	20000238 	.word	0x20000238
 800191c:	20000240 	.word	0x20000240
 8001920:	20000244 	.word	0x20000244
 8001924:	20000248 	.word	0x20000248
    }
    else {
      integralFBx = 0.0f; // prevent integral windup
 8001928:	4bb3      	ldr	r3, [pc, #716]	; (8001bf8 <MahonyAHRSupdateIMU+0x590>)
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
      integralFBy = 0.0f;
 8001930:	4bb2      	ldr	r3, [pc, #712]	; (8001bfc <MahonyAHRSupdateIMU+0x594>)
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
      integralFBz = 0.0f;
 8001938:	4bb1      	ldr	r3, [pc, #708]	; (8001c00 <MahonyAHRSupdateIMU+0x598>)
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
    }

    // Apply proportional feedback
    gx[0] += twoKp * halfex;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	ed93 7a00 	vldr	s14, [r3]
 8001946:	4baf      	ldr	r3, [pc, #700]	; (8001c04 <MahonyAHRSupdateIMU+0x59c>)
 8001948:	edd3 6a00 	vldr	s13, [r3]
 800194c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	edc3 7a00 	vstr	s15, [r3]
    gy[0] += twoKp * halfey;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	ed93 7a00 	vldr	s14, [r3]
 8001964:	4ba7      	ldr	r3, [pc, #668]	; (8001c04 <MahonyAHRSupdateIMU+0x59c>)
 8001966:	edd3 6a00 	vldr	s13, [r3]
 800196a:	edd7 7a08 	vldr	s15, [r7, #32]
 800196e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	edc3 7a00 	vstr	s15, [r3]
    gz[0] += twoKp * halfez;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	ed93 7a00 	vldr	s14, [r3]
 8001982:	4ba0      	ldr	r3, [pc, #640]	; (8001c04 <MahonyAHRSupdateIMU+0x59c>)
 8001984:	edd3 6a00 	vldr	s13, [r3]
 8001988:	edd7 7a07 	vldr	s15, [r7, #28]
 800198c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	edc3 7a00 	vstr	s15, [r3]
  }

  // Integrate rate of change of quaternion
  gx[0] *= (0.5f * (1.0f / sampleFreq));   // pre-multiply common factors
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	ed93 7a00 	vldr	s14, [r3]
 80019a0:	4b99      	ldr	r3, [pc, #612]	; (8001c08 <MahonyAHRSupdateIMU+0x5a0>)
 80019a2:	edd3 6a00 	vldr	s13, [r3]
 80019a6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80019aa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80019ae:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80019b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	edc3 7a00 	vstr	s15, [r3]
  gy[0] *= (0.5f * (1.0f / sampleFreq));
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	ed93 7a00 	vldr	s14, [r3]
 80019c6:	4b90      	ldr	r3, [pc, #576]	; (8001c08 <MahonyAHRSupdateIMU+0x5a0>)
 80019c8:	edd3 6a00 	vldr	s13, [r3]
 80019cc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80019d0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80019d4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80019d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	edc3 7a00 	vstr	s15, [r3]
  gz[0] *= (0.5f * (1.0f / sampleFreq));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	ed93 7a00 	vldr	s14, [r3]
 80019ec:	4b86      	ldr	r3, [pc, #536]	; (8001c08 <MahonyAHRSupdateIMU+0x5a0>)
 80019ee:	edd3 6a00 	vldr	s13, [r3]
 80019f2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80019f6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80019fa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80019fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	edc3 7a00 	vstr	s15, [r3]
  qa = q[0];
 8001a0c:	4b7f      	ldr	r3, [pc, #508]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	61bb      	str	r3, [r7, #24]
  qb = q[1];
 8001a12:	4b7e      	ldr	r3, [pc, #504]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	617b      	str	r3, [r7, #20]
  qc = q[2];
 8001a18:	4b7c      	ldr	r3, [pc, #496]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	613b      	str	r3, [r7, #16]
  q[0] += (-qb * gx[0] - qc * gy[0] - q[3] * gz[0]);
 8001a1e:	4b7b      	ldr	r3, [pc, #492]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001a20:	ed93 7a00 	vldr	s14, [r3]
 8001a24:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a28:	eef1 6a67 	vneg.f32	s13, s15
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	ed93 6a00 	vldr	s12, [r3]
 8001a3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a40:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a44:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a48:	4b70      	ldr	r3, [pc, #448]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001a4a:	ed93 6a03 	vldr	s12, [r3, #12]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a58:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a60:	4b6a      	ldr	r3, [pc, #424]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001a62:	edc3 7a00 	vstr	s15, [r3]
  q[1] += (qa * gx[0] + qc * gz[0] - q[3] * gy[0]);
 8001a66:	4b69      	ldr	r3, [pc, #420]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001a68:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	edd3 6a00 	vldr	s13, [r3]
 8001a72:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a76:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	ed93 6a00 	vldr	s12, [r3]
 8001a80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a84:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a88:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a8c:	4b5f      	ldr	r3, [pc, #380]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001a8e:	ed93 6a03 	vldr	s12, [r3, #12]
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	edd3 7a00 	vldr	s15, [r3]
 8001a98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a9c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa4:	4b59      	ldr	r3, [pc, #356]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001aa6:	edc3 7a01 	vstr	s15, [r3, #4]
  q[2] += (qa * gy[0] - qb * gz[0] + q[3] * gx[0]);
 8001aaa:	4b58      	ldr	r3, [pc, #352]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001aac:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	edd3 6a00 	vldr	s13, [r3]
 8001ab6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001aba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	ed93 6a00 	vldr	s12, [r3]
 8001ac4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ac8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001acc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ad0:	4b4e      	ldr	r3, [pc, #312]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001ad2:	ed93 6a03 	vldr	s12, [r3, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ae0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ae4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae8:	4b48      	ldr	r3, [pc, #288]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001aea:	edc3 7a02 	vstr	s15, [r3, #8]
  q[3] += (qa * gz[0] + qb * gy[0] - qc * gx[0]);
 8001aee:	4b47      	ldr	r3, [pc, #284]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001af0:	ed93 7a03 	vldr	s14, [r3, #12]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	edd3 6a00 	vldr	s13, [r3]
 8001afa:	edd7 7a06 	vldr	s15, [r7, #24]
 8001afe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	ed93 6a00 	vldr	s12, [r3]
 8001b08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b0c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b10:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	ed93 6a00 	vldr	s12, [r3]
 8001b1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b1e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b22:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2a:	4b38      	ldr	r3, [pc, #224]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001b2c:	edc3 7a03 	vstr	s15, [r3, #12]

  // Normalise quaternion
  norm = sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8001b30:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001b32:	ed93 7a00 	vldr	s14, [r3]
 8001b36:	4b35      	ldr	r3, [pc, #212]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b40:	4b32      	ldr	r3, [pc, #200]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001b42:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b46:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001b48:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001b56:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b5a:	4b2c      	ldr	r3, [pc, #176]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001b5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b68:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001b6a:	edd3 6a03 	vldr	s13, [r3, #12]
 8001b6e:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001b70:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7c:	ee17 0a90 	vmov	r0, s15
 8001b80:	f7fe fce2 	bl	8000548 <__aeabi_f2d>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	ec43 2b10 	vmov	d0, r2, r3
 8001b8c:	f005 fbe8 	bl	8007360 <sqrt>
 8001b90:	ec53 2b10 	vmov	r2, r3, d0
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff f806 	bl	8000ba8 <__aeabi_d2f>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	637b      	str	r3, [r7, #52]	; 0x34
  q[0] /= norm;
 8001ba0:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001ba2:	edd3 6a00 	vldr	s13, [r3]
 8001ba6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001baa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001bb0:	edc3 7a00 	vstr	s15, [r3]
  q[1] /= norm;
 8001bb4:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001bb6:	edd3 6a01 	vldr	s13, [r3, #4]
 8001bba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001bc4:	edc3 7a01 	vstr	s15, [r3, #4]
  q[2] /= norm;
 8001bc8:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001bca:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001bd8:	edc3 7a02 	vstr	s15, [r3, #8]
  q[3] /= norm;
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001bde:	edd3 6a03 	vldr	s13, [r3, #12]
 8001be2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <MahonyAHRSupdateIMU+0x5a4>)
 8001bec:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001bf0:	bf00      	nop
 8001bf2:	3738      	adds	r7, #56	; 0x38
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000240 	.word	0x20000240
 8001bfc:	20000244 	.word	0x20000244
 8001c00:	20000248 	.word	0x20000248
 8001c04:	20000000 	.word	0x20000000
 8001c08:	20000238 	.word	0x20000238
 8001c0c:	20000228 	.word	0x20000228

08001c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <__NVIC_GetPriorityGrouping+0x18>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	f003 0307 	and.w	r3, r3, #7
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db0b      	blt.n	8001c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f003 021f 	and.w	r2, r3, #31
 8001c44:	4907      	ldr	r1, [pc, #28]	; (8001c64 <__NVIC_EnableIRQ+0x38>)
 8001c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000e100 	.word	0xe000e100

08001c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db0a      	blt.n	8001c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	490c      	ldr	r1, [pc, #48]	; (8001cb4 <__NVIC_SetPriority+0x4c>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c90:	e00a      	b.n	8001ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4908      	ldr	r1, [pc, #32]	; (8001cb8 <__NVIC_SetPriority+0x50>)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	0112      	lsls	r2, r2, #4
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	761a      	strb	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000e100 	.word	0xe000e100
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f1c3 0307 	rsb	r3, r3, #7
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	bf28      	it	cs
 8001cda:	2304      	movcs	r3, #4
 8001cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d902      	bls.n	8001cec <NVIC_EncodePriority+0x30>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3b03      	subs	r3, #3
 8001cea:	e000      	b.n	8001cee <NVIC_EncodePriority+0x32>
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	4313      	orrs	r3, r2
         );
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	; 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <LL_AHB1_GRP1_EnableClock>:
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d30:	4907      	ldr	r1, [pc, #28]	; (8001d50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	40023800 	.word	0x40023800

08001d54 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001d5e:	4a13      	ldr	r2, [pc, #76]	; (8001dac <LL_SYSCFG_SetEXTISource+0x58>)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	3302      	adds	r3, #2
 8001d66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	0c1b      	lsrs	r3, r3, #16
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	ea02 0103 	and.w	r1, r2, r3
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	0c1b      	lsrs	r3, r3, #16
 8001d78:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	fab3 f383 	clz	r3, r3
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	fa03 f202 	lsl.w	r2, r3, r2
 8001d92:	4806      	ldr	r0, [pc, #24]	; (8001dac <LL_SYSCFG_SetEXTISource+0x58>)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	40013800 	.word	0x40013800

08001db0 <LL_GPIO_SetPinMode>:
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	613b      	str	r3, [r7, #16]
  return result;
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	2103      	movs	r1, #3
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	401a      	ands	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	fa93 f3a3 	rbit	r3, r3
 8001dea:	61bb      	str	r3, [r7, #24]
  return result;
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	601a      	str	r2, [r3, #0]
}
 8001e02:	bf00      	nop
 8001e04:	3724      	adds	r7, #36	; 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <LL_GPIO_SetPinPull>:
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b089      	sub	sp, #36	; 0x24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	613b      	str	r3, [r7, #16]
  return result;
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	2103      	movs	r1, #3
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	61bb      	str	r3, [r7, #24]
  return result;
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	fab3 f383 	clz	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	6879      	ldr	r1, [r7, #4]
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	60da      	str	r2, [r3, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3724      	adds	r7, #36	; 0x24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_GPIO_ResetOutputPin>:
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	041a      	lsls	r2, r3, #16
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	619a      	str	r2, [r3, #24]
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001e92:	f107 0318 	add.w	r3, r7, #24
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	611a      	str	r2, [r3, #16]
 8001eaa:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001eac:	2080      	movs	r0, #128	; 0x80
 8001eae:	f7ff ff39 	bl	8001d24 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	f7ff ff36 	bl	8001d24 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001eb8:	2004      	movs	r0, #4
 8001eba:	f7ff ff33 	bl	8001d24 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001ebe:	2002      	movs	r0, #2
 8001ec0:	f7ff ff30 	bl	8001d24 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8001ec4:	2110      	movs	r1, #16
 8001ec6:	482a      	ldr	r0, [pc, #168]	; (8001f70 <MX_GPIO_Init+0xe4>)
 8001ec8:	f7ff ffd0 	bl	8001e6c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001ecc:	2120      	movs	r1, #32
 8001ece:	4829      	ldr	r0, [pc, #164]	; (8001f74 <MX_GPIO_Init+0xe8>)
 8001ed0:	f7ff ffcc 	bl	8001e6c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001ed4:	2310      	movs	r3, #16
 8001ed6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee8:	463b      	mov	r3, r7
 8001eea:	4619      	mov	r1, r3
 8001eec:	4820      	ldr	r0, [pc, #128]	; (8001f70 <MX_GPIO_Init+0xe4>)
 8001eee:	f001 fca3 	bl	8003838 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f06:	463b      	mov	r3, r7
 8001f08:	4619      	mov	r1, r3
 8001f0a:	481a      	ldr	r0, [pc, #104]	; (8001f74 <MX_GPIO_Init+0xe8>)
 8001f0c:	f001 fc94 	bl	8003838 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE4);
 8001f10:	4919      	ldr	r1, [pc, #100]	; (8001f78 <MX_GPIO_Init+0xec>)
 8001f12:	2002      	movs	r0, #2
 8001f14:	f7ff ff1e 	bl	8001d54 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8001f18:	2310      	movs	r3, #16
 8001f1a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001f20:	2300      	movs	r3, #0
 8001f22:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001f24:	2301      	movs	r3, #1
 8001f26:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001f28:	f107 0318 	add.w	r3, r7, #24
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f001 fafd 	bl	800352c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2110      	movs	r1, #16
 8001f36:	4811      	ldr	r0, [pc, #68]	; (8001f7c <MX_GPIO_Init+0xf0>)
 8001f38:	f7ff ff69 	bl	8001e0e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_4, LL_GPIO_MODE_INPUT);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2110      	movs	r1, #16
 8001f40:	480e      	ldr	r0, [pc, #56]	; (8001f7c <MX_GPIO_Init+0xf0>)
 8001f42:	f7ff ff35 	bl	8001db0 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001f46:	f7ff fe63 	bl	8001c10 <__NVIC_GetPriorityGrouping>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff feb3 	bl	8001cbc <NVIC_EncodePriority>
 8001f56:	4603      	mov	r3, r0
 8001f58:	4619      	mov	r1, r3
 8001f5a:	200a      	movs	r0, #10
 8001f5c:	f7ff fe84 	bl	8001c68 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 8001f60:	200a      	movs	r0, #10
 8001f62:	f7ff fe63 	bl	8001c2c <__NVIC_EnableIRQ>

}
 8001f66:	bf00      	nop
 8001f68:	3720      	adds	r7, #32
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40020000 	.word	0x40020000
 8001f74:	40020400 	.word	0x40020400
 8001f78:	000f0001 	.word	0x000f0001
 8001f7c:	40020800 	.word	0x40020800

08001f80 <__NVIC_SetPriorityGrouping>:
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb2:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	60d3      	str	r3, [r2, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_GetPriorityGrouping>:
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	f003 0307 	and.w	r3, r3, #7
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_SetPriority>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db0a      	blt.n	800200e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	490c      	ldr	r1, [pc, #48]	; (8002030 <__NVIC_SetPriority+0x4c>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	440b      	add	r3, r1
 8002008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800200c:	e00a      	b.n	8002024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4908      	ldr	r1, [pc, #32]	; (8002034 <__NVIC_SetPriority+0x50>)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3b04      	subs	r3, #4
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	440b      	add	r3, r1
 8002022:	761a      	strb	r2, [r3, #24]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000e100 	.word	0xe000e100
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <NVIC_EncodePriority>:
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f1c3 0307 	rsb	r3, r3, #7
 8002052:	2b04      	cmp	r3, #4
 8002054:	bf28      	it	cs
 8002056:	2304      	movcs	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3304      	adds	r3, #4
 800205e:	2b06      	cmp	r3, #6
 8002060:	d902      	bls.n	8002068 <NVIC_EncodePriority+0x30>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b03      	subs	r3, #3
 8002066:	e000      	b.n	800206a <NVIC_EncodePriority+0x32>
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002080:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43d9      	mvns	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	4313      	orrs	r3, r2
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	; 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <LL_RCC_HSE_Enable+0x1c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a04      	ldr	r2, [pc, #16]	; (80020bc <LL_RCC_HSE_Enable+0x1c>)
 80020aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800

080020c0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <LL_RCC_HSE_IsReady+0x24>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020d0:	bf0c      	ite	eq
 80020d2:	2301      	moveq	r3, #1
 80020d4:	2300      	movne	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800

080020e8 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <LL_RCC_SetSysClkSource+0x24>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f023 0203 	bic.w	r2, r3, #3
 80020f8:	4904      	ldr	r1, [pc, #16]	; (800210c <LL_RCC_SetSysClkSource+0x24>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	608b      	str	r3, [r1, #8]
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	40023800 	.word	0x40023800

08002110 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <LL_RCC_GetSysClkSource+0x18>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 030c 	and.w	r3, r3, #12
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800

0800212c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <LL_RCC_SetAHBPrescaler+0x24>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800213c:	4904      	ldr	r1, [pc, #16]	; (8002150 <LL_RCC_SetAHBPrescaler+0x24>)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4313      	orrs	r3, r2
 8002142:	608b      	str	r3, [r1, #8]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40023800 	.word	0x40023800

08002154 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <LL_RCC_SetAPB1Prescaler+0x24>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002164:	4904      	ldr	r1, [pc, #16]	; (8002178 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4313      	orrs	r3, r2
 800216a:	608b      	str	r3, [r1, #8]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40023800 	.word	0x40023800

0800217c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800218c:	4904      	ldr	r1, [pc, #16]	; (80021a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4313      	orrs	r3, r2
 8002192:	608b      	str	r3, [r1, #8]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	40023800 	.word	0x40023800

080021a4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <LL_RCC_PLL_Enable+0x1c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <LL_RCC_PLL_Enable+0x1c>)
 80021ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b2:	6013      	str	r3, [r2, #0]
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800

080021c4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80021c8:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <LL_RCC_PLL_IsReady+0x24>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021d4:	bf0c      	ite	eq
 80021d6:	2301      	moveq	r3, #1
 80021d8:	2300      	movne	r3, #0
 80021da:	b2db      	uxtb	r3, r3
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800

080021ec <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80021fa:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8002200:	4013      	ands	r3, r2
 8002202:	68f9      	ldr	r1, [r7, #12]
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	4311      	orrs	r1, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	0192      	lsls	r2, r2, #6
 800220c:	430a      	orrs	r2, r1
 800220e:	4908      	ldr	r1, [pc, #32]	; (8002230 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800221c:	4904      	ldr	r1, [pc, #16]	; (8002230 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	4313      	orrs	r3, r2
 8002222:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40023800 	.word	0x40023800
 8002234:	ffbf8000 	.word	0xffbf8000

08002238 <LL_APB1_GRP1_EnableClock>:
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002244:	4907      	ldr	r1, [pc, #28]	; (8002264 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4313      	orrs	r3, r2
 800224a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800224c:	4b05      	ldr	r3, [pc, #20]	; (8002264 <LL_APB1_GRP1_EnableClock+0x2c>)
 800224e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4013      	ands	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002256:	68fb      	ldr	r3, [r7, #12]
}
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	40023800 	.word	0x40023800

08002268 <LL_APB2_GRP1_EnableClock>:
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002272:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002274:	4907      	ldr	r1, [pc, #28]	; (8002294 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4313      	orrs	r3, r2
 800227a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <LL_APB2_GRP1_EnableClock+0x2c>)
 800227e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4013      	ands	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002286:	68fb      	ldr	r3, [r7, #12]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	40023800 	.word	0x40023800

08002298 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <LL_FLASH_SetLatency+0x24>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f023 0207 	bic.w	r2, r3, #7
 80022a8:	4904      	ldr	r1, [pc, #16]	; (80022bc <LL_FLASH_SetLatency+0x24>)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	40023c00 	.word	0x40023c00

080022c0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <LL_FLASH_GetLatency+0x18>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0307 	and.w	r3, r3, #7
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40023c00 	.word	0x40023c00

080022dc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	4a07      	ldr	r2, [pc, #28]	; (800230c <LL_InitTick+0x30>)
 80022f0:	3b01      	subs	r3, #1
 80022f2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <LL_InitTick+0x30>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fa:	4b04      	ldr	r3, [pc, #16]	; (800230c <LL_InitTick+0x30>)
 80022fc:	2205      	movs	r2, #5
 80022fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000e010 	.word	0xe000e010

08002310 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002320:	4904      	ldr	r1, [pc, #16]	; (8002334 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4313      	orrs	r3, r2
 8002326:	600b      	str	r3, [r1, #0]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	40007000 	.word	0x40007000

08002338 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f043 0201 	orr.w	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	601a      	str	r2, [r3, #0]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1a      	ldr	r2, [r3, #32]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	621a      	str	r2, [r3, #32]
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1a      	ldr	r2, [r3, #32]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	43db      	mvns	r3, r3
 800238c:	401a      	ands	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	621a      	str	r2, [r3, #32]
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 800239e:	b480      	push	{r7}
 80023a0:	b089      	sub	sp, #36	; 0x24
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	330c      	adds	r3, #12
 80023aa:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	e853 3f00 	ldrex	r3, [r3]
 80023b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f043 0320 	orr.w	r3, r3, #32
 80023ba:	61fb      	str	r3, [r7, #28]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	330c      	adds	r3, #12
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	61ba      	str	r2, [r7, #24]
 80023c4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c6:	6979      	ldr	r1, [r7, #20]
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	e841 2300 	strex	r3, r2, [r1]
 80023ce:	613b      	str	r3, [r7, #16]
   return(result);
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1e7      	bne.n	80023a6 <LL_USART_EnableIT_RXNE+0x8>
}
 80023d6:	bf00      	nop
 80023d8:	bf00      	nop
 80023da:	3724      	adds	r7, #36	; 0x24
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	605a      	str	r2, [r3, #4]
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002402:	b480      	push	{r7}
 8002404:	b085      	sub	sp, #20
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	4013      	ands	r3, r2
 8002418:	041a      	lsls	r2, r3, #16
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	43d9      	mvns	r1, r3
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	400b      	ands	r3, r1
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	619a      	str	r2, [r3, #24]
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	e00d      	b.n	8002462 <_write+0x2e>
	{
		LL_USART_TransmitData8(USART6, *(p+i));
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	4413      	add	r3, r2
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	4619      	mov	r1, r3
 8002450:	4808      	ldr	r0, [pc, #32]	; (8002474 <_write+0x40>)
 8002452:	f7ff ffc7 	bl	80023e4 <LL_USART_TransmitData8>
		usDelay(100);	// 문자 1개 출력당 약 100us 소요, Float, int형 차이 없음
 8002456:	2064      	movs	r0, #100	; 0x64
 8002458:	f000 fa26 	bl	80028a8 <usDelay>
	for(int i=0;i<len;i++)
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3301      	adds	r3, #1
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	429a      	cmp	r2, r3
 8002468:	dbed      	blt.n	8002446 <_write+0x12>
	}
	return len;
 800246a:	687b      	ldr	r3, [r7, #4]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40011400 	.word	0x40011400

08002478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800247e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002482:	f7ff fef1 	bl	8002268 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002486:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800248a:	f7ff fed5 	bl	8002238 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800248e:	2003      	movs	r0, #3
 8002490:	f7ff fd76 	bl	8001f80 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002494:	f7ff fd98 	bl	8001fc8 <__NVIC_GetPriorityGrouping>
 8002498:	4603      	mov	r3, r0
 800249a:	2200      	movs	r2, #0
 800249c:	210f      	movs	r1, #15
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fdca 	bl	8002038 <NVIC_EncodePriority>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4619      	mov	r1, r3
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024ac:	f7ff fd9a 	bl	8001fe4 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024b0:	f000 f9b6 	bl	8002820 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LL_InitTick(168000000, 1000000U);		//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음
 80024b4:	49b8      	ldr	r1, [pc, #736]	; (8002798 <main+0x320>)
 80024b6:	48b9      	ldr	r0, [pc, #740]	; (800279c <main+0x324>)
 80024b8:	f7ff ff10 	bl	80022dc <LL_InitTick>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024bc:	f7ff fce6 	bl	8001e8c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80024c0:	f000 ff12 	bl	80032e8 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 80024c4:	f000 fae6 	bl	8002a94 <MX_SPI1_Init>
  MX_TIM3_Init();
 80024c8:	f000 fdbe 	bl	8003048 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  LL_TIM_EnableCounter(TIM3);
 80024cc:	48b4      	ldr	r0, [pc, #720]	; (80027a0 <main+0x328>)
 80024ce:	f7ff ff33 	bl	8002338 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 80024d2:	2101      	movs	r1, #1
 80024d4:	48b2      	ldr	r0, [pc, #712]	; (80027a0 <main+0x328>)
 80024d6:	f7ff ff3f 	bl	8002358 <LL_TIM_CC_EnableChannel>

  TIM3->PSC = 2000;
 80024da:	4bb1      	ldr	r3, [pc, #708]	; (80027a0 <main+0x328>)
 80024dc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80024e0:	629a      	str	r2, [r3, #40]	; 0x28
  usDelay(100000);
 80024e2:	48b0      	ldr	r0, [pc, #704]	; (80027a4 <main+0x32c>)
 80024e4:	f000 f9e0 	bl	80028a8 <usDelay>
  TIM3->PSC = 1500;
 80024e8:	4bad      	ldr	r3, [pc, #692]	; (80027a0 <main+0x328>)
 80024ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80024ee:	629a      	str	r2, [r3, #40]	; 0x28
  usDelay(100000);
 80024f0:	48ac      	ldr	r0, [pc, #688]	; (80027a4 <main+0x32c>)
 80024f2:	f000 f9d9 	bl	80028a8 <usDelay>
  TIM3->PSC = 1000;
 80024f6:	4baa      	ldr	r3, [pc, #680]	; (80027a0 <main+0x328>)
 80024f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024fc:	629a      	str	r2, [r3, #40]	; 0x28
  usDelay(100000);
 80024fe:	48a9      	ldr	r0, [pc, #676]	; (80027a4 <main+0x32c>)
 8002500:	f000 f9d2 	bl	80028a8 <usDelay>

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 8002504:	2101      	movs	r1, #1
 8002506:	48a6      	ldr	r0, [pc, #664]	; (80027a0 <main+0x328>)
 8002508:	f7ff ff37 	bl	800237a <LL_TIM_CC_DisableChannel>

  LL_USART_EnableIT_RXNE(USART6);	// UART6 인터럽트 활성화
 800250c:	48a6      	ldr	r0, [pc, #664]	; (80027a8 <main+0x330>)
 800250e:	f7ff ff46 	bl	800239e <LL_USART_EnableIT_RXNE>
  ICM20602_Initialization();
 8002512:	f7fe fef5 	bl	8001300 <ICM20602_Initialization>

  q[0] = 1.0f;
 8002516:	4ba5      	ldr	r3, [pc, #660]	; (80027ac <main+0x334>)
 8002518:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800251c:	601a      	str	r2, [r3, #0]
  q[1] = 0.0f;
 800251e:	4ba3      	ldr	r3, [pc, #652]	; (80027ac <main+0x334>)
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	605a      	str	r2, [r3, #4]
  q[2] = 0.0f;
 8002526:	4ba1      	ldr	r3, [pc, #644]	; (80027ac <main+0x334>)
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  q[3] = 0.0f;
 800252e:	4b9f      	ldr	r3, [pc, #636]	; (80027ac <main+0x334>)
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	60da      	str	r2, [r3, #12]

  // 시간측정을 위한 레지스터 초기화 값
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002536:	4b9e      	ldr	r3, [pc, #632]	; (80027b0 <main+0x338>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	4a9d      	ldr	r2, [pc, #628]	; (80027b0 <main+0x338>)
 800253c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002540:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 8002542:	4b9c      	ldr	r3, [pc, #624]	; (80027b4 <main+0x33c>)
 8002544:	2200      	movs	r2, #0
 8002546:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002548:	4b9a      	ldr	r3, [pc, #616]	; (80027b4 <main+0x33c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a99      	ldr	r2, [pc, #612]	; (80027b4 <main+0x33c>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6013      	str	r3, [r2, #0]
  {
  //	  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
  //	  usDelay(1000000);
  //	  LL_USART_TransmitData8(USART6,'B');

	  if(flag_INT_USART6 == 1){
 8002554:	4b98      	ldr	r3, [pc, #608]	; (80027b8 <main+0x340>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d10c      	bne.n	8002576 <main+0xfe>
		  flag_INT_USART6 =0;
 800255c:	4b96      	ldr	r3, [pc, #600]	; (80027b8 <main+0x340>)
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
		  LL_USART_TransmitData8(USART6,rxd); // 호스트로부터 수신한 데이터를 그대로 다시 보냄
 8002562:	4b96      	ldr	r3, [pc, #600]	; (80027bc <main+0x344>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	4619      	mov	r1, r3
 8002568:	488f      	ldr	r0, [pc, #572]	; (80027a8 <main+0x330>)
 800256a:	f7ff ff3b 	bl	80023e4 <LL_USART_TransmitData8>
		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 800256e:	2120      	movs	r1, #32
 8002570:	4893      	ldr	r0, [pc, #588]	; (80027c0 <main+0x348>)
 8002572:	f7ff ff46 	bl	8002402 <LL_GPIO_TogglePin>

	  }

	  if(ICM20602_DataReady() == 1)
 8002576:	f7fe ff95 	bl	80014a4 <ICM20602_DataReady>
 800257a:	4603      	mov	r3, r0
 800257c:	2b01      	cmp	r3, #1
 800257e:	d1e9      	bne.n	8002554 <main+0xdc>
	  {

		  t2 = DWT->CYCCNT;
 8002580:	4b8c      	ldr	r3, [pc, #560]	; (80027b4 <main+0x33c>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4a8f      	ldr	r2, [pc, #572]	; (80027c4 <main+0x34c>)
 8002586:	6013      	str	r3, [r2, #0]
		  sampleFreq = (1000000.0f /(((float)(t2-t1))/CLOCK_PER_USEC)); // set integration time by time elapsed since last filter update
 8002588:	4b8e      	ldr	r3, [pc, #568]	; (80027c4 <main+0x34c>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4b8e      	ldr	r3, [pc, #568]	; (80027c8 <main+0x350>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	ee07 3a90 	vmov	s15, r3
 8002596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800259a:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80027cc <main+0x354>
 800259e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025a2:	eddf 6a8b 	vldr	s13, [pc, #556]	; 80027d0 <main+0x358>
 80025a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025aa:	4b8a      	ldr	r3, [pc, #552]	; (80027d4 <main+0x35c>)
 80025ac:	edc3 7a00 	vstr	s15, [r3]
		  t1 = t2;
 80025b0:	4b84      	ldr	r3, [pc, #528]	; (80027c4 <main+0x34c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a84      	ldr	r2, [pc, #528]	; (80027c8 <main+0x350>)
 80025b6:	6013      	str	r3, [r2, #0]

		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);		// 0.5us
 80025b8:	2120      	movs	r1, #32
 80025ba:	4881      	ldr	r0, [pc, #516]	; (80027c0 <main+0x348>)
 80025bc:	f7ff ff21 	bl	8002402 <LL_GPIO_TogglePin>
		  ICM20602_Get6AxisRawData(&ICM20602.acc_x_raw, &ICM20602.gyro_x_raw);	//	39.11us
 80025c0:	4985      	ldr	r1, [pc, #532]	; (80027d8 <main+0x360>)
 80025c2:	4886      	ldr	r0, [pc, #536]	; (80027dc <main+0x364>)
 80025c4:	f7fe ff24 	bl	8001410 <ICM20602_Get6AxisRawData>
		  //		  GYROX_RATE = (ICM20602.gyro_x_raw - gx_cal) * 0.06103515625 * 0.017453289;
		  GYROX_RATE = (ICM20602.gyro_x_raw - gx_cal) * 0.06103515625 * 0.017453289;
 80025c8:	4b84      	ldr	r3, [pc, #528]	; (80027dc <main+0x364>)
 80025ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80025ce:	ee07 3a90 	vmov	s15, r3
 80025d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025d6:	4b82      	ldr	r3, [pc, #520]	; (80027e0 <main+0x368>)
 80025d8:	edd3 7a00 	vldr	s15, [r3]
 80025dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e0:	ee17 0a90 	vmov	r0, s15
 80025e4:	f7fd ffb0 	bl	8000548 <__aeabi_f2d>
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	4b7d      	ldr	r3, [pc, #500]	; (80027e4 <main+0x36c>)
 80025ee:	f7fe f803 	bl	80005f8 <__aeabi_dmul>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	a365      	add	r3, pc, #404	; (adr r3, 8002790 <main+0x318>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	f7fd fffa 	bl	80005f8 <__aeabi_dmul>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	f7fe facc 	bl	8000ba8 <__aeabi_d2f>
 8002610:	4603      	mov	r3, r0
 8002612:	4a75      	ldr	r2, [pc, #468]	; (80027e8 <main+0x370>)
 8002614:	6013      	str	r3, [r2, #0]
		  GYROY_RATE = (ICM20602.gyro_y_raw - gy_cal) * 0.06103515625 * 0.017453289;
 8002616:	4b71      	ldr	r3, [pc, #452]	; (80027dc <main+0x364>)
 8002618:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800261c:	ee07 3a90 	vmov	s15, r3
 8002620:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002624:	4b71      	ldr	r3, [pc, #452]	; (80027ec <main+0x374>)
 8002626:	edd3 7a00 	vldr	s15, [r3]
 800262a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800262e:	ee17 0a90 	vmov	r0, s15
 8002632:	f7fd ff89 	bl	8000548 <__aeabi_f2d>
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	4b6a      	ldr	r3, [pc, #424]	; (80027e4 <main+0x36c>)
 800263c:	f7fd ffdc 	bl	80005f8 <__aeabi_dmul>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	a351      	add	r3, pc, #324	; (adr r3, 8002790 <main+0x318>)
 800264a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264e:	f7fd ffd3 	bl	80005f8 <__aeabi_dmul>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	f7fe faa5 	bl	8000ba8 <__aeabi_d2f>
 800265e:	4603      	mov	r3, r0
 8002660:	4a63      	ldr	r2, [pc, #396]	; (80027f0 <main+0x378>)
 8002662:	6013      	str	r3, [r2, #0]
		  GYROZ_RATE = (ICM20602.gyro_z_raw - gz_cal) * 0.06103515625 * 0.017453289;
 8002664:	4b5d      	ldr	r3, [pc, #372]	; (80027dc <main+0x364>)
 8002666:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800266a:	ee07 3a90 	vmov	s15, r3
 800266e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002672:	4b60      	ldr	r3, [pc, #384]	; (80027f4 <main+0x37c>)
 8002674:	edd3 7a00 	vldr	s15, [r3]
 8002678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800267c:	ee17 0a90 	vmov	r0, s15
 8002680:	f7fd ff62 	bl	8000548 <__aeabi_f2d>
 8002684:	f04f 0200 	mov.w	r2, #0
 8002688:	4b56      	ldr	r3, [pc, #344]	; (80027e4 <main+0x36c>)
 800268a:	f7fd ffb5 	bl	80005f8 <__aeabi_dmul>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4610      	mov	r0, r2
 8002694:	4619      	mov	r1, r3
 8002696:	a33e      	add	r3, pc, #248	; (adr r3, 8002790 <main+0x318>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	f7fd ffac 	bl	80005f8 <__aeabi_dmul>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	f7fe fa7e 	bl	8000ba8 <__aeabi_d2f>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4a52      	ldr	r2, [pc, #328]	; (80027f8 <main+0x380>)
 80026b0:	6013      	str	r3, [r2, #0]

		  ACCX_RATE = (ICM20602.acc_x_raw - ax_cal) * 0.00048828125;
 80026b2:	4b4a      	ldr	r3, [pc, #296]	; (80027dc <main+0x364>)
 80026b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b50      	ldr	r3, [pc, #320]	; (80027fc <main+0x384>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd ff2f 	bl	8000524 <__aeabi_i2d>
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80026ce:	f7fd ff93 	bl	80005f8 <__aeabi_dmul>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4610      	mov	r0, r2
 80026d8:	4619      	mov	r1, r3
 80026da:	f7fe fa65 	bl	8000ba8 <__aeabi_d2f>
 80026de:	4603      	mov	r3, r0
 80026e0:	4a47      	ldr	r2, [pc, #284]	; (8002800 <main+0x388>)
 80026e2:	6013      	str	r3, [r2, #0]
		  ACCY_RATE = (ICM20602.acc_y_raw - ay_cal) * 0.00048828125;
 80026e4:	4b3d      	ldr	r3, [pc, #244]	; (80027dc <main+0x364>)
 80026e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b45      	ldr	r3, [pc, #276]	; (8002804 <main+0x38c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fd ff16 	bl	8000524 <__aeabi_i2d>
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8002700:	f7fd ff7a 	bl	80005f8 <__aeabi_dmul>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	f7fe fa4c 	bl	8000ba8 <__aeabi_d2f>
 8002710:	4603      	mov	r3, r0
 8002712:	4a3d      	ldr	r2, [pc, #244]	; (8002808 <main+0x390>)
 8002714:	6013      	str	r3, [r2, #0]
		  ACCZ_RATE = (ICM20602.acc_z_raw) * 0.00048828125;
 8002716:	4b31      	ldr	r3, [pc, #196]	; (80027dc <main+0x364>)
 8002718:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800271c:	4618      	mov	r0, r3
 800271e:	f7fd ff01 	bl	8000524 <__aeabi_i2d>
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 800272a:	f7fd ff65 	bl	80005f8 <__aeabi_dmul>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	f7fe fa37 	bl	8000ba8 <__aeabi_d2f>
 800273a:	4603      	mov	r3, r0
 800273c:	4a33      	ldr	r2, [pc, #204]	; (800280c <main+0x394>)
 800273e:	6013      	str	r3, [r2, #0]

//		  MadgwickQuaternionUpdate(&ACCX_RATE,&ACCY_RATE,&ACCZ_RATE,&GYROX_RATE,&GYROY_RATE,&GYROZ_RATE);	//57us
		  MahonyAHRSupdateIMU(&GYROX_RATE,&GYROY_RATE,&GYROZ_RATE, &ACCX_RATE,&ACCY_RATE,&ACCZ_RATE);		//42us
 8002740:	4b32      	ldr	r3, [pc, #200]	; (800280c <main+0x394>)
 8002742:	9301      	str	r3, [sp, #4]
 8002744:	4b30      	ldr	r3, [pc, #192]	; (8002808 <main+0x390>)
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	4b2d      	ldr	r3, [pc, #180]	; (8002800 <main+0x388>)
 800274a:	4a2b      	ldr	r2, [pc, #172]	; (80027f8 <main+0x380>)
 800274c:	4928      	ldr	r1, [pc, #160]	; (80027f0 <main+0x378>)
 800274e:	4826      	ldr	r0, [pc, #152]	; (80027e8 <main+0x370>)
 8002750:	f7fe ff8a 	bl	8001668 <MahonyAHRSupdateIMU>
		  Quaternion_Update(&q);	//10us
 8002754:	4815      	ldr	r0, [pc, #84]	; (80027ac <main+0x334>)
 8002756:	f7fe feb1 	bl	80014bc <Quaternion_Update>

//		  printf("%d %d %d\n", (int)(q[0]*100), (int)(q[1]*100),(int)(q[2]*100));
		  printf("%d %d %d\n", (int)(Roll), (int)(Pitch), (int)(Yaw));
 800275a:	4b2d      	ldr	r3, [pc, #180]	; (8002810 <main+0x398>)
 800275c:	edd3 7a00 	vldr	s15, [r3]
 8002760:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002764:	4b2b      	ldr	r3, [pc, #172]	; (8002814 <main+0x39c>)
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 800276e:	4b2a      	ldr	r3, [pc, #168]	; (8002818 <main+0x3a0>)
 8002770:	edd3 7a00 	vldr	s15, [r3]
 8002774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002778:	ee17 3a90 	vmov	r3, s15
 800277c:	ee16 2a90 	vmov	r2, s13
 8002780:	ee17 1a10 	vmov	r1, s14
 8002784:	4825      	ldr	r0, [pc, #148]	; (800281c <main+0x3a4>)
 8002786:	f002 fd27 	bl	80051d8 <iprintf>
	  if(flag_INT_USART6 == 1){
 800278a:	e6e3      	b.n	8002554 <main+0xdc>
 800278c:	f3af 8000 	nop.w
 8002790:	65d9bd65 	.word	0x65d9bd65
 8002794:	3f91df46 	.word	0x3f91df46
 8002798:	000f4240 	.word	0x000f4240
 800279c:	0a037a00 	.word	0x0a037a00
 80027a0:	40000400 	.word	0x40000400
 80027a4:	000186a0 	.word	0x000186a0
 80027a8:	40011400 	.word	0x40011400
 80027ac:	20000228 	.word	0x20000228
 80027b0:	e000edf0 	.word	0xe000edf0
 80027b4:	e0001000 	.word	0xe0001000
 80027b8:	20000280 	.word	0x20000280
 80027bc:	20000281 	.word	0x20000281
 80027c0:	40020400 	.word	0x40020400
 80027c4:	20000250 	.word	0x20000250
 80027c8:	2000024c 	.word	0x2000024c
 80027cc:	43280000 	.word	0x43280000
 80027d0:	49742400 	.word	0x49742400
 80027d4:	20000238 	.word	0x20000238
 80027d8:	200001fc 	.word	0x200001fc
 80027dc:	200001f4 	.word	0x200001f4
 80027e0:	20000254 	.word	0x20000254
 80027e4:	3faf4000 	.word	0x3faf4000
 80027e8:	20000268 	.word	0x20000268
 80027ec:	20000258 	.word	0x20000258
 80027f0:	2000026c 	.word	0x2000026c
 80027f4:	2000025c 	.word	0x2000025c
 80027f8:	20000270 	.word	0x20000270
 80027fc:	20000260 	.word	0x20000260
 8002800:	20000274 	.word	0x20000274
 8002804:	20000264 	.word	0x20000264
 8002808:	20000278 	.word	0x20000278
 800280c:	2000027c 	.word	0x2000027c
 8002810:	2000021c 	.word	0x2000021c
 8002814:	20000220 	.word	0x20000220
 8002818:	20000224 	.word	0x20000224
 800281c:	08007ad0 	.word	0x08007ad0

08002820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8002824:	2005      	movs	r0, #5
 8002826:	f7ff fd37 	bl	8002298 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 800282a:	bf00      	nop
 800282c:	f7ff fd48 	bl	80022c0 <LL_FLASH_GetLatency>
 8002830:	4603      	mov	r3, r0
 8002832:	2b05      	cmp	r3, #5
 8002834:	d1fa      	bne.n	800282c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8002836:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800283a:	f7ff fd69 	bl	8002310 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 800283e:	f7ff fc2f 	bl	80020a0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8002842:	bf00      	nop
 8002844:	f7ff fc3c 	bl	80020c0 <LL_RCC_HSE_IsReady>
 8002848:	4603      	mov	r3, r0
 800284a:	2b01      	cmp	r3, #1
 800284c:	d1fa      	bne.n	8002844 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 800284e:	2300      	movs	r3, #0
 8002850:	22a8      	movs	r2, #168	; 0xa8
 8002852:	2104      	movs	r1, #4
 8002854:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002858:	f7ff fcc8 	bl	80021ec <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800285c:	f7ff fca2 	bl	80021a4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8002860:	bf00      	nop
 8002862:	f7ff fcaf 	bl	80021c4 <LL_RCC_PLL_IsReady>
 8002866:	4603      	mov	r3, r0
 8002868:	2b01      	cmp	r3, #1
 800286a:	d1fa      	bne.n	8002862 <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800286c:	2000      	movs	r0, #0
 800286e:	f7ff fc5d 	bl	800212c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8002872:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002876:	f7ff fc6d 	bl	8002154 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 800287a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800287e:	f7ff fc7d 	bl	800217c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8002882:	2002      	movs	r0, #2
 8002884:	f7ff fc30 	bl	80020e8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002888:	bf00      	nop
 800288a:	f7ff fc41 	bl	8002110 <LL_RCC_GetSysClkSource>
 800288e:	4603      	mov	r3, r0
 8002890:	2b08      	cmp	r3, #8
 8002892:	d1fa      	bne.n	800288a <SystemClock_Config+0x6a>
  {

  }
  LL_Init1msTick(168000000);
 8002894:	4803      	ldr	r0, [pc, #12]	; (80028a4 <SystemClock_Config+0x84>)
 8002896:	f001 ffe5 	bl	8004864 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 800289a:	4802      	ldr	r0, [pc, #8]	; (80028a4 <SystemClock_Config+0x84>)
 800289c:	f001 fff0 	bl	8004880 <LL_SetSystemCoreClock>
}
 80028a0:	bf00      	nop
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	0a037a00 	.word	0x0a037a00

080028a8 <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(unsigned int nTime)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
	__IO unsigned int  tmp = SysTick->CTRL;
 80028b0:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <usDelay+0x48>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60fb      	str	r3, [r7, #12]
	((void)tmp);
 80028b6:	68fb      	ldr	r3, [r7, #12]

	SysTick->VAL = 0;
 80028b8:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <usDelay+0x48>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]

	SysTick->CTRL = SysTick->CTRL | SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk; // clock source
 80028be:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <usDelay+0x48>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a0b      	ldr	r2, [pc, #44]	; (80028f0 <usDelay+0x48>)
 80028c4:	f043 0307 	orr.w	r3, r3, #7
 80028c8:	6013      	str	r3, [r2, #0]

	TimingDelay = nTime-1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	4a09      	ldr	r2, [pc, #36]	; (80028f4 <usDelay+0x4c>)
 80028d0:	6013      	str	r3, [r2, #0]

	while(TimingDelay);
 80028d2:	bf00      	nop
 80028d4:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <usDelay+0x4c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1fb      	bne.n	80028d4 <usDelay+0x2c>

	SysTick->CTRL = 0;
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <usDelay+0x48>)
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]

}
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000e010 	.word	0xe000e010
 80028f4:	20000284 	.word	0x20000284

080028f8 <__NVIC_GetPriorityGrouping>:
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <__NVIC_GetPriorityGrouping+0x18>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	f003 0307 	and.w	r3, r3, #7
}
 8002906:	4618      	mov	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <__NVIC_EnableIRQ>:
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	2b00      	cmp	r3, #0
 8002924:	db0b      	blt.n	800293e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	4907      	ldr	r1, [pc, #28]	; (800294c <__NVIC_EnableIRQ+0x38>)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	2001      	movs	r0, #1
 8002936:	fa00 f202 	lsl.w	r2, r0, r2
 800293a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	e000e100 	.word	0xe000e100

08002950 <__NVIC_SetPriority>:
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	6039      	str	r1, [r7, #0]
 800295a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	2b00      	cmp	r3, #0
 8002962:	db0a      	blt.n	800297a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	b2da      	uxtb	r2, r3
 8002968:	490c      	ldr	r1, [pc, #48]	; (800299c <__NVIC_SetPriority+0x4c>)
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	0112      	lsls	r2, r2, #4
 8002970:	b2d2      	uxtb	r2, r2
 8002972:	440b      	add	r3, r1
 8002974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002978:	e00a      	b.n	8002990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	4908      	ldr	r1, [pc, #32]	; (80029a0 <__NVIC_SetPriority+0x50>)
 8002980:	79fb      	ldrb	r3, [r7, #7]
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	3b04      	subs	r3, #4
 8002988:	0112      	lsls	r2, r2, #4
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	440b      	add	r3, r1
 800298e:	761a      	strb	r2, [r3, #24]
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000e100 	.word	0xe000e100
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <NVIC_EncodePriority>:
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	; 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f1c3 0307 	rsb	r3, r3, #7
 80029be:	2b04      	cmp	r3, #4
 80029c0:	bf28      	it	cs
 80029c2:	2304      	movcs	r3, #4
 80029c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d902      	bls.n	80029d4 <NVIC_EncodePriority+0x30>
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3b03      	subs	r3, #3
 80029d2:	e000      	b.n	80029d6 <NVIC_EncodePriority+0x32>
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43da      	mvns	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	401a      	ands	r2, r3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	fa01 f303 	lsl.w	r3, r1, r3
 80029f6:	43d9      	mvns	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	4313      	orrs	r3, r2
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3724      	adds	r7, #36	; 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <LL_AHB1_GRP1_EnableClock>:
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002a14:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a18:	4907      	ldr	r1, [pc, #28]	; (8002a38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002a20:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4013      	ands	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
}
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	40023800 	.word	0x40023800

08002a3c <LL_APB2_GRP1_EnableClock>:
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a44:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a48:	4907      	ldr	r1, [pc, #28]	; (8002a68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002a52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4013      	ands	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
}
 8002a5c:	bf00      	nop
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr
 8002a68:	40023800 	.word	0x40023800

08002a6c <LL_SPI_SetStandard>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f023 0210 	bic.w	r2, r3, #16
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	605a      	str	r2, [r3, #4]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b090      	sub	sp, #64	; 0x40
 8002a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002a9a:	f107 0318 	add.w	r3, r7, #24
 8002a9e:	2228      	movs	r2, #40	; 0x28
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f001 ff26 	bl	80048f4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	463b      	mov	r3, r7
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
 8002ab0:	609a      	str	r2, [r3, #8]
 8002ab2:	60da      	str	r2, [r3, #12]
 8002ab4:	611a      	str	r2, [r3, #16]
 8002ab6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002ab8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002abc:	f7ff ffbe 	bl	8002a3c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f7ff ffa3 	bl	8002a0c <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002ac6:	23e0      	movs	r3, #224	; 0xe0
 8002ac8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002aca:	2302      	movs	r3, #2
 8002acc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002ada:	2305      	movs	r3, #5
 8002adc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ade:	463b      	mov	r3, r7
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	481b      	ldr	r0, [pc, #108]	; (8002b50 <MX_SPI1_Init+0xbc>)
 8002ae4:	f000 fea8 	bl	8003838 <LL_GPIO_Init>

  /* SPI1 interrupt Init */
  NVIC_SetPriority(SPI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002ae8:	f7ff ff06 	bl	80028f8 <__NVIC_GetPriorityGrouping>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2200      	movs	r2, #0
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff ff56 	bl	80029a4 <NVIC_EncodePriority>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4619      	mov	r1, r3
 8002afc:	2023      	movs	r0, #35	; 0x23
 8002afe:	f7ff ff27 	bl	8002950 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI1_IRQn);
 8002b02:	2023      	movs	r0, #35	; 0x23
 8002b04:	f7ff ff06 	bl	8002914 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002b0c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002b10:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002b12:	2300      	movs	r3, #0
 8002b14:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8002b16:	2302      	movs	r3, #2
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8002b24:	2310      	movs	r3, #16
 8002b26:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8002b30:	230a      	movs	r3, #10
 8002b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8002b34:	f107 0318 	add.w	r3, r7, #24
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4806      	ldr	r0, [pc, #24]	; (8002b54 <MX_SPI1_Init+0xc0>)
 8002b3c:	f001 f84d 	bl	8003bda <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8002b40:	2100      	movs	r1, #0
 8002b42:	4804      	ldr	r0, [pc, #16]	; (8002b54 <MX_SPI1_Init+0xc0>)
 8002b44:	f7ff ff92 	bl	8002a6c <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b48:	bf00      	nop
 8002b4a:	3740      	adds	r7, #64	; 0x40
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40020000 	.word	0x40020000
 8002b54:	40013000 	.word	0x40013000

08002b58 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002b60:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4013      	ands	r3, r2
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	bf0c      	ite	eq
 8002b6e:	2301      	moveq	r3, #1
 8002b70:	2300      	movne	r3, #0
 8002b72:	b2db      	uxtb	r3, r3
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	40013c00 	.word	0x40013c00

08002b84 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8002b8c:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6153      	str	r3, [r2, #20]
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40013c00 	.word	0x40013c00

08002ba4 <LL_USART_IsActiveFlag_RXNE>:
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_USART_ClearFlag_RXNE>:
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f06f 0220 	mvn.w	r2, #32
 8002bd8:	601a      	str	r2, [r3, #0]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_USART_ReceiveData8>:
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	b2db      	uxtb	r3, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c04:	e7fe      	b.n	8002c04 <NMI_Handler+0x4>

08002c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c0a:	e7fe      	b.n	8002c0a <HardFault_Handler+0x4>

08002c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c10:	e7fe      	b.n	8002c10 <MemManage_Handler+0x4>

08002c12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c16:	e7fe      	b.n	8002c16 <BusFault_Handler+0x4>

08002c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c1c:	e7fe      	b.n	8002c1c <UsageFault_Handler+0x4>

08002c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <SysTick_Handler+0x20>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d004      	beq.n	8002c5e <SysTick_Handler+0x16>
		TimingDelay--;
 8002c54:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <SysTick_Handler+0x20>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	4a03      	ldr	r2, [pc, #12]	; (8002c68 <SysTick_Handler+0x20>)
 8002c5c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	20000284 	.word	0x20000284

08002c6c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8002c70:	2010      	movs	r0, #16
 8002c72:	f7ff ff71 	bl	8002b58 <LL_EXTI_IsActiveFlag_0_31>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <EXTI4_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 8002c7c:	2010      	movs	r0, #16
 8002c7e:	f7ff ff81 	bl	8002b84 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE END SPI1_IRQn 0 */
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6)) // 인터럽트중 USART6인지 확인
 8002c98:	480a      	ldr	r0, [pc, #40]	; (8002cc4 <USART6_IRQHandler+0x30>)
 8002c9a:	f7ff ff83 	bl	8002ba4 <LL_USART_IsActiveFlag_RXNE>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00c      	beq.n	8002cbe <USART6_IRQHandler+0x2a>
	{
			LL_USART_ClearFlag_RXNE(USART6); // 맞으면 비트 클리어
 8002ca4:	4807      	ldr	r0, [pc, #28]	; (8002cc4 <USART6_IRQHandler+0x30>)
 8002ca6:	f7ff ff90 	bl	8002bca <LL_USART_ClearFlag_RXNE>
			rxd = LL_USART_ReceiveData8(USART6); // 데이터 수신
 8002caa:	4806      	ldr	r0, [pc, #24]	; (8002cc4 <USART6_IRQHandler+0x30>)
 8002cac:	f7ff ff9b 	bl	8002be6 <LL_USART_ReceiveData8>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <USART6_IRQHandler+0x34>)
 8002cb6:	701a      	strb	r2, [r3, #0]
			flag_INT_USART6 = 1; // flag 클리어
 8002cb8:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <USART6_IRQHandler+0x38>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40011400 	.word	0x40011400
 8002cc8:	20000281 	.word	0x20000281
 8002ccc:	20000280 	.word	0x20000280

08002cd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return 1;
 8002cd4:	2301      	movs	r3, #1
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <_kill>:

int _kill(int pid, int sig)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cea:	f001 fdd9 	bl	80048a0 <__errno>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2216      	movs	r2, #22
 8002cf2:	601a      	str	r2, [r3, #0]
  return -1;
 8002cf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <_exit>:

void _exit (int status)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ffe7 	bl	8002ce0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d12:	e7fe      	b.n	8002d12 <_exit+0x12>

08002d14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	e00a      	b.n	8002d3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d26:	f3af 8000 	nop.w
 8002d2a:	4601      	mov	r1, r0
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	60ba      	str	r2, [r7, #8]
 8002d32:	b2ca      	uxtb	r2, r1
 8002d34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	dbf0      	blt.n	8002d26 <_read+0x12>
  }

  return len;
 8002d44:	687b      	ldr	r3, [r7, #4]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <_close>:
  }
  return len;
}

int _close(int file)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d76:	605a      	str	r2, [r3, #4]
  return 0;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <_isatty>:

int _isatty(int file)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d8e:	2301      	movs	r3, #1
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dc0:	4a14      	ldr	r2, [pc, #80]	; (8002e14 <_sbrk+0x5c>)
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <_sbrk+0x60>)
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dcc:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <_sbrk+0x64>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dd4:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <_sbrk+0x64>)
 8002dd6:	4a12      	ldr	r2, [pc, #72]	; (8002e20 <_sbrk+0x68>)
 8002dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <_sbrk+0x64>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d207      	bcs.n	8002df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002de8:	f001 fd5a 	bl	80048a0 <__errno>
 8002dec:	4603      	mov	r3, r0
 8002dee:	220c      	movs	r2, #12
 8002df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002df6:	e009      	b.n	8002e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002df8:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <_sbrk+0x64>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dfe:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <_sbrk+0x64>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	4a05      	ldr	r2, [pc, #20]	; (8002e1c <_sbrk+0x64>)
 8002e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20020000 	.word	0x20020000
 8002e18:	00000400 	.word	0x00000400
 8002e1c:	20000288 	.word	0x20000288
 8002e20:	200002a0 	.word	0x200002a0

08002e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e28:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <SystemInit+0x20>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2e:	4a05      	ldr	r2, [pc, #20]	; (8002e44 <SystemInit+0x20>)
 8002e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <LL_AHB1_GRP1_EnableClock>:
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002e50:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e54:	4907      	ldr	r1, [pc, #28]	; (8002e74 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002e5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4013      	ands	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e66:	68fb      	ldr	r3, [r7, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	40023800 	.word	0x40023800

08002e78 <LL_APB1_GRP1_EnableClock>:
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002e80:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e84:	4907      	ldr	r1, [pc, #28]	; (8002ea4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002e8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4013      	ands	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e96:	68fb      	ldr	r3, [r7, #12]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	40023800 	.word	0x40023800

08002ea8 <LL_TIM_EnableARRPreload>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	601a      	str	r2, [r3, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d01c      	beq.n	8002f12 <LL_TIM_OC_EnableFast+0x4a>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d017      	beq.n	8002f0e <LL_TIM_OC_EnableFast+0x46>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	d012      	beq.n	8002f0a <LL_TIM_OC_EnableFast+0x42>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	2b40      	cmp	r3, #64	; 0x40
 8002ee8:	d00d      	beq.n	8002f06 <LL_TIM_OC_EnableFast+0x3e>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ef0:	d007      	beq.n	8002f02 <LL_TIM_OC_EnableFast+0x3a>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef8:	d101      	bne.n	8002efe <LL_TIM_OC_EnableFast+0x36>
 8002efa:	2305      	movs	r3, #5
 8002efc:	e00a      	b.n	8002f14 <LL_TIM_OC_EnableFast+0x4c>
 8002efe:	2306      	movs	r3, #6
 8002f00:	e008      	b.n	8002f14 <LL_TIM_OC_EnableFast+0x4c>
 8002f02:	2304      	movs	r3, #4
 8002f04:	e006      	b.n	8002f14 <LL_TIM_OC_EnableFast+0x4c>
 8002f06:	2303      	movs	r3, #3
 8002f08:	e004      	b.n	8002f14 <LL_TIM_OC_EnableFast+0x4c>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e002      	b.n	8002f14 <LL_TIM_OC_EnableFast+0x4c>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <LL_TIM_OC_EnableFast+0x4c>
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3318      	adds	r3, #24
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <LL_TIM_OC_EnableFast+0x80>)
 8002f20:	5cd3      	ldrb	r3, [r2, r3]
 8002f22:	440b      	add	r3, r1
 8002f24:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	4907      	ldr	r1, [pc, #28]	; (8002f4c <LL_TIM_OC_EnableFast+0x84>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	4619      	mov	r1, r3
 8002f32:	2304      	movs	r3, #4
 8002f34:	408b      	lsls	r3, r1
 8002f36:	431a      	orrs	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	601a      	str	r2, [r3, #0]

}
 8002f3c:	bf00      	nop
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	08007af4 	.word	0x08007af4
 8002f4c:	08007afc 	.word	0x08007afc

08002f50 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d01c      	beq.n	8002f9a <LL_TIM_OC_EnablePreload+0x4a>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d017      	beq.n	8002f96 <LL_TIM_OC_EnablePreload+0x46>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b10      	cmp	r3, #16
 8002f6a:	d012      	beq.n	8002f92 <LL_TIM_OC_EnablePreload+0x42>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b40      	cmp	r3, #64	; 0x40
 8002f70:	d00d      	beq.n	8002f8e <LL_TIM_OC_EnablePreload+0x3e>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f78:	d007      	beq.n	8002f8a <LL_TIM_OC_EnablePreload+0x3a>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f80:	d101      	bne.n	8002f86 <LL_TIM_OC_EnablePreload+0x36>
 8002f82:	2305      	movs	r3, #5
 8002f84:	e00a      	b.n	8002f9c <LL_TIM_OC_EnablePreload+0x4c>
 8002f86:	2306      	movs	r3, #6
 8002f88:	e008      	b.n	8002f9c <LL_TIM_OC_EnablePreload+0x4c>
 8002f8a:	2304      	movs	r3, #4
 8002f8c:	e006      	b.n	8002f9c <LL_TIM_OC_EnablePreload+0x4c>
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e004      	b.n	8002f9c <LL_TIM_OC_EnablePreload+0x4c>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e002      	b.n	8002f9c <LL_TIM_OC_EnablePreload+0x4c>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <LL_TIM_OC_EnablePreload+0x4c>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3318      	adds	r3, #24
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	4a0a      	ldr	r2, [pc, #40]	; (8002fd0 <LL_TIM_OC_EnablePreload+0x80>)
 8002fa8:	5cd3      	ldrb	r3, [r2, r3]
 8002faa:	440b      	add	r3, r1
 8002fac:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	4907      	ldr	r1, [pc, #28]	; (8002fd4 <LL_TIM_OC_EnablePreload+0x84>)
 8002fb6:	5ccb      	ldrb	r3, [r1, r3]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	2308      	movs	r3, #8
 8002fbc:	408b      	lsls	r3, r1
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	601a      	str	r2, [r3, #0]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	08007af4 	.word	0x08007af4
 8002fd4:	08007afc 	.word	0x08007afc

08002fd8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fea:	f023 0307 	bic.w	r3, r3, #7
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	609a      	str	r2, [r3, #8]
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	605a      	str	r2, [r3, #4]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	609a      	str	r2, [r3, #8]
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b094      	sub	sp, #80	; 0x50
 800304c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800304e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	609a      	str	r2, [r3, #8]
 800305a:	60da      	str	r2, [r3, #12]
 800305c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800305e:	f107 031c 	add.w	r3, r7, #28
 8003062:	2220      	movs	r2, #32
 8003064:	2100      	movs	r1, #0
 8003066:	4618      	mov	r0, r3
 8003068:	f001 fc44 	bl	80048f4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306c:	1d3b      	adds	r3, r7, #4
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	60da      	str	r2, [r3, #12]
 8003078:	611a      	str	r2, [r3, #16]
 800307a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800307c:	2002      	movs	r0, #2
 800307e:	f7ff fefb 	bl	8002e78 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 8003082:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003086:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003088:	2300      	movs	r3, #0
 800308a:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20;
 800308c:	2314      	movs	r3, #20
 800308e:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003090:	2300      	movs	r3, #0
 8003092:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003094:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003098:	4619      	mov	r1, r3
 800309a:	4821      	ldr	r0, [pc, #132]	; (8003120 <MX_TIM3_Init+0xd8>)
 800309c:	f000 fe62 	bl	8003d64 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 80030a0:	481f      	ldr	r0, [pc, #124]	; (8003120 <MX_TIM3_Init+0xd8>)
 80030a2:	f7ff ff01 	bl	8002ea8 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80030a6:	2100      	movs	r1, #0
 80030a8:	481d      	ldr	r0, [pc, #116]	; (8003120 <MX_TIM3_Init+0xd8>)
 80030aa:	f7ff ff95 	bl	8002fd8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 80030ae:	2101      	movs	r1, #1
 80030b0:	481b      	ldr	r0, [pc, #108]	; (8003120 <MX_TIM3_Init+0xd8>)
 80030b2:	f7ff ff4d 	bl	8002f50 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80030b6:	2360      	movs	r3, #96	; 0x60
 80030b8:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80030be:	2300      	movs	r3, #0
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80030c6:	2300      	movs	r3, #0
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80030ca:	f107 031c 	add.w	r3, r7, #28
 80030ce:	461a      	mov	r2, r3
 80030d0:	2101      	movs	r1, #1
 80030d2:	4813      	ldr	r0, [pc, #76]	; (8003120 <MX_TIM3_Init+0xd8>)
 80030d4:	f000 fee0 	bl	8003e98 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80030d8:	2101      	movs	r1, #1
 80030da:	4811      	ldr	r0, [pc, #68]	; (8003120 <MX_TIM3_Init+0xd8>)
 80030dc:	f7ff fef4 	bl	8002ec8 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80030e0:	2100      	movs	r1, #0
 80030e2:	480f      	ldr	r0, [pc, #60]	; (8003120 <MX_TIM3_Init+0xd8>)
 80030e4:	f7ff ff8d 	bl	8003002 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80030e8:	480d      	ldr	r0, [pc, #52]	; (8003120 <MX_TIM3_Init+0xd8>)
 80030ea:	f7ff ff9d 	bl	8003028 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80030ee:	2002      	movs	r0, #2
 80030f0:	f7ff feaa 	bl	8002e48 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80030f4:	2310      	movs	r3, #16
 80030f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80030f8:	2302      	movs	r3, #2
 80030fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80030fc:	2300      	movs	r3, #0
 80030fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003108:	2302      	movs	r3, #2
 800310a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800310c:	1d3b      	adds	r3, r7, #4
 800310e:	4619      	mov	r1, r3
 8003110:	4804      	ldr	r0, [pc, #16]	; (8003124 <MX_TIM3_Init+0xdc>)
 8003112:	f000 fb91 	bl	8003838 <LL_GPIO_Init>

}
 8003116:	bf00      	nop
 8003118:	3750      	adds	r7, #80	; 0x50
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40000400 	.word	0x40000400
 8003124:	40020400 	.word	0x40020400

08003128 <__NVIC_GetPriorityGrouping>:
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800312c:	4b04      	ldr	r3, [pc, #16]	; (8003140 <__NVIC_GetPriorityGrouping+0x18>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	0a1b      	lsrs	r3, r3, #8
 8003132:	f003 0307 	and.w	r3, r3, #7
}
 8003136:	4618      	mov	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <__NVIC_EnableIRQ>:
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	2b00      	cmp	r3, #0
 8003154:	db0b      	blt.n	800316e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	f003 021f 	and.w	r2, r3, #31
 800315c:	4907      	ldr	r1, [pc, #28]	; (800317c <__NVIC_EnableIRQ+0x38>)
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	2001      	movs	r0, #1
 8003166:	fa00 f202 	lsl.w	r2, r0, r2
 800316a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	e000e100 	.word	0xe000e100

08003180 <__NVIC_SetPriority>:
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	6039      	str	r1, [r7, #0]
 800318a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003190:	2b00      	cmp	r3, #0
 8003192:	db0a      	blt.n	80031aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	b2da      	uxtb	r2, r3
 8003198:	490c      	ldr	r1, [pc, #48]	; (80031cc <__NVIC_SetPriority+0x4c>)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	0112      	lsls	r2, r2, #4
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	440b      	add	r3, r1
 80031a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031a8:	e00a      	b.n	80031c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	4908      	ldr	r1, [pc, #32]	; (80031d0 <__NVIC_SetPriority+0x50>)
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	3b04      	subs	r3, #4
 80031b8:	0112      	lsls	r2, r2, #4
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	440b      	add	r3, r1
 80031be:	761a      	strb	r2, [r3, #24]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000e100 	.word	0xe000e100
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <NVIC_EncodePriority>:
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	; 0x24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f1c3 0307 	rsb	r3, r3, #7
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	bf28      	it	cs
 80031f2:	2304      	movcs	r3, #4
 80031f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3304      	adds	r3, #4
 80031fa:	2b06      	cmp	r3, #6
 80031fc:	d902      	bls.n	8003204 <NVIC_EncodePriority+0x30>
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3b03      	subs	r3, #3
 8003202:	e000      	b.n	8003206 <NVIC_EncodePriority+0x32>
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43da      	mvns	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	401a      	ands	r2, r3
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800321c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	fa01 f303 	lsl.w	r3, r1, r3
 8003226:	43d9      	mvns	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800322c:	4313      	orrs	r3, r2
}
 800322e:	4618      	mov	r0, r3
 8003230:	3724      	adds	r7, #36	; 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <LL_AHB1_GRP1_EnableClock>:
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003244:	4b08      	ldr	r3, [pc, #32]	; (8003268 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003248:	4907      	ldr	r1, [pc, #28]	; (8003268 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4313      	orrs	r3, r2
 800324e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4013      	ands	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800325a:	68fb      	ldr	r3, [r7, #12]
}
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40023800 	.word	0x40023800

0800326c <LL_APB2_GRP1_EnableClock>:
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003274:	4b08      	ldr	r3, [pc, #32]	; (8003298 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003276:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003278:	4907      	ldr	r1, [pc, #28]	; (8003298 <LL_APB2_GRP1_EnableClock+0x2c>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4313      	orrs	r3, r2
 800327e:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003282:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4013      	ands	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800328a:	68fb      	ldr	r3, [r7, #12]
}
 800328c:	bf00      	nop
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	40023800 	.word	0x40023800

0800329c <LL_USART_Enable>:
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	60da      	str	r2, [r3, #12]
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <LL_USART_ConfigAsyncMode>:
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	615a      	str	r2, [r3, #20]
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08e      	sub	sp, #56	; 0x38
 80032ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80032ee:	f107 031c 	add.w	r3, r7, #28
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	605a      	str	r2, [r3, #4]
 80032f8:	609a      	str	r2, [r3, #8]
 80032fa:	60da      	str	r2, [r3, #12]
 80032fc:	611a      	str	r2, [r3, #16]
 80032fe:	615a      	str	r2, [r3, #20]
 8003300:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003302:	1d3b      	adds	r3, r7, #4
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
 8003310:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8003312:	2020      	movs	r0, #32
 8003314:	f7ff ffaa 	bl	800326c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003318:	2004      	movs	r0, #4
 800331a:	f7ff ff8f 	bl	800323c <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800331e:	23c0      	movs	r3, #192	; 0xc0
 8003320:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003322:	2302      	movs	r3, #2
 8003324:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003326:	2303      	movs	r3, #3
 8003328:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800332a:	2300      	movs	r3, #0
 800332c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8003332:	2308      	movs	r3, #8
 8003334:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003336:	1d3b      	adds	r3, r7, #4
 8003338:	4619      	mov	r1, r3
 800333a:	4819      	ldr	r0, [pc, #100]	; (80033a0 <MX_USART6_UART_Init+0xb8>)
 800333c:	f000 fa7c 	bl	8003838 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003340:	f7ff fef2 	bl	8003128 <__NVIC_GetPriorityGrouping>
 8003344:	4603      	mov	r3, r0
 8003346:	2200      	movs	r2, #0
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff ff42 	bl	80031d4 <NVIC_EncodePriority>
 8003350:	4603      	mov	r3, r0
 8003352:	4619      	mov	r1, r3
 8003354:	2047      	movs	r0, #71	; 0x47
 8003356:	f7ff ff13 	bl	8003180 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 800335a:	2047      	movs	r0, #71	; 0x47
 800335c:	f7ff fef2 	bl	8003144 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003360:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8003364:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003366:	2300      	movs	r3, #0
 8003368:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800336a:	2300      	movs	r3, #0
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800336e:	2300      	movs	r3, #0
 8003370:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003372:	230c      	movs	r3, #12
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003376:	2300      	movs	r3, #0
 8003378:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800337a:	2300      	movs	r3, #0
 800337c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 800337e:	f107 031c 	add.w	r3, r7, #28
 8003382:	4619      	mov	r1, r3
 8003384:	4807      	ldr	r0, [pc, #28]	; (80033a4 <MX_USART6_UART_Init+0xbc>)
 8003386:	f001 f9d3 	bl	8004730 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 800338a:	4806      	ldr	r0, [pc, #24]	; (80033a4 <MX_USART6_UART_Init+0xbc>)
 800338c:	f7ff ff96 	bl	80032bc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8003390:	4804      	ldr	r0, [pc, #16]	; (80033a4 <MX_USART6_UART_Init+0xbc>)
 8003392:	f7ff ff83 	bl	800329c <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003396:	bf00      	nop
 8003398:	3738      	adds	r7, #56	; 0x38
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40020800 	.word	0x40020800
 80033a4:	40011400 	.word	0x40011400

080033a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80033a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033ac:	480d      	ldr	r0, [pc, #52]	; (80033e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033ae:	490e      	ldr	r1, [pc, #56]	; (80033e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033b0:	4a0e      	ldr	r2, [pc, #56]	; (80033ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033b4:	e002      	b.n	80033bc <LoopCopyDataInit>

080033b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ba:	3304      	adds	r3, #4

080033bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033c0:	d3f9      	bcc.n	80033b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033c2:	4a0b      	ldr	r2, [pc, #44]	; (80033f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033c4:	4c0b      	ldr	r4, [pc, #44]	; (80033f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033c8:	e001      	b.n	80033ce <LoopFillZerobss>

080033ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033cc:	3204      	adds	r2, #4

080033ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033d0:	d3fb      	bcc.n	80033ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80033d2:	f7ff fd27 	bl	8002e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033d6:	f001 fa69 	bl	80048ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033da:	f7ff f84d 	bl	8002478 <main>
  bx  lr    
 80033de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80033e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033e8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80033ec:	08007f24 	.word	0x08007f24
  ldr r2, =_sbss
 80033f0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80033f4:	2000029c 	.word	0x2000029c

080033f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033f8:	e7fe      	b.n	80033f8 <ADC_IRQHandler>
	...

080033fc <LL_EXTI_EnableIT_0_31>:
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <LL_EXTI_EnableIT_0_31+0x20>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4904      	ldr	r1, [pc, #16]	; (800341c <LL_EXTI_EnableIT_0_31+0x20>)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4313      	orrs	r3, r2
 800340e:	600b      	str	r3, [r1, #0]
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	40013c00 	.word	0x40013c00

08003420 <LL_EXTI_DisableIT_0_31>:
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <LL_EXTI_DisableIT_0_31+0x24>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	43db      	mvns	r3, r3
 8003430:	4904      	ldr	r1, [pc, #16]	; (8003444 <LL_EXTI_DisableIT_0_31+0x24>)
 8003432:	4013      	ands	r3, r2
 8003434:	600b      	str	r3, [r1, #0]
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40013c00 	.word	0x40013c00

08003448 <LL_EXTI_EnableEvent_0_31>:
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003450:	4b05      	ldr	r3, [pc, #20]	; (8003468 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	4904      	ldr	r1, [pc, #16]	; (8003468 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4313      	orrs	r3, r2
 800345a:	604b      	str	r3, [r1, #4]
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	40013c00 	.word	0x40013c00

0800346c <LL_EXTI_DisableEvent_0_31>:
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003474:	4b06      	ldr	r3, [pc, #24]	; (8003490 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	43db      	mvns	r3, r3
 800347c:	4904      	ldr	r1, [pc, #16]	; (8003490 <LL_EXTI_DisableEvent_0_31+0x24>)
 800347e:	4013      	ands	r3, r2
 8003480:	604b      	str	r3, [r1, #4]
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40013c00 	.word	0x40013c00

08003494 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	4904      	ldr	r1, [pc, #16]	; (80034b4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	608b      	str	r3, [r1, #8]
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	40013c00 	.word	0x40013c00

080034b8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	4904      	ldr	r1, [pc, #16]	; (80034dc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	608b      	str	r3, [r1, #8]
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	40013c00 	.word	0x40013c00

080034e0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	4904      	ldr	r1, [pc, #16]	; (8003500 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60cb      	str	r3, [r1, #12]
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40013c00 	.word	0x40013c00

08003504 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	43db      	mvns	r3, r3
 8003514:	4904      	ldr	r1, [pc, #16]	; (8003528 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003516:	4013      	ands	r3, r2
 8003518:	60cb      	str	r3, [r1, #12]
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	40013c00 	.word	0x40013c00

0800352c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8003534:	2300      	movs	r3, #0
 8003536:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	791b      	ldrb	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d065      	beq.n	800360c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d06c      	beq.n	8003622 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	795b      	ldrb	r3, [r3, #5]
 800354c:	2b02      	cmp	r3, #2
 800354e:	d01c      	beq.n	800358a <LL_EXTI_Init+0x5e>
 8003550:	2b02      	cmp	r3, #2
 8003552:	dc25      	bgt.n	80035a0 <LL_EXTI_Init+0x74>
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <LL_EXTI_Init+0x32>
 8003558:	2b01      	cmp	r3, #1
 800355a:	d00b      	beq.n	8003574 <LL_EXTI_Init+0x48>
 800355c:	e020      	b.n	80035a0 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff ff82 	bl	800346c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff ff45 	bl	80033fc <LL_EXTI_EnableIT_0_31>
          break;
 8003572:	e018      	b.n	80035a6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff ff51 	bl	8003420 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff ff60 	bl	8003448 <LL_EXTI_EnableEvent_0_31>
          break;
 8003588:	e00d      	b.n	80035a6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff ff34 	bl	80033fc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff ff55 	bl	8003448 <LL_EXTI_EnableEvent_0_31>
          break;
 800359e:	e002      	b.n	80035a6 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
          break;
 80035a4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	799b      	ldrb	r3, [r3, #6]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d039      	beq.n	8003622 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	799b      	ldrb	r3, [r3, #6]
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	d01c      	beq.n	80035f0 <LL_EXTI_Init+0xc4>
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	dc25      	bgt.n	8003606 <LL_EXTI_Init+0xda>
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d002      	beq.n	80035c4 <LL_EXTI_Init+0x98>
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d00b      	beq.n	80035da <LL_EXTI_Init+0xae>
 80035c2:	e020      	b.n	8003606 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ff9b 	bl	8003504 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff ff5e 	bl	8003494 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80035d8:	e024      	b.n	8003624 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff ff6a 	bl	80034b8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff ff79 	bl	80034e0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80035ee:	e019      	b.n	8003624 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff4d 	bl	8003494 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff ff6e 	bl	80034e0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003604:	e00e      	b.n	8003624 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
            break;
 800360a:	e00b      	b.n	8003624 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff ff05 	bl	8003420 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff ff26 	bl	800346c <LL_EXTI_DisableEvent_0_31>
 8003620:	e000      	b.n	8003624 <LL_EXTI_Init+0xf8>
      }
 8003622:	bf00      	nop
  }
  return status;
 8003624:	7bfb      	ldrb	r3, [r7, #15]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <LL_GPIO_SetPinMode>:
{
 800362e:	b480      	push	{r7}
 8003630:	b089      	sub	sp, #36	; 0x24
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	fa93 f3a3 	rbit	r3, r3
 8003648:	613b      	str	r3, [r7, #16]
  return result;
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	fab3 f383 	clz	r3, r3
 8003650:	b2db      	uxtb	r3, r3
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	2103      	movs	r1, #3
 8003656:	fa01 f303 	lsl.w	r3, r1, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	401a      	ands	r2, r3
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	fa93 f3a3 	rbit	r3, r3
 8003668:	61bb      	str	r3, [r7, #24]
  return result;
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	fab3 f383 	clz	r3, r3
 8003670:	b2db      	uxtb	r3, r3
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	fa01 f303 	lsl.w	r3, r1, r3
 800367a:	431a      	orrs	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	601a      	str	r2, [r3, #0]
}
 8003680:	bf00      	nop
 8003682:	3724      	adds	r7, #36	; 0x24
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <LL_GPIO_SetPinOutputType>:
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	43db      	mvns	r3, r3
 80036a0:	401a      	ands	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	431a      	orrs	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	605a      	str	r2, [r3, #4]
}
 80036b0:	bf00      	nop
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <LL_GPIO_SetPinSpeed>:
{
 80036bc:	b480      	push	{r7}
 80036be:	b089      	sub	sp, #36	; 0x24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	613b      	str	r3, [r7, #16]
  return result;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	2103      	movs	r1, #3
 80036e4:	fa01 f303 	lsl.w	r3, r1, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	401a      	ands	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	61bb      	str	r3, [r7, #24]
  return result;
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	fab3 f383 	clz	r3, r3
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	fa01 f303 	lsl.w	r3, r1, r3
 8003708:	431a      	orrs	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	609a      	str	r2, [r3, #8]
}
 800370e:	bf00      	nop
 8003710:	3724      	adds	r7, #36	; 0x24
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <LL_GPIO_SetPinPull>:
{
 800371a:	b480      	push	{r7}
 800371c:	b089      	sub	sp, #36	; 0x24
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	613b      	str	r3, [r7, #16]
  return result;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	fab3 f383 	clz	r3, r3
 800373c:	b2db      	uxtb	r3, r3
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	2103      	movs	r1, #3
 8003742:	fa01 f303 	lsl.w	r3, r1, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	401a      	ands	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	fa93 f3a3 	rbit	r3, r3
 8003754:	61bb      	str	r3, [r7, #24]
  return result;
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	fab3 f383 	clz	r3, r3
 800375c:	b2db      	uxtb	r3, r3
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	fa01 f303 	lsl.w	r3, r1, r3
 8003766:	431a      	orrs	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	60da      	str	r2, [r3, #12]
}
 800376c:	bf00      	nop
 800376e:	3724      	adds	r7, #36	; 0x24
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <LL_GPIO_SetAFPin_0_7>:
{
 8003778:	b480      	push	{r7}
 800377a:	b089      	sub	sp, #36	; 0x24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a1a      	ldr	r2, [r3, #32]
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	fa93 f3a3 	rbit	r3, r3
 8003792:	613b      	str	r3, [r7, #16]
  return result;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	fab3 f383 	clz	r3, r3
 800379a:	b2db      	uxtb	r3, r3
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	210f      	movs	r1, #15
 80037a0:	fa01 f303 	lsl.w	r3, r1, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	401a      	ands	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	61bb      	str	r3, [r7, #24]
  return result;
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	fa01 f303 	lsl.w	r3, r1, r3
 80037c4:	431a      	orrs	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	621a      	str	r2, [r3, #32]
}
 80037ca:	bf00      	nop
 80037cc:	3724      	adds	r7, #36	; 0x24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <LL_GPIO_SetAFPin_8_15>:
{
 80037d6:	b480      	push	{r7}
 80037d8:	b089      	sub	sp, #36	; 0x24
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	613b      	str	r3, [r7, #16]
  return result;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	210f      	movs	r1, #15
 8003800:	fa01 f303 	lsl.w	r3, r1, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	401a      	ands	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	0a1b      	lsrs	r3, r3, #8
 800380c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	fa93 f3a3 	rbit	r3, r3
 8003814:	61bb      	str	r3, [r7, #24]
  return result;
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	fab3 f383 	clz	r3, r3
 800381c:	b2db      	uxtb	r3, r3
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	fa01 f303 	lsl.w	r3, r1, r3
 8003826:	431a      	orrs	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800382c:	bf00      	nop
 800382e:	3724      	adds	r7, #36	; 0x24
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003846:	2300      	movs	r3, #0
 8003848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	fa93 f3a3 	rbit	r3, r3
 8003856:	613b      	str	r3, [r7, #16]
  return result;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	fab3 f383 	clz	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003862:	e050      	b.n	8003906 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	2101      	movs	r1, #1
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	fa01 f303 	lsl.w	r3, r1, r3
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d042      	beq.n	8003900 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d003      	beq.n	800388a <LL_GPIO_Init+0x52>
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d10d      	bne.n	80038a6 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	461a      	mov	r2, r3
 8003890:	69b9      	ldr	r1, [r7, #24]
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff ff12 	bl	80036bc <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	461a      	mov	r2, r3
 800389e:	69b9      	ldr	r1, [r7, #24]
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff fef3 	bl	800368c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	461a      	mov	r2, r3
 80038ac:	69b9      	ldr	r1, [r7, #24]
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7ff ff33 	bl	800371a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d11a      	bne.n	80038f2 <LL_GPIO_Init+0xba>
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	fa93 f3a3 	rbit	r3, r3
 80038c6:	60bb      	str	r3, [r7, #8]
  return result;
 80038c8:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b07      	cmp	r3, #7
 80038d2:	d807      	bhi.n	80038e4 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	461a      	mov	r2, r3
 80038da:	69b9      	ldr	r1, [r7, #24]
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff ff4b 	bl	8003778 <LL_GPIO_SetAFPin_0_7>
 80038e2:	e006      	b.n	80038f2 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	461a      	mov	r2, r3
 80038ea:	69b9      	ldr	r1, [r7, #24]
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff ff72 	bl	80037d6 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	461a      	mov	r2, r3
 80038f8:	69b9      	ldr	r1, [r7, #24]
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff fe97 	bl	800362e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	3301      	adds	r3, #1
 8003904:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1a7      	bne.n	8003864 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <LL_RCC_GetSysClkSource>:
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003924:	4b04      	ldr	r3, [pc, #16]	; (8003938 <LL_RCC_GetSysClkSource+0x18>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 030c 	and.w	r3, r3, #12
}
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40023800 	.word	0x40023800

0800393c <LL_RCC_GetAHBPrescaler>:
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003940:	4b04      	ldr	r3, [pc, #16]	; (8003954 <LL_RCC_GetAHBPrescaler+0x18>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800

08003958 <LL_RCC_GetAPB1Prescaler>:
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800395c:	4b04      	ldr	r3, [pc, #16]	; (8003970 <LL_RCC_GetAPB1Prescaler+0x18>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003964:	4618      	mov	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40023800 	.word	0x40023800

08003974 <LL_RCC_GetAPB2Prescaler>:
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003978:	4b04      	ldr	r3, [pc, #16]	; (800398c <LL_RCC_GetAPB2Prescaler+0x18>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800

08003990 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003994:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <LL_RCC_PLL_GetMainSource+0x18>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 800399c:	4618      	mov	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40023800 	.word	0x40023800

080039ac <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80039b0:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <LL_RCC_PLL_GetN+0x18>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	099b      	lsrs	r3, r3, #6
 80039b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	40023800 	.word	0x40023800

080039c8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80039cc:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <LL_RCC_PLL_GetP+0x18>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800

080039e4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80039e8:	4b04      	ldr	r3, [pc, #16]	; (80039fc <LL_RCC_PLL_GetDivider+0x18>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800

08003a00 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003a08:	f000 f820 	bl	8003a4c <RCC_GetSystemClockFreq>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 f840 	bl	8003a9c <RCC_GetHCLKClockFreq>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 f84e 	bl	8003ac8 <RCC_GetPCLK1ClockFreq>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 f85a 	bl	8003af0 <RCC_GetPCLK2ClockFreq>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	60da      	str	r2, [r3, #12]
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003a56:	f7ff ff63 	bl	8003920 <LL_RCC_GetSysClkSource>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d00c      	beq.n	8003a7a <RCC_GetSystemClockFreq+0x2e>
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d80f      	bhi.n	8003a84 <RCC_GetSystemClockFreq+0x38>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d002      	beq.n	8003a6e <RCC_GetSystemClockFreq+0x22>
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d003      	beq.n	8003a74 <RCC_GetSystemClockFreq+0x28>
 8003a6c:	e00a      	b.n	8003a84 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003a6e:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <RCC_GetSystemClockFreq+0x48>)
 8003a70:	607b      	str	r3, [r7, #4]
      break;
 8003a72:	e00a      	b.n	8003a8a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003a74:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <RCC_GetSystemClockFreq+0x4c>)
 8003a76:	607b      	str	r3, [r7, #4]
      break;
 8003a78:	e007      	b.n	8003a8a <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8003a7a:	2008      	movs	r0, #8
 8003a7c:	f000 f84c 	bl	8003b18 <RCC_PLL_GetFreqDomain_SYS>
 8003a80:	6078      	str	r0, [r7, #4]
      break;
 8003a82:	e002      	b.n	8003a8a <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003a84:	4b03      	ldr	r3, [pc, #12]	; (8003a94 <RCC_GetSystemClockFreq+0x48>)
 8003a86:	607b      	str	r3, [r7, #4]
      break;
 8003a88:	bf00      	nop
  }

  return frequency;
 8003a8a:	687b      	ldr	r3, [r7, #4]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	00f42400 	.word	0x00f42400
 8003a98:	007a1200 	.word	0x007a1200

08003a9c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003aa4:	f7ff ff4a 	bl	800393c <LL_RCC_GetAHBPrescaler>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	091b      	lsrs	r3, r3, #4
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <RCC_GetHCLKClockFreq+0x28>)
 8003ab2:	5cd3      	ldrb	r3, [r2, r3]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	40d3      	lsrs	r3, r2
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	08007adc 	.word	0x08007adc

08003ac8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003ad0:	f7ff ff42 	bl	8003958 <LL_RCC_GetAPB1Prescaler>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	0a9b      	lsrs	r3, r3, #10
 8003ad8:	4a04      	ldr	r2, [pc, #16]	; (8003aec <RCC_GetPCLK1ClockFreq+0x24>)
 8003ada:	5cd3      	ldrb	r3, [r2, r3]
 8003adc:	461a      	mov	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	40d3      	lsrs	r3, r2
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	08007aec 	.word	0x08007aec

08003af0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003af8:	f7ff ff3c 	bl	8003974 <LL_RCC_GetAPB2Prescaler>
 8003afc:	4603      	mov	r3, r0
 8003afe:	0b5b      	lsrs	r3, r3, #13
 8003b00:	4a04      	ldr	r2, [pc, #16]	; (8003b14 <RCC_GetPCLK2ClockFreq+0x24>)
 8003b02:	5cd3      	ldrb	r3, [r2, r3]
 8003b04:	461a      	mov	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	40d3      	lsrs	r3, r2
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	08007aec 	.word	0x08007aec

08003b18 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003b2c:	f7ff ff30 	bl	8003990 <LL_RCC_PLL_GetMainSource>
 8003b30:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d004      	beq.n	8003b42 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b3e:	d003      	beq.n	8003b48 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8003b40:	e005      	b.n	8003b4e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003b42:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003b44:	617b      	str	r3, [r7, #20]
      break;
 8003b46:	e005      	b.n	8003b54 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003b48:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003b4a:	617b      	str	r3, [r7, #20]
      break;
 8003b4c:	e002      	b.n	8003b54 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8003b4e:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003b50:	617b      	str	r3, [r7, #20]
      break;
 8003b52:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d113      	bne.n	8003b82 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003b5a:	f7ff ff43 	bl	80039e4 <LL_RCC_PLL_GetDivider>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	fbb3 f4f2 	udiv	r4, r3, r2
 8003b66:	f7ff ff21 	bl	80039ac <LL_RCC_PLL_GetN>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	fb03 f404 	mul.w	r4, r3, r4
 8003b70:	f7ff ff2a 	bl	80039c8 <LL_RCC_PLL_GetP>
 8003b74:	4603      	mov	r3, r0
 8003b76:	0c1b      	lsrs	r3, r3, #16
 8003b78:	3301      	adds	r3, #1
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003b80:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8003b82:	693b      	ldr	r3, [r7, #16]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd90      	pop	{r4, r7, pc}
 8003b8c:	00f42400 	.word	0x00f42400
 8003b90:	007a1200 	.word	0x007a1200

08003b94 <LL_SPI_IsEnabled>:
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba4:	2b40      	cmp	r3, #64	; 0x40
 8003ba6:	d101      	bne.n	8003bac <LL_SPI_IsEnabled+0x18>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e000      	b.n	8003bae <LL_SPI_IsEnabled+0x1a>
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <LL_SPI_SetCRCPolynomial>:
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	611a      	str	r2, [r3, #16]
}
 8003bce:	bf00      	nop
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7ff ffd3 	bl	8003b94 <LL_SPI_IsEnabled>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d139      	bne.n	8003c68 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bfc:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	6811      	ldr	r1, [r2, #0]
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	6852      	ldr	r2, [r2, #4]
 8003c08:	4311      	orrs	r1, r2
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	6892      	ldr	r2, [r2, #8]
 8003c0e:	4311      	orrs	r1, r2
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	68d2      	ldr	r2, [r2, #12]
 8003c14:	4311      	orrs	r1, r2
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	6912      	ldr	r2, [r2, #16]
 8003c1a:	4311      	orrs	r1, r2
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	6952      	ldr	r2, [r2, #20]
 8003c20:	4311      	orrs	r1, r2
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	6992      	ldr	r2, [r2, #24]
 8003c26:	4311      	orrs	r1, r2
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	69d2      	ldr	r2, [r2, #28]
 8003c2c:	4311      	orrs	r1, r2
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	6a12      	ldr	r2, [r2, #32]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f023 0204 	bic.w	r2, r3, #4
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	0c1b      	lsrs	r3, r3, #16
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c56:	d105      	bne.n	8003c64 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff ffab 	bl	8003bba <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003c64:	2300      	movs	r3, #0
 8003c66:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	61da      	str	r2, [r3, #28]
  return status;
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <LL_TIM_SetPrescaler>:
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <LL_TIM_SetAutoReload>:
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <LL_TIM_SetRepetitionCounter>:
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <LL_TIM_OC_SetCompareCH1>:
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <LL_TIM_OC_SetCompareCH2>:
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_TIM_OC_SetCompareCH3>:
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <LL_TIM_OC_SetCompareCH4>:
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f043 0201 	orr.w	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	615a      	str	r2, [r3, #20]
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a3d      	ldr	r2, [pc, #244]	; (8003e6c <LL_TIM_Init+0x108>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d013      	beq.n	8003da4 <LL_TIM_Init+0x40>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d82:	d00f      	beq.n	8003da4 <LL_TIM_Init+0x40>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a3a      	ldr	r2, [pc, #232]	; (8003e70 <LL_TIM_Init+0x10c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00b      	beq.n	8003da4 <LL_TIM_Init+0x40>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a39      	ldr	r2, [pc, #228]	; (8003e74 <LL_TIM_Init+0x110>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d007      	beq.n	8003da4 <LL_TIM_Init+0x40>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a38      	ldr	r2, [pc, #224]	; (8003e78 <LL_TIM_Init+0x114>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d003      	beq.n	8003da4 <LL_TIM_Init+0x40>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a37      	ldr	r2, [pc, #220]	; (8003e7c <LL_TIM_Init+0x118>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d106      	bne.n	8003db2 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a2d      	ldr	r2, [pc, #180]	; (8003e6c <LL_TIM_Init+0x108>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d02b      	beq.n	8003e12 <LL_TIM_Init+0xae>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc0:	d027      	beq.n	8003e12 <LL_TIM_Init+0xae>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a2a      	ldr	r2, [pc, #168]	; (8003e70 <LL_TIM_Init+0x10c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d023      	beq.n	8003e12 <LL_TIM_Init+0xae>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a29      	ldr	r2, [pc, #164]	; (8003e74 <LL_TIM_Init+0x110>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d01f      	beq.n	8003e12 <LL_TIM_Init+0xae>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a28      	ldr	r2, [pc, #160]	; (8003e78 <LL_TIM_Init+0x114>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d01b      	beq.n	8003e12 <LL_TIM_Init+0xae>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a27      	ldr	r2, [pc, #156]	; (8003e7c <LL_TIM_Init+0x118>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d017      	beq.n	8003e12 <LL_TIM_Init+0xae>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a26      	ldr	r2, [pc, #152]	; (8003e80 <LL_TIM_Init+0x11c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d013      	beq.n	8003e12 <LL_TIM_Init+0xae>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a25      	ldr	r2, [pc, #148]	; (8003e84 <LL_TIM_Init+0x120>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00f      	beq.n	8003e12 <LL_TIM_Init+0xae>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a24      	ldr	r2, [pc, #144]	; (8003e88 <LL_TIM_Init+0x124>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d00b      	beq.n	8003e12 <LL_TIM_Init+0xae>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a23      	ldr	r2, [pc, #140]	; (8003e8c <LL_TIM_Init+0x128>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d007      	beq.n	8003e12 <LL_TIM_Init+0xae>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a22      	ldr	r2, [pc, #136]	; (8003e90 <LL_TIM_Init+0x12c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d003      	beq.n	8003e12 <LL_TIM_Init+0xae>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a21      	ldr	r2, [pc, #132]	; (8003e94 <LL_TIM_Init+0x130>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d106      	bne.n	8003e20 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff ff34 	bl	8003c9a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	4619      	mov	r1, r3
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ff20 	bl	8003c7e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a0a      	ldr	r2, [pc, #40]	; (8003e6c <LL_TIM_Init+0x108>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d003      	beq.n	8003e4e <LL_TIM_Init+0xea>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a0c      	ldr	r2, [pc, #48]	; (8003e7c <LL_TIM_Init+0x118>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d105      	bne.n	8003e5a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	4619      	mov	r1, r3
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff ff2e 	bl	8003cb6 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff ff71 	bl	8003d42 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40010000 	.word	0x40010000
 8003e70:	40000400 	.word	0x40000400
 8003e74:	40000800 	.word	0x40000800
 8003e78:	40000c00 	.word	0x40000c00
 8003e7c:	40010400 	.word	0x40010400
 8003e80:	40014000 	.word	0x40014000
 8003e84:	40014400 	.word	0x40014400
 8003e88:	40014800 	.word	0x40014800
 8003e8c:	40001800 	.word	0x40001800
 8003e90:	40001c00 	.word	0x40001c00
 8003e94:	40002000 	.word	0x40002000

08003e98 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eae:	d027      	beq.n	8003f00 <LL_TIM_OC_Init+0x68>
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb6:	d82a      	bhi.n	8003f0e <LL_TIM_OC_Init+0x76>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ebe:	d018      	beq.n	8003ef2 <LL_TIM_OC_Init+0x5a>
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ec6:	d822      	bhi.n	8003f0e <LL_TIM_OC_Init+0x76>
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d003      	beq.n	8003ed6 <LL_TIM_OC_Init+0x3e>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b10      	cmp	r3, #16
 8003ed2:	d007      	beq.n	8003ee4 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003ed4:	e01b      	b.n	8003f0e <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	68f8      	ldr	r0, [r7, #12]
 8003eda:	f000 f81f 	bl	8003f1c <OC1Config>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee2:	e015      	b.n	8003f10 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 f884 	bl	8003ff4 <OC2Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef0:	e00e      	b.n	8003f10 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 f8ed 	bl	80040d4 <OC3Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	75fb      	strb	r3, [r7, #23]
      break;
 8003efe:	e007      	b.n	8003f10 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f956 	bl	80041b4 <OC4Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f0c:	e000      	b.n	8003f10 <LL_TIM_OC_Init+0x78>
      break;
 8003f0e:	bf00      	nop
  }

  return result;
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	f023 0201 	bic.w	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0303 	bic.w	r3, r3, #3
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f023 0202 	bic.w	r2, r3, #2
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f023 0201 	bic.w	r2, r3, #1
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a1c      	ldr	r2, [pc, #112]	; (8003fec <OC1Config+0xd0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d003      	beq.n	8003f86 <OC1Config+0x6a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a1b      	ldr	r2, [pc, #108]	; (8003ff0 <OC1Config+0xd4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d11e      	bne.n	8003fc4 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f023 0208 	bic.w	r2, r3, #8
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f023 0204 	bic.w	r2, r3, #4
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff fe7b 	bl	8003cd2 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40010000 	.word	0x40010000
 8003ff0:	40010400 	.word	0x40010400

08003ff4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	f023 0210 	bic.w	r2, r3, #16
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	021b      	lsls	r3, r3, #8
 8004030:	4313      	orrs	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f023 0220 	bic.w	r2, r3, #32
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f023 0210 	bic.w	r2, r3, #16
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a1d      	ldr	r2, [pc, #116]	; (80040cc <OC2Config+0xd8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d003      	beq.n	8004064 <OC2Config+0x70>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a1c      	ldr	r2, [pc, #112]	; (80040d0 <OC2Config+0xdc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d11f      	bne.n	80040a4 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	019b      	lsls	r3, r3, #6
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	019b      	lsls	r3, r3, #6
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4619      	mov	r1, r3
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff fe19 	bl	8003cee <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40010000 	.word	0x40010000
 80040d0:	40010400 	.word	0x40010400

080040d4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 0303 	bic.w	r3, r3, #3
 8004102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a1d      	ldr	r2, [pc, #116]	; (80041ac <OC3Config+0xd8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d003      	beq.n	8004142 <OC3Config+0x6e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a1c      	ldr	r2, [pc, #112]	; (80041b0 <OC3Config+0xdc>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d11f      	bne.n	8004182 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	029b      	lsls	r3, r3, #10
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	029b      	lsls	r3, r3, #10
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	015b      	lsls	r3, r3, #5
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	4619      	mov	r1, r3
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7ff fdb8 	bl	8003d0a <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40010000 	.word	0x40010000
 80041b0:	40010400 	.word	0x40010400

080041b4 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	021b      	lsls	r3, r3, #8
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	031b      	lsls	r3, r3, #12
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	031b      	lsls	r3, r3, #12
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a11      	ldr	r2, [pc, #68]	; (800425c <OC4Config+0xa8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d003      	beq.n	8004224 <OC4Config+0x70>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a10      	ldr	r2, [pc, #64]	; (8004260 <OC4Config+0xac>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d107      	bne.n	8004234 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	019b      	lsls	r3, r3, #6
 8004230:	4313      	orrs	r3, r2
 8004232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4619      	mov	r1, r3
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7ff fd6d 	bl	8003d26 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40010000 	.word	0x40010000
 8004260:	40010400 	.word	0x40010400

08004264 <LL_USART_IsEnabled>:
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004278:	bf0c      	ite	eq
 800427a:	2301      	moveq	r3, #1
 800427c:	2300      	movne	r3, #0
 800427e:	b2db      	uxtb	r3, r3
}
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <LL_USART_SetStopBitsLength>:
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	611a      	str	r2, [r3, #16]
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <LL_USART_SetHWFlowCtrl>:
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	615a      	str	r2, [r3, #20]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <LL_USART_SetBaudRate>:
{
 80042d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042dc:	b0c0      	sub	sp, #256	; 0x100
 80042de:	af00      	add	r7, sp, #0
 80042e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80042e4:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80042e8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80042ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f8:	f040 810c 	bne.w	8004514 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80042fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004300:	2200      	movs	r2, #0
 8004302:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004306:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800430a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800430e:	4622      	mov	r2, r4
 8004310:	462b      	mov	r3, r5
 8004312:	1891      	adds	r1, r2, r2
 8004314:	6639      	str	r1, [r7, #96]	; 0x60
 8004316:	415b      	adcs	r3, r3
 8004318:	667b      	str	r3, [r7, #100]	; 0x64
 800431a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800431e:	4621      	mov	r1, r4
 8004320:	eb12 0801 	adds.w	r8, r2, r1
 8004324:	4629      	mov	r1, r5
 8004326:	eb43 0901 	adc.w	r9, r3, r1
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004336:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800433a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800433e:	4690      	mov	r8, r2
 8004340:	4699      	mov	r9, r3
 8004342:	4623      	mov	r3, r4
 8004344:	eb18 0303 	adds.w	r3, r8, r3
 8004348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800434c:	462b      	mov	r3, r5
 800434e:	eb49 0303 	adc.w	r3, r9, r3
 8004352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004356:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800435a:	2200      	movs	r2, #0
 800435c:	469a      	mov	sl, r3
 800435e:	4693      	mov	fp, r2
 8004360:	eb1a 030a 	adds.w	r3, sl, sl
 8004364:	65bb      	str	r3, [r7, #88]	; 0x58
 8004366:	eb4b 030b 	adc.w	r3, fp, fp
 800436a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800436c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004370:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004374:	f7fc fc68 	bl	8000c48 <__aeabi_uldivmod>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4b64      	ldr	r3, [pc, #400]	; (8004510 <LL_USART_SetBaudRate+0x238>)
 800437e:	fba3 2302 	umull	r2, r3, r3, r2
 8004382:	095b      	lsrs	r3, r3, #5
 8004384:	b29b      	uxth	r3, r3
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	b29c      	uxth	r4, r3
 800438a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800438e:	2200      	movs	r2, #0
 8004390:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004394:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004398:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800439c:	4642      	mov	r2, r8
 800439e:	464b      	mov	r3, r9
 80043a0:	1891      	adds	r1, r2, r2
 80043a2:	6539      	str	r1, [r7, #80]	; 0x50
 80043a4:	415b      	adcs	r3, r3
 80043a6:	657b      	str	r3, [r7, #84]	; 0x54
 80043a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043ac:	4641      	mov	r1, r8
 80043ae:	1851      	adds	r1, r2, r1
 80043b0:	64b9      	str	r1, [r7, #72]	; 0x48
 80043b2:	4649      	mov	r1, r9
 80043b4:	414b      	adcs	r3, r1
 80043b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80043c4:	4659      	mov	r1, fp
 80043c6:	00cb      	lsls	r3, r1, #3
 80043c8:	4651      	mov	r1, sl
 80043ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ce:	4651      	mov	r1, sl
 80043d0:	00ca      	lsls	r2, r1, #3
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
 80043d6:	4603      	mov	r3, r0
 80043d8:	4642      	mov	r2, r8
 80043da:	189b      	adds	r3, r3, r2
 80043dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043e0:	464b      	mov	r3, r9
 80043e2:	460a      	mov	r2, r1
 80043e4:	eb42 0303 	adc.w	r3, r2, r3
 80043e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80043ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80043f0:	2200      	movs	r2, #0
 80043f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043f6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80043fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80043fe:	460b      	mov	r3, r1
 8004400:	18db      	adds	r3, r3, r3
 8004402:	643b      	str	r3, [r7, #64]	; 0x40
 8004404:	4613      	mov	r3, r2
 8004406:	eb42 0303 	adc.w	r3, r2, r3
 800440a:	647b      	str	r3, [r7, #68]	; 0x44
 800440c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004410:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004414:	f7fc fc18 	bl	8000c48 <__aeabi_uldivmod>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4611      	mov	r1, r2
 800441e:	4b3c      	ldr	r3, [pc, #240]	; (8004510 <LL_USART_SetBaudRate+0x238>)
 8004420:	fba3 2301 	umull	r2, r3, r3, r1
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	2264      	movs	r2, #100	; 0x64
 8004428:	fb02 f303 	mul.w	r3, r2, r3
 800442c:	1acb      	subs	r3, r1, r3
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004434:	4b36      	ldr	r3, [pc, #216]	; (8004510 <LL_USART_SetBaudRate+0x238>)
 8004436:	fba3 2302 	umull	r2, r3, r3, r2
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	b29b      	uxth	r3, r3
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	b29b      	uxth	r3, r3
 8004442:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004446:	b29b      	uxth	r3, r3
 8004448:	4423      	add	r3, r4
 800444a:	b29c      	uxth	r4, r3
 800444c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004450:	2200      	movs	r2, #0
 8004452:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004456:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800445a:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800445e:	4642      	mov	r2, r8
 8004460:	464b      	mov	r3, r9
 8004462:	1891      	adds	r1, r2, r2
 8004464:	63b9      	str	r1, [r7, #56]	; 0x38
 8004466:	415b      	adcs	r3, r3
 8004468:	63fb      	str	r3, [r7, #60]	; 0x3c
 800446a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800446e:	4641      	mov	r1, r8
 8004470:	1851      	adds	r1, r2, r1
 8004472:	6339      	str	r1, [r7, #48]	; 0x30
 8004474:	4649      	mov	r1, r9
 8004476:	414b      	adcs	r3, r1
 8004478:	637b      	str	r3, [r7, #52]	; 0x34
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004486:	4659      	mov	r1, fp
 8004488:	00cb      	lsls	r3, r1, #3
 800448a:	4651      	mov	r1, sl
 800448c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004490:	4651      	mov	r1, sl
 8004492:	00ca      	lsls	r2, r1, #3
 8004494:	4610      	mov	r0, r2
 8004496:	4619      	mov	r1, r3
 8004498:	4603      	mov	r3, r0
 800449a:	4642      	mov	r2, r8
 800449c:	189b      	adds	r3, r3, r2
 800449e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044a2:	464b      	mov	r3, r9
 80044a4:	460a      	mov	r2, r1
 80044a6:	eb42 0303 	adc.w	r3, r2, r3
 80044aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80044ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044b8:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80044bc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80044c0:	460b      	mov	r3, r1
 80044c2:	18db      	adds	r3, r3, r3
 80044c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c6:	4613      	mov	r3, r2
 80044c8:	eb42 0303 	adc.w	r3, r2, r3
 80044cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044d2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80044d6:	f7fc fbb7 	bl	8000c48 <__aeabi_uldivmod>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <LL_USART_SetBaudRate+0x238>)
 80044e0:	fba3 1302 	umull	r1, r3, r3, r2
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	2164      	movs	r1, #100	; 0x64
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	3332      	adds	r3, #50	; 0x32
 80044f2:	4a07      	ldr	r2, [pc, #28]	; (8004510 <LL_USART_SetBaudRate+0x238>)
 80044f4:	fba2 2303 	umull	r2, r3, r2, r3
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	b29b      	uxth	r3, r3
 8004502:	4423      	add	r3, r4
 8004504:	b29b      	uxth	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800450c:	609a      	str	r2, [r3, #8]
}
 800450e:	e107      	b.n	8004720 <LL_USART_SetBaudRate+0x448>
 8004510:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004514:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004518:	2200      	movs	r2, #0
 800451a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800451e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004522:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004526:	4642      	mov	r2, r8
 8004528:	464b      	mov	r3, r9
 800452a:	1891      	adds	r1, r2, r2
 800452c:	6239      	str	r1, [r7, #32]
 800452e:	415b      	adcs	r3, r3
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
 8004532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004536:	4641      	mov	r1, r8
 8004538:	1854      	adds	r4, r2, r1
 800453a:	4649      	mov	r1, r9
 800453c:	eb43 0501 	adc.w	r5, r3, r1
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	00eb      	lsls	r3, r5, #3
 800454a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800454e:	00e2      	lsls	r2, r4, #3
 8004550:	4614      	mov	r4, r2
 8004552:	461d      	mov	r5, r3
 8004554:	4643      	mov	r3, r8
 8004556:	18e3      	adds	r3, r4, r3
 8004558:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800455c:	464b      	mov	r3, r9
 800455e:	eb45 0303 	adc.w	r3, r5, r3
 8004562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004566:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800456a:	2200      	movs	r2, #0
 800456c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004570:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004580:	4629      	mov	r1, r5
 8004582:	008b      	lsls	r3, r1, #2
 8004584:	4621      	mov	r1, r4
 8004586:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800458a:	4621      	mov	r1, r4
 800458c:	008a      	lsls	r2, r1, #2
 800458e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004592:	f7fc fb59 	bl	8000c48 <__aeabi_uldivmod>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4b64      	ldr	r3, [pc, #400]	; (800472c <LL_USART_SetBaudRate+0x454>)
 800459c:	fba3 2302 	umull	r2, r3, r3, r2
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	b29c      	uxth	r4, r3
 80045a8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045ac:	2200      	movs	r2, #0
 80045ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045b6:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80045ba:	4642      	mov	r2, r8
 80045bc:	464b      	mov	r3, r9
 80045be:	1891      	adds	r1, r2, r2
 80045c0:	61b9      	str	r1, [r7, #24]
 80045c2:	415b      	adcs	r3, r3
 80045c4:	61fb      	str	r3, [r7, #28]
 80045c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045ca:	4641      	mov	r1, r8
 80045cc:	1851      	adds	r1, r2, r1
 80045ce:	6139      	str	r1, [r7, #16]
 80045d0:	4649      	mov	r1, r9
 80045d2:	414b      	adcs	r3, r1
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	f04f 0300 	mov.w	r3, #0
 80045de:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045e2:	4659      	mov	r1, fp
 80045e4:	00cb      	lsls	r3, r1, #3
 80045e6:	4651      	mov	r1, sl
 80045e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ec:	4651      	mov	r1, sl
 80045ee:	00ca      	lsls	r2, r1, #3
 80045f0:	4610      	mov	r0, r2
 80045f2:	4619      	mov	r1, r3
 80045f4:	4603      	mov	r3, r0
 80045f6:	4642      	mov	r2, r8
 80045f8:	189b      	adds	r3, r3, r2
 80045fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045fe:	464b      	mov	r3, r9
 8004600:	460a      	mov	r2, r1
 8004602:	eb42 0303 	adc.w	r3, r2, r3
 8004606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800460a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800460e:	2200      	movs	r2, #0
 8004610:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004614:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004624:	4649      	mov	r1, r9
 8004626:	008b      	lsls	r3, r1, #2
 8004628:	4641      	mov	r1, r8
 800462a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800462e:	4641      	mov	r1, r8
 8004630:	008a      	lsls	r2, r1, #2
 8004632:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004636:	f7fc fb07 	bl	8000c48 <__aeabi_uldivmod>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4b3b      	ldr	r3, [pc, #236]	; (800472c <LL_USART_SetBaudRate+0x454>)
 8004640:	fba3 1302 	umull	r1, r3, r3, r2
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	2164      	movs	r1, #100	; 0x64
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	3332      	adds	r3, #50	; 0x32
 8004652:	4a36      	ldr	r2, [pc, #216]	; (800472c <LL_USART_SetBaudRate+0x454>)
 8004654:	fba2 2303 	umull	r2, r3, r2, r3
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	b29b      	uxth	r3, r3
 800465c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004660:	b29b      	uxth	r3, r3
 8004662:	4423      	add	r3, r4
 8004664:	b29c      	uxth	r4, r3
 8004666:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800466a:	2200      	movs	r2, #0
 800466c:	67bb      	str	r3, [r7, #120]	; 0x78
 800466e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004670:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004674:	4642      	mov	r2, r8
 8004676:	464b      	mov	r3, r9
 8004678:	1891      	adds	r1, r2, r2
 800467a:	60b9      	str	r1, [r7, #8]
 800467c:	415b      	adcs	r3, r3
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004684:	4641      	mov	r1, r8
 8004686:	1851      	adds	r1, r2, r1
 8004688:	6039      	str	r1, [r7, #0]
 800468a:	4649      	mov	r1, r9
 800468c:	414b      	adcs	r3, r1
 800468e:	607b      	str	r3, [r7, #4]
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	f04f 0300 	mov.w	r3, #0
 8004698:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800469c:	4659      	mov	r1, fp
 800469e:	00cb      	lsls	r3, r1, #3
 80046a0:	4651      	mov	r1, sl
 80046a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046a6:	4651      	mov	r1, sl
 80046a8:	00ca      	lsls	r2, r1, #3
 80046aa:	4610      	mov	r0, r2
 80046ac:	4619      	mov	r1, r3
 80046ae:	4603      	mov	r3, r0
 80046b0:	4642      	mov	r2, r8
 80046b2:	189b      	adds	r3, r3, r2
 80046b4:	673b      	str	r3, [r7, #112]	; 0x70
 80046b6:	464b      	mov	r3, r9
 80046b8:	460a      	mov	r2, r1
 80046ba:	eb42 0303 	adc.w	r3, r2, r3
 80046be:	677b      	str	r3, [r7, #116]	; 0x74
 80046c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80046c4:	2200      	movs	r2, #0
 80046c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80046c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	f04f 0300 	mov.w	r3, #0
 80046d2:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 80046d6:	4649      	mov	r1, r9
 80046d8:	008b      	lsls	r3, r1, #2
 80046da:	4641      	mov	r1, r8
 80046dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046e0:	4641      	mov	r1, r8
 80046e2:	008a      	lsls	r2, r1, #2
 80046e4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80046e8:	f7fc faae 	bl	8000c48 <__aeabi_uldivmod>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4b0e      	ldr	r3, [pc, #56]	; (800472c <LL_USART_SetBaudRate+0x454>)
 80046f2:	fba3 1302 	umull	r1, r3, r3, r2
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	2164      	movs	r1, #100	; 0x64
 80046fa:	fb01 f303 	mul.w	r3, r1, r3
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	011b      	lsls	r3, r3, #4
 8004702:	3332      	adds	r3, #50	; 0x32
 8004704:	4a09      	ldr	r2, [pc, #36]	; (800472c <LL_USART_SetBaudRate+0x454>)
 8004706:	fba2 2303 	umull	r2, r3, r2, r3
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	b29b      	uxth	r3, r3
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	b29b      	uxth	r3, r3
 8004714:	4423      	add	r3, r4
 8004716:	b29b      	uxth	r3, r3
 8004718:	461a      	mov	r2, r3
 800471a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800471e:	609a      	str	r2, [r3, #8]
}
 8004720:	bf00      	nop
 8004722:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004726:	46bd      	mov	sp, r7
 8004728:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800472c:	51eb851f 	.word	0x51eb851f

08004730 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b088      	sub	sp, #32
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff fd8e 	bl	8004264 <LL_USART_IsEnabled>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d15e      	bne.n	800480c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004756:	f023 030c 	bic.w	r3, r3, #12
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	6851      	ldr	r1, [r2, #4]
 800475e:	683a      	ldr	r2, [r7, #0]
 8004760:	68d2      	ldr	r2, [r2, #12]
 8004762:	4311      	orrs	r1, r2
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	6912      	ldr	r2, [r2, #16]
 8004768:	4311      	orrs	r1, r2
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	6992      	ldr	r2, [r2, #24]
 800476e:	430a      	orrs	r2, r1
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	4619      	mov	r1, r3
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff fd85 	bl	800428c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	4619      	mov	r1, r3
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff fd92 	bl	80042b2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800478e:	f107 0308 	add.w	r3, r7, #8
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff f934 	bl	8003a00 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a1f      	ldr	r2, [pc, #124]	; (8004818 <LL_USART_Init+0xe8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d102      	bne.n	80047a6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	61bb      	str	r3, [r7, #24]
 80047a4:	e021      	b.n	80047ea <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a1c      	ldr	r2, [pc, #112]	; (800481c <LL_USART_Init+0xec>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d102      	bne.n	80047b4 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	61bb      	str	r3, [r7, #24]
 80047b2:	e01a      	b.n	80047ea <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a1a      	ldr	r2, [pc, #104]	; (8004820 <LL_USART_Init+0xf0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d102      	bne.n	80047c2 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	61bb      	str	r3, [r7, #24]
 80047c0:	e013      	b.n	80047ea <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a17      	ldr	r2, [pc, #92]	; (8004824 <LL_USART_Init+0xf4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d102      	bne.n	80047d0 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	61bb      	str	r3, [r7, #24]
 80047ce:	e00c      	b.n	80047ea <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a15      	ldr	r2, [pc, #84]	; (8004828 <LL_USART_Init+0xf8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d102      	bne.n	80047de <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	61bb      	str	r3, [r7, #24]
 80047dc:	e005      	b.n	80047ea <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a12      	ldr	r2, [pc, #72]	; (800482c <LL_USART_Init+0xfc>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d101      	bne.n	80047ea <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00d      	beq.n	800480c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d009      	beq.n	800480c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80047f8:	2300      	movs	r3, #0
 80047fa:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	699a      	ldr	r2, [r3, #24]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	69b9      	ldr	r1, [r7, #24]
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7ff fd66 	bl	80042d8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800480c:	7ffb      	ldrb	r3, [r7, #31]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40011000 	.word	0x40011000
 800481c:	40004400 	.word	0x40004400
 8004820:	40004800 	.word	0x40004800
 8004824:	40011400 	.word	0x40011400
 8004828:	40004c00 	.word	0x40004c00
 800482c:	40005000 	.word	0x40005000

08004830 <LL_InitTick>:
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004842:	4a07      	ldr	r2, [pc, #28]	; (8004860 <LL_InitTick+0x30>)
 8004844:	3b01      	subs	r3, #1
 8004846:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004848:	4b05      	ldr	r3, [pc, #20]	; (8004860 <LL_InitTick+0x30>)
 800484a:	2200      	movs	r2, #0
 800484c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800484e:	4b04      	ldr	r3, [pc, #16]	; (8004860 <LL_InitTick+0x30>)
 8004850:	2205      	movs	r2, #5
 8004852:	601a      	str	r2, [r3, #0]
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	e000e010 	.word	0xe000e010

08004864 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800486c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7ff ffdd 	bl	8004830 <LL_InitTick>
}
 8004876:	bf00      	nop
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004888:	4a04      	ldr	r2, [pc, #16]	; (800489c <LL_SetSystemCoreClock+0x1c>)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6013      	str	r3, [r2, #0]
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	20000004 	.word	0x20000004

080048a0 <__errno>:
 80048a0:	4b01      	ldr	r3, [pc, #4]	; (80048a8 <__errno+0x8>)
 80048a2:	6818      	ldr	r0, [r3, #0]
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	20000008 	.word	0x20000008

080048ac <__libc_init_array>:
 80048ac:	b570      	push	{r4, r5, r6, lr}
 80048ae:	4d0d      	ldr	r5, [pc, #52]	; (80048e4 <__libc_init_array+0x38>)
 80048b0:	4c0d      	ldr	r4, [pc, #52]	; (80048e8 <__libc_init_array+0x3c>)
 80048b2:	1b64      	subs	r4, r4, r5
 80048b4:	10a4      	asrs	r4, r4, #2
 80048b6:	2600      	movs	r6, #0
 80048b8:	42a6      	cmp	r6, r4
 80048ba:	d109      	bne.n	80048d0 <__libc_init_array+0x24>
 80048bc:	4d0b      	ldr	r5, [pc, #44]	; (80048ec <__libc_init_array+0x40>)
 80048be:	4c0c      	ldr	r4, [pc, #48]	; (80048f0 <__libc_init_array+0x44>)
 80048c0:	f003 f8c6 	bl	8007a50 <_init>
 80048c4:	1b64      	subs	r4, r4, r5
 80048c6:	10a4      	asrs	r4, r4, #2
 80048c8:	2600      	movs	r6, #0
 80048ca:	42a6      	cmp	r6, r4
 80048cc:	d105      	bne.n	80048da <__libc_init_array+0x2e>
 80048ce:	bd70      	pop	{r4, r5, r6, pc}
 80048d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048d4:	4798      	blx	r3
 80048d6:	3601      	adds	r6, #1
 80048d8:	e7ee      	b.n	80048b8 <__libc_init_array+0xc>
 80048da:	f855 3b04 	ldr.w	r3, [r5], #4
 80048de:	4798      	blx	r3
 80048e0:	3601      	adds	r6, #1
 80048e2:	e7f2      	b.n	80048ca <__libc_init_array+0x1e>
 80048e4:	08007f1c 	.word	0x08007f1c
 80048e8:	08007f1c 	.word	0x08007f1c
 80048ec:	08007f1c 	.word	0x08007f1c
 80048f0:	08007f20 	.word	0x08007f20

080048f4 <memset>:
 80048f4:	4402      	add	r2, r0
 80048f6:	4603      	mov	r3, r0
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d100      	bne.n	80048fe <memset+0xa>
 80048fc:	4770      	bx	lr
 80048fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004902:	e7f9      	b.n	80048f8 <memset+0x4>

08004904 <__cvt>:
 8004904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004908:	ec55 4b10 	vmov	r4, r5, d0
 800490c:	2d00      	cmp	r5, #0
 800490e:	460e      	mov	r6, r1
 8004910:	4619      	mov	r1, r3
 8004912:	462b      	mov	r3, r5
 8004914:	bfbb      	ittet	lt
 8004916:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800491a:	461d      	movlt	r5, r3
 800491c:	2300      	movge	r3, #0
 800491e:	232d      	movlt	r3, #45	; 0x2d
 8004920:	700b      	strb	r3, [r1, #0]
 8004922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004924:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004928:	4691      	mov	r9, r2
 800492a:	f023 0820 	bic.w	r8, r3, #32
 800492e:	bfbc      	itt	lt
 8004930:	4622      	movlt	r2, r4
 8004932:	4614      	movlt	r4, r2
 8004934:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004938:	d005      	beq.n	8004946 <__cvt+0x42>
 800493a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800493e:	d100      	bne.n	8004942 <__cvt+0x3e>
 8004940:	3601      	adds	r6, #1
 8004942:	2102      	movs	r1, #2
 8004944:	e000      	b.n	8004948 <__cvt+0x44>
 8004946:	2103      	movs	r1, #3
 8004948:	ab03      	add	r3, sp, #12
 800494a:	9301      	str	r3, [sp, #4]
 800494c:	ab02      	add	r3, sp, #8
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	ec45 4b10 	vmov	d0, r4, r5
 8004954:	4653      	mov	r3, sl
 8004956:	4632      	mov	r2, r6
 8004958:	f000 fce2 	bl	8005320 <_dtoa_r>
 800495c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004960:	4607      	mov	r7, r0
 8004962:	d102      	bne.n	800496a <__cvt+0x66>
 8004964:	f019 0f01 	tst.w	r9, #1
 8004968:	d022      	beq.n	80049b0 <__cvt+0xac>
 800496a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800496e:	eb07 0906 	add.w	r9, r7, r6
 8004972:	d110      	bne.n	8004996 <__cvt+0x92>
 8004974:	783b      	ldrb	r3, [r7, #0]
 8004976:	2b30      	cmp	r3, #48	; 0x30
 8004978:	d10a      	bne.n	8004990 <__cvt+0x8c>
 800497a:	2200      	movs	r2, #0
 800497c:	2300      	movs	r3, #0
 800497e:	4620      	mov	r0, r4
 8004980:	4629      	mov	r1, r5
 8004982:	f7fc f8a1 	bl	8000ac8 <__aeabi_dcmpeq>
 8004986:	b918      	cbnz	r0, 8004990 <__cvt+0x8c>
 8004988:	f1c6 0601 	rsb	r6, r6, #1
 800498c:	f8ca 6000 	str.w	r6, [sl]
 8004990:	f8da 3000 	ldr.w	r3, [sl]
 8004994:	4499      	add	r9, r3
 8004996:	2200      	movs	r2, #0
 8004998:	2300      	movs	r3, #0
 800499a:	4620      	mov	r0, r4
 800499c:	4629      	mov	r1, r5
 800499e:	f7fc f893 	bl	8000ac8 <__aeabi_dcmpeq>
 80049a2:	b108      	cbz	r0, 80049a8 <__cvt+0xa4>
 80049a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80049a8:	2230      	movs	r2, #48	; 0x30
 80049aa:	9b03      	ldr	r3, [sp, #12]
 80049ac:	454b      	cmp	r3, r9
 80049ae:	d307      	bcc.n	80049c0 <__cvt+0xbc>
 80049b0:	9b03      	ldr	r3, [sp, #12]
 80049b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049b4:	1bdb      	subs	r3, r3, r7
 80049b6:	4638      	mov	r0, r7
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	b004      	add	sp, #16
 80049bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c0:	1c59      	adds	r1, r3, #1
 80049c2:	9103      	str	r1, [sp, #12]
 80049c4:	701a      	strb	r2, [r3, #0]
 80049c6:	e7f0      	b.n	80049aa <__cvt+0xa6>

080049c8 <__exponent>:
 80049c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049ca:	4603      	mov	r3, r0
 80049cc:	2900      	cmp	r1, #0
 80049ce:	bfb8      	it	lt
 80049d0:	4249      	neglt	r1, r1
 80049d2:	f803 2b02 	strb.w	r2, [r3], #2
 80049d6:	bfb4      	ite	lt
 80049d8:	222d      	movlt	r2, #45	; 0x2d
 80049da:	222b      	movge	r2, #43	; 0x2b
 80049dc:	2909      	cmp	r1, #9
 80049de:	7042      	strb	r2, [r0, #1]
 80049e0:	dd2a      	ble.n	8004a38 <__exponent+0x70>
 80049e2:	f10d 0407 	add.w	r4, sp, #7
 80049e6:	46a4      	mov	ip, r4
 80049e8:	270a      	movs	r7, #10
 80049ea:	46a6      	mov	lr, r4
 80049ec:	460a      	mov	r2, r1
 80049ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80049f2:	fb07 1516 	mls	r5, r7, r6, r1
 80049f6:	3530      	adds	r5, #48	; 0x30
 80049f8:	2a63      	cmp	r2, #99	; 0x63
 80049fa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80049fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004a02:	4631      	mov	r1, r6
 8004a04:	dcf1      	bgt.n	80049ea <__exponent+0x22>
 8004a06:	3130      	adds	r1, #48	; 0x30
 8004a08:	f1ae 0502 	sub.w	r5, lr, #2
 8004a0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004a10:	1c44      	adds	r4, r0, #1
 8004a12:	4629      	mov	r1, r5
 8004a14:	4561      	cmp	r1, ip
 8004a16:	d30a      	bcc.n	8004a2e <__exponent+0x66>
 8004a18:	f10d 0209 	add.w	r2, sp, #9
 8004a1c:	eba2 020e 	sub.w	r2, r2, lr
 8004a20:	4565      	cmp	r5, ip
 8004a22:	bf88      	it	hi
 8004a24:	2200      	movhi	r2, #0
 8004a26:	4413      	add	r3, r2
 8004a28:	1a18      	subs	r0, r3, r0
 8004a2a:	b003      	add	sp, #12
 8004a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a32:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004a36:	e7ed      	b.n	8004a14 <__exponent+0x4c>
 8004a38:	2330      	movs	r3, #48	; 0x30
 8004a3a:	3130      	adds	r1, #48	; 0x30
 8004a3c:	7083      	strb	r3, [r0, #2]
 8004a3e:	70c1      	strb	r1, [r0, #3]
 8004a40:	1d03      	adds	r3, r0, #4
 8004a42:	e7f1      	b.n	8004a28 <__exponent+0x60>

08004a44 <_printf_float>:
 8004a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a48:	ed2d 8b02 	vpush	{d8}
 8004a4c:	b08d      	sub	sp, #52	; 0x34
 8004a4e:	460c      	mov	r4, r1
 8004a50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004a54:	4616      	mov	r6, r2
 8004a56:	461f      	mov	r7, r3
 8004a58:	4605      	mov	r5, r0
 8004a5a:	f001 fb45 	bl	80060e8 <_localeconv_r>
 8004a5e:	f8d0 a000 	ldr.w	sl, [r0]
 8004a62:	4650      	mov	r0, sl
 8004a64:	f7fb fbb4 	bl	80001d0 <strlen>
 8004a68:	2300      	movs	r3, #0
 8004a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	9305      	str	r3, [sp, #20]
 8004a70:	f8d8 3000 	ldr.w	r3, [r8]
 8004a74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004a78:	3307      	adds	r3, #7
 8004a7a:	f023 0307 	bic.w	r3, r3, #7
 8004a7e:	f103 0208 	add.w	r2, r3, #8
 8004a82:	f8c8 2000 	str.w	r2, [r8]
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004a92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a96:	9307      	str	r3, [sp, #28]
 8004a98:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a9c:	ee08 0a10 	vmov	s16, r0
 8004aa0:	4b9f      	ldr	r3, [pc, #636]	; (8004d20 <_printf_float+0x2dc>)
 8004aa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aaa:	f7fc f83f 	bl	8000b2c <__aeabi_dcmpun>
 8004aae:	bb88      	cbnz	r0, 8004b14 <_printf_float+0xd0>
 8004ab0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ab4:	4b9a      	ldr	r3, [pc, #616]	; (8004d20 <_printf_float+0x2dc>)
 8004ab6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aba:	f7fc f819 	bl	8000af0 <__aeabi_dcmple>
 8004abe:	bb48      	cbnz	r0, 8004b14 <_printf_float+0xd0>
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	4640      	mov	r0, r8
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	f7fc f808 	bl	8000adc <__aeabi_dcmplt>
 8004acc:	b110      	cbz	r0, 8004ad4 <_printf_float+0x90>
 8004ace:	232d      	movs	r3, #45	; 0x2d
 8004ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad4:	4b93      	ldr	r3, [pc, #588]	; (8004d24 <_printf_float+0x2e0>)
 8004ad6:	4894      	ldr	r0, [pc, #592]	; (8004d28 <_printf_float+0x2e4>)
 8004ad8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004adc:	bf94      	ite	ls
 8004ade:	4698      	movls	r8, r3
 8004ae0:	4680      	movhi	r8, r0
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	6123      	str	r3, [r4, #16]
 8004ae6:	9b05      	ldr	r3, [sp, #20]
 8004ae8:	f023 0204 	bic.w	r2, r3, #4
 8004aec:	6022      	str	r2, [r4, #0]
 8004aee:	f04f 0900 	mov.w	r9, #0
 8004af2:	9700      	str	r7, [sp, #0]
 8004af4:	4633      	mov	r3, r6
 8004af6:	aa0b      	add	r2, sp, #44	; 0x2c
 8004af8:	4621      	mov	r1, r4
 8004afa:	4628      	mov	r0, r5
 8004afc:	f000 f9d8 	bl	8004eb0 <_printf_common>
 8004b00:	3001      	adds	r0, #1
 8004b02:	f040 8090 	bne.w	8004c26 <_printf_float+0x1e2>
 8004b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b0a:	b00d      	add	sp, #52	; 0x34
 8004b0c:	ecbd 8b02 	vpop	{d8}
 8004b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b14:	4642      	mov	r2, r8
 8004b16:	464b      	mov	r3, r9
 8004b18:	4640      	mov	r0, r8
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	f7fc f806 	bl	8000b2c <__aeabi_dcmpun>
 8004b20:	b140      	cbz	r0, 8004b34 <_printf_float+0xf0>
 8004b22:	464b      	mov	r3, r9
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bfbc      	itt	lt
 8004b28:	232d      	movlt	r3, #45	; 0x2d
 8004b2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b2e:	487f      	ldr	r0, [pc, #508]	; (8004d2c <_printf_float+0x2e8>)
 8004b30:	4b7f      	ldr	r3, [pc, #508]	; (8004d30 <_printf_float+0x2ec>)
 8004b32:	e7d1      	b.n	8004ad8 <_printf_float+0x94>
 8004b34:	6863      	ldr	r3, [r4, #4]
 8004b36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004b3a:	9206      	str	r2, [sp, #24]
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	d13f      	bne.n	8004bc0 <_printf_float+0x17c>
 8004b40:	2306      	movs	r3, #6
 8004b42:	6063      	str	r3, [r4, #4]
 8004b44:	9b05      	ldr	r3, [sp, #20]
 8004b46:	6861      	ldr	r1, [r4, #4]
 8004b48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	9303      	str	r3, [sp, #12]
 8004b50:	ab0a      	add	r3, sp, #40	; 0x28
 8004b52:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004b56:	ab09      	add	r3, sp, #36	; 0x24
 8004b58:	ec49 8b10 	vmov	d0, r8, r9
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	6022      	str	r2, [r4, #0]
 8004b60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b64:	4628      	mov	r0, r5
 8004b66:	f7ff fecd 	bl	8004904 <__cvt>
 8004b6a:	9b06      	ldr	r3, [sp, #24]
 8004b6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b6e:	2b47      	cmp	r3, #71	; 0x47
 8004b70:	4680      	mov	r8, r0
 8004b72:	d108      	bne.n	8004b86 <_printf_float+0x142>
 8004b74:	1cc8      	adds	r0, r1, #3
 8004b76:	db02      	blt.n	8004b7e <_printf_float+0x13a>
 8004b78:	6863      	ldr	r3, [r4, #4]
 8004b7a:	4299      	cmp	r1, r3
 8004b7c:	dd41      	ble.n	8004c02 <_printf_float+0x1be>
 8004b7e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004b82:	fa5f fb8b 	uxtb.w	fp, fp
 8004b86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b8a:	d820      	bhi.n	8004bce <_printf_float+0x18a>
 8004b8c:	3901      	subs	r1, #1
 8004b8e:	465a      	mov	r2, fp
 8004b90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b94:	9109      	str	r1, [sp, #36]	; 0x24
 8004b96:	f7ff ff17 	bl	80049c8 <__exponent>
 8004b9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b9c:	1813      	adds	r3, r2, r0
 8004b9e:	2a01      	cmp	r2, #1
 8004ba0:	4681      	mov	r9, r0
 8004ba2:	6123      	str	r3, [r4, #16]
 8004ba4:	dc02      	bgt.n	8004bac <_printf_float+0x168>
 8004ba6:	6822      	ldr	r2, [r4, #0]
 8004ba8:	07d2      	lsls	r2, r2, #31
 8004baa:	d501      	bpl.n	8004bb0 <_printf_float+0x16c>
 8004bac:	3301      	adds	r3, #1
 8004bae:	6123      	str	r3, [r4, #16]
 8004bb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d09c      	beq.n	8004af2 <_printf_float+0xae>
 8004bb8:	232d      	movs	r3, #45	; 0x2d
 8004bba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bbe:	e798      	b.n	8004af2 <_printf_float+0xae>
 8004bc0:	9a06      	ldr	r2, [sp, #24]
 8004bc2:	2a47      	cmp	r2, #71	; 0x47
 8004bc4:	d1be      	bne.n	8004b44 <_printf_float+0x100>
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1bc      	bne.n	8004b44 <_printf_float+0x100>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e7b9      	b.n	8004b42 <_printf_float+0xfe>
 8004bce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004bd2:	d118      	bne.n	8004c06 <_printf_float+0x1c2>
 8004bd4:	2900      	cmp	r1, #0
 8004bd6:	6863      	ldr	r3, [r4, #4]
 8004bd8:	dd0b      	ble.n	8004bf2 <_printf_float+0x1ae>
 8004bda:	6121      	str	r1, [r4, #16]
 8004bdc:	b913      	cbnz	r3, 8004be4 <_printf_float+0x1a0>
 8004bde:	6822      	ldr	r2, [r4, #0]
 8004be0:	07d0      	lsls	r0, r2, #31
 8004be2:	d502      	bpl.n	8004bea <_printf_float+0x1a6>
 8004be4:	3301      	adds	r3, #1
 8004be6:	440b      	add	r3, r1
 8004be8:	6123      	str	r3, [r4, #16]
 8004bea:	65a1      	str	r1, [r4, #88]	; 0x58
 8004bec:	f04f 0900 	mov.w	r9, #0
 8004bf0:	e7de      	b.n	8004bb0 <_printf_float+0x16c>
 8004bf2:	b913      	cbnz	r3, 8004bfa <_printf_float+0x1b6>
 8004bf4:	6822      	ldr	r2, [r4, #0]
 8004bf6:	07d2      	lsls	r2, r2, #31
 8004bf8:	d501      	bpl.n	8004bfe <_printf_float+0x1ba>
 8004bfa:	3302      	adds	r3, #2
 8004bfc:	e7f4      	b.n	8004be8 <_printf_float+0x1a4>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e7f2      	b.n	8004be8 <_printf_float+0x1a4>
 8004c02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c08:	4299      	cmp	r1, r3
 8004c0a:	db05      	blt.n	8004c18 <_printf_float+0x1d4>
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	6121      	str	r1, [r4, #16]
 8004c10:	07d8      	lsls	r0, r3, #31
 8004c12:	d5ea      	bpl.n	8004bea <_printf_float+0x1a6>
 8004c14:	1c4b      	adds	r3, r1, #1
 8004c16:	e7e7      	b.n	8004be8 <_printf_float+0x1a4>
 8004c18:	2900      	cmp	r1, #0
 8004c1a:	bfd4      	ite	le
 8004c1c:	f1c1 0202 	rsble	r2, r1, #2
 8004c20:	2201      	movgt	r2, #1
 8004c22:	4413      	add	r3, r2
 8004c24:	e7e0      	b.n	8004be8 <_printf_float+0x1a4>
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	055a      	lsls	r2, r3, #21
 8004c2a:	d407      	bmi.n	8004c3c <_printf_float+0x1f8>
 8004c2c:	6923      	ldr	r3, [r4, #16]
 8004c2e:	4642      	mov	r2, r8
 8004c30:	4631      	mov	r1, r6
 8004c32:	4628      	mov	r0, r5
 8004c34:	47b8      	blx	r7
 8004c36:	3001      	adds	r0, #1
 8004c38:	d12c      	bne.n	8004c94 <_printf_float+0x250>
 8004c3a:	e764      	b.n	8004b06 <_printf_float+0xc2>
 8004c3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c40:	f240 80e0 	bls.w	8004e04 <_printf_float+0x3c0>
 8004c44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f7fb ff3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c50:	2800      	cmp	r0, #0
 8004c52:	d034      	beq.n	8004cbe <_printf_float+0x27a>
 8004c54:	4a37      	ldr	r2, [pc, #220]	; (8004d34 <_printf_float+0x2f0>)
 8004c56:	2301      	movs	r3, #1
 8004c58:	4631      	mov	r1, r6
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	47b8      	blx	r7
 8004c5e:	3001      	adds	r0, #1
 8004c60:	f43f af51 	beq.w	8004b06 <_printf_float+0xc2>
 8004c64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	db02      	blt.n	8004c72 <_printf_float+0x22e>
 8004c6c:	6823      	ldr	r3, [r4, #0]
 8004c6e:	07d8      	lsls	r0, r3, #31
 8004c70:	d510      	bpl.n	8004c94 <_printf_float+0x250>
 8004c72:	ee18 3a10 	vmov	r3, s16
 8004c76:	4652      	mov	r2, sl
 8004c78:	4631      	mov	r1, r6
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	47b8      	blx	r7
 8004c7e:	3001      	adds	r0, #1
 8004c80:	f43f af41 	beq.w	8004b06 <_printf_float+0xc2>
 8004c84:	f04f 0800 	mov.w	r8, #0
 8004c88:	f104 091a 	add.w	r9, r4, #26
 8004c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	4543      	cmp	r3, r8
 8004c92:	dc09      	bgt.n	8004ca8 <_printf_float+0x264>
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	079b      	lsls	r3, r3, #30
 8004c98:	f100 8105 	bmi.w	8004ea6 <_printf_float+0x462>
 8004c9c:	68e0      	ldr	r0, [r4, #12]
 8004c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ca0:	4298      	cmp	r0, r3
 8004ca2:	bfb8      	it	lt
 8004ca4:	4618      	movlt	r0, r3
 8004ca6:	e730      	b.n	8004b0a <_printf_float+0xc6>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	464a      	mov	r2, r9
 8004cac:	4631      	mov	r1, r6
 8004cae:	4628      	mov	r0, r5
 8004cb0:	47b8      	blx	r7
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	f43f af27 	beq.w	8004b06 <_printf_float+0xc2>
 8004cb8:	f108 0801 	add.w	r8, r8, #1
 8004cbc:	e7e6      	b.n	8004c8c <_printf_float+0x248>
 8004cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	dc39      	bgt.n	8004d38 <_printf_float+0x2f4>
 8004cc4:	4a1b      	ldr	r2, [pc, #108]	; (8004d34 <_printf_float+0x2f0>)
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	4631      	mov	r1, r6
 8004cca:	4628      	mov	r0, r5
 8004ccc:	47b8      	blx	r7
 8004cce:	3001      	adds	r0, #1
 8004cd0:	f43f af19 	beq.w	8004b06 <_printf_float+0xc2>
 8004cd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	d102      	bne.n	8004ce2 <_printf_float+0x29e>
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	07d9      	lsls	r1, r3, #31
 8004ce0:	d5d8      	bpl.n	8004c94 <_printf_float+0x250>
 8004ce2:	ee18 3a10 	vmov	r3, s16
 8004ce6:	4652      	mov	r2, sl
 8004ce8:	4631      	mov	r1, r6
 8004cea:	4628      	mov	r0, r5
 8004cec:	47b8      	blx	r7
 8004cee:	3001      	adds	r0, #1
 8004cf0:	f43f af09 	beq.w	8004b06 <_printf_float+0xc2>
 8004cf4:	f04f 0900 	mov.w	r9, #0
 8004cf8:	f104 0a1a 	add.w	sl, r4, #26
 8004cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cfe:	425b      	negs	r3, r3
 8004d00:	454b      	cmp	r3, r9
 8004d02:	dc01      	bgt.n	8004d08 <_printf_float+0x2c4>
 8004d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d06:	e792      	b.n	8004c2e <_printf_float+0x1ea>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	4652      	mov	r2, sl
 8004d0c:	4631      	mov	r1, r6
 8004d0e:	4628      	mov	r0, r5
 8004d10:	47b8      	blx	r7
 8004d12:	3001      	adds	r0, #1
 8004d14:	f43f aef7 	beq.w	8004b06 <_printf_float+0xc2>
 8004d18:	f109 0901 	add.w	r9, r9, #1
 8004d1c:	e7ee      	b.n	8004cfc <_printf_float+0x2b8>
 8004d1e:	bf00      	nop
 8004d20:	7fefffff 	.word	0x7fefffff
 8004d24:	08007b08 	.word	0x08007b08
 8004d28:	08007b0c 	.word	0x08007b0c
 8004d2c:	08007b14 	.word	0x08007b14
 8004d30:	08007b10 	.word	0x08007b10
 8004d34:	08007b18 	.word	0x08007b18
 8004d38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	bfa8      	it	ge
 8004d40:	461a      	movge	r2, r3
 8004d42:	2a00      	cmp	r2, #0
 8004d44:	4691      	mov	r9, r2
 8004d46:	dc37      	bgt.n	8004db8 <_printf_float+0x374>
 8004d48:	f04f 0b00 	mov.w	fp, #0
 8004d4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d50:	f104 021a 	add.w	r2, r4, #26
 8004d54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d56:	9305      	str	r3, [sp, #20]
 8004d58:	eba3 0309 	sub.w	r3, r3, r9
 8004d5c:	455b      	cmp	r3, fp
 8004d5e:	dc33      	bgt.n	8004dc8 <_printf_float+0x384>
 8004d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d64:	429a      	cmp	r2, r3
 8004d66:	db3b      	blt.n	8004de0 <_printf_float+0x39c>
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	07da      	lsls	r2, r3, #31
 8004d6c:	d438      	bmi.n	8004de0 <_printf_float+0x39c>
 8004d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d70:	9a05      	ldr	r2, [sp, #20]
 8004d72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d74:	1a9a      	subs	r2, r3, r2
 8004d76:	eba3 0901 	sub.w	r9, r3, r1
 8004d7a:	4591      	cmp	r9, r2
 8004d7c:	bfa8      	it	ge
 8004d7e:	4691      	movge	r9, r2
 8004d80:	f1b9 0f00 	cmp.w	r9, #0
 8004d84:	dc35      	bgt.n	8004df2 <_printf_float+0x3ae>
 8004d86:	f04f 0800 	mov.w	r8, #0
 8004d8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d8e:	f104 0a1a 	add.w	sl, r4, #26
 8004d92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	eba3 0309 	sub.w	r3, r3, r9
 8004d9c:	4543      	cmp	r3, r8
 8004d9e:	f77f af79 	ble.w	8004c94 <_printf_float+0x250>
 8004da2:	2301      	movs	r3, #1
 8004da4:	4652      	mov	r2, sl
 8004da6:	4631      	mov	r1, r6
 8004da8:	4628      	mov	r0, r5
 8004daa:	47b8      	blx	r7
 8004dac:	3001      	adds	r0, #1
 8004dae:	f43f aeaa 	beq.w	8004b06 <_printf_float+0xc2>
 8004db2:	f108 0801 	add.w	r8, r8, #1
 8004db6:	e7ec      	b.n	8004d92 <_printf_float+0x34e>
 8004db8:	4613      	mov	r3, r2
 8004dba:	4631      	mov	r1, r6
 8004dbc:	4642      	mov	r2, r8
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	47b8      	blx	r7
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	d1c0      	bne.n	8004d48 <_printf_float+0x304>
 8004dc6:	e69e      	b.n	8004b06 <_printf_float+0xc2>
 8004dc8:	2301      	movs	r3, #1
 8004dca:	4631      	mov	r1, r6
 8004dcc:	4628      	mov	r0, r5
 8004dce:	9205      	str	r2, [sp, #20]
 8004dd0:	47b8      	blx	r7
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	f43f ae97 	beq.w	8004b06 <_printf_float+0xc2>
 8004dd8:	9a05      	ldr	r2, [sp, #20]
 8004dda:	f10b 0b01 	add.w	fp, fp, #1
 8004dde:	e7b9      	b.n	8004d54 <_printf_float+0x310>
 8004de0:	ee18 3a10 	vmov	r3, s16
 8004de4:	4652      	mov	r2, sl
 8004de6:	4631      	mov	r1, r6
 8004de8:	4628      	mov	r0, r5
 8004dea:	47b8      	blx	r7
 8004dec:	3001      	adds	r0, #1
 8004dee:	d1be      	bne.n	8004d6e <_printf_float+0x32a>
 8004df0:	e689      	b.n	8004b06 <_printf_float+0xc2>
 8004df2:	9a05      	ldr	r2, [sp, #20]
 8004df4:	464b      	mov	r3, r9
 8004df6:	4442      	add	r2, r8
 8004df8:	4631      	mov	r1, r6
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	47b8      	blx	r7
 8004dfe:	3001      	adds	r0, #1
 8004e00:	d1c1      	bne.n	8004d86 <_printf_float+0x342>
 8004e02:	e680      	b.n	8004b06 <_printf_float+0xc2>
 8004e04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e06:	2a01      	cmp	r2, #1
 8004e08:	dc01      	bgt.n	8004e0e <_printf_float+0x3ca>
 8004e0a:	07db      	lsls	r3, r3, #31
 8004e0c:	d538      	bpl.n	8004e80 <_printf_float+0x43c>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	4642      	mov	r2, r8
 8004e12:	4631      	mov	r1, r6
 8004e14:	4628      	mov	r0, r5
 8004e16:	47b8      	blx	r7
 8004e18:	3001      	adds	r0, #1
 8004e1a:	f43f ae74 	beq.w	8004b06 <_printf_float+0xc2>
 8004e1e:	ee18 3a10 	vmov	r3, s16
 8004e22:	4652      	mov	r2, sl
 8004e24:	4631      	mov	r1, r6
 8004e26:	4628      	mov	r0, r5
 8004e28:	47b8      	blx	r7
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	f43f ae6b 	beq.w	8004b06 <_printf_float+0xc2>
 8004e30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e34:	2200      	movs	r2, #0
 8004e36:	2300      	movs	r3, #0
 8004e38:	f7fb fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e3c:	b9d8      	cbnz	r0, 8004e76 <_printf_float+0x432>
 8004e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e40:	f108 0201 	add.w	r2, r8, #1
 8004e44:	3b01      	subs	r3, #1
 8004e46:	4631      	mov	r1, r6
 8004e48:	4628      	mov	r0, r5
 8004e4a:	47b8      	blx	r7
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d10e      	bne.n	8004e6e <_printf_float+0x42a>
 8004e50:	e659      	b.n	8004b06 <_printf_float+0xc2>
 8004e52:	2301      	movs	r3, #1
 8004e54:	4652      	mov	r2, sl
 8004e56:	4631      	mov	r1, r6
 8004e58:	4628      	mov	r0, r5
 8004e5a:	47b8      	blx	r7
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	f43f ae52 	beq.w	8004b06 <_printf_float+0xc2>
 8004e62:	f108 0801 	add.w	r8, r8, #1
 8004e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	4543      	cmp	r3, r8
 8004e6c:	dcf1      	bgt.n	8004e52 <_printf_float+0x40e>
 8004e6e:	464b      	mov	r3, r9
 8004e70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e74:	e6dc      	b.n	8004c30 <_printf_float+0x1ec>
 8004e76:	f04f 0800 	mov.w	r8, #0
 8004e7a:	f104 0a1a 	add.w	sl, r4, #26
 8004e7e:	e7f2      	b.n	8004e66 <_printf_float+0x422>
 8004e80:	2301      	movs	r3, #1
 8004e82:	4642      	mov	r2, r8
 8004e84:	e7df      	b.n	8004e46 <_printf_float+0x402>
 8004e86:	2301      	movs	r3, #1
 8004e88:	464a      	mov	r2, r9
 8004e8a:	4631      	mov	r1, r6
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	47b8      	blx	r7
 8004e90:	3001      	adds	r0, #1
 8004e92:	f43f ae38 	beq.w	8004b06 <_printf_float+0xc2>
 8004e96:	f108 0801 	add.w	r8, r8, #1
 8004e9a:	68e3      	ldr	r3, [r4, #12]
 8004e9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e9e:	1a5b      	subs	r3, r3, r1
 8004ea0:	4543      	cmp	r3, r8
 8004ea2:	dcf0      	bgt.n	8004e86 <_printf_float+0x442>
 8004ea4:	e6fa      	b.n	8004c9c <_printf_float+0x258>
 8004ea6:	f04f 0800 	mov.w	r8, #0
 8004eaa:	f104 0919 	add.w	r9, r4, #25
 8004eae:	e7f4      	b.n	8004e9a <_printf_float+0x456>

08004eb0 <_printf_common>:
 8004eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb4:	4616      	mov	r6, r2
 8004eb6:	4699      	mov	r9, r3
 8004eb8:	688a      	ldr	r2, [r1, #8]
 8004eba:	690b      	ldr	r3, [r1, #16]
 8004ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	bfb8      	it	lt
 8004ec4:	4613      	movlt	r3, r2
 8004ec6:	6033      	str	r3, [r6, #0]
 8004ec8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ecc:	4607      	mov	r7, r0
 8004ece:	460c      	mov	r4, r1
 8004ed0:	b10a      	cbz	r2, 8004ed6 <_printf_common+0x26>
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	6033      	str	r3, [r6, #0]
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	0699      	lsls	r1, r3, #26
 8004eda:	bf42      	ittt	mi
 8004edc:	6833      	ldrmi	r3, [r6, #0]
 8004ede:	3302      	addmi	r3, #2
 8004ee0:	6033      	strmi	r3, [r6, #0]
 8004ee2:	6825      	ldr	r5, [r4, #0]
 8004ee4:	f015 0506 	ands.w	r5, r5, #6
 8004ee8:	d106      	bne.n	8004ef8 <_printf_common+0x48>
 8004eea:	f104 0a19 	add.w	sl, r4, #25
 8004eee:	68e3      	ldr	r3, [r4, #12]
 8004ef0:	6832      	ldr	r2, [r6, #0]
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	42ab      	cmp	r3, r5
 8004ef6:	dc26      	bgt.n	8004f46 <_printf_common+0x96>
 8004ef8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004efc:	1e13      	subs	r3, r2, #0
 8004efe:	6822      	ldr	r2, [r4, #0]
 8004f00:	bf18      	it	ne
 8004f02:	2301      	movne	r3, #1
 8004f04:	0692      	lsls	r2, r2, #26
 8004f06:	d42b      	bmi.n	8004f60 <_printf_common+0xb0>
 8004f08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	4638      	mov	r0, r7
 8004f10:	47c0      	blx	r8
 8004f12:	3001      	adds	r0, #1
 8004f14:	d01e      	beq.n	8004f54 <_printf_common+0xa4>
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	68e5      	ldr	r5, [r4, #12]
 8004f1a:	6832      	ldr	r2, [r6, #0]
 8004f1c:	f003 0306 	and.w	r3, r3, #6
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	bf08      	it	eq
 8004f24:	1aad      	subeq	r5, r5, r2
 8004f26:	68a3      	ldr	r3, [r4, #8]
 8004f28:	6922      	ldr	r2, [r4, #16]
 8004f2a:	bf0c      	ite	eq
 8004f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f30:	2500      	movne	r5, #0
 8004f32:	4293      	cmp	r3, r2
 8004f34:	bfc4      	itt	gt
 8004f36:	1a9b      	subgt	r3, r3, r2
 8004f38:	18ed      	addgt	r5, r5, r3
 8004f3a:	2600      	movs	r6, #0
 8004f3c:	341a      	adds	r4, #26
 8004f3e:	42b5      	cmp	r5, r6
 8004f40:	d11a      	bne.n	8004f78 <_printf_common+0xc8>
 8004f42:	2000      	movs	r0, #0
 8004f44:	e008      	b.n	8004f58 <_printf_common+0xa8>
 8004f46:	2301      	movs	r3, #1
 8004f48:	4652      	mov	r2, sl
 8004f4a:	4649      	mov	r1, r9
 8004f4c:	4638      	mov	r0, r7
 8004f4e:	47c0      	blx	r8
 8004f50:	3001      	adds	r0, #1
 8004f52:	d103      	bne.n	8004f5c <_printf_common+0xac>
 8004f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f5c:	3501      	adds	r5, #1
 8004f5e:	e7c6      	b.n	8004eee <_printf_common+0x3e>
 8004f60:	18e1      	adds	r1, r4, r3
 8004f62:	1c5a      	adds	r2, r3, #1
 8004f64:	2030      	movs	r0, #48	; 0x30
 8004f66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f6a:	4422      	add	r2, r4
 8004f6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f74:	3302      	adds	r3, #2
 8004f76:	e7c7      	b.n	8004f08 <_printf_common+0x58>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	4622      	mov	r2, r4
 8004f7c:	4649      	mov	r1, r9
 8004f7e:	4638      	mov	r0, r7
 8004f80:	47c0      	blx	r8
 8004f82:	3001      	adds	r0, #1
 8004f84:	d0e6      	beq.n	8004f54 <_printf_common+0xa4>
 8004f86:	3601      	adds	r6, #1
 8004f88:	e7d9      	b.n	8004f3e <_printf_common+0x8e>
	...

08004f8c <_printf_i>:
 8004f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f90:	7e0f      	ldrb	r7, [r1, #24]
 8004f92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f94:	2f78      	cmp	r7, #120	; 0x78
 8004f96:	4691      	mov	r9, r2
 8004f98:	4680      	mov	r8, r0
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	469a      	mov	sl, r3
 8004f9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fa2:	d807      	bhi.n	8004fb4 <_printf_i+0x28>
 8004fa4:	2f62      	cmp	r7, #98	; 0x62
 8004fa6:	d80a      	bhi.n	8004fbe <_printf_i+0x32>
 8004fa8:	2f00      	cmp	r7, #0
 8004faa:	f000 80d8 	beq.w	800515e <_printf_i+0x1d2>
 8004fae:	2f58      	cmp	r7, #88	; 0x58
 8004fb0:	f000 80a3 	beq.w	80050fa <_printf_i+0x16e>
 8004fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fbc:	e03a      	b.n	8005034 <_printf_i+0xa8>
 8004fbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fc2:	2b15      	cmp	r3, #21
 8004fc4:	d8f6      	bhi.n	8004fb4 <_printf_i+0x28>
 8004fc6:	a101      	add	r1, pc, #4	; (adr r1, 8004fcc <_printf_i+0x40>)
 8004fc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fcc:	08005025 	.word	0x08005025
 8004fd0:	08005039 	.word	0x08005039
 8004fd4:	08004fb5 	.word	0x08004fb5
 8004fd8:	08004fb5 	.word	0x08004fb5
 8004fdc:	08004fb5 	.word	0x08004fb5
 8004fe0:	08004fb5 	.word	0x08004fb5
 8004fe4:	08005039 	.word	0x08005039
 8004fe8:	08004fb5 	.word	0x08004fb5
 8004fec:	08004fb5 	.word	0x08004fb5
 8004ff0:	08004fb5 	.word	0x08004fb5
 8004ff4:	08004fb5 	.word	0x08004fb5
 8004ff8:	08005145 	.word	0x08005145
 8004ffc:	08005069 	.word	0x08005069
 8005000:	08005127 	.word	0x08005127
 8005004:	08004fb5 	.word	0x08004fb5
 8005008:	08004fb5 	.word	0x08004fb5
 800500c:	08005167 	.word	0x08005167
 8005010:	08004fb5 	.word	0x08004fb5
 8005014:	08005069 	.word	0x08005069
 8005018:	08004fb5 	.word	0x08004fb5
 800501c:	08004fb5 	.word	0x08004fb5
 8005020:	0800512f 	.word	0x0800512f
 8005024:	682b      	ldr	r3, [r5, #0]
 8005026:	1d1a      	adds	r2, r3, #4
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	602a      	str	r2, [r5, #0]
 800502c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005034:	2301      	movs	r3, #1
 8005036:	e0a3      	b.n	8005180 <_printf_i+0x1f4>
 8005038:	6820      	ldr	r0, [r4, #0]
 800503a:	6829      	ldr	r1, [r5, #0]
 800503c:	0606      	lsls	r6, r0, #24
 800503e:	f101 0304 	add.w	r3, r1, #4
 8005042:	d50a      	bpl.n	800505a <_printf_i+0xce>
 8005044:	680e      	ldr	r6, [r1, #0]
 8005046:	602b      	str	r3, [r5, #0]
 8005048:	2e00      	cmp	r6, #0
 800504a:	da03      	bge.n	8005054 <_printf_i+0xc8>
 800504c:	232d      	movs	r3, #45	; 0x2d
 800504e:	4276      	negs	r6, r6
 8005050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005054:	485e      	ldr	r0, [pc, #376]	; (80051d0 <_printf_i+0x244>)
 8005056:	230a      	movs	r3, #10
 8005058:	e019      	b.n	800508e <_printf_i+0x102>
 800505a:	680e      	ldr	r6, [r1, #0]
 800505c:	602b      	str	r3, [r5, #0]
 800505e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005062:	bf18      	it	ne
 8005064:	b236      	sxthne	r6, r6
 8005066:	e7ef      	b.n	8005048 <_printf_i+0xbc>
 8005068:	682b      	ldr	r3, [r5, #0]
 800506a:	6820      	ldr	r0, [r4, #0]
 800506c:	1d19      	adds	r1, r3, #4
 800506e:	6029      	str	r1, [r5, #0]
 8005070:	0601      	lsls	r1, r0, #24
 8005072:	d501      	bpl.n	8005078 <_printf_i+0xec>
 8005074:	681e      	ldr	r6, [r3, #0]
 8005076:	e002      	b.n	800507e <_printf_i+0xf2>
 8005078:	0646      	lsls	r6, r0, #25
 800507a:	d5fb      	bpl.n	8005074 <_printf_i+0xe8>
 800507c:	881e      	ldrh	r6, [r3, #0]
 800507e:	4854      	ldr	r0, [pc, #336]	; (80051d0 <_printf_i+0x244>)
 8005080:	2f6f      	cmp	r7, #111	; 0x6f
 8005082:	bf0c      	ite	eq
 8005084:	2308      	moveq	r3, #8
 8005086:	230a      	movne	r3, #10
 8005088:	2100      	movs	r1, #0
 800508a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800508e:	6865      	ldr	r5, [r4, #4]
 8005090:	60a5      	str	r5, [r4, #8]
 8005092:	2d00      	cmp	r5, #0
 8005094:	bfa2      	ittt	ge
 8005096:	6821      	ldrge	r1, [r4, #0]
 8005098:	f021 0104 	bicge.w	r1, r1, #4
 800509c:	6021      	strge	r1, [r4, #0]
 800509e:	b90e      	cbnz	r6, 80050a4 <_printf_i+0x118>
 80050a0:	2d00      	cmp	r5, #0
 80050a2:	d04d      	beq.n	8005140 <_printf_i+0x1b4>
 80050a4:	4615      	mov	r5, r2
 80050a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80050aa:	fb03 6711 	mls	r7, r3, r1, r6
 80050ae:	5dc7      	ldrb	r7, [r0, r7]
 80050b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050b4:	4637      	mov	r7, r6
 80050b6:	42bb      	cmp	r3, r7
 80050b8:	460e      	mov	r6, r1
 80050ba:	d9f4      	bls.n	80050a6 <_printf_i+0x11a>
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d10b      	bne.n	80050d8 <_printf_i+0x14c>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	07de      	lsls	r6, r3, #31
 80050c4:	d508      	bpl.n	80050d8 <_printf_i+0x14c>
 80050c6:	6923      	ldr	r3, [r4, #16]
 80050c8:	6861      	ldr	r1, [r4, #4]
 80050ca:	4299      	cmp	r1, r3
 80050cc:	bfde      	ittt	le
 80050ce:	2330      	movle	r3, #48	; 0x30
 80050d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050d4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80050d8:	1b52      	subs	r2, r2, r5
 80050da:	6122      	str	r2, [r4, #16]
 80050dc:	f8cd a000 	str.w	sl, [sp]
 80050e0:	464b      	mov	r3, r9
 80050e2:	aa03      	add	r2, sp, #12
 80050e4:	4621      	mov	r1, r4
 80050e6:	4640      	mov	r0, r8
 80050e8:	f7ff fee2 	bl	8004eb0 <_printf_common>
 80050ec:	3001      	adds	r0, #1
 80050ee:	d14c      	bne.n	800518a <_printf_i+0x1fe>
 80050f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050f4:	b004      	add	sp, #16
 80050f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050fa:	4835      	ldr	r0, [pc, #212]	; (80051d0 <_printf_i+0x244>)
 80050fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005100:	6829      	ldr	r1, [r5, #0]
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	f851 6b04 	ldr.w	r6, [r1], #4
 8005108:	6029      	str	r1, [r5, #0]
 800510a:	061d      	lsls	r5, r3, #24
 800510c:	d514      	bpl.n	8005138 <_printf_i+0x1ac>
 800510e:	07df      	lsls	r7, r3, #31
 8005110:	bf44      	itt	mi
 8005112:	f043 0320 	orrmi.w	r3, r3, #32
 8005116:	6023      	strmi	r3, [r4, #0]
 8005118:	b91e      	cbnz	r6, 8005122 <_printf_i+0x196>
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	f023 0320 	bic.w	r3, r3, #32
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	2310      	movs	r3, #16
 8005124:	e7b0      	b.n	8005088 <_printf_i+0xfc>
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	f043 0320 	orr.w	r3, r3, #32
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	2378      	movs	r3, #120	; 0x78
 8005130:	4828      	ldr	r0, [pc, #160]	; (80051d4 <_printf_i+0x248>)
 8005132:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005136:	e7e3      	b.n	8005100 <_printf_i+0x174>
 8005138:	0659      	lsls	r1, r3, #25
 800513a:	bf48      	it	mi
 800513c:	b2b6      	uxthmi	r6, r6
 800513e:	e7e6      	b.n	800510e <_printf_i+0x182>
 8005140:	4615      	mov	r5, r2
 8005142:	e7bb      	b.n	80050bc <_printf_i+0x130>
 8005144:	682b      	ldr	r3, [r5, #0]
 8005146:	6826      	ldr	r6, [r4, #0]
 8005148:	6961      	ldr	r1, [r4, #20]
 800514a:	1d18      	adds	r0, r3, #4
 800514c:	6028      	str	r0, [r5, #0]
 800514e:	0635      	lsls	r5, r6, #24
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	d501      	bpl.n	8005158 <_printf_i+0x1cc>
 8005154:	6019      	str	r1, [r3, #0]
 8005156:	e002      	b.n	800515e <_printf_i+0x1d2>
 8005158:	0670      	lsls	r0, r6, #25
 800515a:	d5fb      	bpl.n	8005154 <_printf_i+0x1c8>
 800515c:	8019      	strh	r1, [r3, #0]
 800515e:	2300      	movs	r3, #0
 8005160:	6123      	str	r3, [r4, #16]
 8005162:	4615      	mov	r5, r2
 8005164:	e7ba      	b.n	80050dc <_printf_i+0x150>
 8005166:	682b      	ldr	r3, [r5, #0]
 8005168:	1d1a      	adds	r2, r3, #4
 800516a:	602a      	str	r2, [r5, #0]
 800516c:	681d      	ldr	r5, [r3, #0]
 800516e:	6862      	ldr	r2, [r4, #4]
 8005170:	2100      	movs	r1, #0
 8005172:	4628      	mov	r0, r5
 8005174:	f7fb f834 	bl	80001e0 <memchr>
 8005178:	b108      	cbz	r0, 800517e <_printf_i+0x1f2>
 800517a:	1b40      	subs	r0, r0, r5
 800517c:	6060      	str	r0, [r4, #4]
 800517e:	6863      	ldr	r3, [r4, #4]
 8005180:	6123      	str	r3, [r4, #16]
 8005182:	2300      	movs	r3, #0
 8005184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005188:	e7a8      	b.n	80050dc <_printf_i+0x150>
 800518a:	6923      	ldr	r3, [r4, #16]
 800518c:	462a      	mov	r2, r5
 800518e:	4649      	mov	r1, r9
 8005190:	4640      	mov	r0, r8
 8005192:	47d0      	blx	sl
 8005194:	3001      	adds	r0, #1
 8005196:	d0ab      	beq.n	80050f0 <_printf_i+0x164>
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	079b      	lsls	r3, r3, #30
 800519c:	d413      	bmi.n	80051c6 <_printf_i+0x23a>
 800519e:	68e0      	ldr	r0, [r4, #12]
 80051a0:	9b03      	ldr	r3, [sp, #12]
 80051a2:	4298      	cmp	r0, r3
 80051a4:	bfb8      	it	lt
 80051a6:	4618      	movlt	r0, r3
 80051a8:	e7a4      	b.n	80050f4 <_printf_i+0x168>
 80051aa:	2301      	movs	r3, #1
 80051ac:	4632      	mov	r2, r6
 80051ae:	4649      	mov	r1, r9
 80051b0:	4640      	mov	r0, r8
 80051b2:	47d0      	blx	sl
 80051b4:	3001      	adds	r0, #1
 80051b6:	d09b      	beq.n	80050f0 <_printf_i+0x164>
 80051b8:	3501      	adds	r5, #1
 80051ba:	68e3      	ldr	r3, [r4, #12]
 80051bc:	9903      	ldr	r1, [sp, #12]
 80051be:	1a5b      	subs	r3, r3, r1
 80051c0:	42ab      	cmp	r3, r5
 80051c2:	dcf2      	bgt.n	80051aa <_printf_i+0x21e>
 80051c4:	e7eb      	b.n	800519e <_printf_i+0x212>
 80051c6:	2500      	movs	r5, #0
 80051c8:	f104 0619 	add.w	r6, r4, #25
 80051cc:	e7f5      	b.n	80051ba <_printf_i+0x22e>
 80051ce:	bf00      	nop
 80051d0:	08007b1a 	.word	0x08007b1a
 80051d4:	08007b2b 	.word	0x08007b2b

080051d8 <iprintf>:
 80051d8:	b40f      	push	{r0, r1, r2, r3}
 80051da:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <iprintf+0x2c>)
 80051dc:	b513      	push	{r0, r1, r4, lr}
 80051de:	681c      	ldr	r4, [r3, #0]
 80051e0:	b124      	cbz	r4, 80051ec <iprintf+0x14>
 80051e2:	69a3      	ldr	r3, [r4, #24]
 80051e4:	b913      	cbnz	r3, 80051ec <iprintf+0x14>
 80051e6:	4620      	mov	r0, r4
 80051e8:	f000 fee0 	bl	8005fac <__sinit>
 80051ec:	ab05      	add	r3, sp, #20
 80051ee:	9a04      	ldr	r2, [sp, #16]
 80051f0:	68a1      	ldr	r1, [r4, #8]
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	4620      	mov	r0, r4
 80051f6:	f001 fc39 	bl	8006a6c <_vfiprintf_r>
 80051fa:	b002      	add	sp, #8
 80051fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005200:	b004      	add	sp, #16
 8005202:	4770      	bx	lr
 8005204:	20000008 	.word	0x20000008

08005208 <quorem>:
 8005208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520c:	6903      	ldr	r3, [r0, #16]
 800520e:	690c      	ldr	r4, [r1, #16]
 8005210:	42a3      	cmp	r3, r4
 8005212:	4607      	mov	r7, r0
 8005214:	f2c0 8081 	blt.w	800531a <quorem+0x112>
 8005218:	3c01      	subs	r4, #1
 800521a:	f101 0814 	add.w	r8, r1, #20
 800521e:	f100 0514 	add.w	r5, r0, #20
 8005222:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800522c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005230:	3301      	adds	r3, #1
 8005232:	429a      	cmp	r2, r3
 8005234:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005238:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800523c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005240:	d331      	bcc.n	80052a6 <quorem+0x9e>
 8005242:	f04f 0e00 	mov.w	lr, #0
 8005246:	4640      	mov	r0, r8
 8005248:	46ac      	mov	ip, r5
 800524a:	46f2      	mov	sl, lr
 800524c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005250:	b293      	uxth	r3, r2
 8005252:	fb06 e303 	mla	r3, r6, r3, lr
 8005256:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800525a:	b29b      	uxth	r3, r3
 800525c:	ebaa 0303 	sub.w	r3, sl, r3
 8005260:	f8dc a000 	ldr.w	sl, [ip]
 8005264:	0c12      	lsrs	r2, r2, #16
 8005266:	fa13 f38a 	uxtah	r3, r3, sl
 800526a:	fb06 e202 	mla	r2, r6, r2, lr
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	9b00      	ldr	r3, [sp, #0]
 8005272:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005276:	b292      	uxth	r2, r2
 8005278:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800527c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005280:	f8bd 3000 	ldrh.w	r3, [sp]
 8005284:	4581      	cmp	r9, r0
 8005286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800528a:	f84c 3b04 	str.w	r3, [ip], #4
 800528e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005292:	d2db      	bcs.n	800524c <quorem+0x44>
 8005294:	f855 300b 	ldr.w	r3, [r5, fp]
 8005298:	b92b      	cbnz	r3, 80052a6 <quorem+0x9e>
 800529a:	9b01      	ldr	r3, [sp, #4]
 800529c:	3b04      	subs	r3, #4
 800529e:	429d      	cmp	r5, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	d32e      	bcc.n	8005302 <quorem+0xfa>
 80052a4:	613c      	str	r4, [r7, #16]
 80052a6:	4638      	mov	r0, r7
 80052a8:	f001 f9be 	bl	8006628 <__mcmp>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	db24      	blt.n	80052fa <quorem+0xf2>
 80052b0:	3601      	adds	r6, #1
 80052b2:	4628      	mov	r0, r5
 80052b4:	f04f 0c00 	mov.w	ip, #0
 80052b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80052bc:	f8d0 e000 	ldr.w	lr, [r0]
 80052c0:	b293      	uxth	r3, r2
 80052c2:	ebac 0303 	sub.w	r3, ip, r3
 80052c6:	0c12      	lsrs	r2, r2, #16
 80052c8:	fa13 f38e 	uxtah	r3, r3, lr
 80052cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80052d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052da:	45c1      	cmp	r9, r8
 80052dc:	f840 3b04 	str.w	r3, [r0], #4
 80052e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80052e4:	d2e8      	bcs.n	80052b8 <quorem+0xb0>
 80052e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052ee:	b922      	cbnz	r2, 80052fa <quorem+0xf2>
 80052f0:	3b04      	subs	r3, #4
 80052f2:	429d      	cmp	r5, r3
 80052f4:	461a      	mov	r2, r3
 80052f6:	d30a      	bcc.n	800530e <quorem+0x106>
 80052f8:	613c      	str	r4, [r7, #16]
 80052fa:	4630      	mov	r0, r6
 80052fc:	b003      	add	sp, #12
 80052fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005302:	6812      	ldr	r2, [r2, #0]
 8005304:	3b04      	subs	r3, #4
 8005306:	2a00      	cmp	r2, #0
 8005308:	d1cc      	bne.n	80052a4 <quorem+0x9c>
 800530a:	3c01      	subs	r4, #1
 800530c:	e7c7      	b.n	800529e <quorem+0x96>
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	3b04      	subs	r3, #4
 8005312:	2a00      	cmp	r2, #0
 8005314:	d1f0      	bne.n	80052f8 <quorem+0xf0>
 8005316:	3c01      	subs	r4, #1
 8005318:	e7eb      	b.n	80052f2 <quorem+0xea>
 800531a:	2000      	movs	r0, #0
 800531c:	e7ee      	b.n	80052fc <quorem+0xf4>
	...

08005320 <_dtoa_r>:
 8005320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005324:	ed2d 8b04 	vpush	{d8-d9}
 8005328:	ec57 6b10 	vmov	r6, r7, d0
 800532c:	b093      	sub	sp, #76	; 0x4c
 800532e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005330:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005334:	9106      	str	r1, [sp, #24]
 8005336:	ee10 aa10 	vmov	sl, s0
 800533a:	4604      	mov	r4, r0
 800533c:	9209      	str	r2, [sp, #36]	; 0x24
 800533e:	930c      	str	r3, [sp, #48]	; 0x30
 8005340:	46bb      	mov	fp, r7
 8005342:	b975      	cbnz	r5, 8005362 <_dtoa_r+0x42>
 8005344:	2010      	movs	r0, #16
 8005346:	f000 fed7 	bl	80060f8 <malloc>
 800534a:	4602      	mov	r2, r0
 800534c:	6260      	str	r0, [r4, #36]	; 0x24
 800534e:	b920      	cbnz	r0, 800535a <_dtoa_r+0x3a>
 8005350:	4ba7      	ldr	r3, [pc, #668]	; (80055f0 <_dtoa_r+0x2d0>)
 8005352:	21ea      	movs	r1, #234	; 0xea
 8005354:	48a7      	ldr	r0, [pc, #668]	; (80055f4 <_dtoa_r+0x2d4>)
 8005356:	f001 fddf 	bl	8006f18 <__assert_func>
 800535a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800535e:	6005      	str	r5, [r0, #0]
 8005360:	60c5      	str	r5, [r0, #12]
 8005362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005364:	6819      	ldr	r1, [r3, #0]
 8005366:	b151      	cbz	r1, 800537e <_dtoa_r+0x5e>
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	604a      	str	r2, [r1, #4]
 800536c:	2301      	movs	r3, #1
 800536e:	4093      	lsls	r3, r2
 8005370:	608b      	str	r3, [r1, #8]
 8005372:	4620      	mov	r0, r4
 8005374:	f000 ff16 	bl	80061a4 <_Bfree>
 8005378:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	1e3b      	subs	r3, r7, #0
 8005380:	bfaa      	itet	ge
 8005382:	2300      	movge	r3, #0
 8005384:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005388:	f8c8 3000 	strge.w	r3, [r8]
 800538c:	4b9a      	ldr	r3, [pc, #616]	; (80055f8 <_dtoa_r+0x2d8>)
 800538e:	bfbc      	itt	lt
 8005390:	2201      	movlt	r2, #1
 8005392:	f8c8 2000 	strlt.w	r2, [r8]
 8005396:	ea33 030b 	bics.w	r3, r3, fp
 800539a:	d11b      	bne.n	80053d4 <_dtoa_r+0xb4>
 800539c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800539e:	f242 730f 	movw	r3, #9999	; 0x270f
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80053a8:	4333      	orrs	r3, r6
 80053aa:	f000 8592 	beq.w	8005ed2 <_dtoa_r+0xbb2>
 80053ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053b0:	b963      	cbnz	r3, 80053cc <_dtoa_r+0xac>
 80053b2:	4b92      	ldr	r3, [pc, #584]	; (80055fc <_dtoa_r+0x2dc>)
 80053b4:	e022      	b.n	80053fc <_dtoa_r+0xdc>
 80053b6:	4b92      	ldr	r3, [pc, #584]	; (8005600 <_dtoa_r+0x2e0>)
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	3308      	adds	r3, #8
 80053bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80053be:	6013      	str	r3, [r2, #0]
 80053c0:	9801      	ldr	r0, [sp, #4]
 80053c2:	b013      	add	sp, #76	; 0x4c
 80053c4:	ecbd 8b04 	vpop	{d8-d9}
 80053c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053cc:	4b8b      	ldr	r3, [pc, #556]	; (80055fc <_dtoa_r+0x2dc>)
 80053ce:	9301      	str	r3, [sp, #4]
 80053d0:	3303      	adds	r3, #3
 80053d2:	e7f3      	b.n	80053bc <_dtoa_r+0x9c>
 80053d4:	2200      	movs	r2, #0
 80053d6:	2300      	movs	r3, #0
 80053d8:	4650      	mov	r0, sl
 80053da:	4659      	mov	r1, fp
 80053dc:	f7fb fb74 	bl	8000ac8 <__aeabi_dcmpeq>
 80053e0:	ec4b ab19 	vmov	d9, sl, fp
 80053e4:	4680      	mov	r8, r0
 80053e6:	b158      	cbz	r0, 8005400 <_dtoa_r+0xe0>
 80053e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053ea:	2301      	movs	r3, #1
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 856b 	beq.w	8005ecc <_dtoa_r+0xbac>
 80053f6:	4883      	ldr	r0, [pc, #524]	; (8005604 <_dtoa_r+0x2e4>)
 80053f8:	6018      	str	r0, [r3, #0]
 80053fa:	1e43      	subs	r3, r0, #1
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	e7df      	b.n	80053c0 <_dtoa_r+0xa0>
 8005400:	ec4b ab10 	vmov	d0, sl, fp
 8005404:	aa10      	add	r2, sp, #64	; 0x40
 8005406:	a911      	add	r1, sp, #68	; 0x44
 8005408:	4620      	mov	r0, r4
 800540a:	f001 f9b3 	bl	8006774 <__d2b>
 800540e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005412:	ee08 0a10 	vmov	s16, r0
 8005416:	2d00      	cmp	r5, #0
 8005418:	f000 8084 	beq.w	8005524 <_dtoa_r+0x204>
 800541c:	ee19 3a90 	vmov	r3, s19
 8005420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005424:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005428:	4656      	mov	r6, sl
 800542a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800542e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005432:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005436:	4b74      	ldr	r3, [pc, #464]	; (8005608 <_dtoa_r+0x2e8>)
 8005438:	2200      	movs	r2, #0
 800543a:	4630      	mov	r0, r6
 800543c:	4639      	mov	r1, r7
 800543e:	f7fa ff23 	bl	8000288 <__aeabi_dsub>
 8005442:	a365      	add	r3, pc, #404	; (adr r3, 80055d8 <_dtoa_r+0x2b8>)
 8005444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005448:	f7fb f8d6 	bl	80005f8 <__aeabi_dmul>
 800544c:	a364      	add	r3, pc, #400	; (adr r3, 80055e0 <_dtoa_r+0x2c0>)
 800544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005452:	f7fa ff1b 	bl	800028c <__adddf3>
 8005456:	4606      	mov	r6, r0
 8005458:	4628      	mov	r0, r5
 800545a:	460f      	mov	r7, r1
 800545c:	f7fb f862 	bl	8000524 <__aeabi_i2d>
 8005460:	a361      	add	r3, pc, #388	; (adr r3, 80055e8 <_dtoa_r+0x2c8>)
 8005462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005466:	f7fb f8c7 	bl	80005f8 <__aeabi_dmul>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4630      	mov	r0, r6
 8005470:	4639      	mov	r1, r7
 8005472:	f7fa ff0b 	bl	800028c <__adddf3>
 8005476:	4606      	mov	r6, r0
 8005478:	460f      	mov	r7, r1
 800547a:	f7fb fb6d 	bl	8000b58 <__aeabi_d2iz>
 800547e:	2200      	movs	r2, #0
 8005480:	9000      	str	r0, [sp, #0]
 8005482:	2300      	movs	r3, #0
 8005484:	4630      	mov	r0, r6
 8005486:	4639      	mov	r1, r7
 8005488:	f7fb fb28 	bl	8000adc <__aeabi_dcmplt>
 800548c:	b150      	cbz	r0, 80054a4 <_dtoa_r+0x184>
 800548e:	9800      	ldr	r0, [sp, #0]
 8005490:	f7fb f848 	bl	8000524 <__aeabi_i2d>
 8005494:	4632      	mov	r2, r6
 8005496:	463b      	mov	r3, r7
 8005498:	f7fb fb16 	bl	8000ac8 <__aeabi_dcmpeq>
 800549c:	b910      	cbnz	r0, 80054a4 <_dtoa_r+0x184>
 800549e:	9b00      	ldr	r3, [sp, #0]
 80054a0:	3b01      	subs	r3, #1
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	9b00      	ldr	r3, [sp, #0]
 80054a6:	2b16      	cmp	r3, #22
 80054a8:	d85a      	bhi.n	8005560 <_dtoa_r+0x240>
 80054aa:	9a00      	ldr	r2, [sp, #0]
 80054ac:	4b57      	ldr	r3, [pc, #348]	; (800560c <_dtoa_r+0x2ec>)
 80054ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b6:	ec51 0b19 	vmov	r0, r1, d9
 80054ba:	f7fb fb0f 	bl	8000adc <__aeabi_dcmplt>
 80054be:	2800      	cmp	r0, #0
 80054c0:	d050      	beq.n	8005564 <_dtoa_r+0x244>
 80054c2:	9b00      	ldr	r3, [sp, #0]
 80054c4:	3b01      	subs	r3, #1
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	2300      	movs	r3, #0
 80054ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80054cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80054ce:	1b5d      	subs	r5, r3, r5
 80054d0:	1e6b      	subs	r3, r5, #1
 80054d2:	9305      	str	r3, [sp, #20]
 80054d4:	bf45      	ittet	mi
 80054d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80054da:	9304      	strmi	r3, [sp, #16]
 80054dc:	2300      	movpl	r3, #0
 80054de:	2300      	movmi	r3, #0
 80054e0:	bf4c      	ite	mi
 80054e2:	9305      	strmi	r3, [sp, #20]
 80054e4:	9304      	strpl	r3, [sp, #16]
 80054e6:	9b00      	ldr	r3, [sp, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	db3d      	blt.n	8005568 <_dtoa_r+0x248>
 80054ec:	9b05      	ldr	r3, [sp, #20]
 80054ee:	9a00      	ldr	r2, [sp, #0]
 80054f0:	920a      	str	r2, [sp, #40]	; 0x28
 80054f2:	4413      	add	r3, r2
 80054f4:	9305      	str	r3, [sp, #20]
 80054f6:	2300      	movs	r3, #0
 80054f8:	9307      	str	r3, [sp, #28]
 80054fa:	9b06      	ldr	r3, [sp, #24]
 80054fc:	2b09      	cmp	r3, #9
 80054fe:	f200 8089 	bhi.w	8005614 <_dtoa_r+0x2f4>
 8005502:	2b05      	cmp	r3, #5
 8005504:	bfc4      	itt	gt
 8005506:	3b04      	subgt	r3, #4
 8005508:	9306      	strgt	r3, [sp, #24]
 800550a:	9b06      	ldr	r3, [sp, #24]
 800550c:	f1a3 0302 	sub.w	r3, r3, #2
 8005510:	bfcc      	ite	gt
 8005512:	2500      	movgt	r5, #0
 8005514:	2501      	movle	r5, #1
 8005516:	2b03      	cmp	r3, #3
 8005518:	f200 8087 	bhi.w	800562a <_dtoa_r+0x30a>
 800551c:	e8df f003 	tbb	[pc, r3]
 8005520:	59383a2d 	.word	0x59383a2d
 8005524:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005528:	441d      	add	r5, r3
 800552a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800552e:	2b20      	cmp	r3, #32
 8005530:	bfc1      	itttt	gt
 8005532:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005536:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800553a:	fa0b f303 	lslgt.w	r3, fp, r3
 800553e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005542:	bfda      	itte	le
 8005544:	f1c3 0320 	rsble	r3, r3, #32
 8005548:	fa06 f003 	lslle.w	r0, r6, r3
 800554c:	4318      	orrgt	r0, r3
 800554e:	f7fa ffd9 	bl	8000504 <__aeabi_ui2d>
 8005552:	2301      	movs	r3, #1
 8005554:	4606      	mov	r6, r0
 8005556:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800555a:	3d01      	subs	r5, #1
 800555c:	930e      	str	r3, [sp, #56]	; 0x38
 800555e:	e76a      	b.n	8005436 <_dtoa_r+0x116>
 8005560:	2301      	movs	r3, #1
 8005562:	e7b2      	b.n	80054ca <_dtoa_r+0x1aa>
 8005564:	900b      	str	r0, [sp, #44]	; 0x2c
 8005566:	e7b1      	b.n	80054cc <_dtoa_r+0x1ac>
 8005568:	9b04      	ldr	r3, [sp, #16]
 800556a:	9a00      	ldr	r2, [sp, #0]
 800556c:	1a9b      	subs	r3, r3, r2
 800556e:	9304      	str	r3, [sp, #16]
 8005570:	4253      	negs	r3, r2
 8005572:	9307      	str	r3, [sp, #28]
 8005574:	2300      	movs	r3, #0
 8005576:	930a      	str	r3, [sp, #40]	; 0x28
 8005578:	e7bf      	b.n	80054fa <_dtoa_r+0x1da>
 800557a:	2300      	movs	r3, #0
 800557c:	9308      	str	r3, [sp, #32]
 800557e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005580:	2b00      	cmp	r3, #0
 8005582:	dc55      	bgt.n	8005630 <_dtoa_r+0x310>
 8005584:	2301      	movs	r3, #1
 8005586:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800558a:	461a      	mov	r2, r3
 800558c:	9209      	str	r2, [sp, #36]	; 0x24
 800558e:	e00c      	b.n	80055aa <_dtoa_r+0x28a>
 8005590:	2301      	movs	r3, #1
 8005592:	e7f3      	b.n	800557c <_dtoa_r+0x25c>
 8005594:	2300      	movs	r3, #0
 8005596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005598:	9308      	str	r3, [sp, #32]
 800559a:	9b00      	ldr	r3, [sp, #0]
 800559c:	4413      	add	r3, r2
 800559e:	9302      	str	r3, [sp, #8]
 80055a0:	3301      	adds	r3, #1
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	9303      	str	r3, [sp, #12]
 80055a6:	bfb8      	it	lt
 80055a8:	2301      	movlt	r3, #1
 80055aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80055ac:	2200      	movs	r2, #0
 80055ae:	6042      	str	r2, [r0, #4]
 80055b0:	2204      	movs	r2, #4
 80055b2:	f102 0614 	add.w	r6, r2, #20
 80055b6:	429e      	cmp	r6, r3
 80055b8:	6841      	ldr	r1, [r0, #4]
 80055ba:	d93d      	bls.n	8005638 <_dtoa_r+0x318>
 80055bc:	4620      	mov	r0, r4
 80055be:	f000 fdb1 	bl	8006124 <_Balloc>
 80055c2:	9001      	str	r0, [sp, #4]
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d13b      	bne.n	8005640 <_dtoa_r+0x320>
 80055c8:	4b11      	ldr	r3, [pc, #68]	; (8005610 <_dtoa_r+0x2f0>)
 80055ca:	4602      	mov	r2, r0
 80055cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80055d0:	e6c0      	b.n	8005354 <_dtoa_r+0x34>
 80055d2:	2301      	movs	r3, #1
 80055d4:	e7df      	b.n	8005596 <_dtoa_r+0x276>
 80055d6:	bf00      	nop
 80055d8:	636f4361 	.word	0x636f4361
 80055dc:	3fd287a7 	.word	0x3fd287a7
 80055e0:	8b60c8b3 	.word	0x8b60c8b3
 80055e4:	3fc68a28 	.word	0x3fc68a28
 80055e8:	509f79fb 	.word	0x509f79fb
 80055ec:	3fd34413 	.word	0x3fd34413
 80055f0:	08007b49 	.word	0x08007b49
 80055f4:	08007b60 	.word	0x08007b60
 80055f8:	7ff00000 	.word	0x7ff00000
 80055fc:	08007b45 	.word	0x08007b45
 8005600:	08007b3c 	.word	0x08007b3c
 8005604:	08007b19 	.word	0x08007b19
 8005608:	3ff80000 	.word	0x3ff80000
 800560c:	08007cb0 	.word	0x08007cb0
 8005610:	08007bbb 	.word	0x08007bbb
 8005614:	2501      	movs	r5, #1
 8005616:	2300      	movs	r3, #0
 8005618:	9306      	str	r3, [sp, #24]
 800561a:	9508      	str	r5, [sp, #32]
 800561c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005620:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005624:	2200      	movs	r2, #0
 8005626:	2312      	movs	r3, #18
 8005628:	e7b0      	b.n	800558c <_dtoa_r+0x26c>
 800562a:	2301      	movs	r3, #1
 800562c:	9308      	str	r3, [sp, #32]
 800562e:	e7f5      	b.n	800561c <_dtoa_r+0x2fc>
 8005630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005632:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005636:	e7b8      	b.n	80055aa <_dtoa_r+0x28a>
 8005638:	3101      	adds	r1, #1
 800563a:	6041      	str	r1, [r0, #4]
 800563c:	0052      	lsls	r2, r2, #1
 800563e:	e7b8      	b.n	80055b2 <_dtoa_r+0x292>
 8005640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005642:	9a01      	ldr	r2, [sp, #4]
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	9b03      	ldr	r3, [sp, #12]
 8005648:	2b0e      	cmp	r3, #14
 800564a:	f200 809d 	bhi.w	8005788 <_dtoa_r+0x468>
 800564e:	2d00      	cmp	r5, #0
 8005650:	f000 809a 	beq.w	8005788 <_dtoa_r+0x468>
 8005654:	9b00      	ldr	r3, [sp, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	dd32      	ble.n	80056c0 <_dtoa_r+0x3a0>
 800565a:	4ab7      	ldr	r2, [pc, #732]	; (8005938 <_dtoa_r+0x618>)
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005664:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005668:	9b00      	ldr	r3, [sp, #0]
 800566a:	05d8      	lsls	r0, r3, #23
 800566c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005670:	d516      	bpl.n	80056a0 <_dtoa_r+0x380>
 8005672:	4bb2      	ldr	r3, [pc, #712]	; (800593c <_dtoa_r+0x61c>)
 8005674:	ec51 0b19 	vmov	r0, r1, d9
 8005678:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800567c:	f7fb f8e6 	bl	800084c <__aeabi_ddiv>
 8005680:	f007 070f 	and.w	r7, r7, #15
 8005684:	4682      	mov	sl, r0
 8005686:	468b      	mov	fp, r1
 8005688:	2503      	movs	r5, #3
 800568a:	4eac      	ldr	r6, [pc, #688]	; (800593c <_dtoa_r+0x61c>)
 800568c:	b957      	cbnz	r7, 80056a4 <_dtoa_r+0x384>
 800568e:	4642      	mov	r2, r8
 8005690:	464b      	mov	r3, r9
 8005692:	4650      	mov	r0, sl
 8005694:	4659      	mov	r1, fp
 8005696:	f7fb f8d9 	bl	800084c <__aeabi_ddiv>
 800569a:	4682      	mov	sl, r0
 800569c:	468b      	mov	fp, r1
 800569e:	e028      	b.n	80056f2 <_dtoa_r+0x3d2>
 80056a0:	2502      	movs	r5, #2
 80056a2:	e7f2      	b.n	800568a <_dtoa_r+0x36a>
 80056a4:	07f9      	lsls	r1, r7, #31
 80056a6:	d508      	bpl.n	80056ba <_dtoa_r+0x39a>
 80056a8:	4640      	mov	r0, r8
 80056aa:	4649      	mov	r1, r9
 80056ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80056b0:	f7fa ffa2 	bl	80005f8 <__aeabi_dmul>
 80056b4:	3501      	adds	r5, #1
 80056b6:	4680      	mov	r8, r0
 80056b8:	4689      	mov	r9, r1
 80056ba:	107f      	asrs	r7, r7, #1
 80056bc:	3608      	adds	r6, #8
 80056be:	e7e5      	b.n	800568c <_dtoa_r+0x36c>
 80056c0:	f000 809b 	beq.w	80057fa <_dtoa_r+0x4da>
 80056c4:	9b00      	ldr	r3, [sp, #0]
 80056c6:	4f9d      	ldr	r7, [pc, #628]	; (800593c <_dtoa_r+0x61c>)
 80056c8:	425e      	negs	r6, r3
 80056ca:	4b9b      	ldr	r3, [pc, #620]	; (8005938 <_dtoa_r+0x618>)
 80056cc:	f006 020f 	and.w	r2, r6, #15
 80056d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d8:	ec51 0b19 	vmov	r0, r1, d9
 80056dc:	f7fa ff8c 	bl	80005f8 <__aeabi_dmul>
 80056e0:	1136      	asrs	r6, r6, #4
 80056e2:	4682      	mov	sl, r0
 80056e4:	468b      	mov	fp, r1
 80056e6:	2300      	movs	r3, #0
 80056e8:	2502      	movs	r5, #2
 80056ea:	2e00      	cmp	r6, #0
 80056ec:	d17a      	bne.n	80057e4 <_dtoa_r+0x4c4>
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1d3      	bne.n	800569a <_dtoa_r+0x37a>
 80056f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 8082 	beq.w	80057fe <_dtoa_r+0x4de>
 80056fa:	4b91      	ldr	r3, [pc, #580]	; (8005940 <_dtoa_r+0x620>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	4650      	mov	r0, sl
 8005700:	4659      	mov	r1, fp
 8005702:	f7fb f9eb 	bl	8000adc <__aeabi_dcmplt>
 8005706:	2800      	cmp	r0, #0
 8005708:	d079      	beq.n	80057fe <_dtoa_r+0x4de>
 800570a:	9b03      	ldr	r3, [sp, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d076      	beq.n	80057fe <_dtoa_r+0x4de>
 8005710:	9b02      	ldr	r3, [sp, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	dd36      	ble.n	8005784 <_dtoa_r+0x464>
 8005716:	9b00      	ldr	r3, [sp, #0]
 8005718:	4650      	mov	r0, sl
 800571a:	4659      	mov	r1, fp
 800571c:	1e5f      	subs	r7, r3, #1
 800571e:	2200      	movs	r2, #0
 8005720:	4b88      	ldr	r3, [pc, #544]	; (8005944 <_dtoa_r+0x624>)
 8005722:	f7fa ff69 	bl	80005f8 <__aeabi_dmul>
 8005726:	9e02      	ldr	r6, [sp, #8]
 8005728:	4682      	mov	sl, r0
 800572a:	468b      	mov	fp, r1
 800572c:	3501      	adds	r5, #1
 800572e:	4628      	mov	r0, r5
 8005730:	f7fa fef8 	bl	8000524 <__aeabi_i2d>
 8005734:	4652      	mov	r2, sl
 8005736:	465b      	mov	r3, fp
 8005738:	f7fa ff5e 	bl	80005f8 <__aeabi_dmul>
 800573c:	4b82      	ldr	r3, [pc, #520]	; (8005948 <_dtoa_r+0x628>)
 800573e:	2200      	movs	r2, #0
 8005740:	f7fa fda4 	bl	800028c <__adddf3>
 8005744:	46d0      	mov	r8, sl
 8005746:	46d9      	mov	r9, fp
 8005748:	4682      	mov	sl, r0
 800574a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800574e:	2e00      	cmp	r6, #0
 8005750:	d158      	bne.n	8005804 <_dtoa_r+0x4e4>
 8005752:	4b7e      	ldr	r3, [pc, #504]	; (800594c <_dtoa_r+0x62c>)
 8005754:	2200      	movs	r2, #0
 8005756:	4640      	mov	r0, r8
 8005758:	4649      	mov	r1, r9
 800575a:	f7fa fd95 	bl	8000288 <__aeabi_dsub>
 800575e:	4652      	mov	r2, sl
 8005760:	465b      	mov	r3, fp
 8005762:	4680      	mov	r8, r0
 8005764:	4689      	mov	r9, r1
 8005766:	f7fb f9d7 	bl	8000b18 <__aeabi_dcmpgt>
 800576a:	2800      	cmp	r0, #0
 800576c:	f040 8295 	bne.w	8005c9a <_dtoa_r+0x97a>
 8005770:	4652      	mov	r2, sl
 8005772:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005776:	4640      	mov	r0, r8
 8005778:	4649      	mov	r1, r9
 800577a:	f7fb f9af 	bl	8000adc <__aeabi_dcmplt>
 800577e:	2800      	cmp	r0, #0
 8005780:	f040 8289 	bne.w	8005c96 <_dtoa_r+0x976>
 8005784:	ec5b ab19 	vmov	sl, fp, d9
 8005788:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800578a:	2b00      	cmp	r3, #0
 800578c:	f2c0 8148 	blt.w	8005a20 <_dtoa_r+0x700>
 8005790:	9a00      	ldr	r2, [sp, #0]
 8005792:	2a0e      	cmp	r2, #14
 8005794:	f300 8144 	bgt.w	8005a20 <_dtoa_r+0x700>
 8005798:	4b67      	ldr	r3, [pc, #412]	; (8005938 <_dtoa_r+0x618>)
 800579a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800579e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f280 80d5 	bge.w	8005954 <_dtoa_r+0x634>
 80057aa:	9b03      	ldr	r3, [sp, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f300 80d1 	bgt.w	8005954 <_dtoa_r+0x634>
 80057b2:	f040 826f 	bne.w	8005c94 <_dtoa_r+0x974>
 80057b6:	4b65      	ldr	r3, [pc, #404]	; (800594c <_dtoa_r+0x62c>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	4640      	mov	r0, r8
 80057bc:	4649      	mov	r1, r9
 80057be:	f7fa ff1b 	bl	80005f8 <__aeabi_dmul>
 80057c2:	4652      	mov	r2, sl
 80057c4:	465b      	mov	r3, fp
 80057c6:	f7fb f99d 	bl	8000b04 <__aeabi_dcmpge>
 80057ca:	9e03      	ldr	r6, [sp, #12]
 80057cc:	4637      	mov	r7, r6
 80057ce:	2800      	cmp	r0, #0
 80057d0:	f040 8245 	bne.w	8005c5e <_dtoa_r+0x93e>
 80057d4:	9d01      	ldr	r5, [sp, #4]
 80057d6:	2331      	movs	r3, #49	; 0x31
 80057d8:	f805 3b01 	strb.w	r3, [r5], #1
 80057dc:	9b00      	ldr	r3, [sp, #0]
 80057de:	3301      	adds	r3, #1
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	e240      	b.n	8005c66 <_dtoa_r+0x946>
 80057e4:	07f2      	lsls	r2, r6, #31
 80057e6:	d505      	bpl.n	80057f4 <_dtoa_r+0x4d4>
 80057e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057ec:	f7fa ff04 	bl	80005f8 <__aeabi_dmul>
 80057f0:	3501      	adds	r5, #1
 80057f2:	2301      	movs	r3, #1
 80057f4:	1076      	asrs	r6, r6, #1
 80057f6:	3708      	adds	r7, #8
 80057f8:	e777      	b.n	80056ea <_dtoa_r+0x3ca>
 80057fa:	2502      	movs	r5, #2
 80057fc:	e779      	b.n	80056f2 <_dtoa_r+0x3d2>
 80057fe:	9f00      	ldr	r7, [sp, #0]
 8005800:	9e03      	ldr	r6, [sp, #12]
 8005802:	e794      	b.n	800572e <_dtoa_r+0x40e>
 8005804:	9901      	ldr	r1, [sp, #4]
 8005806:	4b4c      	ldr	r3, [pc, #304]	; (8005938 <_dtoa_r+0x618>)
 8005808:	4431      	add	r1, r6
 800580a:	910d      	str	r1, [sp, #52]	; 0x34
 800580c:	9908      	ldr	r1, [sp, #32]
 800580e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005812:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005816:	2900      	cmp	r1, #0
 8005818:	d043      	beq.n	80058a2 <_dtoa_r+0x582>
 800581a:	494d      	ldr	r1, [pc, #308]	; (8005950 <_dtoa_r+0x630>)
 800581c:	2000      	movs	r0, #0
 800581e:	f7fb f815 	bl	800084c <__aeabi_ddiv>
 8005822:	4652      	mov	r2, sl
 8005824:	465b      	mov	r3, fp
 8005826:	f7fa fd2f 	bl	8000288 <__aeabi_dsub>
 800582a:	9d01      	ldr	r5, [sp, #4]
 800582c:	4682      	mov	sl, r0
 800582e:	468b      	mov	fp, r1
 8005830:	4649      	mov	r1, r9
 8005832:	4640      	mov	r0, r8
 8005834:	f7fb f990 	bl	8000b58 <__aeabi_d2iz>
 8005838:	4606      	mov	r6, r0
 800583a:	f7fa fe73 	bl	8000524 <__aeabi_i2d>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4640      	mov	r0, r8
 8005844:	4649      	mov	r1, r9
 8005846:	f7fa fd1f 	bl	8000288 <__aeabi_dsub>
 800584a:	3630      	adds	r6, #48	; 0x30
 800584c:	f805 6b01 	strb.w	r6, [r5], #1
 8005850:	4652      	mov	r2, sl
 8005852:	465b      	mov	r3, fp
 8005854:	4680      	mov	r8, r0
 8005856:	4689      	mov	r9, r1
 8005858:	f7fb f940 	bl	8000adc <__aeabi_dcmplt>
 800585c:	2800      	cmp	r0, #0
 800585e:	d163      	bne.n	8005928 <_dtoa_r+0x608>
 8005860:	4642      	mov	r2, r8
 8005862:	464b      	mov	r3, r9
 8005864:	4936      	ldr	r1, [pc, #216]	; (8005940 <_dtoa_r+0x620>)
 8005866:	2000      	movs	r0, #0
 8005868:	f7fa fd0e 	bl	8000288 <__aeabi_dsub>
 800586c:	4652      	mov	r2, sl
 800586e:	465b      	mov	r3, fp
 8005870:	f7fb f934 	bl	8000adc <__aeabi_dcmplt>
 8005874:	2800      	cmp	r0, #0
 8005876:	f040 80b5 	bne.w	80059e4 <_dtoa_r+0x6c4>
 800587a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800587c:	429d      	cmp	r5, r3
 800587e:	d081      	beq.n	8005784 <_dtoa_r+0x464>
 8005880:	4b30      	ldr	r3, [pc, #192]	; (8005944 <_dtoa_r+0x624>)
 8005882:	2200      	movs	r2, #0
 8005884:	4650      	mov	r0, sl
 8005886:	4659      	mov	r1, fp
 8005888:	f7fa feb6 	bl	80005f8 <__aeabi_dmul>
 800588c:	4b2d      	ldr	r3, [pc, #180]	; (8005944 <_dtoa_r+0x624>)
 800588e:	4682      	mov	sl, r0
 8005890:	468b      	mov	fp, r1
 8005892:	4640      	mov	r0, r8
 8005894:	4649      	mov	r1, r9
 8005896:	2200      	movs	r2, #0
 8005898:	f7fa feae 	bl	80005f8 <__aeabi_dmul>
 800589c:	4680      	mov	r8, r0
 800589e:	4689      	mov	r9, r1
 80058a0:	e7c6      	b.n	8005830 <_dtoa_r+0x510>
 80058a2:	4650      	mov	r0, sl
 80058a4:	4659      	mov	r1, fp
 80058a6:	f7fa fea7 	bl	80005f8 <__aeabi_dmul>
 80058aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058ac:	9d01      	ldr	r5, [sp, #4]
 80058ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80058b0:	4682      	mov	sl, r0
 80058b2:	468b      	mov	fp, r1
 80058b4:	4649      	mov	r1, r9
 80058b6:	4640      	mov	r0, r8
 80058b8:	f7fb f94e 	bl	8000b58 <__aeabi_d2iz>
 80058bc:	4606      	mov	r6, r0
 80058be:	f7fa fe31 	bl	8000524 <__aeabi_i2d>
 80058c2:	3630      	adds	r6, #48	; 0x30
 80058c4:	4602      	mov	r2, r0
 80058c6:	460b      	mov	r3, r1
 80058c8:	4640      	mov	r0, r8
 80058ca:	4649      	mov	r1, r9
 80058cc:	f7fa fcdc 	bl	8000288 <__aeabi_dsub>
 80058d0:	f805 6b01 	strb.w	r6, [r5], #1
 80058d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058d6:	429d      	cmp	r5, r3
 80058d8:	4680      	mov	r8, r0
 80058da:	4689      	mov	r9, r1
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	d124      	bne.n	800592c <_dtoa_r+0x60c>
 80058e2:	4b1b      	ldr	r3, [pc, #108]	; (8005950 <_dtoa_r+0x630>)
 80058e4:	4650      	mov	r0, sl
 80058e6:	4659      	mov	r1, fp
 80058e8:	f7fa fcd0 	bl	800028c <__adddf3>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4640      	mov	r0, r8
 80058f2:	4649      	mov	r1, r9
 80058f4:	f7fb f910 	bl	8000b18 <__aeabi_dcmpgt>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	d173      	bne.n	80059e4 <_dtoa_r+0x6c4>
 80058fc:	4652      	mov	r2, sl
 80058fe:	465b      	mov	r3, fp
 8005900:	4913      	ldr	r1, [pc, #76]	; (8005950 <_dtoa_r+0x630>)
 8005902:	2000      	movs	r0, #0
 8005904:	f7fa fcc0 	bl	8000288 <__aeabi_dsub>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4640      	mov	r0, r8
 800590e:	4649      	mov	r1, r9
 8005910:	f7fb f8e4 	bl	8000adc <__aeabi_dcmplt>
 8005914:	2800      	cmp	r0, #0
 8005916:	f43f af35 	beq.w	8005784 <_dtoa_r+0x464>
 800591a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800591c:	1e6b      	subs	r3, r5, #1
 800591e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005920:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005924:	2b30      	cmp	r3, #48	; 0x30
 8005926:	d0f8      	beq.n	800591a <_dtoa_r+0x5fa>
 8005928:	9700      	str	r7, [sp, #0]
 800592a:	e049      	b.n	80059c0 <_dtoa_r+0x6a0>
 800592c:	4b05      	ldr	r3, [pc, #20]	; (8005944 <_dtoa_r+0x624>)
 800592e:	f7fa fe63 	bl	80005f8 <__aeabi_dmul>
 8005932:	4680      	mov	r8, r0
 8005934:	4689      	mov	r9, r1
 8005936:	e7bd      	b.n	80058b4 <_dtoa_r+0x594>
 8005938:	08007cb0 	.word	0x08007cb0
 800593c:	08007c88 	.word	0x08007c88
 8005940:	3ff00000 	.word	0x3ff00000
 8005944:	40240000 	.word	0x40240000
 8005948:	401c0000 	.word	0x401c0000
 800594c:	40140000 	.word	0x40140000
 8005950:	3fe00000 	.word	0x3fe00000
 8005954:	9d01      	ldr	r5, [sp, #4]
 8005956:	4656      	mov	r6, sl
 8005958:	465f      	mov	r7, fp
 800595a:	4642      	mov	r2, r8
 800595c:	464b      	mov	r3, r9
 800595e:	4630      	mov	r0, r6
 8005960:	4639      	mov	r1, r7
 8005962:	f7fa ff73 	bl	800084c <__aeabi_ddiv>
 8005966:	f7fb f8f7 	bl	8000b58 <__aeabi_d2iz>
 800596a:	4682      	mov	sl, r0
 800596c:	f7fa fdda 	bl	8000524 <__aeabi_i2d>
 8005970:	4642      	mov	r2, r8
 8005972:	464b      	mov	r3, r9
 8005974:	f7fa fe40 	bl	80005f8 <__aeabi_dmul>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4630      	mov	r0, r6
 800597e:	4639      	mov	r1, r7
 8005980:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005984:	f7fa fc80 	bl	8000288 <__aeabi_dsub>
 8005988:	f805 6b01 	strb.w	r6, [r5], #1
 800598c:	9e01      	ldr	r6, [sp, #4]
 800598e:	9f03      	ldr	r7, [sp, #12]
 8005990:	1bae      	subs	r6, r5, r6
 8005992:	42b7      	cmp	r7, r6
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	d135      	bne.n	8005a06 <_dtoa_r+0x6e6>
 800599a:	f7fa fc77 	bl	800028c <__adddf3>
 800599e:	4642      	mov	r2, r8
 80059a0:	464b      	mov	r3, r9
 80059a2:	4606      	mov	r6, r0
 80059a4:	460f      	mov	r7, r1
 80059a6:	f7fb f8b7 	bl	8000b18 <__aeabi_dcmpgt>
 80059aa:	b9d0      	cbnz	r0, 80059e2 <_dtoa_r+0x6c2>
 80059ac:	4642      	mov	r2, r8
 80059ae:	464b      	mov	r3, r9
 80059b0:	4630      	mov	r0, r6
 80059b2:	4639      	mov	r1, r7
 80059b4:	f7fb f888 	bl	8000ac8 <__aeabi_dcmpeq>
 80059b8:	b110      	cbz	r0, 80059c0 <_dtoa_r+0x6a0>
 80059ba:	f01a 0f01 	tst.w	sl, #1
 80059be:	d110      	bne.n	80059e2 <_dtoa_r+0x6c2>
 80059c0:	4620      	mov	r0, r4
 80059c2:	ee18 1a10 	vmov	r1, s16
 80059c6:	f000 fbed 	bl	80061a4 <_Bfree>
 80059ca:	2300      	movs	r3, #0
 80059cc:	9800      	ldr	r0, [sp, #0]
 80059ce:	702b      	strb	r3, [r5, #0]
 80059d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059d2:	3001      	adds	r0, #1
 80059d4:	6018      	str	r0, [r3, #0]
 80059d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f43f acf1 	beq.w	80053c0 <_dtoa_r+0xa0>
 80059de:	601d      	str	r5, [r3, #0]
 80059e0:	e4ee      	b.n	80053c0 <_dtoa_r+0xa0>
 80059e2:	9f00      	ldr	r7, [sp, #0]
 80059e4:	462b      	mov	r3, r5
 80059e6:	461d      	mov	r5, r3
 80059e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059ec:	2a39      	cmp	r2, #57	; 0x39
 80059ee:	d106      	bne.n	80059fe <_dtoa_r+0x6de>
 80059f0:	9a01      	ldr	r2, [sp, #4]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d1f7      	bne.n	80059e6 <_dtoa_r+0x6c6>
 80059f6:	9901      	ldr	r1, [sp, #4]
 80059f8:	2230      	movs	r2, #48	; 0x30
 80059fa:	3701      	adds	r7, #1
 80059fc:	700a      	strb	r2, [r1, #0]
 80059fe:	781a      	ldrb	r2, [r3, #0]
 8005a00:	3201      	adds	r2, #1
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	e790      	b.n	8005928 <_dtoa_r+0x608>
 8005a06:	4ba6      	ldr	r3, [pc, #664]	; (8005ca0 <_dtoa_r+0x980>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f7fa fdf5 	bl	80005f8 <__aeabi_dmul>
 8005a0e:	2200      	movs	r2, #0
 8005a10:	2300      	movs	r3, #0
 8005a12:	4606      	mov	r6, r0
 8005a14:	460f      	mov	r7, r1
 8005a16:	f7fb f857 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	d09d      	beq.n	800595a <_dtoa_r+0x63a>
 8005a1e:	e7cf      	b.n	80059c0 <_dtoa_r+0x6a0>
 8005a20:	9a08      	ldr	r2, [sp, #32]
 8005a22:	2a00      	cmp	r2, #0
 8005a24:	f000 80d7 	beq.w	8005bd6 <_dtoa_r+0x8b6>
 8005a28:	9a06      	ldr	r2, [sp, #24]
 8005a2a:	2a01      	cmp	r2, #1
 8005a2c:	f300 80ba 	bgt.w	8005ba4 <_dtoa_r+0x884>
 8005a30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a32:	2a00      	cmp	r2, #0
 8005a34:	f000 80b2 	beq.w	8005b9c <_dtoa_r+0x87c>
 8005a38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a3c:	9e07      	ldr	r6, [sp, #28]
 8005a3e:	9d04      	ldr	r5, [sp, #16]
 8005a40:	9a04      	ldr	r2, [sp, #16]
 8005a42:	441a      	add	r2, r3
 8005a44:	9204      	str	r2, [sp, #16]
 8005a46:	9a05      	ldr	r2, [sp, #20]
 8005a48:	2101      	movs	r1, #1
 8005a4a:	441a      	add	r2, r3
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	9205      	str	r2, [sp, #20]
 8005a50:	f000 fc60 	bl	8006314 <__i2b>
 8005a54:	4607      	mov	r7, r0
 8005a56:	2d00      	cmp	r5, #0
 8005a58:	dd0c      	ble.n	8005a74 <_dtoa_r+0x754>
 8005a5a:	9b05      	ldr	r3, [sp, #20]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	dd09      	ble.n	8005a74 <_dtoa_r+0x754>
 8005a60:	42ab      	cmp	r3, r5
 8005a62:	9a04      	ldr	r2, [sp, #16]
 8005a64:	bfa8      	it	ge
 8005a66:	462b      	movge	r3, r5
 8005a68:	1ad2      	subs	r2, r2, r3
 8005a6a:	9204      	str	r2, [sp, #16]
 8005a6c:	9a05      	ldr	r2, [sp, #20]
 8005a6e:	1aed      	subs	r5, r5, r3
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	9305      	str	r3, [sp, #20]
 8005a74:	9b07      	ldr	r3, [sp, #28]
 8005a76:	b31b      	cbz	r3, 8005ac0 <_dtoa_r+0x7a0>
 8005a78:	9b08      	ldr	r3, [sp, #32]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 80af 	beq.w	8005bde <_dtoa_r+0x8be>
 8005a80:	2e00      	cmp	r6, #0
 8005a82:	dd13      	ble.n	8005aac <_dtoa_r+0x78c>
 8005a84:	4639      	mov	r1, r7
 8005a86:	4632      	mov	r2, r6
 8005a88:	4620      	mov	r0, r4
 8005a8a:	f000 fd03 	bl	8006494 <__pow5mult>
 8005a8e:	ee18 2a10 	vmov	r2, s16
 8005a92:	4601      	mov	r1, r0
 8005a94:	4607      	mov	r7, r0
 8005a96:	4620      	mov	r0, r4
 8005a98:	f000 fc52 	bl	8006340 <__multiply>
 8005a9c:	ee18 1a10 	vmov	r1, s16
 8005aa0:	4680      	mov	r8, r0
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f000 fb7e 	bl	80061a4 <_Bfree>
 8005aa8:	ee08 8a10 	vmov	s16, r8
 8005aac:	9b07      	ldr	r3, [sp, #28]
 8005aae:	1b9a      	subs	r2, r3, r6
 8005ab0:	d006      	beq.n	8005ac0 <_dtoa_r+0x7a0>
 8005ab2:	ee18 1a10 	vmov	r1, s16
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f000 fcec 	bl	8006494 <__pow5mult>
 8005abc:	ee08 0a10 	vmov	s16, r0
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f000 fc26 	bl	8006314 <__i2b>
 8005ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	4606      	mov	r6, r0
 8005ace:	f340 8088 	ble.w	8005be2 <_dtoa_r+0x8c2>
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	4601      	mov	r1, r0
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f000 fcdc 	bl	8006494 <__pow5mult>
 8005adc:	9b06      	ldr	r3, [sp, #24]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	4606      	mov	r6, r0
 8005ae2:	f340 8081 	ble.w	8005be8 <_dtoa_r+0x8c8>
 8005ae6:	f04f 0800 	mov.w	r8, #0
 8005aea:	6933      	ldr	r3, [r6, #16]
 8005aec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005af0:	6918      	ldr	r0, [r3, #16]
 8005af2:	f000 fbbf 	bl	8006274 <__hi0bits>
 8005af6:	f1c0 0020 	rsb	r0, r0, #32
 8005afa:	9b05      	ldr	r3, [sp, #20]
 8005afc:	4418      	add	r0, r3
 8005afe:	f010 001f 	ands.w	r0, r0, #31
 8005b02:	f000 8092 	beq.w	8005c2a <_dtoa_r+0x90a>
 8005b06:	f1c0 0320 	rsb	r3, r0, #32
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	f340 808a 	ble.w	8005c24 <_dtoa_r+0x904>
 8005b10:	f1c0 001c 	rsb	r0, r0, #28
 8005b14:	9b04      	ldr	r3, [sp, #16]
 8005b16:	4403      	add	r3, r0
 8005b18:	9304      	str	r3, [sp, #16]
 8005b1a:	9b05      	ldr	r3, [sp, #20]
 8005b1c:	4403      	add	r3, r0
 8005b1e:	4405      	add	r5, r0
 8005b20:	9305      	str	r3, [sp, #20]
 8005b22:	9b04      	ldr	r3, [sp, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	dd07      	ble.n	8005b38 <_dtoa_r+0x818>
 8005b28:	ee18 1a10 	vmov	r1, s16
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f000 fd0a 	bl	8006548 <__lshift>
 8005b34:	ee08 0a10 	vmov	s16, r0
 8005b38:	9b05      	ldr	r3, [sp, #20]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	dd05      	ble.n	8005b4a <_dtoa_r+0x82a>
 8005b3e:	4631      	mov	r1, r6
 8005b40:	461a      	mov	r2, r3
 8005b42:	4620      	mov	r0, r4
 8005b44:	f000 fd00 	bl	8006548 <__lshift>
 8005b48:	4606      	mov	r6, r0
 8005b4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d06e      	beq.n	8005c2e <_dtoa_r+0x90e>
 8005b50:	ee18 0a10 	vmov	r0, s16
 8005b54:	4631      	mov	r1, r6
 8005b56:	f000 fd67 	bl	8006628 <__mcmp>
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	da67      	bge.n	8005c2e <_dtoa_r+0x90e>
 8005b5e:	9b00      	ldr	r3, [sp, #0]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	ee18 1a10 	vmov	r1, s16
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	220a      	movs	r2, #10
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	4620      	mov	r0, r4
 8005b6e:	f000 fb3b 	bl	80061e8 <__multadd>
 8005b72:	9b08      	ldr	r3, [sp, #32]
 8005b74:	ee08 0a10 	vmov	s16, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 81b1 	beq.w	8005ee0 <_dtoa_r+0xbc0>
 8005b7e:	2300      	movs	r3, #0
 8005b80:	4639      	mov	r1, r7
 8005b82:	220a      	movs	r2, #10
 8005b84:	4620      	mov	r0, r4
 8005b86:	f000 fb2f 	bl	80061e8 <__multadd>
 8005b8a:	9b02      	ldr	r3, [sp, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	4607      	mov	r7, r0
 8005b90:	f300 808e 	bgt.w	8005cb0 <_dtoa_r+0x990>
 8005b94:	9b06      	ldr	r3, [sp, #24]
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	dc51      	bgt.n	8005c3e <_dtoa_r+0x91e>
 8005b9a:	e089      	b.n	8005cb0 <_dtoa_r+0x990>
 8005b9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005ba2:	e74b      	b.n	8005a3c <_dtoa_r+0x71c>
 8005ba4:	9b03      	ldr	r3, [sp, #12]
 8005ba6:	1e5e      	subs	r6, r3, #1
 8005ba8:	9b07      	ldr	r3, [sp, #28]
 8005baa:	42b3      	cmp	r3, r6
 8005bac:	bfbf      	itttt	lt
 8005bae:	9b07      	ldrlt	r3, [sp, #28]
 8005bb0:	9607      	strlt	r6, [sp, #28]
 8005bb2:	1af2      	sublt	r2, r6, r3
 8005bb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005bb6:	bfb6      	itet	lt
 8005bb8:	189b      	addlt	r3, r3, r2
 8005bba:	1b9e      	subge	r6, r3, r6
 8005bbc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005bbe:	9b03      	ldr	r3, [sp, #12]
 8005bc0:	bfb8      	it	lt
 8005bc2:	2600      	movlt	r6, #0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	bfb7      	itett	lt
 8005bc8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005bcc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005bd0:	1a9d      	sublt	r5, r3, r2
 8005bd2:	2300      	movlt	r3, #0
 8005bd4:	e734      	b.n	8005a40 <_dtoa_r+0x720>
 8005bd6:	9e07      	ldr	r6, [sp, #28]
 8005bd8:	9d04      	ldr	r5, [sp, #16]
 8005bda:	9f08      	ldr	r7, [sp, #32]
 8005bdc:	e73b      	b.n	8005a56 <_dtoa_r+0x736>
 8005bde:	9a07      	ldr	r2, [sp, #28]
 8005be0:	e767      	b.n	8005ab2 <_dtoa_r+0x792>
 8005be2:	9b06      	ldr	r3, [sp, #24]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	dc18      	bgt.n	8005c1a <_dtoa_r+0x8fa>
 8005be8:	f1ba 0f00 	cmp.w	sl, #0
 8005bec:	d115      	bne.n	8005c1a <_dtoa_r+0x8fa>
 8005bee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005bf2:	b993      	cbnz	r3, 8005c1a <_dtoa_r+0x8fa>
 8005bf4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005bf8:	0d1b      	lsrs	r3, r3, #20
 8005bfa:	051b      	lsls	r3, r3, #20
 8005bfc:	b183      	cbz	r3, 8005c20 <_dtoa_r+0x900>
 8005bfe:	9b04      	ldr	r3, [sp, #16]
 8005c00:	3301      	adds	r3, #1
 8005c02:	9304      	str	r3, [sp, #16]
 8005c04:	9b05      	ldr	r3, [sp, #20]
 8005c06:	3301      	adds	r3, #1
 8005c08:	9305      	str	r3, [sp, #20]
 8005c0a:	f04f 0801 	mov.w	r8, #1
 8005c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f47f af6a 	bne.w	8005aea <_dtoa_r+0x7ca>
 8005c16:	2001      	movs	r0, #1
 8005c18:	e76f      	b.n	8005afa <_dtoa_r+0x7da>
 8005c1a:	f04f 0800 	mov.w	r8, #0
 8005c1e:	e7f6      	b.n	8005c0e <_dtoa_r+0x8ee>
 8005c20:	4698      	mov	r8, r3
 8005c22:	e7f4      	b.n	8005c0e <_dtoa_r+0x8ee>
 8005c24:	f43f af7d 	beq.w	8005b22 <_dtoa_r+0x802>
 8005c28:	4618      	mov	r0, r3
 8005c2a:	301c      	adds	r0, #28
 8005c2c:	e772      	b.n	8005b14 <_dtoa_r+0x7f4>
 8005c2e:	9b03      	ldr	r3, [sp, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	dc37      	bgt.n	8005ca4 <_dtoa_r+0x984>
 8005c34:	9b06      	ldr	r3, [sp, #24]
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	dd34      	ble.n	8005ca4 <_dtoa_r+0x984>
 8005c3a:	9b03      	ldr	r3, [sp, #12]
 8005c3c:	9302      	str	r3, [sp, #8]
 8005c3e:	9b02      	ldr	r3, [sp, #8]
 8005c40:	b96b      	cbnz	r3, 8005c5e <_dtoa_r+0x93e>
 8005c42:	4631      	mov	r1, r6
 8005c44:	2205      	movs	r2, #5
 8005c46:	4620      	mov	r0, r4
 8005c48:	f000 face 	bl	80061e8 <__multadd>
 8005c4c:	4601      	mov	r1, r0
 8005c4e:	4606      	mov	r6, r0
 8005c50:	ee18 0a10 	vmov	r0, s16
 8005c54:	f000 fce8 	bl	8006628 <__mcmp>
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	f73f adbb 	bgt.w	80057d4 <_dtoa_r+0x4b4>
 8005c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c60:	9d01      	ldr	r5, [sp, #4]
 8005c62:	43db      	mvns	r3, r3
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	f04f 0800 	mov.w	r8, #0
 8005c6a:	4631      	mov	r1, r6
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f000 fa99 	bl	80061a4 <_Bfree>
 8005c72:	2f00      	cmp	r7, #0
 8005c74:	f43f aea4 	beq.w	80059c0 <_dtoa_r+0x6a0>
 8005c78:	f1b8 0f00 	cmp.w	r8, #0
 8005c7c:	d005      	beq.n	8005c8a <_dtoa_r+0x96a>
 8005c7e:	45b8      	cmp	r8, r7
 8005c80:	d003      	beq.n	8005c8a <_dtoa_r+0x96a>
 8005c82:	4641      	mov	r1, r8
 8005c84:	4620      	mov	r0, r4
 8005c86:	f000 fa8d 	bl	80061a4 <_Bfree>
 8005c8a:	4639      	mov	r1, r7
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	f000 fa89 	bl	80061a4 <_Bfree>
 8005c92:	e695      	b.n	80059c0 <_dtoa_r+0x6a0>
 8005c94:	2600      	movs	r6, #0
 8005c96:	4637      	mov	r7, r6
 8005c98:	e7e1      	b.n	8005c5e <_dtoa_r+0x93e>
 8005c9a:	9700      	str	r7, [sp, #0]
 8005c9c:	4637      	mov	r7, r6
 8005c9e:	e599      	b.n	80057d4 <_dtoa_r+0x4b4>
 8005ca0:	40240000 	.word	0x40240000
 8005ca4:	9b08      	ldr	r3, [sp, #32]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 80ca 	beq.w	8005e40 <_dtoa_r+0xb20>
 8005cac:	9b03      	ldr	r3, [sp, #12]
 8005cae:	9302      	str	r3, [sp, #8]
 8005cb0:	2d00      	cmp	r5, #0
 8005cb2:	dd05      	ble.n	8005cc0 <_dtoa_r+0x9a0>
 8005cb4:	4639      	mov	r1, r7
 8005cb6:	462a      	mov	r2, r5
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 fc45 	bl	8006548 <__lshift>
 8005cbe:	4607      	mov	r7, r0
 8005cc0:	f1b8 0f00 	cmp.w	r8, #0
 8005cc4:	d05b      	beq.n	8005d7e <_dtoa_r+0xa5e>
 8005cc6:	6879      	ldr	r1, [r7, #4]
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f000 fa2b 	bl	8006124 <_Balloc>
 8005cce:	4605      	mov	r5, r0
 8005cd0:	b928      	cbnz	r0, 8005cde <_dtoa_r+0x9be>
 8005cd2:	4b87      	ldr	r3, [pc, #540]	; (8005ef0 <_dtoa_r+0xbd0>)
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005cda:	f7ff bb3b 	b.w	8005354 <_dtoa_r+0x34>
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	3202      	adds	r2, #2
 8005ce2:	0092      	lsls	r2, r2, #2
 8005ce4:	f107 010c 	add.w	r1, r7, #12
 8005ce8:	300c      	adds	r0, #12
 8005cea:	f000 fa0d 	bl	8006108 <memcpy>
 8005cee:	2201      	movs	r2, #1
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f000 fc28 	bl	8006548 <__lshift>
 8005cf8:	9b01      	ldr	r3, [sp, #4]
 8005cfa:	f103 0901 	add.w	r9, r3, #1
 8005cfe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005d02:	4413      	add	r3, r2
 8005d04:	9305      	str	r3, [sp, #20]
 8005d06:	f00a 0301 	and.w	r3, sl, #1
 8005d0a:	46b8      	mov	r8, r7
 8005d0c:	9304      	str	r3, [sp, #16]
 8005d0e:	4607      	mov	r7, r0
 8005d10:	4631      	mov	r1, r6
 8005d12:	ee18 0a10 	vmov	r0, s16
 8005d16:	f7ff fa77 	bl	8005208 <quorem>
 8005d1a:	4641      	mov	r1, r8
 8005d1c:	9002      	str	r0, [sp, #8]
 8005d1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005d22:	ee18 0a10 	vmov	r0, s16
 8005d26:	f000 fc7f 	bl	8006628 <__mcmp>
 8005d2a:	463a      	mov	r2, r7
 8005d2c:	9003      	str	r0, [sp, #12]
 8005d2e:	4631      	mov	r1, r6
 8005d30:	4620      	mov	r0, r4
 8005d32:	f000 fc95 	bl	8006660 <__mdiff>
 8005d36:	68c2      	ldr	r2, [r0, #12]
 8005d38:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8005d3c:	4605      	mov	r5, r0
 8005d3e:	bb02      	cbnz	r2, 8005d82 <_dtoa_r+0xa62>
 8005d40:	4601      	mov	r1, r0
 8005d42:	ee18 0a10 	vmov	r0, s16
 8005d46:	f000 fc6f 	bl	8006628 <__mcmp>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	4629      	mov	r1, r5
 8005d4e:	4620      	mov	r0, r4
 8005d50:	9207      	str	r2, [sp, #28]
 8005d52:	f000 fa27 	bl	80061a4 <_Bfree>
 8005d56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005d5a:	ea43 0102 	orr.w	r1, r3, r2
 8005d5e:	9b04      	ldr	r3, [sp, #16]
 8005d60:	430b      	orrs	r3, r1
 8005d62:	464d      	mov	r5, r9
 8005d64:	d10f      	bne.n	8005d86 <_dtoa_r+0xa66>
 8005d66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d6a:	d02a      	beq.n	8005dc2 <_dtoa_r+0xaa2>
 8005d6c:	9b03      	ldr	r3, [sp, #12]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	dd02      	ble.n	8005d78 <_dtoa_r+0xa58>
 8005d72:	9b02      	ldr	r3, [sp, #8]
 8005d74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005d78:	f88b a000 	strb.w	sl, [fp]
 8005d7c:	e775      	b.n	8005c6a <_dtoa_r+0x94a>
 8005d7e:	4638      	mov	r0, r7
 8005d80:	e7ba      	b.n	8005cf8 <_dtoa_r+0x9d8>
 8005d82:	2201      	movs	r2, #1
 8005d84:	e7e2      	b.n	8005d4c <_dtoa_r+0xa2c>
 8005d86:	9b03      	ldr	r3, [sp, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	db04      	blt.n	8005d96 <_dtoa_r+0xa76>
 8005d8c:	9906      	ldr	r1, [sp, #24]
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	9904      	ldr	r1, [sp, #16]
 8005d92:	430b      	orrs	r3, r1
 8005d94:	d122      	bne.n	8005ddc <_dtoa_r+0xabc>
 8005d96:	2a00      	cmp	r2, #0
 8005d98:	ddee      	ble.n	8005d78 <_dtoa_r+0xa58>
 8005d9a:	ee18 1a10 	vmov	r1, s16
 8005d9e:	2201      	movs	r2, #1
 8005da0:	4620      	mov	r0, r4
 8005da2:	f000 fbd1 	bl	8006548 <__lshift>
 8005da6:	4631      	mov	r1, r6
 8005da8:	ee08 0a10 	vmov	s16, r0
 8005dac:	f000 fc3c 	bl	8006628 <__mcmp>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	dc03      	bgt.n	8005dbc <_dtoa_r+0xa9c>
 8005db4:	d1e0      	bne.n	8005d78 <_dtoa_r+0xa58>
 8005db6:	f01a 0f01 	tst.w	sl, #1
 8005dba:	d0dd      	beq.n	8005d78 <_dtoa_r+0xa58>
 8005dbc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005dc0:	d1d7      	bne.n	8005d72 <_dtoa_r+0xa52>
 8005dc2:	2339      	movs	r3, #57	; 0x39
 8005dc4:	f88b 3000 	strb.w	r3, [fp]
 8005dc8:	462b      	mov	r3, r5
 8005dca:	461d      	mov	r5, r3
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005dd2:	2a39      	cmp	r2, #57	; 0x39
 8005dd4:	d071      	beq.n	8005eba <_dtoa_r+0xb9a>
 8005dd6:	3201      	adds	r2, #1
 8005dd8:	701a      	strb	r2, [r3, #0]
 8005dda:	e746      	b.n	8005c6a <_dtoa_r+0x94a>
 8005ddc:	2a00      	cmp	r2, #0
 8005dde:	dd07      	ble.n	8005df0 <_dtoa_r+0xad0>
 8005de0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005de4:	d0ed      	beq.n	8005dc2 <_dtoa_r+0xaa2>
 8005de6:	f10a 0301 	add.w	r3, sl, #1
 8005dea:	f88b 3000 	strb.w	r3, [fp]
 8005dee:	e73c      	b.n	8005c6a <_dtoa_r+0x94a>
 8005df0:	9b05      	ldr	r3, [sp, #20]
 8005df2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005df6:	4599      	cmp	r9, r3
 8005df8:	d047      	beq.n	8005e8a <_dtoa_r+0xb6a>
 8005dfa:	ee18 1a10 	vmov	r1, s16
 8005dfe:	2300      	movs	r3, #0
 8005e00:	220a      	movs	r2, #10
 8005e02:	4620      	mov	r0, r4
 8005e04:	f000 f9f0 	bl	80061e8 <__multadd>
 8005e08:	45b8      	cmp	r8, r7
 8005e0a:	ee08 0a10 	vmov	s16, r0
 8005e0e:	f04f 0300 	mov.w	r3, #0
 8005e12:	f04f 020a 	mov.w	r2, #10
 8005e16:	4641      	mov	r1, r8
 8005e18:	4620      	mov	r0, r4
 8005e1a:	d106      	bne.n	8005e2a <_dtoa_r+0xb0a>
 8005e1c:	f000 f9e4 	bl	80061e8 <__multadd>
 8005e20:	4680      	mov	r8, r0
 8005e22:	4607      	mov	r7, r0
 8005e24:	f109 0901 	add.w	r9, r9, #1
 8005e28:	e772      	b.n	8005d10 <_dtoa_r+0x9f0>
 8005e2a:	f000 f9dd 	bl	80061e8 <__multadd>
 8005e2e:	4639      	mov	r1, r7
 8005e30:	4680      	mov	r8, r0
 8005e32:	2300      	movs	r3, #0
 8005e34:	220a      	movs	r2, #10
 8005e36:	4620      	mov	r0, r4
 8005e38:	f000 f9d6 	bl	80061e8 <__multadd>
 8005e3c:	4607      	mov	r7, r0
 8005e3e:	e7f1      	b.n	8005e24 <_dtoa_r+0xb04>
 8005e40:	9b03      	ldr	r3, [sp, #12]
 8005e42:	9302      	str	r3, [sp, #8]
 8005e44:	9d01      	ldr	r5, [sp, #4]
 8005e46:	ee18 0a10 	vmov	r0, s16
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	f7ff f9dc 	bl	8005208 <quorem>
 8005e50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005e54:	9b01      	ldr	r3, [sp, #4]
 8005e56:	f805 ab01 	strb.w	sl, [r5], #1
 8005e5a:	1aea      	subs	r2, r5, r3
 8005e5c:	9b02      	ldr	r3, [sp, #8]
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	dd09      	ble.n	8005e76 <_dtoa_r+0xb56>
 8005e62:	ee18 1a10 	vmov	r1, s16
 8005e66:	2300      	movs	r3, #0
 8005e68:	220a      	movs	r2, #10
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f000 f9bc 	bl	80061e8 <__multadd>
 8005e70:	ee08 0a10 	vmov	s16, r0
 8005e74:	e7e7      	b.n	8005e46 <_dtoa_r+0xb26>
 8005e76:	9b02      	ldr	r3, [sp, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	bfc8      	it	gt
 8005e7c:	461d      	movgt	r5, r3
 8005e7e:	9b01      	ldr	r3, [sp, #4]
 8005e80:	bfd8      	it	le
 8005e82:	2501      	movle	r5, #1
 8005e84:	441d      	add	r5, r3
 8005e86:	f04f 0800 	mov.w	r8, #0
 8005e8a:	ee18 1a10 	vmov	r1, s16
 8005e8e:	2201      	movs	r2, #1
 8005e90:	4620      	mov	r0, r4
 8005e92:	f000 fb59 	bl	8006548 <__lshift>
 8005e96:	4631      	mov	r1, r6
 8005e98:	ee08 0a10 	vmov	s16, r0
 8005e9c:	f000 fbc4 	bl	8006628 <__mcmp>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	dc91      	bgt.n	8005dc8 <_dtoa_r+0xaa8>
 8005ea4:	d102      	bne.n	8005eac <_dtoa_r+0xb8c>
 8005ea6:	f01a 0f01 	tst.w	sl, #1
 8005eaa:	d18d      	bne.n	8005dc8 <_dtoa_r+0xaa8>
 8005eac:	462b      	mov	r3, r5
 8005eae:	461d      	mov	r5, r3
 8005eb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005eb4:	2a30      	cmp	r2, #48	; 0x30
 8005eb6:	d0fa      	beq.n	8005eae <_dtoa_r+0xb8e>
 8005eb8:	e6d7      	b.n	8005c6a <_dtoa_r+0x94a>
 8005eba:	9a01      	ldr	r2, [sp, #4]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d184      	bne.n	8005dca <_dtoa_r+0xaaa>
 8005ec0:	9b00      	ldr	r3, [sp, #0]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	2331      	movs	r3, #49	; 0x31
 8005ec8:	7013      	strb	r3, [r2, #0]
 8005eca:	e6ce      	b.n	8005c6a <_dtoa_r+0x94a>
 8005ecc:	4b09      	ldr	r3, [pc, #36]	; (8005ef4 <_dtoa_r+0xbd4>)
 8005ece:	f7ff ba95 	b.w	80053fc <_dtoa_r+0xdc>
 8005ed2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f47f aa6e 	bne.w	80053b6 <_dtoa_r+0x96>
 8005eda:	4b07      	ldr	r3, [pc, #28]	; (8005ef8 <_dtoa_r+0xbd8>)
 8005edc:	f7ff ba8e 	b.w	80053fc <_dtoa_r+0xdc>
 8005ee0:	9b02      	ldr	r3, [sp, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	dcae      	bgt.n	8005e44 <_dtoa_r+0xb24>
 8005ee6:	9b06      	ldr	r3, [sp, #24]
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	f73f aea8 	bgt.w	8005c3e <_dtoa_r+0x91e>
 8005eee:	e7a9      	b.n	8005e44 <_dtoa_r+0xb24>
 8005ef0:	08007bbb 	.word	0x08007bbb
 8005ef4:	08007b18 	.word	0x08007b18
 8005ef8:	08007b3c 	.word	0x08007b3c

08005efc <std>:
 8005efc:	2300      	movs	r3, #0
 8005efe:	b510      	push	{r4, lr}
 8005f00:	4604      	mov	r4, r0
 8005f02:	e9c0 3300 	strd	r3, r3, [r0]
 8005f06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f0a:	6083      	str	r3, [r0, #8]
 8005f0c:	8181      	strh	r1, [r0, #12]
 8005f0e:	6643      	str	r3, [r0, #100]	; 0x64
 8005f10:	81c2      	strh	r2, [r0, #14]
 8005f12:	6183      	str	r3, [r0, #24]
 8005f14:	4619      	mov	r1, r3
 8005f16:	2208      	movs	r2, #8
 8005f18:	305c      	adds	r0, #92	; 0x5c
 8005f1a:	f7fe fceb 	bl	80048f4 <memset>
 8005f1e:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <std+0x38>)
 8005f20:	6263      	str	r3, [r4, #36]	; 0x24
 8005f22:	4b05      	ldr	r3, [pc, #20]	; (8005f38 <std+0x3c>)
 8005f24:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f26:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <std+0x40>)
 8005f28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f2a:	4b05      	ldr	r3, [pc, #20]	; (8005f40 <std+0x44>)
 8005f2c:	6224      	str	r4, [r4, #32]
 8005f2e:	6323      	str	r3, [r4, #48]	; 0x30
 8005f30:	bd10      	pop	{r4, pc}
 8005f32:	bf00      	nop
 8005f34:	08006ced 	.word	0x08006ced
 8005f38:	08006d0f 	.word	0x08006d0f
 8005f3c:	08006d47 	.word	0x08006d47
 8005f40:	08006d6b 	.word	0x08006d6b

08005f44 <_cleanup_r>:
 8005f44:	4901      	ldr	r1, [pc, #4]	; (8005f4c <_cleanup_r+0x8>)
 8005f46:	f000 b8af 	b.w	80060a8 <_fwalk_reent>
 8005f4a:	bf00      	nop
 8005f4c:	08007081 	.word	0x08007081

08005f50 <__sfmoreglue>:
 8005f50:	b570      	push	{r4, r5, r6, lr}
 8005f52:	2268      	movs	r2, #104	; 0x68
 8005f54:	1e4d      	subs	r5, r1, #1
 8005f56:	4355      	muls	r5, r2
 8005f58:	460e      	mov	r6, r1
 8005f5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f5e:	f000 fce7 	bl	8006930 <_malloc_r>
 8005f62:	4604      	mov	r4, r0
 8005f64:	b140      	cbz	r0, 8005f78 <__sfmoreglue+0x28>
 8005f66:	2100      	movs	r1, #0
 8005f68:	e9c0 1600 	strd	r1, r6, [r0]
 8005f6c:	300c      	adds	r0, #12
 8005f6e:	60a0      	str	r0, [r4, #8]
 8005f70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f74:	f7fe fcbe 	bl	80048f4 <memset>
 8005f78:	4620      	mov	r0, r4
 8005f7a:	bd70      	pop	{r4, r5, r6, pc}

08005f7c <__sfp_lock_acquire>:
 8005f7c:	4801      	ldr	r0, [pc, #4]	; (8005f84 <__sfp_lock_acquire+0x8>)
 8005f7e:	f000 b8b8 	b.w	80060f2 <__retarget_lock_acquire_recursive>
 8005f82:	bf00      	nop
 8005f84:	2000028d 	.word	0x2000028d

08005f88 <__sfp_lock_release>:
 8005f88:	4801      	ldr	r0, [pc, #4]	; (8005f90 <__sfp_lock_release+0x8>)
 8005f8a:	f000 b8b3 	b.w	80060f4 <__retarget_lock_release_recursive>
 8005f8e:	bf00      	nop
 8005f90:	2000028d 	.word	0x2000028d

08005f94 <__sinit_lock_acquire>:
 8005f94:	4801      	ldr	r0, [pc, #4]	; (8005f9c <__sinit_lock_acquire+0x8>)
 8005f96:	f000 b8ac 	b.w	80060f2 <__retarget_lock_acquire_recursive>
 8005f9a:	bf00      	nop
 8005f9c:	2000028e 	.word	0x2000028e

08005fa0 <__sinit_lock_release>:
 8005fa0:	4801      	ldr	r0, [pc, #4]	; (8005fa8 <__sinit_lock_release+0x8>)
 8005fa2:	f000 b8a7 	b.w	80060f4 <__retarget_lock_release_recursive>
 8005fa6:	bf00      	nop
 8005fa8:	2000028e 	.word	0x2000028e

08005fac <__sinit>:
 8005fac:	b510      	push	{r4, lr}
 8005fae:	4604      	mov	r4, r0
 8005fb0:	f7ff fff0 	bl	8005f94 <__sinit_lock_acquire>
 8005fb4:	69a3      	ldr	r3, [r4, #24]
 8005fb6:	b11b      	cbz	r3, 8005fc0 <__sinit+0x14>
 8005fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fbc:	f7ff bff0 	b.w	8005fa0 <__sinit_lock_release>
 8005fc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005fc4:	6523      	str	r3, [r4, #80]	; 0x50
 8005fc6:	4b13      	ldr	r3, [pc, #76]	; (8006014 <__sinit+0x68>)
 8005fc8:	4a13      	ldr	r2, [pc, #76]	; (8006018 <__sinit+0x6c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8005fce:	42a3      	cmp	r3, r4
 8005fd0:	bf04      	itt	eq
 8005fd2:	2301      	moveq	r3, #1
 8005fd4:	61a3      	streq	r3, [r4, #24]
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f000 f820 	bl	800601c <__sfp>
 8005fdc:	6060      	str	r0, [r4, #4]
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f000 f81c 	bl	800601c <__sfp>
 8005fe4:	60a0      	str	r0, [r4, #8]
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f000 f818 	bl	800601c <__sfp>
 8005fec:	2200      	movs	r2, #0
 8005fee:	60e0      	str	r0, [r4, #12]
 8005ff0:	2104      	movs	r1, #4
 8005ff2:	6860      	ldr	r0, [r4, #4]
 8005ff4:	f7ff ff82 	bl	8005efc <std>
 8005ff8:	68a0      	ldr	r0, [r4, #8]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	2109      	movs	r1, #9
 8005ffe:	f7ff ff7d 	bl	8005efc <std>
 8006002:	68e0      	ldr	r0, [r4, #12]
 8006004:	2202      	movs	r2, #2
 8006006:	2112      	movs	r1, #18
 8006008:	f7ff ff78 	bl	8005efc <std>
 800600c:	2301      	movs	r3, #1
 800600e:	61a3      	str	r3, [r4, #24]
 8006010:	e7d2      	b.n	8005fb8 <__sinit+0xc>
 8006012:	bf00      	nop
 8006014:	08007b04 	.word	0x08007b04
 8006018:	08005f45 	.word	0x08005f45

0800601c <__sfp>:
 800601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601e:	4607      	mov	r7, r0
 8006020:	f7ff ffac 	bl	8005f7c <__sfp_lock_acquire>
 8006024:	4b1e      	ldr	r3, [pc, #120]	; (80060a0 <__sfp+0x84>)
 8006026:	681e      	ldr	r6, [r3, #0]
 8006028:	69b3      	ldr	r3, [r6, #24]
 800602a:	b913      	cbnz	r3, 8006032 <__sfp+0x16>
 800602c:	4630      	mov	r0, r6
 800602e:	f7ff ffbd 	bl	8005fac <__sinit>
 8006032:	3648      	adds	r6, #72	; 0x48
 8006034:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006038:	3b01      	subs	r3, #1
 800603a:	d503      	bpl.n	8006044 <__sfp+0x28>
 800603c:	6833      	ldr	r3, [r6, #0]
 800603e:	b30b      	cbz	r3, 8006084 <__sfp+0x68>
 8006040:	6836      	ldr	r6, [r6, #0]
 8006042:	e7f7      	b.n	8006034 <__sfp+0x18>
 8006044:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006048:	b9d5      	cbnz	r5, 8006080 <__sfp+0x64>
 800604a:	4b16      	ldr	r3, [pc, #88]	; (80060a4 <__sfp+0x88>)
 800604c:	60e3      	str	r3, [r4, #12]
 800604e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006052:	6665      	str	r5, [r4, #100]	; 0x64
 8006054:	f000 f84c 	bl	80060f0 <__retarget_lock_init_recursive>
 8006058:	f7ff ff96 	bl	8005f88 <__sfp_lock_release>
 800605c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006060:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006064:	6025      	str	r5, [r4, #0]
 8006066:	61a5      	str	r5, [r4, #24]
 8006068:	2208      	movs	r2, #8
 800606a:	4629      	mov	r1, r5
 800606c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006070:	f7fe fc40 	bl	80048f4 <memset>
 8006074:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006078:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800607c:	4620      	mov	r0, r4
 800607e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006080:	3468      	adds	r4, #104	; 0x68
 8006082:	e7d9      	b.n	8006038 <__sfp+0x1c>
 8006084:	2104      	movs	r1, #4
 8006086:	4638      	mov	r0, r7
 8006088:	f7ff ff62 	bl	8005f50 <__sfmoreglue>
 800608c:	4604      	mov	r4, r0
 800608e:	6030      	str	r0, [r6, #0]
 8006090:	2800      	cmp	r0, #0
 8006092:	d1d5      	bne.n	8006040 <__sfp+0x24>
 8006094:	f7ff ff78 	bl	8005f88 <__sfp_lock_release>
 8006098:	230c      	movs	r3, #12
 800609a:	603b      	str	r3, [r7, #0]
 800609c:	e7ee      	b.n	800607c <__sfp+0x60>
 800609e:	bf00      	nop
 80060a0:	08007b04 	.word	0x08007b04
 80060a4:	ffff0001 	.word	0xffff0001

080060a8 <_fwalk_reent>:
 80060a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060ac:	4606      	mov	r6, r0
 80060ae:	4688      	mov	r8, r1
 80060b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80060b4:	2700      	movs	r7, #0
 80060b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060ba:	f1b9 0901 	subs.w	r9, r9, #1
 80060be:	d505      	bpl.n	80060cc <_fwalk_reent+0x24>
 80060c0:	6824      	ldr	r4, [r4, #0]
 80060c2:	2c00      	cmp	r4, #0
 80060c4:	d1f7      	bne.n	80060b6 <_fwalk_reent+0xe>
 80060c6:	4638      	mov	r0, r7
 80060c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060cc:	89ab      	ldrh	r3, [r5, #12]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d907      	bls.n	80060e2 <_fwalk_reent+0x3a>
 80060d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060d6:	3301      	adds	r3, #1
 80060d8:	d003      	beq.n	80060e2 <_fwalk_reent+0x3a>
 80060da:	4629      	mov	r1, r5
 80060dc:	4630      	mov	r0, r6
 80060de:	47c0      	blx	r8
 80060e0:	4307      	orrs	r7, r0
 80060e2:	3568      	adds	r5, #104	; 0x68
 80060e4:	e7e9      	b.n	80060ba <_fwalk_reent+0x12>
	...

080060e8 <_localeconv_r>:
 80060e8:	4800      	ldr	r0, [pc, #0]	; (80060ec <_localeconv_r+0x4>)
 80060ea:	4770      	bx	lr
 80060ec:	2000015c 	.word	0x2000015c

080060f0 <__retarget_lock_init_recursive>:
 80060f0:	4770      	bx	lr

080060f2 <__retarget_lock_acquire_recursive>:
 80060f2:	4770      	bx	lr

080060f4 <__retarget_lock_release_recursive>:
 80060f4:	4770      	bx	lr
	...

080060f8 <malloc>:
 80060f8:	4b02      	ldr	r3, [pc, #8]	; (8006104 <malloc+0xc>)
 80060fa:	4601      	mov	r1, r0
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	f000 bc17 	b.w	8006930 <_malloc_r>
 8006102:	bf00      	nop
 8006104:	20000008 	.word	0x20000008

08006108 <memcpy>:
 8006108:	440a      	add	r2, r1
 800610a:	4291      	cmp	r1, r2
 800610c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006110:	d100      	bne.n	8006114 <memcpy+0xc>
 8006112:	4770      	bx	lr
 8006114:	b510      	push	{r4, lr}
 8006116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800611a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800611e:	4291      	cmp	r1, r2
 8006120:	d1f9      	bne.n	8006116 <memcpy+0xe>
 8006122:	bd10      	pop	{r4, pc}

08006124 <_Balloc>:
 8006124:	b570      	push	{r4, r5, r6, lr}
 8006126:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006128:	4604      	mov	r4, r0
 800612a:	460d      	mov	r5, r1
 800612c:	b976      	cbnz	r6, 800614c <_Balloc+0x28>
 800612e:	2010      	movs	r0, #16
 8006130:	f7ff ffe2 	bl	80060f8 <malloc>
 8006134:	4602      	mov	r2, r0
 8006136:	6260      	str	r0, [r4, #36]	; 0x24
 8006138:	b920      	cbnz	r0, 8006144 <_Balloc+0x20>
 800613a:	4b18      	ldr	r3, [pc, #96]	; (800619c <_Balloc+0x78>)
 800613c:	4818      	ldr	r0, [pc, #96]	; (80061a0 <_Balloc+0x7c>)
 800613e:	2166      	movs	r1, #102	; 0x66
 8006140:	f000 feea 	bl	8006f18 <__assert_func>
 8006144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006148:	6006      	str	r6, [r0, #0]
 800614a:	60c6      	str	r6, [r0, #12]
 800614c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800614e:	68f3      	ldr	r3, [r6, #12]
 8006150:	b183      	cbz	r3, 8006174 <_Balloc+0x50>
 8006152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800615a:	b9b8      	cbnz	r0, 800618c <_Balloc+0x68>
 800615c:	2101      	movs	r1, #1
 800615e:	fa01 f605 	lsl.w	r6, r1, r5
 8006162:	1d72      	adds	r2, r6, #5
 8006164:	0092      	lsls	r2, r2, #2
 8006166:	4620      	mov	r0, r4
 8006168:	f000 fb60 	bl	800682c <_calloc_r>
 800616c:	b160      	cbz	r0, 8006188 <_Balloc+0x64>
 800616e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006172:	e00e      	b.n	8006192 <_Balloc+0x6e>
 8006174:	2221      	movs	r2, #33	; 0x21
 8006176:	2104      	movs	r1, #4
 8006178:	4620      	mov	r0, r4
 800617a:	f000 fb57 	bl	800682c <_calloc_r>
 800617e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006180:	60f0      	str	r0, [r6, #12]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1e4      	bne.n	8006152 <_Balloc+0x2e>
 8006188:	2000      	movs	r0, #0
 800618a:	bd70      	pop	{r4, r5, r6, pc}
 800618c:	6802      	ldr	r2, [r0, #0]
 800618e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006192:	2300      	movs	r3, #0
 8006194:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006198:	e7f7      	b.n	800618a <_Balloc+0x66>
 800619a:	bf00      	nop
 800619c:	08007b49 	.word	0x08007b49
 80061a0:	08007c2c 	.word	0x08007c2c

080061a4 <_Bfree>:
 80061a4:	b570      	push	{r4, r5, r6, lr}
 80061a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80061a8:	4605      	mov	r5, r0
 80061aa:	460c      	mov	r4, r1
 80061ac:	b976      	cbnz	r6, 80061cc <_Bfree+0x28>
 80061ae:	2010      	movs	r0, #16
 80061b0:	f7ff ffa2 	bl	80060f8 <malloc>
 80061b4:	4602      	mov	r2, r0
 80061b6:	6268      	str	r0, [r5, #36]	; 0x24
 80061b8:	b920      	cbnz	r0, 80061c4 <_Bfree+0x20>
 80061ba:	4b09      	ldr	r3, [pc, #36]	; (80061e0 <_Bfree+0x3c>)
 80061bc:	4809      	ldr	r0, [pc, #36]	; (80061e4 <_Bfree+0x40>)
 80061be:	218a      	movs	r1, #138	; 0x8a
 80061c0:	f000 feaa 	bl	8006f18 <__assert_func>
 80061c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061c8:	6006      	str	r6, [r0, #0]
 80061ca:	60c6      	str	r6, [r0, #12]
 80061cc:	b13c      	cbz	r4, 80061de <_Bfree+0x3a>
 80061ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80061d0:	6862      	ldr	r2, [r4, #4]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061d8:	6021      	str	r1, [r4, #0]
 80061da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80061de:	bd70      	pop	{r4, r5, r6, pc}
 80061e0:	08007b49 	.word	0x08007b49
 80061e4:	08007c2c 	.word	0x08007c2c

080061e8 <__multadd>:
 80061e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ec:	690d      	ldr	r5, [r1, #16]
 80061ee:	4607      	mov	r7, r0
 80061f0:	460c      	mov	r4, r1
 80061f2:	461e      	mov	r6, r3
 80061f4:	f101 0c14 	add.w	ip, r1, #20
 80061f8:	2000      	movs	r0, #0
 80061fa:	f8dc 3000 	ldr.w	r3, [ip]
 80061fe:	b299      	uxth	r1, r3
 8006200:	fb02 6101 	mla	r1, r2, r1, r6
 8006204:	0c1e      	lsrs	r6, r3, #16
 8006206:	0c0b      	lsrs	r3, r1, #16
 8006208:	fb02 3306 	mla	r3, r2, r6, r3
 800620c:	b289      	uxth	r1, r1
 800620e:	3001      	adds	r0, #1
 8006210:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006214:	4285      	cmp	r5, r0
 8006216:	f84c 1b04 	str.w	r1, [ip], #4
 800621a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800621e:	dcec      	bgt.n	80061fa <__multadd+0x12>
 8006220:	b30e      	cbz	r6, 8006266 <__multadd+0x7e>
 8006222:	68a3      	ldr	r3, [r4, #8]
 8006224:	42ab      	cmp	r3, r5
 8006226:	dc19      	bgt.n	800625c <__multadd+0x74>
 8006228:	6861      	ldr	r1, [r4, #4]
 800622a:	4638      	mov	r0, r7
 800622c:	3101      	adds	r1, #1
 800622e:	f7ff ff79 	bl	8006124 <_Balloc>
 8006232:	4680      	mov	r8, r0
 8006234:	b928      	cbnz	r0, 8006242 <__multadd+0x5a>
 8006236:	4602      	mov	r2, r0
 8006238:	4b0c      	ldr	r3, [pc, #48]	; (800626c <__multadd+0x84>)
 800623a:	480d      	ldr	r0, [pc, #52]	; (8006270 <__multadd+0x88>)
 800623c:	21b5      	movs	r1, #181	; 0xb5
 800623e:	f000 fe6b 	bl	8006f18 <__assert_func>
 8006242:	6922      	ldr	r2, [r4, #16]
 8006244:	3202      	adds	r2, #2
 8006246:	f104 010c 	add.w	r1, r4, #12
 800624a:	0092      	lsls	r2, r2, #2
 800624c:	300c      	adds	r0, #12
 800624e:	f7ff ff5b 	bl	8006108 <memcpy>
 8006252:	4621      	mov	r1, r4
 8006254:	4638      	mov	r0, r7
 8006256:	f7ff ffa5 	bl	80061a4 <_Bfree>
 800625a:	4644      	mov	r4, r8
 800625c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006260:	3501      	adds	r5, #1
 8006262:	615e      	str	r6, [r3, #20]
 8006264:	6125      	str	r5, [r4, #16]
 8006266:	4620      	mov	r0, r4
 8006268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800626c:	08007bbb 	.word	0x08007bbb
 8006270:	08007c2c 	.word	0x08007c2c

08006274 <__hi0bits>:
 8006274:	0c03      	lsrs	r3, r0, #16
 8006276:	041b      	lsls	r3, r3, #16
 8006278:	b9d3      	cbnz	r3, 80062b0 <__hi0bits+0x3c>
 800627a:	0400      	lsls	r0, r0, #16
 800627c:	2310      	movs	r3, #16
 800627e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006282:	bf04      	itt	eq
 8006284:	0200      	lsleq	r0, r0, #8
 8006286:	3308      	addeq	r3, #8
 8006288:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800628c:	bf04      	itt	eq
 800628e:	0100      	lsleq	r0, r0, #4
 8006290:	3304      	addeq	r3, #4
 8006292:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006296:	bf04      	itt	eq
 8006298:	0080      	lsleq	r0, r0, #2
 800629a:	3302      	addeq	r3, #2
 800629c:	2800      	cmp	r0, #0
 800629e:	db05      	blt.n	80062ac <__hi0bits+0x38>
 80062a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80062a4:	f103 0301 	add.w	r3, r3, #1
 80062a8:	bf08      	it	eq
 80062aa:	2320      	moveq	r3, #32
 80062ac:	4618      	mov	r0, r3
 80062ae:	4770      	bx	lr
 80062b0:	2300      	movs	r3, #0
 80062b2:	e7e4      	b.n	800627e <__hi0bits+0xa>

080062b4 <__lo0bits>:
 80062b4:	6803      	ldr	r3, [r0, #0]
 80062b6:	f013 0207 	ands.w	r2, r3, #7
 80062ba:	4601      	mov	r1, r0
 80062bc:	d00b      	beq.n	80062d6 <__lo0bits+0x22>
 80062be:	07da      	lsls	r2, r3, #31
 80062c0:	d423      	bmi.n	800630a <__lo0bits+0x56>
 80062c2:	0798      	lsls	r0, r3, #30
 80062c4:	bf49      	itett	mi
 80062c6:	085b      	lsrmi	r3, r3, #1
 80062c8:	089b      	lsrpl	r3, r3, #2
 80062ca:	2001      	movmi	r0, #1
 80062cc:	600b      	strmi	r3, [r1, #0]
 80062ce:	bf5c      	itt	pl
 80062d0:	600b      	strpl	r3, [r1, #0]
 80062d2:	2002      	movpl	r0, #2
 80062d4:	4770      	bx	lr
 80062d6:	b298      	uxth	r0, r3
 80062d8:	b9a8      	cbnz	r0, 8006306 <__lo0bits+0x52>
 80062da:	0c1b      	lsrs	r3, r3, #16
 80062dc:	2010      	movs	r0, #16
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	b90a      	cbnz	r2, 80062e6 <__lo0bits+0x32>
 80062e2:	3008      	adds	r0, #8
 80062e4:	0a1b      	lsrs	r3, r3, #8
 80062e6:	071a      	lsls	r2, r3, #28
 80062e8:	bf04      	itt	eq
 80062ea:	091b      	lsreq	r3, r3, #4
 80062ec:	3004      	addeq	r0, #4
 80062ee:	079a      	lsls	r2, r3, #30
 80062f0:	bf04      	itt	eq
 80062f2:	089b      	lsreq	r3, r3, #2
 80062f4:	3002      	addeq	r0, #2
 80062f6:	07da      	lsls	r2, r3, #31
 80062f8:	d403      	bmi.n	8006302 <__lo0bits+0x4e>
 80062fa:	085b      	lsrs	r3, r3, #1
 80062fc:	f100 0001 	add.w	r0, r0, #1
 8006300:	d005      	beq.n	800630e <__lo0bits+0x5a>
 8006302:	600b      	str	r3, [r1, #0]
 8006304:	4770      	bx	lr
 8006306:	4610      	mov	r0, r2
 8006308:	e7e9      	b.n	80062de <__lo0bits+0x2a>
 800630a:	2000      	movs	r0, #0
 800630c:	4770      	bx	lr
 800630e:	2020      	movs	r0, #32
 8006310:	4770      	bx	lr
	...

08006314 <__i2b>:
 8006314:	b510      	push	{r4, lr}
 8006316:	460c      	mov	r4, r1
 8006318:	2101      	movs	r1, #1
 800631a:	f7ff ff03 	bl	8006124 <_Balloc>
 800631e:	4602      	mov	r2, r0
 8006320:	b928      	cbnz	r0, 800632e <__i2b+0x1a>
 8006322:	4b05      	ldr	r3, [pc, #20]	; (8006338 <__i2b+0x24>)
 8006324:	4805      	ldr	r0, [pc, #20]	; (800633c <__i2b+0x28>)
 8006326:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800632a:	f000 fdf5 	bl	8006f18 <__assert_func>
 800632e:	2301      	movs	r3, #1
 8006330:	6144      	str	r4, [r0, #20]
 8006332:	6103      	str	r3, [r0, #16]
 8006334:	bd10      	pop	{r4, pc}
 8006336:	bf00      	nop
 8006338:	08007bbb 	.word	0x08007bbb
 800633c:	08007c2c 	.word	0x08007c2c

08006340 <__multiply>:
 8006340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006344:	4691      	mov	r9, r2
 8006346:	690a      	ldr	r2, [r1, #16]
 8006348:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800634c:	429a      	cmp	r2, r3
 800634e:	bfb8      	it	lt
 8006350:	460b      	movlt	r3, r1
 8006352:	460c      	mov	r4, r1
 8006354:	bfbc      	itt	lt
 8006356:	464c      	movlt	r4, r9
 8006358:	4699      	movlt	r9, r3
 800635a:	6927      	ldr	r7, [r4, #16]
 800635c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006360:	68a3      	ldr	r3, [r4, #8]
 8006362:	6861      	ldr	r1, [r4, #4]
 8006364:	eb07 060a 	add.w	r6, r7, sl
 8006368:	42b3      	cmp	r3, r6
 800636a:	b085      	sub	sp, #20
 800636c:	bfb8      	it	lt
 800636e:	3101      	addlt	r1, #1
 8006370:	f7ff fed8 	bl	8006124 <_Balloc>
 8006374:	b930      	cbnz	r0, 8006384 <__multiply+0x44>
 8006376:	4602      	mov	r2, r0
 8006378:	4b44      	ldr	r3, [pc, #272]	; (800648c <__multiply+0x14c>)
 800637a:	4845      	ldr	r0, [pc, #276]	; (8006490 <__multiply+0x150>)
 800637c:	f240 115d 	movw	r1, #349	; 0x15d
 8006380:	f000 fdca 	bl	8006f18 <__assert_func>
 8006384:	f100 0514 	add.w	r5, r0, #20
 8006388:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800638c:	462b      	mov	r3, r5
 800638e:	2200      	movs	r2, #0
 8006390:	4543      	cmp	r3, r8
 8006392:	d321      	bcc.n	80063d8 <__multiply+0x98>
 8006394:	f104 0314 	add.w	r3, r4, #20
 8006398:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800639c:	f109 0314 	add.w	r3, r9, #20
 80063a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80063a4:	9202      	str	r2, [sp, #8]
 80063a6:	1b3a      	subs	r2, r7, r4
 80063a8:	3a15      	subs	r2, #21
 80063aa:	f022 0203 	bic.w	r2, r2, #3
 80063ae:	3204      	adds	r2, #4
 80063b0:	f104 0115 	add.w	r1, r4, #21
 80063b4:	428f      	cmp	r7, r1
 80063b6:	bf38      	it	cc
 80063b8:	2204      	movcc	r2, #4
 80063ba:	9201      	str	r2, [sp, #4]
 80063bc:	9a02      	ldr	r2, [sp, #8]
 80063be:	9303      	str	r3, [sp, #12]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d80c      	bhi.n	80063de <__multiply+0x9e>
 80063c4:	2e00      	cmp	r6, #0
 80063c6:	dd03      	ble.n	80063d0 <__multiply+0x90>
 80063c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d05a      	beq.n	8006486 <__multiply+0x146>
 80063d0:	6106      	str	r6, [r0, #16]
 80063d2:	b005      	add	sp, #20
 80063d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d8:	f843 2b04 	str.w	r2, [r3], #4
 80063dc:	e7d8      	b.n	8006390 <__multiply+0x50>
 80063de:	f8b3 a000 	ldrh.w	sl, [r3]
 80063e2:	f1ba 0f00 	cmp.w	sl, #0
 80063e6:	d024      	beq.n	8006432 <__multiply+0xf2>
 80063e8:	f104 0e14 	add.w	lr, r4, #20
 80063ec:	46a9      	mov	r9, r5
 80063ee:	f04f 0c00 	mov.w	ip, #0
 80063f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80063f6:	f8d9 1000 	ldr.w	r1, [r9]
 80063fa:	fa1f fb82 	uxth.w	fp, r2
 80063fe:	b289      	uxth	r1, r1
 8006400:	fb0a 110b 	mla	r1, sl, fp, r1
 8006404:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006408:	f8d9 2000 	ldr.w	r2, [r9]
 800640c:	4461      	add	r1, ip
 800640e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006412:	fb0a c20b 	mla	r2, sl, fp, ip
 8006416:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800641a:	b289      	uxth	r1, r1
 800641c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006420:	4577      	cmp	r7, lr
 8006422:	f849 1b04 	str.w	r1, [r9], #4
 8006426:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800642a:	d8e2      	bhi.n	80063f2 <__multiply+0xb2>
 800642c:	9a01      	ldr	r2, [sp, #4]
 800642e:	f845 c002 	str.w	ip, [r5, r2]
 8006432:	9a03      	ldr	r2, [sp, #12]
 8006434:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006438:	3304      	adds	r3, #4
 800643a:	f1b9 0f00 	cmp.w	r9, #0
 800643e:	d020      	beq.n	8006482 <__multiply+0x142>
 8006440:	6829      	ldr	r1, [r5, #0]
 8006442:	f104 0c14 	add.w	ip, r4, #20
 8006446:	46ae      	mov	lr, r5
 8006448:	f04f 0a00 	mov.w	sl, #0
 800644c:	f8bc b000 	ldrh.w	fp, [ip]
 8006450:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006454:	fb09 220b 	mla	r2, r9, fp, r2
 8006458:	4492      	add	sl, r2
 800645a:	b289      	uxth	r1, r1
 800645c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006460:	f84e 1b04 	str.w	r1, [lr], #4
 8006464:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006468:	f8be 1000 	ldrh.w	r1, [lr]
 800646c:	0c12      	lsrs	r2, r2, #16
 800646e:	fb09 1102 	mla	r1, r9, r2, r1
 8006472:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006476:	4567      	cmp	r7, ip
 8006478:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800647c:	d8e6      	bhi.n	800644c <__multiply+0x10c>
 800647e:	9a01      	ldr	r2, [sp, #4]
 8006480:	50a9      	str	r1, [r5, r2]
 8006482:	3504      	adds	r5, #4
 8006484:	e79a      	b.n	80063bc <__multiply+0x7c>
 8006486:	3e01      	subs	r6, #1
 8006488:	e79c      	b.n	80063c4 <__multiply+0x84>
 800648a:	bf00      	nop
 800648c:	08007bbb 	.word	0x08007bbb
 8006490:	08007c2c 	.word	0x08007c2c

08006494 <__pow5mult>:
 8006494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006498:	4615      	mov	r5, r2
 800649a:	f012 0203 	ands.w	r2, r2, #3
 800649e:	4606      	mov	r6, r0
 80064a0:	460f      	mov	r7, r1
 80064a2:	d007      	beq.n	80064b4 <__pow5mult+0x20>
 80064a4:	4c25      	ldr	r4, [pc, #148]	; (800653c <__pow5mult+0xa8>)
 80064a6:	3a01      	subs	r2, #1
 80064a8:	2300      	movs	r3, #0
 80064aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064ae:	f7ff fe9b 	bl	80061e8 <__multadd>
 80064b2:	4607      	mov	r7, r0
 80064b4:	10ad      	asrs	r5, r5, #2
 80064b6:	d03d      	beq.n	8006534 <__pow5mult+0xa0>
 80064b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80064ba:	b97c      	cbnz	r4, 80064dc <__pow5mult+0x48>
 80064bc:	2010      	movs	r0, #16
 80064be:	f7ff fe1b 	bl	80060f8 <malloc>
 80064c2:	4602      	mov	r2, r0
 80064c4:	6270      	str	r0, [r6, #36]	; 0x24
 80064c6:	b928      	cbnz	r0, 80064d4 <__pow5mult+0x40>
 80064c8:	4b1d      	ldr	r3, [pc, #116]	; (8006540 <__pow5mult+0xac>)
 80064ca:	481e      	ldr	r0, [pc, #120]	; (8006544 <__pow5mult+0xb0>)
 80064cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80064d0:	f000 fd22 	bl	8006f18 <__assert_func>
 80064d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064d8:	6004      	str	r4, [r0, #0]
 80064da:	60c4      	str	r4, [r0, #12]
 80064dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80064e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064e4:	b94c      	cbnz	r4, 80064fa <__pow5mult+0x66>
 80064e6:	f240 2171 	movw	r1, #625	; 0x271
 80064ea:	4630      	mov	r0, r6
 80064ec:	f7ff ff12 	bl	8006314 <__i2b>
 80064f0:	2300      	movs	r3, #0
 80064f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80064f6:	4604      	mov	r4, r0
 80064f8:	6003      	str	r3, [r0, #0]
 80064fa:	f04f 0900 	mov.w	r9, #0
 80064fe:	07eb      	lsls	r3, r5, #31
 8006500:	d50a      	bpl.n	8006518 <__pow5mult+0x84>
 8006502:	4639      	mov	r1, r7
 8006504:	4622      	mov	r2, r4
 8006506:	4630      	mov	r0, r6
 8006508:	f7ff ff1a 	bl	8006340 <__multiply>
 800650c:	4639      	mov	r1, r7
 800650e:	4680      	mov	r8, r0
 8006510:	4630      	mov	r0, r6
 8006512:	f7ff fe47 	bl	80061a4 <_Bfree>
 8006516:	4647      	mov	r7, r8
 8006518:	106d      	asrs	r5, r5, #1
 800651a:	d00b      	beq.n	8006534 <__pow5mult+0xa0>
 800651c:	6820      	ldr	r0, [r4, #0]
 800651e:	b938      	cbnz	r0, 8006530 <__pow5mult+0x9c>
 8006520:	4622      	mov	r2, r4
 8006522:	4621      	mov	r1, r4
 8006524:	4630      	mov	r0, r6
 8006526:	f7ff ff0b 	bl	8006340 <__multiply>
 800652a:	6020      	str	r0, [r4, #0]
 800652c:	f8c0 9000 	str.w	r9, [r0]
 8006530:	4604      	mov	r4, r0
 8006532:	e7e4      	b.n	80064fe <__pow5mult+0x6a>
 8006534:	4638      	mov	r0, r7
 8006536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800653a:	bf00      	nop
 800653c:	08007d78 	.word	0x08007d78
 8006540:	08007b49 	.word	0x08007b49
 8006544:	08007c2c 	.word	0x08007c2c

08006548 <__lshift>:
 8006548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800654c:	460c      	mov	r4, r1
 800654e:	6849      	ldr	r1, [r1, #4]
 8006550:	6923      	ldr	r3, [r4, #16]
 8006552:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006556:	68a3      	ldr	r3, [r4, #8]
 8006558:	4607      	mov	r7, r0
 800655a:	4691      	mov	r9, r2
 800655c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006560:	f108 0601 	add.w	r6, r8, #1
 8006564:	42b3      	cmp	r3, r6
 8006566:	db0b      	blt.n	8006580 <__lshift+0x38>
 8006568:	4638      	mov	r0, r7
 800656a:	f7ff fddb 	bl	8006124 <_Balloc>
 800656e:	4605      	mov	r5, r0
 8006570:	b948      	cbnz	r0, 8006586 <__lshift+0x3e>
 8006572:	4602      	mov	r2, r0
 8006574:	4b2a      	ldr	r3, [pc, #168]	; (8006620 <__lshift+0xd8>)
 8006576:	482b      	ldr	r0, [pc, #172]	; (8006624 <__lshift+0xdc>)
 8006578:	f240 11d9 	movw	r1, #473	; 0x1d9
 800657c:	f000 fccc 	bl	8006f18 <__assert_func>
 8006580:	3101      	adds	r1, #1
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	e7ee      	b.n	8006564 <__lshift+0x1c>
 8006586:	2300      	movs	r3, #0
 8006588:	f100 0114 	add.w	r1, r0, #20
 800658c:	f100 0210 	add.w	r2, r0, #16
 8006590:	4618      	mov	r0, r3
 8006592:	4553      	cmp	r3, sl
 8006594:	db37      	blt.n	8006606 <__lshift+0xbe>
 8006596:	6920      	ldr	r0, [r4, #16]
 8006598:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800659c:	f104 0314 	add.w	r3, r4, #20
 80065a0:	f019 091f 	ands.w	r9, r9, #31
 80065a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80065ac:	d02f      	beq.n	800660e <__lshift+0xc6>
 80065ae:	f1c9 0e20 	rsb	lr, r9, #32
 80065b2:	468a      	mov	sl, r1
 80065b4:	f04f 0c00 	mov.w	ip, #0
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	fa02 f209 	lsl.w	r2, r2, r9
 80065be:	ea42 020c 	orr.w	r2, r2, ip
 80065c2:	f84a 2b04 	str.w	r2, [sl], #4
 80065c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80065ca:	4298      	cmp	r0, r3
 80065cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80065d0:	d8f2      	bhi.n	80065b8 <__lshift+0x70>
 80065d2:	1b03      	subs	r3, r0, r4
 80065d4:	3b15      	subs	r3, #21
 80065d6:	f023 0303 	bic.w	r3, r3, #3
 80065da:	3304      	adds	r3, #4
 80065dc:	f104 0215 	add.w	r2, r4, #21
 80065e0:	4290      	cmp	r0, r2
 80065e2:	bf38      	it	cc
 80065e4:	2304      	movcc	r3, #4
 80065e6:	f841 c003 	str.w	ip, [r1, r3]
 80065ea:	f1bc 0f00 	cmp.w	ip, #0
 80065ee:	d001      	beq.n	80065f4 <__lshift+0xac>
 80065f0:	f108 0602 	add.w	r6, r8, #2
 80065f4:	3e01      	subs	r6, #1
 80065f6:	4638      	mov	r0, r7
 80065f8:	612e      	str	r6, [r5, #16]
 80065fa:	4621      	mov	r1, r4
 80065fc:	f7ff fdd2 	bl	80061a4 <_Bfree>
 8006600:	4628      	mov	r0, r5
 8006602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006606:	f842 0f04 	str.w	r0, [r2, #4]!
 800660a:	3301      	adds	r3, #1
 800660c:	e7c1      	b.n	8006592 <__lshift+0x4a>
 800660e:	3904      	subs	r1, #4
 8006610:	f853 2b04 	ldr.w	r2, [r3], #4
 8006614:	f841 2f04 	str.w	r2, [r1, #4]!
 8006618:	4298      	cmp	r0, r3
 800661a:	d8f9      	bhi.n	8006610 <__lshift+0xc8>
 800661c:	e7ea      	b.n	80065f4 <__lshift+0xac>
 800661e:	bf00      	nop
 8006620:	08007bbb 	.word	0x08007bbb
 8006624:	08007c2c 	.word	0x08007c2c

08006628 <__mcmp>:
 8006628:	b530      	push	{r4, r5, lr}
 800662a:	6902      	ldr	r2, [r0, #16]
 800662c:	690c      	ldr	r4, [r1, #16]
 800662e:	1b12      	subs	r2, r2, r4
 8006630:	d10e      	bne.n	8006650 <__mcmp+0x28>
 8006632:	f100 0314 	add.w	r3, r0, #20
 8006636:	3114      	adds	r1, #20
 8006638:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800663c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006640:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006644:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006648:	42a5      	cmp	r5, r4
 800664a:	d003      	beq.n	8006654 <__mcmp+0x2c>
 800664c:	d305      	bcc.n	800665a <__mcmp+0x32>
 800664e:	2201      	movs	r2, #1
 8006650:	4610      	mov	r0, r2
 8006652:	bd30      	pop	{r4, r5, pc}
 8006654:	4283      	cmp	r3, r0
 8006656:	d3f3      	bcc.n	8006640 <__mcmp+0x18>
 8006658:	e7fa      	b.n	8006650 <__mcmp+0x28>
 800665a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800665e:	e7f7      	b.n	8006650 <__mcmp+0x28>

08006660 <__mdiff>:
 8006660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006664:	460c      	mov	r4, r1
 8006666:	4606      	mov	r6, r0
 8006668:	4611      	mov	r1, r2
 800666a:	4620      	mov	r0, r4
 800666c:	4690      	mov	r8, r2
 800666e:	f7ff ffdb 	bl	8006628 <__mcmp>
 8006672:	1e05      	subs	r5, r0, #0
 8006674:	d110      	bne.n	8006698 <__mdiff+0x38>
 8006676:	4629      	mov	r1, r5
 8006678:	4630      	mov	r0, r6
 800667a:	f7ff fd53 	bl	8006124 <_Balloc>
 800667e:	b930      	cbnz	r0, 800668e <__mdiff+0x2e>
 8006680:	4b3a      	ldr	r3, [pc, #232]	; (800676c <__mdiff+0x10c>)
 8006682:	4602      	mov	r2, r0
 8006684:	f240 2132 	movw	r1, #562	; 0x232
 8006688:	4839      	ldr	r0, [pc, #228]	; (8006770 <__mdiff+0x110>)
 800668a:	f000 fc45 	bl	8006f18 <__assert_func>
 800668e:	2301      	movs	r3, #1
 8006690:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006694:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006698:	bfa4      	itt	ge
 800669a:	4643      	movge	r3, r8
 800669c:	46a0      	movge	r8, r4
 800669e:	4630      	mov	r0, r6
 80066a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80066a4:	bfa6      	itte	ge
 80066a6:	461c      	movge	r4, r3
 80066a8:	2500      	movge	r5, #0
 80066aa:	2501      	movlt	r5, #1
 80066ac:	f7ff fd3a 	bl	8006124 <_Balloc>
 80066b0:	b920      	cbnz	r0, 80066bc <__mdiff+0x5c>
 80066b2:	4b2e      	ldr	r3, [pc, #184]	; (800676c <__mdiff+0x10c>)
 80066b4:	4602      	mov	r2, r0
 80066b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80066ba:	e7e5      	b.n	8006688 <__mdiff+0x28>
 80066bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80066c0:	6926      	ldr	r6, [r4, #16]
 80066c2:	60c5      	str	r5, [r0, #12]
 80066c4:	f104 0914 	add.w	r9, r4, #20
 80066c8:	f108 0514 	add.w	r5, r8, #20
 80066cc:	f100 0e14 	add.w	lr, r0, #20
 80066d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80066d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80066d8:	f108 0210 	add.w	r2, r8, #16
 80066dc:	46f2      	mov	sl, lr
 80066de:	2100      	movs	r1, #0
 80066e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80066e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80066e8:	fa1f f883 	uxth.w	r8, r3
 80066ec:	fa11 f18b 	uxtah	r1, r1, fp
 80066f0:	0c1b      	lsrs	r3, r3, #16
 80066f2:	eba1 0808 	sub.w	r8, r1, r8
 80066f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80066fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80066fe:	fa1f f888 	uxth.w	r8, r8
 8006702:	1419      	asrs	r1, r3, #16
 8006704:	454e      	cmp	r6, r9
 8006706:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800670a:	f84a 3b04 	str.w	r3, [sl], #4
 800670e:	d8e7      	bhi.n	80066e0 <__mdiff+0x80>
 8006710:	1b33      	subs	r3, r6, r4
 8006712:	3b15      	subs	r3, #21
 8006714:	f023 0303 	bic.w	r3, r3, #3
 8006718:	3304      	adds	r3, #4
 800671a:	3415      	adds	r4, #21
 800671c:	42a6      	cmp	r6, r4
 800671e:	bf38      	it	cc
 8006720:	2304      	movcc	r3, #4
 8006722:	441d      	add	r5, r3
 8006724:	4473      	add	r3, lr
 8006726:	469e      	mov	lr, r3
 8006728:	462e      	mov	r6, r5
 800672a:	4566      	cmp	r6, ip
 800672c:	d30e      	bcc.n	800674c <__mdiff+0xec>
 800672e:	f10c 0203 	add.w	r2, ip, #3
 8006732:	1b52      	subs	r2, r2, r5
 8006734:	f022 0203 	bic.w	r2, r2, #3
 8006738:	3d03      	subs	r5, #3
 800673a:	45ac      	cmp	ip, r5
 800673c:	bf38      	it	cc
 800673e:	2200      	movcc	r2, #0
 8006740:	441a      	add	r2, r3
 8006742:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006746:	b17b      	cbz	r3, 8006768 <__mdiff+0x108>
 8006748:	6107      	str	r7, [r0, #16]
 800674a:	e7a3      	b.n	8006694 <__mdiff+0x34>
 800674c:	f856 8b04 	ldr.w	r8, [r6], #4
 8006750:	fa11 f288 	uxtah	r2, r1, r8
 8006754:	1414      	asrs	r4, r2, #16
 8006756:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800675a:	b292      	uxth	r2, r2
 800675c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006760:	f84e 2b04 	str.w	r2, [lr], #4
 8006764:	1421      	asrs	r1, r4, #16
 8006766:	e7e0      	b.n	800672a <__mdiff+0xca>
 8006768:	3f01      	subs	r7, #1
 800676a:	e7ea      	b.n	8006742 <__mdiff+0xe2>
 800676c:	08007bbb 	.word	0x08007bbb
 8006770:	08007c2c 	.word	0x08007c2c

08006774 <__d2b>:
 8006774:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006778:	4689      	mov	r9, r1
 800677a:	2101      	movs	r1, #1
 800677c:	ec57 6b10 	vmov	r6, r7, d0
 8006780:	4690      	mov	r8, r2
 8006782:	f7ff fccf 	bl	8006124 <_Balloc>
 8006786:	4604      	mov	r4, r0
 8006788:	b930      	cbnz	r0, 8006798 <__d2b+0x24>
 800678a:	4602      	mov	r2, r0
 800678c:	4b25      	ldr	r3, [pc, #148]	; (8006824 <__d2b+0xb0>)
 800678e:	4826      	ldr	r0, [pc, #152]	; (8006828 <__d2b+0xb4>)
 8006790:	f240 310a 	movw	r1, #778	; 0x30a
 8006794:	f000 fbc0 	bl	8006f18 <__assert_func>
 8006798:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800679c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80067a0:	bb35      	cbnz	r5, 80067f0 <__d2b+0x7c>
 80067a2:	2e00      	cmp	r6, #0
 80067a4:	9301      	str	r3, [sp, #4]
 80067a6:	d028      	beq.n	80067fa <__d2b+0x86>
 80067a8:	4668      	mov	r0, sp
 80067aa:	9600      	str	r6, [sp, #0]
 80067ac:	f7ff fd82 	bl	80062b4 <__lo0bits>
 80067b0:	9900      	ldr	r1, [sp, #0]
 80067b2:	b300      	cbz	r0, 80067f6 <__d2b+0x82>
 80067b4:	9a01      	ldr	r2, [sp, #4]
 80067b6:	f1c0 0320 	rsb	r3, r0, #32
 80067ba:	fa02 f303 	lsl.w	r3, r2, r3
 80067be:	430b      	orrs	r3, r1
 80067c0:	40c2      	lsrs	r2, r0
 80067c2:	6163      	str	r3, [r4, #20]
 80067c4:	9201      	str	r2, [sp, #4]
 80067c6:	9b01      	ldr	r3, [sp, #4]
 80067c8:	61a3      	str	r3, [r4, #24]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	bf14      	ite	ne
 80067ce:	2202      	movne	r2, #2
 80067d0:	2201      	moveq	r2, #1
 80067d2:	6122      	str	r2, [r4, #16]
 80067d4:	b1d5      	cbz	r5, 800680c <__d2b+0x98>
 80067d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80067da:	4405      	add	r5, r0
 80067dc:	f8c9 5000 	str.w	r5, [r9]
 80067e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80067e4:	f8c8 0000 	str.w	r0, [r8]
 80067e8:	4620      	mov	r0, r4
 80067ea:	b003      	add	sp, #12
 80067ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067f4:	e7d5      	b.n	80067a2 <__d2b+0x2e>
 80067f6:	6161      	str	r1, [r4, #20]
 80067f8:	e7e5      	b.n	80067c6 <__d2b+0x52>
 80067fa:	a801      	add	r0, sp, #4
 80067fc:	f7ff fd5a 	bl	80062b4 <__lo0bits>
 8006800:	9b01      	ldr	r3, [sp, #4]
 8006802:	6163      	str	r3, [r4, #20]
 8006804:	2201      	movs	r2, #1
 8006806:	6122      	str	r2, [r4, #16]
 8006808:	3020      	adds	r0, #32
 800680a:	e7e3      	b.n	80067d4 <__d2b+0x60>
 800680c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006810:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006814:	f8c9 0000 	str.w	r0, [r9]
 8006818:	6918      	ldr	r0, [r3, #16]
 800681a:	f7ff fd2b 	bl	8006274 <__hi0bits>
 800681e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006822:	e7df      	b.n	80067e4 <__d2b+0x70>
 8006824:	08007bbb 	.word	0x08007bbb
 8006828:	08007c2c 	.word	0x08007c2c

0800682c <_calloc_r>:
 800682c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800682e:	fba1 2402 	umull	r2, r4, r1, r2
 8006832:	b94c      	cbnz	r4, 8006848 <_calloc_r+0x1c>
 8006834:	4611      	mov	r1, r2
 8006836:	9201      	str	r2, [sp, #4]
 8006838:	f000 f87a 	bl	8006930 <_malloc_r>
 800683c:	9a01      	ldr	r2, [sp, #4]
 800683e:	4605      	mov	r5, r0
 8006840:	b930      	cbnz	r0, 8006850 <_calloc_r+0x24>
 8006842:	4628      	mov	r0, r5
 8006844:	b003      	add	sp, #12
 8006846:	bd30      	pop	{r4, r5, pc}
 8006848:	220c      	movs	r2, #12
 800684a:	6002      	str	r2, [r0, #0]
 800684c:	2500      	movs	r5, #0
 800684e:	e7f8      	b.n	8006842 <_calloc_r+0x16>
 8006850:	4621      	mov	r1, r4
 8006852:	f7fe f84f 	bl	80048f4 <memset>
 8006856:	e7f4      	b.n	8006842 <_calloc_r+0x16>

08006858 <_free_r>:
 8006858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800685a:	2900      	cmp	r1, #0
 800685c:	d044      	beq.n	80068e8 <_free_r+0x90>
 800685e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006862:	9001      	str	r0, [sp, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	f1a1 0404 	sub.w	r4, r1, #4
 800686a:	bfb8      	it	lt
 800686c:	18e4      	addlt	r4, r4, r3
 800686e:	f000 fcdf 	bl	8007230 <__malloc_lock>
 8006872:	4a1e      	ldr	r2, [pc, #120]	; (80068ec <_free_r+0x94>)
 8006874:	9801      	ldr	r0, [sp, #4]
 8006876:	6813      	ldr	r3, [r2, #0]
 8006878:	b933      	cbnz	r3, 8006888 <_free_r+0x30>
 800687a:	6063      	str	r3, [r4, #4]
 800687c:	6014      	str	r4, [r2, #0]
 800687e:	b003      	add	sp, #12
 8006880:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006884:	f000 bcda 	b.w	800723c <__malloc_unlock>
 8006888:	42a3      	cmp	r3, r4
 800688a:	d908      	bls.n	800689e <_free_r+0x46>
 800688c:	6825      	ldr	r5, [r4, #0]
 800688e:	1961      	adds	r1, r4, r5
 8006890:	428b      	cmp	r3, r1
 8006892:	bf01      	itttt	eq
 8006894:	6819      	ldreq	r1, [r3, #0]
 8006896:	685b      	ldreq	r3, [r3, #4]
 8006898:	1949      	addeq	r1, r1, r5
 800689a:	6021      	streq	r1, [r4, #0]
 800689c:	e7ed      	b.n	800687a <_free_r+0x22>
 800689e:	461a      	mov	r2, r3
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	b10b      	cbz	r3, 80068a8 <_free_r+0x50>
 80068a4:	42a3      	cmp	r3, r4
 80068a6:	d9fa      	bls.n	800689e <_free_r+0x46>
 80068a8:	6811      	ldr	r1, [r2, #0]
 80068aa:	1855      	adds	r5, r2, r1
 80068ac:	42a5      	cmp	r5, r4
 80068ae:	d10b      	bne.n	80068c8 <_free_r+0x70>
 80068b0:	6824      	ldr	r4, [r4, #0]
 80068b2:	4421      	add	r1, r4
 80068b4:	1854      	adds	r4, r2, r1
 80068b6:	42a3      	cmp	r3, r4
 80068b8:	6011      	str	r1, [r2, #0]
 80068ba:	d1e0      	bne.n	800687e <_free_r+0x26>
 80068bc:	681c      	ldr	r4, [r3, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	6053      	str	r3, [r2, #4]
 80068c2:	4421      	add	r1, r4
 80068c4:	6011      	str	r1, [r2, #0]
 80068c6:	e7da      	b.n	800687e <_free_r+0x26>
 80068c8:	d902      	bls.n	80068d0 <_free_r+0x78>
 80068ca:	230c      	movs	r3, #12
 80068cc:	6003      	str	r3, [r0, #0]
 80068ce:	e7d6      	b.n	800687e <_free_r+0x26>
 80068d0:	6825      	ldr	r5, [r4, #0]
 80068d2:	1961      	adds	r1, r4, r5
 80068d4:	428b      	cmp	r3, r1
 80068d6:	bf04      	itt	eq
 80068d8:	6819      	ldreq	r1, [r3, #0]
 80068da:	685b      	ldreq	r3, [r3, #4]
 80068dc:	6063      	str	r3, [r4, #4]
 80068de:	bf04      	itt	eq
 80068e0:	1949      	addeq	r1, r1, r5
 80068e2:	6021      	streq	r1, [r4, #0]
 80068e4:	6054      	str	r4, [r2, #4]
 80068e6:	e7ca      	b.n	800687e <_free_r+0x26>
 80068e8:	b003      	add	sp, #12
 80068ea:	bd30      	pop	{r4, r5, pc}
 80068ec:	20000290 	.word	0x20000290

080068f0 <sbrk_aligned>:
 80068f0:	b570      	push	{r4, r5, r6, lr}
 80068f2:	4e0e      	ldr	r6, [pc, #56]	; (800692c <sbrk_aligned+0x3c>)
 80068f4:	460c      	mov	r4, r1
 80068f6:	6831      	ldr	r1, [r6, #0]
 80068f8:	4605      	mov	r5, r0
 80068fa:	b911      	cbnz	r1, 8006902 <sbrk_aligned+0x12>
 80068fc:	f000 f9e6 	bl	8006ccc <_sbrk_r>
 8006900:	6030      	str	r0, [r6, #0]
 8006902:	4621      	mov	r1, r4
 8006904:	4628      	mov	r0, r5
 8006906:	f000 f9e1 	bl	8006ccc <_sbrk_r>
 800690a:	1c43      	adds	r3, r0, #1
 800690c:	d00a      	beq.n	8006924 <sbrk_aligned+0x34>
 800690e:	1cc4      	adds	r4, r0, #3
 8006910:	f024 0403 	bic.w	r4, r4, #3
 8006914:	42a0      	cmp	r0, r4
 8006916:	d007      	beq.n	8006928 <sbrk_aligned+0x38>
 8006918:	1a21      	subs	r1, r4, r0
 800691a:	4628      	mov	r0, r5
 800691c:	f000 f9d6 	bl	8006ccc <_sbrk_r>
 8006920:	3001      	adds	r0, #1
 8006922:	d101      	bne.n	8006928 <sbrk_aligned+0x38>
 8006924:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006928:	4620      	mov	r0, r4
 800692a:	bd70      	pop	{r4, r5, r6, pc}
 800692c:	20000294 	.word	0x20000294

08006930 <_malloc_r>:
 8006930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006934:	1ccd      	adds	r5, r1, #3
 8006936:	f025 0503 	bic.w	r5, r5, #3
 800693a:	3508      	adds	r5, #8
 800693c:	2d0c      	cmp	r5, #12
 800693e:	bf38      	it	cc
 8006940:	250c      	movcc	r5, #12
 8006942:	2d00      	cmp	r5, #0
 8006944:	4607      	mov	r7, r0
 8006946:	db01      	blt.n	800694c <_malloc_r+0x1c>
 8006948:	42a9      	cmp	r1, r5
 800694a:	d905      	bls.n	8006958 <_malloc_r+0x28>
 800694c:	230c      	movs	r3, #12
 800694e:	603b      	str	r3, [r7, #0]
 8006950:	2600      	movs	r6, #0
 8006952:	4630      	mov	r0, r6
 8006954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006958:	4e2e      	ldr	r6, [pc, #184]	; (8006a14 <_malloc_r+0xe4>)
 800695a:	f000 fc69 	bl	8007230 <__malloc_lock>
 800695e:	6833      	ldr	r3, [r6, #0]
 8006960:	461c      	mov	r4, r3
 8006962:	bb34      	cbnz	r4, 80069b2 <_malloc_r+0x82>
 8006964:	4629      	mov	r1, r5
 8006966:	4638      	mov	r0, r7
 8006968:	f7ff ffc2 	bl	80068f0 <sbrk_aligned>
 800696c:	1c43      	adds	r3, r0, #1
 800696e:	4604      	mov	r4, r0
 8006970:	d14d      	bne.n	8006a0e <_malloc_r+0xde>
 8006972:	6834      	ldr	r4, [r6, #0]
 8006974:	4626      	mov	r6, r4
 8006976:	2e00      	cmp	r6, #0
 8006978:	d140      	bne.n	80069fc <_malloc_r+0xcc>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	4631      	mov	r1, r6
 800697e:	4638      	mov	r0, r7
 8006980:	eb04 0803 	add.w	r8, r4, r3
 8006984:	f000 f9a2 	bl	8006ccc <_sbrk_r>
 8006988:	4580      	cmp	r8, r0
 800698a:	d13a      	bne.n	8006a02 <_malloc_r+0xd2>
 800698c:	6821      	ldr	r1, [r4, #0]
 800698e:	3503      	adds	r5, #3
 8006990:	1a6d      	subs	r5, r5, r1
 8006992:	f025 0503 	bic.w	r5, r5, #3
 8006996:	3508      	adds	r5, #8
 8006998:	2d0c      	cmp	r5, #12
 800699a:	bf38      	it	cc
 800699c:	250c      	movcc	r5, #12
 800699e:	4629      	mov	r1, r5
 80069a0:	4638      	mov	r0, r7
 80069a2:	f7ff ffa5 	bl	80068f0 <sbrk_aligned>
 80069a6:	3001      	adds	r0, #1
 80069a8:	d02b      	beq.n	8006a02 <_malloc_r+0xd2>
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	442b      	add	r3, r5
 80069ae:	6023      	str	r3, [r4, #0]
 80069b0:	e00e      	b.n	80069d0 <_malloc_r+0xa0>
 80069b2:	6822      	ldr	r2, [r4, #0]
 80069b4:	1b52      	subs	r2, r2, r5
 80069b6:	d41e      	bmi.n	80069f6 <_malloc_r+0xc6>
 80069b8:	2a0b      	cmp	r2, #11
 80069ba:	d916      	bls.n	80069ea <_malloc_r+0xba>
 80069bc:	1961      	adds	r1, r4, r5
 80069be:	42a3      	cmp	r3, r4
 80069c0:	6025      	str	r5, [r4, #0]
 80069c2:	bf18      	it	ne
 80069c4:	6059      	strne	r1, [r3, #4]
 80069c6:	6863      	ldr	r3, [r4, #4]
 80069c8:	bf08      	it	eq
 80069ca:	6031      	streq	r1, [r6, #0]
 80069cc:	5162      	str	r2, [r4, r5]
 80069ce:	604b      	str	r3, [r1, #4]
 80069d0:	4638      	mov	r0, r7
 80069d2:	f104 060b 	add.w	r6, r4, #11
 80069d6:	f000 fc31 	bl	800723c <__malloc_unlock>
 80069da:	f026 0607 	bic.w	r6, r6, #7
 80069de:	1d23      	adds	r3, r4, #4
 80069e0:	1af2      	subs	r2, r6, r3
 80069e2:	d0b6      	beq.n	8006952 <_malloc_r+0x22>
 80069e4:	1b9b      	subs	r3, r3, r6
 80069e6:	50a3      	str	r3, [r4, r2]
 80069e8:	e7b3      	b.n	8006952 <_malloc_r+0x22>
 80069ea:	6862      	ldr	r2, [r4, #4]
 80069ec:	42a3      	cmp	r3, r4
 80069ee:	bf0c      	ite	eq
 80069f0:	6032      	streq	r2, [r6, #0]
 80069f2:	605a      	strne	r2, [r3, #4]
 80069f4:	e7ec      	b.n	80069d0 <_malloc_r+0xa0>
 80069f6:	4623      	mov	r3, r4
 80069f8:	6864      	ldr	r4, [r4, #4]
 80069fa:	e7b2      	b.n	8006962 <_malloc_r+0x32>
 80069fc:	4634      	mov	r4, r6
 80069fe:	6876      	ldr	r6, [r6, #4]
 8006a00:	e7b9      	b.n	8006976 <_malloc_r+0x46>
 8006a02:	230c      	movs	r3, #12
 8006a04:	603b      	str	r3, [r7, #0]
 8006a06:	4638      	mov	r0, r7
 8006a08:	f000 fc18 	bl	800723c <__malloc_unlock>
 8006a0c:	e7a1      	b.n	8006952 <_malloc_r+0x22>
 8006a0e:	6025      	str	r5, [r4, #0]
 8006a10:	e7de      	b.n	80069d0 <_malloc_r+0xa0>
 8006a12:	bf00      	nop
 8006a14:	20000290 	.word	0x20000290

08006a18 <__sfputc_r>:
 8006a18:	6893      	ldr	r3, [r2, #8]
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	b410      	push	{r4}
 8006a20:	6093      	str	r3, [r2, #8]
 8006a22:	da08      	bge.n	8006a36 <__sfputc_r+0x1e>
 8006a24:	6994      	ldr	r4, [r2, #24]
 8006a26:	42a3      	cmp	r3, r4
 8006a28:	db01      	blt.n	8006a2e <__sfputc_r+0x16>
 8006a2a:	290a      	cmp	r1, #10
 8006a2c:	d103      	bne.n	8006a36 <__sfputc_r+0x1e>
 8006a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a32:	f000 b99f 	b.w	8006d74 <__swbuf_r>
 8006a36:	6813      	ldr	r3, [r2, #0]
 8006a38:	1c58      	adds	r0, r3, #1
 8006a3a:	6010      	str	r0, [r2, #0]
 8006a3c:	7019      	strb	r1, [r3, #0]
 8006a3e:	4608      	mov	r0, r1
 8006a40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <__sfputs_r>:
 8006a46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a48:	4606      	mov	r6, r0
 8006a4a:	460f      	mov	r7, r1
 8006a4c:	4614      	mov	r4, r2
 8006a4e:	18d5      	adds	r5, r2, r3
 8006a50:	42ac      	cmp	r4, r5
 8006a52:	d101      	bne.n	8006a58 <__sfputs_r+0x12>
 8006a54:	2000      	movs	r0, #0
 8006a56:	e007      	b.n	8006a68 <__sfputs_r+0x22>
 8006a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a5c:	463a      	mov	r2, r7
 8006a5e:	4630      	mov	r0, r6
 8006a60:	f7ff ffda 	bl	8006a18 <__sfputc_r>
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	d1f3      	bne.n	8006a50 <__sfputs_r+0xa>
 8006a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a6c <_vfiprintf_r>:
 8006a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a70:	460d      	mov	r5, r1
 8006a72:	b09d      	sub	sp, #116	; 0x74
 8006a74:	4614      	mov	r4, r2
 8006a76:	4698      	mov	r8, r3
 8006a78:	4606      	mov	r6, r0
 8006a7a:	b118      	cbz	r0, 8006a84 <_vfiprintf_r+0x18>
 8006a7c:	6983      	ldr	r3, [r0, #24]
 8006a7e:	b90b      	cbnz	r3, 8006a84 <_vfiprintf_r+0x18>
 8006a80:	f7ff fa94 	bl	8005fac <__sinit>
 8006a84:	4b89      	ldr	r3, [pc, #548]	; (8006cac <_vfiprintf_r+0x240>)
 8006a86:	429d      	cmp	r5, r3
 8006a88:	d11b      	bne.n	8006ac2 <_vfiprintf_r+0x56>
 8006a8a:	6875      	ldr	r5, [r6, #4]
 8006a8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a8e:	07d9      	lsls	r1, r3, #31
 8006a90:	d405      	bmi.n	8006a9e <_vfiprintf_r+0x32>
 8006a92:	89ab      	ldrh	r3, [r5, #12]
 8006a94:	059a      	lsls	r2, r3, #22
 8006a96:	d402      	bmi.n	8006a9e <_vfiprintf_r+0x32>
 8006a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a9a:	f7ff fb2a 	bl	80060f2 <__retarget_lock_acquire_recursive>
 8006a9e:	89ab      	ldrh	r3, [r5, #12]
 8006aa0:	071b      	lsls	r3, r3, #28
 8006aa2:	d501      	bpl.n	8006aa8 <_vfiprintf_r+0x3c>
 8006aa4:	692b      	ldr	r3, [r5, #16]
 8006aa6:	b9eb      	cbnz	r3, 8006ae4 <_vfiprintf_r+0x78>
 8006aa8:	4629      	mov	r1, r5
 8006aaa:	4630      	mov	r0, r6
 8006aac:	f000 f9c6 	bl	8006e3c <__swsetup_r>
 8006ab0:	b1c0      	cbz	r0, 8006ae4 <_vfiprintf_r+0x78>
 8006ab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ab4:	07dc      	lsls	r4, r3, #31
 8006ab6:	d50e      	bpl.n	8006ad6 <_vfiprintf_r+0x6a>
 8006ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006abc:	b01d      	add	sp, #116	; 0x74
 8006abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac2:	4b7b      	ldr	r3, [pc, #492]	; (8006cb0 <_vfiprintf_r+0x244>)
 8006ac4:	429d      	cmp	r5, r3
 8006ac6:	d101      	bne.n	8006acc <_vfiprintf_r+0x60>
 8006ac8:	68b5      	ldr	r5, [r6, #8]
 8006aca:	e7df      	b.n	8006a8c <_vfiprintf_r+0x20>
 8006acc:	4b79      	ldr	r3, [pc, #484]	; (8006cb4 <_vfiprintf_r+0x248>)
 8006ace:	429d      	cmp	r5, r3
 8006ad0:	bf08      	it	eq
 8006ad2:	68f5      	ldreq	r5, [r6, #12]
 8006ad4:	e7da      	b.n	8006a8c <_vfiprintf_r+0x20>
 8006ad6:	89ab      	ldrh	r3, [r5, #12]
 8006ad8:	0598      	lsls	r0, r3, #22
 8006ada:	d4ed      	bmi.n	8006ab8 <_vfiprintf_r+0x4c>
 8006adc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ade:	f7ff fb09 	bl	80060f4 <__retarget_lock_release_recursive>
 8006ae2:	e7e9      	b.n	8006ab8 <_vfiprintf_r+0x4c>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ae8:	2320      	movs	r3, #32
 8006aea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006aee:	f8cd 800c 	str.w	r8, [sp, #12]
 8006af2:	2330      	movs	r3, #48	; 0x30
 8006af4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006cb8 <_vfiprintf_r+0x24c>
 8006af8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006afc:	f04f 0901 	mov.w	r9, #1
 8006b00:	4623      	mov	r3, r4
 8006b02:	469a      	mov	sl, r3
 8006b04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b08:	b10a      	cbz	r2, 8006b0e <_vfiprintf_r+0xa2>
 8006b0a:	2a25      	cmp	r2, #37	; 0x25
 8006b0c:	d1f9      	bne.n	8006b02 <_vfiprintf_r+0x96>
 8006b0e:	ebba 0b04 	subs.w	fp, sl, r4
 8006b12:	d00b      	beq.n	8006b2c <_vfiprintf_r+0xc0>
 8006b14:	465b      	mov	r3, fp
 8006b16:	4622      	mov	r2, r4
 8006b18:	4629      	mov	r1, r5
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f7ff ff93 	bl	8006a46 <__sfputs_r>
 8006b20:	3001      	adds	r0, #1
 8006b22:	f000 80aa 	beq.w	8006c7a <_vfiprintf_r+0x20e>
 8006b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b28:	445a      	add	r2, fp
 8006b2a:	9209      	str	r2, [sp, #36]	; 0x24
 8006b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 80a2 	beq.w	8006c7a <_vfiprintf_r+0x20e>
 8006b36:	2300      	movs	r3, #0
 8006b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b40:	f10a 0a01 	add.w	sl, sl, #1
 8006b44:	9304      	str	r3, [sp, #16]
 8006b46:	9307      	str	r3, [sp, #28]
 8006b48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b4c:	931a      	str	r3, [sp, #104]	; 0x68
 8006b4e:	4654      	mov	r4, sl
 8006b50:	2205      	movs	r2, #5
 8006b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b56:	4858      	ldr	r0, [pc, #352]	; (8006cb8 <_vfiprintf_r+0x24c>)
 8006b58:	f7f9 fb42 	bl	80001e0 <memchr>
 8006b5c:	9a04      	ldr	r2, [sp, #16]
 8006b5e:	b9d8      	cbnz	r0, 8006b98 <_vfiprintf_r+0x12c>
 8006b60:	06d1      	lsls	r1, r2, #27
 8006b62:	bf44      	itt	mi
 8006b64:	2320      	movmi	r3, #32
 8006b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b6a:	0713      	lsls	r3, r2, #28
 8006b6c:	bf44      	itt	mi
 8006b6e:	232b      	movmi	r3, #43	; 0x2b
 8006b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b74:	f89a 3000 	ldrb.w	r3, [sl]
 8006b78:	2b2a      	cmp	r3, #42	; 0x2a
 8006b7a:	d015      	beq.n	8006ba8 <_vfiprintf_r+0x13c>
 8006b7c:	9a07      	ldr	r2, [sp, #28]
 8006b7e:	4654      	mov	r4, sl
 8006b80:	2000      	movs	r0, #0
 8006b82:	f04f 0c0a 	mov.w	ip, #10
 8006b86:	4621      	mov	r1, r4
 8006b88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b8c:	3b30      	subs	r3, #48	; 0x30
 8006b8e:	2b09      	cmp	r3, #9
 8006b90:	d94e      	bls.n	8006c30 <_vfiprintf_r+0x1c4>
 8006b92:	b1b0      	cbz	r0, 8006bc2 <_vfiprintf_r+0x156>
 8006b94:	9207      	str	r2, [sp, #28]
 8006b96:	e014      	b.n	8006bc2 <_vfiprintf_r+0x156>
 8006b98:	eba0 0308 	sub.w	r3, r0, r8
 8006b9c:	fa09 f303 	lsl.w	r3, r9, r3
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	9304      	str	r3, [sp, #16]
 8006ba4:	46a2      	mov	sl, r4
 8006ba6:	e7d2      	b.n	8006b4e <_vfiprintf_r+0xe2>
 8006ba8:	9b03      	ldr	r3, [sp, #12]
 8006baa:	1d19      	adds	r1, r3, #4
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	9103      	str	r1, [sp, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	bfbb      	ittet	lt
 8006bb4:	425b      	neglt	r3, r3
 8006bb6:	f042 0202 	orrlt.w	r2, r2, #2
 8006bba:	9307      	strge	r3, [sp, #28]
 8006bbc:	9307      	strlt	r3, [sp, #28]
 8006bbe:	bfb8      	it	lt
 8006bc0:	9204      	strlt	r2, [sp, #16]
 8006bc2:	7823      	ldrb	r3, [r4, #0]
 8006bc4:	2b2e      	cmp	r3, #46	; 0x2e
 8006bc6:	d10c      	bne.n	8006be2 <_vfiprintf_r+0x176>
 8006bc8:	7863      	ldrb	r3, [r4, #1]
 8006bca:	2b2a      	cmp	r3, #42	; 0x2a
 8006bcc:	d135      	bne.n	8006c3a <_vfiprintf_r+0x1ce>
 8006bce:	9b03      	ldr	r3, [sp, #12]
 8006bd0:	1d1a      	adds	r2, r3, #4
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	9203      	str	r2, [sp, #12]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	bfb8      	it	lt
 8006bda:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006bde:	3402      	adds	r4, #2
 8006be0:	9305      	str	r3, [sp, #20]
 8006be2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006cc8 <_vfiprintf_r+0x25c>
 8006be6:	7821      	ldrb	r1, [r4, #0]
 8006be8:	2203      	movs	r2, #3
 8006bea:	4650      	mov	r0, sl
 8006bec:	f7f9 faf8 	bl	80001e0 <memchr>
 8006bf0:	b140      	cbz	r0, 8006c04 <_vfiprintf_r+0x198>
 8006bf2:	2340      	movs	r3, #64	; 0x40
 8006bf4:	eba0 000a 	sub.w	r0, r0, sl
 8006bf8:	fa03 f000 	lsl.w	r0, r3, r0
 8006bfc:	9b04      	ldr	r3, [sp, #16]
 8006bfe:	4303      	orrs	r3, r0
 8006c00:	3401      	adds	r4, #1
 8006c02:	9304      	str	r3, [sp, #16]
 8006c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c08:	482c      	ldr	r0, [pc, #176]	; (8006cbc <_vfiprintf_r+0x250>)
 8006c0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c0e:	2206      	movs	r2, #6
 8006c10:	f7f9 fae6 	bl	80001e0 <memchr>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d03f      	beq.n	8006c98 <_vfiprintf_r+0x22c>
 8006c18:	4b29      	ldr	r3, [pc, #164]	; (8006cc0 <_vfiprintf_r+0x254>)
 8006c1a:	bb1b      	cbnz	r3, 8006c64 <_vfiprintf_r+0x1f8>
 8006c1c:	9b03      	ldr	r3, [sp, #12]
 8006c1e:	3307      	adds	r3, #7
 8006c20:	f023 0307 	bic.w	r3, r3, #7
 8006c24:	3308      	adds	r3, #8
 8006c26:	9303      	str	r3, [sp, #12]
 8006c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c2a:	443b      	add	r3, r7
 8006c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c2e:	e767      	b.n	8006b00 <_vfiprintf_r+0x94>
 8006c30:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c34:	460c      	mov	r4, r1
 8006c36:	2001      	movs	r0, #1
 8006c38:	e7a5      	b.n	8006b86 <_vfiprintf_r+0x11a>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	3401      	adds	r4, #1
 8006c3e:	9305      	str	r3, [sp, #20]
 8006c40:	4619      	mov	r1, r3
 8006c42:	f04f 0c0a 	mov.w	ip, #10
 8006c46:	4620      	mov	r0, r4
 8006c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c4c:	3a30      	subs	r2, #48	; 0x30
 8006c4e:	2a09      	cmp	r2, #9
 8006c50:	d903      	bls.n	8006c5a <_vfiprintf_r+0x1ee>
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d0c5      	beq.n	8006be2 <_vfiprintf_r+0x176>
 8006c56:	9105      	str	r1, [sp, #20]
 8006c58:	e7c3      	b.n	8006be2 <_vfiprintf_r+0x176>
 8006c5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c5e:	4604      	mov	r4, r0
 8006c60:	2301      	movs	r3, #1
 8006c62:	e7f0      	b.n	8006c46 <_vfiprintf_r+0x1da>
 8006c64:	ab03      	add	r3, sp, #12
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	462a      	mov	r2, r5
 8006c6a:	4b16      	ldr	r3, [pc, #88]	; (8006cc4 <_vfiprintf_r+0x258>)
 8006c6c:	a904      	add	r1, sp, #16
 8006c6e:	4630      	mov	r0, r6
 8006c70:	f7fd fee8 	bl	8004a44 <_printf_float>
 8006c74:	4607      	mov	r7, r0
 8006c76:	1c78      	adds	r0, r7, #1
 8006c78:	d1d6      	bne.n	8006c28 <_vfiprintf_r+0x1bc>
 8006c7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c7c:	07d9      	lsls	r1, r3, #31
 8006c7e:	d405      	bmi.n	8006c8c <_vfiprintf_r+0x220>
 8006c80:	89ab      	ldrh	r3, [r5, #12]
 8006c82:	059a      	lsls	r2, r3, #22
 8006c84:	d402      	bmi.n	8006c8c <_vfiprintf_r+0x220>
 8006c86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c88:	f7ff fa34 	bl	80060f4 <__retarget_lock_release_recursive>
 8006c8c:	89ab      	ldrh	r3, [r5, #12]
 8006c8e:	065b      	lsls	r3, r3, #25
 8006c90:	f53f af12 	bmi.w	8006ab8 <_vfiprintf_r+0x4c>
 8006c94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c96:	e711      	b.n	8006abc <_vfiprintf_r+0x50>
 8006c98:	ab03      	add	r3, sp, #12
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	462a      	mov	r2, r5
 8006c9e:	4b09      	ldr	r3, [pc, #36]	; (8006cc4 <_vfiprintf_r+0x258>)
 8006ca0:	a904      	add	r1, sp, #16
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	f7fe f972 	bl	8004f8c <_printf_i>
 8006ca8:	e7e4      	b.n	8006c74 <_vfiprintf_r+0x208>
 8006caa:	bf00      	nop
 8006cac:	08007bec 	.word	0x08007bec
 8006cb0:	08007c0c 	.word	0x08007c0c
 8006cb4:	08007bcc 	.word	0x08007bcc
 8006cb8:	08007d84 	.word	0x08007d84
 8006cbc:	08007d8e 	.word	0x08007d8e
 8006cc0:	08004a45 	.word	0x08004a45
 8006cc4:	08006a47 	.word	0x08006a47
 8006cc8:	08007d8a 	.word	0x08007d8a

08006ccc <_sbrk_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	4d06      	ldr	r5, [pc, #24]	; (8006ce8 <_sbrk_r+0x1c>)
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	4608      	mov	r0, r1
 8006cd6:	602b      	str	r3, [r5, #0]
 8006cd8:	f7fc f86e 	bl	8002db8 <_sbrk>
 8006cdc:	1c43      	adds	r3, r0, #1
 8006cde:	d102      	bne.n	8006ce6 <_sbrk_r+0x1a>
 8006ce0:	682b      	ldr	r3, [r5, #0]
 8006ce2:	b103      	cbz	r3, 8006ce6 <_sbrk_r+0x1a>
 8006ce4:	6023      	str	r3, [r4, #0]
 8006ce6:	bd38      	pop	{r3, r4, r5, pc}
 8006ce8:	20000298 	.word	0x20000298

08006cec <__sread>:
 8006cec:	b510      	push	{r4, lr}
 8006cee:	460c      	mov	r4, r1
 8006cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf4:	f000 faa8 	bl	8007248 <_read_r>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	bfab      	itete	ge
 8006cfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cfe:	89a3      	ldrhlt	r3, [r4, #12]
 8006d00:	181b      	addge	r3, r3, r0
 8006d02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d06:	bfac      	ite	ge
 8006d08:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d0a:	81a3      	strhlt	r3, [r4, #12]
 8006d0c:	bd10      	pop	{r4, pc}

08006d0e <__swrite>:
 8006d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d12:	461f      	mov	r7, r3
 8006d14:	898b      	ldrh	r3, [r1, #12]
 8006d16:	05db      	lsls	r3, r3, #23
 8006d18:	4605      	mov	r5, r0
 8006d1a:	460c      	mov	r4, r1
 8006d1c:	4616      	mov	r6, r2
 8006d1e:	d505      	bpl.n	8006d2c <__swrite+0x1e>
 8006d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d24:	2302      	movs	r3, #2
 8006d26:	2200      	movs	r2, #0
 8006d28:	f000 f9f8 	bl	800711c <_lseek_r>
 8006d2c:	89a3      	ldrh	r3, [r4, #12]
 8006d2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d36:	81a3      	strh	r3, [r4, #12]
 8006d38:	4632      	mov	r2, r6
 8006d3a:	463b      	mov	r3, r7
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d42:	f000 b869 	b.w	8006e18 <_write_r>

08006d46 <__sseek>:
 8006d46:	b510      	push	{r4, lr}
 8006d48:	460c      	mov	r4, r1
 8006d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d4e:	f000 f9e5 	bl	800711c <_lseek_r>
 8006d52:	1c43      	adds	r3, r0, #1
 8006d54:	89a3      	ldrh	r3, [r4, #12]
 8006d56:	bf15      	itete	ne
 8006d58:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d62:	81a3      	strheq	r3, [r4, #12]
 8006d64:	bf18      	it	ne
 8006d66:	81a3      	strhne	r3, [r4, #12]
 8006d68:	bd10      	pop	{r4, pc}

08006d6a <__sclose>:
 8006d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d6e:	f000 b8f1 	b.w	8006f54 <_close_r>
	...

08006d74 <__swbuf_r>:
 8006d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d76:	460e      	mov	r6, r1
 8006d78:	4614      	mov	r4, r2
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	b118      	cbz	r0, 8006d86 <__swbuf_r+0x12>
 8006d7e:	6983      	ldr	r3, [r0, #24]
 8006d80:	b90b      	cbnz	r3, 8006d86 <__swbuf_r+0x12>
 8006d82:	f7ff f913 	bl	8005fac <__sinit>
 8006d86:	4b21      	ldr	r3, [pc, #132]	; (8006e0c <__swbuf_r+0x98>)
 8006d88:	429c      	cmp	r4, r3
 8006d8a:	d12b      	bne.n	8006de4 <__swbuf_r+0x70>
 8006d8c:	686c      	ldr	r4, [r5, #4]
 8006d8e:	69a3      	ldr	r3, [r4, #24]
 8006d90:	60a3      	str	r3, [r4, #8]
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	071a      	lsls	r2, r3, #28
 8006d96:	d52f      	bpl.n	8006df8 <__swbuf_r+0x84>
 8006d98:	6923      	ldr	r3, [r4, #16]
 8006d9a:	b36b      	cbz	r3, 8006df8 <__swbuf_r+0x84>
 8006d9c:	6923      	ldr	r3, [r4, #16]
 8006d9e:	6820      	ldr	r0, [r4, #0]
 8006da0:	1ac0      	subs	r0, r0, r3
 8006da2:	6963      	ldr	r3, [r4, #20]
 8006da4:	b2f6      	uxtb	r6, r6
 8006da6:	4283      	cmp	r3, r0
 8006da8:	4637      	mov	r7, r6
 8006daa:	dc04      	bgt.n	8006db6 <__swbuf_r+0x42>
 8006dac:	4621      	mov	r1, r4
 8006dae:	4628      	mov	r0, r5
 8006db0:	f000 f966 	bl	8007080 <_fflush_r>
 8006db4:	bb30      	cbnz	r0, 8006e04 <__swbuf_r+0x90>
 8006db6:	68a3      	ldr	r3, [r4, #8]
 8006db8:	3b01      	subs	r3, #1
 8006dba:	60a3      	str	r3, [r4, #8]
 8006dbc:	6823      	ldr	r3, [r4, #0]
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	6022      	str	r2, [r4, #0]
 8006dc2:	701e      	strb	r6, [r3, #0]
 8006dc4:	6963      	ldr	r3, [r4, #20]
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	4283      	cmp	r3, r0
 8006dca:	d004      	beq.n	8006dd6 <__swbuf_r+0x62>
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	07db      	lsls	r3, r3, #31
 8006dd0:	d506      	bpl.n	8006de0 <__swbuf_r+0x6c>
 8006dd2:	2e0a      	cmp	r6, #10
 8006dd4:	d104      	bne.n	8006de0 <__swbuf_r+0x6c>
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	4628      	mov	r0, r5
 8006dda:	f000 f951 	bl	8007080 <_fflush_r>
 8006dde:	b988      	cbnz	r0, 8006e04 <__swbuf_r+0x90>
 8006de0:	4638      	mov	r0, r7
 8006de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006de4:	4b0a      	ldr	r3, [pc, #40]	; (8006e10 <__swbuf_r+0x9c>)
 8006de6:	429c      	cmp	r4, r3
 8006de8:	d101      	bne.n	8006dee <__swbuf_r+0x7a>
 8006dea:	68ac      	ldr	r4, [r5, #8]
 8006dec:	e7cf      	b.n	8006d8e <__swbuf_r+0x1a>
 8006dee:	4b09      	ldr	r3, [pc, #36]	; (8006e14 <__swbuf_r+0xa0>)
 8006df0:	429c      	cmp	r4, r3
 8006df2:	bf08      	it	eq
 8006df4:	68ec      	ldreq	r4, [r5, #12]
 8006df6:	e7ca      	b.n	8006d8e <__swbuf_r+0x1a>
 8006df8:	4621      	mov	r1, r4
 8006dfa:	4628      	mov	r0, r5
 8006dfc:	f000 f81e 	bl	8006e3c <__swsetup_r>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d0cb      	beq.n	8006d9c <__swbuf_r+0x28>
 8006e04:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006e08:	e7ea      	b.n	8006de0 <__swbuf_r+0x6c>
 8006e0a:	bf00      	nop
 8006e0c:	08007bec 	.word	0x08007bec
 8006e10:	08007c0c 	.word	0x08007c0c
 8006e14:	08007bcc 	.word	0x08007bcc

08006e18 <_write_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	4d07      	ldr	r5, [pc, #28]	; (8006e38 <_write_r+0x20>)
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	4608      	mov	r0, r1
 8006e20:	4611      	mov	r1, r2
 8006e22:	2200      	movs	r2, #0
 8006e24:	602a      	str	r2, [r5, #0]
 8006e26:	461a      	mov	r2, r3
 8006e28:	f7fb fb04 	bl	8002434 <_write>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d102      	bne.n	8006e36 <_write_r+0x1e>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	b103      	cbz	r3, 8006e36 <_write_r+0x1e>
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	20000298 	.word	0x20000298

08006e3c <__swsetup_r>:
 8006e3c:	4b32      	ldr	r3, [pc, #200]	; (8006f08 <__swsetup_r+0xcc>)
 8006e3e:	b570      	push	{r4, r5, r6, lr}
 8006e40:	681d      	ldr	r5, [r3, #0]
 8006e42:	4606      	mov	r6, r0
 8006e44:	460c      	mov	r4, r1
 8006e46:	b125      	cbz	r5, 8006e52 <__swsetup_r+0x16>
 8006e48:	69ab      	ldr	r3, [r5, #24]
 8006e4a:	b913      	cbnz	r3, 8006e52 <__swsetup_r+0x16>
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	f7ff f8ad 	bl	8005fac <__sinit>
 8006e52:	4b2e      	ldr	r3, [pc, #184]	; (8006f0c <__swsetup_r+0xd0>)
 8006e54:	429c      	cmp	r4, r3
 8006e56:	d10f      	bne.n	8006e78 <__swsetup_r+0x3c>
 8006e58:	686c      	ldr	r4, [r5, #4]
 8006e5a:	89a3      	ldrh	r3, [r4, #12]
 8006e5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e60:	0719      	lsls	r1, r3, #28
 8006e62:	d42c      	bmi.n	8006ebe <__swsetup_r+0x82>
 8006e64:	06dd      	lsls	r5, r3, #27
 8006e66:	d411      	bmi.n	8006e8c <__swsetup_r+0x50>
 8006e68:	2309      	movs	r3, #9
 8006e6a:	6033      	str	r3, [r6, #0]
 8006e6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e70:	81a3      	strh	r3, [r4, #12]
 8006e72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e76:	e03e      	b.n	8006ef6 <__swsetup_r+0xba>
 8006e78:	4b25      	ldr	r3, [pc, #148]	; (8006f10 <__swsetup_r+0xd4>)
 8006e7a:	429c      	cmp	r4, r3
 8006e7c:	d101      	bne.n	8006e82 <__swsetup_r+0x46>
 8006e7e:	68ac      	ldr	r4, [r5, #8]
 8006e80:	e7eb      	b.n	8006e5a <__swsetup_r+0x1e>
 8006e82:	4b24      	ldr	r3, [pc, #144]	; (8006f14 <__swsetup_r+0xd8>)
 8006e84:	429c      	cmp	r4, r3
 8006e86:	bf08      	it	eq
 8006e88:	68ec      	ldreq	r4, [r5, #12]
 8006e8a:	e7e6      	b.n	8006e5a <__swsetup_r+0x1e>
 8006e8c:	0758      	lsls	r0, r3, #29
 8006e8e:	d512      	bpl.n	8006eb6 <__swsetup_r+0x7a>
 8006e90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e92:	b141      	cbz	r1, 8006ea6 <__swsetup_r+0x6a>
 8006e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e98:	4299      	cmp	r1, r3
 8006e9a:	d002      	beq.n	8006ea2 <__swsetup_r+0x66>
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	f7ff fcdb 	bl	8006858 <_free_r>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	6363      	str	r3, [r4, #52]	; 0x34
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006eac:	81a3      	strh	r3, [r4, #12]
 8006eae:	2300      	movs	r3, #0
 8006eb0:	6063      	str	r3, [r4, #4]
 8006eb2:	6923      	ldr	r3, [r4, #16]
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	f043 0308 	orr.w	r3, r3, #8
 8006ebc:	81a3      	strh	r3, [r4, #12]
 8006ebe:	6923      	ldr	r3, [r4, #16]
 8006ec0:	b94b      	cbnz	r3, 8006ed6 <__swsetup_r+0x9a>
 8006ec2:	89a3      	ldrh	r3, [r4, #12]
 8006ec4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ecc:	d003      	beq.n	8006ed6 <__swsetup_r+0x9a>
 8006ece:	4621      	mov	r1, r4
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	f000 f95b 	bl	800718c <__smakebuf_r>
 8006ed6:	89a0      	ldrh	r0, [r4, #12]
 8006ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006edc:	f010 0301 	ands.w	r3, r0, #1
 8006ee0:	d00a      	beq.n	8006ef8 <__swsetup_r+0xbc>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	60a3      	str	r3, [r4, #8]
 8006ee6:	6963      	ldr	r3, [r4, #20]
 8006ee8:	425b      	negs	r3, r3
 8006eea:	61a3      	str	r3, [r4, #24]
 8006eec:	6923      	ldr	r3, [r4, #16]
 8006eee:	b943      	cbnz	r3, 8006f02 <__swsetup_r+0xc6>
 8006ef0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ef4:	d1ba      	bne.n	8006e6c <__swsetup_r+0x30>
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}
 8006ef8:	0781      	lsls	r1, r0, #30
 8006efa:	bf58      	it	pl
 8006efc:	6963      	ldrpl	r3, [r4, #20]
 8006efe:	60a3      	str	r3, [r4, #8]
 8006f00:	e7f4      	b.n	8006eec <__swsetup_r+0xb0>
 8006f02:	2000      	movs	r0, #0
 8006f04:	e7f7      	b.n	8006ef6 <__swsetup_r+0xba>
 8006f06:	bf00      	nop
 8006f08:	20000008 	.word	0x20000008
 8006f0c:	08007bec 	.word	0x08007bec
 8006f10:	08007c0c 	.word	0x08007c0c
 8006f14:	08007bcc 	.word	0x08007bcc

08006f18 <__assert_func>:
 8006f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f1a:	4614      	mov	r4, r2
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	4b09      	ldr	r3, [pc, #36]	; (8006f44 <__assert_func+0x2c>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4605      	mov	r5, r0
 8006f24:	68d8      	ldr	r0, [r3, #12]
 8006f26:	b14c      	cbz	r4, 8006f3c <__assert_func+0x24>
 8006f28:	4b07      	ldr	r3, [pc, #28]	; (8006f48 <__assert_func+0x30>)
 8006f2a:	9100      	str	r1, [sp, #0]
 8006f2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f30:	4906      	ldr	r1, [pc, #24]	; (8006f4c <__assert_func+0x34>)
 8006f32:	462b      	mov	r3, r5
 8006f34:	f000 f8e0 	bl	80070f8 <fiprintf>
 8006f38:	f000 f9a5 	bl	8007286 <abort>
 8006f3c:	4b04      	ldr	r3, [pc, #16]	; (8006f50 <__assert_func+0x38>)
 8006f3e:	461c      	mov	r4, r3
 8006f40:	e7f3      	b.n	8006f2a <__assert_func+0x12>
 8006f42:	bf00      	nop
 8006f44:	20000008 	.word	0x20000008
 8006f48:	08007d95 	.word	0x08007d95
 8006f4c:	08007da2 	.word	0x08007da2
 8006f50:	08007dd0 	.word	0x08007dd0

08006f54 <_close_r>:
 8006f54:	b538      	push	{r3, r4, r5, lr}
 8006f56:	4d06      	ldr	r5, [pc, #24]	; (8006f70 <_close_r+0x1c>)
 8006f58:	2300      	movs	r3, #0
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	4608      	mov	r0, r1
 8006f5e:	602b      	str	r3, [r5, #0]
 8006f60:	f7fb fef5 	bl	8002d4e <_close>
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	d102      	bne.n	8006f6e <_close_r+0x1a>
 8006f68:	682b      	ldr	r3, [r5, #0]
 8006f6a:	b103      	cbz	r3, 8006f6e <_close_r+0x1a>
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	bd38      	pop	{r3, r4, r5, pc}
 8006f70:	20000298 	.word	0x20000298

08006f74 <__sflush_r>:
 8006f74:	898a      	ldrh	r2, [r1, #12]
 8006f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7a:	4605      	mov	r5, r0
 8006f7c:	0710      	lsls	r0, r2, #28
 8006f7e:	460c      	mov	r4, r1
 8006f80:	d458      	bmi.n	8007034 <__sflush_r+0xc0>
 8006f82:	684b      	ldr	r3, [r1, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	dc05      	bgt.n	8006f94 <__sflush_r+0x20>
 8006f88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	dc02      	bgt.n	8006f94 <__sflush_r+0x20>
 8006f8e:	2000      	movs	r0, #0
 8006f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f96:	2e00      	cmp	r6, #0
 8006f98:	d0f9      	beq.n	8006f8e <__sflush_r+0x1a>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006fa0:	682f      	ldr	r7, [r5, #0]
 8006fa2:	602b      	str	r3, [r5, #0]
 8006fa4:	d032      	beq.n	800700c <__sflush_r+0x98>
 8006fa6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006fa8:	89a3      	ldrh	r3, [r4, #12]
 8006faa:	075a      	lsls	r2, r3, #29
 8006fac:	d505      	bpl.n	8006fba <__sflush_r+0x46>
 8006fae:	6863      	ldr	r3, [r4, #4]
 8006fb0:	1ac0      	subs	r0, r0, r3
 8006fb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006fb4:	b10b      	cbz	r3, 8006fba <__sflush_r+0x46>
 8006fb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fb8:	1ac0      	subs	r0, r0, r3
 8006fba:	2300      	movs	r3, #0
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fc0:	6a21      	ldr	r1, [r4, #32]
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	47b0      	blx	r6
 8006fc6:	1c43      	adds	r3, r0, #1
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	d106      	bne.n	8006fda <__sflush_r+0x66>
 8006fcc:	6829      	ldr	r1, [r5, #0]
 8006fce:	291d      	cmp	r1, #29
 8006fd0:	d82c      	bhi.n	800702c <__sflush_r+0xb8>
 8006fd2:	4a2a      	ldr	r2, [pc, #168]	; (800707c <__sflush_r+0x108>)
 8006fd4:	40ca      	lsrs	r2, r1
 8006fd6:	07d6      	lsls	r6, r2, #31
 8006fd8:	d528      	bpl.n	800702c <__sflush_r+0xb8>
 8006fda:	2200      	movs	r2, #0
 8006fdc:	6062      	str	r2, [r4, #4]
 8006fde:	04d9      	lsls	r1, r3, #19
 8006fe0:	6922      	ldr	r2, [r4, #16]
 8006fe2:	6022      	str	r2, [r4, #0]
 8006fe4:	d504      	bpl.n	8006ff0 <__sflush_r+0x7c>
 8006fe6:	1c42      	adds	r2, r0, #1
 8006fe8:	d101      	bne.n	8006fee <__sflush_r+0x7a>
 8006fea:	682b      	ldr	r3, [r5, #0]
 8006fec:	b903      	cbnz	r3, 8006ff0 <__sflush_r+0x7c>
 8006fee:	6560      	str	r0, [r4, #84]	; 0x54
 8006ff0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ff2:	602f      	str	r7, [r5, #0]
 8006ff4:	2900      	cmp	r1, #0
 8006ff6:	d0ca      	beq.n	8006f8e <__sflush_r+0x1a>
 8006ff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ffc:	4299      	cmp	r1, r3
 8006ffe:	d002      	beq.n	8007006 <__sflush_r+0x92>
 8007000:	4628      	mov	r0, r5
 8007002:	f7ff fc29 	bl	8006858 <_free_r>
 8007006:	2000      	movs	r0, #0
 8007008:	6360      	str	r0, [r4, #52]	; 0x34
 800700a:	e7c1      	b.n	8006f90 <__sflush_r+0x1c>
 800700c:	6a21      	ldr	r1, [r4, #32]
 800700e:	2301      	movs	r3, #1
 8007010:	4628      	mov	r0, r5
 8007012:	47b0      	blx	r6
 8007014:	1c41      	adds	r1, r0, #1
 8007016:	d1c7      	bne.n	8006fa8 <__sflush_r+0x34>
 8007018:	682b      	ldr	r3, [r5, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0c4      	beq.n	8006fa8 <__sflush_r+0x34>
 800701e:	2b1d      	cmp	r3, #29
 8007020:	d001      	beq.n	8007026 <__sflush_r+0xb2>
 8007022:	2b16      	cmp	r3, #22
 8007024:	d101      	bne.n	800702a <__sflush_r+0xb6>
 8007026:	602f      	str	r7, [r5, #0]
 8007028:	e7b1      	b.n	8006f8e <__sflush_r+0x1a>
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007030:	81a3      	strh	r3, [r4, #12]
 8007032:	e7ad      	b.n	8006f90 <__sflush_r+0x1c>
 8007034:	690f      	ldr	r7, [r1, #16]
 8007036:	2f00      	cmp	r7, #0
 8007038:	d0a9      	beq.n	8006f8e <__sflush_r+0x1a>
 800703a:	0793      	lsls	r3, r2, #30
 800703c:	680e      	ldr	r6, [r1, #0]
 800703e:	bf08      	it	eq
 8007040:	694b      	ldreq	r3, [r1, #20]
 8007042:	600f      	str	r7, [r1, #0]
 8007044:	bf18      	it	ne
 8007046:	2300      	movne	r3, #0
 8007048:	eba6 0807 	sub.w	r8, r6, r7
 800704c:	608b      	str	r3, [r1, #8]
 800704e:	f1b8 0f00 	cmp.w	r8, #0
 8007052:	dd9c      	ble.n	8006f8e <__sflush_r+0x1a>
 8007054:	6a21      	ldr	r1, [r4, #32]
 8007056:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007058:	4643      	mov	r3, r8
 800705a:	463a      	mov	r2, r7
 800705c:	4628      	mov	r0, r5
 800705e:	47b0      	blx	r6
 8007060:	2800      	cmp	r0, #0
 8007062:	dc06      	bgt.n	8007072 <__sflush_r+0xfe>
 8007064:	89a3      	ldrh	r3, [r4, #12]
 8007066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800706a:	81a3      	strh	r3, [r4, #12]
 800706c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007070:	e78e      	b.n	8006f90 <__sflush_r+0x1c>
 8007072:	4407      	add	r7, r0
 8007074:	eba8 0800 	sub.w	r8, r8, r0
 8007078:	e7e9      	b.n	800704e <__sflush_r+0xda>
 800707a:	bf00      	nop
 800707c:	20400001 	.word	0x20400001

08007080 <_fflush_r>:
 8007080:	b538      	push	{r3, r4, r5, lr}
 8007082:	690b      	ldr	r3, [r1, #16]
 8007084:	4605      	mov	r5, r0
 8007086:	460c      	mov	r4, r1
 8007088:	b913      	cbnz	r3, 8007090 <_fflush_r+0x10>
 800708a:	2500      	movs	r5, #0
 800708c:	4628      	mov	r0, r5
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	b118      	cbz	r0, 800709a <_fflush_r+0x1a>
 8007092:	6983      	ldr	r3, [r0, #24]
 8007094:	b90b      	cbnz	r3, 800709a <_fflush_r+0x1a>
 8007096:	f7fe ff89 	bl	8005fac <__sinit>
 800709a:	4b14      	ldr	r3, [pc, #80]	; (80070ec <_fflush_r+0x6c>)
 800709c:	429c      	cmp	r4, r3
 800709e:	d11b      	bne.n	80070d8 <_fflush_r+0x58>
 80070a0:	686c      	ldr	r4, [r5, #4]
 80070a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0ef      	beq.n	800708a <_fflush_r+0xa>
 80070aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070ac:	07d0      	lsls	r0, r2, #31
 80070ae:	d404      	bmi.n	80070ba <_fflush_r+0x3a>
 80070b0:	0599      	lsls	r1, r3, #22
 80070b2:	d402      	bmi.n	80070ba <_fflush_r+0x3a>
 80070b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070b6:	f7ff f81c 	bl	80060f2 <__retarget_lock_acquire_recursive>
 80070ba:	4628      	mov	r0, r5
 80070bc:	4621      	mov	r1, r4
 80070be:	f7ff ff59 	bl	8006f74 <__sflush_r>
 80070c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070c4:	07da      	lsls	r2, r3, #31
 80070c6:	4605      	mov	r5, r0
 80070c8:	d4e0      	bmi.n	800708c <_fflush_r+0xc>
 80070ca:	89a3      	ldrh	r3, [r4, #12]
 80070cc:	059b      	lsls	r3, r3, #22
 80070ce:	d4dd      	bmi.n	800708c <_fflush_r+0xc>
 80070d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070d2:	f7ff f80f 	bl	80060f4 <__retarget_lock_release_recursive>
 80070d6:	e7d9      	b.n	800708c <_fflush_r+0xc>
 80070d8:	4b05      	ldr	r3, [pc, #20]	; (80070f0 <_fflush_r+0x70>)
 80070da:	429c      	cmp	r4, r3
 80070dc:	d101      	bne.n	80070e2 <_fflush_r+0x62>
 80070de:	68ac      	ldr	r4, [r5, #8]
 80070e0:	e7df      	b.n	80070a2 <_fflush_r+0x22>
 80070e2:	4b04      	ldr	r3, [pc, #16]	; (80070f4 <_fflush_r+0x74>)
 80070e4:	429c      	cmp	r4, r3
 80070e6:	bf08      	it	eq
 80070e8:	68ec      	ldreq	r4, [r5, #12]
 80070ea:	e7da      	b.n	80070a2 <_fflush_r+0x22>
 80070ec:	08007bec 	.word	0x08007bec
 80070f0:	08007c0c 	.word	0x08007c0c
 80070f4:	08007bcc 	.word	0x08007bcc

080070f8 <fiprintf>:
 80070f8:	b40e      	push	{r1, r2, r3}
 80070fa:	b503      	push	{r0, r1, lr}
 80070fc:	4601      	mov	r1, r0
 80070fe:	ab03      	add	r3, sp, #12
 8007100:	4805      	ldr	r0, [pc, #20]	; (8007118 <fiprintf+0x20>)
 8007102:	f853 2b04 	ldr.w	r2, [r3], #4
 8007106:	6800      	ldr	r0, [r0, #0]
 8007108:	9301      	str	r3, [sp, #4]
 800710a:	f7ff fcaf 	bl	8006a6c <_vfiprintf_r>
 800710e:	b002      	add	sp, #8
 8007110:	f85d eb04 	ldr.w	lr, [sp], #4
 8007114:	b003      	add	sp, #12
 8007116:	4770      	bx	lr
 8007118:	20000008 	.word	0x20000008

0800711c <_lseek_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	4d07      	ldr	r5, [pc, #28]	; (800713c <_lseek_r+0x20>)
 8007120:	4604      	mov	r4, r0
 8007122:	4608      	mov	r0, r1
 8007124:	4611      	mov	r1, r2
 8007126:	2200      	movs	r2, #0
 8007128:	602a      	str	r2, [r5, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	f7fb fe36 	bl	8002d9c <_lseek>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d102      	bne.n	800713a <_lseek_r+0x1e>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	b103      	cbz	r3, 800713a <_lseek_r+0x1e>
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	20000298 	.word	0x20000298

08007140 <__swhatbuf_r>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	460e      	mov	r6, r1
 8007144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007148:	2900      	cmp	r1, #0
 800714a:	b096      	sub	sp, #88	; 0x58
 800714c:	4614      	mov	r4, r2
 800714e:	461d      	mov	r5, r3
 8007150:	da08      	bge.n	8007164 <__swhatbuf_r+0x24>
 8007152:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	602a      	str	r2, [r5, #0]
 800715a:	061a      	lsls	r2, r3, #24
 800715c:	d410      	bmi.n	8007180 <__swhatbuf_r+0x40>
 800715e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007162:	e00e      	b.n	8007182 <__swhatbuf_r+0x42>
 8007164:	466a      	mov	r2, sp
 8007166:	f000 f895 	bl	8007294 <_fstat_r>
 800716a:	2800      	cmp	r0, #0
 800716c:	dbf1      	blt.n	8007152 <__swhatbuf_r+0x12>
 800716e:	9a01      	ldr	r2, [sp, #4]
 8007170:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007174:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007178:	425a      	negs	r2, r3
 800717a:	415a      	adcs	r2, r3
 800717c:	602a      	str	r2, [r5, #0]
 800717e:	e7ee      	b.n	800715e <__swhatbuf_r+0x1e>
 8007180:	2340      	movs	r3, #64	; 0x40
 8007182:	2000      	movs	r0, #0
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	b016      	add	sp, #88	; 0x58
 8007188:	bd70      	pop	{r4, r5, r6, pc}
	...

0800718c <__smakebuf_r>:
 800718c:	898b      	ldrh	r3, [r1, #12]
 800718e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007190:	079d      	lsls	r5, r3, #30
 8007192:	4606      	mov	r6, r0
 8007194:	460c      	mov	r4, r1
 8007196:	d507      	bpl.n	80071a8 <__smakebuf_r+0x1c>
 8007198:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800719c:	6023      	str	r3, [r4, #0]
 800719e:	6123      	str	r3, [r4, #16]
 80071a0:	2301      	movs	r3, #1
 80071a2:	6163      	str	r3, [r4, #20]
 80071a4:	b002      	add	sp, #8
 80071a6:	bd70      	pop	{r4, r5, r6, pc}
 80071a8:	ab01      	add	r3, sp, #4
 80071aa:	466a      	mov	r2, sp
 80071ac:	f7ff ffc8 	bl	8007140 <__swhatbuf_r>
 80071b0:	9900      	ldr	r1, [sp, #0]
 80071b2:	4605      	mov	r5, r0
 80071b4:	4630      	mov	r0, r6
 80071b6:	f7ff fbbb 	bl	8006930 <_malloc_r>
 80071ba:	b948      	cbnz	r0, 80071d0 <__smakebuf_r+0x44>
 80071bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071c0:	059a      	lsls	r2, r3, #22
 80071c2:	d4ef      	bmi.n	80071a4 <__smakebuf_r+0x18>
 80071c4:	f023 0303 	bic.w	r3, r3, #3
 80071c8:	f043 0302 	orr.w	r3, r3, #2
 80071cc:	81a3      	strh	r3, [r4, #12]
 80071ce:	e7e3      	b.n	8007198 <__smakebuf_r+0xc>
 80071d0:	4b0d      	ldr	r3, [pc, #52]	; (8007208 <__smakebuf_r+0x7c>)
 80071d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80071d4:	89a3      	ldrh	r3, [r4, #12]
 80071d6:	6020      	str	r0, [r4, #0]
 80071d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071dc:	81a3      	strh	r3, [r4, #12]
 80071de:	9b00      	ldr	r3, [sp, #0]
 80071e0:	6163      	str	r3, [r4, #20]
 80071e2:	9b01      	ldr	r3, [sp, #4]
 80071e4:	6120      	str	r0, [r4, #16]
 80071e6:	b15b      	cbz	r3, 8007200 <__smakebuf_r+0x74>
 80071e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071ec:	4630      	mov	r0, r6
 80071ee:	f000 f863 	bl	80072b8 <_isatty_r>
 80071f2:	b128      	cbz	r0, 8007200 <__smakebuf_r+0x74>
 80071f4:	89a3      	ldrh	r3, [r4, #12]
 80071f6:	f023 0303 	bic.w	r3, r3, #3
 80071fa:	f043 0301 	orr.w	r3, r3, #1
 80071fe:	81a3      	strh	r3, [r4, #12]
 8007200:	89a0      	ldrh	r0, [r4, #12]
 8007202:	4305      	orrs	r5, r0
 8007204:	81a5      	strh	r5, [r4, #12]
 8007206:	e7cd      	b.n	80071a4 <__smakebuf_r+0x18>
 8007208:	08005f45 	.word	0x08005f45

0800720c <__ascii_mbtowc>:
 800720c:	b082      	sub	sp, #8
 800720e:	b901      	cbnz	r1, 8007212 <__ascii_mbtowc+0x6>
 8007210:	a901      	add	r1, sp, #4
 8007212:	b142      	cbz	r2, 8007226 <__ascii_mbtowc+0x1a>
 8007214:	b14b      	cbz	r3, 800722a <__ascii_mbtowc+0x1e>
 8007216:	7813      	ldrb	r3, [r2, #0]
 8007218:	600b      	str	r3, [r1, #0]
 800721a:	7812      	ldrb	r2, [r2, #0]
 800721c:	1e10      	subs	r0, r2, #0
 800721e:	bf18      	it	ne
 8007220:	2001      	movne	r0, #1
 8007222:	b002      	add	sp, #8
 8007224:	4770      	bx	lr
 8007226:	4610      	mov	r0, r2
 8007228:	e7fb      	b.n	8007222 <__ascii_mbtowc+0x16>
 800722a:	f06f 0001 	mvn.w	r0, #1
 800722e:	e7f8      	b.n	8007222 <__ascii_mbtowc+0x16>

08007230 <__malloc_lock>:
 8007230:	4801      	ldr	r0, [pc, #4]	; (8007238 <__malloc_lock+0x8>)
 8007232:	f7fe bf5e 	b.w	80060f2 <__retarget_lock_acquire_recursive>
 8007236:	bf00      	nop
 8007238:	2000028c 	.word	0x2000028c

0800723c <__malloc_unlock>:
 800723c:	4801      	ldr	r0, [pc, #4]	; (8007244 <__malloc_unlock+0x8>)
 800723e:	f7fe bf59 	b.w	80060f4 <__retarget_lock_release_recursive>
 8007242:	bf00      	nop
 8007244:	2000028c 	.word	0x2000028c

08007248 <_read_r>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	4d07      	ldr	r5, [pc, #28]	; (8007268 <_read_r+0x20>)
 800724c:	4604      	mov	r4, r0
 800724e:	4608      	mov	r0, r1
 8007250:	4611      	mov	r1, r2
 8007252:	2200      	movs	r2, #0
 8007254:	602a      	str	r2, [r5, #0]
 8007256:	461a      	mov	r2, r3
 8007258:	f7fb fd5c 	bl	8002d14 <_read>
 800725c:	1c43      	adds	r3, r0, #1
 800725e:	d102      	bne.n	8007266 <_read_r+0x1e>
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	b103      	cbz	r3, 8007266 <_read_r+0x1e>
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	bd38      	pop	{r3, r4, r5, pc}
 8007268:	20000298 	.word	0x20000298

0800726c <__ascii_wctomb>:
 800726c:	b149      	cbz	r1, 8007282 <__ascii_wctomb+0x16>
 800726e:	2aff      	cmp	r2, #255	; 0xff
 8007270:	bf85      	ittet	hi
 8007272:	238a      	movhi	r3, #138	; 0x8a
 8007274:	6003      	strhi	r3, [r0, #0]
 8007276:	700a      	strbls	r2, [r1, #0]
 8007278:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800727c:	bf98      	it	ls
 800727e:	2001      	movls	r0, #1
 8007280:	4770      	bx	lr
 8007282:	4608      	mov	r0, r1
 8007284:	4770      	bx	lr

08007286 <abort>:
 8007286:	b508      	push	{r3, lr}
 8007288:	2006      	movs	r0, #6
 800728a:	f000 f84d 	bl	8007328 <raise>
 800728e:	2001      	movs	r0, #1
 8007290:	f7fb fd36 	bl	8002d00 <_exit>

08007294 <_fstat_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4d07      	ldr	r5, [pc, #28]	; (80072b4 <_fstat_r+0x20>)
 8007298:	2300      	movs	r3, #0
 800729a:	4604      	mov	r4, r0
 800729c:	4608      	mov	r0, r1
 800729e:	4611      	mov	r1, r2
 80072a0:	602b      	str	r3, [r5, #0]
 80072a2:	f7fb fd60 	bl	8002d66 <_fstat>
 80072a6:	1c43      	adds	r3, r0, #1
 80072a8:	d102      	bne.n	80072b0 <_fstat_r+0x1c>
 80072aa:	682b      	ldr	r3, [r5, #0]
 80072ac:	b103      	cbz	r3, 80072b0 <_fstat_r+0x1c>
 80072ae:	6023      	str	r3, [r4, #0]
 80072b0:	bd38      	pop	{r3, r4, r5, pc}
 80072b2:	bf00      	nop
 80072b4:	20000298 	.word	0x20000298

080072b8 <_isatty_r>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	4d06      	ldr	r5, [pc, #24]	; (80072d4 <_isatty_r+0x1c>)
 80072bc:	2300      	movs	r3, #0
 80072be:	4604      	mov	r4, r0
 80072c0:	4608      	mov	r0, r1
 80072c2:	602b      	str	r3, [r5, #0]
 80072c4:	f7fb fd5f 	bl	8002d86 <_isatty>
 80072c8:	1c43      	adds	r3, r0, #1
 80072ca:	d102      	bne.n	80072d2 <_isatty_r+0x1a>
 80072cc:	682b      	ldr	r3, [r5, #0]
 80072ce:	b103      	cbz	r3, 80072d2 <_isatty_r+0x1a>
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	20000298 	.word	0x20000298

080072d8 <_raise_r>:
 80072d8:	291f      	cmp	r1, #31
 80072da:	b538      	push	{r3, r4, r5, lr}
 80072dc:	4604      	mov	r4, r0
 80072de:	460d      	mov	r5, r1
 80072e0:	d904      	bls.n	80072ec <_raise_r+0x14>
 80072e2:	2316      	movs	r3, #22
 80072e4:	6003      	str	r3, [r0, #0]
 80072e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072ea:	bd38      	pop	{r3, r4, r5, pc}
 80072ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80072ee:	b112      	cbz	r2, 80072f6 <_raise_r+0x1e>
 80072f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072f4:	b94b      	cbnz	r3, 800730a <_raise_r+0x32>
 80072f6:	4620      	mov	r0, r4
 80072f8:	f000 f830 	bl	800735c <_getpid_r>
 80072fc:	462a      	mov	r2, r5
 80072fe:	4601      	mov	r1, r0
 8007300:	4620      	mov	r0, r4
 8007302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007306:	f000 b817 	b.w	8007338 <_kill_r>
 800730a:	2b01      	cmp	r3, #1
 800730c:	d00a      	beq.n	8007324 <_raise_r+0x4c>
 800730e:	1c59      	adds	r1, r3, #1
 8007310:	d103      	bne.n	800731a <_raise_r+0x42>
 8007312:	2316      	movs	r3, #22
 8007314:	6003      	str	r3, [r0, #0]
 8007316:	2001      	movs	r0, #1
 8007318:	e7e7      	b.n	80072ea <_raise_r+0x12>
 800731a:	2400      	movs	r4, #0
 800731c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007320:	4628      	mov	r0, r5
 8007322:	4798      	blx	r3
 8007324:	2000      	movs	r0, #0
 8007326:	e7e0      	b.n	80072ea <_raise_r+0x12>

08007328 <raise>:
 8007328:	4b02      	ldr	r3, [pc, #8]	; (8007334 <raise+0xc>)
 800732a:	4601      	mov	r1, r0
 800732c:	6818      	ldr	r0, [r3, #0]
 800732e:	f7ff bfd3 	b.w	80072d8 <_raise_r>
 8007332:	bf00      	nop
 8007334:	20000008 	.word	0x20000008

08007338 <_kill_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	4d07      	ldr	r5, [pc, #28]	; (8007358 <_kill_r+0x20>)
 800733c:	2300      	movs	r3, #0
 800733e:	4604      	mov	r4, r0
 8007340:	4608      	mov	r0, r1
 8007342:	4611      	mov	r1, r2
 8007344:	602b      	str	r3, [r5, #0]
 8007346:	f7fb fccb 	bl	8002ce0 <_kill>
 800734a:	1c43      	adds	r3, r0, #1
 800734c:	d102      	bne.n	8007354 <_kill_r+0x1c>
 800734e:	682b      	ldr	r3, [r5, #0]
 8007350:	b103      	cbz	r3, 8007354 <_kill_r+0x1c>
 8007352:	6023      	str	r3, [r4, #0]
 8007354:	bd38      	pop	{r3, r4, r5, pc}
 8007356:	bf00      	nop
 8007358:	20000298 	.word	0x20000298

0800735c <_getpid_r>:
 800735c:	f7fb bcb8 	b.w	8002cd0 <_getpid>

08007360 <sqrt>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	ed2d 8b02 	vpush	{d8}
 8007366:	ec55 4b10 	vmov	r4, r5, d0
 800736a:	f000 f853 	bl	8007414 <__ieee754_sqrt>
 800736e:	4622      	mov	r2, r4
 8007370:	462b      	mov	r3, r5
 8007372:	4620      	mov	r0, r4
 8007374:	4629      	mov	r1, r5
 8007376:	eeb0 8a40 	vmov.f32	s16, s0
 800737a:	eef0 8a60 	vmov.f32	s17, s1
 800737e:	f7f9 fbd5 	bl	8000b2c <__aeabi_dcmpun>
 8007382:	b990      	cbnz	r0, 80073aa <sqrt+0x4a>
 8007384:	2200      	movs	r2, #0
 8007386:	2300      	movs	r3, #0
 8007388:	4620      	mov	r0, r4
 800738a:	4629      	mov	r1, r5
 800738c:	f7f9 fba6 	bl	8000adc <__aeabi_dcmplt>
 8007390:	b158      	cbz	r0, 80073aa <sqrt+0x4a>
 8007392:	f7fd fa85 	bl	80048a0 <__errno>
 8007396:	2321      	movs	r3, #33	; 0x21
 8007398:	6003      	str	r3, [r0, #0]
 800739a:	2200      	movs	r2, #0
 800739c:	2300      	movs	r3, #0
 800739e:	4610      	mov	r0, r2
 80073a0:	4619      	mov	r1, r3
 80073a2:	f7f9 fa53 	bl	800084c <__aeabi_ddiv>
 80073a6:	ec41 0b18 	vmov	d8, r0, r1
 80073aa:	eeb0 0a48 	vmov.f32	s0, s16
 80073ae:	eef0 0a68 	vmov.f32	s1, s17
 80073b2:	ecbd 8b02 	vpop	{d8}
 80073b6:	bd38      	pop	{r3, r4, r5, pc}

080073b8 <asinf>:
 80073b8:	b508      	push	{r3, lr}
 80073ba:	ed2d 8b02 	vpush	{d8}
 80073be:	eeb0 8a40 	vmov.f32	s16, s0
 80073c2:	f000 f8d9 	bl	8007578 <__ieee754_asinf>
 80073c6:	eeb4 8a48 	vcmp.f32	s16, s16
 80073ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ce:	eef0 8a40 	vmov.f32	s17, s0
 80073d2:	d615      	bvs.n	8007400 <asinf+0x48>
 80073d4:	eeb0 0a48 	vmov.f32	s0, s16
 80073d8:	f000 fb2c 	bl	8007a34 <fabsf>
 80073dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80073e0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80073e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073e8:	dd0a      	ble.n	8007400 <asinf+0x48>
 80073ea:	f7fd fa59 	bl	80048a0 <__errno>
 80073ee:	ecbd 8b02 	vpop	{d8}
 80073f2:	2321      	movs	r3, #33	; 0x21
 80073f4:	6003      	str	r3, [r0, #0]
 80073f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80073fa:	4804      	ldr	r0, [pc, #16]	; (800740c <asinf+0x54>)
 80073fc:	f000 bb22 	b.w	8007a44 <nanf>
 8007400:	eeb0 0a68 	vmov.f32	s0, s17
 8007404:	ecbd 8b02 	vpop	{d8}
 8007408:	bd08      	pop	{r3, pc}
 800740a:	bf00      	nop
 800740c:	08007dd0 	.word	0x08007dd0

08007410 <atan2f>:
 8007410:	f000 b998 	b.w	8007744 <__ieee754_atan2f>

08007414 <__ieee754_sqrt>:
 8007414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007418:	ec55 4b10 	vmov	r4, r5, d0
 800741c:	4e55      	ldr	r6, [pc, #340]	; (8007574 <__ieee754_sqrt+0x160>)
 800741e:	43ae      	bics	r6, r5
 8007420:	ee10 0a10 	vmov	r0, s0
 8007424:	ee10 3a10 	vmov	r3, s0
 8007428:	462a      	mov	r2, r5
 800742a:	4629      	mov	r1, r5
 800742c:	d110      	bne.n	8007450 <__ieee754_sqrt+0x3c>
 800742e:	ee10 2a10 	vmov	r2, s0
 8007432:	462b      	mov	r3, r5
 8007434:	f7f9 f8e0 	bl	80005f8 <__aeabi_dmul>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	4620      	mov	r0, r4
 800743e:	4629      	mov	r1, r5
 8007440:	f7f8 ff24 	bl	800028c <__adddf3>
 8007444:	4604      	mov	r4, r0
 8007446:	460d      	mov	r5, r1
 8007448:	ec45 4b10 	vmov	d0, r4, r5
 800744c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007450:	2d00      	cmp	r5, #0
 8007452:	dc10      	bgt.n	8007476 <__ieee754_sqrt+0x62>
 8007454:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007458:	4330      	orrs	r0, r6
 800745a:	d0f5      	beq.n	8007448 <__ieee754_sqrt+0x34>
 800745c:	b15d      	cbz	r5, 8007476 <__ieee754_sqrt+0x62>
 800745e:	ee10 2a10 	vmov	r2, s0
 8007462:	462b      	mov	r3, r5
 8007464:	ee10 0a10 	vmov	r0, s0
 8007468:	f7f8 ff0e 	bl	8000288 <__aeabi_dsub>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	f7f9 f9ec 	bl	800084c <__aeabi_ddiv>
 8007474:	e7e6      	b.n	8007444 <__ieee754_sqrt+0x30>
 8007476:	1512      	asrs	r2, r2, #20
 8007478:	d074      	beq.n	8007564 <__ieee754_sqrt+0x150>
 800747a:	07d4      	lsls	r4, r2, #31
 800747c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007480:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007484:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007488:	bf5e      	ittt	pl
 800748a:	0fda      	lsrpl	r2, r3, #31
 800748c:	005b      	lslpl	r3, r3, #1
 800748e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8007492:	2400      	movs	r4, #0
 8007494:	0fda      	lsrs	r2, r3, #31
 8007496:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800749a:	107f      	asrs	r7, r7, #1
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	2516      	movs	r5, #22
 80074a0:	4620      	mov	r0, r4
 80074a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80074a6:	1886      	adds	r6, r0, r2
 80074a8:	428e      	cmp	r6, r1
 80074aa:	bfde      	ittt	le
 80074ac:	1b89      	suble	r1, r1, r6
 80074ae:	18b0      	addle	r0, r6, r2
 80074b0:	18a4      	addle	r4, r4, r2
 80074b2:	0049      	lsls	r1, r1, #1
 80074b4:	3d01      	subs	r5, #1
 80074b6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80074ba:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80074be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80074c2:	d1f0      	bne.n	80074a6 <__ieee754_sqrt+0x92>
 80074c4:	462a      	mov	r2, r5
 80074c6:	f04f 0e20 	mov.w	lr, #32
 80074ca:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80074ce:	4281      	cmp	r1, r0
 80074d0:	eb06 0c05 	add.w	ip, r6, r5
 80074d4:	dc02      	bgt.n	80074dc <__ieee754_sqrt+0xc8>
 80074d6:	d113      	bne.n	8007500 <__ieee754_sqrt+0xec>
 80074d8:	459c      	cmp	ip, r3
 80074da:	d811      	bhi.n	8007500 <__ieee754_sqrt+0xec>
 80074dc:	f1bc 0f00 	cmp.w	ip, #0
 80074e0:	eb0c 0506 	add.w	r5, ip, r6
 80074e4:	da43      	bge.n	800756e <__ieee754_sqrt+0x15a>
 80074e6:	2d00      	cmp	r5, #0
 80074e8:	db41      	blt.n	800756e <__ieee754_sqrt+0x15a>
 80074ea:	f100 0801 	add.w	r8, r0, #1
 80074ee:	1a09      	subs	r1, r1, r0
 80074f0:	459c      	cmp	ip, r3
 80074f2:	bf88      	it	hi
 80074f4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80074f8:	eba3 030c 	sub.w	r3, r3, ip
 80074fc:	4432      	add	r2, r6
 80074fe:	4640      	mov	r0, r8
 8007500:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007504:	f1be 0e01 	subs.w	lr, lr, #1
 8007508:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800750c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007510:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007514:	d1db      	bne.n	80074ce <__ieee754_sqrt+0xba>
 8007516:	430b      	orrs	r3, r1
 8007518:	d006      	beq.n	8007528 <__ieee754_sqrt+0x114>
 800751a:	1c50      	adds	r0, r2, #1
 800751c:	bf13      	iteet	ne
 800751e:	3201      	addne	r2, #1
 8007520:	3401      	addeq	r4, #1
 8007522:	4672      	moveq	r2, lr
 8007524:	f022 0201 	bicne.w	r2, r2, #1
 8007528:	1063      	asrs	r3, r4, #1
 800752a:	0852      	lsrs	r2, r2, #1
 800752c:	07e1      	lsls	r1, r4, #31
 800752e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007532:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007536:	bf48      	it	mi
 8007538:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800753c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007540:	4614      	mov	r4, r2
 8007542:	e781      	b.n	8007448 <__ieee754_sqrt+0x34>
 8007544:	0ad9      	lsrs	r1, r3, #11
 8007546:	3815      	subs	r0, #21
 8007548:	055b      	lsls	r3, r3, #21
 800754a:	2900      	cmp	r1, #0
 800754c:	d0fa      	beq.n	8007544 <__ieee754_sqrt+0x130>
 800754e:	02cd      	lsls	r5, r1, #11
 8007550:	d50a      	bpl.n	8007568 <__ieee754_sqrt+0x154>
 8007552:	f1c2 0420 	rsb	r4, r2, #32
 8007556:	fa23 f404 	lsr.w	r4, r3, r4
 800755a:	1e55      	subs	r5, r2, #1
 800755c:	4093      	lsls	r3, r2
 800755e:	4321      	orrs	r1, r4
 8007560:	1b42      	subs	r2, r0, r5
 8007562:	e78a      	b.n	800747a <__ieee754_sqrt+0x66>
 8007564:	4610      	mov	r0, r2
 8007566:	e7f0      	b.n	800754a <__ieee754_sqrt+0x136>
 8007568:	0049      	lsls	r1, r1, #1
 800756a:	3201      	adds	r2, #1
 800756c:	e7ef      	b.n	800754e <__ieee754_sqrt+0x13a>
 800756e:	4680      	mov	r8, r0
 8007570:	e7bd      	b.n	80074ee <__ieee754_sqrt+0xda>
 8007572:	bf00      	nop
 8007574:	7ff00000 	.word	0x7ff00000

08007578 <__ieee754_asinf>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	ee10 5a10 	vmov	r5, s0
 800757e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007582:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007586:	ed2d 8b04 	vpush	{d8-d9}
 800758a:	d10c      	bne.n	80075a6 <__ieee754_asinf+0x2e>
 800758c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8007704 <__ieee754_asinf+0x18c>
 8007590:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8007708 <__ieee754_asinf+0x190>
 8007594:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007598:	eee0 7a07 	vfma.f32	s15, s0, s14
 800759c:	eeb0 0a67 	vmov.f32	s0, s15
 80075a0:	ecbd 8b04 	vpop	{d8-d9}
 80075a4:	bd38      	pop	{r3, r4, r5, pc}
 80075a6:	dd04      	ble.n	80075b2 <__ieee754_asinf+0x3a>
 80075a8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80075ac:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80075b0:	e7f6      	b.n	80075a0 <__ieee754_asinf+0x28>
 80075b2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80075b6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80075ba:	da0b      	bge.n	80075d4 <__ieee754_asinf+0x5c>
 80075bc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80075c0:	da52      	bge.n	8007668 <__ieee754_asinf+0xf0>
 80075c2:	eddf 7a52 	vldr	s15, [pc, #328]	; 800770c <__ieee754_asinf+0x194>
 80075c6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80075ca:	eef4 7ae8 	vcmpe.f32	s15, s17
 80075ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d2:	dce5      	bgt.n	80075a0 <__ieee754_asinf+0x28>
 80075d4:	f000 fa2e 	bl	8007a34 <fabsf>
 80075d8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 80075dc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 80075e0:	ee20 8a08 	vmul.f32	s16, s0, s16
 80075e4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8007710 <__ieee754_asinf+0x198>
 80075e8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8007714 <__ieee754_asinf+0x19c>
 80075ec:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8007718 <__ieee754_asinf+0x1a0>
 80075f0:	eea8 7a27 	vfma.f32	s14, s16, s15
 80075f4:	eddf 7a49 	vldr	s15, [pc, #292]	; 800771c <__ieee754_asinf+0x1a4>
 80075f8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80075fc:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8007720 <__ieee754_asinf+0x1a8>
 8007600:	eea7 7a88 	vfma.f32	s14, s15, s16
 8007604:	eddf 7a47 	vldr	s15, [pc, #284]	; 8007724 <__ieee754_asinf+0x1ac>
 8007608:	eee7 7a08 	vfma.f32	s15, s14, s16
 800760c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8007728 <__ieee754_asinf+0x1b0>
 8007610:	eea7 9a88 	vfma.f32	s18, s15, s16
 8007614:	eddf 7a45 	vldr	s15, [pc, #276]	; 800772c <__ieee754_asinf+0x1b4>
 8007618:	eee8 7a07 	vfma.f32	s15, s16, s14
 800761c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007730 <__ieee754_asinf+0x1b8>
 8007620:	eea7 7a88 	vfma.f32	s14, s15, s16
 8007624:	eddf 7a43 	vldr	s15, [pc, #268]	; 8007734 <__ieee754_asinf+0x1bc>
 8007628:	eee7 7a08 	vfma.f32	s15, s14, s16
 800762c:	eeb0 0a48 	vmov.f32	s0, s16
 8007630:	eee7 8a88 	vfma.f32	s17, s15, s16
 8007634:	f000 f926 	bl	8007884 <__ieee754_sqrtf>
 8007638:	4b3f      	ldr	r3, [pc, #252]	; (8007738 <__ieee754_asinf+0x1c0>)
 800763a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800763e:	429c      	cmp	r4, r3
 8007640:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8007644:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007648:	dd3d      	ble.n	80076c6 <__ieee754_asinf+0x14e>
 800764a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800764e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800773c <__ieee754_asinf+0x1c4>
 8007652:	eee0 7a26 	vfma.f32	s15, s0, s13
 8007656:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8007708 <__ieee754_asinf+0x190>
 800765a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800765e:	2d00      	cmp	r5, #0
 8007660:	bfd8      	it	le
 8007662:	eeb1 0a40 	vnegle.f32	s0, s0
 8007666:	e79b      	b.n	80075a0 <__ieee754_asinf+0x28>
 8007668:	ee60 7a00 	vmul.f32	s15, s0, s0
 800766c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8007710 <__ieee754_asinf+0x198>
 8007670:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8007714 <__ieee754_asinf+0x19c>
 8007674:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8007728 <__ieee754_asinf+0x1b0>
 8007678:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800767c:	eddf 6a27 	vldr	s13, [pc, #156]	; 800771c <__ieee754_asinf+0x1a4>
 8007680:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007684:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8007720 <__ieee754_asinf+0x1a8>
 8007688:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800768c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8007724 <__ieee754_asinf+0x1ac>
 8007690:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007694:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8007718 <__ieee754_asinf+0x1a0>
 8007698:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800769c:	eddf 6a23 	vldr	s13, [pc, #140]	; 800772c <__ieee754_asinf+0x1b4>
 80076a0:	eee7 6a86 	vfma.f32	s13, s15, s12
 80076a4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8007730 <__ieee754_asinf+0x1b8>
 80076a8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80076ac:	eddf 6a21 	vldr	s13, [pc, #132]	; 8007734 <__ieee754_asinf+0x1bc>
 80076b0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80076b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80076b8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80076bc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80076c0:	eea0 0a27 	vfma.f32	s0, s0, s15
 80076c4:	e76c      	b.n	80075a0 <__ieee754_asinf+0x28>
 80076c6:	ee10 3a10 	vmov	r3, s0
 80076ca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80076ce:	f023 030f 	bic.w	r3, r3, #15
 80076d2:	ee07 3a10 	vmov	s14, r3
 80076d6:	eea7 8a47 	vfms.f32	s16, s14, s14
 80076da:	ee70 7a07 	vadd.f32	s15, s0, s14
 80076de:	ee30 0a00 	vadd.f32	s0, s0, s0
 80076e2:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80076e6:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007704 <__ieee754_asinf+0x18c>
 80076ea:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80076ee:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80076f2:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8007740 <__ieee754_asinf+0x1c8>
 80076f6:	eeb0 6a40 	vmov.f32	s12, s0
 80076fa:	eea7 6a66 	vfms.f32	s12, s14, s13
 80076fe:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007702:	e7aa      	b.n	800765a <__ieee754_asinf+0xe2>
 8007704:	b33bbd2e 	.word	0xb33bbd2e
 8007708:	3fc90fdb 	.word	0x3fc90fdb
 800770c:	7149f2ca 	.word	0x7149f2ca
 8007710:	3811ef08 	.word	0x3811ef08
 8007714:	3a4f7f04 	.word	0x3a4f7f04
 8007718:	3e2aaaab 	.word	0x3e2aaaab
 800771c:	bd241146 	.word	0xbd241146
 8007720:	3e4e0aa8 	.word	0x3e4e0aa8
 8007724:	bea6b090 	.word	0xbea6b090
 8007728:	3d9dc62e 	.word	0x3d9dc62e
 800772c:	bf303361 	.word	0xbf303361
 8007730:	4001572d 	.word	0x4001572d
 8007734:	c019d139 	.word	0xc019d139
 8007738:	3f799999 	.word	0x3f799999
 800773c:	333bbd2e 	.word	0x333bbd2e
 8007740:	3f490fdb 	.word	0x3f490fdb

08007744 <__ieee754_atan2f>:
 8007744:	ee10 2a90 	vmov	r2, s1
 8007748:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800774c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007750:	b510      	push	{r4, lr}
 8007752:	eef0 7a40 	vmov.f32	s15, s0
 8007756:	dc06      	bgt.n	8007766 <__ieee754_atan2f+0x22>
 8007758:	ee10 0a10 	vmov	r0, s0
 800775c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8007760:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007764:	dd04      	ble.n	8007770 <__ieee754_atan2f+0x2c>
 8007766:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800776a:	eeb0 0a67 	vmov.f32	s0, s15
 800776e:	bd10      	pop	{r4, pc}
 8007770:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8007774:	d103      	bne.n	800777e <__ieee754_atan2f+0x3a>
 8007776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800777a:	f000 b887 	b.w	800788c <atanf>
 800777e:	1794      	asrs	r4, r2, #30
 8007780:	f004 0402 	and.w	r4, r4, #2
 8007784:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007788:	b943      	cbnz	r3, 800779c <__ieee754_atan2f+0x58>
 800778a:	2c02      	cmp	r4, #2
 800778c:	d05e      	beq.n	800784c <__ieee754_atan2f+0x108>
 800778e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007860 <__ieee754_atan2f+0x11c>
 8007792:	2c03      	cmp	r4, #3
 8007794:	bf08      	it	eq
 8007796:	eef0 7a47 	vmoveq.f32	s15, s14
 800779a:	e7e6      	b.n	800776a <__ieee754_atan2f+0x26>
 800779c:	b941      	cbnz	r1, 80077b0 <__ieee754_atan2f+0x6c>
 800779e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007864 <__ieee754_atan2f+0x120>
 80077a2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8007868 <__ieee754_atan2f+0x124>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	bfb8      	it	lt
 80077aa:	eef0 7a40 	vmovlt.f32	s15, s0
 80077ae:	e7dc      	b.n	800776a <__ieee754_atan2f+0x26>
 80077b0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80077b4:	d110      	bne.n	80077d8 <__ieee754_atan2f+0x94>
 80077b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80077ba:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80077be:	d107      	bne.n	80077d0 <__ieee754_atan2f+0x8c>
 80077c0:	2c02      	cmp	r4, #2
 80077c2:	d846      	bhi.n	8007852 <__ieee754_atan2f+0x10e>
 80077c4:	4b29      	ldr	r3, [pc, #164]	; (800786c <__ieee754_atan2f+0x128>)
 80077c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80077ca:	edd4 7a00 	vldr	s15, [r4]
 80077ce:	e7cc      	b.n	800776a <__ieee754_atan2f+0x26>
 80077d0:	2c02      	cmp	r4, #2
 80077d2:	d841      	bhi.n	8007858 <__ieee754_atan2f+0x114>
 80077d4:	4b26      	ldr	r3, [pc, #152]	; (8007870 <__ieee754_atan2f+0x12c>)
 80077d6:	e7f6      	b.n	80077c6 <__ieee754_atan2f+0x82>
 80077d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80077dc:	d0df      	beq.n	800779e <__ieee754_atan2f+0x5a>
 80077de:	1a5b      	subs	r3, r3, r1
 80077e0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80077e4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80077e8:	da1a      	bge.n	8007820 <__ieee754_atan2f+0xdc>
 80077ea:	2a00      	cmp	r2, #0
 80077ec:	da01      	bge.n	80077f2 <__ieee754_atan2f+0xae>
 80077ee:	313c      	adds	r1, #60	; 0x3c
 80077f0:	db19      	blt.n	8007826 <__ieee754_atan2f+0xe2>
 80077f2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80077f6:	f000 f91d 	bl	8007a34 <fabsf>
 80077fa:	f000 f847 	bl	800788c <atanf>
 80077fe:	eef0 7a40 	vmov.f32	s15, s0
 8007802:	2c01      	cmp	r4, #1
 8007804:	d012      	beq.n	800782c <__ieee754_atan2f+0xe8>
 8007806:	2c02      	cmp	r4, #2
 8007808:	d017      	beq.n	800783a <__ieee754_atan2f+0xf6>
 800780a:	2c00      	cmp	r4, #0
 800780c:	d0ad      	beq.n	800776a <__ieee754_atan2f+0x26>
 800780e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8007874 <__ieee754_atan2f+0x130>
 8007812:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007816:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007878 <__ieee754_atan2f+0x134>
 800781a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800781e:	e7a4      	b.n	800776a <__ieee754_atan2f+0x26>
 8007820:	eddf 7a10 	vldr	s15, [pc, #64]	; 8007864 <__ieee754_atan2f+0x120>
 8007824:	e7ed      	b.n	8007802 <__ieee754_atan2f+0xbe>
 8007826:	eddf 7a15 	vldr	s15, [pc, #84]	; 800787c <__ieee754_atan2f+0x138>
 800782a:	e7ea      	b.n	8007802 <__ieee754_atan2f+0xbe>
 800782c:	ee17 3a90 	vmov	r3, s15
 8007830:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007834:	ee07 3a90 	vmov	s15, r3
 8007838:	e797      	b.n	800776a <__ieee754_atan2f+0x26>
 800783a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007874 <__ieee754_atan2f+0x130>
 800783e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007842:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8007878 <__ieee754_atan2f+0x134>
 8007846:	ee70 7a67 	vsub.f32	s15, s0, s15
 800784a:	e78e      	b.n	800776a <__ieee754_atan2f+0x26>
 800784c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8007878 <__ieee754_atan2f+0x134>
 8007850:	e78b      	b.n	800776a <__ieee754_atan2f+0x26>
 8007852:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8007880 <__ieee754_atan2f+0x13c>
 8007856:	e788      	b.n	800776a <__ieee754_atan2f+0x26>
 8007858:	eddf 7a08 	vldr	s15, [pc, #32]	; 800787c <__ieee754_atan2f+0x138>
 800785c:	e785      	b.n	800776a <__ieee754_atan2f+0x26>
 800785e:	bf00      	nop
 8007860:	c0490fdb 	.word	0xc0490fdb
 8007864:	3fc90fdb 	.word	0x3fc90fdb
 8007868:	bfc90fdb 	.word	0xbfc90fdb
 800786c:	08007edc 	.word	0x08007edc
 8007870:	08007ee8 	.word	0x08007ee8
 8007874:	33bbbd2e 	.word	0x33bbbd2e
 8007878:	40490fdb 	.word	0x40490fdb
 800787c:	00000000 	.word	0x00000000
 8007880:	3f490fdb 	.word	0x3f490fdb

08007884 <__ieee754_sqrtf>:
 8007884:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007888:	4770      	bx	lr
	...

0800788c <atanf>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	ee10 5a10 	vmov	r5, s0
 8007892:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8007896:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800789a:	eef0 7a40 	vmov.f32	s15, s0
 800789e:	db10      	blt.n	80078c2 <atanf+0x36>
 80078a0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80078a4:	dd04      	ble.n	80078b0 <atanf+0x24>
 80078a6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80078aa:	eeb0 0a67 	vmov.f32	s0, s15
 80078ae:	bd38      	pop	{r3, r4, r5, pc}
 80078b0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80079e8 <atanf+0x15c>
 80078b4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80079ec <atanf+0x160>
 80078b8:	2d00      	cmp	r5, #0
 80078ba:	bfd8      	it	le
 80078bc:	eef0 7a40 	vmovle.f32	s15, s0
 80078c0:	e7f3      	b.n	80078aa <atanf+0x1e>
 80078c2:	4b4b      	ldr	r3, [pc, #300]	; (80079f0 <atanf+0x164>)
 80078c4:	429c      	cmp	r4, r3
 80078c6:	dc10      	bgt.n	80078ea <atanf+0x5e>
 80078c8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80078cc:	da0a      	bge.n	80078e4 <atanf+0x58>
 80078ce:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80079f4 <atanf+0x168>
 80078d2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80078d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078da:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80078de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e2:	dce2      	bgt.n	80078aa <atanf+0x1e>
 80078e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078e8:	e013      	b.n	8007912 <atanf+0x86>
 80078ea:	f000 f8a3 	bl	8007a34 <fabsf>
 80078ee:	4b42      	ldr	r3, [pc, #264]	; (80079f8 <atanf+0x16c>)
 80078f0:	429c      	cmp	r4, r3
 80078f2:	dc4f      	bgt.n	8007994 <atanf+0x108>
 80078f4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80078f8:	429c      	cmp	r4, r3
 80078fa:	dc41      	bgt.n	8007980 <atanf+0xf4>
 80078fc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8007900:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007904:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007908:	2300      	movs	r3, #0
 800790a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800790e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007918:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80079fc <atanf+0x170>
 800791c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8007a00 <atanf+0x174>
 8007920:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8007a04 <atanf+0x178>
 8007924:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007928:	eee6 5a87 	vfma.f32	s11, s13, s14
 800792c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007a08 <atanf+0x17c>
 8007930:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007934:	eddf 5a35 	vldr	s11, [pc, #212]	; 8007a0c <atanf+0x180>
 8007938:	eee7 5a26 	vfma.f32	s11, s14, s13
 800793c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007a10 <atanf+0x184>
 8007940:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007944:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007a14 <atanf+0x188>
 8007948:	eee7 5a26 	vfma.f32	s11, s14, s13
 800794c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007a18 <atanf+0x18c>
 8007950:	eea6 5a87 	vfma.f32	s10, s13, s14
 8007954:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8007a1c <atanf+0x190>
 8007958:	eea5 7a26 	vfma.f32	s14, s10, s13
 800795c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8007a20 <atanf+0x194>
 8007960:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007964:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8007a24 <atanf+0x198>
 8007968:	eea5 7a26 	vfma.f32	s14, s10, s13
 800796c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007970:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007974:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007978:	d121      	bne.n	80079be <atanf+0x132>
 800797a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800797e:	e794      	b.n	80078aa <atanf+0x1e>
 8007980:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007984:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007988:	ee30 0a27 	vadd.f32	s0, s0, s15
 800798c:	2301      	movs	r3, #1
 800798e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007992:	e7be      	b.n	8007912 <atanf+0x86>
 8007994:	4b24      	ldr	r3, [pc, #144]	; (8007a28 <atanf+0x19c>)
 8007996:	429c      	cmp	r4, r3
 8007998:	dc0b      	bgt.n	80079b2 <atanf+0x126>
 800799a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800799e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079a2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80079a6:	2302      	movs	r3, #2
 80079a8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80079ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079b0:	e7af      	b.n	8007912 <atanf+0x86>
 80079b2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80079b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80079ba:	2303      	movs	r3, #3
 80079bc:	e7a9      	b.n	8007912 <atanf+0x86>
 80079be:	4a1b      	ldr	r2, [pc, #108]	; (8007a2c <atanf+0x1a0>)
 80079c0:	491b      	ldr	r1, [pc, #108]	; (8007a30 <atanf+0x1a4>)
 80079c2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80079c6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80079ca:	ed93 0a00 	vldr	s0, [r3]
 80079ce:	ee37 7a40 	vsub.f32	s14, s14, s0
 80079d2:	ed92 0a00 	vldr	s0, [r2]
 80079d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079da:	2d00      	cmp	r5, #0
 80079dc:	ee70 7a67 	vsub.f32	s15, s0, s15
 80079e0:	bfb8      	it	lt
 80079e2:	eef1 7a67 	vneglt.f32	s15, s15
 80079e6:	e760      	b.n	80078aa <atanf+0x1e>
 80079e8:	3fc90fdb 	.word	0x3fc90fdb
 80079ec:	bfc90fdb 	.word	0xbfc90fdb
 80079f0:	3edfffff 	.word	0x3edfffff
 80079f4:	7149f2ca 	.word	0x7149f2ca
 80079f8:	3f97ffff 	.word	0x3f97ffff
 80079fc:	3c8569d7 	.word	0x3c8569d7
 8007a00:	3d4bda59 	.word	0x3d4bda59
 8007a04:	bd6ef16b 	.word	0xbd6ef16b
 8007a08:	3d886b35 	.word	0x3d886b35
 8007a0c:	3dba2e6e 	.word	0x3dba2e6e
 8007a10:	3e124925 	.word	0x3e124925
 8007a14:	3eaaaaab 	.word	0x3eaaaaab
 8007a18:	bd15a221 	.word	0xbd15a221
 8007a1c:	bd9d8795 	.word	0xbd9d8795
 8007a20:	bde38e38 	.word	0xbde38e38
 8007a24:	be4ccccd 	.word	0xbe4ccccd
 8007a28:	401bffff 	.word	0x401bffff
 8007a2c:	08007ef4 	.word	0x08007ef4
 8007a30:	08007f04 	.word	0x08007f04

08007a34 <fabsf>:
 8007a34:	ee10 3a10 	vmov	r3, s0
 8007a38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a3c:	ee00 3a10 	vmov	s0, r3
 8007a40:	4770      	bx	lr
	...

08007a44 <nanf>:
 8007a44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007a4c <nanf+0x8>
 8007a48:	4770      	bx	lr
 8007a4a:	bf00      	nop
 8007a4c:	7fc00000 	.word	0x7fc00000

08007a50 <_init>:
 8007a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a52:	bf00      	nop
 8007a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a56:	bc08      	pop	{r3}
 8007a58:	469e      	mov	lr, r3
 8007a5a:	4770      	bx	lr

08007a5c <_fini>:
 8007a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5e:	bf00      	nop
 8007a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a62:	bc08      	pop	{r3}
 8007a64:	469e      	mov	lr, r3
 8007a66:	4770      	bx	lr
