
STM32F4_FC_DEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  0800aa48  0800aa48  0001aa48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b80c  0800b80c  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b80c  0800b80c  0001b80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b814  0800b814  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b814  0800b814  0001b814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b818  0800b818  0001b818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800b81c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          00000570  200001f0  200001f0  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000760  20000760  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129c3  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c34  00000000  00000000  00032be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f0  00000000  00000000  00036818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001060  00000000  00000000  00037a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002630a  00000000  00000000  00038a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013fbf  00000000  00000000  0005ed72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8a67  00000000  00000000  00072d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b798  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b5c  00000000  00000000  0014b7e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa30 	.word	0x0800aa30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800aa30 	.word	0x0800aa30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <LL_DMA_SetDataLength+0x44>)
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4413      	add	r3, r2
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	0c1b      	lsrs	r3, r3, #16
 8000f6a:	041b      	lsls	r3, r3, #16
 8000f6c:	4908      	ldr	r1, [pc, #32]	; (8000f90 <LL_DMA_SetDataLength+0x44>)
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	440a      	add	r2, r1
 8000f72:	7812      	ldrb	r2, [r2, #0]
 8000f74:	4611      	mov	r1, r2
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	440a      	add	r2, r1
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	604b      	str	r3, [r1, #4]
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	0800b3ac 	.word	0x0800b3ac

08000f94 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <LL_DMA_SetMemoryAddress+0x2c>)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4413      	add	r3, r2
 8000fae:	461a      	mov	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	0800b3ac 	.word	0x0800b3ac

08000fc4 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <LL_DMA_SetPeriphAddress+0x2c>)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4413      	add	r3, r2
 8000fde:	461a      	mov	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6093      	str	r3, [r2, #8]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	0800b3ac 	.word	0x0800b3ac

08000ff4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000ffe:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <LL_DMA_EnableIT_TC+0x3c>)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4908      	ldr	r1, [pc, #32]	; (8001030 <LL_DMA_EnableIT_TC+0x3c>)
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	440a      	add	r2, r1
 8001014:	7812      	ldrb	r2, [r2, #0]
 8001016:	4611      	mov	r1, r2
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	440a      	add	r2, r1
 800101c:	f043 0310 	orr.w	r3, r3, #16
 8001020:	6013      	str	r3, [r2, #0]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	0800b3ac 	.word	0x0800b3ac

08001034 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3314      	adds	r3, #20
 8001040:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	e853 3f00 	ldrex	r3, [r3]
 8001048:	60bb      	str	r3, [r7, #8]
   return(result);
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001050:	61fb      	str	r3, [r7, #28]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3314      	adds	r3, #20
 8001056:	69fa      	ldr	r2, [r7, #28]
 8001058:	61ba      	str	r2, [r7, #24]
 800105a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800105c:	6979      	ldr	r1, [r7, #20]
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	e841 2300 	strex	r3, r2, [r1]
 8001064:	613b      	str	r3, [r7, #16]
   return(result);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1e7      	bne.n	800103c <LL_USART_EnableDMAReq_RX+0x8>
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3304      	adds	r3, #4
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <GPS_DMA_init>:

int recv_cnt;
int err_cnt;

void GPS_DMA_init(GPS_RAW_MESSAGE* gps_raw_message, USART_TypeDef* UART,DMA_TypeDef* DMA,uint32_t DMA_STREAM)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	603b      	str	r3, [r7, #0]


	//DMA, INTERRUPT SETTINGS
	LL_DMA_SetMemoryAddress(DMA,DMA_STREAM,(uint32_t)(gps_raw_message->gps_raw_buf));
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3308      	adds	r3, #8
 80010a4:	461a      	mov	r2, r3
 80010a6:	6839      	ldr	r1, [r7, #0]
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff73 	bl	8000f94 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetPeriphAddress(DMA,DMA_STREAM,LL_USART_DMA_GetRegAddr(UART));
 80010ae:	68b8      	ldr	r0, [r7, #8]
 80010b0:	f7ff ffe3 	bl	800107a <LL_USART_DMA_GetRegAddr>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	6839      	ldr	r1, [r7, #0]
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff82 	bl	8000fc4 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetDataLength(DMA,DMA_STREAM,MSG_LENGTH_NAV_SOL);
 80010c0:	223c      	movs	r2, #60	; 0x3c
 80010c2:	6839      	ldr	r1, [r7, #0]
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff41 	bl	8000f4c <LL_DMA_SetDataLength>

	//  LL_DMA_EnableIT_HT(DMA1, LL_DMA_STREAM_1);
    LL_DMA_EnableIT_TC(DMA, DMA_STREAM);
 80010ca:	6839      	ldr	r1, [r7, #0]
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff91 	bl	8000ff4 <LL_DMA_EnableIT_TC>
	LL_USART_EnableDMAReq_RX(UART);
 80010d2:	68b8      	ldr	r0, [r7, #8]
 80010d4:	f7ff ffae 	bl	8001034 <LL_USART_EnableDMAReq_RX>

}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <GPS_Parsing>:



void GPS_Parsing(GPS_RAW_MESSAGE* message, MSG_NAV* msg_nav, int* recv_cnt, int* err_cnt)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	603b      	str	r3, [r7, #0]
	uint8_t* ptr,*gps_ptr = message->gps_raw_buf;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	3308      	adds	r3, #8
 80010f2:	61fb      	str	r3, [r7, #28]
	int32_t temp;
	unsigned short msg_length = 0, checksum = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	837b      	strh	r3, [r7, #26]
 80010f8:	2300      	movs	r3, #0
 80010fa:	833b      	strh	r3, [r7, #24]
	unsigned char classID = 0, messageID = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	75fb      	strb	r3, [r7, #23]
 8001100:	2300      	movs	r3, #0
 8001102:	75bb      	strb	r3, [r7, #22]
	if(gps_ptr[0]==MSG_UBX_SOF1 && gps_ptr[1]==MSG_UBX_SOF2){
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2bb5      	cmp	r3, #181	; 0xb5
 800110a:	d14a      	bne.n	80011a2 <GPS_Parsing+0xc2>
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	3301      	adds	r3, #1
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b62      	cmp	r3, #98	; 0x62
 8001114:	d145      	bne.n	80011a2 <GPS_Parsing+0xc2>

		ptr 		= gps_ptr + 2;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3302      	adds	r3, #2
 800111a:	613b      	str	r3, [r7, #16]
		classID 	= *ptr++;
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	613a      	str	r2, [r7, #16]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	75fb      	strb	r3, [r7, #23]
		messageID 	= *ptr++;
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	613a      	str	r2, [r7, #16]
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	75bb      	strb	r3, [r7, #22]

		if(messageID==MSG_ID_UBX_NAV_POSLLH) {
 8001130:	7dbb      	ldrb	r3, [r7, #22]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d114      	bne.n	8001160 <GPS_Parsing+0x80>
			msg_length 	= (ptr[1] << 8) + (ptr[0]);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	3301      	adds	r3, #1
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b29b      	uxth	r3, r3
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	b29a      	uxth	r2, r3
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	4413      	add	r3, r2
 800114a:	837b      	strh	r3, [r7, #26]
			ptr = ptr +2;
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	3302      	adds	r3, #2
 8001150:	613b      	str	r3, [r7, #16]
			memcpy(msg_nav, ptr, msg_length);
 8001152:	8b7b      	ldrh	r3, [r7, #26]
 8001154:	461a      	mov	r2, r3
 8001156:	6939      	ldr	r1, [r7, #16]
 8001158:	68b8      	ldr	r0, [r7, #8]
 800115a:	f006 fb47 	bl	80077ec <memcpy>
 800115e:	e01a      	b.n	8001196 <GPS_Parsing+0xb6>

//			printf("time:[%d]ms\t lon: [%d]deg\t lat: [%d]deg\t h: [%d]mm\t hMSL: [%d]mm\t hAcc: [%d]mm\t vAcc: [%d]mm\n",msg_nav->iTOW, msg_nav->lon,msg_nav->lat, msg_nav->h, msg_nav->hMSL, msg_nav->hAcc, msg_nav->vAcc);

		}
		else if(messageID==MSG_ID_UBX_NAV_SOL) {
 8001160:	7dbb      	ldrb	r3, [r7, #22]
 8001162:	2b06      	cmp	r3, #6
 8001164:	d117      	bne.n	8001196 <GPS_Parsing+0xb6>
			msg_length 	= (ptr[1] << 8) + (ptr[0]);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	3301      	adds	r3, #1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b29b      	uxth	r3, r3
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b29a      	uxth	r2, r3
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b29b      	uxth	r3, r3
 8001178:	4413      	add	r3, r2
 800117a:	837b      	strh	r3, [r7, #26]
			ptr = ptr +2;
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	3302      	adds	r3, #2
 8001180:	613b      	str	r3, [r7, #16]
			msg_nav = msg_nav + MSG_LENGTH_NAV_POSLLH - 8;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8001188:	60bb      	str	r3, [r7, #8]
			memcpy(msg_nav, ptr, msg_length);
 800118a:	8b7b      	ldrh	r3, [r7, #26]
 800118c:	461a      	mov	r2, r3
 800118e:	6939      	ldr	r1, [r7, #16]
 8001190:	68b8      	ldr	r0, [r7, #8]
 8001192:	f006 fb2b 	bl	80077ec <memcpy>
		}

		recv_cnt[0]++;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	e005      	b.n	80011ae <GPS_Parsing+0xce>

	}

	else
	{
		err_cnt[0]++;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	601a      	str	r2, [r3, #0]
	}
//	printf("recv: %d\t err: %d\n", recv_cnt[0], err_cnt[0]);

}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3720      	adds	r7, #32
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011c4:	4907      	ldr	r1, [pc, #28]	; (80011e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4013      	ands	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011d6:	68fb      	ldr	r3, [r7, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	40023800 	.word	0x40023800

080011e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011f4:	4907      	ldr	r1, [pc, #28]	; (8001214 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4013      	ands	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40023800 	.word	0x40023800

08001218 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	601a      	str	r2, [r3, #0]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f023 0210 	bic.w	r2, r3, #16
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	431a      	orrs	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	605a      	str	r2, [r3, #4]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b01      	cmp	r3, #1
 8001270:	d101      	bne.n	8001276 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b02      	cmp	r3, #2
 8001296:	d101      	bne.n	800129c <LL_SPI_IsActiveFlag_TXE+0x18>
 8001298:	2301      	movs	r3, #1
 800129a:	e000      	b.n	800129e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	330c      	adds	r3, #12
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b085      	sub	sp, #20
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	330c      	adds	r3, #12
 80012d6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	78fa      	ldrb	r2, [r7, #3]
 80012dc:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	4013      	ands	r3, r2
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	bf0c      	ite	eq
 8001302:	2301      	moveq	r3, #1
 8001304:	2300      	movne	r3, #0
 8001306:	b2db      	uxtb	r3, r3
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	619a      	str	r2, [r3, #24]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	041a      	lsls	r2, r3, #16
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	619a      	str	r2, [r3, #24]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b090      	sub	sp, #64	; 0x40
 8001354:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	2228      	movs	r2, #40	; 0x28
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f006 fa52 	bl	8007808 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001374:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001378:	f7ff ff36 	bl	80011e8 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff ff1b 	bl	80011b8 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001382:	2004      	movs	r0, #4
 8001384:	f7ff ff18 	bl	80011b8 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001388:	23e0      	movs	r3, #224	; 0xe0
 800138a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800138c:	2302      	movs	r3, #2
 800138e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800139c:	2305      	movs	r3, #5
 800139e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	463b      	mov	r3, r7
 80013a2:	4619      	mov	r1, r3
 80013a4:	4825      	ldr	r0, [pc, #148]	; (800143c <ICM20602_GPIO_SPI_Initialization+0xec>)
 80013a6:	f005 f9eb 	bl	8006780 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80013ae:	f44f 7382 	mov.w	r3, #260	; 0x104
 80013b2:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80013b8:	2302      	movs	r3, #2
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80013bc:	2301      	movs	r3, #1
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80013c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80013c6:	2310      	movs	r3, #16
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80013ca:	2300      	movs	r3, #0
 80013cc:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80013d2:	230a      	movs	r3, #10
 80013d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 80013d6:	f107 0318 	add.w	r3, r7, #24
 80013da:	4619      	mov	r1, r3
 80013dc:	4818      	ldr	r0, [pc, #96]	; (8001440 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80013de:	f005 fba0 	bl	8006b22 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80013e2:	2100      	movs	r1, #0
 80013e4:	4816      	ldr	r0, [pc, #88]	; (8001440 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80013e6:	f7ff ff27 	bl	8001238 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80013ea:	2110      	movs	r1, #16
 80013ec:	4813      	ldr	r0, [pc, #76]	; (800143c <ICM20602_GPIO_SPI_Initialization+0xec>)
 80013ee:	f7ff ff9f 	bl	8001330 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80013f2:	2310      	movs	r3, #16
 80013f4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013f6:	2301      	movs	r3, #1
 80013f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8001406:	463b      	mov	r3, r7
 8001408:	4619      	mov	r1, r3
 800140a:	480c      	ldr	r0, [pc, #48]	; (800143c <ICM20602_GPIO_SPI_Initialization+0xec>)
 800140c:	f005 f9b8 	bl	8006780 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8001410:	2310      	movs	r3, #16
 8001412:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001418:	2301      	movs	r3, #1
 800141a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 800141c:	463b      	mov	r3, r7
 800141e:	4619      	mov	r1, r3
 8001420:	4808      	ldr	r0, [pc, #32]	; (8001444 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001422:	f005 f9ad 	bl	8006780 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001428:	f7ff fef6 	bl	8001218 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 800142c:	2110      	movs	r1, #16
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001430:	f7ff ff70 	bl	8001314 <LL_GPIO_SetOutputPin>
}
 8001434:	bf00      	nop
 8001436:	3740      	adds	r7, #64	; 0x40
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40020000 	.word	0x40020000
 8001440:	40013000 	.word	0x40013000
 8001444:	40020800 	.word	0x40020800

08001448 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8001452:	bf00      	nop
 8001454:	480c      	ldr	r0, [pc, #48]	; (8001488 <SPI1_SendByte+0x40>)
 8001456:	f7ff ff15 	bl	8001284 <LL_SPI_IsActiveFlag_TXE>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f9      	beq.n	8001454 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	4619      	mov	r1, r3
 8001464:	4808      	ldr	r0, [pc, #32]	; (8001488 <SPI1_SendByte+0x40>)
 8001466:	f7ff ff2e 	bl	80012c6 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 800146a:	bf00      	nop
 800146c:	4806      	ldr	r0, [pc, #24]	; (8001488 <SPI1_SendByte+0x40>)
 800146e:	f7ff fef6 	bl	800125e <LL_SPI_IsActiveFlag_RXNE>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f9      	beq.n	800146c <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8001478:	4803      	ldr	r0, [pc, #12]	; (8001488 <SPI1_SendByte+0x40>)
 800147a:	f7ff ff16 	bl	80012aa <LL_SPI_ReceiveData8>
 800147e:	4603      	mov	r3, r0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40013000 	.word	0x40013000

0800148c <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8001496:	2110      	movs	r1, #16
 8001498:	480b      	ldr	r0, [pc, #44]	; (80014c8 <ICM20602_Readbyte+0x3c>)
 800149a:	f7ff ff49 	bl	8001330 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff ffce 	bl	8001448 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff ffcb 	bl	8001448 <SPI1_SendByte>
 80014b2:	4603      	mov	r3, r0
 80014b4:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 80014b6:	2110      	movs	r1, #16
 80014b8:	4803      	ldr	r0, [pc, #12]	; (80014c8 <ICM20602_Readbyte+0x3c>)
 80014ba:	f7ff ff2b 	bl	8001314 <LL_GPIO_SetOutputPin>
	
	return val;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40020000 	.word	0x40020000

080014cc <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	603a      	str	r2, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
 80014d8:	460b      	mov	r3, r1
 80014da:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 80014e0:	2110      	movs	r1, #16
 80014e2:	4810      	ldr	r0, [pc, #64]	; (8001524 <ICM20602_Readbytes+0x58>)
 80014e4:	f7ff ff24 	bl	8001330 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ffa9 	bl	8001448 <SPI1_SendByte>
	while(i < len)
 80014f6:	e009      	b.n	800150c <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	60fa      	str	r2, [r7, #12]
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	18d4      	adds	r4, r2, r3
 8001502:	2000      	movs	r0, #0
 8001504:	f7ff ffa0 	bl	8001448 <SPI1_SendByte>
 8001508:	4603      	mov	r3, r0
 800150a:	7023      	strb	r3, [r4, #0]
	while(i < len)
 800150c:	79bb      	ldrb	r3, [r7, #6]
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d3f1      	bcc.n	80014f8 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 8001514:	2110      	movs	r1, #16
 8001516:	4803      	ldr	r0, [pc, #12]	; (8001524 <ICM20602_Readbytes+0x58>)
 8001518:	f7ff fefc 	bl	8001314 <LL_GPIO_SetOutputPin>
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bd90      	pop	{r4, r7, pc}
 8001524:	40020000 	.word	0x40020000

08001528 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	460a      	mov	r2, r1
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	4613      	mov	r3, r2
 8001536:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8001538:	2110      	movs	r1, #16
 800153a:	480b      	ldr	r0, [pc, #44]	; (8001568 <ICM20602_Writebyte+0x40>)
 800153c:	f7ff fef8 	bl	8001330 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001546:	b2db      	uxtb	r3, r3
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff7d 	bl	8001448 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800154e:	79bb      	ldrb	r3, [r7, #6]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff79 	bl	8001448 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8001556:	2110      	movs	r1, #16
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <ICM20602_Writebyte+0x40>)
 800155a:	f7ff fedb 	bl	8001314 <LL_GPIO_SetOutputPin>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40020000 	.word	0x40020000

0800156c <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001588:	f7ff fee2 	bl	8001350 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 800158c:	4838      	ldr	r0, [pc, #224]	; (8001670 <ICM20602_Initialization+0x104>)
 800158e:	f006 fdad 	bl	80080ec <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8001592:	2075      	movs	r0, #117	; 0x75
 8001594:	f7ff ff7a 	bl	800148c <ICM20602_Readbyte>
 8001598:	4603      	mov	r3, r0
 800159a:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	2b12      	cmp	r3, #18
 80015a0:	d105      	bne.n	80015ae <ICM20602_Initialization+0x42>
	{
		printf("\r\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4833      	ldr	r0, [pc, #204]	; (8001674 <ICM20602_Initialization+0x108>)
 80015a8:	f006 fda0 	bl	80080ec <iprintf>
 80015ac:	e012      	b.n	80015d4 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	2b12      	cmp	r3, #18
 80015b2:	d00f      	beq.n	80015d4 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 80015b4:	2075      	movs	r0, #117	; 0x75
 80015b6:	f7ff ff69 	bl	800148c <ICM20602_Readbyte>
 80015ba:	4603      	mov	r3, r0
 80015bc:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	2b12      	cmp	r3, #18
 80015c2:	d007      	beq.n	80015d4 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	2212      	movs	r2, #18
 80015c8:	4619      	mov	r1, r3
 80015ca:	482b      	ldr	r0, [pc, #172]	; (8001678 <ICM20602_Initialization+0x10c>)
 80015cc:	f006 fd8e 	bl	80080ec <iprintf>
			return 1; //ERROR
 80015d0:	2301      	movs	r3, #1
 80015d2:	e048      	b.n	8001666 <ICM20602_Initialization+0xfa>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	206b      	movs	r0, #107	; 0x6b
 80015d8:	f7ff ffa6 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 80015dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015e0:	f002 f948 	bl	8003874 <usDelay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 80015e4:	2101      	movs	r1, #1
 80015e6:	206b      	movs	r0, #107	; 0x6b
 80015e8:	f7ff ff9e 	bl	8001528 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	usDelay(50000);
 80015ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015f0:	f002 f940 	bl	8003874 <usDelay>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 80015f4:	2100      	movs	r1, #0
 80015f6:	206c      	movs	r0, #108	; 0x6c
 80015f8:	f7ff ff96 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 80015fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001600:	f002 f938 	bl	8003874 <usDelay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8001604:	2100      	movs	r1, #0
 8001606:	2019      	movs	r0, #25
 8001608:	f7ff ff8e 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800160c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001610:	f002 f930 	bl	8003874 <usDelay>
	
	// Gyro DLPF Config
//	ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001614:	2105      	movs	r1, #5
 8001616:	201a      	movs	r0, #26
 8001618:	f7ff ff86 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800161c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001620:	f002 f928 	bl	8003874 <usDelay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001624:	2118      	movs	r1, #24
 8001626:	201b      	movs	r0, #27
 8001628:	f7ff ff7e 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800162c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001630:	f002 f920 	bl	8003874 <usDelay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001634:	2118      	movs	r1, #24
 8001636:	201c      	movs	r0, #28
 8001638:	f7ff ff76 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800163c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001640:	f002 f918 	bl	8003874 <usDelay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001644:	2103      	movs	r1, #3
 8001646:	201d      	movs	r0, #29
 8001648:	f7ff ff6e 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800164c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001650:	f002 f910 	bl	8003874 <usDelay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001654:	2101      	movs	r1, #1
 8001656:	2038      	movs	r0, #56	; 0x38
 8001658:	f7ff ff66 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800165c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001660:	f002 f908 	bl	8003874 <usDelay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	0800aa48 	.word	0x0800aa48
 8001674:	0800aa60 	.word	0x0800aa60
 8001678:	0800aa84 	.word	0x0800aa84

0800167c <ICM20602_Get6AxisRawData>:

void ICM20602_Get6AxisRawData(short* accel, short* gyro)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
	unsigned char data[14];
	ICM20602_Readbytes(ACCEL_XOUT_H, 14, data);
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	461a      	mov	r2, r3
 800168c:	210e      	movs	r1, #14
 800168e:	203b      	movs	r0, #59	; 0x3b
 8001690:	f7ff ff1c 	bl	80014cc <ICM20602_Readbytes>
	
	accel[0] = (data[0] << 8) | data[1];
 8001694:	7a3b      	ldrb	r3, [r7, #8]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	b21a      	sxth	r2, r3
 800169a:	7a7b      	ldrb	r3, [r7, #9]
 800169c:	b21b      	sxth	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	801a      	strh	r2, [r3, #0]
	accel[1] = (data[2] << 8) | data[3];
 80016a6:	7abb      	ldrb	r3, [r7, #10]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	b219      	sxth	r1, r3
 80016ac:	7afb      	ldrb	r3, [r7, #11]
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3302      	adds	r3, #2
 80016b4:	430a      	orrs	r2, r1
 80016b6:	b212      	sxth	r2, r2
 80016b8:	801a      	strh	r2, [r3, #0]
	accel[2] = (data[4] << 8) | data[5];
 80016ba:	7b3b      	ldrb	r3, [r7, #12]
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b219      	sxth	r1, r3
 80016c0:	7b7b      	ldrb	r3, [r7, #13]
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3304      	adds	r3, #4
 80016c8:	430a      	orrs	r2, r1
 80016ca:	b212      	sxth	r2, r2
 80016cc:	801a      	strh	r2, [r3, #0]

	gyro[0] = ((data[8] << 8) | data[9]);
 80016ce:	7c3b      	ldrb	r3, [r7, #16]
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	b21a      	sxth	r2, r3
 80016d4:	7c7b      	ldrb	r3, [r7, #17]
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	b21a      	sxth	r2, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[10] << 8) | data[11]);
 80016e0:	7cbb      	ldrb	r3, [r7, #18]
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b219      	sxth	r1, r3
 80016e6:	7cfb      	ldrb	r3, [r7, #19]
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	3302      	adds	r3, #2
 80016ee:	430a      	orrs	r2, r1
 80016f0:	b212      	sxth	r2, r2
 80016f2:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[12] << 8) | data[13]);
 80016f4:	7d3b      	ldrb	r3, [r7, #20]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b219      	sxth	r1, r3
 80016fa:	7d7b      	ldrb	r3, [r7, #21]
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	3304      	adds	r3, #4
 8001702:	430a      	orrs	r2, r1
 8001704:	b212      	sxth	r2, r2
 8001706:	801a      	strh	r2, [r3, #0]
}
 8001708:	bf00      	nop
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8001714:	2110      	movs	r1, #16
 8001716:	4803      	ldr	r0, [pc, #12]	; (8001724 <ICM20602_DataReady+0x14>)
 8001718:	f7ff fde7 	bl	80012ea <LL_GPIO_IsInputPinSet>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40020800 	.word	0x40020800

08001728 <GetRPY>:
float twoKi = 0.0f;                      // 2 * integral gain (Ki)
float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f; // integral error terms scaled by Ki


void GetRPY(float* sampleFreq)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af02      	add	r7, sp, #8
 800172e:	6078      	str	r0, [r7, #4]


	  ICM20602_Get6AxisRawData(&ICM20602.acc_x_raw, &ICM20602.gyro_x_raw);	//	39.11us
 8001730:	4967      	ldr	r1, [pc, #412]	; (80018d0 <GetRPY+0x1a8>)
 8001732:	4868      	ldr	r0, [pc, #416]	; (80018d4 <GetRPY+0x1ac>)
 8001734:	f7ff ffa2 	bl	800167c <ICM20602_Get6AxisRawData>
	  GYROX_RATE = (ICM20602.gyro_x_raw - gx_cal) * 0.06103515625 * 0.017453289;
 8001738:	4b66      	ldr	r3, [pc, #408]	; (80018d4 <GetRPY+0x1ac>)
 800173a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800173e:	ee07 3a90 	vmov	s15, r3
 8001742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001746:	4b64      	ldr	r3, [pc, #400]	; (80018d8 <GetRPY+0x1b0>)
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001750:	ee17 0a90 	vmov	r0, s15
 8001754:	f7fe fef8 	bl	8000548 <__aeabi_f2d>
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	4b5f      	ldr	r3, [pc, #380]	; (80018dc <GetRPY+0x1b4>)
 800175e:	f7fe ff4b 	bl	80005f8 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	a357      	add	r3, pc, #348	; (adr r3, 80018c8 <GetRPY+0x1a0>)
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	f7fe ff42 	bl	80005f8 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f7ff fa14 	bl	8000ba8 <__aeabi_d2f>
 8001780:	4603      	mov	r3, r0
 8001782:	4a57      	ldr	r2, [pc, #348]	; (80018e0 <GetRPY+0x1b8>)
 8001784:	6013      	str	r3, [r2, #0]
	  GYROY_RATE = (ICM20602.gyro_y_raw - gy_cal) * 0.06103515625 * 0.017453289;
 8001786:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <GetRPY+0x1ac>)
 8001788:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001794:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <GetRPY+0x1bc>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179e:	ee17 0a90 	vmov	r0, s15
 80017a2:	f7fe fed1 	bl	8000548 <__aeabi_f2d>
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	4b4c      	ldr	r3, [pc, #304]	; (80018dc <GetRPY+0x1b4>)
 80017ac:	f7fe ff24 	bl	80005f8 <__aeabi_dmul>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	a343      	add	r3, pc, #268	; (adr r3, 80018c8 <GetRPY+0x1a0>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7fe ff1b 	bl	80005f8 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f9ed 	bl	8000ba8 <__aeabi_d2f>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4a45      	ldr	r2, [pc, #276]	; (80018e8 <GetRPY+0x1c0>)
 80017d2:	6013      	str	r3, [r2, #0]
	  GYROZ_RATE = (ICM20602.gyro_z_raw - gz_cal) * 0.06103515625 * 0.017453289;
 80017d4:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <GetRPY+0x1ac>)
 80017d6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e2:	4b42      	ldr	r3, [pc, #264]	; (80018ec <GetRPY+0x1c4>)
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ec:	ee17 0a90 	vmov	r0, s15
 80017f0:	f7fe feaa 	bl	8000548 <__aeabi_f2d>
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4b38      	ldr	r3, [pc, #224]	; (80018dc <GetRPY+0x1b4>)
 80017fa:	f7fe fefd 	bl	80005f8 <__aeabi_dmul>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	a330      	add	r3, pc, #192	; (adr r3, 80018c8 <GetRPY+0x1a0>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe fef4 	bl	80005f8 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f9c6 	bl	8000ba8 <__aeabi_d2f>
 800181c:	4603      	mov	r3, r0
 800181e:	4a34      	ldr	r2, [pc, #208]	; (80018f0 <GetRPY+0x1c8>)
 8001820:	6013      	str	r3, [r2, #0]

	  ACCX_RATE = (ICM20602.acc_x_raw - ax_cal) * 0.00048828125;
 8001822:	4b2c      	ldr	r3, [pc, #176]	; (80018d4 <GetRPY+0x1ac>)
 8001824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001828:	ee07 3a90 	vmov	s15, r3
 800182c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001830:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <GetRPY+0x1cc>)
 8001832:	edd3 7a00 	vldr	s15, [r3]
 8001836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800183a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80018f8 <GetRPY+0x1d0>
 800183e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <GetRPY+0x1d4>)
 8001844:	edc3 7a00 	vstr	s15, [r3]
	  ACCY_RATE = (ICM20602.acc_y_raw - ay_cal) * 0.00048828125;
 8001848:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <GetRPY+0x1ac>)
 800184a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001856:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <GetRPY+0x1d8>)
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001860:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80018f8 <GetRPY+0x1d0>
 8001864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001868:	4b26      	ldr	r3, [pc, #152]	; (8001904 <GetRPY+0x1dc>)
 800186a:	edc3 7a00 	vstr	s15, [r3]
	  ACCZ_RATE = (ICM20602.acc_z_raw) * 0.00048828125;
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <GetRPY+0x1ac>)
 8001870:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe55 	bl	8000524 <__aeabi_i2d>
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8001882:	f7fe feb9 	bl	80005f8 <__aeabi_dmul>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff f98b 	bl	8000ba8 <__aeabi_d2f>
 8001892:	4603      	mov	r3, r0
 8001894:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <GetRPY+0x1e0>)
 8001896:	6013      	str	r3, [r2, #0]

//		  MadgwickQuaternionUpdate(&ACCX_RATE,&ACCY_RATE,&ACCZ_RATE,&GYROX_RATE,&GYROY_RATE,&GYROZ_RATE);	//57us
	  MahonyAHRSupdateIMU(&GYROX_RATE,&GYROY_RATE,&GYROZ_RATE, &ACCX_RATE,&ACCY_RATE,&ACCZ_RATE, *sampleFreq);		//42us
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <GetRPY+0x1e0>)
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <GetRPY+0x1dc>)
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	eeb0 0a67 	vmov.f32	s0, s15
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <GetRPY+0x1d4>)
 80018ac:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <GetRPY+0x1c8>)
 80018ae:	490e      	ldr	r1, [pc, #56]	; (80018e8 <GetRPY+0x1c0>)
 80018b0:	480b      	ldr	r0, [pc, #44]	; (80018e0 <GetRPY+0x1b8>)
 80018b2:	f000 f903 	bl	8001abc <MahonyAHRSupdateIMU>
	  Quaternion_Update(&q);	//10us
 80018b6:	4815      	ldr	r0, [pc, #84]	; (800190c <GetRPY+0x1e4>)
 80018b8:	f000 f82a 	bl	8001910 <Quaternion_Update>

//		  printf("%.2f\n",(sampleFreq[0]));
//		  printf("%.d %.d %.d\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
//		  printf("%.1f %.1f %.1f\n", GYROX_RATE, GYROY_RATE, GYROZ_RATE);
//		  printf("%.1f %.1f %.1f\n", ACCX_RATE, ACCY_RATE, ACCZ_RATE);
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	f3af 8000 	nop.w
 80018c8:	65d9bd65 	.word	0x65d9bd65
 80018cc:	3f91df46 	.word	0x3f91df46
 80018d0:	20000290 	.word	0x20000290
 80018d4:	20000288 	.word	0x20000288
 80018d8:	20000224 	.word	0x20000224
 80018dc:	3faf4000 	.word	0x3faf4000
 80018e0:	2000020c 	.word	0x2000020c
 80018e4:	20000228 	.word	0x20000228
 80018e8:	20000210 	.word	0x20000210
 80018ec:	2000022c 	.word	0x2000022c
 80018f0:	20000214 	.word	0x20000214
 80018f4:	20000230 	.word	0x20000230
 80018f8:	3a000000 	.word	0x3a000000
 80018fc:	20000218 	.word	0x20000218
 8001900:	20000234 	.word	0x20000234
 8001904:	2000021c 	.word	0x2000021c
 8001908:	20000220 	.word	0x20000220
 800190c:	20000000 	.word	0x20000000

08001910 <Quaternion_Update>:

void Quaternion_Update(float* q)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;

	q1 = q[0]; //x
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	617b      	str	r3, [r7, #20]
	q2 = q[1]; //y
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	613b      	str	r3, [r7, #16]
	q3 = q[2]; //z
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	60fb      	str	r3, [r7, #12]
	q4 = q[3]; //w
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	60bb      	str	r3, [r7, #8]


	Yaw 	= -atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8001930:	ed97 7a04 	vldr	s14, [r7, #16]
 8001934:	edd7 7a03 	vldr	s15, [r7, #12]
 8001938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800193c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001940:	edd7 7a02 	vldr	s15, [r7, #8]
 8001944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800194c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001950:	edd7 7a05 	vldr	s15, [r7, #20]
 8001954:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001958:	edd7 7a04 	vldr	s15, [r7, #16]
 800195c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001960:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001964:	edd7 7a03 	vldr	s15, [r7, #12]
 8001968:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800196c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001970:	edd7 7a02 	vldr	s15, [r7, #8]
 8001974:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197c:	eef0 0a67 	vmov.f32	s1, s15
 8001980:	eeb0 0a66 	vmov.f32	s0, s13
 8001984:	f008 fd34 	bl	800a3f0 <atan2f>
 8001988:	eef0 7a40 	vmov.f32	s15, s0
 800198c:	eef1 7a67 	vneg.f32	s15, s15
 8001990:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <Quaternion_Update+0x198>)
 8001992:	edc3 7a00 	vstr	s15, [r3]
	Pitch  	= -asinf(2.0f * (q2*q4 - q1*q3));
 8001996:	ed97 7a04 	vldr	s14, [r7, #16]
 800199a:	edd7 7a02 	vldr	s15, [r7, #8]
 800199e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a2:	edd7 6a05 	vldr	s13, [r7, #20]
 80019a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80019aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019b6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ba:	f008 fced 	bl	800a398 <asinf>
 80019be:	eef0 7a40 	vmov.f32	s15, s0
 80019c2:	eef1 7a67 	vneg.f32	s15, s15
 80019c6:	4b39      	ldr	r3, [pc, #228]	; (8001aac <Quaternion_Update+0x19c>)
 80019c8:	edc3 7a00 	vstr	s15, [r3]
	Roll   	= atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 80019cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80019d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80019d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d8:	edd7 6a03 	vldr	s13, [r7, #12]
 80019dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80019f0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80019f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a00:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a18:	eef0 0a67 	vmov.f32	s1, s15
 8001a1c:	eeb0 0a66 	vmov.f32	s0, s13
 8001a20:	f008 fce6 	bl	800a3f0 <atan2f>
 8001a24:	eef0 7a40 	vmov.f32	s15, s0
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <Quaternion_Update+0x1a0>)
 8001a2a:	edc3 7a00 	vstr	s15, [r3]

	Pitch *= RAD2DEG;
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <Quaternion_Update+0x19c>)
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001ab4 <Quaternion_Update+0x1a4>
 8001a38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <Quaternion_Update+0x19c>)
 8001a3e:	edc3 7a00 	vstr	s15, [r3]
	Roll  *= RAD2DEG;
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <Quaternion_Update+0x1a0>)
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001ab4 <Quaternion_Update+0x1a4>
 8001a4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <Quaternion_Update+0x1a0>)
 8001a52:	edc3 7a00 	vstr	s15, [r3]
	Yaw   *= RAD2DEG;
 8001a56:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001ab4 <Quaternion_Update+0x1a4>
 8001a60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a64:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a66:	edc3 7a00 	vstr	s15, [r3]
	
	if(Yaw>=0)
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a6c:	edd3 7a00 	vldr	s15, [r3]
 8001a70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a78:	db0a      	blt.n	8001a90 <Quaternion_Update+0x180>
		Yaw = 360.f - Yaw;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001ab8 <Quaternion_Update+0x1a8>
 8001a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a8a:	edc3 7a00 	vstr	s15, [r3]
	
//	 printf("%d %d %d\n", (int)(Roll), (int)(Pitch), (int)(Yaw));
//	 printf("%d %d %d\n", (int)(q[0]*100), (int)(q[1]*100),(int)(q[2]*100));


}
 8001a8e:	e007      	b.n	8001aa0 <Quaternion_Update+0x190>
		Yaw = -Yaw;
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	eef1 7a67 	vneg.f32	s15, s15
 8001a9a:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a9c:	edc3 7a00 	vstr	s15, [r3]
}
 8001aa0:	bf00      	nop
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	200002b0 	.word	0x200002b0
 8001aac:	200002b8 	.word	0x200002b8
 8001ab0:	200002b4 	.word	0x200002b4
 8001ab4:	42652ee1 	.word	0x42652ee1
 8001ab8:	43b40000 	.word	0x43b40000

08001abc <MahonyAHRSupdateIMU>:
    q[2] = q3 * norm;
    q[3] = q4 * norm;
}


void MahonyAHRSupdateIMU(float* gx, float* gy, float* gz, float* ax, float* ay, float* az, float sampleFreq) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b090      	sub	sp, #64	; 0x40
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6178      	str	r0, [r7, #20]
 8001ac4:	6139      	str	r1, [r7, #16]
 8001ac6:	60fa      	str	r2, [r7, #12]
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	ed87 0a01 	vstr	s0, [r7, #4]
  float halfvx, halfvy, halfvz;
  float halfex, halfey, halfez;
  float qa, qb, qc;

  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if(!((ax[0] == 0.0f) && (ay[0] == 0.0f) && (az[0] == 0.0f))) {
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001adc:	d110      	bne.n	8001b00 <MahonyAHRSupdateIMU+0x44>
 8001ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aec:	d108      	bne.n	8001b00 <MahonyAHRSupdateIMU+0x44>
 8001aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afc:	f000 8175 	beq.w	8001dea <MahonyAHRSupdateIMU+0x32e>

    // Normalise accelerometer measurement
    norm = sqrt(ax[0] * ax[0] + ay[0] * ay[0] + az[0] * az[0]);
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	ed93 7a00 	vldr	s14, [r3]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b12:	edd3 6a00 	vldr	s13, [r3]
 8001b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b26:	edd3 6a00 	vldr	s13, [r3]
 8001b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b38:	ee17 0a90 	vmov	r0, s15
 8001b3c:	f7fe fd04 	bl	8000548 <__aeabi_f2d>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	ec43 2b10 	vmov	d0, r2, r3
 8001b48:	f008 fbfa 	bl	800a340 <sqrt>
 8001b4c:	ec53 2b10 	vmov	r2, r3, d0
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	f7ff f828 	bl	8000ba8 <__aeabi_d2f>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    ax[0] /= norm;
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	edd3 6a00 	vldr	s13, [r3]
 8001b62:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	edc3 7a00 	vstr	s15, [r3]
    ay[0] /= norm;
 8001b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b72:	edd3 6a00 	vldr	s13, [r3]
 8001b76:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b80:	edc3 7a00 	vstr	s15, [r3]
    az[0] /= norm;
 8001b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b86:	edd3 6a00 	vldr	s13, [r3]
 8001b8a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b94:	edc3 7a00 	vstr	s15, [r3]

    // Estimated direction of gravity and vector perpendicular to magnetic flux
    halfvx = q[1] * q[3] - q[0] * q[2];
 8001b98:	4b72      	ldr	r3, [pc, #456]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001b9a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b9e:	4b71      	ldr	r3, [pc, #452]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001ba0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba8:	4b6e      	ldr	r3, [pc, #440]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001baa:	edd3 6a00 	vldr	s13, [r3]
 8001bae:	4b6d      	ldr	r3, [pc, #436]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bbc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    halfvy = q[0] * q[1] + q[2] * q[3];
 8001bc0:	4b68      	ldr	r3, [pc, #416]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bc2:	ed93 7a00 	vldr	s14, [r3]
 8001bc6:	4b67      	ldr	r3, [pc, #412]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd0:	4b64      	ldr	r3, [pc, #400]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bd2:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bd6:	4b63      	ldr	r3, [pc, #396]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bd8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8001be8:	4b5e      	ldr	r3, [pc, #376]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bea:	ed93 7a00 	vldr	s14, [r3]
 8001bee:	4b5d      	ldr	r3, [pc, #372]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bf0:	edd3 7a00 	vldr	s15, [r3]
 8001bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001bfc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c00:	4b58      	ldr	r3, [pc, #352]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001c02:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c06:	4b57      	ldr	r3, [pc, #348]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001c08:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c14:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    // Error is sum of cross product between estimated and measured direction of gravity
    halfex = (ay[0] * halfvz - az[0] * halfvy);
 8001c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c1a:	ed93 7a00 	vldr	s14, [r3]
 8001c1e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001c22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c28:	edd3 6a00 	vldr	s13, [r3]
 8001c2c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c38:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    halfey = (az[0] * halfvx - ax[0] * halfvz);
 8001c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c3e:	ed93 7a00 	vldr	s14, [r3]
 8001c42:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	edd3 6a00 	vldr	s13, [r3]
 8001c50:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001c54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c5c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    halfez = (ax[0] * halfvy - ay[0] * halfvx);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	ed93 7a00 	vldr	s14, [r3]
 8001c66:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c70:	edd3 6a00 	vldr	s13, [r3]
 8001c74:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // Compute and apply integral feedback if enabled
    if(twoKi > 0.0f) {
 8001c84:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <MahonyAHRSupdateIMU+0x2ac>)
 8001c86:	edd3 7a00 	vldr	s15, [r3]
 8001c8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	dd71      	ble.n	8001d78 <MahonyAHRSupdateIMU+0x2bc>
      integralFBx += twoKi * halfex * (1.0f / sampleFreq);  // integral error scaled by Ki
 8001c94:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <MahonyAHRSupdateIMU+0x2ac>)
 8001c96:	ed93 7a00 	vldr	s14, [r3]
 8001c9a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ca2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001ca6:	edd7 6a01 	vldr	s13, [r7, #4]
 8001caa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001cae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb2:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <MahonyAHRSupdateIMU+0x2b0>)
 8001cb4:	edd3 7a00 	vldr	s15, [r3]
 8001cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <MahonyAHRSupdateIMU+0x2b0>)
 8001cbe:	edc3 7a00 	vstr	s15, [r3]
      integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 8001cc2:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <MahonyAHRSupdateIMU+0x2ac>)
 8001cc4:	ed93 7a00 	vldr	s14, [r3]
 8001cc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ccc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001cd4:	edd7 6a01 	vldr	s13, [r7, #4]
 8001cd8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce0:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <MahonyAHRSupdateIMU+0x2b4>)
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cea:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <MahonyAHRSupdateIMU+0x2b4>)
 8001cec:	edc3 7a00 	vstr	s15, [r3]
      integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <MahonyAHRSupdateIMU+0x2ac>)
 8001cf2:	ed93 7a00 	vldr	s14, [r3]
 8001cf6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cfe:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001d02:	edd7 6a01 	vldr	s13, [r7, #4]
 8001d06:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001d0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <MahonyAHRSupdateIMU+0x2b8>)
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d18:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <MahonyAHRSupdateIMU+0x2b8>)
 8001d1a:	edc3 7a00 	vstr	s15, [r3]
      gx[0] += integralFBx;  // apply integral feedback
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	ed93 7a00 	vldr	s14, [r3]
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MahonyAHRSupdateIMU+0x2b0>)
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	edc3 7a00 	vstr	s15, [r3]
      gy[0] += integralFBy;
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	ed93 7a00 	vldr	s14, [r3]
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <MahonyAHRSupdateIMU+0x2b4>)
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	edc3 7a00 	vstr	s15, [r3]
      gz[0] += integralFBz;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	ed93 7a00 	vldr	s14, [r3]
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <MahonyAHRSupdateIMU+0x2b8>)
 8001d52:	edd3 7a00 	vldr	s15, [r3]
 8001d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	edc3 7a00 	vstr	s15, [r3]
 8001d60:	e016      	b.n	8001d90 <MahonyAHRSupdateIMU+0x2d4>
 8001d62:	bf00      	nop
 8001d64:	20000000 	.word	0x20000000
 8001d68:	20000238 	.word	0x20000238
 8001d6c:	2000023c 	.word	0x2000023c
 8001d70:	20000240 	.word	0x20000240
 8001d74:	20000244 	.word	0x20000244
    }
    else {
      integralFBx = 0.0f; // prevent integral windup
 8001d78:	4bb2      	ldr	r3, [pc, #712]	; (8002044 <MahonyAHRSupdateIMU+0x588>)
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
      integralFBy = 0.0f;
 8001d80:	4bb1      	ldr	r3, [pc, #708]	; (8002048 <MahonyAHRSupdateIMU+0x58c>)
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
      integralFBz = 0.0f;
 8001d88:	4bb0      	ldr	r3, [pc, #704]	; (800204c <MahonyAHRSupdateIMU+0x590>)
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
    }

    // Apply proportional feedback
    gx[0] += twoKp * halfex;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	ed93 7a00 	vldr	s14, [r3]
 8001d96:	4bae      	ldr	r3, [pc, #696]	; (8002050 <MahonyAHRSupdateIMU+0x594>)
 8001d98:	edd3 6a00 	vldr	s13, [r3]
 8001d9c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	edc3 7a00 	vstr	s15, [r3]
    gy[0] += twoKp * halfey;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	ed93 7a00 	vldr	s14, [r3]
 8001db4:	4ba6      	ldr	r3, [pc, #664]	; (8002050 <MahonyAHRSupdateIMU+0x594>)
 8001db6:	edd3 6a00 	vldr	s13, [r3]
 8001dba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001dbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	edc3 7a00 	vstr	s15, [r3]
    gz[0] += twoKp * halfez;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	ed93 7a00 	vldr	s14, [r3]
 8001dd2:	4b9f      	ldr	r3, [pc, #636]	; (8002050 <MahonyAHRSupdateIMU+0x594>)
 8001dd4:	edd3 6a00 	vldr	s13, [r3]
 8001dd8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ddc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	edc3 7a00 	vstr	s15, [r3]
  }

  // Integrate rate of change of quaternion
  gx[0] *= (0.5f * (1.0f / sampleFreq));   // pre-multiply common factors
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	ed93 7a00 	vldr	s14, [r3]
 8001df0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001df4:	edd7 6a01 	vldr	s13, [r7, #4]
 8001df8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001dfc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001e00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	edc3 7a00 	vstr	s15, [r3]
  gy[0] *= (0.5f * (1.0f / sampleFreq));
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	ed93 7a00 	vldr	s14, [r3]
 8001e14:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001e18:	edd7 6a01 	vldr	s13, [r7, #4]
 8001e1c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e20:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001e24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	edc3 7a00 	vstr	s15, [r3]
  gz[0] *= (0.5f * (1.0f / sampleFreq));
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	ed93 7a00 	vldr	s14, [r3]
 8001e38:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001e3c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001e40:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e44:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001e48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	edc3 7a00 	vstr	s15, [r3]
  qa = q[0];
 8001e56:	4b7f      	ldr	r3, [pc, #508]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	623b      	str	r3, [r7, #32]
  qb = q[1];
 8001e5c:	4b7d      	ldr	r3, [pc, #500]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	61fb      	str	r3, [r7, #28]
  qc = q[2];
 8001e62:	4b7c      	ldr	r3, [pc, #496]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	61bb      	str	r3, [r7, #24]
  q[0] += (-qb * gx[0] - qc * gy[0] - q[3] * gz[0]);
 8001e68:	4b7a      	ldr	r3, [pc, #488]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001e6a:	ed93 7a00 	vldr	s14, [r3]
 8001e6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e72:	eef1 6a67 	vneg.f32	s13, s15
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	ed93 6a00 	vldr	s12, [r3]
 8001e86:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e8e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e92:	4b70      	ldr	r3, [pc, #448]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001e94:	ed93 6a03 	vldr	s12, [r3, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ea2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eaa:	4b6a      	ldr	r3, [pc, #424]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001eac:	edc3 7a00 	vstr	s15, [r3]
  q[1] += (qa * gx[0] + qc * gz[0] - q[3] * gy[0]);
 8001eb0:	4b68      	ldr	r3, [pc, #416]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001eb2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	edd3 6a00 	vldr	s13, [r3]
 8001ebc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ec0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	ed93 6a00 	vldr	s12, [r3]
 8001eca:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ece:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ed2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ed6:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001ed8:	ed93 6a03 	vldr	s12, [r3, #12]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	edd3 7a00 	vldr	s15, [r3]
 8001ee2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ee6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eee:	4b59      	ldr	r3, [pc, #356]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001ef0:	edc3 7a01 	vstr	s15, [r3, #4]
  q[2] += (qa * gy[0] - qb * gz[0] + q[3] * gx[0]);
 8001ef4:	4b57      	ldr	r3, [pc, #348]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001ef6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	edd3 6a00 	vldr	s13, [r3]
 8001f00:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	ed93 6a00 	vldr	s12, [r3]
 8001f0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f16:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f1a:	4b4e      	ldr	r3, [pc, #312]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f1c:	ed93 6a03 	vldr	s12, [r3, #12]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f32:	4b48      	ldr	r3, [pc, #288]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f34:	edc3 7a02 	vstr	s15, [r3, #8]
  q[3] += (qa * gz[0] + qb * gy[0] - qc * gx[0]);
 8001f38:	4b46      	ldr	r3, [pc, #280]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f3a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	edd3 6a00 	vldr	s13, [r3]
 8001f44:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	ed93 6a00 	vldr	s12, [r3]
 8001f52:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f5a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	ed93 6a00 	vldr	s12, [r3]
 8001f64:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f6c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f74:	4b37      	ldr	r3, [pc, #220]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f76:	edc3 7a03 	vstr	s15, [r3, #12]

  // Normalise quaternion
  norm = sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8001f7a:	4b36      	ldr	r3, [pc, #216]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f7c:	ed93 7a00 	vldr	s14, [r3]
 8001f80:	4b34      	ldr	r3, [pc, #208]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f82:	edd3 7a00 	vldr	s15, [r3]
 8001f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f8a:	4b32      	ldr	r3, [pc, #200]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f8c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f90:	4b30      	ldr	r3, [pc, #192]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f92:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f9e:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001fa0:	edd3 6a02 	vldr	s13, [r3, #8]
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001fa6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001faa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fb2:	4b28      	ldr	r3, [pc, #160]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001fb4:	edd3 6a03 	vldr	s13, [r3, #12]
 8001fb8:	4b26      	ldr	r3, [pc, #152]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001fba:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc6:	ee17 0a90 	vmov	r0, s15
 8001fca:	f7fe fabd 	bl	8000548 <__aeabi_f2d>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	ec43 2b10 	vmov	d0, r2, r3
 8001fd6:	f008 f9b3 	bl	800a340 <sqrt>
 8001fda:	ec53 2b10 	vmov	r2, r3, d0
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f7fe fde1 	bl	8000ba8 <__aeabi_d2f>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  q[0] /= norm;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001fec:	edd3 6a00 	vldr	s13, [r3]
 8001ff0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001ffa:	edc3 7a00 	vstr	s15, [r3]
  q[1] /= norm;
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8002000:	edd3 6a01 	vldr	s13, [r3, #4]
 8002004:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 800200e:	edc3 7a01 	vstr	s15, [r3, #4]
  q[2] /= norm;
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8002014:	edd3 6a02 	vldr	s13, [r3, #8]
 8002018:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800201c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8002022:	edc3 7a02 	vstr	s15, [r3, #8]
  q[3] /= norm;
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8002028:	edd3 6a03 	vldr	s13, [r3, #12]
 800202c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8002036:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800203a:	bf00      	nop
 800203c:	3740      	adds	r7, #64	; 0x40
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	2000023c 	.word	0x2000023c
 8002048:	20000240 	.word	0x20000240
 800204c:	20000244 	.word	0x20000244
 8002050:	20000010 	.word	0x20000010
 8002054:	20000000 	.word	0x20000000

08002058 <SBUS_Parsing>:

}


void SBUS_Parsing(SBUS_RAW_MESSAGE* raw, MSG_SBUS* msg_sbus, int* rx_recv_cnt, int* rx_err_cnt)
{
 8002058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800205a:	b093      	sub	sp, #76	; 0x4c
 800205c:	af08      	add	r7, sp, #32
 800205e:	6178      	str	r0, [r7, #20]
 8002060:	6139      	str	r1, [r7, #16]
 8002062:	60fa      	str	r2, [r7, #12]
 8002064:	60bb      	str	r3, [r7, #8]
	uint8_t* ptr = raw->rx_buf;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3308      	adds	r3, #8
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t temp;
	unsigned short msg_length = 0, checksum = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002070:	2300      	movs	r3, #0
 8002072:	843b      	strh	r3, [r7, #32]
	unsigned char classID = 0, messageID = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	77fb      	strb	r3, [r7, #31]
 8002078:	2300      	movs	r3, #0
 800207a:	77bb      	strb	r3, [r7, #30]
	if(ptr[0]==MSG_SBUS_SOF ){
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b0f      	cmp	r3, #15
 8002082:	f040 819e 	bne.w	80023c2 <SBUS_Parsing+0x36a>
		msg_sbus->header = ptr[0];
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	701a      	strb	r2, [r3, #0]
	       msg_sbus->rx_channel[0]   = (int16_t)(ptr[1] | ((ptr[2] << 8) & 0x07FF));
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	3301      	adds	r3, #1
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b21a      	sxth	r2, r3
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	3302      	adds	r3, #2
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	b21b      	sxth	r3, r3
 80020a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b21a      	sxth	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	805a      	strh	r2, [r3, #2]
	        msg_sbus->rx_channel[1]  = (int16_t)((ptr[2] >> 3) | ((ptr[3] << 5) & 0x07FF));
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	3302      	adds	r3, #2
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	b21a      	sxth	r2, r3
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	3303      	adds	r3, #3
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	015b      	lsls	r3, r3, #5
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	4313      	orrs	r3, r2
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	809a      	strh	r2, [r3, #4]
	        msg_sbus->rx_channel[2]  = (int16_t)((ptr[3] >> 6) | (ptr[4] << 2) | ((ptr[5] << 10) & 0x07FF));
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	3303      	adds	r3, #3
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	099b      	lsrs	r3, r3, #6
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	b21a      	sxth	r2, r3
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	3304      	adds	r3, #4
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	4313      	orrs	r3, r2
 80020ea:	b21a      	sxth	r2, r3
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	3305      	adds	r3, #5
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	029b      	lsls	r3, r3, #10
 80020f4:	b21b      	sxth	r3, r3
 80020f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020fa:	b21b      	sxth	r3, r3
 80020fc:	4313      	orrs	r3, r2
 80020fe:	b21a      	sxth	r2, r3
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	80da      	strh	r2, [r3, #6]
	        msg_sbus->rx_channel[3]  = (int16_t)((ptr[5] >> 1) | ((ptr[6] << 7) & 0x07FF));
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	3305      	adds	r3, #5
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	b21a      	sxth	r2, r3
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	3306      	adds	r3, #6
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	01db      	lsls	r3, r3, #7
 8002118:	b21b      	sxth	r3, r3
 800211a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800211e:	b21b      	sxth	r3, r3
 8002120:	4313      	orrs	r3, r2
 8002122:	b21a      	sxth	r2, r3
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	811a      	strh	r2, [r3, #8]
	        msg_sbus->rx_channel[4]  = (int16_t)((ptr[6] >> 4) | ((ptr[7] << 4) & 0x07FF));
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	3306      	adds	r3, #6
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	b2db      	uxtb	r3, r3
 8002132:	b21a      	sxth	r2, r3
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	3307      	adds	r3, #7
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	b21b      	sxth	r3, r3
 800213e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002142:	b21b      	sxth	r3, r3
 8002144:	4313      	orrs	r3, r2
 8002146:	b21a      	sxth	r2, r3
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	815a      	strh	r2, [r3, #10]
	        msg_sbus->rx_channel[5]  = (int16_t)((ptr[7] >> 7) | (ptr[8] << 1) | ((ptr[9] << 9) & 0x07FF));
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	3307      	adds	r3, #7
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	09db      	lsrs	r3, r3, #7
 8002154:	b2db      	uxtb	r3, r3
 8002156:	b21a      	sxth	r2, r3
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	3308      	adds	r3, #8
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	b21b      	sxth	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b21a      	sxth	r2, r3
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	3309      	adds	r3, #9
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	025b      	lsls	r3, r3, #9
 800216e:	b21b      	sxth	r3, r3
 8002170:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002174:	b21b      	sxth	r3, r3
 8002176:	4313      	orrs	r3, r2
 8002178:	b21a      	sxth	r2, r3
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	819a      	strh	r2, [r3, #12]
	        msg_sbus->rx_channel[6]  = (int16_t)((ptr[9] >> 2) | ((ptr[10] << 6) & 0x07FF));
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	3309      	adds	r3, #9
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	b2db      	uxtb	r3, r3
 8002188:	b21a      	sxth	r2, r3
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	330a      	adds	r3, #10
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	019b      	lsls	r3, r3, #6
 8002192:	b21b      	sxth	r3, r3
 8002194:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002198:	b21b      	sxth	r3, r3
 800219a:	4313      	orrs	r3, r2
 800219c:	b21a      	sxth	r2, r3
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	81da      	strh	r2, [r3, #14]
	        msg_sbus->rx_channel[7]  = (int16_t)((ptr[10] >> 5) | ((ptr[11] << 3) & 0x07FF));
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	330a      	adds	r3, #10
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	b21a      	sxth	r2, r3
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	330b      	adds	r3, #11
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021bc:	b21b      	sxth	r3, r3
 80021be:	4313      	orrs	r3, r2
 80021c0:	b21a      	sxth	r2, r3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	821a      	strh	r2, [r3, #16]
	        msg_sbus->rx_channel[8]  = (int16_t)(ptr[12] | ((ptr[13] << 8) & 0x07FF));
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	330c      	adds	r3, #12
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b21a      	sxth	r2, r3
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	330d      	adds	r3, #13
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021dc:	b21b      	sxth	r3, r3
 80021de:	4313      	orrs	r3, r2
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	825a      	strh	r2, [r3, #18]
	        msg_sbus->rx_channel[9]  = (int16_t)((ptr[13] >> 3) | ((ptr[14] << 5) & 0x07FF));
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	330d      	adds	r3, #13
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	08db      	lsrs	r3, r3, #3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	b21a      	sxth	r2, r3
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	330e      	adds	r3, #14
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	015b      	lsls	r3, r3, #5
 80021fa:	b21b      	sxth	r3, r3
 80021fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002200:	b21b      	sxth	r3, r3
 8002202:	4313      	orrs	r3, r2
 8002204:	b21a      	sxth	r2, r3
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	829a      	strh	r2, [r3, #20]
	        msg_sbus->rx_channel[10] = (int16_t)((ptr[14] >> 6) | (ptr[15] << 2) |((ptr[16] << 10) & 0x07FF));
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	330e      	adds	r3, #14
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	099b      	lsrs	r3, r3, #6
 8002212:	b2db      	uxtb	r3, r3
 8002214:	b21a      	sxth	r2, r3
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	330f      	adds	r3, #15
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	b21b      	sxth	r3, r3
 8002220:	4313      	orrs	r3, r2
 8002222:	b21a      	sxth	r2, r3
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	3310      	adds	r3, #16
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	029b      	lsls	r3, r3, #10
 800222c:	b21b      	sxth	r3, r3
 800222e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002232:	b21b      	sxth	r3, r3
 8002234:	4313      	orrs	r3, r2
 8002236:	b21a      	sxth	r2, r3
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	82da      	strh	r2, [r3, #22]
	        msg_sbus->rx_channel[11] = (int16_t)((ptr[16] >> 1) | ((ptr[17] << 7) & 0x07FF));
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	3310      	adds	r3, #16
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	085b      	lsrs	r3, r3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	b21a      	sxth	r2, r3
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	3311      	adds	r3, #17
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	01db      	lsls	r3, r3, #7
 8002250:	b21b      	sxth	r3, r3
 8002252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002256:	b21b      	sxth	r3, r3
 8002258:	4313      	orrs	r3, r2
 800225a:	b21a      	sxth	r2, r3
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	831a      	strh	r2, [r3, #24]
	        msg_sbus->rx_channel[12] = (int16_t)((ptr[17] >> 4) | ((ptr[18] << 4) & 0x07FF));
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	3311      	adds	r3, #17
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	b2db      	uxtb	r3, r3
 800226a:	b21a      	sxth	r2, r3
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	3312      	adds	r3, #18
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	b21b      	sxth	r3, r3
 8002276:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800227a:	b21b      	sxth	r3, r3
 800227c:	4313      	orrs	r3, r2
 800227e:	b21a      	sxth	r2, r3
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	835a      	strh	r2, [r3, #26]
	        msg_sbus->rx_channel[13] = (int16_t)((ptr[18] >> 7) | (ptr[19] << 1) | ((ptr[20] << 9) & 0x07FF));
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	3312      	adds	r3, #18
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	09db      	lsrs	r3, r3, #7
 800228c:	b2db      	uxtb	r3, r3
 800228e:	b21a      	sxth	r2, r3
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	3313      	adds	r3, #19
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	b21b      	sxth	r3, r3
 800229a:	4313      	orrs	r3, r2
 800229c:	b21a      	sxth	r2, r3
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	3314      	adds	r3, #20
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	025b      	lsls	r3, r3, #9
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ac:	b21b      	sxth	r3, r3
 80022ae:	4313      	orrs	r3, r2
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	839a      	strh	r2, [r3, #28]
	        msg_sbus->rx_channel[14] = (int16_t)((ptr[20] >> 2) | ((ptr[21] << 6) & 0x07FF));
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	3314      	adds	r3, #20
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	089b      	lsrs	r3, r3, #2
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	b21a      	sxth	r2, r3
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	3315      	adds	r3, #21
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	019b      	lsls	r3, r3, #6
 80022ca:	b21b      	sxth	r3, r3
 80022cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	4313      	orrs	r3, r2
 80022d4:	b21a      	sxth	r2, r3
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	83da      	strh	r2, [r3, #30]
	        msg_sbus->rx_channel[15] = (int16_t)((ptr[21] >> 5) | ((ptr[22] << 3) & 0x07FF));
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	3315      	adds	r3, #21
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	b21a      	sxth	r2, r3
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	3316      	adds	r3, #22
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	b21b      	sxth	r3, r3
 80022f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022f4:	b21b      	sxth	r3, r3
 80022f6:	4313      	orrs	r3, r2
 80022f8:	b21a      	sxth	r2, r3
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	841a      	strh	r2, [r3, #32]
	        msg_sbus->rx_channel17 	= ptr[23] & MSG_SBUS_CH17_BIT_MASK;
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	3317      	adds	r3, #23
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	b2da      	uxtb	r2, r3
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	        msg_sbus->rx_channel18 	= ptr[23] & MSG_SBUS_CH18_BIT_MASK;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	3317      	adds	r3, #23
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	b2da      	uxtb	r2, r3
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	        msg_sbus->frame_lost 	= ptr[23] & MSG_SBUS_FL_BIT_MASK;
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	3317      	adds	r3, #23
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	b2da      	uxtb	r2, r3
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	        msg_sbus->failsafe 		= ptr[23] & MSG_SBUS_FS_BIT_MASK;
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	3317      	adds	r3, #23
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	b2da      	uxtb	r2, r3
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25


		rx_recv_cnt[0]++;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	601a      	str	r2, [r3, #0]

		printf("cnt: %d\t ch[1]:%d\t ch[2]:%d\t ch[3]:%d\t ch[4]:%d\t ch[5]:%d\t ch[6]:%d\t ch[7]:%d\t ch[8]:%d\t FL:%d FS:%d\n",rx_recv_cnt[0], msg_sbus->rx_channel[0],msg_sbus->rx_channel[1],msg_sbus->rx_channel[2],msg_sbus->rx_channel[3],msg_sbus->rx_channel[4],msg_sbus->rx_channel[5],msg_sbus->rx_channel[6],msg_sbus->rx_channel[7], msg_sbus->frame_lost, msg_sbus->failsafe);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6819      	ldr	r1, [r3, #0]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800235a:	469c      	mov	ip, r3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002362:	469e      	mov	lr, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800236a:	461a      	mov	r2, r3
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002372:	4618      	mov	r0, r3
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800237a:	461c      	mov	r4, r3
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002382:	461d      	mov	r5, r3
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800238a:	461e      	mov	r6, r3
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023a2:	9307      	str	r3, [sp, #28]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	9306      	str	r3, [sp, #24]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	9305      	str	r3, [sp, #20]
 80023ac:	9604      	str	r6, [sp, #16]
 80023ae:	9503      	str	r5, [sp, #12]
 80023b0:	9402      	str	r4, [sp, #8]
 80023b2:	9001      	str	r0, [sp, #4]
 80023b4:	9200      	str	r2, [sp, #0]
 80023b6:	4673      	mov	r3, lr
 80023b8:	4662      	mov	r2, ip
 80023ba:	4806      	ldr	r0, [pc, #24]	; (80023d4 <SBUS_Parsing+0x37c>)
 80023bc:	f005 fe96 	bl	80080ec <iprintf>
	{
		rx_err_cnt[0]++;
	}
//	printf("recv: %d\t err: %d\n", rx_recv_cnt[0], rx_err_cnt[0]);

}
 80023c0:	e004      	b.n	80023cc <SBUS_Parsing+0x374>
		rx_err_cnt[0]++;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	601a      	str	r2, [r3, #0]
}
 80023cc:	bf00      	nop
 80023ce:	372c      	adds	r7, #44	; 0x2c
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d4:	0800aab0 	.word	0x0800aab0

080023d8 <LL_SPI_Enable>:
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	601a      	str	r2, [r3, #0]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_SPI_IsActiveFlag_RXNE>:
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <LL_SPI_IsActiveFlag_TXE>:
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b02      	cmp	r3, #2
 8002430:	d101      	bne.n	8002436 <LL_SPI_IsActiveFlag_TXE+0x18>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_SPI_ReceiveData8>:
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	330c      	adds	r3, #12
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	b2db      	uxtb	r3, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_SPI_TransmitData8>:
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	330c      	adds	r3, #12
 8002470:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	701a      	strb	r2, [r3, #0]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_GPIO_SetOutputPin>:
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	619a      	str	r2, [r3, #24]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_GPIO_ResetOutputPin>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	041a      	lsls	r2, r3, #16
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	619a      	str	r2, [r3, #24]
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <W25QXX_SPI_Initialization>:

w25qxx_t w25qxx;


void W25QXX_SPI_Initialization(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
	LL_SPI_Enable(W25QXX_SPI_CHANNEL);
 80024c4:	4805      	ldr	r0, [pc, #20]	; (80024dc <W25QXX_SPI_Initialization+0x1c>)
 80024c6:	f7ff ff87 	bl	80023d8 <LL_SPI_Enable>
	CHIP_DESELECT(W25QXX);
 80024ca:	2108      	movs	r1, #8
 80024cc:	4804      	ldr	r0, [pc, #16]	; (80024e0 <W25QXX_SPI_Initialization+0x20>)
 80024ce:	f7ff ffd9 	bl	8002484 <LL_GPIO_SetOutputPin>

	W25qxx_Init();
 80024d2:	f000 f925 	bl	8002720 <W25qxx_Init>

}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40003c00 	.word	0x40003c00
 80024e0:	40020400 	.word	0x40020400

080024e4 <W25qxx_Spi>:




unsigned char W25qxx_Spi(unsigned char data)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(W25QXX_SPI_CHANNEL)==RESET);
 80024ee:	bf00      	nop
 80024f0:	480c      	ldr	r0, [pc, #48]	; (8002524 <W25qxx_Spi+0x40>)
 80024f2:	f7ff ff94 	bl	800241e <LL_SPI_IsActiveFlag_TXE>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f9      	beq.n	80024f0 <W25qxx_Spi+0xc>
	LL_SPI_TransmitData8(W25QXX_SPI_CHANNEL, data);
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	4619      	mov	r1, r3
 8002500:	4808      	ldr	r0, [pc, #32]	; (8002524 <W25qxx_Spi+0x40>)
 8002502:	f7ff ffad 	bl	8002460 <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXNE(W25QXX_SPI_CHANNEL)==RESET);
 8002506:	bf00      	nop
 8002508:	4806      	ldr	r0, [pc, #24]	; (8002524 <W25qxx_Spi+0x40>)
 800250a:	f7ff ff75 	bl	80023f8 <LL_SPI_IsActiveFlag_RXNE>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f9      	beq.n	8002508 <W25qxx_Spi+0x24>
	return LL_SPI_ReceiveData8(W25QXX_SPI_CHANNEL);
 8002514:	4803      	ldr	r0, [pc, #12]	; (8002524 <W25qxx_Spi+0x40>)
 8002516:	f7ff ff95 	bl	8002444 <LL_SPI_ReceiveData8>
 800251a:	4603      	mov	r3, r0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40003c00 	.word	0x40003c00

08002528 <W25qxx_Spi_Receive>:


void W25qxx_Spi_Receive(unsigned char* data, unsigned int len)
{
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
	unsigned int i = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
	while(i<len) {
 8002536:	e01b      	b.n	8002570 <W25qxx_Spi_Receive+0x48>

		while(LL_SPI_IsActiveFlag_TXE(W25QXX_SPI_CHANNEL)==RESET);
 8002538:	bf00      	nop
 800253a:	4812      	ldr	r0, [pc, #72]	; (8002584 <W25qxx_Spi_Receive+0x5c>)
 800253c:	f7ff ff6f 	bl	800241e <LL_SPI_IsActiveFlag_TXE>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f9      	beq.n	800253a <W25qxx_Spi_Receive+0x12>
		LL_SPI_TransmitData8(W25QXX_SPI_CHANNEL, W25QXX_DUMMY_BYTE);
 8002546:	21a5      	movs	r1, #165	; 0xa5
 8002548:	480e      	ldr	r0, [pc, #56]	; (8002584 <W25qxx_Spi_Receive+0x5c>)
 800254a:	f7ff ff89 	bl	8002460 <LL_SPI_TransmitData8>

		while(LL_SPI_IsActiveFlag_RXNE(W25QXX_SPI_CHANNEL)==RESET);
 800254e:	bf00      	nop
 8002550:	480c      	ldr	r0, [pc, #48]	; (8002584 <W25qxx_Spi_Receive+0x5c>)
 8002552:	f7ff ff51 	bl	80023f8 <LL_SPI_IsActiveFlag_RXNE>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f9      	beq.n	8002550 <W25qxx_Spi_Receive+0x28>
		data[i++] = LL_SPI_ReceiveData8(W25QXX_SPI_CHANNEL);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	60fa      	str	r2, [r7, #12]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	18d4      	adds	r4, r2, r3
 8002566:	4807      	ldr	r0, [pc, #28]	; (8002584 <W25qxx_Spi_Receive+0x5c>)
 8002568:	f7ff ff6c 	bl	8002444 <LL_SPI_ReceiveData8>
 800256c:	4603      	mov	r3, r0
 800256e:	7023      	strb	r3, [r4, #0]
	while(i<len) {
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d3df      	bcc.n	8002538 <W25qxx_Spi_Receive+0x10>

	}
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	bd90      	pop	{r4, r7, pc}
 8002582:	bf00      	nop
 8002584:	40003c00 	.word	0x40003c00

08002588 <W25qxx_ReadID>:

//////////////////////////////////////////////////////////////


uint32_t W25qxx_ReadID(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	607b      	str	r3, [r7, #4]
	uint8_t pBuffer[3];

	CHIP_SELECT(W25QXX);
 8002592:	2108      	movs	r1, #8
 8002594:	480d      	ldr	r0, [pc, #52]	; (80025cc <W25qxx_ReadID+0x44>)
 8002596:	f7ff ff83 	bl	80024a0 <LL_GPIO_ResetOutputPin>
	W25qxx_Spi(REG_ADDR_JEDEC_ID);
 800259a:	209f      	movs	r0, #159	; 0x9f
 800259c:	f7ff ffa2 	bl	80024e4 <W25qxx_Spi>
	W25qxx_Spi_Receive(pBuffer,sizeof(pBuffer));
 80025a0:	463b      	mov	r3, r7
 80025a2:	2103      	movs	r1, #3
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ffbf 	bl	8002528 <W25qxx_Spi_Receive>
	CHIP_DESELECT(W25QXX);
 80025aa:	2108      	movs	r1, #8
 80025ac:	4807      	ldr	r0, [pc, #28]	; (80025cc <W25qxx_ReadID+0x44>)
 80025ae:	f7ff ff69 	bl	8002484 <LL_GPIO_SetOutputPin>
	Temp = (pBuffer[0] << 16) | (pBuffer[1] << 8) | pBuffer[2];
 80025b2:	783b      	ldrb	r3, [r7, #0]
 80025b4:	041a      	lsls	r2, r3, #16
 80025b6:	787b      	ldrb	r3, [r7, #1]
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	4313      	orrs	r3, r2
 80025bc:	78ba      	ldrb	r2, [r7, #2]
 80025be:	4313      	orrs	r3, r2
 80025c0:	607b      	str	r3, [r7, #4]
	return Temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40020400 	.word	0x40020400

080025d0 <W25qxx_ReadUniqID>:

void W25qxx_ReadUniqID(void)
{
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
	CHIP_SELECT(W25QXX);
 80025d6:	2108      	movs	r1, #8
 80025d8:	481e      	ldr	r0, [pc, #120]	; (8002654 <W25qxx_ReadUniqID+0x84>)
 80025da:	f7ff ff61 	bl	80024a0 <LL_GPIO_ResetOutputPin>
	W25qxx_Spi(REG_ADDR_UNIQUE_ID);
 80025de:	204b      	movs	r0, #75	; 0x4b
 80025e0:	f7ff ff80 	bl	80024e4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80025e4:	2300      	movs	r3, #0
 80025e6:	71fb      	strb	r3, [r7, #7]
 80025e8:	e005      	b.n	80025f6 <W25qxx_ReadUniqID+0x26>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80025ea:	20a5      	movs	r0, #165	; 0xa5
 80025ec:	f7ff ff7a 	bl	80024e4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	3301      	adds	r3, #1
 80025f4:	71fb      	strb	r3, [r7, #7]
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d9f6      	bls.n	80025ea <W25qxx_ReadUniqID+0x1a>
	for (uint8_t i = 0; i < 8; i++)
 80025fc:	2300      	movs	r3, #0
 80025fe:	71bb      	strb	r3, [r7, #6]
 8002600:	e00b      	b.n	800261a <W25qxx_ReadUniqID+0x4a>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002602:	79bc      	ldrb	r4, [r7, #6]
 8002604:	20a5      	movs	r0, #165	; 0xa5
 8002606:	f7ff ff6d 	bl	80024e4 <W25qxx_Spi>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <W25qxx_ReadUniqID+0x88>)
 8002610:	4423      	add	r3, r4
 8002612:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8002614:	79bb      	ldrb	r3, [r7, #6]
 8002616:	3301      	adds	r3, #1
 8002618:	71bb      	strb	r3, [r7, #6]
 800261a:	79bb      	ldrb	r3, [r7, #6]
 800261c:	2b07      	cmp	r3, #7
 800261e:	d9f0      	bls.n	8002602 <W25qxx_ReadUniqID+0x32>
	CHIP_DESELECT(W25QXX);
 8002620:	2108      	movs	r1, #8
 8002622:	480c      	ldr	r0, [pc, #48]	; (8002654 <W25qxx_ReadUniqID+0x84>)
 8002624:	f7ff ff2e 	bl	8002484 <LL_GPIO_SetOutputPin>

#if (_W25QXX_DEBUG == 1)
	for (uint8_t i = 0; i < 8; i++)
 8002628:	2300      	movs	r3, #0
 800262a:	717b      	strb	r3, [r7, #5]
 800262c:	e00a      	b.n	8002644 <W25qxx_ReadUniqID+0x74>
		printf("w25qxx UniqID:0x%X\r\n", w25qxx.UniqID[i]);
 800262e:	797b      	ldrb	r3, [r7, #5]
 8002630:	4a09      	ldr	r2, [pc, #36]	; (8002658 <W25qxx_ReadUniqID+0x88>)
 8002632:	4413      	add	r3, r2
 8002634:	785b      	ldrb	r3, [r3, #1]
 8002636:	4619      	mov	r1, r3
 8002638:	4808      	ldr	r0, [pc, #32]	; (800265c <W25qxx_ReadUniqID+0x8c>)
 800263a:	f005 fd57 	bl	80080ec <iprintf>
	for (uint8_t i = 0; i < 8; i++)
 800263e:	797b      	ldrb	r3, [r7, #5]
 8002640:	3301      	adds	r3, #1
 8002642:	717b      	strb	r3, [r7, #5]
 8002644:	797b      	ldrb	r3, [r7, #5]
 8002646:	2b07      	cmp	r3, #7
 8002648:	d9f1      	bls.n	800262e <W25qxx_ReadUniqID+0x5e>
#endif


}
 800264a:	bf00      	nop
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bd90      	pop	{r4, r7, pc}
 8002654:	40020400 	.word	0x40020400
 8002658:	200002bc 	.word	0x200002bc
 800265c:	0800ab18 	.word	0x0800ab18

08002660 <W25qxx_ReadStatusRegister>:




uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	73fb      	strb	r3, [r7, #15]
	CHIP_SELECT(W25QXX);
 800266e:	2108      	movs	r1, #8
 8002670:	4826      	ldr	r0, [pc, #152]	; (800270c <W25qxx_ReadStatusRegister+0xac>)
 8002672:	f7ff ff15 	bl	80024a0 <LL_GPIO_ResetOutputPin>
	if (SelectStatusRegister_1_2_3 == 1)
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d10c      	bne.n	8002696 <W25qxx_ReadStatusRegister+0x36>
	{
		W25qxx_Spi(REG_READ_STATUS_1);
 800267c:	2005      	movs	r0, #5
 800267e:	f7ff ff31 	bl	80024e4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002682:	20a5      	movs	r0, #165	; 0xa5
 8002684:	f7ff ff2e 	bl	80024e4 <W25qxx_Spi>
 8002688:	4603      	mov	r3, r0
 800268a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800268c:	4a20      	ldr	r2, [pc, #128]	; (8002710 <W25qxx_ReadStatusRegister+0xb0>)
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8002694:	e01b      	b.n	80026ce <W25qxx_ReadStatusRegister+0x6e>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d10c      	bne.n	80026b6 <W25qxx_ReadStatusRegister+0x56>
	{
		W25qxx_Spi(REG_READ_STATUS_2);
 800269c:	2035      	movs	r0, #53	; 0x35
 800269e:	f7ff ff21 	bl	80024e4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80026a2:	20a5      	movs	r0, #165	; 0xa5
 80026a4:	f7ff ff1e 	bl	80024e4 <W25qxx_Spi>
 80026a8:	4603      	mov	r3, r0
 80026aa:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80026ac:	4a18      	ldr	r2, [pc, #96]	; (8002710 <W25qxx_ReadStatusRegister+0xb0>)
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80026b4:	e00b      	b.n	80026ce <W25qxx_ReadStatusRegister+0x6e>
	}
	else
	{
		W25qxx_Spi(REG_READ_STATUS_3);
 80026b6:	2015      	movs	r0, #21
 80026b8:	f7ff ff14 	bl	80024e4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80026bc:	20a5      	movs	r0, #165	; 0xa5
 80026be:	f7ff ff11 	bl	80024e4 <W25qxx_Spi>
 80026c2:	4603      	mov	r3, r0
 80026c4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80026c6:	4a12      	ldr	r2, [pc, #72]	; (8002710 <W25qxx_ReadStatusRegister+0xb0>)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	CHIP_DESELECT(W25QXX);
 80026ce:	2108      	movs	r1, #8
 80026d0:	480e      	ldr	r0, [pc, #56]	; (800270c <W25qxx_ReadStatusRegister+0xac>)
 80026d2:	f7ff fed7 	bl	8002484 <LL_GPIO_SetOutputPin>

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx StatusRegister1:0x%X\r\n", w25qxx.StatusRegister1);
 80026d6:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <W25qxx_ReadStatusRegister+0xb0>)
 80026d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026dc:	4619      	mov	r1, r3
 80026de:	480d      	ldr	r0, [pc, #52]	; (8002714 <W25qxx_ReadStatusRegister+0xb4>)
 80026e0:	f005 fd04 	bl	80080ec <iprintf>
	printf("w25qxx StatusRegister2:0x%X\r\n", w25qxx.StatusRegister2);
 80026e4:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <W25qxx_ReadStatusRegister+0xb0>)
 80026e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026ea:	4619      	mov	r1, r3
 80026ec:	480a      	ldr	r0, [pc, #40]	; (8002718 <W25qxx_ReadStatusRegister+0xb8>)
 80026ee:	f005 fcfd 	bl	80080ec <iprintf>
	printf("w25qxx StatusRegister3:0x%X\r\n", w25qxx.StatusRegister3);
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <W25qxx_ReadStatusRegister+0xb0>)
 80026f4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80026f8:	4619      	mov	r1, r3
 80026fa:	4808      	ldr	r0, [pc, #32]	; (800271c <W25qxx_ReadStatusRegister+0xbc>)
 80026fc:	f005 fcf6 	bl	80080ec <iprintf>
#endif
	return status;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40020400 	.word	0x40020400
 8002710:	200002bc 	.word	0x200002bc
 8002714:	0800ab30 	.word	0x0800ab30
 8002718:	0800ab50 	.word	0x0800ab50
 800271c:	0800ab70 	.word	0x0800ab70

08002720 <W25qxx_Init>:
	CHIP_DESELECT(W25QXX);
}


bool W25qxx_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8002726:	4b87      	ldr	r3, [pc, #540]	; (8002944 <W25qxx_Init+0x224>)
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 800272e:	4886      	ldr	r0, [pc, #536]	; (8002948 <W25qxx_Init+0x228>)
 8002730:	f005 fd62 	bl	80081f8 <puts>
#endif
	id = W25qxx_ReadID();
 8002734:	f7ff ff28 	bl	8002588 <W25qxx_ReadID>
 8002738:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4883      	ldr	r0, [pc, #524]	; (800294c <W25qxx_Init+0x22c>)
 800273e:	f005 fcd5 	bl	80080ec <iprintf>
#endif
	switch (id & 0x000000FF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	3b11      	subs	r3, #17
 8002748:	2b0f      	cmp	r3, #15
 800274a:	f200 808a 	bhi.w	8002862 <W25qxx_Init+0x142>
 800274e:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <W25qxx_Init+0x34>)
 8002750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002754:	0800284f 	.word	0x0800284f
 8002758:	0800283b 	.word	0x0800283b
 800275c:	08002827 	.word	0x08002827
 8002760:	08002813 	.word	0x08002813
 8002764:	080027ff 	.word	0x080027ff
 8002768:	080027eb 	.word	0x080027eb
 800276c:	080027d7 	.word	0x080027d7
 8002770:	080027c1 	.word	0x080027c1
 8002774:	080027ab 	.word	0x080027ab
 8002778:	08002863 	.word	0x08002863
 800277c:	08002863 	.word	0x08002863
 8002780:	08002863 	.word	0x08002863
 8002784:	08002863 	.word	0x08002863
 8002788:	08002863 	.word	0x08002863
 800278c:	08002863 	.word	0x08002863
 8002790:	08002795 	.word	0x08002795
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8002794:	4b6b      	ldr	r3, [pc, #428]	; (8002944 <W25qxx_Init+0x224>)
 8002796:	220a      	movs	r2, #10
 8002798:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800279a:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <W25qxx_Init+0x224>)
 800279c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027a0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 80027a2:	486b      	ldr	r0, [pc, #428]	; (8002950 <W25qxx_Init+0x230>)
 80027a4:	f005 fd28 	bl	80081f8 <puts>
#endif
		break;
 80027a8:	e064      	b.n	8002874 <W25qxx_Init+0x154>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80027aa:	4b66      	ldr	r3, [pc, #408]	; (8002944 <W25qxx_Init+0x224>)
 80027ac:	2209      	movs	r2, #9
 80027ae:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80027b0:	4b64      	ldr	r3, [pc, #400]	; (8002944 <W25qxx_Init+0x224>)
 80027b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027b6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 80027b8:	4866      	ldr	r0, [pc, #408]	; (8002954 <W25qxx_Init+0x234>)
 80027ba:	f005 fd1d 	bl	80081f8 <puts>
#endif
		break;
 80027be:	e059      	b.n	8002874 <W25qxx_Init+0x154>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80027c0:	4b60      	ldr	r3, [pc, #384]	; (8002944 <W25qxx_Init+0x224>)
 80027c2:	2208      	movs	r2, #8
 80027c4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80027c6:	4b5f      	ldr	r3, [pc, #380]	; (8002944 <W25qxx_Init+0x224>)
 80027c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027cc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 80027ce:	4862      	ldr	r0, [pc, #392]	; (8002958 <W25qxx_Init+0x238>)
 80027d0:	f005 fd12 	bl	80081f8 <puts>
#endif
		break;
 80027d4:	e04e      	b.n	8002874 <W25qxx_Init+0x154>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80027d6:	4b5b      	ldr	r3, [pc, #364]	; (8002944 <W25qxx_Init+0x224>)
 80027d8:	2207      	movs	r2, #7
 80027da:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80027dc:	4b59      	ldr	r3, [pc, #356]	; (8002944 <W25qxx_Init+0x224>)
 80027de:	2280      	movs	r2, #128	; 0x80
 80027e0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 80027e2:	485e      	ldr	r0, [pc, #376]	; (800295c <W25qxx_Init+0x23c>)
 80027e4:	f005 fd08 	bl	80081f8 <puts>
#endif
		break;
 80027e8:	e044      	b.n	8002874 <W25qxx_Init+0x154>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80027ea:	4b56      	ldr	r3, [pc, #344]	; (8002944 <W25qxx_Init+0x224>)
 80027ec:	2206      	movs	r2, #6
 80027ee:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80027f0:	4b54      	ldr	r3, [pc, #336]	; (8002944 <W25qxx_Init+0x224>)
 80027f2:	2240      	movs	r2, #64	; 0x40
 80027f4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 80027f6:	485a      	ldr	r0, [pc, #360]	; (8002960 <W25qxx_Init+0x240>)
 80027f8:	f005 fcfe 	bl	80081f8 <puts>
#endif
		break;
 80027fc:	e03a      	b.n	8002874 <W25qxx_Init+0x154>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80027fe:	4b51      	ldr	r3, [pc, #324]	; (8002944 <W25qxx_Init+0x224>)
 8002800:	2205      	movs	r2, #5
 8002802:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8002804:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <W25qxx_Init+0x224>)
 8002806:	2220      	movs	r2, #32
 8002808:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 800280a:	4856      	ldr	r0, [pc, #344]	; (8002964 <W25qxx_Init+0x244>)
 800280c:	f005 fcf4 	bl	80081f8 <puts>
#endif
		break;
 8002810:	e030      	b.n	8002874 <W25qxx_Init+0x154>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8002812:	4b4c      	ldr	r3, [pc, #304]	; (8002944 <W25qxx_Init+0x224>)
 8002814:	2204      	movs	r2, #4
 8002816:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8002818:	4b4a      	ldr	r3, [pc, #296]	; (8002944 <W25qxx_Init+0x224>)
 800281a:	2210      	movs	r2, #16
 800281c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 800281e:	4852      	ldr	r0, [pc, #328]	; (8002968 <W25qxx_Init+0x248>)
 8002820:	f005 fcea 	bl	80081f8 <puts>
#endif
		break;
 8002824:	e026      	b.n	8002874 <W25qxx_Init+0x154>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8002826:	4b47      	ldr	r3, [pc, #284]	; (8002944 <W25qxx_Init+0x224>)
 8002828:	2203      	movs	r2, #3
 800282a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800282c:	4b45      	ldr	r3, [pc, #276]	; (8002944 <W25qxx_Init+0x224>)
 800282e:	2208      	movs	r2, #8
 8002830:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8002832:	484e      	ldr	r0, [pc, #312]	; (800296c <W25qxx_Init+0x24c>)
 8002834:	f005 fce0 	bl	80081f8 <puts>
#endif
		break;
 8002838:	e01c      	b.n	8002874 <W25qxx_Init+0x154>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800283a:	4b42      	ldr	r3, [pc, #264]	; (8002944 <W25qxx_Init+0x224>)
 800283c:	2202      	movs	r2, #2
 800283e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8002840:	4b40      	ldr	r3, [pc, #256]	; (8002944 <W25qxx_Init+0x224>)
 8002842:	2204      	movs	r2, #4
 8002844:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8002846:	484a      	ldr	r0, [pc, #296]	; (8002970 <W25qxx_Init+0x250>)
 8002848:	f005 fcd6 	bl	80081f8 <puts>
#endif
		break;
 800284c:	e012      	b.n	8002874 <W25qxx_Init+0x154>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800284e:	4b3d      	ldr	r3, [pc, #244]	; (8002944 <W25qxx_Init+0x224>)
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8002854:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <W25qxx_Init+0x224>)
 8002856:	2202      	movs	r2, #2
 8002858:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 800285a:	4846      	ldr	r0, [pc, #280]	; (8002974 <W25qxx_Init+0x254>)
 800285c:	f005 fccc 	bl	80081f8 <puts>
#endif
		break;
 8002860:	e008      	b.n	8002874 <W25qxx_Init+0x154>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8002862:	4845      	ldr	r0, [pc, #276]	; (8002978 <W25qxx_Init+0x258>)
 8002864:	f005 fcc8 	bl	80081f8 <puts>
#endif
		w25qxx.Lock = 0;
 8002868:	4b36      	ldr	r3, [pc, #216]	; (8002944 <W25qxx_Init+0x224>)
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8002870:	2300      	movs	r3, #0
 8002872:	e063      	b.n	800293c <W25qxx_Init+0x21c>
	}
	w25qxx.PageSize = 256;
 8002874:	4b33      	ldr	r3, [pc, #204]	; (8002944 <W25qxx_Init+0x224>)
 8002876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800287a:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800287c:	4b31      	ldr	r3, [pc, #196]	; (8002944 <W25qxx_Init+0x224>)
 800287e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002882:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8002884:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <W25qxx_Init+0x224>)
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	4a2e      	ldr	r2, [pc, #184]	; (8002944 <W25qxx_Init+0x224>)
 800288c:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800288e:	4b2d      	ldr	r3, [pc, #180]	; (8002944 <W25qxx_Init+0x224>)
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	4a2c      	ldr	r2, [pc, #176]	; (8002944 <W25qxx_Init+0x224>)
 8002894:	6912      	ldr	r2, [r2, #16]
 8002896:	fb02 f303 	mul.w	r3, r2, r3
 800289a:	4a2a      	ldr	r2, [pc, #168]	; (8002944 <W25qxx_Init+0x224>)
 800289c:	8952      	ldrh	r2, [r2, #10]
 800289e:	fbb3 f3f2 	udiv	r3, r3, r2
 80028a2:	4a28      	ldr	r2, [pc, #160]	; (8002944 <W25qxx_Init+0x224>)
 80028a4:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80028a6:	4b27      	ldr	r3, [pc, #156]	; (8002944 <W25qxx_Init+0x224>)
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	4a25      	ldr	r2, [pc, #148]	; (8002944 <W25qxx_Init+0x224>)
 80028ae:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80028b0:	4b24      	ldr	r3, [pc, #144]	; (8002944 <W25qxx_Init+0x224>)
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	4a23      	ldr	r2, [pc, #140]	; (8002944 <W25qxx_Init+0x224>)
 80028b6:	6912      	ldr	r2, [r2, #16]
 80028b8:	fb02 f303 	mul.w	r3, r2, r3
 80028bc:	0a9b      	lsrs	r3, r3, #10
 80028be:	4a21      	ldr	r2, [pc, #132]	; (8002944 <W25qxx_Init+0x224>)
 80028c0:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80028c2:	f7ff fe85 	bl	80025d0 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80028c6:	2001      	movs	r0, #1
 80028c8:	f7ff feca 	bl	8002660 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80028cc:	2002      	movs	r0, #2
 80028ce:	f7ff fec7 	bl	8002660 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80028d2:	2003      	movs	r0, #3
 80028d4:	f7ff fec4 	bl	8002660 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 80028d8:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <W25qxx_Init+0x224>)
 80028da:	895b      	ldrh	r3, [r3, #10]
 80028dc:	4619      	mov	r1, r3
 80028de:	4827      	ldr	r0, [pc, #156]	; (800297c <W25qxx_Init+0x25c>)
 80028e0:	f005 fc04 	bl	80080ec <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 80028e4:	4b17      	ldr	r3, [pc, #92]	; (8002944 <W25qxx_Init+0x224>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4619      	mov	r1, r3
 80028ea:	4825      	ldr	r0, [pc, #148]	; (8002980 <W25qxx_Init+0x260>)
 80028ec:	f005 fbfe 	bl	80080ec <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <W25qxx_Init+0x224>)
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	4619      	mov	r1, r3
 80028f6:	4823      	ldr	r0, [pc, #140]	; (8002984 <W25qxx_Init+0x264>)
 80028f8:	f005 fbf8 	bl	80080ec <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 80028fc:	4b11      	ldr	r3, [pc, #68]	; (8002944 <W25qxx_Init+0x224>)
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	4619      	mov	r1, r3
 8002902:	4821      	ldr	r0, [pc, #132]	; (8002988 <W25qxx_Init+0x268>)
 8002904:	f005 fbf2 	bl	80080ec <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8002908:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <W25qxx_Init+0x224>)
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	4619      	mov	r1, r3
 800290e:	481f      	ldr	r0, [pc, #124]	; (800298c <W25qxx_Init+0x26c>)
 8002910:	f005 fbec 	bl	80080ec <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <W25qxx_Init+0x224>)
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	4619      	mov	r1, r3
 800291a:	481d      	ldr	r0, [pc, #116]	; (8002990 <W25qxx_Init+0x270>)
 800291c:	f005 fbe6 	bl	80080ec <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8002920:	4b08      	ldr	r3, [pc, #32]	; (8002944 <W25qxx_Init+0x224>)
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	4619      	mov	r1, r3
 8002926:	481b      	ldr	r0, [pc, #108]	; (8002994 <W25qxx_Init+0x274>)
 8002928:	f005 fbe0 	bl	80080ec <iprintf>
	printf("w25qxx Init Done\r\n");
 800292c:	481a      	ldr	r0, [pc, #104]	; (8002998 <W25qxx_Init+0x278>)
 800292e:	f005 fc63 	bl	80081f8 <puts>
#endif
	w25qxx.Lock = 0;
 8002932:	4b04      	ldr	r3, [pc, #16]	; (8002944 <W25qxx_Init+0x224>)
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800293a:	2301      	movs	r3, #1
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	200002bc 	.word	0x200002bc
 8002948:	0800ab90 	.word	0x0800ab90
 800294c:	0800aba8 	.word	0x0800aba8
 8002950:	0800abbc 	.word	0x0800abbc
 8002954:	0800abd4 	.word	0x0800abd4
 8002958:	0800abec 	.word	0x0800abec
 800295c:	0800ac04 	.word	0x0800ac04
 8002960:	0800ac1c 	.word	0x0800ac1c
 8002964:	0800ac34 	.word	0x0800ac34
 8002968:	0800ac4c 	.word	0x0800ac4c
 800296c:	0800ac64 	.word	0x0800ac64
 8002970:	0800ac7c 	.word	0x0800ac7c
 8002974:	0800ac94 	.word	0x0800ac94
 8002978:	0800acac 	.word	0x0800acac
 800297c:	0800acc0 	.word	0x0800acc0
 8002980:	0800ace0 	.word	0x0800ace0
 8002984:	0800acf8 	.word	0x0800acf8
 8002988:	0800ad18 	.word	0x0800ad18
 800298c:	0800ad34 	.word	0x0800ad34
 8002990:	0800ad54 	.word	0x0800ad54
 8002994:	0800ad70 	.word	0x0800ad70
 8002998:	0800ad90 	.word	0x0800ad90

0800299c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029a2:	463b      	mov	r3, r7
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80029ae:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029b0:	4a21      	ldr	r2, [pc, #132]	; (8002a38 <MX_ADC1_Init+0x9c>)
 80029b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80029b4:	4b1f      	ldr	r3, [pc, #124]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029b6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80029ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029bc:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80029c2:	4b1c      	ldr	r3, [pc, #112]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80029c8:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029ce:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029d6:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029d8:	2200      	movs	r2, #0
 80029da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029dc:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029de:	4a17      	ldr	r2, [pc, #92]	; (8002a3c <MX_ADC1_Init+0xa0>)
 80029e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029e2:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80029ee:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029f6:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029fc:	480d      	ldr	r0, [pc, #52]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029fe:	f002 fa71 	bl	8004ee4 <HAL_ADC_Init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002a08:	f000 ff5c 	bl	80038c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002a0c:	230c      	movs	r3, #12
 8002a0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a10:	2301      	movs	r3, #1
 8002a12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002a14:	2307      	movs	r3, #7
 8002a16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a18:	463b      	mov	r3, r7
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4805      	ldr	r0, [pc, #20]	; (8002a34 <MX_ADC1_Init+0x98>)
 8002a1e:	f002 fbd3 	bl	80051c8 <HAL_ADC_ConfigChannel>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002a28:	f000 ff4c 	bl	80038c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a2c:	bf00      	nop
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	200002e4 	.word	0x200002e4
 8002a38:	40012000 	.word	0x40012000
 8002a3c:	0f000001 	.word	0x0f000001

08002a40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a2e      	ldr	r2, [pc, #184]	; (8002b18 <HAL_ADC_MspInit+0xd8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d156      	bne.n	8002b10 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <HAL_ADC_MspInit+0xdc>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	4a2c      	ldr	r2, [pc, #176]	; (8002b1c <HAL_ADC_MspInit+0xdc>)
 8002a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a70:	6453      	str	r3, [r2, #68]	; 0x44
 8002a72:	4b2a      	ldr	r3, [pc, #168]	; (8002b1c <HAL_ADC_MspInit+0xdc>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	4b26      	ldr	r3, [pc, #152]	; (8002b1c <HAL_ADC_MspInit+0xdc>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	4a25      	ldr	r2, [pc, #148]	; (8002b1c <HAL_ADC_MspInit+0xdc>)
 8002a88:	f043 0304 	orr.w	r3, r3, #4
 8002a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8e:	4b23      	ldr	r3, [pc, #140]	; (8002b1c <HAL_ADC_MspInit+0xdc>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa6:	f107 0314 	add.w	r3, r7, #20
 8002aaa:	4619      	mov	r1, r3
 8002aac:	481c      	ldr	r0, [pc, #112]	; (8002b20 <HAL_ADC_MspInit+0xe0>)
 8002aae:	f003 faad 	bl	800600c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002ab2:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002ab4:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <HAL_ADC_MspInit+0xe8>)
 8002ab6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002ab8:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002abe:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac4:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8002aca:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ad0:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002ad2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ad6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002ada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ade:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ae0:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ae6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ae8:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aee:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002af4:	480b      	ldr	r0, [pc, #44]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002af6:	f002 ff19 	bl	800592c <HAL_DMA_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002b00:	f000 fee0 	bl	80038c4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38
 8002b0a:	4a06      	ldr	r2, [pc, #24]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002b10:	bf00      	nop
 8002b12:	3728      	adds	r7, #40	; 0x28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40012000 	.word	0x40012000
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40020800 	.word	0x40020800
 8002b24:	2000032c 	.word	0x2000032c
 8002b28:	40026410 	.word	0x40026410

08002b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <__NVIC_GetPriorityGrouping+0x18>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	f003 0307 	and.w	r3, r3, #7
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	db0b      	blt.n	8002b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	4907      	ldr	r1, [pc, #28]	; (8002b80 <__NVIC_EnableIRQ+0x38>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	2001      	movs	r0, #1
 8002b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	e000e100 	.word	0xe000e100

08002b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	6039      	str	r1, [r7, #0]
 8002b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	db0a      	blt.n	8002bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	490c      	ldr	r1, [pc, #48]	; (8002bd0 <__NVIC_SetPriority+0x4c>)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	0112      	lsls	r2, r2, #4
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bac:	e00a      	b.n	8002bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4908      	ldr	r1, [pc, #32]	; (8002bd4 <__NVIC_SetPriority+0x50>)
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	3b04      	subs	r3, #4
 8002bbc:	0112      	lsls	r2, r2, #4
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	761a      	strb	r2, [r3, #24]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	e000e100 	.word	0xe000e100
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	; 0x24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f1c3 0307 	rsb	r3, r3, #7
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	bf28      	it	cs
 8002bf6:	2304      	movcs	r3, #4
 8002bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	2b06      	cmp	r3, #6
 8002c00:	d902      	bls.n	8002c08 <NVIC_EncodePriority+0x30>
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3b03      	subs	r3, #3
 8002c06:	e000      	b.n	8002c0a <NVIC_EncodePriority+0x32>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43da      	mvns	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2a:	43d9      	mvns	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c30:	4313      	orrs	r3, r2
         );
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3724      	adds	r7, #36	; 0x24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <LL_AHB1_GRP1_EnableClock>:
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002c48:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c4c:	4907      	ldr	r1, [pc, #28]	; (8002c6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
}
 8002c60:	bf00      	nop
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	40023800 	.word	0x40023800

08002c70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002c74:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002c78:	f7ff ffe2 	bl	8002c40 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8002c7c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002c80:	f7ff ffde 	bl	8002c40 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002c84:	f7ff ff52 	bl	8002b2c <__NVIC_GetPriorityGrouping>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ffa2 	bl	8002bd8 <NVIC_EncodePriority>
 8002c94:	4603      	mov	r3, r0
 8002c96:	4619      	mov	r1, r3
 8002c98:	200c      	movs	r0, #12
 8002c9a:	f7ff ff73 	bl	8002b84 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002c9e:	200c      	movs	r0, #12
 8002ca0:	f7ff ff52 	bl	8002b48 <__NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	2038      	movs	r0, #56	; 0x38
 8002caa:	f002 fe08 	bl	80058be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002cae:	2038      	movs	r0, #56	; 0x38
 8002cb0:	f002 fe21 	bl	80058f6 <HAL_NVIC_EnableIRQ>

}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <__NVIC_GetPriorityGrouping>:
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	f003 0307 	and.w	r3, r3, #7
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <__NVIC_EnableIRQ>:
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	db0b      	blt.n	8002cfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	f003 021f 	and.w	r2, r3, #31
 8002cec:	4907      	ldr	r1, [pc, #28]	; (8002d0c <__NVIC_EnableIRQ+0x38>)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	e000e100 	.word	0xe000e100

08002d10 <__NVIC_SetPriority>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	6039      	str	r1, [r7, #0]
 8002d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	db0a      	blt.n	8002d3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	490c      	ldr	r1, [pc, #48]	; (8002d5c <__NVIC_SetPriority+0x4c>)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	0112      	lsls	r2, r2, #4
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	440b      	add	r3, r1
 8002d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d38:	e00a      	b.n	8002d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	4908      	ldr	r1, [pc, #32]	; (8002d60 <__NVIC_SetPriority+0x50>)
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	3b04      	subs	r3, #4
 8002d48:	0112      	lsls	r2, r2, #4
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	761a      	strb	r2, [r3, #24]
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000e100 	.word	0xe000e100
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <NVIC_EncodePriority>:
{
 8002d64:	b480      	push	{r7}
 8002d66:	b089      	sub	sp, #36	; 0x24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f1c3 0307 	rsb	r3, r3, #7
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	bf28      	it	cs
 8002d82:	2304      	movcs	r3, #4
 8002d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	2b06      	cmp	r3, #6
 8002d8c:	d902      	bls.n	8002d94 <NVIC_EncodePriority+0x30>
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3b03      	subs	r3, #3
 8002d92:	e000      	b.n	8002d96 <NVIC_EncodePriority+0x32>
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43da      	mvns	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	401a      	ands	r2, r3
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	fa01 f303 	lsl.w	r3, r1, r3
 8002db6:	43d9      	mvns	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dbc:	4313      	orrs	r3, r2
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3724      	adds	r7, #36	; 0x24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <LL_AHB1_GRP1_EnableClock>:
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002dd4:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002dd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dd8:	4907      	ldr	r1, [pc, #28]	; (8002df8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4013      	ands	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dea:	68fb      	ldr	r3, [r7, #12]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	40023800 	.word	0x40023800

08002dfc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8002e06:	4a13      	ldr	r2, [pc, #76]	; (8002e54 <LL_SYSCFG_SetEXTISource+0x58>)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	3302      	adds	r3, #2
 8002e0e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	0c1b      	lsrs	r3, r3, #16
 8002e16:	43db      	mvns	r3, r3
 8002e18:	ea02 0103 	and.w	r1, r2, r3
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	0c1b      	lsrs	r3, r3, #16
 8002e20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	fa93 f3a3 	rbit	r3, r3
 8002e28:	60bb      	str	r3, [r7, #8]
  return result;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	fa03 f202 	lsl.w	r2, r3, r2
 8002e3a:	4806      	ldr	r0, [pc, #24]	; (8002e54 <LL_SYSCFG_SetEXTISource+0x58>)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	430a      	orrs	r2, r1
 8002e42:	3302      	adds	r3, #2
 8002e44:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	40013800 	.word	0x40013800

08002e58 <LL_GPIO_SetPinMode>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b089      	sub	sp, #36	; 0x24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	613b      	str	r3, [r7, #16]
  return result;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2103      	movs	r1, #3
 8002e80:	fa01 f303 	lsl.w	r3, r1, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	401a      	ands	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	61bb      	str	r3, [r7, #24]
  return result;
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	601a      	str	r2, [r3, #0]
}
 8002eaa:	bf00      	nop
 8002eac:	3724      	adds	r7, #36	; 0x24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <LL_GPIO_SetPinPull>:
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b089      	sub	sp, #36	; 0x24
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	613b      	str	r3, [r7, #16]
  return result;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	2103      	movs	r1, #3
 8002ede:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	61bb      	str	r3, [r7, #24]
  return result;
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	431a      	orrs	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	60da      	str	r2, [r3, #12]
}
 8002f08:	bf00      	nop
 8002f0a:	3724      	adds	r7, #36	; 0x24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_GPIO_ResetOutputPin>:
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	041a      	lsls	r2, r3, #16
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	619a      	str	r2, [r3, #24]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
	...

08002f34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8002f3a:	f107 0318 	add.w	r3, r7, #24
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f44:	463b      	mov	r3, r7
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	609a      	str	r2, [r3, #8]
 8002f4e:	60da      	str	r2, [r3, #12]
 8002f50:	611a      	str	r2, [r3, #16]
 8002f52:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002f54:	2080      	movs	r0, #128	; 0x80
 8002f56:	f7ff ff39 	bl	8002dcc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002f5a:	2004      	movs	r0, #4
 8002f5c:	f7ff ff36 	bl	8002dcc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002f60:	2001      	movs	r0, #1
 8002f62:	f7ff ff33 	bl	8002dcc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002f66:	2002      	movs	r0, #2
 8002f68:	f7ff ff30 	bl	8002dcc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8002f6c:	2110      	movs	r1, #16
 8002f6e:	482a      	ldr	r0, [pc, #168]	; (8003018 <MX_GPIO_Init+0xe4>)
 8002f70:	f7ff ffd0 	bl	8002f14 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3|LL_GPIO_PIN_5);
 8002f74:	2128      	movs	r1, #40	; 0x28
 8002f76:	4829      	ldr	r0, [pc, #164]	; (800301c <MX_GPIO_Init+0xe8>)
 8002f78:	f7ff ffcc 	bl	8002f14 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8002f7c:	2310      	movs	r3, #16
 8002f7e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002f80:	2301      	movs	r3, #1
 8002f82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f90:	463b      	mov	r3, r7
 8002f92:	4619      	mov	r1, r3
 8002f94:	4820      	ldr	r0, [pc, #128]	; (8003018 <MX_GPIO_Init+0xe4>)
 8002f96:	f003 fbf3 	bl	8006780 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_5;
 8002f9a:	2328      	movs	r3, #40	; 0x28
 8002f9c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002faa:	2300      	movs	r3, #0
 8002fac:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fae:	463b      	mov	r3, r7
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	481a      	ldr	r0, [pc, #104]	; (800301c <MX_GPIO_Init+0xe8>)
 8002fb4:	f003 fbe4 	bl	8006780 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE4);
 8002fb8:	4919      	ldr	r1, [pc, #100]	; (8003020 <MX_GPIO_Init+0xec>)
 8002fba:	2002      	movs	r0, #2
 8002fbc:	f7ff ff1e 	bl	8002dfc <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8002fd0:	f107 0318 	add.w	r3, r7, #24
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f003 fa4d 	bl	8006474 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2110      	movs	r1, #16
 8002fde:	4811      	ldr	r0, [pc, #68]	; (8003024 <MX_GPIO_Init+0xf0>)
 8002fe0:	f7ff ff69 	bl	8002eb6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_4, LL_GPIO_MODE_INPUT);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2110      	movs	r1, #16
 8002fe8:	480e      	ldr	r0, [pc, #56]	; (8003024 <MX_GPIO_Init+0xf0>)
 8002fea:	f7ff ff35 	bl	8002e58 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002fee:	f7ff fe63 	bl	8002cb8 <__NVIC_GetPriorityGrouping>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff feb3 	bl	8002d64 <NVIC_EncodePriority>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4619      	mov	r1, r3
 8003002:	200a      	movs	r0, #10
 8003004:	f7ff fe84 	bl	8002d10 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 8003008:	200a      	movs	r0, #10
 800300a:	f7ff fe63 	bl	8002cd4 <__NVIC_EnableIRQ>

}
 800300e:	bf00      	nop
 8003010:	3720      	adds	r7, #32
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40020000 	.word	0x40020000
 800301c:	40020400 	.word	0x40020400
 8003020:	000f0001 	.word	0x000f0001
 8003024:	40020800 	.word	0x40020800

08003028 <LL_DMA_EnableStream>:
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003032:	4a0c      	ldr	r2, [pc, #48]	; (8003064 <LL_DMA_EnableStream+0x3c>)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	4413      	add	r3, r2
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4413      	add	r3, r2
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4908      	ldr	r1, [pc, #32]	; (8003064 <LL_DMA_EnableStream+0x3c>)
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	440a      	add	r2, r1
 8003048:	7812      	ldrb	r2, [r2, #0]
 800304a:	4611      	mov	r1, r2
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	440a      	add	r2, r1
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	6013      	str	r3, [r2, #0]
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	0800b3b4 	.word	0x0800b3b4

08003068 <LL_DMA_DisableStream>:
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003072:	4a0c      	ldr	r2, [pc, #48]	; (80030a4 <LL_DMA_DisableStream+0x3c>)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	4413      	add	r3, r2
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4413      	add	r3, r2
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4908      	ldr	r1, [pc, #32]	; (80030a4 <LL_DMA_DisableStream+0x3c>)
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	440a      	add	r2, r1
 8003088:	7812      	ldrb	r2, [r2, #0]
 800308a:	4611      	mov	r1, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	440a      	add	r2, r1
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	6013      	str	r3, [r2, #0]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	0800b3b4 	.word	0x0800b3b4

080030a8 <LL_DMA_ClearFlag_TC1>:
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030b6:	609a      	str	r2, [r3, #8]
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <LL_RCC_HSE_Enable+0x1c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a04      	ldr	r2, [pc, #16]	; (80030e0 <LL_RCC_HSE_Enable+0x1c>)
 80030ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d2:	6013      	str	r3, [r2, #0]
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800

080030e4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80030e8:	4b07      	ldr	r3, [pc, #28]	; (8003108 <LL_RCC_HSE_IsReady+0x24>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030f4:	bf0c      	ite	eq
 80030f6:	2301      	moveq	r3, #1
 80030f8:	2300      	movne	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800

0800310c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <LL_RCC_SetSysClkSource+0x24>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f023 0203 	bic.w	r2, r3, #3
 800311c:	4904      	ldr	r1, [pc, #16]	; (8003130 <LL_RCC_SetSysClkSource+0x24>)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4313      	orrs	r3, r2
 8003122:	608b      	str	r3, [r1, #8]
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	40023800 	.word	0x40023800

08003134 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003138:	4b04      	ldr	r3, [pc, #16]	; (800314c <LL_RCC_GetSysClkSource+0x18>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 030c 	and.w	r3, r3, #12
}
 8003140:	4618      	mov	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800

08003150 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <LL_RCC_SetAHBPrescaler+0x24>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003160:	4904      	ldr	r1, [pc, #16]	; (8003174 <LL_RCC_SetAHBPrescaler+0x24>)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4313      	orrs	r3, r2
 8003166:	608b      	str	r3, [r1, #8]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	40023800 	.word	0x40023800

08003178 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003180:	4b06      	ldr	r3, [pc, #24]	; (800319c <LL_RCC_SetAPB1Prescaler+0x24>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003188:	4904      	ldr	r1, [pc, #16]	; (800319c <LL_RCC_SetAPB1Prescaler+0x24>)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4313      	orrs	r3, r2
 800318e:	608b      	str	r3, [r1, #8]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	40023800 	.word	0x40023800

080031a0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031b0:	4904      	ldr	r1, [pc, #16]	; (80031c4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	608b      	str	r3, [r1, #8]
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	40023800 	.word	0x40023800

080031c8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <LL_RCC_PLL_Enable+0x1c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <LL_RCC_PLL_Enable+0x1c>)
 80031d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031d6:	6013      	str	r3, [r2, #0]
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40023800 	.word	0x40023800

080031e8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <LL_RCC_PLL_IsReady+0x24>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031f8:	bf0c      	ite	eq
 80031fa:	2301      	moveq	r3, #1
 80031fc:	2300      	movne	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
}
 8003200:	4618      	mov	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	40023800 	.word	0x40023800

08003210 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
 800321c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 800321e:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8003224:	4013      	ands	r3, r2
 8003226:	68f9      	ldr	r1, [r7, #12]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	4311      	orrs	r1, r2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	0192      	lsls	r2, r2, #6
 8003230:	430a      	orrs	r2, r1
 8003232:	4908      	ldr	r1, [pc, #32]	; (8003254 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8003234:	4313      	orrs	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003240:	4904      	ldr	r1, [pc, #16]	; (8003254 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	4313      	orrs	r3, r2
 8003246:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	40023800 	.word	0x40023800
 8003258:	ffbf8000 	.word	0xffbf8000

0800325c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <LL_FLASH_SetLatency+0x24>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f023 0207 	bic.w	r2, r3, #7
 800326c:	4904      	ldr	r1, [pc, #16]	; (8003280 <LL_FLASH_SetLatency+0x24>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4313      	orrs	r3, r2
 8003272:	600b      	str	r3, [r1, #0]
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	40023c00 	.word	0x40023c00

08003284 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003288:	4b04      	ldr	r3, [pc, #16]	; (800329c <LL_FLASH_GetLatency+0x18>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0307 	and.w	r3, r3, #7
}
 8003290:	4618      	mov	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40023c00 	.word	0x40023c00

080032a0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b2:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <LL_InitTick+0x30>)
 80032b4:	3b01      	subs	r3, #1
 80032b6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80032b8:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <LL_InitTick+0x30>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032be:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <LL_InitTick+0x30>)
 80032c0:	2205      	movs	r2, #5
 80032c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000e010 	.word	0xe000e010

080032d4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80032e4:	4904      	ldr	r1, [pc, #16]	; (80032f8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	600b      	str	r3, [r1, #0]
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40007000 	.word	0x40007000

080032fc <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f043 0201 	orr.w	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	601a      	str	r2, [r3, #0]
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1a      	ldr	r2, [r3, #32]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	621a      	str	r2, [r3, #32]
}
 8003332:	bf00      	nop
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <LL_USART_EnableIT_IDLE>:
{
 800333e:	b480      	push	{r7}
 8003340:	b089      	sub	sp, #36	; 0x24
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	330c      	adds	r3, #12
 800334a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	e853 3f00 	ldrex	r3, [r3]
 8003352:	60bb      	str	r3, [r7, #8]
   return(result);
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f043 0310 	orr.w	r3, r3, #16
 800335a:	61fb      	str	r3, [r7, #28]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	330c      	adds	r3, #12
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	61ba      	str	r2, [r7, #24]
 8003364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003366:	6979      	ldr	r1, [r7, #20]
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	e841 2300 	strex	r3, r2, [r1]
 800336e:	613b      	str	r3, [r7, #16]
   return(result);
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1e7      	bne.n	8003346 <LL_USART_EnableIT_IDLE+0x8>
}
 8003376:	bf00      	nop
 8003378:	bf00      	nop
 800337a:	3724      	adds	r7, #36	; 0x24
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <LL_USART_EnableIT_RXNE>:
{
 8003384:	b480      	push	{r7}
 8003386:	b089      	sub	sp, #36	; 0x24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	330c      	adds	r3, #12
 8003390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	e853 3f00 	ldrex	r3, [r3]
 8003398:	60bb      	str	r3, [r7, #8]
   return(result);
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f043 0320 	orr.w	r3, r3, #32
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	330c      	adds	r3, #12
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	61ba      	str	r2, [r7, #24]
 80033aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ac:	6979      	ldr	r1, [r7, #20]
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	e841 2300 	strex	r3, r2, [r1]
 80033b4:	613b      	str	r3, [r7, #16]
   return(result);
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1e7      	bne.n	800338c <LL_USART_EnableIT_RXNE+0x8>
}
 80033bc:	bf00      	nop
 80033be:	bf00      	nop
 80033c0:	3724      	adds	r7, #36	; 0x24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	b2db      	uxtb	r3, r3
}
 80033d8:	4618      	mov	r0, r3
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	4013      	ands	r3, r2
 80033fa:	041a      	lsls	r2, r3, #16
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	43d9      	mvns	r1, r3
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	400b      	ands	r3, r1
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	619a      	str	r2, [r3, #24]
}
 800340a:	bf00      	nop
 800340c:	3714      	adds	r7, #20
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
	...

08003418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800341e:	f001 fcef 	bl	8004e00 <HAL_Init>

  /* USER CODE BEGIN Init */
  memset(&read_flash_arr,0,256);
 8003422:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003426:	2100      	movs	r1, #0
 8003428:	48a7      	ldr	r0, [pc, #668]	; (80036c8 <main+0x2b0>)
 800342a:	f004 f9ed 	bl	8007808 <memset>
  for(int i=0; i<256;i++){
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]
 8003432:	e009      	b.n	8003448 <main+0x30>
	  write_flash_arr[i]=i;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	b2d9      	uxtb	r1, r3
 8003438:	4aa4      	ldr	r2, [pc, #656]	; (80036cc <main+0x2b4>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4413      	add	r3, r2
 800343e:	460a      	mov	r2, r1
 8003440:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<256;i++){
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3301      	adds	r3, #1
 8003446:	607b      	str	r3, [r7, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2bff      	cmp	r3, #255	; 0xff
 800344c:	ddf2      	ble.n	8003434 <main+0x1c>
  }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800344e:	f000 f9c7 	bl	80037e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LL_InitTick(168000000, 1000000U);		//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음
 8003452:	499f      	ldr	r1, [pc, #636]	; (80036d0 <main+0x2b8>)
 8003454:	489f      	ldr	r0, [pc, #636]	; (80036d4 <main+0x2bc>)
 8003456:	f7ff ff23 	bl	80032a0 <LL_InitTick>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800345a:	f7ff fd6b 	bl	8002f34 <MX_GPIO_Init>
  MX_DMA_Init();
 800345e:	f7ff fc07 	bl	8002c70 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8003462:	f001 fc1d 	bl	8004ca0 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8003466:	f000 fb19 	bl	8003a9c <MX_SPI1_Init>
  MX_TIM3_Init();
 800346a:	f000 ff99 	bl	80043a0 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800346e:	f001 fb85 	bl	8004b7c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8003472:	f001 fb23 	bl	8004abc <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8003476:	f001 f827 	bl	80044c8 <MX_TIM5_Init>
  MX_SPI3_Init();
 800347a:	f000 fb71 	bl	8003b60 <MX_SPI3_Init>
  MX_ADC1_Init();
 800347e:	f7ff fa8d 	bl	800299c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  W25QXX_SPI_Initialization();
 8003482:	f7ff f81d 	bl	80024c0 <W25QXX_SPI_Initialization>
  usDelay(100000);

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH1);
*/
  // ESC PWM
  LL_TIM_EnableCounter(TIM3);
 8003486:	4894      	ldr	r0, [pc, #592]	; (80036d8 <main+0x2c0>)
 8003488:	f7ff ff38 	bl	80032fc <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH3);	// M1
 800348c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003490:	4891      	ldr	r0, [pc, #580]	; (80036d8 <main+0x2c0>)
 8003492:	f7ff ff43 	bl	800331c <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); 	// M2
 8003496:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800349a:	488f      	ldr	r0, [pc, #572]	; (80036d8 <main+0x2c0>)
 800349c:	f7ff ff3e 	bl	800331c <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM5);
 80034a0:	488e      	ldr	r0, [pc, #568]	; (80036dc <main+0x2c4>)
 80034a2:	f7ff ff2b 	bl	80032fc <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);	// M3
 80034a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034aa:	488c      	ldr	r0, [pc, #560]	; (80036dc <main+0x2c4>)
 80034ac:	f7ff ff36 	bl	800331c <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);	// M4
 80034b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034b4:	4889      	ldr	r0, [pc, #548]	; (80036dc <main+0x2c4>)
 80034b6:	f7ff ff31 	bl	800331c <LL_TIM_CC_EnableChannel>
  TIM5->CCR4 = MIN_TIM_PWM;
  TIM5->CCR3 = MIN_TIM_PWM;
  usDelay(8000000);	// 7sec
*/

  ICM20602_Initialization();
 80034ba:	f7fe f857 	bl	800156c <ICM20602_Initialization>

  // Batery ADC Check
  HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);
 80034be:	2201      	movs	r2, #1
 80034c0:	4987      	ldr	r1, [pc, #540]	; (80036e0 <main+0x2c8>)
 80034c2:	4888      	ldr	r0, [pc, #544]	; (80036e4 <main+0x2cc>)
 80034c4:	f001 fd52 	bl	8004f6c <HAL_ADC_Start_DMA>


  // 시간측정을 위한 레지스터 초기화 값
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80034c8:	4b87      	ldr	r3, [pc, #540]	; (80036e8 <main+0x2d0>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4a86      	ldr	r2, [pc, #536]	; (80036e8 <main+0x2d0>)
 80034ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034d2:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 80034d4:	4b85      	ldr	r3, [pc, #532]	; (80036ec <main+0x2d4>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80034da:	4b84      	ldr	r3, [pc, #528]	; (80036ec <main+0x2d4>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a83      	ldr	r2, [pc, #524]	; (80036ec <main+0x2d4>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	6013      	str	r3, [r2, #0]

  // UART3 GPS 수신기 DMA 및 인터럽트 설정
  GPS_DMA_init(&raw_gps, USART3, DMA1, LL_DMA_STREAM_1);
 80034e6:	2301      	movs	r3, #1
 80034e8:	4a81      	ldr	r2, [pc, #516]	; (80036f0 <main+0x2d8>)
 80034ea:	4982      	ldr	r1, [pc, #520]	; (80036f4 <main+0x2dc>)
 80034ec:	4882      	ldr	r0, [pc, #520]	; (80036f8 <main+0x2e0>)
 80034ee:	f7fd fdd0 	bl	8001092 <GPS_DMA_init>
  LL_DMA_EnableStream(DMA1,LL_DMA_STREAM_1);
 80034f2:	2101      	movs	r1, #1
 80034f4:	487e      	ldr	r0, [pc, #504]	; (80036f0 <main+0x2d8>)
 80034f6:	f7ff fd97 	bl	8003028 <LL_DMA_EnableStream>
  LL_USART_EnableIT_IDLE(USART3);
 80034fa:	487e      	ldr	r0, [pc, #504]	; (80036f4 <main+0x2dc>)
 80034fc:	f7ff ff1f 	bl	800333e <LL_USART_EnableIT_IDLE>

  // UART1 SBUS 수신기 인터럽트 설정
  LL_USART_EnableIT_IDLE(USART1);
 8003500:	487e      	ldr	r0, [pc, #504]	; (80036fc <main+0x2e4>)
 8003502:	f7ff ff1c 	bl	800333e <LL_USART_EnableIT_IDLE>
  LL_USART_EnableIT_RXNE(USART1);
 8003506:	487d      	ldr	r0, [pc, #500]	; (80036fc <main+0x2e4>)
 8003508:	f7ff ff3c 	bl	8003384 <LL_USART_EnableIT_RXNE>

  // UART6 문자열 인터페이스 DMA 및  인터럽트 설정
//  USART_DMA_Transmit_INIT(USART6, DMA2, LL_DMA_STREAM_6);
  LL_USART_EnableIT_RXNE(USART6);	// UART6 인터럽트 활성화
 800350c:	487c      	ldr	r0, [pc, #496]	; (8003700 <main+0x2e8>)
 800350e:	f7ff ff39 	bl	8003384 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_IDLE(USART6);
 8003512:	487b      	ldr	r0, [pc, #492]	; (8003700 <main+0x2e8>)
 8003514:	f7ff ff13 	bl	800333e <LL_USART_EnableIT_IDLE>
//  LL_USART_EnableIT_TC(USART6);

  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 8003518:	2120      	movs	r1, #32
 800351a:	487a      	ldr	r0, [pc, #488]	; (8003704 <main+0x2ec>)
 800351c:	f7ff ff62 	bl	80033e4 <LL_GPIO_TogglePin>
  //	  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
  //	  usDelay(1000000);
  //	  LL_USART_TransmitData8(USART6,'B');


	  if(flag_INT_UART1_RX==1){
 8003520:	4b79      	ldr	r3, [pc, #484]	; (8003708 <main+0x2f0>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d111      	bne.n	800354c <main+0x134>
		  raw_rx.rx_buf[cnt1++] = LL_USART_ReceiveData8(USART1);
 8003528:	4b78      	ldr	r3, [pc, #480]	; (800370c <main+0x2f4>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	b2d1      	uxtb	r1, r2
 8003530:	4a76      	ldr	r2, [pc, #472]	; (800370c <main+0x2f4>)
 8003532:	7011      	strb	r1, [r2, #0]
 8003534:	461c      	mov	r4, r3
 8003536:	4871      	ldr	r0, [pc, #452]	; (80036fc <main+0x2e4>)
 8003538:	f7ff ff47 	bl	80033ca <LL_USART_ReceiveData8>
 800353c:	4603      	mov	r3, r0
 800353e:	461a      	mov	r2, r3
 8003540:	4b73      	ldr	r3, [pc, #460]	; (8003710 <main+0x2f8>)
 8003542:	4423      	add	r3, r4
 8003544:	721a      	strb	r2, [r3, #8]
          flag_INT_UART1_RX =0;
 8003546:	4b70      	ldr	r3, [pc, #448]	; (8003708 <main+0x2f0>)
 8003548:	2200      	movs	r2, #0
 800354a:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_INT_UART1_RX_DONE == 1)
 800354c:	4b71      	ldr	r3, [pc, #452]	; (8003714 <main+0x2fc>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d10b      	bne.n	800356c <main+0x154>
	  {
		  SBUS_Parsing(&raw_rx, &msg_sbus, &rx_recv_cnt, &rx_err_cnt);
 8003554:	4b70      	ldr	r3, [pc, #448]	; (8003718 <main+0x300>)
 8003556:	4a71      	ldr	r2, [pc, #452]	; (800371c <main+0x304>)
 8003558:	4971      	ldr	r1, [pc, #452]	; (8003720 <main+0x308>)
 800355a:	486d      	ldr	r0, [pc, #436]	; (8003710 <main+0x2f8>)
 800355c:	f7fe fd7c 	bl	8002058 <SBUS_Parsing>
          cnt1=0;
 8003560:	4b6a      	ldr	r3, [pc, #424]	; (800370c <main+0x2f4>)
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]
		  flag_INT_UART1_RX_DONE = 0;
 8003566:	4b6b      	ldr	r3, [pc, #428]	; (8003714 <main+0x2fc>)
 8003568:	2200      	movs	r2, #0
 800356a:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_INT_UART4_RX==1){
 800356c:	4b6d      	ldr	r3, [pc, #436]	; (8003724 <main+0x30c>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d102      	bne.n	800357a <main+0x162>
		  flag_INT_UART4_RX = 0;
 8003574:	4b6b      	ldr	r3, [pc, #428]	; (8003724 <main+0x30c>)
 8003576:	2200      	movs	r2, #0
 8003578:	701a      	strb	r2, [r3, #0]
	  }


	  if(flag_INT_USART6 == 1){
 800357a:	4b6b      	ldr	r3, [pc, #428]	; (8003728 <main+0x310>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d102      	bne.n	8003588 <main+0x170>
		  flag_INT_USART6 =0;
 8003582:	4b69      	ldr	r3, [pc, #420]	; (8003728 <main+0x310>)
 8003584:	2200      	movs	r2, #0
 8003586:	701a      	strb	r2, [r3, #0]
//		  LL_USART_TransmitData8(USART6,rxd); // 호스트로부터 수신한 데이터를 그대로 다시 보냄
//		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
	  }

	  // UART3에서 한 프레임 GPS 데이터 수신완료에 인터럽트 발생, GPS데이터가 수신될 때마다 DMA는 데이터카운트를 하나씩 감소하면서 0이 될 때까지 전송
	  if(flag_INT_UART3_GPS == 1){
 8003588:	4b68      	ldr	r3, [pc, #416]	; (800372c <main+0x314>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d109      	bne.n	80035a4 <main+0x18c>

//		  cnt=(uint8_t)(MSG_LENGTH_NAV_SOL-LL_DMA_GetDataLength(DMA1,LL_DMA_STREAM_1));
		  LL_DMA_DisableStream(DMA1,LL_DMA_STREAM_1);
 8003590:	2101      	movs	r1, #1
 8003592:	4857      	ldr	r0, [pc, #348]	; (80036f0 <main+0x2d8>)
 8003594:	f7ff fd68 	bl	8003068 <LL_DMA_DisableStream>
		  LL_DMA_ClearFlag_TC1(DMA1);
 8003598:	4855      	ldr	r0, [pc, #340]	; (80036f0 <main+0x2d8>)
 800359a:	f7ff fd85 	bl	80030a8 <LL_DMA_ClearFlag_TC1>
//		  cnt = 0;
		  flag_INT_UART3_GPS =0;
 800359e:	4b63      	ldr	r3, [pc, #396]	; (800372c <main+0x314>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	701a      	strb	r2, [r3, #0]

	  }

	  // DMA 데이터카운트가 0이되면 인터럽트 발생, 데이터를 버퍼로 수신 완료
	  if(flag_DMA1_DONE == 1)
 80035a4:	4b62      	ldr	r3, [pc, #392]	; (8003730 <main+0x318>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d127      	bne.n	80035fc <main+0x1e4>
	  {
//		  cnt=(uint8_t)(MSG_LENGTH_NAV_SOL-LL_DMA_GetDataLength(DMA1,LL_DMA_STREAM_1));

		  // Batery Checker
		  BatVol = adcVal*ADC_BAT_COEFF;
 80035ac:	4b4c      	ldr	r3, [pc, #304]	; (80036e0 <main+0x2c8>)
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	ee07 3a90 	vmov	s15, r3
 80035b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035b8:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003734 <main+0x31c>
 80035bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035c0:	4b5d      	ldr	r3, [pc, #372]	; (8003738 <main+0x320>)
 80035c2:	edc3 7a00 	vstr	s15, [r3]
		  printf("Battery Check: ADC[%d], Voltage[%f]\n", adcVal, BatVol);
 80035c6:	4b46      	ldr	r3, [pc, #280]	; (80036e0 <main+0x2c8>)
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	461c      	mov	r4, r3
 80035cc:	4b5a      	ldr	r3, [pc, #360]	; (8003738 <main+0x320>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fc ffb9 	bl	8000548 <__aeabi_f2d>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4621      	mov	r1, r4
 80035dc:	4857      	ldr	r0, [pc, #348]	; (800373c <main+0x324>)
 80035de:	f004 fd85 	bl	80080ec <iprintf>

		  // GPS Parsing
		  GPS_Parsing(&raw_gps, &msg_nav, &recv_cnt, &err_cnt);
 80035e2:	4b57      	ldr	r3, [pc, #348]	; (8003740 <main+0x328>)
 80035e4:	4a57      	ldr	r2, [pc, #348]	; (8003744 <main+0x32c>)
 80035e6:	4958      	ldr	r1, [pc, #352]	; (8003748 <main+0x330>)
 80035e8:	4843      	ldr	r0, [pc, #268]	; (80036f8 <main+0x2e0>)
 80035ea:	f7fd fd79 	bl	80010e0 <GPS_Parsing>
		  LL_DMA_EnableStream(DMA1,LL_DMA_STREAM_1);
 80035ee:	2101      	movs	r1, #1
 80035f0:	483f      	ldr	r0, [pc, #252]	; (80036f0 <main+0x2d8>)
 80035f2:	f7ff fd19 	bl	8003028 <LL_DMA_EnableStream>
		  flag_DMA1_DONE = 0;
 80035f6:	4b4e      	ldr	r3, [pc, #312]	; (8003730 <main+0x318>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	701a      	strb	r2, [r3, #0]
	  }


	  if(ICM20602_DataReady() == 1)
 80035fc:	f7fe f888 	bl	8001710 <ICM20602_DataReady>
 8003600:	4603      	mov	r3, r0
 8003602:	2b01      	cmp	r3, #1
 8003604:	d10a      	bne.n	800361c <main+0x204>
	  {

		  t2 = DWT->CYCCNT;
 8003606:	4b39      	ldr	r3, [pc, #228]	; (80036ec <main+0x2d4>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	4a50      	ldr	r2, [pc, #320]	; (800374c <main+0x334>)
 800360c:	6013      	str	r3, [r2, #0]
//		  sampleFreq = (1000000.0f /(((float)(t2-t1))/CLOCK_PER_USEC)); // set integration time by time elapsed since last filter update
		  t1 = t2;
 800360e:	4b4f      	ldr	r3, [pc, #316]	; (800374c <main+0x334>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a4f      	ldr	r2, [pc, #316]	; (8003750 <main+0x338>)
 8003614:	6013      	str	r3, [r2, #0]
//		  printf("%.2f\n",(sampleFreq));
		  GetRPY(&sampleFreq);
 8003616:	484f      	ldr	r0, [pc, #316]	; (8003754 <main+0x33c>)
 8003618:	f7fe f886 	bl	8001728 <GetRPY>

	  }


	  // Failsafe
	  if(msg_sbus.failsafe==MSG_SBUS_FS_BIT_MASK) {
 800361c:	4b40      	ldr	r3, [pc, #256]	; (8003720 <main+0x308>)
 800361e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003622:	2b08      	cmp	r3, #8
 8003624:	d110      	bne.n	8003648 <main+0x230>
		  TIM3->CCR3 = MIN_TIM_PWM;
 8003626:	4b2c      	ldr	r3, [pc, #176]	; (80036d8 <main+0x2c0>)
 8003628:	f642 1204 	movw	r2, #10500	; 0x2904
 800362c:	63da      	str	r2, [r3, #60]	; 0x3c
		  TIM3->CCR4 = MIN_TIM_PWM;
 800362e:	4b2a      	ldr	r3, [pc, #168]	; (80036d8 <main+0x2c0>)
 8003630:	f642 1204 	movw	r2, #10500	; 0x2904
 8003634:	641a      	str	r2, [r3, #64]	; 0x40
		  TIM5->CCR4 = MIN_TIM_PWM;
 8003636:	4b29      	ldr	r3, [pc, #164]	; (80036dc <main+0x2c4>)
 8003638:	f642 1204 	movw	r2, #10500	; 0x2904
 800363c:	641a      	str	r2, [r3, #64]	; 0x40
		  TIM5->CCR3 = MIN_TIM_PWM;
 800363e:	4b27      	ldr	r3, [pc, #156]	; (80036dc <main+0x2c4>)
 8003640:	f642 1204 	movw	r2, #10500	; 0x2904
 8003644:	63da      	str	r2, [r3, #60]	; 0x3c
 8003646:	e76b      	b.n	8003520 <main+0x108>
	  }

	  // Radio Control
	  else	  {

		  if(radio_safe==0) {
 8003648:	4b43      	ldr	r3, [pc, #268]	; (8003758 <main+0x340>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	f040 8087 	bne.w	8003760 <main+0x348>
			  if((msg_sbus.rx_channel[0] < MIN_RADIO_CH1_PWM + 5)&&(msg_sbus.rx_channel[0] > 0)) {
 8003652:	4b33      	ldr	r3, [pc, #204]	; (8003720 <main+0x308>)
 8003654:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003658:	2bc4      	cmp	r3, #196	; 0xc4
 800365a:	f73f af61 	bgt.w	8003520 <main+0x108>
 800365e:	4b30      	ldr	r3, [pc, #192]	; (8003720 <main+0x308>)
 8003660:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003664:	2b00      	cmp	r3, #0
 8003666:	f77f af5b 	ble.w	8003520 <main+0x108>
				   LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 800366a:	2120      	movs	r1, #32
 800366c:	4825      	ldr	r0, [pc, #148]	; (8003704 <main+0x2ec>)
 800366e:	f7ff feb9 	bl	80033e4 <LL_GPIO_TogglePin>
				   usDelay(500000);
 8003672:	483a      	ldr	r0, [pc, #232]	; (800375c <main+0x344>)
 8003674:	f000 f8fe 	bl	8003874 <usDelay>
				   LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 8003678:	2120      	movs	r1, #32
 800367a:	4822      	ldr	r0, [pc, #136]	; (8003704 <main+0x2ec>)
 800367c:	f7ff feb2 	bl	80033e4 <LL_GPIO_TogglePin>
				   usDelay(500000);
 8003680:	4836      	ldr	r0, [pc, #216]	; (800375c <main+0x344>)
 8003682:	f000 f8f7 	bl	8003874 <usDelay>
				   LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 8003686:	2120      	movs	r1, #32
 8003688:	481e      	ldr	r0, [pc, #120]	; (8003704 <main+0x2ec>)
 800368a:	f7ff feab 	bl	80033e4 <LL_GPIO_TogglePin>
				   usDelay(500000);
 800368e:	4833      	ldr	r0, [pc, #204]	; (800375c <main+0x344>)
 8003690:	f000 f8f0 	bl	8003874 <usDelay>
				   LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 8003694:	2120      	movs	r1, #32
 8003696:	481b      	ldr	r0, [pc, #108]	; (8003704 <main+0x2ec>)
 8003698:	f7ff fea4 	bl	80033e4 <LL_GPIO_TogglePin>
				   usDelay(500000);
 800369c:	482f      	ldr	r0, [pc, #188]	; (800375c <main+0x344>)
 800369e:	f000 f8e9 	bl	8003874 <usDelay>
				   LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 80036a2:	2120      	movs	r1, #32
 80036a4:	4817      	ldr	r0, [pc, #92]	; (8003704 <main+0x2ec>)
 80036a6:	f7ff fe9d 	bl	80033e4 <LL_GPIO_TogglePin>
				   usDelay(500000);
 80036aa:	482c      	ldr	r0, [pc, #176]	; (800375c <main+0x344>)
 80036ac:	f000 f8e2 	bl	8003874 <usDelay>
				   LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 80036b0:	2120      	movs	r1, #32
 80036b2:	4814      	ldr	r0, [pc, #80]	; (8003704 <main+0x2ec>)
 80036b4:	f7ff fe96 	bl	80033e4 <LL_GPIO_TogglePin>
				   usDelay(500000);
 80036b8:	4828      	ldr	r0, [pc, #160]	; (800375c <main+0x344>)
 80036ba:	f000 f8db 	bl	8003874 <usDelay>
				   radio_safe = 1;
 80036be:	4b26      	ldr	r3, [pc, #152]	; (8003758 <main+0x340>)
 80036c0:	2201      	movs	r2, #1
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	e72c      	b.n	8003520 <main+0x108>
 80036c6:	bf00      	nop
 80036c8:	200004bc 	.word	0x200004bc
 80036cc:	200003b8 	.word	0x200003b8
 80036d0:	000f4240 	.word	0x000f4240
 80036d4:	0a037a00 	.word	0x0a037a00
 80036d8:	40000400 	.word	0x40000400
 80036dc:	40000c00 	.word	0x40000c00
 80036e0:	200005d8 	.word	0x200005d8
 80036e4:	200002e4 	.word	0x200002e4
 80036e8:	e000edf0 	.word	0xe000edf0
 80036ec:	e0001000 	.word	0xe0001000
 80036f0:	40026000 	.word	0x40026000
 80036f4:	40004800 	.word	0x40004800
 80036f8:	200005dc 	.word	0x200005dc
 80036fc:	40011000 	.word	0x40011000
 8003700:	40011400 	.word	0x40011400
 8003704:	40020400 	.word	0x40020400
 8003708:	20000754 	.word	0x20000754
 800370c:	20000250 	.word	0x20000250
 8003710:	20000620 	.word	0x20000620
 8003714:	20000651 	.word	0x20000651
 8003718:	2000024c 	.word	0x2000024c
 800371c:	20000248 	.word	0x20000248
 8003720:	2000038c 	.word	0x2000038c
 8003724:	20000649 	.word	0x20000649
 8003728:	2000064a 	.word	0x2000064a
 800372c:	20000652 	.word	0x20000652
 8003730:	20000755 	.word	0x20000755
 8003734:	3c0e8f5c 	.word	0x3c0e8f5c
 8003738:	20000254 	.word	0x20000254
 800373c:	0800b384 	.word	0x0800b384
 8003740:	20000278 	.word	0x20000278
 8003744:	20000274 	.word	0x20000274
 8003748:	200005bc 	.word	0x200005bc
 800374c:	2000025c 	.word	0x2000025c
 8003750:	20000258 	.word	0x20000258
 8003754:	20000644 	.word	0x20000644
 8003758:	20000251 	.word	0x20000251
 800375c:	0007a120 	.word	0x0007a120
			  }
		  }

		  else {
			  TIM3->CCR3 = MIN_TIM_PWM + RANGE_TIM_PWM/RANGE_RADIO_CH1_PWM*(msg_sbus.rx_channel[0]-MIN_RADIO_CH1_PWM);
 8003760:	4b1c      	ldr	r3, [pc, #112]	; (80037d4 <main+0x3bc>)
 8003762:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003766:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 800376a:	4613      	mov	r3, r2
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	4413      	add	r3, r2
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003776:	3304      	adds	r3, #4
 8003778:	4a17      	ldr	r2, [pc, #92]	; (80037d8 <main+0x3c0>)
 800377a:	63d3      	str	r3, [r2, #60]	; 0x3c
			  TIM3->CCR4 = MIN_TIM_PWM + RANGE_TIM_PWM/RANGE_RADIO_CH1_PWM*(msg_sbus.rx_channel[0]-MIN_RADIO_CH1_PWM);
 800377c:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <main+0x3bc>)
 800377e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003782:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 8003786:	4613      	mov	r3, r2
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	4413      	add	r3, r2
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003792:	3304      	adds	r3, #4
 8003794:	4a10      	ldr	r2, [pc, #64]	; (80037d8 <main+0x3c0>)
 8003796:	6413      	str	r3, [r2, #64]	; 0x40
			  TIM5->CCR4 = MIN_TIM_PWM + RANGE_TIM_PWM/RANGE_RADIO_CH1_PWM*(msg_sbus.rx_channel[0]-MIN_RADIO_CH1_PWM);
 8003798:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <main+0x3bc>)
 800379a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800379e:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 80037a2:	4613      	mov	r3, r2
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	4413      	add	r3, r2
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80037ae:	3304      	adds	r3, #4
 80037b0:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <main+0x3c4>)
 80037b2:	6413      	str	r3, [r2, #64]	; 0x40
			  TIM5->CCR3 = MIN_TIM_PWM + RANGE_TIM_PWM/RANGE_RADIO_CH1_PWM*(msg_sbus.rx_channel[0]-MIN_RADIO_CH1_PWM);
 80037b4:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <main+0x3bc>)
 80037b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80037ba:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 80037be:	4613      	mov	r3, r2
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	4413      	add	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80037ca:	3304      	adds	r3, #4
 80037cc:	4a03      	ldr	r2, [pc, #12]	; (80037dc <main+0x3c4>)
 80037ce:	63d3      	str	r3, [r2, #60]	; 0x3c
	  if(flag_INT_UART1_RX==1){
 80037d0:	e6a6      	b.n	8003520 <main+0x108>
 80037d2:	bf00      	nop
 80037d4:	2000038c 	.word	0x2000038c
 80037d8:	40000400 	.word	0x40000400
 80037dc:	40000c00 	.word	0x40000c00

080037e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 80037e4:	2005      	movs	r0, #5
 80037e6:	f7ff fd39 	bl	800325c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 80037ea:	bf00      	nop
 80037ec:	f7ff fd4a 	bl	8003284 <LL_FLASH_GetLatency>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b05      	cmp	r3, #5
 80037f4:	d1fa      	bne.n	80037ec <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80037f6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80037fa:	f7ff fd6b 	bl	80032d4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 80037fe:	f7ff fc61 	bl	80030c4 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8003802:	bf00      	nop
 8003804:	f7ff fc6e 	bl	80030e4 <LL_RCC_HSE_IsReady>
 8003808:	4603      	mov	r3, r0
 800380a:	2b01      	cmp	r3, #1
 800380c:	d1fa      	bne.n	8003804 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 800380e:	2300      	movs	r3, #0
 8003810:	22a8      	movs	r2, #168	; 0xa8
 8003812:	2104      	movs	r1, #4
 8003814:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003818:	f7ff fcfa 	bl	8003210 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800381c:	f7ff fcd4 	bl	80031c8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8003820:	bf00      	nop
 8003822:	f7ff fce1 	bl	80031e8 <LL_RCC_PLL_IsReady>
 8003826:	4603      	mov	r3, r0
 8003828:	2b01      	cmp	r3, #1
 800382a:	d1fa      	bne.n	8003822 <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800382c:	2000      	movs	r0, #0
 800382e:	f7ff fc8f 	bl	8003150 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8003832:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003836:	f7ff fc9f 	bl	8003178 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 800383a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800383e:	f7ff fcaf 	bl	80031a0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8003842:	2002      	movs	r0, #2
 8003844:	f7ff fc62 	bl	800310c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003848:	bf00      	nop
 800384a:	f7ff fc73 	bl	8003134 <LL_RCC_GetSysClkSource>
 800384e:	4603      	mov	r3, r0
 8003850:	2b08      	cmp	r3, #8
 8003852:	d1fa      	bne.n	800384a <SystemClock_Config+0x6a>
  {

  }
  LL_SetSystemCoreClock(168000000);
 8003854:	4806      	ldr	r0, [pc, #24]	; (8003870 <SystemClock_Config+0x90>)
 8003856:	f003 ff8f 	bl	8007778 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800385a:	200f      	movs	r0, #15
 800385c:	f001 faf2 	bl	8004e44 <HAL_InitTick>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003866:	f000 f82d 	bl	80038c4 <Error_Handler>
  }
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	0a037a00 	.word	0x0a037a00

08003874 <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(unsigned int nTime)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	__IO unsigned int  tmp = SysTick->CTRL;
 800387c:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <usDelay+0x48>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60fb      	str	r3, [r7, #12]
	((void)tmp);
 8003882:	68fb      	ldr	r3, [r7, #12]

	SysTick->VAL = 0;
 8003884:	4b0d      	ldr	r3, [pc, #52]	; (80038bc <usDelay+0x48>)
 8003886:	2200      	movs	r2, #0
 8003888:	609a      	str	r2, [r3, #8]

	SysTick->CTRL = SysTick->CTRL | SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk; // clock source
 800388a:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <usDelay+0x48>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a0b      	ldr	r2, [pc, #44]	; (80038bc <usDelay+0x48>)
 8003890:	f043 0307 	orr.w	r3, r3, #7
 8003894:	6013      	str	r3, [r2, #0]

	TimingDelay = nTime-1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3b01      	subs	r3, #1
 800389a:	4a09      	ldr	r2, [pc, #36]	; (80038c0 <usDelay+0x4c>)
 800389c:	6013      	str	r3, [r2, #0]

	while(TimingDelay);
 800389e:	bf00      	nop
 80038a0:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <usDelay+0x4c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1fb      	bne.n	80038a0 <usDelay+0x2c>

	SysTick->CTRL = 0;
 80038a8:	4b04      	ldr	r3, [pc, #16]	; (80038bc <usDelay+0x48>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]

}
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	e000e010 	.word	0xe000e010
 80038c0:	2000064c 	.word	0x2000064c

080038c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80038c8:	b672      	cpsid	i
}
 80038ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038cc:	e7fe      	b.n	80038cc <Error_Handler+0x8>
	...

080038d0 <__NVIC_GetPriorityGrouping>:
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038d4:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <__NVIC_GetPriorityGrouping+0x18>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	0a1b      	lsrs	r3, r3, #8
 80038da:	f003 0307 	and.w	r3, r3, #7
}
 80038de:	4618      	mov	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	e000ed00 	.word	0xe000ed00

080038ec <__NVIC_EnableIRQ>:
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	db0b      	blt.n	8003916 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	f003 021f 	and.w	r2, r3, #31
 8003904:	4907      	ldr	r1, [pc, #28]	; (8003924 <__NVIC_EnableIRQ+0x38>)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	2001      	movs	r0, #1
 800390e:	fa00 f202 	lsl.w	r2, r0, r2
 8003912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	e000e100 	.word	0xe000e100

08003928 <__NVIC_SetPriority>:
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	6039      	str	r1, [r7, #0]
 8003932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003938:	2b00      	cmp	r3, #0
 800393a:	db0a      	blt.n	8003952 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	b2da      	uxtb	r2, r3
 8003940:	490c      	ldr	r1, [pc, #48]	; (8003974 <__NVIC_SetPriority+0x4c>)
 8003942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003946:	0112      	lsls	r2, r2, #4
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	440b      	add	r3, r1
 800394c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003950:	e00a      	b.n	8003968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	b2da      	uxtb	r2, r3
 8003956:	4908      	ldr	r1, [pc, #32]	; (8003978 <__NVIC_SetPriority+0x50>)
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	3b04      	subs	r3, #4
 8003960:	0112      	lsls	r2, r2, #4
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	440b      	add	r3, r1
 8003966:	761a      	strb	r2, [r3, #24]
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	e000e100 	.word	0xe000e100
 8003978:	e000ed00 	.word	0xe000ed00

0800397c <NVIC_EncodePriority>:
{
 800397c:	b480      	push	{r7}
 800397e:	b089      	sub	sp, #36	; 0x24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f1c3 0307 	rsb	r3, r3, #7
 8003996:	2b04      	cmp	r3, #4
 8003998:	bf28      	it	cs
 800399a:	2304      	movcs	r3, #4
 800399c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	3304      	adds	r3, #4
 80039a2:	2b06      	cmp	r3, #6
 80039a4:	d902      	bls.n	80039ac <NVIC_EncodePriority+0x30>
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	3b03      	subs	r3, #3
 80039aa:	e000      	b.n	80039ae <NVIC_EncodePriority+0x32>
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43da      	mvns	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	401a      	ands	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	fa01 f303 	lsl.w	r3, r1, r3
 80039ce:	43d9      	mvns	r1, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d4:	4313      	orrs	r3, r2
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3724      	adds	r7, #36	; 0x24
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
	...

080039e4 <LL_AHB1_GRP1_EnableClock>:
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80039ec:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80039ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f0:	4907      	ldr	r1, [pc, #28]	; (8003a10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80039fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4013      	ands	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a02:	68fb      	ldr	r3, [r7, #12]
}
 8003a04:	bf00      	nop
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	40023800 	.word	0x40023800

08003a14 <LL_APB1_GRP1_EnableClock>:
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003a1c:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a20:	4907      	ldr	r1, [pc, #28]	; (8003a40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a32:	68fb      	ldr	r3, [r7, #12]
}
 8003a34:	bf00      	nop
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	40023800 	.word	0x40023800

08003a44 <LL_APB2_GRP1_EnableClock>:
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003a4c:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003a4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a50:	4907      	ldr	r1, [pc, #28]	; (8003a70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003a5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a62:	68fb      	ldr	r3, [r7, #12]
}
 8003a64:	bf00      	nop
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	40023800 	.word	0x40023800

08003a74 <LL_SPI_SetStandard>:
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f023 0210 	bic.w	r2, r3, #16
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	605a      	str	r2, [r3, #4]
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
	...

08003a9c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b090      	sub	sp, #64	; 0x40
 8003aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003aa2:	f107 0318 	add.w	r3, r7, #24
 8003aa6:	2228      	movs	r2, #40	; 0x28
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f003 feac 	bl	8007808 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab0:	463b      	mov	r3, r7
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	605a      	str	r2, [r3, #4]
 8003ab8:	609a      	str	r2, [r3, #8]
 8003aba:	60da      	str	r2, [r3, #12]
 8003abc:	611a      	str	r2, [r3, #16]
 8003abe:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8003ac0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003ac4:	f7ff ffbe 	bl	8003a44 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003ac8:	2001      	movs	r0, #1
 8003aca:	f7ff ff8b 	bl	80039e4 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003ace:	23e0      	movs	r3, #224	; 0xe0
 8003ad0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003ae2:	2305      	movs	r3, #5
 8003ae4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae6:	463b      	mov	r3, r7
 8003ae8:	4619      	mov	r1, r3
 8003aea:	481b      	ldr	r0, [pc, #108]	; (8003b58 <MX_SPI1_Init+0xbc>)
 8003aec:	f002 fe48 	bl	8006780 <LL_GPIO_Init>

  /* SPI1 interrupt Init */
  NVIC_SetPriority(SPI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003af0:	f7ff feee 	bl	80038d0 <__NVIC_GetPriorityGrouping>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2200      	movs	r2, #0
 8003af8:	2100      	movs	r1, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff ff3e 	bl	800397c <NVIC_EncodePriority>
 8003b00:	4603      	mov	r3, r0
 8003b02:	4619      	mov	r1, r3
 8003b04:	2023      	movs	r0, #35	; 0x23
 8003b06:	f7ff ff0f 	bl	8003928 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI1_IRQn);
 8003b0a:	2023      	movs	r0, #35	; 0x23
 8003b0c:	f7ff feee 	bl	80038ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003b14:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003b18:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003b22:	2301      	movs	r3, #1
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003b26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8003b2c:	2310      	movs	r3, #16
 8003b2e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003b30:	2300      	movs	r3, #0
 8003b32:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003b34:	2300      	movs	r3, #0
 8003b36:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003b38:	230a      	movs	r3, #10
 8003b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8003b3c:	f107 0318 	add.w	r3, r7, #24
 8003b40:	4619      	mov	r1, r3
 8003b42:	4806      	ldr	r0, [pc, #24]	; (8003b5c <MX_SPI1_Init+0xc0>)
 8003b44:	f002 ffed 	bl	8006b22 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4804      	ldr	r0, [pc, #16]	; (8003b5c <MX_SPI1_Init+0xc0>)
 8003b4c:	f7ff ff92 	bl	8003a74 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b50:	bf00      	nop
 8003b52:	3740      	adds	r7, #64	; 0x40
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40020000 	.word	0x40020000
 8003b5c:	40013000 	.word	0x40013000

08003b60 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b090      	sub	sp, #64	; 0x40
 8003b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003b66:	f107 0318 	add.w	r3, r7, #24
 8003b6a:	2228      	movs	r2, #40	; 0x28
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f003 fe4a 	bl	8007808 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b74:	463b      	mov	r3, r7
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	605a      	str	r2, [r3, #4]
 8003b7c:	609a      	str	r2, [r3, #8]
 8003b7e:	60da      	str	r2, [r3, #12]
 8003b80:	611a      	str	r2, [r3, #16]
 8003b82:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8003b84:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003b88:	f7ff ff44 	bl	8003a14 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003b8c:	2004      	movs	r0, #4
 8003b8e:	f7ff ff29 	bl	80039e4 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8003b92:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003b96:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003b98:	2302      	movs	r3, #2
 8003b9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8003ba8:	2306      	movs	r3, #6
 8003baa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bac:	463b      	mov	r3, r7
 8003bae:	4619      	mov	r1, r3
 8003bb0:	481b      	ldr	r0, [pc, #108]	; (8003c20 <MX_SPI3_Init+0xc0>)
 8003bb2:	f002 fde5 	bl	8006780 <LL_GPIO_Init>

  /* SPI3 interrupt Init */
  NVIC_SetPriority(SPI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003bb6:	f7ff fe8b 	bl	80038d0 <__NVIC_GetPriorityGrouping>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff fedb 	bl	800397c <NVIC_EncodePriority>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	4619      	mov	r1, r3
 8003bca:	2033      	movs	r0, #51	; 0x33
 8003bcc:	f7ff feac 	bl	8003928 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI3_IRQn);
 8003bd0:	2033      	movs	r0, #51	; 0x33
 8003bd2:	f7ff fe8b 	bl	80038ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003bda:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003bde:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003be0:	2300      	movs	r3, #0
 8003be2:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8003be4:	2300      	movs	r3, #0
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003bfe:	230a      	movs	r3, #10
 8003c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8003c02:	f107 0318 	add.w	r3, r7, #24
 8003c06:	4619      	mov	r1, r3
 8003c08:	4806      	ldr	r0, [pc, #24]	; (8003c24 <MX_SPI3_Init+0xc4>)
 8003c0a:	f002 ff8a 	bl	8006b22 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8003c0e:	2100      	movs	r1, #0
 8003c10:	4804      	ldr	r0, [pc, #16]	; (8003c24 <MX_SPI3_Init+0xc4>)
 8003c12:	f7ff ff2f 	bl	8003a74 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003c16:	bf00      	nop
 8003c18:	3740      	adds	r7, #64	; 0x40
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40020800 	.word	0x40020800
 8003c24:	40003c00 	.word	0x40003c00

08003c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	607b      	str	r3, [r7, #4]
 8003c32:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <HAL_MspInit+0x4c>)
 8003c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c36:	4a0f      	ldr	r2, [pc, #60]	; (8003c74 <HAL_MspInit+0x4c>)
 8003c38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <HAL_MspInit+0x4c>)
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c46:	607b      	str	r3, [r7, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <HAL_MspInit+0x4c>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	4a08      	ldr	r2, [pc, #32]	; (8003c74 <HAL_MspInit+0x4c>)
 8003c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c58:	6413      	str	r3, [r2, #64]	; 0x40
 8003c5a:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <HAL_MspInit+0x4c>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40023800 	.word	0x40023800

08003c78 <LL_DMA_IsActiveFlag_TC1>:
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c8c:	bf0c      	ite	eq
 8003c8e:	2301      	moveq	r3, #1
 8003c90:	2300      	movne	r3, #0
 8003c92:	b2db      	uxtb	r3, r3
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <LL_DMA_ClearFlag_TC1>:
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cae:	609a      	str	r2, [r3, #8]
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE) == DMA_SxCR_TCIE);
 8003cc6:	4a0a      	ldr	r2, [pc, #40]	; (8003cf0 <LL_DMA_IsEnabledIT_TC+0x34>)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	4413      	add	r3, r2
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	2b10      	cmp	r3, #16
 8003cdc:	bf0c      	ite	eq
 8003cde:	2301      	moveq	r3, #1
 8003ce0:	2300      	movne	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	0800b3bc 	.word	0x0800b3bc

08003cf4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8003cfc:	4b07      	ldr	r3, [pc, #28]	; (8003d1c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8003cfe:	695a      	ldr	r2, [r3, #20]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4013      	ands	r3, r2
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	bf0c      	ite	eq
 8003d0a:	2301      	moveq	r3, #1
 8003d0c:	2300      	movne	r3, #0
 8003d0e:	b2db      	uxtb	r3, r3
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	40013c00 	.word	0x40013c00

08003d20 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8003d28:	4a04      	ldr	r2, [pc, #16]	; (8003d3c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6153      	str	r3, [r2, #20]
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40013c00 	.word	0x40013c00

08003d40 <LL_USART_IsActiveFlag_IDLE>:
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <LL_USART_IsActiveFlag_RXNE>:
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	bf0c      	ite	eq
 8003d7a:	2301      	moveq	r3, #1
 8003d7c:	2300      	movne	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_USART_ClearFlag_IDLE>:
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8003da2:	68fb      	ldr	r3, [r7, #12]
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <LL_USART_ClearFlag_RXNE>:
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f06f 0220 	mvn.w	r2, #32
 8003dbe:	601a      	str	r2, [r3, #0]
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <LL_USART_IsEnabledIT_IDLE>:
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0310 	and.w	r3, r3, #16
 8003ddc:	2b10      	cmp	r3, #16
 8003dde:	bf0c      	ite	eq
 8003de0:	2301      	moveq	r3, #1
 8003de2:	2300      	movne	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <LL_USART_IsEnabledIT_RXNE>:
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	bf0c      	ite	eq
 8003e06:	2301      	moveq	r3, #1
 8003e08:	2300      	movne	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <LL_USART_ReceiveData8>:
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	b2db      	uxtb	r3, r3
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e32:	b480      	push	{r7}
 8003e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e36:	e7fe      	b.n	8003e36 <NMI_Handler+0x4>

08003e38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e3c:	e7fe      	b.n	8003e3c <HardFault_Handler+0x4>

08003e3e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e42:	e7fe      	b.n	8003e42 <MemManage_Handler+0x4>

08003e44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e48:	e7fe      	b.n	8003e48 <BusFault_Handler+0x4>

08003e4a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e4e:	e7fe      	b.n	8003e4e <UsageFault_Handler+0x4>

08003e50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e54:	bf00      	nop
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e62:	bf00      	nop
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e70:	bf00      	nop
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
	...

08003e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <SysTick_Handler+0x20>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d004      	beq.n	8003e92 <SysTick_Handler+0x16>

		TimingDelay--;
 8003e88:	4b04      	ldr	r3, [pc, #16]	; (8003e9c <SysTick_Handler+0x20>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	4a03      	ldr	r2, [pc, #12]	; (8003e9c <SysTick_Handler+0x20>)
 8003e90:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e92:	f001 f807 	bl	8004ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	2000064c 	.word	0x2000064c

08003ea0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	// IMU SPI External interrupt
  /* USER CODE END EXTI4_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8003ea4:	2010      	movs	r0, #16
 8003ea6:	f7ff ff25 	bl	8003cf4 <LL_EXTI_IsActiveFlag_0_31>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <EXTI4_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 8003eb0:	2010      	movs	r0, #16
 8003eb2:	f7ff ff35 	bl	8003d20 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003eb6:	bf00      	nop
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

    /* Check transfer-complete interrupt */
    if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_TC1(DMA1)) {
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	480a      	ldr	r0, [pc, #40]	; (8003eec <DMA1_Stream1_IRQHandler+0x30>)
 8003ec4:	f7ff fefa 	bl	8003cbc <LL_DMA_IsEnabledIT_TC>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00b      	beq.n	8003ee6 <DMA1_Stream1_IRQHandler+0x2a>
 8003ece:	4807      	ldr	r0, [pc, #28]	; (8003eec <DMA1_Stream1_IRQHandler+0x30>)
 8003ed0:	f7ff fed2 	bl	8003c78 <LL_DMA_IsActiveFlag_TC1>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d005      	beq.n	8003ee6 <DMA1_Stream1_IRQHandler+0x2a>
		LL_DMA_ClearFlag_TC1(DMA1);
 8003eda:	4804      	ldr	r0, [pc, #16]	; (8003eec <DMA1_Stream1_IRQHandler+0x30>)
 8003edc:	f7ff fee0 	bl	8003ca0 <LL_DMA_ClearFlag_TC1>
        flag_DMA1_DONE = 1;
 8003ee0:	4b03      	ldr	r3, [pc, #12]	; (8003ef0 <DMA1_Stream1_IRQHandler+0x34>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Stream1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40026000 	.word	0x40026000
 8003ef0:	20000755 	.word	0x20000755

08003ef4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0

  /* USER CODE END SPI1_IRQn 0 */
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003ef8:	bf00      	nop
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	if(LL_USART_IsEnabledIT_RXNE(USART1) && LL_USART_IsActiveFlag_RXNE(USART1)) // 인터럽트중 USART6인지 확인
 8003f08:	4812      	ldr	r0, [pc, #72]	; (8003f54 <USART1_IRQHandler+0x50>)
 8003f0a:	f7ff ff72 	bl	8003df2 <LL_USART_IsEnabledIT_RXNE>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <USART1_IRQHandler+0x28>
 8003f14:	480f      	ldr	r0, [pc, #60]	; (8003f54 <USART1_IRQHandler+0x50>)
 8003f16:	f7ff ff26 	bl	8003d66 <LL_USART_IsActiveFlag_RXNE>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <USART1_IRQHandler+0x28>
	{
			LL_USART_ClearFlag_RXNE(USART1); // 맞으면 비트 클리어
 8003f20:	480c      	ldr	r0, [pc, #48]	; (8003f54 <USART1_IRQHandler+0x50>)
 8003f22:	f7ff ff45 	bl	8003db0 <LL_USART_ClearFlag_RXNE>
			flag_INT_UART1_RX = 1; // flag 클리어
 8003f26:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <USART1_IRQHandler+0x54>)
 8003f28:	2201      	movs	r2, #1
 8003f2a:	701a      	strb	r2, [r3, #0]

	}


	if(LL_USART_IsEnabledIT_IDLE(USART1) && LL_USART_IsActiveFlag_IDLE(USART1)) {
 8003f2c:	4809      	ldr	r0, [pc, #36]	; (8003f54 <USART1_IRQHandler+0x50>)
 8003f2e:	f7ff ff4d 	bl	8003dcc <LL_USART_IsEnabledIT_IDLE>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00b      	beq.n	8003f50 <USART1_IRQHandler+0x4c>
 8003f38:	4806      	ldr	r0, [pc, #24]	; (8003f54 <USART1_IRQHandler+0x50>)
 8003f3a:	f7ff ff01 	bl	8003d40 <LL_USART_IsActiveFlag_IDLE>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <USART1_IRQHandler+0x4c>
		LL_USART_ClearFlag_IDLE(USART1);
 8003f44:	4803      	ldr	r0, [pc, #12]	; (8003f54 <USART1_IRQHandler+0x50>)
 8003f46:	f7ff ff21 	bl	8003d8c <LL_USART_ClearFlag_IDLE>
		flag_INT_UART1_RX_DONE = 1; // 수신완료
 8003f4a:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <USART1_IRQHandler+0x58>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f50:	bf00      	nop
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40011000 	.word	0x40011000
 8003f58:	20000754 	.word	0x20000754
 8003f5c:	20000651 	.word	0x20000651

08003f60 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
			rxd_gps = LL_USART_ReceiveData8(USART3); // 데이터 수신
			flag_INT_UART3_GPS = 1; // flag 클리어

	}
*/
	if(LL_USART_IsEnabledIT_IDLE(USART3) && LL_USART_IsActiveFlag_IDLE(USART3)) {
 8003f64:	4809      	ldr	r0, [pc, #36]	; (8003f8c <USART3_IRQHandler+0x2c>)
 8003f66:	f7ff ff31 	bl	8003dcc <LL_USART_IsEnabledIT_IDLE>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00b      	beq.n	8003f88 <USART3_IRQHandler+0x28>
 8003f70:	4806      	ldr	r0, [pc, #24]	; (8003f8c <USART3_IRQHandler+0x2c>)
 8003f72:	f7ff fee5 	bl	8003d40 <LL_USART_IsActiveFlag_IDLE>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <USART3_IRQHandler+0x28>
		LL_USART_ClearFlag_IDLE(USART3);
 8003f7c:	4803      	ldr	r0, [pc, #12]	; (8003f8c <USART3_IRQHandler+0x2c>)
 8003f7e:	f7ff ff05 	bl	8003d8c <LL_USART_ClearFlag_IDLE>
		flag_INT_UART3_GPS = 1; // flag 클리어
 8003f82:	4b03      	ldr	r3, [pc, #12]	; (8003f90 <USART3_IRQHandler+0x30>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003f88:	bf00      	nop
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40004800 	.word	0x40004800
 8003f90:	20000652 	.word	0x20000652

08003f94 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0

  /* USER CODE END SPI3_IRQn 0 */
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8003f98:	bf00      	nop
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003fa8:	4802      	ldr	r0, [pc, #8]	; (8003fb4 <DMA2_Stream0_IRQHandler+0x10>)
 8003faa:	f001 fdc5 	bl	8005b38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003fae:	bf00      	nop
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	2000032c 	.word	0x2000032c

08003fb8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6) && LL_USART_IsActiveFlag_RXNE(USART6))// 인터럽트중 USART6인지 확인
 8003fbc:	4816      	ldr	r0, [pc, #88]	; (8004018 <USART6_IRQHandler+0x60>)
 8003fbe:	f7ff fed2 	bl	8003d66 <LL_USART_IsActiveFlag_RXNE>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d012      	beq.n	8003fee <USART6_IRQHandler+0x36>
 8003fc8:	4813      	ldr	r0, [pc, #76]	; (8004018 <USART6_IRQHandler+0x60>)
 8003fca:	f7ff fecc 	bl	8003d66 <LL_USART_IsActiveFlag_RXNE>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00c      	beq.n	8003fee <USART6_IRQHandler+0x36>
	{
			LL_USART_ClearFlag_RXNE(USART6); // 맞으면 비트 클리어
 8003fd4:	4810      	ldr	r0, [pc, #64]	; (8004018 <USART6_IRQHandler+0x60>)
 8003fd6:	f7ff feeb 	bl	8003db0 <LL_USART_ClearFlag_RXNE>
			rxd = LL_USART_ReceiveData8(USART6); // 데이터 수신
 8003fda:	480f      	ldr	r0, [pc, #60]	; (8004018 <USART6_IRQHandler+0x60>)
 8003fdc:	f7ff ff1c 	bl	8003e18 <LL_USART_ReceiveData8>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	4b0d      	ldr	r3, [pc, #52]	; (800401c <USART6_IRQHandler+0x64>)
 8003fe6:	701a      	strb	r2, [r3, #0]
			flag_INT_USART6 = 1; // flag 클리어
 8003fe8:	4b0d      	ldr	r3, [pc, #52]	; (8004020 <USART6_IRQHandler+0x68>)
 8003fea:	2201      	movs	r2, #1
 8003fec:	701a      	strb	r2, [r3, #0]

	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */
	if(LL_USART_IsEnabledIT_IDLE(USART6) && LL_USART_IsActiveFlag_IDLE(USART6)) {
 8003fee:	480a      	ldr	r0, [pc, #40]	; (8004018 <USART6_IRQHandler+0x60>)
 8003ff0:	f7ff feec 	bl	8003dcc <LL_USART_IsEnabledIT_IDLE>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00b      	beq.n	8004012 <USART6_IRQHandler+0x5a>
 8003ffa:	4807      	ldr	r0, [pc, #28]	; (8004018 <USART6_IRQHandler+0x60>)
 8003ffc:	f7ff fea0 	bl	8003d40 <LL_USART_IsActiveFlag_IDLE>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d005      	beq.n	8004012 <USART6_IRQHandler+0x5a>
		LL_USART_ClearFlag_IDLE(USART6);
 8004006:	4804      	ldr	r0, [pc, #16]	; (8004018 <USART6_IRQHandler+0x60>)
 8004008:	f7ff fec0 	bl	8003d8c <LL_USART_ClearFlag_IDLE>
		flag_INT_UART6_RX_DONE = 1; // flag 클리어
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <USART6_IRQHandler+0x6c>)
 800400e:	2201      	movs	r2, #1
 8004010:	701a      	strb	r2, [r3, #0]

    }

  /* USER CODE END USART6_IRQn 1 */
}
 8004012:	bf00      	nop
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	40011400 	.word	0x40011400
 800401c:	20000758 	.word	0x20000758
 8004020:	2000064a 	.word	0x2000064a
 8004024:	20000757 	.word	0x20000757

08004028 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  return 1;
 800402c:	2301      	movs	r3, #1
}
 800402e:	4618      	mov	r0, r3
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <_kill>:

int _kill(int pid, int sig)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004042:	f003 fba9 	bl	8007798 <__errno>
 8004046:	4603      	mov	r3, r0
 8004048:	2216      	movs	r2, #22
 800404a:	601a      	str	r2, [r3, #0]
  return -1;
 800404c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <_exit>:

void _exit (int status)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004060:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff ffe7 	bl	8004038 <_kill>
  while (1) {}    /* Make sure we hang here */
 800406a:	e7fe      	b.n	800406a <_exit+0x12>

0800406c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	e00a      	b.n	8004094 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800407e:	f3af 8000 	nop.w
 8004082:	4601      	mov	r1, r0
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	60ba      	str	r2, [r7, #8]
 800408a:	b2ca      	uxtb	r2, r1
 800408c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	3301      	adds	r3, #1
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	429a      	cmp	r2, r3
 800409a:	dbf0      	blt.n	800407e <_read+0x12>
  }

  return len;
 800409c:	687b      	ldr	r3, [r7, #4]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80040ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040ce:	605a      	str	r2, [r3, #4]
  return 0;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <_isatty>:

int _isatty(int file)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80040e6:	2301      	movs	r3, #1
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
	...

08004110 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004118:	4a14      	ldr	r2, [pc, #80]	; (800416c <_sbrk+0x5c>)
 800411a:	4b15      	ldr	r3, [pc, #84]	; (8004170 <_sbrk+0x60>)
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004124:	4b13      	ldr	r3, [pc, #76]	; (8004174 <_sbrk+0x64>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d102      	bne.n	8004132 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800412c:	4b11      	ldr	r3, [pc, #68]	; (8004174 <_sbrk+0x64>)
 800412e:	4a12      	ldr	r2, [pc, #72]	; (8004178 <_sbrk+0x68>)
 8004130:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004132:	4b10      	ldr	r3, [pc, #64]	; (8004174 <_sbrk+0x64>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4413      	add	r3, r2
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	429a      	cmp	r2, r3
 800413e:	d207      	bcs.n	8004150 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004140:	f003 fb2a 	bl	8007798 <__errno>
 8004144:	4603      	mov	r3, r0
 8004146:	220c      	movs	r2, #12
 8004148:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800414a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800414e:	e009      	b.n	8004164 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004150:	4b08      	ldr	r3, [pc, #32]	; (8004174 <_sbrk+0x64>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004156:	4b07      	ldr	r3, [pc, #28]	; (8004174 <_sbrk+0x64>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4413      	add	r3, r2
 800415e:	4a05      	ldr	r2, [pc, #20]	; (8004174 <_sbrk+0x64>)
 8004160:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004162:	68fb      	ldr	r3, [r7, #12]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20020000 	.word	0x20020000
 8004170:	00000400 	.word	0x00000400
 8004174:	20000260 	.word	0x20000260
 8004178:	20000760 	.word	0x20000760

0800417c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004180:	4b06      	ldr	r3, [pc, #24]	; (800419c <SystemInit+0x20>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004186:	4a05      	ldr	r2, [pc, #20]	; (800419c <SystemInit+0x20>)
 8004188:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800418c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004190:	bf00      	nop
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	e000ed00 	.word	0xe000ed00

080041a0 <LL_AHB1_GRP1_EnableClock>:
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80041a8:	4b08      	ldr	r3, [pc, #32]	; (80041cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80041aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ac:	4907      	ldr	r1, [pc, #28]	; (80041cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80041b4:	4b05      	ldr	r3, [pc, #20]	; (80041cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80041b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4013      	ands	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80041be:	68fb      	ldr	r3, [r7, #12]
}
 80041c0:	bf00      	nop
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40023800 	.word	0x40023800

080041d0 <LL_APB1_GRP1_EnableClock>:
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80041d8:	4b08      	ldr	r3, [pc, #32]	; (80041fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80041da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041dc:	4907      	ldr	r1, [pc, #28]	; (80041fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80041e4:	4b05      	ldr	r3, [pc, #20]	; (80041fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80041e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4013      	ands	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80041ee:	68fb      	ldr	r3, [r7, #12]
}
 80041f0:	bf00      	nop
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	40023800 	.word	0x40023800

08004200 <LL_TIM_EnableARRPreload>:
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	601a      	str	r2, [r3, #0]
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d01c      	beq.n	800426a <LL_TIM_OC_EnableFast+0x4a>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	2b04      	cmp	r3, #4
 8004234:	d017      	beq.n	8004266 <LL_TIM_OC_EnableFast+0x46>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b10      	cmp	r3, #16
 800423a:	d012      	beq.n	8004262 <LL_TIM_OC_EnableFast+0x42>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	2b40      	cmp	r3, #64	; 0x40
 8004240:	d00d      	beq.n	800425e <LL_TIM_OC_EnableFast+0x3e>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004248:	d007      	beq.n	800425a <LL_TIM_OC_EnableFast+0x3a>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004250:	d101      	bne.n	8004256 <LL_TIM_OC_EnableFast+0x36>
 8004252:	2305      	movs	r3, #5
 8004254:	e00a      	b.n	800426c <LL_TIM_OC_EnableFast+0x4c>
 8004256:	2306      	movs	r3, #6
 8004258:	e008      	b.n	800426c <LL_TIM_OC_EnableFast+0x4c>
 800425a:	2304      	movs	r3, #4
 800425c:	e006      	b.n	800426c <LL_TIM_OC_EnableFast+0x4c>
 800425e:	2303      	movs	r3, #3
 8004260:	e004      	b.n	800426c <LL_TIM_OC_EnableFast+0x4c>
 8004262:	2302      	movs	r3, #2
 8004264:	e002      	b.n	800426c <LL_TIM_OC_EnableFast+0x4c>
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <LL_TIM_OC_EnableFast+0x4c>
 800426a:	2300      	movs	r3, #0
 800426c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3318      	adds	r3, #24
 8004272:	4619      	mov	r1, r3
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	4a0a      	ldr	r2, [pc, #40]	; (80042a0 <LL_TIM_OC_EnableFast+0x80>)
 8004278:	5cd3      	ldrb	r3, [r2, r3]
 800427a:	440b      	add	r3, r1
 800427c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	7bfb      	ldrb	r3, [r7, #15]
 8004284:	4907      	ldr	r1, [pc, #28]	; (80042a4 <LL_TIM_OC_EnableFast+0x84>)
 8004286:	5ccb      	ldrb	r3, [r1, r3]
 8004288:	4619      	mov	r1, r3
 800428a:	2304      	movs	r3, #4
 800428c:	408b      	lsls	r3, r1
 800428e:	431a      	orrs	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	601a      	str	r2, [r3, #0]

}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	0800b3dc 	.word	0x0800b3dc
 80042a4:	0800b3e4 	.word	0x0800b3e4

080042a8 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d01c      	beq.n	80042f2 <LL_TIM_OC_EnablePreload+0x4a>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d017      	beq.n	80042ee <LL_TIM_OC_EnablePreload+0x46>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d012      	beq.n	80042ea <LL_TIM_OC_EnablePreload+0x42>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2b40      	cmp	r3, #64	; 0x40
 80042c8:	d00d      	beq.n	80042e6 <LL_TIM_OC_EnablePreload+0x3e>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d0:	d007      	beq.n	80042e2 <LL_TIM_OC_EnablePreload+0x3a>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d8:	d101      	bne.n	80042de <LL_TIM_OC_EnablePreload+0x36>
 80042da:	2305      	movs	r3, #5
 80042dc:	e00a      	b.n	80042f4 <LL_TIM_OC_EnablePreload+0x4c>
 80042de:	2306      	movs	r3, #6
 80042e0:	e008      	b.n	80042f4 <LL_TIM_OC_EnablePreload+0x4c>
 80042e2:	2304      	movs	r3, #4
 80042e4:	e006      	b.n	80042f4 <LL_TIM_OC_EnablePreload+0x4c>
 80042e6:	2303      	movs	r3, #3
 80042e8:	e004      	b.n	80042f4 <LL_TIM_OC_EnablePreload+0x4c>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e002      	b.n	80042f4 <LL_TIM_OC_EnablePreload+0x4c>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <LL_TIM_OC_EnablePreload+0x4c>
 80042f2:	2300      	movs	r3, #0
 80042f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3318      	adds	r3, #24
 80042fa:	4619      	mov	r1, r3
 80042fc:	7bfb      	ldrb	r3, [r7, #15]
 80042fe:	4a0a      	ldr	r2, [pc, #40]	; (8004328 <LL_TIM_OC_EnablePreload+0x80>)
 8004300:	5cd3      	ldrb	r3, [r2, r3]
 8004302:	440b      	add	r3, r1
 8004304:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	4907      	ldr	r1, [pc, #28]	; (800432c <LL_TIM_OC_EnablePreload+0x84>)
 800430e:	5ccb      	ldrb	r3, [r1, r3]
 8004310:	4619      	mov	r1, r3
 8004312:	2308      	movs	r3, #8
 8004314:	408b      	lsls	r3, r1
 8004316:	431a      	orrs	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	601a      	str	r2, [r3, #0]
}
 800431c:	bf00      	nop
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	0800b3dc 	.word	0x0800b3dc
 800432c:	0800b3e4 	.word	0x0800b3e4

08004330 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004342:	f023 0307 	bic.w	r3, r3, #7
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	609a      	str	r2, [r3, #8]
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	605a      	str	r2, [r3, #4]
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	609a      	str	r2, [r3, #8]
}
 8004394:	bf00      	nop
 8004396:	370c      	adds	r7, #12
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b094      	sub	sp, #80	; 0x50
 80043a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80043a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	605a      	str	r2, [r3, #4]
 80043b0:	609a      	str	r2, [r3, #8]
 80043b2:	60da      	str	r2, [r3, #12]
 80043b4:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80043b6:	f107 031c 	add.w	r3, r7, #28
 80043ba:	2220      	movs	r2, #32
 80043bc:	2100      	movs	r1, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	f003 fa22 	bl	8007808 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c4:	1d3b      	adds	r3, r7, #4
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	605a      	str	r2, [r3, #4]
 80043cc:	609a      	str	r2, [r3, #8]
 80043ce:	60da      	str	r2, [r3, #12]
 80043d0:	611a      	str	r2, [r3, #16]
 80043d2:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80043d4:	2002      	movs	r0, #2
 80043d6:	f7ff fefb 	bl	80041d0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80043da:	2300      	movs	r3, #0
 80043dc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80043de:	2300      	movs	r3, #0
 80043e0:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 41999;
 80043e2:	f24a 430f 	movw	r3, #41999	; 0xa40f
 80043e6:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80043e8:	2300      	movs	r3, #0
 80043ea:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80043ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80043f0:	4619      	mov	r1, r3
 80043f2:	4833      	ldr	r0, [pc, #204]	; (80044c0 <MX_TIM3_Init+0x120>)
 80043f4:	f002 fc5a 	bl	8006cac <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 80043f8:	4831      	ldr	r0, [pc, #196]	; (80044c0 <MX_TIM3_Init+0x120>)
 80043fa:	f7ff ff01 	bl	8004200 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80043fe:	2100      	movs	r1, #0
 8004400:	482f      	ldr	r0, [pc, #188]	; (80044c0 <MX_TIM3_Init+0x120>)
 8004402:	f7ff ff95 	bl	8004330 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8004406:	2101      	movs	r1, #1
 8004408:	482d      	ldr	r0, [pc, #180]	; (80044c0 <MX_TIM3_Init+0x120>)
 800440a:	f7ff ff4d 	bl	80042a8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800440e:	2360      	movs	r3, #96	; 0x60
 8004410:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8004412:	2300      	movs	r3, #0
 8004414:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004416:	2300      	movs	r3, #0
 8004418:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800441a:	2300      	movs	r3, #0
 800441c:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800441e:	2300      	movs	r3, #0
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8004422:	f107 031c 	add.w	r3, r7, #28
 8004426:	461a      	mov	r2, r3
 8004428:	2101      	movs	r1, #1
 800442a:	4825      	ldr	r0, [pc, #148]	; (80044c0 <MX_TIM3_Init+0x120>)
 800442c:	f002 fcd8 	bl	8006de0 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8004430:	2101      	movs	r1, #1
 8004432:	4823      	ldr	r0, [pc, #140]	; (80044c0 <MX_TIM3_Init+0x120>)
 8004434:	f7ff fef4 	bl	8004220 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 8004438:	f44f 7180 	mov.w	r1, #256	; 0x100
 800443c:	4820      	ldr	r0, [pc, #128]	; (80044c0 <MX_TIM3_Init+0x120>)
 800443e:	f7ff ff33 	bl	80042a8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8004442:	f107 031c 	add.w	r3, r7, #28
 8004446:	461a      	mov	r2, r3
 8004448:	f44f 7180 	mov.w	r1, #256	; 0x100
 800444c:	481c      	ldr	r0, [pc, #112]	; (80044c0 <MX_TIM3_Init+0x120>)
 800444e:	f002 fcc7 	bl	8006de0 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH3);
 8004452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004456:	481a      	ldr	r0, [pc, #104]	; (80044c0 <MX_TIM3_Init+0x120>)
 8004458:	f7ff fee2 	bl	8004220 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800445c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004460:	4817      	ldr	r0, [pc, #92]	; (80044c0 <MX_TIM3_Init+0x120>)
 8004462:	f7ff ff21 	bl	80042a8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8004466:	f107 031c 	add.w	r3, r7, #28
 800446a:	461a      	mov	r2, r3
 800446c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004470:	4813      	ldr	r0, [pc, #76]	; (80044c0 <MX_TIM3_Init+0x120>)
 8004472:	f002 fcb5 	bl	8006de0 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8004476:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800447a:	4811      	ldr	r0, [pc, #68]	; (80044c0 <MX_TIM3_Init+0x120>)
 800447c:	f7ff fed0 	bl	8004220 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8004480:	2100      	movs	r1, #0
 8004482:	480f      	ldr	r0, [pc, #60]	; (80044c0 <MX_TIM3_Init+0x120>)
 8004484:	f7ff ff69 	bl	800435a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8004488:	480d      	ldr	r0, [pc, #52]	; (80044c0 <MX_TIM3_Init+0x120>)
 800448a:	f7ff ff79 	bl	8004380 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800448e:	2002      	movs	r0, #2
 8004490:	f7ff fe86 	bl	80041a0 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4;
 8004494:	2313      	movs	r3, #19
 8004496:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004498:	2302      	movs	r3, #2
 800449a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80044a8:	2302      	movs	r3, #2
 80044aa:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ac:	1d3b      	adds	r3, r7, #4
 80044ae:	4619      	mov	r1, r3
 80044b0:	4804      	ldr	r0, [pc, #16]	; (80044c4 <MX_TIM3_Init+0x124>)
 80044b2:	f002 f965 	bl	8006780 <LL_GPIO_Init>

}
 80044b6:	bf00      	nop
 80044b8:	3750      	adds	r7, #80	; 0x50
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40000400 	.word	0x40000400
 80044c4:	40020400 	.word	0x40020400

080044c8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b094      	sub	sp, #80	; 0x50
 80044cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80044ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	605a      	str	r2, [r3, #4]
 80044d8:	609a      	str	r2, [r3, #8]
 80044da:	60da      	str	r2, [r3, #12]
 80044dc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80044de:	f107 031c 	add.w	r3, r7, #28
 80044e2:	2220      	movs	r2, #32
 80044e4:	2100      	movs	r1, #0
 80044e6:	4618      	mov	r0, r3
 80044e8:	f003 f98e 	bl	8007808 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ec:	1d3b      	adds	r3, r7, #4
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	605a      	str	r2, [r3, #4]
 80044f4:	609a      	str	r2, [r3, #8]
 80044f6:	60da      	str	r2, [r3, #12]
 80044f8:	611a      	str	r2, [r3, #16]
 80044fa:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 80044fc:	2008      	movs	r0, #8
 80044fe:	f7ff fe67 	bl	80041d0 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8004502:	2300      	movs	r3, #0
 8004504:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8004506:	2300      	movs	r3, #0
 8004508:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 41999;
 800450a:	f24a 430f 	movw	r3, #41999	; 0xa40f
 800450e:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8004510:	2300      	movs	r3, #0
 8004512:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8004514:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004518:	4619      	mov	r1, r3
 800451a:	482b      	ldr	r0, [pc, #172]	; (80045c8 <MX_TIM5_Init+0x100>)
 800451c:	f002 fbc6 	bl	8006cac <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 8004520:	4829      	ldr	r0, [pc, #164]	; (80045c8 <MX_TIM5_Init+0x100>)
 8004522:	f7ff fe6d 	bl	8004200 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8004526:	2100      	movs	r1, #0
 8004528:	4827      	ldr	r0, [pc, #156]	; (80045c8 <MX_TIM5_Init+0x100>)
 800452a:	f7ff ff01 	bl	8004330 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 800452e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004532:	4825      	ldr	r0, [pc, #148]	; (80045c8 <MX_TIM5_Init+0x100>)
 8004534:	f7ff feb8 	bl	80042a8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8004538:	2360      	movs	r3, #96	; 0x60
 800453a:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800453c:	2300      	movs	r3, #0
 800453e:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8004540:	2300      	movs	r3, #0
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8004544:	2300      	movs	r3, #0
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8004548:	2300      	movs	r3, #0
 800454a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800454c:	f107 031c 	add.w	r3, r7, #28
 8004550:	461a      	mov	r2, r3
 8004552:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004556:	481c      	ldr	r0, [pc, #112]	; (80045c8 <MX_TIM5_Init+0x100>)
 8004558:	f002 fc42 	bl	8006de0 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 800455c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004560:	4819      	ldr	r0, [pc, #100]	; (80045c8 <MX_TIM5_Init+0x100>)
 8004562:	f7ff fe5d 	bl	8004220 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 8004566:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800456a:	4817      	ldr	r0, [pc, #92]	; (80045c8 <MX_TIM5_Init+0x100>)
 800456c:	f7ff fe9c 	bl	80042a8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8004570:	f107 031c 	add.w	r3, r7, #28
 8004574:	461a      	mov	r2, r3
 8004576:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800457a:	4813      	ldr	r0, [pc, #76]	; (80045c8 <MX_TIM5_Init+0x100>)
 800457c:	f002 fc30 	bl	8006de0 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 8004580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004584:	4810      	ldr	r0, [pc, #64]	; (80045c8 <MX_TIM5_Init+0x100>)
 8004586:	f7ff fe4b 	bl	8004220 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 800458a:	2100      	movs	r1, #0
 800458c:	480e      	ldr	r0, [pc, #56]	; (80045c8 <MX_TIM5_Init+0x100>)
 800458e:	f7ff fee4 	bl	800435a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8004592:	480d      	ldr	r0, [pc, #52]	; (80045c8 <MX_TIM5_Init+0x100>)
 8004594:	f7ff fef4 	bl	8004380 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004598:	2001      	movs	r0, #1
 800459a:	f7ff fe01 	bl	80041a0 <LL_AHB1_GRP1_EnableClock>
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800459e:	230c      	movs	r3, #12
 80045a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80045a2:	2302      	movs	r3, #2
 80045a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80045b2:	2302      	movs	r3, #2
 80045b4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b6:	1d3b      	adds	r3, r7, #4
 80045b8:	4619      	mov	r1, r3
 80045ba:	4804      	ldr	r0, [pc, #16]	; (80045cc <MX_TIM5_Init+0x104>)
 80045bc:	f002 f8e0 	bl	8006780 <LL_GPIO_Init>

}
 80045c0:	bf00      	nop
 80045c2:	3750      	adds	r7, #80	; 0x50
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40000c00 	.word	0x40000c00
 80045cc:	40020000 	.word	0x40020000

080045d0 <__NVIC_GetPriorityGrouping>:
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045d4:	4b04      	ldr	r3, [pc, #16]	; (80045e8 <__NVIC_GetPriorityGrouping+0x18>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	0a1b      	lsrs	r3, r3, #8
 80045da:	f003 0307 	and.w	r3, r3, #7
}
 80045de:	4618      	mov	r0, r3
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	e000ed00 	.word	0xe000ed00

080045ec <__NVIC_EnableIRQ>:
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	4603      	mov	r3, r0
 80045f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	db0b      	blt.n	8004616 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	f003 021f 	and.w	r2, r3, #31
 8004604:	4907      	ldr	r1, [pc, #28]	; (8004624 <__NVIC_EnableIRQ+0x38>)
 8004606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460a:	095b      	lsrs	r3, r3, #5
 800460c:	2001      	movs	r0, #1
 800460e:	fa00 f202 	lsl.w	r2, r0, r2
 8004612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	e000e100 	.word	0xe000e100

08004628 <__NVIC_SetPriority>:
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	6039      	str	r1, [r7, #0]
 8004632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004638:	2b00      	cmp	r3, #0
 800463a:	db0a      	blt.n	8004652 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	b2da      	uxtb	r2, r3
 8004640:	490c      	ldr	r1, [pc, #48]	; (8004674 <__NVIC_SetPriority+0x4c>)
 8004642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004646:	0112      	lsls	r2, r2, #4
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	440b      	add	r3, r1
 800464c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004650:	e00a      	b.n	8004668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	4908      	ldr	r1, [pc, #32]	; (8004678 <__NVIC_SetPriority+0x50>)
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	3b04      	subs	r3, #4
 8004660:	0112      	lsls	r2, r2, #4
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	440b      	add	r3, r1
 8004666:	761a      	strb	r2, [r3, #24]
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	e000e100 	.word	0xe000e100
 8004678:	e000ed00 	.word	0xe000ed00

0800467c <NVIC_EncodePriority>:
{
 800467c:	b480      	push	{r7}
 800467e:	b089      	sub	sp, #36	; 0x24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f1c3 0307 	rsb	r3, r3, #7
 8004696:	2b04      	cmp	r3, #4
 8004698:	bf28      	it	cs
 800469a:	2304      	movcs	r3, #4
 800469c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	3304      	adds	r3, #4
 80046a2:	2b06      	cmp	r3, #6
 80046a4:	d902      	bls.n	80046ac <NVIC_EncodePriority+0x30>
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	3b03      	subs	r3, #3
 80046aa:	e000      	b.n	80046ae <NVIC_EncodePriority+0x32>
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	43da      	mvns	r2, r3
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	401a      	ands	r2, r3
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	fa01 f303 	lsl.w	r3, r1, r3
 80046ce:	43d9      	mvns	r1, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046d4:	4313      	orrs	r3, r2
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3724      	adds	r7, #36	; 0x24
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
	...

080046e4 <LL_DMA_SetDataTransferDirection>:
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80046f0:	4a0d      	ldr	r2, [pc, #52]	; (8004728 <LL_DMA_SetDataTransferDirection+0x44>)
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	4413      	add	r3, r2
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4413      	add	r3, r2
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004704:	4908      	ldr	r1, [pc, #32]	; (8004728 <LL_DMA_SetDataTransferDirection+0x44>)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	440b      	add	r3, r1
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	4619      	mov	r1, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	440b      	add	r3, r1
 8004712:	4619      	mov	r1, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4313      	orrs	r3, r2
 8004718:	600b      	str	r3, [r1, #0]
}
 800471a:	bf00      	nop
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	0800b3ec 	.word	0x0800b3ec

0800472c <LL_DMA_SetMode>:
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8004738:	4a0d      	ldr	r2, [pc, #52]	; (8004770 <LL_DMA_SetMode+0x44>)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4413      	add	r3, r2
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4413      	add	r3, r2
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 800474c:	4908      	ldr	r1, [pc, #32]	; (8004770 <LL_DMA_SetMode+0x44>)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	440b      	add	r3, r1
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	4619      	mov	r1, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	440b      	add	r3, r1
 800475a:	4619      	mov	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4313      	orrs	r3, r2
 8004760:	600b      	str	r3, [r1, #0]
}
 8004762:	bf00      	nop
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	0800b3ec 	.word	0x0800b3ec

08004774 <LL_DMA_SetPeriphIncMode>:
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8004780:	4a0d      	ldr	r2, [pc, #52]	; (80047b8 <LL_DMA_SetPeriphIncMode+0x44>)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	4413      	add	r3, r2
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	461a      	mov	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4413      	add	r3, r2
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004794:	4908      	ldr	r1, [pc, #32]	; (80047b8 <LL_DMA_SetPeriphIncMode+0x44>)
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	440b      	add	r3, r1
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	4619      	mov	r1, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	440b      	add	r3, r1
 80047a2:	4619      	mov	r1, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	600b      	str	r3, [r1, #0]
}
 80047aa:	bf00      	nop
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	0800b3ec 	.word	0x0800b3ec

080047bc <LL_DMA_SetMemoryIncMode>:
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80047c8:	4a0d      	ldr	r2, [pc, #52]	; (8004800 <LL_DMA_SetMemoryIncMode+0x44>)
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	4413      	add	r3, r2
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	461a      	mov	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	4413      	add	r3, r2
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80047dc:	4908      	ldr	r1, [pc, #32]	; (8004800 <LL_DMA_SetMemoryIncMode+0x44>)
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	440b      	add	r3, r1
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	4619      	mov	r1, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	440b      	add	r3, r1
 80047ea:	4619      	mov	r1, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]
}
 80047f2:	bf00      	nop
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	0800b3ec 	.word	0x0800b3ec

08004804 <LL_DMA_SetPeriphSize>:
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8004810:	4a0d      	ldr	r2, [pc, #52]	; (8004848 <LL_DMA_SetPeriphSize+0x44>)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	4413      	add	r3, r2
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	461a      	mov	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4413      	add	r3, r2
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004824:	4908      	ldr	r1, [pc, #32]	; (8004848 <LL_DMA_SetPeriphSize+0x44>)
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	440b      	add	r3, r1
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	4619      	mov	r1, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	440b      	add	r3, r1
 8004832:	4619      	mov	r1, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]
}
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	0800b3ec 	.word	0x0800b3ec

0800484c <LL_DMA_SetMemorySize>:
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8004858:	4a0d      	ldr	r2, [pc, #52]	; (8004890 <LL_DMA_SetMemorySize+0x44>)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	4413      	add	r3, r2
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	4413      	add	r3, r2
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 800486c:	4908      	ldr	r1, [pc, #32]	; (8004890 <LL_DMA_SetMemorySize+0x44>)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	440b      	add	r3, r1
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	4619      	mov	r1, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	440b      	add	r3, r1
 800487a:	4619      	mov	r1, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4313      	orrs	r3, r2
 8004880:	600b      	str	r3, [r1, #0]
}
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	0800b3ec 	.word	0x0800b3ec

08004894 <LL_DMA_SetStreamPriorityLevel>:
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80048a0:	4a0d      	ldr	r2, [pc, #52]	; (80048d8 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	4413      	add	r3, r2
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	461a      	mov	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4413      	add	r3, r2
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048b4:	4908      	ldr	r1, [pc, #32]	; (80048d8 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	440b      	add	r3, r1
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	4619      	mov	r1, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	440b      	add	r3, r1
 80048c2:	4619      	mov	r1, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	600b      	str	r3, [r1, #0]
}
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	0800b3ec 	.word	0x0800b3ec

080048dc <LL_DMA_SetChannelSelection>:
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80048e8:	4a0d      	ldr	r2, [pc, #52]	; (8004920 <LL_DMA_SetChannelSelection+0x44>)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	4413      	add	r3, r2
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4413      	add	r3, r2
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80048fc:	4908      	ldr	r1, [pc, #32]	; (8004920 <LL_DMA_SetChannelSelection+0x44>)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	440b      	add	r3, r1
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	4619      	mov	r1, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	440b      	add	r3, r1
 800490a:	4619      	mov	r1, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4313      	orrs	r3, r2
 8004910:	600b      	str	r3, [r1, #0]
}
 8004912:	bf00      	nop
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	0800b3ec 	.word	0x0800b3ec

08004924 <LL_DMA_DisableFifoMode>:
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800492e:	4a0c      	ldr	r2, [pc, #48]	; (8004960 <LL_DMA_DisableFifoMode+0x3c>)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	4413      	add	r3, r2
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	4413      	add	r3, r2
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	4908      	ldr	r1, [pc, #32]	; (8004960 <LL_DMA_DisableFifoMode+0x3c>)
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	440a      	add	r2, r1
 8004944:	7812      	ldrb	r2, [r2, #0]
 8004946:	4611      	mov	r1, r2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	440a      	add	r2, r1
 800494c:	f023 0304 	bic.w	r3, r3, #4
 8004950:	6153      	str	r3, [r2, #20]
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	0800b3ec 	.word	0x0800b3ec

08004964 <LL_AHB1_GRP1_EnableClock>:
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800496c:	4b08      	ldr	r3, [pc, #32]	; (8004990 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800496e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004970:	4907      	ldr	r1, [pc, #28]	; (8004990 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4313      	orrs	r3, r2
 8004976:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800497a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4013      	ands	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004982:	68fb      	ldr	r3, [r7, #12]
}
 8004984:	bf00      	nop
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	40023800 	.word	0x40023800

08004994 <LL_APB1_GRP1_EnableClock>:
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800499c:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800499e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049a0:	4907      	ldr	r1, [pc, #28]	; (80049c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80049a8:	4b05      	ldr	r3, [pc, #20]	; (80049c0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80049aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4013      	ands	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80049b2:	68fb      	ldr	r3, [r7, #12]
}
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	40023800 	.word	0x40023800

080049c4 <LL_APB2_GRP1_EnableClock>:
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80049cc:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80049ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049d0:	4907      	ldr	r1, [pc, #28]	; (80049f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80049d8:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80049da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4013      	ands	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80049e2:	68fb      	ldr	r3, [r7, #12]
}
 80049e4:	bf00      	nop
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	40023800 	.word	0x40023800

080049f4 <LL_USART_Enable>:
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	60da      	str	r2, [r3, #12]
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <LL_USART_ConfigAsyncMode>:
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	615a      	str	r2, [r3, #20]
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <LL_USART_ConfigHalfDuplexMode>:
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f023 0222 	bic.w	r2, r3, #34	; 0x22
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	615a      	str	r2, [r3, #20]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f043 0208 	orr.w	r2, r3, #8
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	615a      	str	r2, [r3, #20]
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <LL_USART_IsActiveFlag_TXE>:
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a88:	2b80      	cmp	r3, #128	; 0x80
 8004a8a:	bf0c      	ite	eq
 8004a8c:	2301      	moveq	r3, #1
 8004a8e:	2300      	movne	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8004aaa:	78fa      	ldrb	r2, [r7, #3]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	605a      	str	r2, [r3, #4]
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08e      	sub	sp, #56	; 0x38
 8004ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004ac2:	f107 031c 	add.w	r3, r7, #28
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	605a      	str	r2, [r3, #4]
 8004acc:	609a      	str	r2, [r3, #8]
 8004ace:	60da      	str	r2, [r3, #12]
 8004ad0:	611a      	str	r2, [r3, #16]
 8004ad2:	615a      	str	r2, [r3, #20]
 8004ad4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ad6:	1d3b      	adds	r3, r7, #4
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	605a      	str	r2, [r3, #4]
 8004ade:	609a      	str	r2, [r3, #8]
 8004ae0:	60da      	str	r2, [r3, #12]
 8004ae2:	611a      	str	r2, [r3, #16]
 8004ae4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8004ae6:	2010      	movs	r0, #16
 8004ae8:	f7ff ff6c 	bl	80049c4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004aec:	2001      	movs	r0, #1
 8004aee:	f7ff ff39 	bl	8004964 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8004af2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004af6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004af8:	2302      	movs	r3, #2
 8004afa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004afc:	2303      	movs	r3, #3
 8004afe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004b00:	2301      	movs	r3, #1
 8004b02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004b08:	2307      	movs	r3, #7
 8004b0a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b0c:	1d3b      	adds	r3, r7, #4
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4817      	ldr	r0, [pc, #92]	; (8004b70 <MX_USART1_UART_Init+0xb4>)
 8004b12:	f001 fe35 	bl	8006780 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004b16:	f7ff fd5b 	bl	80045d0 <__NVIC_GetPriorityGrouping>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2100      	movs	r1, #0
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff fdab 	bl	800467c <NVIC_EncodePriority>
 8004b26:	4603      	mov	r3, r0
 8004b28:	4619      	mov	r1, r3
 8004b2a:	2025      	movs	r0, #37	; 0x25
 8004b2c:	f7ff fd7c 	bl	8004628 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8004b30:	2025      	movs	r0, #37	; 0x25
 8004b32:	f7ff fd5b 	bl	80045ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 100000;
 8004b36:	4b0f      	ldr	r3, [pc, #60]	; (8004b74 <MX_USART1_UART_Init+0xb8>)
 8004b38:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_2;
 8004b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004b44:	2300      	movs	r3, #0
 8004b46:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004b48:	230c      	movs	r3, #12
 8004b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8004b50:	f107 031c 	add.w	r3, r7, #28
 8004b54:	4619      	mov	r1, r3
 8004b56:	4808      	ldr	r0, [pc, #32]	; (8004b78 <MX_USART1_UART_Init+0xbc>)
 8004b58:	f002 fd8e 	bl	8007678 <LL_USART_Init>
  LL_USART_Enable(USART1);
 8004b5c:	4806      	ldr	r0, [pc, #24]	; (8004b78 <MX_USART1_UART_Init+0xbc>)
 8004b5e:	f7ff ff49 	bl	80049f4 <LL_USART_Enable>
  LL_USART_ConfigHalfDuplexMode(USART1);
 8004b62:	4805      	ldr	r0, [pc, #20]	; (8004b78 <MX_USART1_UART_Init+0xbc>)
 8004b64:	f7ff ff6c 	bl	8004a40 <LL_USART_ConfigHalfDuplexMode>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004b68:	bf00      	nop
 8004b6a:	3738      	adds	r7, #56	; 0x38
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40020000 	.word	0x40020000
 8004b74:	000186a0 	.word	0x000186a0
 8004b78:	40011000 	.word	0x40011000

08004b7c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08e      	sub	sp, #56	; 0x38
 8004b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004b82:	f107 031c 	add.w	r3, r7, #28
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	605a      	str	r2, [r3, #4]
 8004b8c:	609a      	str	r2, [r3, #8]
 8004b8e:	60da      	str	r2, [r3, #12]
 8004b90:	611a      	str	r2, [r3, #16]
 8004b92:	615a      	str	r2, [r3, #20]
 8004b94:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b96:	1d3b      	adds	r3, r7, #4
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	605a      	str	r2, [r3, #4]
 8004b9e:	609a      	str	r2, [r3, #8]
 8004ba0:	60da      	str	r2, [r3, #12]
 8004ba2:	611a      	str	r2, [r3, #16]
 8004ba4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8004ba6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004baa:	f7ff fef3 	bl	8004994 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004bae:	2002      	movs	r0, #2
 8004bb0:	f7ff fed8 	bl	8004964 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = UART3_GPS_TX_Pin|UART3_GPS_RX_Pin;
 8004bb4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004bb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004bba:	2302      	movs	r3, #2
 8004bbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8004bca:	2307      	movs	r3, #7
 8004bcc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bce:	1d3b      	adds	r3, r7, #4
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4830      	ldr	r0, [pc, #192]	; (8004c94 <MX_USART3_UART_Init+0x118>)
 8004bd4:	f001 fdd4 	bl	8006780 <LL_GPIO_Init>

  /* USART3 DMA Init */

  /* USART3_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_1, LL_DMA_CHANNEL_4);
 8004bd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bdc:	2101      	movs	r1, #1
 8004bde:	482e      	ldr	r0, [pc, #184]	; (8004c98 <MX_USART3_UART_Init+0x11c>)
 8004be0:	f7ff fe7c 	bl	80048dc <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8004be4:	2200      	movs	r2, #0
 8004be6:	2101      	movs	r1, #1
 8004be8:	482b      	ldr	r0, [pc, #172]	; (8004c98 <MX_USART3_UART_Init+0x11c>)
 8004bea:	f7ff fd7b 	bl	80046e4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 8004bee:	2200      	movs	r2, #0
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	4829      	ldr	r0, [pc, #164]	; (8004c98 <MX_USART3_UART_Init+0x11c>)
 8004bf4:	f7ff fe4e 	bl	8004894 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 8004bf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	4826      	ldr	r0, [pc, #152]	; (8004c98 <MX_USART3_UART_Init+0x11c>)
 8004c00:	f7ff fd94 	bl	800472c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 8004c04:	2200      	movs	r2, #0
 8004c06:	2101      	movs	r1, #1
 8004c08:	4823      	ldr	r0, [pc, #140]	; (8004c98 <MX_USART3_UART_Init+0x11c>)
 8004c0a:	f7ff fdb3 	bl	8004774 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 8004c0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c12:	2101      	movs	r1, #1
 8004c14:	4820      	ldr	r0, [pc, #128]	; (8004c98 <MX_USART3_UART_Init+0x11c>)
 8004c16:	f7ff fdd1 	bl	80047bc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	481e      	ldr	r0, [pc, #120]	; (8004c98 <MX_USART3_UART_Init+0x11c>)
 8004c20:	f7ff fdf0 	bl	8004804 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 8004c24:	2200      	movs	r2, #0
 8004c26:	2101      	movs	r1, #1
 8004c28:	481b      	ldr	r0, [pc, #108]	; (8004c98 <MX_USART3_UART_Init+0x11c>)
 8004c2a:	f7ff fe0f 	bl	800484c <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_1);
 8004c2e:	2101      	movs	r1, #1
 8004c30:	4819      	ldr	r0, [pc, #100]	; (8004c98 <MX_USART3_UART_Init+0x11c>)
 8004c32:	f7ff fe77 	bl	8004924 <LL_DMA_DisableFifoMode>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004c36:	f7ff fccb 	bl	80045d0 <__NVIC_GetPriorityGrouping>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2100      	movs	r1, #0
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff fd1b 	bl	800467c <NVIC_EncodePriority>
 8004c46:	4603      	mov	r3, r0
 8004c48:	4619      	mov	r1, r3
 8004c4a:	2027      	movs	r0, #39	; 0x27
 8004c4c:	f7ff fcec 	bl	8004628 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8004c50:	2027      	movs	r0, #39	; 0x27
 8004c52:	f7ff fccb 	bl	80045ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */


  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8004c56:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004c5a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004c60:	2300      	movs	r3, #0
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004c64:	2300      	movs	r3, #0
 8004c66:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004c68:	230c      	movs	r3, #12
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004c70:	2300      	movs	r3, #0
 8004c72:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8004c74:	f107 031c 	add.w	r3, r7, #28
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4808      	ldr	r0, [pc, #32]	; (8004c9c <MX_USART3_UART_Init+0x120>)
 8004c7c:	f002 fcfc 	bl	8007678 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8004c80:	4806      	ldr	r0, [pc, #24]	; (8004c9c <MX_USART3_UART_Init+0x120>)
 8004c82:	f7ff fec7 	bl	8004a14 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8004c86:	4805      	ldr	r0, [pc, #20]	; (8004c9c <MX_USART3_UART_Init+0x120>)
 8004c88:	f7ff feb4 	bl	80049f4 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004c8c:	bf00      	nop
 8004c8e:	3738      	adds	r7, #56	; 0x38
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40020400 	.word	0x40020400
 8004c98:	40026000 	.word	0x40026000
 8004c9c:	40004800 	.word	0x40004800

08004ca0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08e      	sub	sp, #56	; 0x38
 8004ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004ca6:	f107 031c 	add.w	r3, r7, #28
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	605a      	str	r2, [r3, #4]
 8004cb0:	609a      	str	r2, [r3, #8]
 8004cb2:	60da      	str	r2, [r3, #12]
 8004cb4:	611a      	str	r2, [r3, #16]
 8004cb6:	615a      	str	r2, [r3, #20]
 8004cb8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cba:	1d3b      	adds	r3, r7, #4
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	605a      	str	r2, [r3, #4]
 8004cc2:	609a      	str	r2, [r3, #8]
 8004cc4:	60da      	str	r2, [r3, #12]
 8004cc6:	611a      	str	r2, [r3, #16]
 8004cc8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8004cca:	2020      	movs	r0, #32
 8004ccc:	f7ff fe7a 	bl	80049c4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004cd0:	2004      	movs	r0, #4
 8004cd2:	f7ff fe47 	bl	8004964 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8004cd6:	23c0      	movs	r3, #192	; 0xc0
 8004cd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004cda:	2302      	movs	r3, #2
 8004cdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8004cea:	2308      	movs	r3, #8
 8004cec:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cee:	1d3b      	adds	r3, r7, #4
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4819      	ldr	r0, [pc, #100]	; (8004d58 <MX_USART6_UART_Init+0xb8>)
 8004cf4:	f001 fd44 	bl	8006780 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004cf8:	f7ff fc6a 	bl	80045d0 <__NVIC_GetPriorityGrouping>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2100      	movs	r1, #0
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff fcba 	bl	800467c <NVIC_EncodePriority>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	2047      	movs	r0, #71	; 0x47
 8004d0e:	f7ff fc8b 	bl	8004628 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8004d12:	2047      	movs	r0, #71	; 0x47
 8004d14:	f7ff fc6a 	bl	80045ec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8004d18:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004d1c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004d22:	2300      	movs	r3, #0
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004d26:	2300      	movs	r3, #0
 8004d28:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8004d2a:	230c      	movs	r3, #12
 8004d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004d32:	2300      	movs	r3, #0
 8004d34:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8004d36:	f107 031c 	add.w	r3, r7, #28
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4807      	ldr	r0, [pc, #28]	; (8004d5c <MX_USART6_UART_Init+0xbc>)
 8004d3e:	f002 fc9b 	bl	8007678 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8004d42:	4806      	ldr	r0, [pc, #24]	; (8004d5c <MX_USART6_UART_Init+0xbc>)
 8004d44:	f7ff fe66 	bl	8004a14 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8004d48:	4804      	ldr	r0, [pc, #16]	; (8004d5c <MX_USART6_UART_Init+0xbc>)
 8004d4a:	f7ff fe53 	bl	80049f4 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004d4e:	bf00      	nop
 8004d50:	3738      	adds	r7, #56	; 0x38
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40020800 	.word	0x40020800
 8004d5c:	40011400 	.word	0x40011400

08004d60 <_write>:

/* USER CODE BEGIN 1 */
int _write(int file, char* p, int len)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	e011      	b.n	8004d96 <_write+0x36>
	{
		LL_USART_TransmitData8(USART6, *(p+i));
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	4413      	add	r3, r2
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	480a      	ldr	r0, [pc, #40]	; (8004da8 <_write+0x48>)
 8004d7e:	f7ff fe8e 	bl	8004a9e <LL_USART_TransmitData8>
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8004d82:	bf00      	nop
 8004d84:	4808      	ldr	r0, [pc, #32]	; (8004da8 <_write+0x48>)
 8004d86:	f7ff fe77 	bl	8004a78 <LL_USART_IsActiveFlag_TXE>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0f9      	beq.n	8004d84 <_write+0x24>
	for(int i=0;i<len;i++)
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	3301      	adds	r3, #1
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	697a      	ldr	r2, [r7, #20]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	dbe9      	blt.n	8004d72 <_write+0x12>
//		usDelay(100);	// 문자 1개 출력당 약 100us 소요, Float, int형 차이 없음
	}
	return len;
 8004d9e:	687b      	ldr	r3, [r7, #4]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40011400 	.word	0x40011400

08004dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004de4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004db0:	480d      	ldr	r0, [pc, #52]	; (8004de8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004db2:	490e      	ldr	r1, [pc, #56]	; (8004dec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004db4:	4a0e      	ldr	r2, [pc, #56]	; (8004df0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004db8:	e002      	b.n	8004dc0 <LoopCopyDataInit>

08004dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dbe:	3304      	adds	r3, #4

08004dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004dc4:	d3f9      	bcc.n	8004dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004dc6:	4a0b      	ldr	r2, [pc, #44]	; (8004df4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004dc8:	4c0b      	ldr	r4, [pc, #44]	; (8004df8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004dcc:	e001      	b.n	8004dd2 <LoopFillZerobss>

08004dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004dd0:	3204      	adds	r2, #4

08004dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004dd4:	d3fb      	bcc.n	8004dce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004dd6:	f7ff f9d1 	bl	800417c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004dda:	f002 fce3 	bl	80077a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004dde:	f7fe fb1b 	bl	8003418 <main>
  bx  lr    
 8004de2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004dec:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8004df0:	0800b81c 	.word	0x0800b81c
  ldr r2, =_sbss
 8004df4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004df8:	20000760 	.word	0x20000760

08004dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004dfc:	e7fe      	b.n	8004dfc <ADC_IRQHandler>
	...

08004e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e04:	4b0e      	ldr	r3, [pc, #56]	; (8004e40 <HAL_Init+0x40>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a0d      	ldr	r2, [pc, #52]	; (8004e40 <HAL_Init+0x40>)
 8004e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <HAL_Init+0x40>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a0a      	ldr	r2, [pc, #40]	; (8004e40 <HAL_Init+0x40>)
 8004e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e1c:	4b08      	ldr	r3, [pc, #32]	; (8004e40 <HAL_Init+0x40>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a07      	ldr	r2, [pc, #28]	; (8004e40 <HAL_Init+0x40>)
 8004e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e28:	2003      	movs	r0, #3
 8004e2a:	f000 fd3d 	bl	80058a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e2e:	200f      	movs	r0, #15
 8004e30:	f000 f808 	bl	8004e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e34:	f7fe fef8 	bl	8003c28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	40023c00 	.word	0x40023c00

08004e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e4c:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <HAL_InitTick+0x54>)
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <HAL_InitTick+0x58>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	4619      	mov	r1, r3
 8004e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fd55 	bl	8005912 <HAL_SYSTICK_Config>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e00e      	b.n	8004e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b0f      	cmp	r3, #15
 8004e76:	d80a      	bhi.n	8004e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e78:	2200      	movs	r2, #0
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e80:	f000 fd1d 	bl	80058be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e84:	4a06      	ldr	r2, [pc, #24]	; (8004ea0 <HAL_InitTick+0x5c>)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	e000      	b.n	8004e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	20000014 	.word	0x20000014
 8004e9c:	2000001c 	.word	0x2000001c
 8004ea0:	20000018 	.word	0x20000018

08004ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ea8:	4b06      	ldr	r3, [pc, #24]	; (8004ec4 <HAL_IncTick+0x20>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	461a      	mov	r2, r3
 8004eae:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <HAL_IncTick+0x24>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	4a04      	ldr	r2, [pc, #16]	; (8004ec8 <HAL_IncTick+0x24>)
 8004eb6:	6013      	str	r3, [r2, #0]
}
 8004eb8:	bf00      	nop
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	2000001c 	.word	0x2000001c
 8004ec8:	2000075c 	.word	0x2000075c

08004ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  return uwTick;
 8004ed0:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <HAL_GetTick+0x14>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	2000075c 	.word	0x2000075c

08004ee4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e033      	b.n	8004f62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d109      	bne.n	8004f16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7fd fd9c 	bl	8002a40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	f003 0310 	and.w	r3, r3, #16
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d118      	bne.n	8004f54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004f2a:	f023 0302 	bic.w	r3, r3, #2
 8004f2e:	f043 0202 	orr.w	r2, r3, #2
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fa68 	bl	800540c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f46:	f023 0303 	bic.w	r3, r3, #3
 8004f4a:	f043 0201 	orr.w	r2, r3, #1
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	641a      	str	r2, [r3, #64]	; 0x40
 8004f52:	e001      	b.n	8004f58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
	...

08004f6c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d101      	bne.n	8004f8a <HAL_ADC_Start_DMA+0x1e>
 8004f86:	2302      	movs	r3, #2
 8004f88:	e0e9      	b.n	800515e <HAL_ADC_Start_DMA+0x1f2>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d018      	beq.n	8004fd2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004fb0:	4b6d      	ldr	r3, [pc, #436]	; (8005168 <HAL_ADC_Start_DMA+0x1fc>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a6d      	ldr	r2, [pc, #436]	; (800516c <HAL_ADC_Start_DMA+0x200>)
 8004fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fba:	0c9a      	lsrs	r2, r3, #18
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	4413      	add	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004fc4:	e002      	b.n	8004fcc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1f9      	bne.n	8004fc6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fe0:	d107      	bne.n	8004ff2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ff0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	f040 80a1 	bne.w	8005144 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800500a:	f023 0301 	bic.w	r3, r3, #1
 800500e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005020:	2b00      	cmp	r3, #0
 8005022:	d007      	beq.n	8005034 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800502c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800503c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005040:	d106      	bne.n	8005050 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005046:	f023 0206 	bic.w	r2, r3, #6
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	645a      	str	r2, [r3, #68]	; 0x44
 800504e:	e002      	b.n	8005056 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800505e:	4b44      	ldr	r3, [pc, #272]	; (8005170 <HAL_ADC_Start_DMA+0x204>)
 8005060:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	4a43      	ldr	r2, [pc, #268]	; (8005174 <HAL_ADC_Start_DMA+0x208>)
 8005068:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	4a42      	ldr	r2, [pc, #264]	; (8005178 <HAL_ADC_Start_DMA+0x20c>)
 8005070:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	4a41      	ldr	r2, [pc, #260]	; (800517c <HAL_ADC_Start_DMA+0x210>)
 8005078:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005082:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005092:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050a2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	334c      	adds	r3, #76	; 0x4c
 80050ae:	4619      	mov	r1, r3
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f000 fce8 	bl	8005a88 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f003 031f 	and.w	r3, r3, #31
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d12a      	bne.n	800511a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a2d      	ldr	r2, [pc, #180]	; (8005180 <HAL_ADC_Start_DMA+0x214>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d015      	beq.n	80050fa <HAL_ADC_Start_DMA+0x18e>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a2c      	ldr	r2, [pc, #176]	; (8005184 <HAL_ADC_Start_DMA+0x218>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d105      	bne.n	80050e4 <HAL_ADC_Start_DMA+0x178>
 80050d8:	4b25      	ldr	r3, [pc, #148]	; (8005170 <HAL_ADC_Start_DMA+0x204>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f003 031f 	and.w	r3, r3, #31
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00a      	beq.n	80050fa <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a27      	ldr	r2, [pc, #156]	; (8005188 <HAL_ADC_Start_DMA+0x21c>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d136      	bne.n	800515c <HAL_ADC_Start_DMA+0x1f0>
 80050ee:	4b20      	ldr	r3, [pc, #128]	; (8005170 <HAL_ADC_Start_DMA+0x204>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f003 0310 	and.w	r3, r3, #16
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d130      	bne.n	800515c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d129      	bne.n	800515c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005116:	609a      	str	r2, [r3, #8]
 8005118:	e020      	b.n	800515c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a18      	ldr	r2, [pc, #96]	; (8005180 <HAL_ADC_Start_DMA+0x214>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d11b      	bne.n	800515c <HAL_ADC_Start_DMA+0x1f0>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d114      	bne.n	800515c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005140:	609a      	str	r2, [r3, #8]
 8005142:	e00b      	b.n	800515c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005148:	f043 0210 	orr.w	r2, r3, #16
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005154:	f043 0201 	orr.w	r2, r3, #1
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000014 	.word	0x20000014
 800516c:	431bde83 	.word	0x431bde83
 8005170:	40012300 	.word	0x40012300
 8005174:	08005605 	.word	0x08005605
 8005178:	080056bf 	.word	0x080056bf
 800517c:	080056db 	.word	0x080056db
 8005180:	40012000 	.word	0x40012000
 8005184:	40012100 	.word	0x40012100
 8005188:	40012200 	.word	0x40012200

0800518c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d101      	bne.n	80051e4 <HAL_ADC_ConfigChannel+0x1c>
 80051e0:	2302      	movs	r3, #2
 80051e2:	e105      	b.n	80053f0 <HAL_ADC_ConfigChannel+0x228>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b09      	cmp	r3, #9
 80051f2:	d925      	bls.n	8005240 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68d9      	ldr	r1, [r3, #12]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	461a      	mov	r2, r3
 8005202:	4613      	mov	r3, r2
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	4413      	add	r3, r2
 8005208:	3b1e      	subs	r3, #30
 800520a:	2207      	movs	r2, #7
 800520c:	fa02 f303 	lsl.w	r3, r2, r3
 8005210:	43da      	mvns	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	400a      	ands	r2, r1
 8005218:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68d9      	ldr	r1, [r3, #12]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	b29b      	uxth	r3, r3
 800522a:	4618      	mov	r0, r3
 800522c:	4603      	mov	r3, r0
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	4403      	add	r3, r0
 8005232:	3b1e      	subs	r3, #30
 8005234:	409a      	lsls	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	60da      	str	r2, [r3, #12]
 800523e:	e022      	b.n	8005286 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6919      	ldr	r1, [r3, #16]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	b29b      	uxth	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	4613      	mov	r3, r2
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	4413      	add	r3, r2
 8005254:	2207      	movs	r2, #7
 8005256:	fa02 f303 	lsl.w	r3, r2, r3
 800525a:	43da      	mvns	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	400a      	ands	r2, r1
 8005262:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6919      	ldr	r1, [r3, #16]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	689a      	ldr	r2, [r3, #8]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	b29b      	uxth	r3, r3
 8005274:	4618      	mov	r0, r3
 8005276:	4603      	mov	r3, r0
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	4403      	add	r3, r0
 800527c:	409a      	lsls	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b06      	cmp	r3, #6
 800528c:	d824      	bhi.n	80052d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	3b05      	subs	r3, #5
 80052a0:	221f      	movs	r2, #31
 80052a2:	fa02 f303 	lsl.w	r3, r2, r3
 80052a6:	43da      	mvns	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	400a      	ands	r2, r1
 80052ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	4618      	mov	r0, r3
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	3b05      	subs	r3, #5
 80052ca:	fa00 f203 	lsl.w	r2, r0, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	635a      	str	r2, [r3, #52]	; 0x34
 80052d6:	e04c      	b.n	8005372 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b0c      	cmp	r3, #12
 80052de:	d824      	bhi.n	800532a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	3b23      	subs	r3, #35	; 0x23
 80052f2:	221f      	movs	r2, #31
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	43da      	mvns	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	400a      	ands	r2, r1
 8005300:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	b29b      	uxth	r3, r3
 800530e:	4618      	mov	r0, r3
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	4613      	mov	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	3b23      	subs	r3, #35	; 0x23
 800531c:	fa00 f203 	lsl.w	r2, r0, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	631a      	str	r2, [r3, #48]	; 0x30
 8005328:	e023      	b.n	8005372 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	3b41      	subs	r3, #65	; 0x41
 800533c:	221f      	movs	r2, #31
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	43da      	mvns	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	400a      	ands	r2, r1
 800534a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	b29b      	uxth	r3, r3
 8005358:	4618      	mov	r0, r3
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	4613      	mov	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	3b41      	subs	r3, #65	; 0x41
 8005366:	fa00 f203 	lsl.w	r2, r0, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005372:	4b22      	ldr	r3, [pc, #136]	; (80053fc <HAL_ADC_ConfigChannel+0x234>)
 8005374:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a21      	ldr	r2, [pc, #132]	; (8005400 <HAL_ADC_ConfigChannel+0x238>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d109      	bne.n	8005394 <HAL_ADC_ConfigChannel+0x1cc>
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b12      	cmp	r3, #18
 8005386:	d105      	bne.n	8005394 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a19      	ldr	r2, [pc, #100]	; (8005400 <HAL_ADC_ConfigChannel+0x238>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d123      	bne.n	80053e6 <HAL_ADC_ConfigChannel+0x21e>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b10      	cmp	r3, #16
 80053a4:	d003      	beq.n	80053ae <HAL_ADC_ConfigChannel+0x1e6>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b11      	cmp	r3, #17
 80053ac:	d11b      	bne.n	80053e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b10      	cmp	r3, #16
 80053c0:	d111      	bne.n	80053e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80053c2:	4b10      	ldr	r3, [pc, #64]	; (8005404 <HAL_ADC_ConfigChannel+0x23c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a10      	ldr	r2, [pc, #64]	; (8005408 <HAL_ADC_ConfigChannel+0x240>)
 80053c8:	fba2 2303 	umull	r2, r3, r2, r3
 80053cc:	0c9a      	lsrs	r2, r3, #18
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80053d8:	e002      	b.n	80053e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	3b01      	subs	r3, #1
 80053de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1f9      	bne.n	80053da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	40012300 	.word	0x40012300
 8005400:	40012000 	.word	0x40012000
 8005404:	20000014 	.word	0x20000014
 8005408:	431bde83 	.word	0x431bde83

0800540c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005414:	4b79      	ldr	r3, [pc, #484]	; (80055fc <ADC_Init+0x1f0>)
 8005416:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	431a      	orrs	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005440:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6859      	ldr	r1, [r3, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	021a      	lsls	r2, r3, #8
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005464:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6859      	ldr	r1, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005486:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6899      	ldr	r1, [r3, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549e:	4a58      	ldr	r2, [pc, #352]	; (8005600 <ADC_Init+0x1f4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d022      	beq.n	80054ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6899      	ldr	r1, [r3, #8]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80054d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6899      	ldr	r1, [r3, #8]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	609a      	str	r2, [r3, #8]
 80054e8:	e00f      	b.n	800550a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005508:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0202 	bic.w	r2, r2, #2
 8005518:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6899      	ldr	r1, [r3, #8]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	7e1b      	ldrb	r3, [r3, #24]
 8005524:	005a      	lsls	r2, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d01b      	beq.n	8005570 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005546:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005556:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6859      	ldr	r1, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005562:	3b01      	subs	r3, #1
 8005564:	035a      	lsls	r2, r3, #13
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	605a      	str	r2, [r3, #4]
 800556e:	e007      	b.n	8005580 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800557e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800558e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	69db      	ldr	r3, [r3, #28]
 800559a:	3b01      	subs	r3, #1
 800559c:	051a      	lsls	r2, r3, #20
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80055b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6899      	ldr	r1, [r3, #8]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055c2:	025a      	lsls	r2, r3, #9
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6899      	ldr	r1, [r3, #8]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	029a      	lsls	r2, r3, #10
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	609a      	str	r2, [r3, #8]
}
 80055f0:	bf00      	nop
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	40012300 	.word	0x40012300
 8005600:	0f000001 	.word	0x0f000001

08005604 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005610:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005616:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800561a:	2b00      	cmp	r3, #0
 800561c:	d13c      	bne.n	8005698 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d12b      	bne.n	8005690 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800563c:	2b00      	cmp	r3, #0
 800563e:	d127      	bne.n	8005690 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005646:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800564a:	2b00      	cmp	r3, #0
 800564c:	d006      	beq.n	800565c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005658:	2b00      	cmp	r3, #0
 800565a:	d119      	bne.n	8005690 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0220 	bic.w	r2, r2, #32
 800566a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005670:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d105      	bne.n	8005690 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005688:	f043 0201 	orr.w	r2, r3, #1
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f7ff fd7b 	bl	800518c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005696:	e00e      	b.n	80056b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569c:	f003 0310 	and.w	r3, r3, #16
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f7ff fd85 	bl	80051b4 <HAL_ADC_ErrorCallback>
}
 80056aa:	e004      	b.n	80056b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	4798      	blx	r3
}
 80056b6:	bf00      	nop
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f7ff fd67 	bl	80051a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80056d2:	bf00      	nop
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b084      	sub	sp, #16
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2240      	movs	r2, #64	; 0x40
 80056ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f2:	f043 0204 	orr.w	r2, r3, #4
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7ff fd5a 	bl	80051b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005700:	bf00      	nop
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <__NVIC_SetPriorityGrouping>:
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005718:	4b0c      	ldr	r3, [pc, #48]	; (800574c <__NVIC_SetPriorityGrouping+0x44>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005724:	4013      	ands	r3, r2
 8005726:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800573a:	4a04      	ldr	r2, [pc, #16]	; (800574c <__NVIC_SetPriorityGrouping+0x44>)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	60d3      	str	r3, [r2, #12]
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	e000ed00 	.word	0xe000ed00

08005750 <__NVIC_GetPriorityGrouping>:
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005754:	4b04      	ldr	r3, [pc, #16]	; (8005768 <__NVIC_GetPriorityGrouping+0x18>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	0a1b      	lsrs	r3, r3, #8
 800575a:	f003 0307 	and.w	r3, r3, #7
}
 800575e:	4618      	mov	r0, r3
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	e000ed00 	.word	0xe000ed00

0800576c <__NVIC_EnableIRQ>:
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	4603      	mov	r3, r0
 8005774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800577a:	2b00      	cmp	r3, #0
 800577c:	db0b      	blt.n	8005796 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800577e:	79fb      	ldrb	r3, [r7, #7]
 8005780:	f003 021f 	and.w	r2, r3, #31
 8005784:	4907      	ldr	r1, [pc, #28]	; (80057a4 <__NVIC_EnableIRQ+0x38>)
 8005786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800578a:	095b      	lsrs	r3, r3, #5
 800578c:	2001      	movs	r0, #1
 800578e:	fa00 f202 	lsl.w	r2, r0, r2
 8005792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	e000e100 	.word	0xe000e100

080057a8 <__NVIC_SetPriority>:
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	6039      	str	r1, [r7, #0]
 80057b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	db0a      	blt.n	80057d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	490c      	ldr	r1, [pc, #48]	; (80057f4 <__NVIC_SetPriority+0x4c>)
 80057c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c6:	0112      	lsls	r2, r2, #4
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	440b      	add	r3, r1
 80057cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80057d0:	e00a      	b.n	80057e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	4908      	ldr	r1, [pc, #32]	; (80057f8 <__NVIC_SetPriority+0x50>)
 80057d8:	79fb      	ldrb	r3, [r7, #7]
 80057da:	f003 030f 	and.w	r3, r3, #15
 80057de:	3b04      	subs	r3, #4
 80057e0:	0112      	lsls	r2, r2, #4
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	440b      	add	r3, r1
 80057e6:	761a      	strb	r2, [r3, #24]
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	e000e100 	.word	0xe000e100
 80057f8:	e000ed00 	.word	0xe000ed00

080057fc <NVIC_EncodePriority>:
{
 80057fc:	b480      	push	{r7}
 80057fe:	b089      	sub	sp, #36	; 0x24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f003 0307 	and.w	r3, r3, #7
 800580e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	f1c3 0307 	rsb	r3, r3, #7
 8005816:	2b04      	cmp	r3, #4
 8005818:	bf28      	it	cs
 800581a:	2304      	movcs	r3, #4
 800581c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	3304      	adds	r3, #4
 8005822:	2b06      	cmp	r3, #6
 8005824:	d902      	bls.n	800582c <NVIC_EncodePriority+0x30>
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	3b03      	subs	r3, #3
 800582a:	e000      	b.n	800582e <NVIC_EncodePriority+0x32>
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	fa02 f303 	lsl.w	r3, r2, r3
 800583a:	43da      	mvns	r2, r3
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	401a      	ands	r2, r3
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005844:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	fa01 f303 	lsl.w	r3, r1, r3
 800584e:	43d9      	mvns	r1, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005854:	4313      	orrs	r3, r2
}
 8005856:	4618      	mov	r0, r3
 8005858:	3724      	adds	r7, #36	; 0x24
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
	...

08005864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3b01      	subs	r3, #1
 8005870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005874:	d301      	bcc.n	800587a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005876:	2301      	movs	r3, #1
 8005878:	e00f      	b.n	800589a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800587a:	4a0a      	ldr	r2, [pc, #40]	; (80058a4 <SysTick_Config+0x40>)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3b01      	subs	r3, #1
 8005880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005882:	210f      	movs	r1, #15
 8005884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005888:	f7ff ff8e 	bl	80057a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800588c:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <SysTick_Config+0x40>)
 800588e:	2200      	movs	r2, #0
 8005890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005892:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <SysTick_Config+0x40>)
 8005894:	2207      	movs	r2, #7
 8005896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	e000e010 	.word	0xe000e010

080058a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7ff ff29 	bl	8005708 <__NVIC_SetPriorityGrouping>
}
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058be:	b580      	push	{r7, lr}
 80058c0:	b086      	sub	sp, #24
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	4603      	mov	r3, r0
 80058c6:	60b9      	str	r1, [r7, #8]
 80058c8:	607a      	str	r2, [r7, #4]
 80058ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058d0:	f7ff ff3e 	bl	8005750 <__NVIC_GetPriorityGrouping>
 80058d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	6978      	ldr	r0, [r7, #20]
 80058dc:	f7ff ff8e 	bl	80057fc <NVIC_EncodePriority>
 80058e0:	4602      	mov	r2, r0
 80058e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058e6:	4611      	mov	r1, r2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff ff5d 	bl	80057a8 <__NVIC_SetPriority>
}
 80058ee:	bf00      	nop
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	4603      	mov	r3, r0
 80058fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff ff31 	bl	800576c <__NVIC_EnableIRQ>
}
 800590a:	bf00      	nop
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b082      	sub	sp, #8
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff ffa2 	bl	8005864 <SysTick_Config>
 8005920:	4603      	mov	r3, r0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
	...

0800592c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005938:	f7ff fac8 	bl	8004ecc <HAL_GetTick>
 800593c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e099      	b.n	8005a7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2202      	movs	r2, #2
 800594c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0201 	bic.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005968:	e00f      	b.n	800598a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800596a:	f7ff faaf 	bl	8004ecc <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b05      	cmp	r3, #5
 8005976:	d908      	bls.n	800598a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2203      	movs	r2, #3
 8005982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e078      	b.n	8005a7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e8      	bne.n	800596a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	4b38      	ldr	r3, [pc, #224]	; (8005a84 <HAL_DMA_Init+0x158>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	4313      	orrs	r3, r2
 80059da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	d107      	bne.n	80059f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ec:	4313      	orrs	r3, r2
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f023 0307 	bic.w	r3, r3, #7
 8005a0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	697a      	ldr	r2, [r7, #20]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d117      	bne.n	8005a4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00e      	beq.n	8005a4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fa6f 	bl	8005f14 <DMA_CheckFifoParam>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d008      	beq.n	8005a4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2240      	movs	r2, #64	; 0x40
 8005a40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e016      	b.n	8005a7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fa26 	bl	8005ea8 <DMA_CalcBaseAndBitshift>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a64:	223f      	movs	r2, #63	; 0x3f
 8005a66:	409a      	lsls	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3718      	adds	r7, #24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	f010803f 	.word	0xf010803f

08005a88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_DMA_Start_IT+0x26>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e040      	b.n	8005b30 <HAL_DMA_Start_IT+0xa8>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d12f      	bne.n	8005b22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f000 f9b8 	bl	8005e4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae0:	223f      	movs	r2, #63	; 0x3f
 8005ae2:	409a      	lsls	r2, r3
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0216 	orr.w	r2, r2, #22
 8005af6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d007      	beq.n	8005b10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f042 0208 	orr.w	r2, r2, #8
 8005b0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	e005      	b.n	8005b2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b44:	4b8e      	ldr	r3, [pc, #568]	; (8005d80 <HAL_DMA_IRQHandler+0x248>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a8e      	ldr	r2, [pc, #568]	; (8005d84 <HAL_DMA_IRQHandler+0x24c>)
 8005b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4e:	0a9b      	lsrs	r3, r3, #10
 8005b50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b62:	2208      	movs	r2, #8
 8005b64:	409a      	lsls	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d01a      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d013      	beq.n	8005ba4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0204 	bic.w	r2, r2, #4
 8005b8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b90:	2208      	movs	r2, #8
 8005b92:	409a      	lsls	r2, r3
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9c:	f043 0201 	orr.w	r2, r3, #1
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba8:	2201      	movs	r2, #1
 8005baa:	409a      	lsls	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4013      	ands	r3, r2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d012      	beq.n	8005bda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00b      	beq.n	8005bda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	409a      	lsls	r2, r3
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd2:	f043 0202 	orr.w	r2, r3, #2
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bde:	2204      	movs	r2, #4
 8005be0:	409a      	lsls	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4013      	ands	r3, r2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d012      	beq.n	8005c10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00b      	beq.n	8005c10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bfc:	2204      	movs	r2, #4
 8005bfe:	409a      	lsls	r2, r3
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c08:	f043 0204 	orr.w	r2, r3, #4
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c14:	2210      	movs	r2, #16
 8005c16:	409a      	lsls	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d043      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d03c      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c32:	2210      	movs	r2, #16
 8005c34:	409a      	lsls	r2, r3
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d018      	beq.n	8005c7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d108      	bne.n	8005c68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d024      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	4798      	blx	r3
 8005c66:	e01f      	b.n	8005ca8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01b      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	4798      	blx	r3
 8005c78:	e016      	b.n	8005ca8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d107      	bne.n	8005c98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0208 	bic.w	r2, r2, #8
 8005c96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cac:	2220      	movs	r2, #32
 8005cae:	409a      	lsls	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 808f 	beq.w	8005dd8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0310 	and.w	r3, r3, #16
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 8087 	beq.w	8005dd8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cce:	2220      	movs	r2, #32
 8005cd0:	409a      	lsls	r2, r3
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b05      	cmp	r3, #5
 8005ce0:	d136      	bne.n	8005d50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0216 	bic.w	r2, r2, #22
 8005cf0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	695a      	ldr	r2, [r3, #20]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d103      	bne.n	8005d12 <HAL_DMA_IRQHandler+0x1da>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d007      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0208 	bic.w	r2, r2, #8
 8005d20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d26:	223f      	movs	r2, #63	; 0x3f
 8005d28:	409a      	lsls	r2, r3
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d07e      	beq.n	8005e44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	4798      	blx	r3
        }
        return;
 8005d4e:	e079      	b.n	8005e44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d01d      	beq.n	8005d9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10d      	bne.n	8005d88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d031      	beq.n	8005dd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	4798      	blx	r3
 8005d7c:	e02c      	b.n	8005dd8 <HAL_DMA_IRQHandler+0x2a0>
 8005d7e:	bf00      	nop
 8005d80:	20000014 	.word	0x20000014
 8005d84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d023      	beq.n	8005dd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	4798      	blx	r3
 8005d98:	e01e      	b.n	8005dd8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10f      	bne.n	8005dc8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0210 	bic.w	r2, r2, #16
 8005db6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d032      	beq.n	8005e46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d022      	beq.n	8005e32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2205      	movs	r2, #5
 8005df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0201 	bic.w	r2, r2, #1
 8005e02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	3301      	adds	r3, #1
 8005e08:	60bb      	str	r3, [r7, #8]
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d307      	bcc.n	8005e20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1f2      	bne.n	8005e04 <HAL_DMA_IRQHandler+0x2cc>
 8005e1e:	e000      	b.n	8005e22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005e20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	4798      	blx	r3
 8005e42:	e000      	b.n	8005e46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005e44:	bf00      	nop
    }
  }
}
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	2b40      	cmp	r3, #64	; 0x40
 8005e78:	d108      	bne.n	8005e8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005e8a:	e007      	b.n	8005e9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68ba      	ldr	r2, [r7, #8]
 8005e92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	60da      	str	r2, [r3, #12]
}
 8005e9c:	bf00      	nop
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	3b10      	subs	r3, #16
 8005eb8:	4a14      	ldr	r2, [pc, #80]	; (8005f0c <DMA_CalcBaseAndBitshift+0x64>)
 8005eba:	fba2 2303 	umull	r2, r3, r2, r3
 8005ebe:	091b      	lsrs	r3, r3, #4
 8005ec0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ec2:	4a13      	ldr	r2, [pc, #76]	; (8005f10 <DMA_CalcBaseAndBitshift+0x68>)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d909      	bls.n	8005eea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ede:	f023 0303 	bic.w	r3, r3, #3
 8005ee2:	1d1a      	adds	r2, r3, #4
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	659a      	str	r2, [r3, #88]	; 0x58
 8005ee8:	e007      	b.n	8005efa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ef2:	f023 0303 	bic.w	r3, r3, #3
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	aaaaaaab 	.word	0xaaaaaaab
 8005f10:	0800b3f4 	.word	0x0800b3f4

08005f14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d11f      	bne.n	8005f6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d856      	bhi.n	8005fe2 <DMA_CheckFifoParam+0xce>
 8005f34:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <DMA_CheckFifoParam+0x28>)
 8005f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3a:	bf00      	nop
 8005f3c:	08005f4d 	.word	0x08005f4d
 8005f40:	08005f5f 	.word	0x08005f5f
 8005f44:	08005f4d 	.word	0x08005f4d
 8005f48:	08005fe3 	.word	0x08005fe3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d046      	beq.n	8005fe6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f5c:	e043      	b.n	8005fe6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f66:	d140      	bne.n	8005fea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f6c:	e03d      	b.n	8005fea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f76:	d121      	bne.n	8005fbc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d837      	bhi.n	8005fee <DMA_CheckFifoParam+0xda>
 8005f7e:	a201      	add	r2, pc, #4	; (adr r2, 8005f84 <DMA_CheckFifoParam+0x70>)
 8005f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f84:	08005f95 	.word	0x08005f95
 8005f88:	08005f9b 	.word	0x08005f9b
 8005f8c:	08005f95 	.word	0x08005f95
 8005f90:	08005fad 	.word	0x08005fad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	73fb      	strb	r3, [r7, #15]
      break;
 8005f98:	e030      	b.n	8005ffc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d025      	beq.n	8005ff2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005faa:	e022      	b.n	8005ff2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fb4:	d11f      	bne.n	8005ff6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005fba:	e01c      	b.n	8005ff6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d903      	bls.n	8005fca <DMA_CheckFifoParam+0xb6>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b03      	cmp	r3, #3
 8005fc6:	d003      	beq.n	8005fd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005fc8:	e018      	b.n	8005ffc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8005fce:	e015      	b.n	8005ffc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00e      	beq.n	8005ffa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe0:	e00b      	b.n	8005ffa <DMA_CheckFifoParam+0xe6>
      break;
 8005fe2:	bf00      	nop
 8005fe4:	e00a      	b.n	8005ffc <DMA_CheckFifoParam+0xe8>
      break;
 8005fe6:	bf00      	nop
 8005fe8:	e008      	b.n	8005ffc <DMA_CheckFifoParam+0xe8>
      break;
 8005fea:	bf00      	nop
 8005fec:	e006      	b.n	8005ffc <DMA_CheckFifoParam+0xe8>
      break;
 8005fee:	bf00      	nop
 8005ff0:	e004      	b.n	8005ffc <DMA_CheckFifoParam+0xe8>
      break;
 8005ff2:	bf00      	nop
 8005ff4:	e002      	b.n	8005ffc <DMA_CheckFifoParam+0xe8>
      break;   
 8005ff6:	bf00      	nop
 8005ff8:	e000      	b.n	8005ffc <DMA_CheckFifoParam+0xe8>
      break;
 8005ffa:	bf00      	nop
    }
  } 
  
  return status; 
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop

0800600c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800600c:	b480      	push	{r7}
 800600e:	b089      	sub	sp, #36	; 0x24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800601a:	2300      	movs	r3, #0
 800601c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800601e:	2300      	movs	r3, #0
 8006020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006022:	2300      	movs	r3, #0
 8006024:	61fb      	str	r3, [r7, #28]
 8006026:	e16b      	b.n	8006300 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006028:	2201      	movs	r2, #1
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	4013      	ands	r3, r2
 800603a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	429a      	cmp	r2, r3
 8006042:	f040 815a 	bne.w	80062fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	2b01      	cmp	r3, #1
 8006050:	d005      	beq.n	800605e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800605a:	2b02      	cmp	r3, #2
 800605c:	d130      	bne.n	80060c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	2203      	movs	r2, #3
 800606a:	fa02 f303 	lsl.w	r3, r2, r3
 800606e:	43db      	mvns	r3, r3
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	4013      	ands	r3, r2
 8006074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	005b      	lsls	r3, r3, #1
 800607e:	fa02 f303 	lsl.w	r3, r2, r3
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	4313      	orrs	r3, r2
 8006086:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006094:	2201      	movs	r2, #1
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	fa02 f303 	lsl.w	r3, r2, r3
 800609c:	43db      	mvns	r3, r3
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	4013      	ands	r3, r2
 80060a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	091b      	lsrs	r3, r3, #4
 80060aa:	f003 0201 	and.w	r2, r3, #1
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f003 0303 	and.w	r3, r3, #3
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d017      	beq.n	80060fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	2203      	movs	r2, #3
 80060d8:	fa02 f303 	lsl.w	r3, r2, r3
 80060dc:	43db      	mvns	r3, r3
 80060de:	69ba      	ldr	r2, [r7, #24]
 80060e0:	4013      	ands	r3, r2
 80060e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	fa02 f303 	lsl.w	r3, r2, r3
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d123      	bne.n	8006150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	08da      	lsrs	r2, r3, #3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3208      	adds	r2, #8
 8006110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	220f      	movs	r2, #15
 8006120:	fa02 f303 	lsl.w	r3, r2, r3
 8006124:	43db      	mvns	r3, r3
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	4013      	ands	r3, r2
 800612a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	691a      	ldr	r2, [r3, #16]
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	fa02 f303 	lsl.w	r3, r2, r3
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	4313      	orrs	r3, r2
 8006140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	08da      	lsrs	r2, r3, #3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3208      	adds	r2, #8
 800614a:	69b9      	ldr	r1, [r7, #24]
 800614c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	2203      	movs	r2, #3
 800615c:	fa02 f303 	lsl.w	r3, r2, r3
 8006160:	43db      	mvns	r3, r3
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	4013      	ands	r3, r2
 8006166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f003 0203 	and.w	r2, r3, #3
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	fa02 f303 	lsl.w	r3, r2, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	4313      	orrs	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 80b4 	beq.w	80062fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006192:	2300      	movs	r3, #0
 8006194:	60fb      	str	r3, [r7, #12]
 8006196:	4b60      	ldr	r3, [pc, #384]	; (8006318 <HAL_GPIO_Init+0x30c>)
 8006198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619a:	4a5f      	ldr	r2, [pc, #380]	; (8006318 <HAL_GPIO_Init+0x30c>)
 800619c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061a0:	6453      	str	r3, [r2, #68]	; 0x44
 80061a2:	4b5d      	ldr	r3, [pc, #372]	; (8006318 <HAL_GPIO_Init+0x30c>)
 80061a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061ae:	4a5b      	ldr	r2, [pc, #364]	; (800631c <HAL_GPIO_Init+0x310>)
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	089b      	lsrs	r3, r3, #2
 80061b4:	3302      	adds	r3, #2
 80061b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	220f      	movs	r2, #15
 80061c6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ca:	43db      	mvns	r3, r3
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	4013      	ands	r3, r2
 80061d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a52      	ldr	r2, [pc, #328]	; (8006320 <HAL_GPIO_Init+0x314>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d02b      	beq.n	8006232 <HAL_GPIO_Init+0x226>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a51      	ldr	r2, [pc, #324]	; (8006324 <HAL_GPIO_Init+0x318>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d025      	beq.n	800622e <HAL_GPIO_Init+0x222>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a50      	ldr	r2, [pc, #320]	; (8006328 <HAL_GPIO_Init+0x31c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d01f      	beq.n	800622a <HAL_GPIO_Init+0x21e>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a4f      	ldr	r2, [pc, #316]	; (800632c <HAL_GPIO_Init+0x320>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d019      	beq.n	8006226 <HAL_GPIO_Init+0x21a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a4e      	ldr	r2, [pc, #312]	; (8006330 <HAL_GPIO_Init+0x324>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <HAL_GPIO_Init+0x216>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a4d      	ldr	r2, [pc, #308]	; (8006334 <HAL_GPIO_Init+0x328>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d00d      	beq.n	800621e <HAL_GPIO_Init+0x212>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a4c      	ldr	r2, [pc, #304]	; (8006338 <HAL_GPIO_Init+0x32c>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d007      	beq.n	800621a <HAL_GPIO_Init+0x20e>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a4b      	ldr	r2, [pc, #300]	; (800633c <HAL_GPIO_Init+0x330>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d101      	bne.n	8006216 <HAL_GPIO_Init+0x20a>
 8006212:	2307      	movs	r3, #7
 8006214:	e00e      	b.n	8006234 <HAL_GPIO_Init+0x228>
 8006216:	2308      	movs	r3, #8
 8006218:	e00c      	b.n	8006234 <HAL_GPIO_Init+0x228>
 800621a:	2306      	movs	r3, #6
 800621c:	e00a      	b.n	8006234 <HAL_GPIO_Init+0x228>
 800621e:	2305      	movs	r3, #5
 8006220:	e008      	b.n	8006234 <HAL_GPIO_Init+0x228>
 8006222:	2304      	movs	r3, #4
 8006224:	e006      	b.n	8006234 <HAL_GPIO_Init+0x228>
 8006226:	2303      	movs	r3, #3
 8006228:	e004      	b.n	8006234 <HAL_GPIO_Init+0x228>
 800622a:	2302      	movs	r3, #2
 800622c:	e002      	b.n	8006234 <HAL_GPIO_Init+0x228>
 800622e:	2301      	movs	r3, #1
 8006230:	e000      	b.n	8006234 <HAL_GPIO_Init+0x228>
 8006232:	2300      	movs	r3, #0
 8006234:	69fa      	ldr	r2, [r7, #28]
 8006236:	f002 0203 	and.w	r2, r2, #3
 800623a:	0092      	lsls	r2, r2, #2
 800623c:	4093      	lsls	r3, r2
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	4313      	orrs	r3, r2
 8006242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006244:	4935      	ldr	r1, [pc, #212]	; (800631c <HAL_GPIO_Init+0x310>)
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	089b      	lsrs	r3, r3, #2
 800624a:	3302      	adds	r3, #2
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006252:	4b3b      	ldr	r3, [pc, #236]	; (8006340 <HAL_GPIO_Init+0x334>)
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	43db      	mvns	r3, r3
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	4013      	ands	r3, r2
 8006260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006276:	4a32      	ldr	r2, [pc, #200]	; (8006340 <HAL_GPIO_Init+0x334>)
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800627c:	4b30      	ldr	r3, [pc, #192]	; (8006340 <HAL_GPIO_Init+0x334>)
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	43db      	mvns	r3, r3
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	4013      	ands	r3, r2
 800628a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	4313      	orrs	r3, r2
 800629e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062a0:	4a27      	ldr	r2, [pc, #156]	; (8006340 <HAL_GPIO_Init+0x334>)
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80062a6:	4b26      	ldr	r3, [pc, #152]	; (8006340 <HAL_GPIO_Init+0x334>)
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	43db      	mvns	r3, r3
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	4013      	ands	r3, r2
 80062b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062ca:	4a1d      	ldr	r2, [pc, #116]	; (8006340 <HAL_GPIO_Init+0x334>)
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062d0:	4b1b      	ldr	r3, [pc, #108]	; (8006340 <HAL_GPIO_Init+0x334>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	43db      	mvns	r3, r3
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	4013      	ands	r3, r2
 80062de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80062f4:	4a12      	ldr	r2, [pc, #72]	; (8006340 <HAL_GPIO_Init+0x334>)
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	3301      	adds	r3, #1
 80062fe:	61fb      	str	r3, [r7, #28]
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	2b0f      	cmp	r3, #15
 8006304:	f67f ae90 	bls.w	8006028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006308:	bf00      	nop
 800630a:	bf00      	nop
 800630c:	3724      	adds	r7, #36	; 0x24
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40023800 	.word	0x40023800
 800631c:	40013800 	.word	0x40013800
 8006320:	40020000 	.word	0x40020000
 8006324:	40020400 	.word	0x40020400
 8006328:	40020800 	.word	0x40020800
 800632c:	40020c00 	.word	0x40020c00
 8006330:	40021000 	.word	0x40021000
 8006334:	40021400 	.word	0x40021400
 8006338:	40021800 	.word	0x40021800
 800633c:	40021c00 	.word	0x40021c00
 8006340:	40013c00 	.word	0x40013c00

08006344 <LL_EXTI_EnableIT_0_31>:
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800634c:	4b05      	ldr	r3, [pc, #20]	; (8006364 <LL_EXTI_EnableIT_0_31+0x20>)
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	4904      	ldr	r1, [pc, #16]	; (8006364 <LL_EXTI_EnableIT_0_31+0x20>)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4313      	orrs	r3, r2
 8006356:	600b      	str	r3, [r1, #0]
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	40013c00 	.word	0x40013c00

08006368 <LL_EXTI_DisableIT_0_31>:
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8006370:	4b06      	ldr	r3, [pc, #24]	; (800638c <LL_EXTI_DisableIT_0_31+0x24>)
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	43db      	mvns	r3, r3
 8006378:	4904      	ldr	r1, [pc, #16]	; (800638c <LL_EXTI_DisableIT_0_31+0x24>)
 800637a:	4013      	ands	r3, r2
 800637c:	600b      	str	r3, [r1, #0]
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	40013c00 	.word	0x40013c00

08006390 <LL_EXTI_EnableEvent_0_31>:
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8006398:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	4904      	ldr	r1, [pc, #16]	; (80063b0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	604b      	str	r3, [r1, #4]
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	40013c00 	.word	0x40013c00

080063b4 <LL_EXTI_DisableEvent_0_31>:
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80063bc:	4b06      	ldr	r3, [pc, #24]	; (80063d8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	43db      	mvns	r3, r3
 80063c4:	4904      	ldr	r1, [pc, #16]	; (80063d8 <LL_EXTI_DisableEvent_0_31+0x24>)
 80063c6:	4013      	ands	r3, r2
 80063c8:	604b      	str	r3, [r1, #4]
}
 80063ca:	bf00      	nop
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	40013c00 	.word	0x40013c00

080063dc <LL_EXTI_EnableRisingTrig_0_31>:
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80063e4:	4b05      	ldr	r3, [pc, #20]	; (80063fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	4904      	ldr	r1, [pc, #16]	; (80063fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	608b      	str	r3, [r1, #8]
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	40013c00 	.word	0x40013c00

08006400 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8006408:	4b06      	ldr	r3, [pc, #24]	; (8006424 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	43db      	mvns	r3, r3
 8006410:	4904      	ldr	r1, [pc, #16]	; (8006424 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006412:	4013      	ands	r3, r2
 8006414:	608b      	str	r3, [r1, #8]
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	40013c00 	.word	0x40013c00

08006428 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8006430:	4b05      	ldr	r3, [pc, #20]	; (8006448 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006432:	68da      	ldr	r2, [r3, #12]
 8006434:	4904      	ldr	r1, [pc, #16]	; (8006448 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4313      	orrs	r3, r2
 800643a:	60cb      	str	r3, [r1, #12]
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	40013c00 	.word	0x40013c00

0800644c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8006454:	4b06      	ldr	r3, [pc, #24]	; (8006470 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006456:	68da      	ldr	r2, [r3, #12]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	43db      	mvns	r3, r3
 800645c:	4904      	ldr	r1, [pc, #16]	; (8006470 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800645e:	4013      	ands	r3, r2
 8006460:	60cb      	str	r3, [r1, #12]
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	40013c00 	.word	0x40013c00

08006474 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800647c:	2300      	movs	r3, #0
 800647e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	791b      	ldrb	r3, [r3, #4]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d065      	beq.n	8006554 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d06c      	beq.n	800656a <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	795b      	ldrb	r3, [r3, #5]
 8006494:	2b02      	cmp	r3, #2
 8006496:	d01c      	beq.n	80064d2 <LL_EXTI_Init+0x5e>
 8006498:	2b02      	cmp	r3, #2
 800649a:	dc25      	bgt.n	80064e8 <LL_EXTI_Init+0x74>
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <LL_EXTI_Init+0x32>
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d00b      	beq.n	80064bc <LL_EXTI_Init+0x48>
 80064a4:	e020      	b.n	80064e8 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7ff ff82 	bl	80063b4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff ff45 	bl	8006344 <LL_EXTI_EnableIT_0_31>
          break;
 80064ba:	e018      	b.n	80064ee <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff ff51 	bl	8006368 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7ff ff60 	bl	8006390 <LL_EXTI_EnableEvent_0_31>
          break;
 80064d0:	e00d      	b.n	80064ee <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff ff34 	bl	8006344 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff ff55 	bl	8006390 <LL_EXTI_EnableEvent_0_31>
          break;
 80064e6:	e002      	b.n	80064ee <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	73fb      	strb	r3, [r7, #15]
          break;
 80064ec:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	799b      	ldrb	r3, [r3, #6]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d039      	beq.n	800656a <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	799b      	ldrb	r3, [r3, #6]
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d01c      	beq.n	8006538 <LL_EXTI_Init+0xc4>
 80064fe:	2b03      	cmp	r3, #3
 8006500:	dc25      	bgt.n	800654e <LL_EXTI_Init+0xda>
 8006502:	2b01      	cmp	r3, #1
 8006504:	d002      	beq.n	800650c <LL_EXTI_Init+0x98>
 8006506:	2b02      	cmp	r3, #2
 8006508:	d00b      	beq.n	8006522 <LL_EXTI_Init+0xae>
 800650a:	e020      	b.n	800654e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff ff9b 	bl	800644c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4618      	mov	r0, r3
 800651c:	f7ff ff5e 	bl	80063dc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8006520:	e024      	b.n	800656c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4618      	mov	r0, r3
 8006528:	f7ff ff6a 	bl	8006400 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff ff79 	bl	8006428 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8006536:	e019      	b.n	800656c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4618      	mov	r0, r3
 800653e:	f7ff ff4d 	bl	80063dc <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff ff6e 	bl	8006428 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800654c:	e00e      	b.n	800656c <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	73fb      	strb	r3, [r7, #15]
            break;
 8006552:	e00b      	b.n	800656c <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4618      	mov	r0, r3
 800655a:	f7ff ff05 	bl	8006368 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4618      	mov	r0, r3
 8006564:	f7ff ff26 	bl	80063b4 <LL_EXTI_DisableEvent_0_31>
 8006568:	e000      	b.n	800656c <LL_EXTI_Init+0xf8>
      }
 800656a:	bf00      	nop
  }
  return status;
 800656c:	7bfb      	ldrb	r3, [r7, #15]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <LL_GPIO_SetPinMode>:
{
 8006576:	b480      	push	{r7}
 8006578:	b089      	sub	sp, #36	; 0x24
 800657a:	af00      	add	r7, sp, #0
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	fa93 f3a3 	rbit	r3, r3
 8006590:	613b      	str	r3, [r7, #16]
  return result;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	fab3 f383 	clz	r3, r3
 8006598:	b2db      	uxtb	r3, r3
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	2103      	movs	r1, #3
 800659e:	fa01 f303 	lsl.w	r3, r1, r3
 80065a2:	43db      	mvns	r3, r3
 80065a4:	401a      	ands	r2, r3
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	fa93 f3a3 	rbit	r3, r3
 80065b0:	61bb      	str	r3, [r7, #24]
  return result;
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	fab3 f383 	clz	r3, r3
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	005b      	lsls	r3, r3, #1
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	fa01 f303 	lsl.w	r3, r1, r3
 80065c2:	431a      	orrs	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	601a      	str	r2, [r3, #0]
}
 80065c8:	bf00      	nop
 80065ca:	3724      	adds	r7, #36	; 0x24
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <LL_GPIO_SetPinOutputType>:
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	43db      	mvns	r3, r3
 80065e8:	401a      	ands	r2, r3
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	fb01 f303 	mul.w	r3, r1, r3
 80065f2:	431a      	orrs	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	605a      	str	r2, [r3, #4]
}
 80065f8:	bf00      	nop
 80065fa:	3714      	adds	r7, #20
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <LL_GPIO_SetPinSpeed>:
{
 8006604:	b480      	push	{r7}
 8006606:	b089      	sub	sp, #36	; 0x24
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	fa93 f3a3 	rbit	r3, r3
 800661e:	613b      	str	r3, [r7, #16]
  return result;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	fab3 f383 	clz	r3, r3
 8006626:	b2db      	uxtb	r3, r3
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	2103      	movs	r1, #3
 800662c:	fa01 f303 	lsl.w	r3, r1, r3
 8006630:	43db      	mvns	r3, r3
 8006632:	401a      	ands	r2, r3
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	fa93 f3a3 	rbit	r3, r3
 800663e:	61bb      	str	r3, [r7, #24]
  return result;
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	fab3 f383 	clz	r3, r3
 8006646:	b2db      	uxtb	r3, r3
 8006648:	005b      	lsls	r3, r3, #1
 800664a:	6879      	ldr	r1, [r7, #4]
 800664c:	fa01 f303 	lsl.w	r3, r1, r3
 8006650:	431a      	orrs	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	609a      	str	r2, [r3, #8]
}
 8006656:	bf00      	nop
 8006658:	3724      	adds	r7, #36	; 0x24
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <LL_GPIO_SetPinPull>:
{
 8006662:	b480      	push	{r7}
 8006664:	b089      	sub	sp, #36	; 0x24
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	fa93 f3a3 	rbit	r3, r3
 800667c:	613b      	str	r3, [r7, #16]
  return result;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	fab3 f383 	clz	r3, r3
 8006684:	b2db      	uxtb	r3, r3
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	2103      	movs	r1, #3
 800668a:	fa01 f303 	lsl.w	r3, r1, r3
 800668e:	43db      	mvns	r3, r3
 8006690:	401a      	ands	r2, r3
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	fa93 f3a3 	rbit	r3, r3
 800669c:	61bb      	str	r3, [r7, #24]
  return result;
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	fab3 f383 	clz	r3, r3
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	6879      	ldr	r1, [r7, #4]
 80066aa:	fa01 f303 	lsl.w	r3, r1, r3
 80066ae:	431a      	orrs	r2, r3
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	60da      	str	r2, [r3, #12]
}
 80066b4:	bf00      	nop
 80066b6:	3724      	adds	r7, #36	; 0x24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <LL_GPIO_SetAFPin_0_7>:
{
 80066c0:	b480      	push	{r7}
 80066c2:	b089      	sub	sp, #36	; 0x24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a1a      	ldr	r2, [r3, #32]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	fa93 f3a3 	rbit	r3, r3
 80066da:	613b      	str	r3, [r7, #16]
  return result;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	fab3 f383 	clz	r3, r3
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	210f      	movs	r1, #15
 80066e8:	fa01 f303 	lsl.w	r3, r1, r3
 80066ec:	43db      	mvns	r3, r3
 80066ee:	401a      	ands	r2, r3
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	fa93 f3a3 	rbit	r3, r3
 80066fa:	61bb      	str	r3, [r7, #24]
  return result;
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	fab3 f383 	clz	r3, r3
 8006702:	b2db      	uxtb	r3, r3
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	fa01 f303 	lsl.w	r3, r1, r3
 800670c:	431a      	orrs	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	621a      	str	r2, [r3, #32]
}
 8006712:	bf00      	nop
 8006714:	3724      	adds	r7, #36	; 0x24
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <LL_GPIO_SetAFPin_8_15>:
{
 800671e:	b480      	push	{r7}
 8006720:	b089      	sub	sp, #36	; 0x24
 8006722:	af00      	add	r7, sp, #0
 8006724:	60f8      	str	r0, [r7, #12]
 8006726:	60b9      	str	r1, [r7, #8]
 8006728:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	0a1b      	lsrs	r3, r3, #8
 8006732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	fa93 f3a3 	rbit	r3, r3
 800673a:	613b      	str	r3, [r7, #16]
  return result;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	fab3 f383 	clz	r3, r3
 8006742:	b2db      	uxtb	r3, r3
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	210f      	movs	r1, #15
 8006748:	fa01 f303 	lsl.w	r3, r1, r3
 800674c:	43db      	mvns	r3, r3
 800674e:	401a      	ands	r2, r3
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	0a1b      	lsrs	r3, r3, #8
 8006754:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	fa93 f3a3 	rbit	r3, r3
 800675c:	61bb      	str	r3, [r7, #24]
  return result;
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	fab3 f383 	clz	r3, r3
 8006764:	b2db      	uxtb	r3, r3
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	6879      	ldr	r1, [r7, #4]
 800676a:	fa01 f303 	lsl.w	r3, r1, r3
 800676e:	431a      	orrs	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006774:	bf00      	nop
 8006776:	3724      	adds	r7, #36	; 0x24
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800678a:	2300      	movs	r3, #0
 800678c:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800678e:	2300      	movs	r3, #0
 8006790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	fa93 f3a3 	rbit	r3, r3
 800679e:	613b      	str	r3, [r7, #16]
  return result;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	fab3 f383 	clz	r3, r3
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80067aa:	e050      	b.n	800684e <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	2101      	movs	r1, #1
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	fa01 f303 	lsl.w	r3, r1, r3
 80067b8:	4013      	ands	r3, r2
 80067ba:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d042      	beq.n	8006848 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d003      	beq.n	80067d2 <LL_GPIO_Init+0x52>
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d10d      	bne.n	80067ee <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	461a      	mov	r2, r3
 80067d8:	69b9      	ldr	r1, [r7, #24]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7ff ff12 	bl	8006604 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	461a      	mov	r2, r3
 80067e6:	69b9      	ldr	r1, [r7, #24]
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7ff fef3 	bl	80065d4 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	461a      	mov	r2, r3
 80067f4:	69b9      	ldr	r1, [r7, #24]
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f7ff ff33 	bl	8006662 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	2b02      	cmp	r3, #2
 8006802:	d11a      	bne.n	800683a <LL_GPIO_Init+0xba>
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	fa93 f3a3 	rbit	r3, r3
 800680e:	60bb      	str	r3, [r7, #8]
  return result;
 8006810:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006812:	fab3 f383 	clz	r3, r3
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b07      	cmp	r3, #7
 800681a:	d807      	bhi.n	800682c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	461a      	mov	r2, r3
 8006822:	69b9      	ldr	r1, [r7, #24]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7ff ff4b 	bl	80066c0 <LL_GPIO_SetAFPin_0_7>
 800682a:	e006      	b.n	800683a <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	461a      	mov	r2, r3
 8006832:	69b9      	ldr	r1, [r7, #24]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7ff ff72 	bl	800671e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	461a      	mov	r2, r3
 8006840:	69b9      	ldr	r1, [r7, #24]
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff fe97 	bl	8006576 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	3301      	adds	r3, #1
 800684c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	fa22 f303 	lsr.w	r3, r2, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1a7      	bne.n	80067ac <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3720      	adds	r7, #32
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
	...

08006868 <LL_RCC_GetSysClkSource>:
{
 8006868:	b480      	push	{r7}
 800686a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800686c:	4b04      	ldr	r3, [pc, #16]	; (8006880 <LL_RCC_GetSysClkSource+0x18>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f003 030c 	and.w	r3, r3, #12
}
 8006874:	4618      	mov	r0, r3
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	40023800 	.word	0x40023800

08006884 <LL_RCC_GetAHBPrescaler>:
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006888:	4b04      	ldr	r3, [pc, #16]	; (800689c <LL_RCC_GetAHBPrescaler+0x18>)
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006890:	4618      	mov	r0, r3
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	40023800 	.word	0x40023800

080068a0 <LL_RCC_GetAPB1Prescaler>:
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80068a4:	4b04      	ldr	r3, [pc, #16]	; (80068b8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	40023800 	.word	0x40023800

080068bc <LL_RCC_GetAPB2Prescaler>:
{
 80068bc:	b480      	push	{r7}
 80068be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80068c0:	4b04      	ldr	r3, [pc, #16]	; (80068d4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	40023800 	.word	0x40023800

080068d8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80068dc:	4b04      	ldr	r3, [pc, #16]	; (80068f0 <LL_RCC_PLL_GetMainSource+0x18>)
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40023800 	.word	0x40023800

080068f4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80068f8:	4b04      	ldr	r3, [pc, #16]	; (800690c <LL_RCC_PLL_GetN+0x18>)
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	099b      	lsrs	r3, r3, #6
 80068fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8006902:	4618      	mov	r0, r3
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	40023800 	.word	0x40023800

08006910 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8006914:	4b04      	ldr	r3, [pc, #16]	; (8006928 <LL_RCC_PLL_GetP+0x18>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800691c:	4618      	mov	r0, r3
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40023800 	.word	0x40023800

0800692c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800692c:	b480      	push	{r7}
 800692e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006930:	4b04      	ldr	r3, [pc, #16]	; (8006944 <LL_RCC_PLL_GetDivider+0x18>)
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8006938:	4618      	mov	r0, r3
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40023800 	.word	0x40023800

08006948 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8006950:	f000 f820 	bl	8006994 <RCC_GetSystemClockFreq>
 8006954:	4602      	mov	r2, r0
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4618      	mov	r0, r3
 8006960:	f000 f840 	bl	80069e4 <RCC_GetHCLKClockFreq>
 8006964:	4602      	mov	r2, r0
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	4618      	mov	r0, r3
 8006970:	f000 f84e 	bl	8006a10 <RCC_GetPCLK1ClockFreq>
 8006974:	4602      	mov	r2, r0
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	4618      	mov	r0, r3
 8006980:	f000 f85a 	bl	8006a38 <RCC_GetPCLK2ClockFreq>
 8006984:	4602      	mov	r2, r0
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	60da      	str	r2, [r3, #12]
}
 800698a:	bf00      	nop
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800699e:	f7ff ff63 	bl	8006868 <LL_RCC_GetSysClkSource>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b08      	cmp	r3, #8
 80069a6:	d00c      	beq.n	80069c2 <RCC_GetSystemClockFreq+0x2e>
 80069a8:	2b08      	cmp	r3, #8
 80069aa:	d80f      	bhi.n	80069cc <RCC_GetSystemClockFreq+0x38>
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d002      	beq.n	80069b6 <RCC_GetSystemClockFreq+0x22>
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	d003      	beq.n	80069bc <RCC_GetSystemClockFreq+0x28>
 80069b4:	e00a      	b.n	80069cc <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80069b6:	4b09      	ldr	r3, [pc, #36]	; (80069dc <RCC_GetSystemClockFreq+0x48>)
 80069b8:	607b      	str	r3, [r7, #4]
      break;
 80069ba:	e00a      	b.n	80069d2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80069bc:	4b08      	ldr	r3, [pc, #32]	; (80069e0 <RCC_GetSystemClockFreq+0x4c>)
 80069be:	607b      	str	r3, [r7, #4]
      break;
 80069c0:	e007      	b.n	80069d2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80069c2:	2008      	movs	r0, #8
 80069c4:	f000 f84c 	bl	8006a60 <RCC_PLL_GetFreqDomain_SYS>
 80069c8:	6078      	str	r0, [r7, #4]
      break;
 80069ca:	e002      	b.n	80069d2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80069cc:	4b03      	ldr	r3, [pc, #12]	; (80069dc <RCC_GetSystemClockFreq+0x48>)
 80069ce:	607b      	str	r3, [r7, #4]
      break;
 80069d0:	bf00      	nop
  }

  return frequency;
 80069d2:	687b      	ldr	r3, [r7, #4]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3708      	adds	r7, #8
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	00f42400 	.word	0x00f42400
 80069e0:	007a1200 	.word	0x007a1200

080069e4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80069ec:	f7ff ff4a 	bl	8006884 <LL_RCC_GetAHBPrescaler>
 80069f0:	4603      	mov	r3, r0
 80069f2:	091b      	lsrs	r3, r3, #4
 80069f4:	f003 030f 	and.w	r3, r3, #15
 80069f8:	4a04      	ldr	r2, [pc, #16]	; (8006a0c <RCC_GetHCLKClockFreq+0x28>)
 80069fa:	5cd3      	ldrb	r3, [r2, r3]
 80069fc:	461a      	mov	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	40d3      	lsrs	r3, r2
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	0800b3c4 	.word	0x0800b3c4

08006a10 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006a18:	f7ff ff42 	bl	80068a0 <LL_RCC_GetAPB1Prescaler>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	0a9b      	lsrs	r3, r3, #10
 8006a20:	4a04      	ldr	r2, [pc, #16]	; (8006a34 <RCC_GetPCLK1ClockFreq+0x24>)
 8006a22:	5cd3      	ldrb	r3, [r2, r3]
 8006a24:	461a      	mov	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	40d3      	lsrs	r3, r2
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	0800b3d4 	.word	0x0800b3d4

08006a38 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006a40:	f7ff ff3c 	bl	80068bc <LL_RCC_GetAPB2Prescaler>
 8006a44:	4603      	mov	r3, r0
 8006a46:	0b5b      	lsrs	r3, r3, #13
 8006a48:	4a04      	ldr	r2, [pc, #16]	; (8006a5c <RCC_GetPCLK2ClockFreq+0x24>)
 8006a4a:	5cd3      	ldrb	r3, [r2, r3]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	40d3      	lsrs	r3, r2
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	0800b3d4 	.word	0x0800b3d4

08006a60 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8006a60:	b590      	push	{r4, r7, lr}
 8006a62:	b087      	sub	sp, #28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	617b      	str	r3, [r7, #20]
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	2300      	movs	r3, #0
 8006a72:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006a74:	f7ff ff30 	bl	80068d8 <LL_RCC_PLL_GetMainSource>
 8006a78:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d004      	beq.n	8006a8a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a86:	d003      	beq.n	8006a90 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8006a88:	e005      	b.n	8006a96 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006a8a:	4b12      	ldr	r3, [pc, #72]	; (8006ad4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006a8c:	617b      	str	r3, [r7, #20]
      break;
 8006a8e:	e005      	b.n	8006a9c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006a90:	4b11      	ldr	r3, [pc, #68]	; (8006ad8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8006a92:	617b      	str	r3, [r7, #20]
      break;
 8006a94:	e002      	b.n	8006a9c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8006a96:	4b0f      	ldr	r3, [pc, #60]	; (8006ad4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006a98:	617b      	str	r3, [r7, #20]
      break;
 8006a9a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b08      	cmp	r3, #8
 8006aa0:	d113      	bne.n	8006aca <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006aa2:	f7ff ff43 	bl	800692c <LL_RCC_PLL_GetDivider>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	fbb3 f4f2 	udiv	r4, r3, r2
 8006aae:	f7ff ff21 	bl	80068f4 <LL_RCC_PLL_GetN>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	fb03 f404 	mul.w	r4, r3, r4
 8006ab8:	f7ff ff2a 	bl	8006910 <LL_RCC_PLL_GetP>
 8006abc:	4603      	mov	r3, r0
 8006abe:	0c1b      	lsrs	r3, r3, #16
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	fbb4 f3f3 	udiv	r3, r4, r3
 8006ac8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8006aca:	693b      	ldr	r3, [r7, #16]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	371c      	adds	r7, #28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd90      	pop	{r4, r7, pc}
 8006ad4:	00f42400 	.word	0x00f42400
 8006ad8:	007a1200 	.word	0x007a1200

08006adc <LL_SPI_IsEnabled>:
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aec:	2b40      	cmp	r3, #64	; 0x40
 8006aee:	d101      	bne.n	8006af4 <LL_SPI_IsEnabled+0x18>
 8006af0:	2301      	movs	r3, #1
 8006af2:	e000      	b.n	8006af6 <LL_SPI_IsEnabled+0x1a>
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <LL_SPI_SetCRCPolynomial>:
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	461a      	mov	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	611a      	str	r2, [r3, #16]
}
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f7ff ffd3 	bl	8006adc <LL_SPI_IsEnabled>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d139      	bne.n	8006bb0 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b44:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8006b48:	683a      	ldr	r2, [r7, #0]
 8006b4a:	6811      	ldr	r1, [r2, #0]
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	6852      	ldr	r2, [r2, #4]
 8006b50:	4311      	orrs	r1, r2
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	6892      	ldr	r2, [r2, #8]
 8006b56:	4311      	orrs	r1, r2
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	68d2      	ldr	r2, [r2, #12]
 8006b5c:	4311      	orrs	r1, r2
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	6912      	ldr	r2, [r2, #16]
 8006b62:	4311      	orrs	r1, r2
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	6952      	ldr	r2, [r2, #20]
 8006b68:	4311      	orrs	r1, r2
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	6992      	ldr	r2, [r2, #24]
 8006b6e:	4311      	orrs	r1, r2
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	69d2      	ldr	r2, [r2, #28]
 8006b74:	4311      	orrs	r1, r2
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	6a12      	ldr	r2, [r2, #32]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	431a      	orrs	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f023 0204 	bic.w	r2, r3, #4
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	0c1b      	lsrs	r3, r3, #16
 8006b90:	431a      	orrs	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b9e:	d105      	bne.n	8006bac <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7ff ffab 	bl	8006b02 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8006bac:	2300      	movs	r3, #0
 8006bae:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	61da      	str	r2, [r3, #28]
  return status;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <LL_TIM_SetPrescaler>:
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006bd6:	bf00      	nop
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <LL_TIM_SetAutoReload>:
{
 8006be2:	b480      	push	{r7}
 8006be4:	b083      	sub	sp, #12
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006bf2:	bf00      	nop
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <LL_TIM_SetRepetitionCounter>:
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b083      	sub	sp, #12
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c0e:	bf00      	nop
 8006c10:	370c      	adds	r7, #12
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <LL_TIM_OC_SetCompareCH1>:
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006c2a:	bf00      	nop
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <LL_TIM_OC_SetCompareCH2>:
{
 8006c36:	b480      	push	{r7}
 8006c38:	b083      	sub	sp, #12
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006c46:	bf00      	nop
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <LL_TIM_OC_SetCompareCH3>:
{
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
 8006c5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006c62:	bf00      	nop
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <LL_TIM_OC_SetCompareCH4>:
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b083      	sub	sp, #12
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006c7e:	bf00      	nop
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	f043 0201 	orr.w	r2, r3, #1
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	615a      	str	r2, [r3, #20]
}
 8006c9e:	bf00      	nop
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
	...

08006cac <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a3d      	ldr	r2, [pc, #244]	; (8006db4 <LL_TIM_Init+0x108>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d013      	beq.n	8006cec <LL_TIM_Init+0x40>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cca:	d00f      	beq.n	8006cec <LL_TIM_Init+0x40>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a3a      	ldr	r2, [pc, #232]	; (8006db8 <LL_TIM_Init+0x10c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d00b      	beq.n	8006cec <LL_TIM_Init+0x40>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a39      	ldr	r2, [pc, #228]	; (8006dbc <LL_TIM_Init+0x110>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d007      	beq.n	8006cec <LL_TIM_Init+0x40>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a38      	ldr	r2, [pc, #224]	; (8006dc0 <LL_TIM_Init+0x114>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d003      	beq.n	8006cec <LL_TIM_Init+0x40>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a37      	ldr	r2, [pc, #220]	; (8006dc4 <LL_TIM_Init+0x118>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d106      	bne.n	8006cfa <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a2d      	ldr	r2, [pc, #180]	; (8006db4 <LL_TIM_Init+0x108>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d02b      	beq.n	8006d5a <LL_TIM_Init+0xae>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d08:	d027      	beq.n	8006d5a <LL_TIM_Init+0xae>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a2a      	ldr	r2, [pc, #168]	; (8006db8 <LL_TIM_Init+0x10c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d023      	beq.n	8006d5a <LL_TIM_Init+0xae>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a29      	ldr	r2, [pc, #164]	; (8006dbc <LL_TIM_Init+0x110>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d01f      	beq.n	8006d5a <LL_TIM_Init+0xae>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a28      	ldr	r2, [pc, #160]	; (8006dc0 <LL_TIM_Init+0x114>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d01b      	beq.n	8006d5a <LL_TIM_Init+0xae>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a27      	ldr	r2, [pc, #156]	; (8006dc4 <LL_TIM_Init+0x118>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d017      	beq.n	8006d5a <LL_TIM_Init+0xae>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a26      	ldr	r2, [pc, #152]	; (8006dc8 <LL_TIM_Init+0x11c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d013      	beq.n	8006d5a <LL_TIM_Init+0xae>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a25      	ldr	r2, [pc, #148]	; (8006dcc <LL_TIM_Init+0x120>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d00f      	beq.n	8006d5a <LL_TIM_Init+0xae>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a24      	ldr	r2, [pc, #144]	; (8006dd0 <LL_TIM_Init+0x124>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d00b      	beq.n	8006d5a <LL_TIM_Init+0xae>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a23      	ldr	r2, [pc, #140]	; (8006dd4 <LL_TIM_Init+0x128>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d007      	beq.n	8006d5a <LL_TIM_Init+0xae>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a22      	ldr	r2, [pc, #136]	; (8006dd8 <LL_TIM_Init+0x12c>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d003      	beq.n	8006d5a <LL_TIM_Init+0xae>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a21      	ldr	r2, [pc, #132]	; (8006ddc <LL_TIM_Init+0x130>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d106      	bne.n	8006d68 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7ff ff34 	bl	8006be2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	881b      	ldrh	r3, [r3, #0]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7ff ff20 	bl	8006bc6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a0a      	ldr	r2, [pc, #40]	; (8006db4 <LL_TIM_Init+0x108>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d003      	beq.n	8006d96 <LL_TIM_Init+0xea>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a0c      	ldr	r2, [pc, #48]	; (8006dc4 <LL_TIM_Init+0x118>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d105      	bne.n	8006da2 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7ff ff2e 	bl	8006bfe <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7ff ff71 	bl	8006c8a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	40010000 	.word	0x40010000
 8006db8:	40000400 	.word	0x40000400
 8006dbc:	40000800 	.word	0x40000800
 8006dc0:	40000c00 	.word	0x40000c00
 8006dc4:	40010400 	.word	0x40010400
 8006dc8:	40014000 	.word	0x40014000
 8006dcc:	40014400 	.word	0x40014400
 8006dd0:	40014800 	.word	0x40014800
 8006dd4:	40001800 	.word	0x40001800
 8006dd8:	40001c00 	.word	0x40001c00
 8006ddc:	40002000 	.word	0x40002000

08006de0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df6:	d027      	beq.n	8006e48 <LL_TIM_OC_Init+0x68>
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dfe:	d82a      	bhi.n	8006e56 <LL_TIM_OC_Init+0x76>
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e06:	d018      	beq.n	8006e3a <LL_TIM_OC_Init+0x5a>
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e0e:	d822      	bhi.n	8006e56 <LL_TIM_OC_Init+0x76>
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d003      	beq.n	8006e1e <LL_TIM_OC_Init+0x3e>
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b10      	cmp	r3, #16
 8006e1a:	d007      	beq.n	8006e2c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8006e1c:	e01b      	b.n	8006e56 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8006e1e:	6879      	ldr	r1, [r7, #4]
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 f81f 	bl	8006e64 <OC1Config>
 8006e26:	4603      	mov	r3, r0
 8006e28:	75fb      	strb	r3, [r7, #23]
      break;
 8006e2a:	e015      	b.n	8006e58 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8006e2c:	6879      	ldr	r1, [r7, #4]
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 f884 	bl	8006f3c <OC2Config>
 8006e34:	4603      	mov	r3, r0
 8006e36:	75fb      	strb	r3, [r7, #23]
      break;
 8006e38:	e00e      	b.n	8006e58 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8006e3a:	6879      	ldr	r1, [r7, #4]
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 f8ed 	bl	800701c <OC3Config>
 8006e42:	4603      	mov	r3, r0
 8006e44:	75fb      	strb	r3, [r7, #23]
      break;
 8006e46:	e007      	b.n	8006e58 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8006e48:	6879      	ldr	r1, [r7, #4]
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f000 f956 	bl	80070fc <OC4Config>
 8006e50:	4603      	mov	r3, r0
 8006e52:	75fb      	strb	r3, [r7, #23]
      break;
 8006e54:	e000      	b.n	8006e58 <LL_TIM_OC_Init+0x78>
      break;
 8006e56:	bf00      	nop
  }

  return result;
 8006e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3718      	adds	r7, #24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
	...

08006e64 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	f023 0201 	bic.w	r2, r3, #1
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f023 0303 	bic.w	r3, r3, #3
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f023 0202 	bic.w	r2, r3, #2
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f023 0201 	bic.w	r2, r3, #1
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a1c      	ldr	r2, [pc, #112]	; (8006f34 <OC1Config+0xd0>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d003      	beq.n	8006ece <OC1Config+0x6a>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a1b      	ldr	r2, [pc, #108]	; (8006f38 <OC1Config+0xd4>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d11e      	bne.n	8006f0c <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f023 0208 	bic.w	r2, r3, #8
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f023 0204 	bic.w	r2, r3, #4
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4313      	orrs	r3, r2
 8006eec:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7ff fe7b 	bl	8006c1a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	40010000 	.word	0x40010000
 8006f38:	40010400 	.word	0x40010400

08006f3c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	f023 0210 	bic.w	r2, r3, #16
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	021b      	lsls	r3, r3, #8
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f023 0220 	bic.w	r2, r3, #32
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	011b      	lsls	r3, r3, #4
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f023 0210 	bic.w	r2, r3, #16
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	011b      	lsls	r3, r3, #4
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a1d      	ldr	r2, [pc, #116]	; (8007014 <OC2Config+0xd8>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d003      	beq.n	8006fac <OC2Config+0x70>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a1c      	ldr	r2, [pc, #112]	; (8007018 <OC2Config+0xdc>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d11f      	bne.n	8006fec <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	019b      	lsls	r3, r3, #6
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	019b      	lsls	r3, r3, #6
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7ff fe19 	bl	8006c36 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	697a      	ldr	r2, [r7, #20]
 8007008:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	40010000 	.word	0x40010000
 8007018:	40010400 	.word	0x40010400

0800701c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f023 0303 	bic.w	r3, r3, #3
 800704a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4313      	orrs	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	021b      	lsls	r3, r3, #8
 8007066:	4313      	orrs	r3, r2
 8007068:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	021b      	lsls	r3, r3, #8
 8007076:	4313      	orrs	r3, r2
 8007078:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a1d      	ldr	r2, [pc, #116]	; (80070f4 <OC3Config+0xd8>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d003      	beq.n	800708a <OC3Config+0x6e>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a1c      	ldr	r2, [pc, #112]	; (80070f8 <OC3Config+0xdc>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d11f      	bne.n	80070ca <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	029b      	lsls	r3, r3, #10
 8007096:	4313      	orrs	r3, r2
 8007098:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	029b      	lsls	r3, r3, #10
 80070a6:	4313      	orrs	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	011b      	lsls	r3, r3, #4
 80070b6:	4313      	orrs	r3, r2
 80070b8:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	69db      	ldr	r3, [r3, #28]
 80070c4:	015b      	lsls	r3, r3, #5
 80070c6:	4313      	orrs	r3, r2
 80070c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff fdb8 	bl	8006c52 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	40010000 	.word	0x40010000
 80070f8:	40010400 	.word	0x40010400

080070fc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800712a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	021b      	lsls	r3, r3, #8
 8007138:	4313      	orrs	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	031b      	lsls	r3, r3, #12
 8007148:	4313      	orrs	r3, r2
 800714a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	031b      	lsls	r3, r3, #12
 8007158:	4313      	orrs	r3, r2
 800715a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a11      	ldr	r2, [pc, #68]	; (80071a4 <OC4Config+0xa8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d003      	beq.n	800716c <OC4Config+0x70>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a10      	ldr	r2, [pc, #64]	; (80071a8 <OC4Config+0xac>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d107      	bne.n	800717c <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	019b      	lsls	r3, r3, #6
 8007178:	4313      	orrs	r3, r2
 800717a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7ff fd6d 	bl	8006c6e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3718      	adds	r7, #24
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	40010000 	.word	0x40010000
 80071a8:	40010400 	.word	0x40010400

080071ac <LL_USART_IsEnabled>:
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c0:	bf0c      	ite	eq
 80071c2:	2301      	moveq	r3, #1
 80071c4:	2300      	movne	r3, #0
 80071c6:	b2db      	uxtb	r3, r3
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <LL_USART_SetStopBitsLength>:
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	431a      	orrs	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	611a      	str	r2, [r3, #16]
}
 80071ee:	bf00      	nop
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <LL_USART_SetHWFlowCtrl>:
{
 80071fa:	b480      	push	{r7}
 80071fc:	b083      	sub	sp, #12
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	431a      	orrs	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	615a      	str	r2, [r3, #20]
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <LL_USART_SetBaudRate>:
{
 8007220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007224:	b0c0      	sub	sp, #256	; 0x100
 8007226:	af00      	add	r7, sp, #0
 8007228:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800722c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8007230:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8007234:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800723c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007240:	f040 810c 	bne.w	800745c <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007244:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007248:	2200      	movs	r2, #0
 800724a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800724e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007252:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007256:	4622      	mov	r2, r4
 8007258:	462b      	mov	r3, r5
 800725a:	1891      	adds	r1, r2, r2
 800725c:	6639      	str	r1, [r7, #96]	; 0x60
 800725e:	415b      	adcs	r3, r3
 8007260:	667b      	str	r3, [r7, #100]	; 0x64
 8007262:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007266:	4621      	mov	r1, r4
 8007268:	eb12 0801 	adds.w	r8, r2, r1
 800726c:	4629      	mov	r1, r5
 800726e:	eb43 0901 	adc.w	r9, r3, r1
 8007272:	f04f 0200 	mov.w	r2, #0
 8007276:	f04f 0300 	mov.w	r3, #0
 800727a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800727e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007286:	4690      	mov	r8, r2
 8007288:	4699      	mov	r9, r3
 800728a:	4623      	mov	r3, r4
 800728c:	eb18 0303 	adds.w	r3, r8, r3
 8007290:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007294:	462b      	mov	r3, r5
 8007296:	eb49 0303 	adc.w	r3, r9, r3
 800729a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800729e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80072a2:	2200      	movs	r2, #0
 80072a4:	469a      	mov	sl, r3
 80072a6:	4693      	mov	fp, r2
 80072a8:	eb1a 030a 	adds.w	r3, sl, sl
 80072ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80072ae:	eb4b 030b 	adc.w	r3, fp, fp
 80072b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80072b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80072bc:	f7f9 fcc4 	bl	8000c48 <__aeabi_uldivmod>
 80072c0:	4602      	mov	r2, r0
 80072c2:	460b      	mov	r3, r1
 80072c4:	4b64      	ldr	r3, [pc, #400]	; (8007458 <LL_USART_SetBaudRate+0x238>)
 80072c6:	fba3 2302 	umull	r2, r3, r3, r2
 80072ca:	095b      	lsrs	r3, r3, #5
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	b29c      	uxth	r4, r3
 80072d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072dc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80072e0:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80072e4:	4642      	mov	r2, r8
 80072e6:	464b      	mov	r3, r9
 80072e8:	1891      	adds	r1, r2, r2
 80072ea:	6539      	str	r1, [r7, #80]	; 0x50
 80072ec:	415b      	adcs	r3, r3
 80072ee:	657b      	str	r3, [r7, #84]	; 0x54
 80072f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80072f4:	4641      	mov	r1, r8
 80072f6:	1851      	adds	r1, r2, r1
 80072f8:	64b9      	str	r1, [r7, #72]	; 0x48
 80072fa:	4649      	mov	r1, r9
 80072fc:	414b      	adcs	r3, r1
 80072fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007300:	f04f 0200 	mov.w	r2, #0
 8007304:	f04f 0300 	mov.w	r3, #0
 8007308:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 800730c:	4659      	mov	r1, fp
 800730e:	00cb      	lsls	r3, r1, #3
 8007310:	4651      	mov	r1, sl
 8007312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007316:	4651      	mov	r1, sl
 8007318:	00ca      	lsls	r2, r1, #3
 800731a:	4610      	mov	r0, r2
 800731c:	4619      	mov	r1, r3
 800731e:	4603      	mov	r3, r0
 8007320:	4642      	mov	r2, r8
 8007322:	189b      	adds	r3, r3, r2
 8007324:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007328:	464b      	mov	r3, r9
 800732a:	460a      	mov	r2, r1
 800732c:	eb42 0303 	adc.w	r3, r2, r3
 8007330:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007334:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007338:	2200      	movs	r2, #0
 800733a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800733e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8007342:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007346:	460b      	mov	r3, r1
 8007348:	18db      	adds	r3, r3, r3
 800734a:	643b      	str	r3, [r7, #64]	; 0x40
 800734c:	4613      	mov	r3, r2
 800734e:	eb42 0303 	adc.w	r3, r2, r3
 8007352:	647b      	str	r3, [r7, #68]	; 0x44
 8007354:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007358:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800735c:	f7f9 fc74 	bl	8000c48 <__aeabi_uldivmod>
 8007360:	4602      	mov	r2, r0
 8007362:	460b      	mov	r3, r1
 8007364:	4611      	mov	r1, r2
 8007366:	4b3c      	ldr	r3, [pc, #240]	; (8007458 <LL_USART_SetBaudRate+0x238>)
 8007368:	fba3 2301 	umull	r2, r3, r3, r1
 800736c:	095b      	lsrs	r3, r3, #5
 800736e:	2264      	movs	r2, #100	; 0x64
 8007370:	fb02 f303 	mul.w	r3, r2, r3
 8007374:	1acb      	subs	r3, r1, r3
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800737c:	4b36      	ldr	r3, [pc, #216]	; (8007458 <LL_USART_SetBaudRate+0x238>)
 800737e:	fba3 2302 	umull	r2, r3, r3, r2
 8007382:	095b      	lsrs	r3, r3, #5
 8007384:	b29b      	uxth	r3, r3
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	b29b      	uxth	r3, r3
 800738a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800738e:	b29b      	uxth	r3, r3
 8007390:	4423      	add	r3, r4
 8007392:	b29c      	uxth	r4, r3
 8007394:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007398:	2200      	movs	r2, #0
 800739a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800739e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80073a2:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80073a6:	4642      	mov	r2, r8
 80073a8:	464b      	mov	r3, r9
 80073aa:	1891      	adds	r1, r2, r2
 80073ac:	63b9      	str	r1, [r7, #56]	; 0x38
 80073ae:	415b      	adcs	r3, r3
 80073b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073b6:	4641      	mov	r1, r8
 80073b8:	1851      	adds	r1, r2, r1
 80073ba:	6339      	str	r1, [r7, #48]	; 0x30
 80073bc:	4649      	mov	r1, r9
 80073be:	414b      	adcs	r3, r1
 80073c0:	637b      	str	r3, [r7, #52]	; 0x34
 80073c2:	f04f 0200 	mov.w	r2, #0
 80073c6:	f04f 0300 	mov.w	r3, #0
 80073ca:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80073ce:	4659      	mov	r1, fp
 80073d0:	00cb      	lsls	r3, r1, #3
 80073d2:	4651      	mov	r1, sl
 80073d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073d8:	4651      	mov	r1, sl
 80073da:	00ca      	lsls	r2, r1, #3
 80073dc:	4610      	mov	r0, r2
 80073de:	4619      	mov	r1, r3
 80073e0:	4603      	mov	r3, r0
 80073e2:	4642      	mov	r2, r8
 80073e4:	189b      	adds	r3, r3, r2
 80073e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073ea:	464b      	mov	r3, r9
 80073ec:	460a      	mov	r2, r1
 80073ee:	eb42 0303 	adc.w	r3, r2, r3
 80073f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80073f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007400:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8007404:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007408:	460b      	mov	r3, r1
 800740a:	18db      	adds	r3, r3, r3
 800740c:	62bb      	str	r3, [r7, #40]	; 0x28
 800740e:	4613      	mov	r3, r2
 8007410:	eb42 0303 	adc.w	r3, r2, r3
 8007414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007416:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800741a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800741e:	f7f9 fc13 	bl	8000c48 <__aeabi_uldivmod>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4b0c      	ldr	r3, [pc, #48]	; (8007458 <LL_USART_SetBaudRate+0x238>)
 8007428:	fba3 1302 	umull	r1, r3, r3, r2
 800742c:	095b      	lsrs	r3, r3, #5
 800742e:	2164      	movs	r1, #100	; 0x64
 8007430:	fb01 f303 	mul.w	r3, r1, r3
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	00db      	lsls	r3, r3, #3
 8007438:	3332      	adds	r3, #50	; 0x32
 800743a:	4a07      	ldr	r2, [pc, #28]	; (8007458 <LL_USART_SetBaudRate+0x238>)
 800743c:	fba2 2303 	umull	r2, r3, r2, r3
 8007440:	095b      	lsrs	r3, r3, #5
 8007442:	b29b      	uxth	r3, r3
 8007444:	f003 0307 	and.w	r3, r3, #7
 8007448:	b29b      	uxth	r3, r3
 800744a:	4423      	add	r3, r4
 800744c:	b29b      	uxth	r3, r3
 800744e:	461a      	mov	r2, r3
 8007450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007454:	609a      	str	r2, [r3, #8]
}
 8007456:	e107      	b.n	8007668 <LL_USART_SetBaudRate+0x448>
 8007458:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800745c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007460:	2200      	movs	r2, #0
 8007462:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007466:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800746a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800746e:	4642      	mov	r2, r8
 8007470:	464b      	mov	r3, r9
 8007472:	1891      	adds	r1, r2, r2
 8007474:	6239      	str	r1, [r7, #32]
 8007476:	415b      	adcs	r3, r3
 8007478:	627b      	str	r3, [r7, #36]	; 0x24
 800747a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800747e:	4641      	mov	r1, r8
 8007480:	1854      	adds	r4, r2, r1
 8007482:	4649      	mov	r1, r9
 8007484:	eb43 0501 	adc.w	r5, r3, r1
 8007488:	f04f 0200 	mov.w	r2, #0
 800748c:	f04f 0300 	mov.w	r3, #0
 8007490:	00eb      	lsls	r3, r5, #3
 8007492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007496:	00e2      	lsls	r2, r4, #3
 8007498:	4614      	mov	r4, r2
 800749a:	461d      	mov	r5, r3
 800749c:	4643      	mov	r3, r8
 800749e:	18e3      	adds	r3, r4, r3
 80074a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074a4:	464b      	mov	r3, r9
 80074a6:	eb45 0303 	adc.w	r3, r5, r3
 80074aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80074ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074b8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80074bc:	f04f 0200 	mov.w	r2, #0
 80074c0:	f04f 0300 	mov.w	r3, #0
 80074c4:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80074c8:	4629      	mov	r1, r5
 80074ca:	008b      	lsls	r3, r1, #2
 80074cc:	4621      	mov	r1, r4
 80074ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074d2:	4621      	mov	r1, r4
 80074d4:	008a      	lsls	r2, r1, #2
 80074d6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80074da:	f7f9 fbb5 	bl	8000c48 <__aeabi_uldivmod>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	4b64      	ldr	r3, [pc, #400]	; (8007674 <LL_USART_SetBaudRate+0x454>)
 80074e4:	fba3 2302 	umull	r2, r3, r3, r2
 80074e8:	095b      	lsrs	r3, r3, #5
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	011b      	lsls	r3, r3, #4
 80074ee:	b29c      	uxth	r4, r3
 80074f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80074f4:	2200      	movs	r2, #0
 80074f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074fe:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8007502:	4642      	mov	r2, r8
 8007504:	464b      	mov	r3, r9
 8007506:	1891      	adds	r1, r2, r2
 8007508:	61b9      	str	r1, [r7, #24]
 800750a:	415b      	adcs	r3, r3
 800750c:	61fb      	str	r3, [r7, #28]
 800750e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007512:	4641      	mov	r1, r8
 8007514:	1851      	adds	r1, r2, r1
 8007516:	6139      	str	r1, [r7, #16]
 8007518:	4649      	mov	r1, r9
 800751a:	414b      	adcs	r3, r1
 800751c:	617b      	str	r3, [r7, #20]
 800751e:	f04f 0200 	mov.w	r2, #0
 8007522:	f04f 0300 	mov.w	r3, #0
 8007526:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800752a:	4659      	mov	r1, fp
 800752c:	00cb      	lsls	r3, r1, #3
 800752e:	4651      	mov	r1, sl
 8007530:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007534:	4651      	mov	r1, sl
 8007536:	00ca      	lsls	r2, r1, #3
 8007538:	4610      	mov	r0, r2
 800753a:	4619      	mov	r1, r3
 800753c:	4603      	mov	r3, r0
 800753e:	4642      	mov	r2, r8
 8007540:	189b      	adds	r3, r3, r2
 8007542:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007546:	464b      	mov	r3, r9
 8007548:	460a      	mov	r2, r1
 800754a:	eb42 0303 	adc.w	r3, r2, r3
 800754e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007552:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007556:	2200      	movs	r2, #0
 8007558:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800755c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007560:	f04f 0200 	mov.w	r2, #0
 8007564:	f04f 0300 	mov.w	r3, #0
 8007568:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 800756c:	4649      	mov	r1, r9
 800756e:	008b      	lsls	r3, r1, #2
 8007570:	4641      	mov	r1, r8
 8007572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007576:	4641      	mov	r1, r8
 8007578:	008a      	lsls	r2, r1, #2
 800757a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800757e:	f7f9 fb63 	bl	8000c48 <__aeabi_uldivmod>
 8007582:	4602      	mov	r2, r0
 8007584:	460b      	mov	r3, r1
 8007586:	4b3b      	ldr	r3, [pc, #236]	; (8007674 <LL_USART_SetBaudRate+0x454>)
 8007588:	fba3 1302 	umull	r1, r3, r3, r2
 800758c:	095b      	lsrs	r3, r3, #5
 800758e:	2164      	movs	r1, #100	; 0x64
 8007590:	fb01 f303 	mul.w	r3, r1, r3
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	011b      	lsls	r3, r3, #4
 8007598:	3332      	adds	r3, #50	; 0x32
 800759a:	4a36      	ldr	r2, [pc, #216]	; (8007674 <LL_USART_SetBaudRate+0x454>)
 800759c:	fba2 2303 	umull	r2, r3, r2, r3
 80075a0:	095b      	lsrs	r3, r3, #5
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	4423      	add	r3, r4
 80075ac:	b29c      	uxth	r4, r3
 80075ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80075b2:	2200      	movs	r2, #0
 80075b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80075b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80075b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80075bc:	4642      	mov	r2, r8
 80075be:	464b      	mov	r3, r9
 80075c0:	1891      	adds	r1, r2, r2
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	415b      	adcs	r3, r3
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075cc:	4641      	mov	r1, r8
 80075ce:	1851      	adds	r1, r2, r1
 80075d0:	6039      	str	r1, [r7, #0]
 80075d2:	4649      	mov	r1, r9
 80075d4:	414b      	adcs	r3, r1
 80075d6:	607b      	str	r3, [r7, #4]
 80075d8:	f04f 0200 	mov.w	r2, #0
 80075dc:	f04f 0300 	mov.w	r3, #0
 80075e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075e4:	4659      	mov	r1, fp
 80075e6:	00cb      	lsls	r3, r1, #3
 80075e8:	4651      	mov	r1, sl
 80075ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075ee:	4651      	mov	r1, sl
 80075f0:	00ca      	lsls	r2, r1, #3
 80075f2:	4610      	mov	r0, r2
 80075f4:	4619      	mov	r1, r3
 80075f6:	4603      	mov	r3, r0
 80075f8:	4642      	mov	r2, r8
 80075fa:	189b      	adds	r3, r3, r2
 80075fc:	673b      	str	r3, [r7, #112]	; 0x70
 80075fe:	464b      	mov	r3, r9
 8007600:	460a      	mov	r2, r1
 8007602:	eb42 0303 	adc.w	r3, r2, r3
 8007606:	677b      	str	r3, [r7, #116]	; 0x74
 8007608:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800760c:	2200      	movs	r2, #0
 800760e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007610:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007612:	f04f 0200 	mov.w	r2, #0
 8007616:	f04f 0300 	mov.w	r3, #0
 800761a:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800761e:	4649      	mov	r1, r9
 8007620:	008b      	lsls	r3, r1, #2
 8007622:	4641      	mov	r1, r8
 8007624:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007628:	4641      	mov	r1, r8
 800762a:	008a      	lsls	r2, r1, #2
 800762c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8007630:	f7f9 fb0a 	bl	8000c48 <__aeabi_uldivmod>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	4b0e      	ldr	r3, [pc, #56]	; (8007674 <LL_USART_SetBaudRate+0x454>)
 800763a:	fba3 1302 	umull	r1, r3, r3, r2
 800763e:	095b      	lsrs	r3, r3, #5
 8007640:	2164      	movs	r1, #100	; 0x64
 8007642:	fb01 f303 	mul.w	r3, r1, r3
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	011b      	lsls	r3, r3, #4
 800764a:	3332      	adds	r3, #50	; 0x32
 800764c:	4a09      	ldr	r2, [pc, #36]	; (8007674 <LL_USART_SetBaudRate+0x454>)
 800764e:	fba2 2303 	umull	r2, r3, r2, r3
 8007652:	095b      	lsrs	r3, r3, #5
 8007654:	b29b      	uxth	r3, r3
 8007656:	f003 030f 	and.w	r3, r3, #15
 800765a:	b29b      	uxth	r3, r3
 800765c:	4423      	add	r3, r4
 800765e:	b29b      	uxth	r3, r3
 8007660:	461a      	mov	r2, r3
 8007662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007666:	609a      	str	r2, [r3, #8]
}
 8007668:	bf00      	nop
 800766a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800766e:	46bd      	mov	sp, r7
 8007670:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007674:	51eb851f 	.word	0x51eb851f

08007678 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b088      	sub	sp, #32
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007686:	2300      	movs	r3, #0
 8007688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7ff fd8e 	bl	80071ac <LL_USART_IsEnabled>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d15e      	bne.n	8007754 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800769e:	f023 030c 	bic.w	r3, r3, #12
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	6851      	ldr	r1, [r2, #4]
 80076a6:	683a      	ldr	r2, [r7, #0]
 80076a8:	68d2      	ldr	r2, [r2, #12]
 80076aa:	4311      	orrs	r1, r2
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	6912      	ldr	r2, [r2, #16]
 80076b0:	4311      	orrs	r1, r2
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	6992      	ldr	r2, [r2, #24]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	431a      	orrs	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	4619      	mov	r1, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7ff fd85 	bl	80071d4 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7ff fd92 	bl	80071fa <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80076d6:	f107 0308 	add.w	r3, r7, #8
 80076da:	4618      	mov	r0, r3
 80076dc:	f7ff f934 	bl	8006948 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a1f      	ldr	r2, [pc, #124]	; (8007760 <LL_USART_Init+0xe8>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d102      	bne.n	80076ee <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	61bb      	str	r3, [r7, #24]
 80076ec:	e021      	b.n	8007732 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a1c      	ldr	r2, [pc, #112]	; (8007764 <LL_USART_Init+0xec>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d102      	bne.n	80076fc <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	61bb      	str	r3, [r7, #24]
 80076fa:	e01a      	b.n	8007732 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a1a      	ldr	r2, [pc, #104]	; (8007768 <LL_USART_Init+0xf0>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d102      	bne.n	800770a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	61bb      	str	r3, [r7, #24]
 8007708:	e013      	b.n	8007732 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a17      	ldr	r2, [pc, #92]	; (800776c <LL_USART_Init+0xf4>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d102      	bne.n	8007718 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	61bb      	str	r3, [r7, #24]
 8007716:	e00c      	b.n	8007732 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a15      	ldr	r2, [pc, #84]	; (8007770 <LL_USART_Init+0xf8>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d102      	bne.n	8007726 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	61bb      	str	r3, [r7, #24]
 8007724:	e005      	b.n	8007732 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	4a12      	ldr	r2, [pc, #72]	; (8007774 <LL_USART_Init+0xfc>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d101      	bne.n	8007732 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00d      	beq.n	8007754 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d009      	beq.n	8007754 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8007740:	2300      	movs	r3, #0
 8007742:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	699a      	ldr	r2, [r3, #24]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	69b9      	ldr	r1, [r7, #24]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7ff fd66 	bl	8007220 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007754:	7ffb      	ldrb	r3, [r7, #31]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3720      	adds	r7, #32
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	40011000 	.word	0x40011000
 8007764:	40004400 	.word	0x40004400
 8007768:	40004800 	.word	0x40004800
 800776c:	40011400 	.word	0x40011400
 8007770:	40004c00 	.word	0x40004c00
 8007774:	40005000 	.word	0x40005000

08007778 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8007780:	4a04      	ldr	r2, [pc, #16]	; (8007794 <LL_SetSystemCoreClock+0x1c>)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6013      	str	r3, [r2, #0]
}
 8007786:	bf00      	nop
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	20000014 	.word	0x20000014

08007798 <__errno>:
 8007798:	4b01      	ldr	r3, [pc, #4]	; (80077a0 <__errno+0x8>)
 800779a:	6818      	ldr	r0, [r3, #0]
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	20000020 	.word	0x20000020

080077a4 <__libc_init_array>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	4d0d      	ldr	r5, [pc, #52]	; (80077dc <__libc_init_array+0x38>)
 80077a8:	4c0d      	ldr	r4, [pc, #52]	; (80077e0 <__libc_init_array+0x3c>)
 80077aa:	1b64      	subs	r4, r4, r5
 80077ac:	10a4      	asrs	r4, r4, #2
 80077ae:	2600      	movs	r6, #0
 80077b0:	42a6      	cmp	r6, r4
 80077b2:	d109      	bne.n	80077c8 <__libc_init_array+0x24>
 80077b4:	4d0b      	ldr	r5, [pc, #44]	; (80077e4 <__libc_init_array+0x40>)
 80077b6:	4c0c      	ldr	r4, [pc, #48]	; (80077e8 <__libc_init_array+0x44>)
 80077b8:	f003 f93a 	bl	800aa30 <_init>
 80077bc:	1b64      	subs	r4, r4, r5
 80077be:	10a4      	asrs	r4, r4, #2
 80077c0:	2600      	movs	r6, #0
 80077c2:	42a6      	cmp	r6, r4
 80077c4:	d105      	bne.n	80077d2 <__libc_init_array+0x2e>
 80077c6:	bd70      	pop	{r4, r5, r6, pc}
 80077c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077cc:	4798      	blx	r3
 80077ce:	3601      	adds	r6, #1
 80077d0:	e7ee      	b.n	80077b0 <__libc_init_array+0xc>
 80077d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077d6:	4798      	blx	r3
 80077d8:	3601      	adds	r6, #1
 80077da:	e7f2      	b.n	80077c2 <__libc_init_array+0x1e>
 80077dc:	0800b814 	.word	0x0800b814
 80077e0:	0800b814 	.word	0x0800b814
 80077e4:	0800b814 	.word	0x0800b814
 80077e8:	0800b818 	.word	0x0800b818

080077ec <memcpy>:
 80077ec:	440a      	add	r2, r1
 80077ee:	4291      	cmp	r1, r2
 80077f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80077f4:	d100      	bne.n	80077f8 <memcpy+0xc>
 80077f6:	4770      	bx	lr
 80077f8:	b510      	push	{r4, lr}
 80077fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007802:	4291      	cmp	r1, r2
 8007804:	d1f9      	bne.n	80077fa <memcpy+0xe>
 8007806:	bd10      	pop	{r4, pc}

08007808 <memset>:
 8007808:	4402      	add	r2, r0
 800780a:	4603      	mov	r3, r0
 800780c:	4293      	cmp	r3, r2
 800780e:	d100      	bne.n	8007812 <memset+0xa>
 8007810:	4770      	bx	lr
 8007812:	f803 1b01 	strb.w	r1, [r3], #1
 8007816:	e7f9      	b.n	800780c <memset+0x4>

08007818 <__cvt>:
 8007818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800781c:	ec55 4b10 	vmov	r4, r5, d0
 8007820:	2d00      	cmp	r5, #0
 8007822:	460e      	mov	r6, r1
 8007824:	4619      	mov	r1, r3
 8007826:	462b      	mov	r3, r5
 8007828:	bfbb      	ittet	lt
 800782a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800782e:	461d      	movlt	r5, r3
 8007830:	2300      	movge	r3, #0
 8007832:	232d      	movlt	r3, #45	; 0x2d
 8007834:	700b      	strb	r3, [r1, #0]
 8007836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007838:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800783c:	4691      	mov	r9, r2
 800783e:	f023 0820 	bic.w	r8, r3, #32
 8007842:	bfbc      	itt	lt
 8007844:	4622      	movlt	r2, r4
 8007846:	4614      	movlt	r4, r2
 8007848:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800784c:	d005      	beq.n	800785a <__cvt+0x42>
 800784e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007852:	d100      	bne.n	8007856 <__cvt+0x3e>
 8007854:	3601      	adds	r6, #1
 8007856:	2102      	movs	r1, #2
 8007858:	e000      	b.n	800785c <__cvt+0x44>
 800785a:	2103      	movs	r1, #3
 800785c:	ab03      	add	r3, sp, #12
 800785e:	9301      	str	r3, [sp, #4]
 8007860:	ab02      	add	r3, sp, #8
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	ec45 4b10 	vmov	d0, r4, r5
 8007868:	4653      	mov	r3, sl
 800786a:	4632      	mov	r2, r6
 800786c:	f000 fe18 	bl	80084a0 <_dtoa_r>
 8007870:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007874:	4607      	mov	r7, r0
 8007876:	d102      	bne.n	800787e <__cvt+0x66>
 8007878:	f019 0f01 	tst.w	r9, #1
 800787c:	d022      	beq.n	80078c4 <__cvt+0xac>
 800787e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007882:	eb07 0906 	add.w	r9, r7, r6
 8007886:	d110      	bne.n	80078aa <__cvt+0x92>
 8007888:	783b      	ldrb	r3, [r7, #0]
 800788a:	2b30      	cmp	r3, #48	; 0x30
 800788c:	d10a      	bne.n	80078a4 <__cvt+0x8c>
 800788e:	2200      	movs	r2, #0
 8007890:	2300      	movs	r3, #0
 8007892:	4620      	mov	r0, r4
 8007894:	4629      	mov	r1, r5
 8007896:	f7f9 f917 	bl	8000ac8 <__aeabi_dcmpeq>
 800789a:	b918      	cbnz	r0, 80078a4 <__cvt+0x8c>
 800789c:	f1c6 0601 	rsb	r6, r6, #1
 80078a0:	f8ca 6000 	str.w	r6, [sl]
 80078a4:	f8da 3000 	ldr.w	r3, [sl]
 80078a8:	4499      	add	r9, r3
 80078aa:	2200      	movs	r2, #0
 80078ac:	2300      	movs	r3, #0
 80078ae:	4620      	mov	r0, r4
 80078b0:	4629      	mov	r1, r5
 80078b2:	f7f9 f909 	bl	8000ac8 <__aeabi_dcmpeq>
 80078b6:	b108      	cbz	r0, 80078bc <__cvt+0xa4>
 80078b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80078bc:	2230      	movs	r2, #48	; 0x30
 80078be:	9b03      	ldr	r3, [sp, #12]
 80078c0:	454b      	cmp	r3, r9
 80078c2:	d307      	bcc.n	80078d4 <__cvt+0xbc>
 80078c4:	9b03      	ldr	r3, [sp, #12]
 80078c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078c8:	1bdb      	subs	r3, r3, r7
 80078ca:	4638      	mov	r0, r7
 80078cc:	6013      	str	r3, [r2, #0]
 80078ce:	b004      	add	sp, #16
 80078d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078d4:	1c59      	adds	r1, r3, #1
 80078d6:	9103      	str	r1, [sp, #12]
 80078d8:	701a      	strb	r2, [r3, #0]
 80078da:	e7f0      	b.n	80078be <__cvt+0xa6>

080078dc <__exponent>:
 80078dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078de:	4603      	mov	r3, r0
 80078e0:	2900      	cmp	r1, #0
 80078e2:	bfb8      	it	lt
 80078e4:	4249      	neglt	r1, r1
 80078e6:	f803 2b02 	strb.w	r2, [r3], #2
 80078ea:	bfb4      	ite	lt
 80078ec:	222d      	movlt	r2, #45	; 0x2d
 80078ee:	222b      	movge	r2, #43	; 0x2b
 80078f0:	2909      	cmp	r1, #9
 80078f2:	7042      	strb	r2, [r0, #1]
 80078f4:	dd2a      	ble.n	800794c <__exponent+0x70>
 80078f6:	f10d 0407 	add.w	r4, sp, #7
 80078fa:	46a4      	mov	ip, r4
 80078fc:	270a      	movs	r7, #10
 80078fe:	46a6      	mov	lr, r4
 8007900:	460a      	mov	r2, r1
 8007902:	fb91 f6f7 	sdiv	r6, r1, r7
 8007906:	fb07 1516 	mls	r5, r7, r6, r1
 800790a:	3530      	adds	r5, #48	; 0x30
 800790c:	2a63      	cmp	r2, #99	; 0x63
 800790e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007912:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007916:	4631      	mov	r1, r6
 8007918:	dcf1      	bgt.n	80078fe <__exponent+0x22>
 800791a:	3130      	adds	r1, #48	; 0x30
 800791c:	f1ae 0502 	sub.w	r5, lr, #2
 8007920:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007924:	1c44      	adds	r4, r0, #1
 8007926:	4629      	mov	r1, r5
 8007928:	4561      	cmp	r1, ip
 800792a:	d30a      	bcc.n	8007942 <__exponent+0x66>
 800792c:	f10d 0209 	add.w	r2, sp, #9
 8007930:	eba2 020e 	sub.w	r2, r2, lr
 8007934:	4565      	cmp	r5, ip
 8007936:	bf88      	it	hi
 8007938:	2200      	movhi	r2, #0
 800793a:	4413      	add	r3, r2
 800793c:	1a18      	subs	r0, r3, r0
 800793e:	b003      	add	sp, #12
 8007940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007942:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007946:	f804 2f01 	strb.w	r2, [r4, #1]!
 800794a:	e7ed      	b.n	8007928 <__exponent+0x4c>
 800794c:	2330      	movs	r3, #48	; 0x30
 800794e:	3130      	adds	r1, #48	; 0x30
 8007950:	7083      	strb	r3, [r0, #2]
 8007952:	70c1      	strb	r1, [r0, #3]
 8007954:	1d03      	adds	r3, r0, #4
 8007956:	e7f1      	b.n	800793c <__exponent+0x60>

08007958 <_printf_float>:
 8007958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	ed2d 8b02 	vpush	{d8}
 8007960:	b08d      	sub	sp, #52	; 0x34
 8007962:	460c      	mov	r4, r1
 8007964:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007968:	4616      	mov	r6, r2
 800796a:	461f      	mov	r7, r3
 800796c:	4605      	mov	r5, r0
 800796e:	f001 fd3d 	bl	80093ec <_localeconv_r>
 8007972:	f8d0 a000 	ldr.w	sl, [r0]
 8007976:	4650      	mov	r0, sl
 8007978:	f7f8 fc2a 	bl	80001d0 <strlen>
 800797c:	2300      	movs	r3, #0
 800797e:	930a      	str	r3, [sp, #40]	; 0x28
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	9305      	str	r3, [sp, #20]
 8007984:	f8d8 3000 	ldr.w	r3, [r8]
 8007988:	f894 b018 	ldrb.w	fp, [r4, #24]
 800798c:	3307      	adds	r3, #7
 800798e:	f023 0307 	bic.w	r3, r3, #7
 8007992:	f103 0208 	add.w	r2, r3, #8
 8007996:	f8c8 2000 	str.w	r2, [r8]
 800799a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800799e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80079a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80079a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80079aa:	9307      	str	r3, [sp, #28]
 80079ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80079b0:	ee08 0a10 	vmov	s16, r0
 80079b4:	4b9f      	ldr	r3, [pc, #636]	; (8007c34 <_printf_float+0x2dc>)
 80079b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079be:	f7f9 f8b5 	bl	8000b2c <__aeabi_dcmpun>
 80079c2:	bb88      	cbnz	r0, 8007a28 <_printf_float+0xd0>
 80079c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079c8:	4b9a      	ldr	r3, [pc, #616]	; (8007c34 <_printf_float+0x2dc>)
 80079ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079ce:	f7f9 f88f 	bl	8000af0 <__aeabi_dcmple>
 80079d2:	bb48      	cbnz	r0, 8007a28 <_printf_float+0xd0>
 80079d4:	2200      	movs	r2, #0
 80079d6:	2300      	movs	r3, #0
 80079d8:	4640      	mov	r0, r8
 80079da:	4649      	mov	r1, r9
 80079dc:	f7f9 f87e 	bl	8000adc <__aeabi_dcmplt>
 80079e0:	b110      	cbz	r0, 80079e8 <_printf_float+0x90>
 80079e2:	232d      	movs	r3, #45	; 0x2d
 80079e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079e8:	4b93      	ldr	r3, [pc, #588]	; (8007c38 <_printf_float+0x2e0>)
 80079ea:	4894      	ldr	r0, [pc, #592]	; (8007c3c <_printf_float+0x2e4>)
 80079ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80079f0:	bf94      	ite	ls
 80079f2:	4698      	movls	r8, r3
 80079f4:	4680      	movhi	r8, r0
 80079f6:	2303      	movs	r3, #3
 80079f8:	6123      	str	r3, [r4, #16]
 80079fa:	9b05      	ldr	r3, [sp, #20]
 80079fc:	f023 0204 	bic.w	r2, r3, #4
 8007a00:	6022      	str	r2, [r4, #0]
 8007a02:	f04f 0900 	mov.w	r9, #0
 8007a06:	9700      	str	r7, [sp, #0]
 8007a08:	4633      	mov	r3, r6
 8007a0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007a0c:	4621      	mov	r1, r4
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f000 f9d8 	bl	8007dc4 <_printf_common>
 8007a14:	3001      	adds	r0, #1
 8007a16:	f040 8090 	bne.w	8007b3a <_printf_float+0x1e2>
 8007a1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a1e:	b00d      	add	sp, #52	; 0x34
 8007a20:	ecbd 8b02 	vpop	{d8}
 8007a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a28:	4642      	mov	r2, r8
 8007a2a:	464b      	mov	r3, r9
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	4649      	mov	r1, r9
 8007a30:	f7f9 f87c 	bl	8000b2c <__aeabi_dcmpun>
 8007a34:	b140      	cbz	r0, 8007a48 <_printf_float+0xf0>
 8007a36:	464b      	mov	r3, r9
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	bfbc      	itt	lt
 8007a3c:	232d      	movlt	r3, #45	; 0x2d
 8007a3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007a42:	487f      	ldr	r0, [pc, #508]	; (8007c40 <_printf_float+0x2e8>)
 8007a44:	4b7f      	ldr	r3, [pc, #508]	; (8007c44 <_printf_float+0x2ec>)
 8007a46:	e7d1      	b.n	80079ec <_printf_float+0x94>
 8007a48:	6863      	ldr	r3, [r4, #4]
 8007a4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007a4e:	9206      	str	r2, [sp, #24]
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	d13f      	bne.n	8007ad4 <_printf_float+0x17c>
 8007a54:	2306      	movs	r3, #6
 8007a56:	6063      	str	r3, [r4, #4]
 8007a58:	9b05      	ldr	r3, [sp, #20]
 8007a5a:	6861      	ldr	r1, [r4, #4]
 8007a5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007a60:	2300      	movs	r3, #0
 8007a62:	9303      	str	r3, [sp, #12]
 8007a64:	ab0a      	add	r3, sp, #40	; 0x28
 8007a66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007a6a:	ab09      	add	r3, sp, #36	; 0x24
 8007a6c:	ec49 8b10 	vmov	d0, r8, r9
 8007a70:	9300      	str	r3, [sp, #0]
 8007a72:	6022      	str	r2, [r4, #0]
 8007a74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007a78:	4628      	mov	r0, r5
 8007a7a:	f7ff fecd 	bl	8007818 <__cvt>
 8007a7e:	9b06      	ldr	r3, [sp, #24]
 8007a80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a82:	2b47      	cmp	r3, #71	; 0x47
 8007a84:	4680      	mov	r8, r0
 8007a86:	d108      	bne.n	8007a9a <_printf_float+0x142>
 8007a88:	1cc8      	adds	r0, r1, #3
 8007a8a:	db02      	blt.n	8007a92 <_printf_float+0x13a>
 8007a8c:	6863      	ldr	r3, [r4, #4]
 8007a8e:	4299      	cmp	r1, r3
 8007a90:	dd41      	ble.n	8007b16 <_printf_float+0x1be>
 8007a92:	f1ab 0b02 	sub.w	fp, fp, #2
 8007a96:	fa5f fb8b 	uxtb.w	fp, fp
 8007a9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a9e:	d820      	bhi.n	8007ae2 <_printf_float+0x18a>
 8007aa0:	3901      	subs	r1, #1
 8007aa2:	465a      	mov	r2, fp
 8007aa4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007aa8:	9109      	str	r1, [sp, #36]	; 0x24
 8007aaa:	f7ff ff17 	bl	80078dc <__exponent>
 8007aae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ab0:	1813      	adds	r3, r2, r0
 8007ab2:	2a01      	cmp	r2, #1
 8007ab4:	4681      	mov	r9, r0
 8007ab6:	6123      	str	r3, [r4, #16]
 8007ab8:	dc02      	bgt.n	8007ac0 <_printf_float+0x168>
 8007aba:	6822      	ldr	r2, [r4, #0]
 8007abc:	07d2      	lsls	r2, r2, #31
 8007abe:	d501      	bpl.n	8007ac4 <_printf_float+0x16c>
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	6123      	str	r3, [r4, #16]
 8007ac4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d09c      	beq.n	8007a06 <_printf_float+0xae>
 8007acc:	232d      	movs	r3, #45	; 0x2d
 8007ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ad2:	e798      	b.n	8007a06 <_printf_float+0xae>
 8007ad4:	9a06      	ldr	r2, [sp, #24]
 8007ad6:	2a47      	cmp	r2, #71	; 0x47
 8007ad8:	d1be      	bne.n	8007a58 <_printf_float+0x100>
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1bc      	bne.n	8007a58 <_printf_float+0x100>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e7b9      	b.n	8007a56 <_printf_float+0xfe>
 8007ae2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007ae6:	d118      	bne.n	8007b1a <_printf_float+0x1c2>
 8007ae8:	2900      	cmp	r1, #0
 8007aea:	6863      	ldr	r3, [r4, #4]
 8007aec:	dd0b      	ble.n	8007b06 <_printf_float+0x1ae>
 8007aee:	6121      	str	r1, [r4, #16]
 8007af0:	b913      	cbnz	r3, 8007af8 <_printf_float+0x1a0>
 8007af2:	6822      	ldr	r2, [r4, #0]
 8007af4:	07d0      	lsls	r0, r2, #31
 8007af6:	d502      	bpl.n	8007afe <_printf_float+0x1a6>
 8007af8:	3301      	adds	r3, #1
 8007afa:	440b      	add	r3, r1
 8007afc:	6123      	str	r3, [r4, #16]
 8007afe:	65a1      	str	r1, [r4, #88]	; 0x58
 8007b00:	f04f 0900 	mov.w	r9, #0
 8007b04:	e7de      	b.n	8007ac4 <_printf_float+0x16c>
 8007b06:	b913      	cbnz	r3, 8007b0e <_printf_float+0x1b6>
 8007b08:	6822      	ldr	r2, [r4, #0]
 8007b0a:	07d2      	lsls	r2, r2, #31
 8007b0c:	d501      	bpl.n	8007b12 <_printf_float+0x1ba>
 8007b0e:	3302      	adds	r3, #2
 8007b10:	e7f4      	b.n	8007afc <_printf_float+0x1a4>
 8007b12:	2301      	movs	r3, #1
 8007b14:	e7f2      	b.n	8007afc <_printf_float+0x1a4>
 8007b16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b1c:	4299      	cmp	r1, r3
 8007b1e:	db05      	blt.n	8007b2c <_printf_float+0x1d4>
 8007b20:	6823      	ldr	r3, [r4, #0]
 8007b22:	6121      	str	r1, [r4, #16]
 8007b24:	07d8      	lsls	r0, r3, #31
 8007b26:	d5ea      	bpl.n	8007afe <_printf_float+0x1a6>
 8007b28:	1c4b      	adds	r3, r1, #1
 8007b2a:	e7e7      	b.n	8007afc <_printf_float+0x1a4>
 8007b2c:	2900      	cmp	r1, #0
 8007b2e:	bfd4      	ite	le
 8007b30:	f1c1 0202 	rsble	r2, r1, #2
 8007b34:	2201      	movgt	r2, #1
 8007b36:	4413      	add	r3, r2
 8007b38:	e7e0      	b.n	8007afc <_printf_float+0x1a4>
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	055a      	lsls	r2, r3, #21
 8007b3e:	d407      	bmi.n	8007b50 <_printf_float+0x1f8>
 8007b40:	6923      	ldr	r3, [r4, #16]
 8007b42:	4642      	mov	r2, r8
 8007b44:	4631      	mov	r1, r6
 8007b46:	4628      	mov	r0, r5
 8007b48:	47b8      	blx	r7
 8007b4a:	3001      	adds	r0, #1
 8007b4c:	d12c      	bne.n	8007ba8 <_printf_float+0x250>
 8007b4e:	e764      	b.n	8007a1a <_printf_float+0xc2>
 8007b50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007b54:	f240 80e0 	bls.w	8007d18 <_printf_float+0x3c0>
 8007b58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f7f8 ffb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d034      	beq.n	8007bd2 <_printf_float+0x27a>
 8007b68:	4a37      	ldr	r2, [pc, #220]	; (8007c48 <_printf_float+0x2f0>)
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	4631      	mov	r1, r6
 8007b6e:	4628      	mov	r0, r5
 8007b70:	47b8      	blx	r7
 8007b72:	3001      	adds	r0, #1
 8007b74:	f43f af51 	beq.w	8007a1a <_printf_float+0xc2>
 8007b78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	db02      	blt.n	8007b86 <_printf_float+0x22e>
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	07d8      	lsls	r0, r3, #31
 8007b84:	d510      	bpl.n	8007ba8 <_printf_float+0x250>
 8007b86:	ee18 3a10 	vmov	r3, s16
 8007b8a:	4652      	mov	r2, sl
 8007b8c:	4631      	mov	r1, r6
 8007b8e:	4628      	mov	r0, r5
 8007b90:	47b8      	blx	r7
 8007b92:	3001      	adds	r0, #1
 8007b94:	f43f af41 	beq.w	8007a1a <_printf_float+0xc2>
 8007b98:	f04f 0800 	mov.w	r8, #0
 8007b9c:	f104 091a 	add.w	r9, r4, #26
 8007ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	4543      	cmp	r3, r8
 8007ba6:	dc09      	bgt.n	8007bbc <_printf_float+0x264>
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	079b      	lsls	r3, r3, #30
 8007bac:	f100 8105 	bmi.w	8007dba <_printf_float+0x462>
 8007bb0:	68e0      	ldr	r0, [r4, #12]
 8007bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bb4:	4298      	cmp	r0, r3
 8007bb6:	bfb8      	it	lt
 8007bb8:	4618      	movlt	r0, r3
 8007bba:	e730      	b.n	8007a1e <_printf_float+0xc6>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	464a      	mov	r2, r9
 8007bc0:	4631      	mov	r1, r6
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	47b8      	blx	r7
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	f43f af27 	beq.w	8007a1a <_printf_float+0xc2>
 8007bcc:	f108 0801 	add.w	r8, r8, #1
 8007bd0:	e7e6      	b.n	8007ba0 <_printf_float+0x248>
 8007bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	dc39      	bgt.n	8007c4c <_printf_float+0x2f4>
 8007bd8:	4a1b      	ldr	r2, [pc, #108]	; (8007c48 <_printf_float+0x2f0>)
 8007bda:	2301      	movs	r3, #1
 8007bdc:	4631      	mov	r1, r6
 8007bde:	4628      	mov	r0, r5
 8007be0:	47b8      	blx	r7
 8007be2:	3001      	adds	r0, #1
 8007be4:	f43f af19 	beq.w	8007a1a <_printf_float+0xc2>
 8007be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bec:	4313      	orrs	r3, r2
 8007bee:	d102      	bne.n	8007bf6 <_printf_float+0x29e>
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	07d9      	lsls	r1, r3, #31
 8007bf4:	d5d8      	bpl.n	8007ba8 <_printf_float+0x250>
 8007bf6:	ee18 3a10 	vmov	r3, s16
 8007bfa:	4652      	mov	r2, sl
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4628      	mov	r0, r5
 8007c00:	47b8      	blx	r7
 8007c02:	3001      	adds	r0, #1
 8007c04:	f43f af09 	beq.w	8007a1a <_printf_float+0xc2>
 8007c08:	f04f 0900 	mov.w	r9, #0
 8007c0c:	f104 0a1a 	add.w	sl, r4, #26
 8007c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c12:	425b      	negs	r3, r3
 8007c14:	454b      	cmp	r3, r9
 8007c16:	dc01      	bgt.n	8007c1c <_printf_float+0x2c4>
 8007c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c1a:	e792      	b.n	8007b42 <_printf_float+0x1ea>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	4652      	mov	r2, sl
 8007c20:	4631      	mov	r1, r6
 8007c22:	4628      	mov	r0, r5
 8007c24:	47b8      	blx	r7
 8007c26:	3001      	adds	r0, #1
 8007c28:	f43f aef7 	beq.w	8007a1a <_printf_float+0xc2>
 8007c2c:	f109 0901 	add.w	r9, r9, #1
 8007c30:	e7ee      	b.n	8007c10 <_printf_float+0x2b8>
 8007c32:	bf00      	nop
 8007c34:	7fefffff 	.word	0x7fefffff
 8007c38:	0800b400 	.word	0x0800b400
 8007c3c:	0800b404 	.word	0x0800b404
 8007c40:	0800b40c 	.word	0x0800b40c
 8007c44:	0800b408 	.word	0x0800b408
 8007c48:	0800b410 	.word	0x0800b410
 8007c4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c50:	429a      	cmp	r2, r3
 8007c52:	bfa8      	it	ge
 8007c54:	461a      	movge	r2, r3
 8007c56:	2a00      	cmp	r2, #0
 8007c58:	4691      	mov	r9, r2
 8007c5a:	dc37      	bgt.n	8007ccc <_printf_float+0x374>
 8007c5c:	f04f 0b00 	mov.w	fp, #0
 8007c60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c64:	f104 021a 	add.w	r2, r4, #26
 8007c68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c6a:	9305      	str	r3, [sp, #20]
 8007c6c:	eba3 0309 	sub.w	r3, r3, r9
 8007c70:	455b      	cmp	r3, fp
 8007c72:	dc33      	bgt.n	8007cdc <_printf_float+0x384>
 8007c74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	db3b      	blt.n	8007cf4 <_printf_float+0x39c>
 8007c7c:	6823      	ldr	r3, [r4, #0]
 8007c7e:	07da      	lsls	r2, r3, #31
 8007c80:	d438      	bmi.n	8007cf4 <_printf_float+0x39c>
 8007c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c84:	9a05      	ldr	r2, [sp, #20]
 8007c86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c88:	1a9a      	subs	r2, r3, r2
 8007c8a:	eba3 0901 	sub.w	r9, r3, r1
 8007c8e:	4591      	cmp	r9, r2
 8007c90:	bfa8      	it	ge
 8007c92:	4691      	movge	r9, r2
 8007c94:	f1b9 0f00 	cmp.w	r9, #0
 8007c98:	dc35      	bgt.n	8007d06 <_printf_float+0x3ae>
 8007c9a:	f04f 0800 	mov.w	r8, #0
 8007c9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ca2:	f104 0a1a 	add.w	sl, r4, #26
 8007ca6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007caa:	1a9b      	subs	r3, r3, r2
 8007cac:	eba3 0309 	sub.w	r3, r3, r9
 8007cb0:	4543      	cmp	r3, r8
 8007cb2:	f77f af79 	ble.w	8007ba8 <_printf_float+0x250>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	4652      	mov	r2, sl
 8007cba:	4631      	mov	r1, r6
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	47b8      	blx	r7
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	f43f aeaa 	beq.w	8007a1a <_printf_float+0xc2>
 8007cc6:	f108 0801 	add.w	r8, r8, #1
 8007cca:	e7ec      	b.n	8007ca6 <_printf_float+0x34e>
 8007ccc:	4613      	mov	r3, r2
 8007cce:	4631      	mov	r1, r6
 8007cd0:	4642      	mov	r2, r8
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	47b8      	blx	r7
 8007cd6:	3001      	adds	r0, #1
 8007cd8:	d1c0      	bne.n	8007c5c <_printf_float+0x304>
 8007cda:	e69e      	b.n	8007a1a <_printf_float+0xc2>
 8007cdc:	2301      	movs	r3, #1
 8007cde:	4631      	mov	r1, r6
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	9205      	str	r2, [sp, #20]
 8007ce4:	47b8      	blx	r7
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	f43f ae97 	beq.w	8007a1a <_printf_float+0xc2>
 8007cec:	9a05      	ldr	r2, [sp, #20]
 8007cee:	f10b 0b01 	add.w	fp, fp, #1
 8007cf2:	e7b9      	b.n	8007c68 <_printf_float+0x310>
 8007cf4:	ee18 3a10 	vmov	r3, s16
 8007cf8:	4652      	mov	r2, sl
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	47b8      	blx	r7
 8007d00:	3001      	adds	r0, #1
 8007d02:	d1be      	bne.n	8007c82 <_printf_float+0x32a>
 8007d04:	e689      	b.n	8007a1a <_printf_float+0xc2>
 8007d06:	9a05      	ldr	r2, [sp, #20]
 8007d08:	464b      	mov	r3, r9
 8007d0a:	4442      	add	r2, r8
 8007d0c:	4631      	mov	r1, r6
 8007d0e:	4628      	mov	r0, r5
 8007d10:	47b8      	blx	r7
 8007d12:	3001      	adds	r0, #1
 8007d14:	d1c1      	bne.n	8007c9a <_printf_float+0x342>
 8007d16:	e680      	b.n	8007a1a <_printf_float+0xc2>
 8007d18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d1a:	2a01      	cmp	r2, #1
 8007d1c:	dc01      	bgt.n	8007d22 <_printf_float+0x3ca>
 8007d1e:	07db      	lsls	r3, r3, #31
 8007d20:	d538      	bpl.n	8007d94 <_printf_float+0x43c>
 8007d22:	2301      	movs	r3, #1
 8007d24:	4642      	mov	r2, r8
 8007d26:	4631      	mov	r1, r6
 8007d28:	4628      	mov	r0, r5
 8007d2a:	47b8      	blx	r7
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	f43f ae74 	beq.w	8007a1a <_printf_float+0xc2>
 8007d32:	ee18 3a10 	vmov	r3, s16
 8007d36:	4652      	mov	r2, sl
 8007d38:	4631      	mov	r1, r6
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	47b8      	blx	r7
 8007d3e:	3001      	adds	r0, #1
 8007d40:	f43f ae6b 	beq.w	8007a1a <_printf_float+0xc2>
 8007d44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	f7f8 febc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d50:	b9d8      	cbnz	r0, 8007d8a <_printf_float+0x432>
 8007d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d54:	f108 0201 	add.w	r2, r8, #1
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	4631      	mov	r1, r6
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	47b8      	blx	r7
 8007d60:	3001      	adds	r0, #1
 8007d62:	d10e      	bne.n	8007d82 <_printf_float+0x42a>
 8007d64:	e659      	b.n	8007a1a <_printf_float+0xc2>
 8007d66:	2301      	movs	r3, #1
 8007d68:	4652      	mov	r2, sl
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	47b8      	blx	r7
 8007d70:	3001      	adds	r0, #1
 8007d72:	f43f ae52 	beq.w	8007a1a <_printf_float+0xc2>
 8007d76:	f108 0801 	add.w	r8, r8, #1
 8007d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	4543      	cmp	r3, r8
 8007d80:	dcf1      	bgt.n	8007d66 <_printf_float+0x40e>
 8007d82:	464b      	mov	r3, r9
 8007d84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007d88:	e6dc      	b.n	8007b44 <_printf_float+0x1ec>
 8007d8a:	f04f 0800 	mov.w	r8, #0
 8007d8e:	f104 0a1a 	add.w	sl, r4, #26
 8007d92:	e7f2      	b.n	8007d7a <_printf_float+0x422>
 8007d94:	2301      	movs	r3, #1
 8007d96:	4642      	mov	r2, r8
 8007d98:	e7df      	b.n	8007d5a <_printf_float+0x402>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	464a      	mov	r2, r9
 8007d9e:	4631      	mov	r1, r6
 8007da0:	4628      	mov	r0, r5
 8007da2:	47b8      	blx	r7
 8007da4:	3001      	adds	r0, #1
 8007da6:	f43f ae38 	beq.w	8007a1a <_printf_float+0xc2>
 8007daa:	f108 0801 	add.w	r8, r8, #1
 8007dae:	68e3      	ldr	r3, [r4, #12]
 8007db0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007db2:	1a5b      	subs	r3, r3, r1
 8007db4:	4543      	cmp	r3, r8
 8007db6:	dcf0      	bgt.n	8007d9a <_printf_float+0x442>
 8007db8:	e6fa      	b.n	8007bb0 <_printf_float+0x258>
 8007dba:	f04f 0800 	mov.w	r8, #0
 8007dbe:	f104 0919 	add.w	r9, r4, #25
 8007dc2:	e7f4      	b.n	8007dae <_printf_float+0x456>

08007dc4 <_printf_common>:
 8007dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc8:	4616      	mov	r6, r2
 8007dca:	4699      	mov	r9, r3
 8007dcc:	688a      	ldr	r2, [r1, #8]
 8007dce:	690b      	ldr	r3, [r1, #16]
 8007dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	bfb8      	it	lt
 8007dd8:	4613      	movlt	r3, r2
 8007dda:	6033      	str	r3, [r6, #0]
 8007ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007de0:	4607      	mov	r7, r0
 8007de2:	460c      	mov	r4, r1
 8007de4:	b10a      	cbz	r2, 8007dea <_printf_common+0x26>
 8007de6:	3301      	adds	r3, #1
 8007de8:	6033      	str	r3, [r6, #0]
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	0699      	lsls	r1, r3, #26
 8007dee:	bf42      	ittt	mi
 8007df0:	6833      	ldrmi	r3, [r6, #0]
 8007df2:	3302      	addmi	r3, #2
 8007df4:	6033      	strmi	r3, [r6, #0]
 8007df6:	6825      	ldr	r5, [r4, #0]
 8007df8:	f015 0506 	ands.w	r5, r5, #6
 8007dfc:	d106      	bne.n	8007e0c <_printf_common+0x48>
 8007dfe:	f104 0a19 	add.w	sl, r4, #25
 8007e02:	68e3      	ldr	r3, [r4, #12]
 8007e04:	6832      	ldr	r2, [r6, #0]
 8007e06:	1a9b      	subs	r3, r3, r2
 8007e08:	42ab      	cmp	r3, r5
 8007e0a:	dc26      	bgt.n	8007e5a <_printf_common+0x96>
 8007e0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e10:	1e13      	subs	r3, r2, #0
 8007e12:	6822      	ldr	r2, [r4, #0]
 8007e14:	bf18      	it	ne
 8007e16:	2301      	movne	r3, #1
 8007e18:	0692      	lsls	r2, r2, #26
 8007e1a:	d42b      	bmi.n	8007e74 <_printf_common+0xb0>
 8007e1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e20:	4649      	mov	r1, r9
 8007e22:	4638      	mov	r0, r7
 8007e24:	47c0      	blx	r8
 8007e26:	3001      	adds	r0, #1
 8007e28:	d01e      	beq.n	8007e68 <_printf_common+0xa4>
 8007e2a:	6823      	ldr	r3, [r4, #0]
 8007e2c:	68e5      	ldr	r5, [r4, #12]
 8007e2e:	6832      	ldr	r2, [r6, #0]
 8007e30:	f003 0306 	and.w	r3, r3, #6
 8007e34:	2b04      	cmp	r3, #4
 8007e36:	bf08      	it	eq
 8007e38:	1aad      	subeq	r5, r5, r2
 8007e3a:	68a3      	ldr	r3, [r4, #8]
 8007e3c:	6922      	ldr	r2, [r4, #16]
 8007e3e:	bf0c      	ite	eq
 8007e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e44:	2500      	movne	r5, #0
 8007e46:	4293      	cmp	r3, r2
 8007e48:	bfc4      	itt	gt
 8007e4a:	1a9b      	subgt	r3, r3, r2
 8007e4c:	18ed      	addgt	r5, r5, r3
 8007e4e:	2600      	movs	r6, #0
 8007e50:	341a      	adds	r4, #26
 8007e52:	42b5      	cmp	r5, r6
 8007e54:	d11a      	bne.n	8007e8c <_printf_common+0xc8>
 8007e56:	2000      	movs	r0, #0
 8007e58:	e008      	b.n	8007e6c <_printf_common+0xa8>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	4652      	mov	r2, sl
 8007e5e:	4649      	mov	r1, r9
 8007e60:	4638      	mov	r0, r7
 8007e62:	47c0      	blx	r8
 8007e64:	3001      	adds	r0, #1
 8007e66:	d103      	bne.n	8007e70 <_printf_common+0xac>
 8007e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e70:	3501      	adds	r5, #1
 8007e72:	e7c6      	b.n	8007e02 <_printf_common+0x3e>
 8007e74:	18e1      	adds	r1, r4, r3
 8007e76:	1c5a      	adds	r2, r3, #1
 8007e78:	2030      	movs	r0, #48	; 0x30
 8007e7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e7e:	4422      	add	r2, r4
 8007e80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e88:	3302      	adds	r3, #2
 8007e8a:	e7c7      	b.n	8007e1c <_printf_common+0x58>
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	4622      	mov	r2, r4
 8007e90:	4649      	mov	r1, r9
 8007e92:	4638      	mov	r0, r7
 8007e94:	47c0      	blx	r8
 8007e96:	3001      	adds	r0, #1
 8007e98:	d0e6      	beq.n	8007e68 <_printf_common+0xa4>
 8007e9a:	3601      	adds	r6, #1
 8007e9c:	e7d9      	b.n	8007e52 <_printf_common+0x8e>
	...

08007ea0 <_printf_i>:
 8007ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea4:	7e0f      	ldrb	r7, [r1, #24]
 8007ea6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ea8:	2f78      	cmp	r7, #120	; 0x78
 8007eaa:	4691      	mov	r9, r2
 8007eac:	4680      	mov	r8, r0
 8007eae:	460c      	mov	r4, r1
 8007eb0:	469a      	mov	sl, r3
 8007eb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007eb6:	d807      	bhi.n	8007ec8 <_printf_i+0x28>
 8007eb8:	2f62      	cmp	r7, #98	; 0x62
 8007eba:	d80a      	bhi.n	8007ed2 <_printf_i+0x32>
 8007ebc:	2f00      	cmp	r7, #0
 8007ebe:	f000 80d8 	beq.w	8008072 <_printf_i+0x1d2>
 8007ec2:	2f58      	cmp	r7, #88	; 0x58
 8007ec4:	f000 80a3 	beq.w	800800e <_printf_i+0x16e>
 8007ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ecc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ed0:	e03a      	b.n	8007f48 <_printf_i+0xa8>
 8007ed2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ed6:	2b15      	cmp	r3, #21
 8007ed8:	d8f6      	bhi.n	8007ec8 <_printf_i+0x28>
 8007eda:	a101      	add	r1, pc, #4	; (adr r1, 8007ee0 <_printf_i+0x40>)
 8007edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ee0:	08007f39 	.word	0x08007f39
 8007ee4:	08007f4d 	.word	0x08007f4d
 8007ee8:	08007ec9 	.word	0x08007ec9
 8007eec:	08007ec9 	.word	0x08007ec9
 8007ef0:	08007ec9 	.word	0x08007ec9
 8007ef4:	08007ec9 	.word	0x08007ec9
 8007ef8:	08007f4d 	.word	0x08007f4d
 8007efc:	08007ec9 	.word	0x08007ec9
 8007f00:	08007ec9 	.word	0x08007ec9
 8007f04:	08007ec9 	.word	0x08007ec9
 8007f08:	08007ec9 	.word	0x08007ec9
 8007f0c:	08008059 	.word	0x08008059
 8007f10:	08007f7d 	.word	0x08007f7d
 8007f14:	0800803b 	.word	0x0800803b
 8007f18:	08007ec9 	.word	0x08007ec9
 8007f1c:	08007ec9 	.word	0x08007ec9
 8007f20:	0800807b 	.word	0x0800807b
 8007f24:	08007ec9 	.word	0x08007ec9
 8007f28:	08007f7d 	.word	0x08007f7d
 8007f2c:	08007ec9 	.word	0x08007ec9
 8007f30:	08007ec9 	.word	0x08007ec9
 8007f34:	08008043 	.word	0x08008043
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	1d1a      	adds	r2, r3, #4
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	602a      	str	r2, [r5, #0]
 8007f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e0a3      	b.n	8008094 <_printf_i+0x1f4>
 8007f4c:	6820      	ldr	r0, [r4, #0]
 8007f4e:	6829      	ldr	r1, [r5, #0]
 8007f50:	0606      	lsls	r6, r0, #24
 8007f52:	f101 0304 	add.w	r3, r1, #4
 8007f56:	d50a      	bpl.n	8007f6e <_printf_i+0xce>
 8007f58:	680e      	ldr	r6, [r1, #0]
 8007f5a:	602b      	str	r3, [r5, #0]
 8007f5c:	2e00      	cmp	r6, #0
 8007f5e:	da03      	bge.n	8007f68 <_printf_i+0xc8>
 8007f60:	232d      	movs	r3, #45	; 0x2d
 8007f62:	4276      	negs	r6, r6
 8007f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f68:	485e      	ldr	r0, [pc, #376]	; (80080e4 <_printf_i+0x244>)
 8007f6a:	230a      	movs	r3, #10
 8007f6c:	e019      	b.n	8007fa2 <_printf_i+0x102>
 8007f6e:	680e      	ldr	r6, [r1, #0]
 8007f70:	602b      	str	r3, [r5, #0]
 8007f72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f76:	bf18      	it	ne
 8007f78:	b236      	sxthne	r6, r6
 8007f7a:	e7ef      	b.n	8007f5c <_printf_i+0xbc>
 8007f7c:	682b      	ldr	r3, [r5, #0]
 8007f7e:	6820      	ldr	r0, [r4, #0]
 8007f80:	1d19      	adds	r1, r3, #4
 8007f82:	6029      	str	r1, [r5, #0]
 8007f84:	0601      	lsls	r1, r0, #24
 8007f86:	d501      	bpl.n	8007f8c <_printf_i+0xec>
 8007f88:	681e      	ldr	r6, [r3, #0]
 8007f8a:	e002      	b.n	8007f92 <_printf_i+0xf2>
 8007f8c:	0646      	lsls	r6, r0, #25
 8007f8e:	d5fb      	bpl.n	8007f88 <_printf_i+0xe8>
 8007f90:	881e      	ldrh	r6, [r3, #0]
 8007f92:	4854      	ldr	r0, [pc, #336]	; (80080e4 <_printf_i+0x244>)
 8007f94:	2f6f      	cmp	r7, #111	; 0x6f
 8007f96:	bf0c      	ite	eq
 8007f98:	2308      	moveq	r3, #8
 8007f9a:	230a      	movne	r3, #10
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fa2:	6865      	ldr	r5, [r4, #4]
 8007fa4:	60a5      	str	r5, [r4, #8]
 8007fa6:	2d00      	cmp	r5, #0
 8007fa8:	bfa2      	ittt	ge
 8007faa:	6821      	ldrge	r1, [r4, #0]
 8007fac:	f021 0104 	bicge.w	r1, r1, #4
 8007fb0:	6021      	strge	r1, [r4, #0]
 8007fb2:	b90e      	cbnz	r6, 8007fb8 <_printf_i+0x118>
 8007fb4:	2d00      	cmp	r5, #0
 8007fb6:	d04d      	beq.n	8008054 <_printf_i+0x1b4>
 8007fb8:	4615      	mov	r5, r2
 8007fba:	fbb6 f1f3 	udiv	r1, r6, r3
 8007fbe:	fb03 6711 	mls	r7, r3, r1, r6
 8007fc2:	5dc7      	ldrb	r7, [r0, r7]
 8007fc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007fc8:	4637      	mov	r7, r6
 8007fca:	42bb      	cmp	r3, r7
 8007fcc:	460e      	mov	r6, r1
 8007fce:	d9f4      	bls.n	8007fba <_printf_i+0x11a>
 8007fd0:	2b08      	cmp	r3, #8
 8007fd2:	d10b      	bne.n	8007fec <_printf_i+0x14c>
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	07de      	lsls	r6, r3, #31
 8007fd8:	d508      	bpl.n	8007fec <_printf_i+0x14c>
 8007fda:	6923      	ldr	r3, [r4, #16]
 8007fdc:	6861      	ldr	r1, [r4, #4]
 8007fde:	4299      	cmp	r1, r3
 8007fe0:	bfde      	ittt	le
 8007fe2:	2330      	movle	r3, #48	; 0x30
 8007fe4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007fe8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007fec:	1b52      	subs	r2, r2, r5
 8007fee:	6122      	str	r2, [r4, #16]
 8007ff0:	f8cd a000 	str.w	sl, [sp]
 8007ff4:	464b      	mov	r3, r9
 8007ff6:	aa03      	add	r2, sp, #12
 8007ff8:	4621      	mov	r1, r4
 8007ffa:	4640      	mov	r0, r8
 8007ffc:	f7ff fee2 	bl	8007dc4 <_printf_common>
 8008000:	3001      	adds	r0, #1
 8008002:	d14c      	bne.n	800809e <_printf_i+0x1fe>
 8008004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008008:	b004      	add	sp, #16
 800800a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800800e:	4835      	ldr	r0, [pc, #212]	; (80080e4 <_printf_i+0x244>)
 8008010:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008014:	6829      	ldr	r1, [r5, #0]
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	f851 6b04 	ldr.w	r6, [r1], #4
 800801c:	6029      	str	r1, [r5, #0]
 800801e:	061d      	lsls	r5, r3, #24
 8008020:	d514      	bpl.n	800804c <_printf_i+0x1ac>
 8008022:	07df      	lsls	r7, r3, #31
 8008024:	bf44      	itt	mi
 8008026:	f043 0320 	orrmi.w	r3, r3, #32
 800802a:	6023      	strmi	r3, [r4, #0]
 800802c:	b91e      	cbnz	r6, 8008036 <_printf_i+0x196>
 800802e:	6823      	ldr	r3, [r4, #0]
 8008030:	f023 0320 	bic.w	r3, r3, #32
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	2310      	movs	r3, #16
 8008038:	e7b0      	b.n	8007f9c <_printf_i+0xfc>
 800803a:	6823      	ldr	r3, [r4, #0]
 800803c:	f043 0320 	orr.w	r3, r3, #32
 8008040:	6023      	str	r3, [r4, #0]
 8008042:	2378      	movs	r3, #120	; 0x78
 8008044:	4828      	ldr	r0, [pc, #160]	; (80080e8 <_printf_i+0x248>)
 8008046:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800804a:	e7e3      	b.n	8008014 <_printf_i+0x174>
 800804c:	0659      	lsls	r1, r3, #25
 800804e:	bf48      	it	mi
 8008050:	b2b6      	uxthmi	r6, r6
 8008052:	e7e6      	b.n	8008022 <_printf_i+0x182>
 8008054:	4615      	mov	r5, r2
 8008056:	e7bb      	b.n	8007fd0 <_printf_i+0x130>
 8008058:	682b      	ldr	r3, [r5, #0]
 800805a:	6826      	ldr	r6, [r4, #0]
 800805c:	6961      	ldr	r1, [r4, #20]
 800805e:	1d18      	adds	r0, r3, #4
 8008060:	6028      	str	r0, [r5, #0]
 8008062:	0635      	lsls	r5, r6, #24
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	d501      	bpl.n	800806c <_printf_i+0x1cc>
 8008068:	6019      	str	r1, [r3, #0]
 800806a:	e002      	b.n	8008072 <_printf_i+0x1d2>
 800806c:	0670      	lsls	r0, r6, #25
 800806e:	d5fb      	bpl.n	8008068 <_printf_i+0x1c8>
 8008070:	8019      	strh	r1, [r3, #0]
 8008072:	2300      	movs	r3, #0
 8008074:	6123      	str	r3, [r4, #16]
 8008076:	4615      	mov	r5, r2
 8008078:	e7ba      	b.n	8007ff0 <_printf_i+0x150>
 800807a:	682b      	ldr	r3, [r5, #0]
 800807c:	1d1a      	adds	r2, r3, #4
 800807e:	602a      	str	r2, [r5, #0]
 8008080:	681d      	ldr	r5, [r3, #0]
 8008082:	6862      	ldr	r2, [r4, #4]
 8008084:	2100      	movs	r1, #0
 8008086:	4628      	mov	r0, r5
 8008088:	f7f8 f8aa 	bl	80001e0 <memchr>
 800808c:	b108      	cbz	r0, 8008092 <_printf_i+0x1f2>
 800808e:	1b40      	subs	r0, r0, r5
 8008090:	6060      	str	r0, [r4, #4]
 8008092:	6863      	ldr	r3, [r4, #4]
 8008094:	6123      	str	r3, [r4, #16]
 8008096:	2300      	movs	r3, #0
 8008098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800809c:	e7a8      	b.n	8007ff0 <_printf_i+0x150>
 800809e:	6923      	ldr	r3, [r4, #16]
 80080a0:	462a      	mov	r2, r5
 80080a2:	4649      	mov	r1, r9
 80080a4:	4640      	mov	r0, r8
 80080a6:	47d0      	blx	sl
 80080a8:	3001      	adds	r0, #1
 80080aa:	d0ab      	beq.n	8008004 <_printf_i+0x164>
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	079b      	lsls	r3, r3, #30
 80080b0:	d413      	bmi.n	80080da <_printf_i+0x23a>
 80080b2:	68e0      	ldr	r0, [r4, #12]
 80080b4:	9b03      	ldr	r3, [sp, #12]
 80080b6:	4298      	cmp	r0, r3
 80080b8:	bfb8      	it	lt
 80080ba:	4618      	movlt	r0, r3
 80080bc:	e7a4      	b.n	8008008 <_printf_i+0x168>
 80080be:	2301      	movs	r3, #1
 80080c0:	4632      	mov	r2, r6
 80080c2:	4649      	mov	r1, r9
 80080c4:	4640      	mov	r0, r8
 80080c6:	47d0      	blx	sl
 80080c8:	3001      	adds	r0, #1
 80080ca:	d09b      	beq.n	8008004 <_printf_i+0x164>
 80080cc:	3501      	adds	r5, #1
 80080ce:	68e3      	ldr	r3, [r4, #12]
 80080d0:	9903      	ldr	r1, [sp, #12]
 80080d2:	1a5b      	subs	r3, r3, r1
 80080d4:	42ab      	cmp	r3, r5
 80080d6:	dcf2      	bgt.n	80080be <_printf_i+0x21e>
 80080d8:	e7eb      	b.n	80080b2 <_printf_i+0x212>
 80080da:	2500      	movs	r5, #0
 80080dc:	f104 0619 	add.w	r6, r4, #25
 80080e0:	e7f5      	b.n	80080ce <_printf_i+0x22e>
 80080e2:	bf00      	nop
 80080e4:	0800b412 	.word	0x0800b412
 80080e8:	0800b423 	.word	0x0800b423

080080ec <iprintf>:
 80080ec:	b40f      	push	{r0, r1, r2, r3}
 80080ee:	4b0a      	ldr	r3, [pc, #40]	; (8008118 <iprintf+0x2c>)
 80080f0:	b513      	push	{r0, r1, r4, lr}
 80080f2:	681c      	ldr	r4, [r3, #0]
 80080f4:	b124      	cbz	r4, 8008100 <iprintf+0x14>
 80080f6:	69a3      	ldr	r3, [r4, #24]
 80080f8:	b913      	cbnz	r3, 8008100 <iprintf+0x14>
 80080fa:	4620      	mov	r0, r4
 80080fc:	f001 f8d8 	bl	80092b0 <__sinit>
 8008100:	ab05      	add	r3, sp, #20
 8008102:	9a04      	ldr	r2, [sp, #16]
 8008104:	68a1      	ldr	r1, [r4, #8]
 8008106:	9301      	str	r3, [sp, #4]
 8008108:	4620      	mov	r0, r4
 800810a:	f001 fe87 	bl	8009e1c <_vfiprintf_r>
 800810e:	b002      	add	sp, #8
 8008110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008114:	b004      	add	sp, #16
 8008116:	4770      	bx	lr
 8008118:	20000020 	.word	0x20000020

0800811c <_puts_r>:
 800811c:	b570      	push	{r4, r5, r6, lr}
 800811e:	460e      	mov	r6, r1
 8008120:	4605      	mov	r5, r0
 8008122:	b118      	cbz	r0, 800812c <_puts_r+0x10>
 8008124:	6983      	ldr	r3, [r0, #24]
 8008126:	b90b      	cbnz	r3, 800812c <_puts_r+0x10>
 8008128:	f001 f8c2 	bl	80092b0 <__sinit>
 800812c:	69ab      	ldr	r3, [r5, #24]
 800812e:	68ac      	ldr	r4, [r5, #8]
 8008130:	b913      	cbnz	r3, 8008138 <_puts_r+0x1c>
 8008132:	4628      	mov	r0, r5
 8008134:	f001 f8bc 	bl	80092b0 <__sinit>
 8008138:	4b2c      	ldr	r3, [pc, #176]	; (80081ec <_puts_r+0xd0>)
 800813a:	429c      	cmp	r4, r3
 800813c:	d120      	bne.n	8008180 <_puts_r+0x64>
 800813e:	686c      	ldr	r4, [r5, #4]
 8008140:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008142:	07db      	lsls	r3, r3, #31
 8008144:	d405      	bmi.n	8008152 <_puts_r+0x36>
 8008146:	89a3      	ldrh	r3, [r4, #12]
 8008148:	0598      	lsls	r0, r3, #22
 800814a:	d402      	bmi.n	8008152 <_puts_r+0x36>
 800814c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800814e:	f001 f952 	bl	80093f6 <__retarget_lock_acquire_recursive>
 8008152:	89a3      	ldrh	r3, [r4, #12]
 8008154:	0719      	lsls	r1, r3, #28
 8008156:	d51d      	bpl.n	8008194 <_puts_r+0x78>
 8008158:	6923      	ldr	r3, [r4, #16]
 800815a:	b1db      	cbz	r3, 8008194 <_puts_r+0x78>
 800815c:	3e01      	subs	r6, #1
 800815e:	68a3      	ldr	r3, [r4, #8]
 8008160:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008164:	3b01      	subs	r3, #1
 8008166:	60a3      	str	r3, [r4, #8]
 8008168:	bb39      	cbnz	r1, 80081ba <_puts_r+0x9e>
 800816a:	2b00      	cmp	r3, #0
 800816c:	da38      	bge.n	80081e0 <_puts_r+0xc4>
 800816e:	4622      	mov	r2, r4
 8008170:	210a      	movs	r1, #10
 8008172:	4628      	mov	r0, r5
 8008174:	f000 f848 	bl	8008208 <__swbuf_r>
 8008178:	3001      	adds	r0, #1
 800817a:	d011      	beq.n	80081a0 <_puts_r+0x84>
 800817c:	250a      	movs	r5, #10
 800817e:	e011      	b.n	80081a4 <_puts_r+0x88>
 8008180:	4b1b      	ldr	r3, [pc, #108]	; (80081f0 <_puts_r+0xd4>)
 8008182:	429c      	cmp	r4, r3
 8008184:	d101      	bne.n	800818a <_puts_r+0x6e>
 8008186:	68ac      	ldr	r4, [r5, #8]
 8008188:	e7da      	b.n	8008140 <_puts_r+0x24>
 800818a:	4b1a      	ldr	r3, [pc, #104]	; (80081f4 <_puts_r+0xd8>)
 800818c:	429c      	cmp	r4, r3
 800818e:	bf08      	it	eq
 8008190:	68ec      	ldreq	r4, [r5, #12]
 8008192:	e7d5      	b.n	8008140 <_puts_r+0x24>
 8008194:	4621      	mov	r1, r4
 8008196:	4628      	mov	r0, r5
 8008198:	f000 f888 	bl	80082ac <__swsetup_r>
 800819c:	2800      	cmp	r0, #0
 800819e:	d0dd      	beq.n	800815c <_puts_r+0x40>
 80081a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80081a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081a6:	07da      	lsls	r2, r3, #31
 80081a8:	d405      	bmi.n	80081b6 <_puts_r+0x9a>
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	059b      	lsls	r3, r3, #22
 80081ae:	d402      	bmi.n	80081b6 <_puts_r+0x9a>
 80081b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081b2:	f001 f921 	bl	80093f8 <__retarget_lock_release_recursive>
 80081b6:	4628      	mov	r0, r5
 80081b8:	bd70      	pop	{r4, r5, r6, pc}
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	da04      	bge.n	80081c8 <_puts_r+0xac>
 80081be:	69a2      	ldr	r2, [r4, #24]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	dc06      	bgt.n	80081d2 <_puts_r+0xb6>
 80081c4:	290a      	cmp	r1, #10
 80081c6:	d004      	beq.n	80081d2 <_puts_r+0xb6>
 80081c8:	6823      	ldr	r3, [r4, #0]
 80081ca:	1c5a      	adds	r2, r3, #1
 80081cc:	6022      	str	r2, [r4, #0]
 80081ce:	7019      	strb	r1, [r3, #0]
 80081d0:	e7c5      	b.n	800815e <_puts_r+0x42>
 80081d2:	4622      	mov	r2, r4
 80081d4:	4628      	mov	r0, r5
 80081d6:	f000 f817 	bl	8008208 <__swbuf_r>
 80081da:	3001      	adds	r0, #1
 80081dc:	d1bf      	bne.n	800815e <_puts_r+0x42>
 80081de:	e7df      	b.n	80081a0 <_puts_r+0x84>
 80081e0:	6823      	ldr	r3, [r4, #0]
 80081e2:	250a      	movs	r5, #10
 80081e4:	1c5a      	adds	r2, r3, #1
 80081e6:	6022      	str	r2, [r4, #0]
 80081e8:	701d      	strb	r5, [r3, #0]
 80081ea:	e7db      	b.n	80081a4 <_puts_r+0x88>
 80081ec:	0800b4e4 	.word	0x0800b4e4
 80081f0:	0800b504 	.word	0x0800b504
 80081f4:	0800b4c4 	.word	0x0800b4c4

080081f8 <puts>:
 80081f8:	4b02      	ldr	r3, [pc, #8]	; (8008204 <puts+0xc>)
 80081fa:	4601      	mov	r1, r0
 80081fc:	6818      	ldr	r0, [r3, #0]
 80081fe:	f7ff bf8d 	b.w	800811c <_puts_r>
 8008202:	bf00      	nop
 8008204:	20000020 	.word	0x20000020

08008208 <__swbuf_r>:
 8008208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820a:	460e      	mov	r6, r1
 800820c:	4614      	mov	r4, r2
 800820e:	4605      	mov	r5, r0
 8008210:	b118      	cbz	r0, 800821a <__swbuf_r+0x12>
 8008212:	6983      	ldr	r3, [r0, #24]
 8008214:	b90b      	cbnz	r3, 800821a <__swbuf_r+0x12>
 8008216:	f001 f84b 	bl	80092b0 <__sinit>
 800821a:	4b21      	ldr	r3, [pc, #132]	; (80082a0 <__swbuf_r+0x98>)
 800821c:	429c      	cmp	r4, r3
 800821e:	d12b      	bne.n	8008278 <__swbuf_r+0x70>
 8008220:	686c      	ldr	r4, [r5, #4]
 8008222:	69a3      	ldr	r3, [r4, #24]
 8008224:	60a3      	str	r3, [r4, #8]
 8008226:	89a3      	ldrh	r3, [r4, #12]
 8008228:	071a      	lsls	r2, r3, #28
 800822a:	d52f      	bpl.n	800828c <__swbuf_r+0x84>
 800822c:	6923      	ldr	r3, [r4, #16]
 800822e:	b36b      	cbz	r3, 800828c <__swbuf_r+0x84>
 8008230:	6923      	ldr	r3, [r4, #16]
 8008232:	6820      	ldr	r0, [r4, #0]
 8008234:	1ac0      	subs	r0, r0, r3
 8008236:	6963      	ldr	r3, [r4, #20]
 8008238:	b2f6      	uxtb	r6, r6
 800823a:	4283      	cmp	r3, r0
 800823c:	4637      	mov	r7, r6
 800823e:	dc04      	bgt.n	800824a <__swbuf_r+0x42>
 8008240:	4621      	mov	r1, r4
 8008242:	4628      	mov	r0, r5
 8008244:	f000 ffa0 	bl	8009188 <_fflush_r>
 8008248:	bb30      	cbnz	r0, 8008298 <__swbuf_r+0x90>
 800824a:	68a3      	ldr	r3, [r4, #8]
 800824c:	3b01      	subs	r3, #1
 800824e:	60a3      	str	r3, [r4, #8]
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	1c5a      	adds	r2, r3, #1
 8008254:	6022      	str	r2, [r4, #0]
 8008256:	701e      	strb	r6, [r3, #0]
 8008258:	6963      	ldr	r3, [r4, #20]
 800825a:	3001      	adds	r0, #1
 800825c:	4283      	cmp	r3, r0
 800825e:	d004      	beq.n	800826a <__swbuf_r+0x62>
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	07db      	lsls	r3, r3, #31
 8008264:	d506      	bpl.n	8008274 <__swbuf_r+0x6c>
 8008266:	2e0a      	cmp	r6, #10
 8008268:	d104      	bne.n	8008274 <__swbuf_r+0x6c>
 800826a:	4621      	mov	r1, r4
 800826c:	4628      	mov	r0, r5
 800826e:	f000 ff8b 	bl	8009188 <_fflush_r>
 8008272:	b988      	cbnz	r0, 8008298 <__swbuf_r+0x90>
 8008274:	4638      	mov	r0, r7
 8008276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008278:	4b0a      	ldr	r3, [pc, #40]	; (80082a4 <__swbuf_r+0x9c>)
 800827a:	429c      	cmp	r4, r3
 800827c:	d101      	bne.n	8008282 <__swbuf_r+0x7a>
 800827e:	68ac      	ldr	r4, [r5, #8]
 8008280:	e7cf      	b.n	8008222 <__swbuf_r+0x1a>
 8008282:	4b09      	ldr	r3, [pc, #36]	; (80082a8 <__swbuf_r+0xa0>)
 8008284:	429c      	cmp	r4, r3
 8008286:	bf08      	it	eq
 8008288:	68ec      	ldreq	r4, [r5, #12]
 800828a:	e7ca      	b.n	8008222 <__swbuf_r+0x1a>
 800828c:	4621      	mov	r1, r4
 800828e:	4628      	mov	r0, r5
 8008290:	f000 f80c 	bl	80082ac <__swsetup_r>
 8008294:	2800      	cmp	r0, #0
 8008296:	d0cb      	beq.n	8008230 <__swbuf_r+0x28>
 8008298:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800829c:	e7ea      	b.n	8008274 <__swbuf_r+0x6c>
 800829e:	bf00      	nop
 80082a0:	0800b4e4 	.word	0x0800b4e4
 80082a4:	0800b504 	.word	0x0800b504
 80082a8:	0800b4c4 	.word	0x0800b4c4

080082ac <__swsetup_r>:
 80082ac:	4b32      	ldr	r3, [pc, #200]	; (8008378 <__swsetup_r+0xcc>)
 80082ae:	b570      	push	{r4, r5, r6, lr}
 80082b0:	681d      	ldr	r5, [r3, #0]
 80082b2:	4606      	mov	r6, r0
 80082b4:	460c      	mov	r4, r1
 80082b6:	b125      	cbz	r5, 80082c2 <__swsetup_r+0x16>
 80082b8:	69ab      	ldr	r3, [r5, #24]
 80082ba:	b913      	cbnz	r3, 80082c2 <__swsetup_r+0x16>
 80082bc:	4628      	mov	r0, r5
 80082be:	f000 fff7 	bl	80092b0 <__sinit>
 80082c2:	4b2e      	ldr	r3, [pc, #184]	; (800837c <__swsetup_r+0xd0>)
 80082c4:	429c      	cmp	r4, r3
 80082c6:	d10f      	bne.n	80082e8 <__swsetup_r+0x3c>
 80082c8:	686c      	ldr	r4, [r5, #4]
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082d0:	0719      	lsls	r1, r3, #28
 80082d2:	d42c      	bmi.n	800832e <__swsetup_r+0x82>
 80082d4:	06dd      	lsls	r5, r3, #27
 80082d6:	d411      	bmi.n	80082fc <__swsetup_r+0x50>
 80082d8:	2309      	movs	r3, #9
 80082da:	6033      	str	r3, [r6, #0]
 80082dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082e0:	81a3      	strh	r3, [r4, #12]
 80082e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082e6:	e03e      	b.n	8008366 <__swsetup_r+0xba>
 80082e8:	4b25      	ldr	r3, [pc, #148]	; (8008380 <__swsetup_r+0xd4>)
 80082ea:	429c      	cmp	r4, r3
 80082ec:	d101      	bne.n	80082f2 <__swsetup_r+0x46>
 80082ee:	68ac      	ldr	r4, [r5, #8]
 80082f0:	e7eb      	b.n	80082ca <__swsetup_r+0x1e>
 80082f2:	4b24      	ldr	r3, [pc, #144]	; (8008384 <__swsetup_r+0xd8>)
 80082f4:	429c      	cmp	r4, r3
 80082f6:	bf08      	it	eq
 80082f8:	68ec      	ldreq	r4, [r5, #12]
 80082fa:	e7e6      	b.n	80082ca <__swsetup_r+0x1e>
 80082fc:	0758      	lsls	r0, r3, #29
 80082fe:	d512      	bpl.n	8008326 <__swsetup_r+0x7a>
 8008300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008302:	b141      	cbz	r1, 8008316 <__swsetup_r+0x6a>
 8008304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008308:	4299      	cmp	r1, r3
 800830a:	d002      	beq.n	8008312 <__swsetup_r+0x66>
 800830c:	4630      	mov	r0, r6
 800830e:	f001 fc7b 	bl	8009c08 <_free_r>
 8008312:	2300      	movs	r3, #0
 8008314:	6363      	str	r3, [r4, #52]	; 0x34
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800831c:	81a3      	strh	r3, [r4, #12]
 800831e:	2300      	movs	r3, #0
 8008320:	6063      	str	r3, [r4, #4]
 8008322:	6923      	ldr	r3, [r4, #16]
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	89a3      	ldrh	r3, [r4, #12]
 8008328:	f043 0308 	orr.w	r3, r3, #8
 800832c:	81a3      	strh	r3, [r4, #12]
 800832e:	6923      	ldr	r3, [r4, #16]
 8008330:	b94b      	cbnz	r3, 8008346 <__swsetup_r+0x9a>
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008338:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800833c:	d003      	beq.n	8008346 <__swsetup_r+0x9a>
 800833e:	4621      	mov	r1, r4
 8008340:	4630      	mov	r0, r6
 8008342:	f001 f87f 	bl	8009444 <__smakebuf_r>
 8008346:	89a0      	ldrh	r0, [r4, #12]
 8008348:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800834c:	f010 0301 	ands.w	r3, r0, #1
 8008350:	d00a      	beq.n	8008368 <__swsetup_r+0xbc>
 8008352:	2300      	movs	r3, #0
 8008354:	60a3      	str	r3, [r4, #8]
 8008356:	6963      	ldr	r3, [r4, #20]
 8008358:	425b      	negs	r3, r3
 800835a:	61a3      	str	r3, [r4, #24]
 800835c:	6923      	ldr	r3, [r4, #16]
 800835e:	b943      	cbnz	r3, 8008372 <__swsetup_r+0xc6>
 8008360:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008364:	d1ba      	bne.n	80082dc <__swsetup_r+0x30>
 8008366:	bd70      	pop	{r4, r5, r6, pc}
 8008368:	0781      	lsls	r1, r0, #30
 800836a:	bf58      	it	pl
 800836c:	6963      	ldrpl	r3, [r4, #20]
 800836e:	60a3      	str	r3, [r4, #8]
 8008370:	e7f4      	b.n	800835c <__swsetup_r+0xb0>
 8008372:	2000      	movs	r0, #0
 8008374:	e7f7      	b.n	8008366 <__swsetup_r+0xba>
 8008376:	bf00      	nop
 8008378:	20000020 	.word	0x20000020
 800837c:	0800b4e4 	.word	0x0800b4e4
 8008380:	0800b504 	.word	0x0800b504
 8008384:	0800b4c4 	.word	0x0800b4c4

08008388 <quorem>:
 8008388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838c:	6903      	ldr	r3, [r0, #16]
 800838e:	690c      	ldr	r4, [r1, #16]
 8008390:	42a3      	cmp	r3, r4
 8008392:	4607      	mov	r7, r0
 8008394:	f2c0 8081 	blt.w	800849a <quorem+0x112>
 8008398:	3c01      	subs	r4, #1
 800839a:	f101 0814 	add.w	r8, r1, #20
 800839e:	f100 0514 	add.w	r5, r0, #20
 80083a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083a6:	9301      	str	r3, [sp, #4]
 80083a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80083ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083b0:	3301      	adds	r3, #1
 80083b2:	429a      	cmp	r2, r3
 80083b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80083b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80083bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80083c0:	d331      	bcc.n	8008426 <quorem+0x9e>
 80083c2:	f04f 0e00 	mov.w	lr, #0
 80083c6:	4640      	mov	r0, r8
 80083c8:	46ac      	mov	ip, r5
 80083ca:	46f2      	mov	sl, lr
 80083cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80083d0:	b293      	uxth	r3, r2
 80083d2:	fb06 e303 	mla	r3, r6, r3, lr
 80083d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80083da:	b29b      	uxth	r3, r3
 80083dc:	ebaa 0303 	sub.w	r3, sl, r3
 80083e0:	f8dc a000 	ldr.w	sl, [ip]
 80083e4:	0c12      	lsrs	r2, r2, #16
 80083e6:	fa13 f38a 	uxtah	r3, r3, sl
 80083ea:	fb06 e202 	mla	r2, r6, r2, lr
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	9b00      	ldr	r3, [sp, #0]
 80083f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80083f6:	b292      	uxth	r2, r2
 80083f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80083fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008400:	f8bd 3000 	ldrh.w	r3, [sp]
 8008404:	4581      	cmp	r9, r0
 8008406:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800840a:	f84c 3b04 	str.w	r3, [ip], #4
 800840e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008412:	d2db      	bcs.n	80083cc <quorem+0x44>
 8008414:	f855 300b 	ldr.w	r3, [r5, fp]
 8008418:	b92b      	cbnz	r3, 8008426 <quorem+0x9e>
 800841a:	9b01      	ldr	r3, [sp, #4]
 800841c:	3b04      	subs	r3, #4
 800841e:	429d      	cmp	r5, r3
 8008420:	461a      	mov	r2, r3
 8008422:	d32e      	bcc.n	8008482 <quorem+0xfa>
 8008424:	613c      	str	r4, [r7, #16]
 8008426:	4638      	mov	r0, r7
 8008428:	f001 fad6 	bl	80099d8 <__mcmp>
 800842c:	2800      	cmp	r0, #0
 800842e:	db24      	blt.n	800847a <quorem+0xf2>
 8008430:	3601      	adds	r6, #1
 8008432:	4628      	mov	r0, r5
 8008434:	f04f 0c00 	mov.w	ip, #0
 8008438:	f858 2b04 	ldr.w	r2, [r8], #4
 800843c:	f8d0 e000 	ldr.w	lr, [r0]
 8008440:	b293      	uxth	r3, r2
 8008442:	ebac 0303 	sub.w	r3, ip, r3
 8008446:	0c12      	lsrs	r2, r2, #16
 8008448:	fa13 f38e 	uxtah	r3, r3, lr
 800844c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008450:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008454:	b29b      	uxth	r3, r3
 8008456:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800845a:	45c1      	cmp	r9, r8
 800845c:	f840 3b04 	str.w	r3, [r0], #4
 8008460:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008464:	d2e8      	bcs.n	8008438 <quorem+0xb0>
 8008466:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800846a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800846e:	b922      	cbnz	r2, 800847a <quorem+0xf2>
 8008470:	3b04      	subs	r3, #4
 8008472:	429d      	cmp	r5, r3
 8008474:	461a      	mov	r2, r3
 8008476:	d30a      	bcc.n	800848e <quorem+0x106>
 8008478:	613c      	str	r4, [r7, #16]
 800847a:	4630      	mov	r0, r6
 800847c:	b003      	add	sp, #12
 800847e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008482:	6812      	ldr	r2, [r2, #0]
 8008484:	3b04      	subs	r3, #4
 8008486:	2a00      	cmp	r2, #0
 8008488:	d1cc      	bne.n	8008424 <quorem+0x9c>
 800848a:	3c01      	subs	r4, #1
 800848c:	e7c7      	b.n	800841e <quorem+0x96>
 800848e:	6812      	ldr	r2, [r2, #0]
 8008490:	3b04      	subs	r3, #4
 8008492:	2a00      	cmp	r2, #0
 8008494:	d1f0      	bne.n	8008478 <quorem+0xf0>
 8008496:	3c01      	subs	r4, #1
 8008498:	e7eb      	b.n	8008472 <quorem+0xea>
 800849a:	2000      	movs	r0, #0
 800849c:	e7ee      	b.n	800847c <quorem+0xf4>
	...

080084a0 <_dtoa_r>:
 80084a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a4:	ed2d 8b04 	vpush	{d8-d9}
 80084a8:	ec57 6b10 	vmov	r6, r7, d0
 80084ac:	b093      	sub	sp, #76	; 0x4c
 80084ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80084b4:	9106      	str	r1, [sp, #24]
 80084b6:	ee10 aa10 	vmov	sl, s0
 80084ba:	4604      	mov	r4, r0
 80084bc:	9209      	str	r2, [sp, #36]	; 0x24
 80084be:	930c      	str	r3, [sp, #48]	; 0x30
 80084c0:	46bb      	mov	fp, r7
 80084c2:	b975      	cbnz	r5, 80084e2 <_dtoa_r+0x42>
 80084c4:	2010      	movs	r0, #16
 80084c6:	f000 fffd 	bl	80094c4 <malloc>
 80084ca:	4602      	mov	r2, r0
 80084cc:	6260      	str	r0, [r4, #36]	; 0x24
 80084ce:	b920      	cbnz	r0, 80084da <_dtoa_r+0x3a>
 80084d0:	4ba7      	ldr	r3, [pc, #668]	; (8008770 <_dtoa_r+0x2d0>)
 80084d2:	21ea      	movs	r1, #234	; 0xea
 80084d4:	48a7      	ldr	r0, [pc, #668]	; (8008774 <_dtoa_r+0x2d4>)
 80084d6:	f001 fe37 	bl	800a148 <__assert_func>
 80084da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80084de:	6005      	str	r5, [r0, #0]
 80084e0:	60c5      	str	r5, [r0, #12]
 80084e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084e4:	6819      	ldr	r1, [r3, #0]
 80084e6:	b151      	cbz	r1, 80084fe <_dtoa_r+0x5e>
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	604a      	str	r2, [r1, #4]
 80084ec:	2301      	movs	r3, #1
 80084ee:	4093      	lsls	r3, r2
 80084f0:	608b      	str	r3, [r1, #8]
 80084f2:	4620      	mov	r0, r4
 80084f4:	f001 f82e 	bl	8009554 <_Bfree>
 80084f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084fa:	2200      	movs	r2, #0
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	1e3b      	subs	r3, r7, #0
 8008500:	bfaa      	itet	ge
 8008502:	2300      	movge	r3, #0
 8008504:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008508:	f8c8 3000 	strge.w	r3, [r8]
 800850c:	4b9a      	ldr	r3, [pc, #616]	; (8008778 <_dtoa_r+0x2d8>)
 800850e:	bfbc      	itt	lt
 8008510:	2201      	movlt	r2, #1
 8008512:	f8c8 2000 	strlt.w	r2, [r8]
 8008516:	ea33 030b 	bics.w	r3, r3, fp
 800851a:	d11b      	bne.n	8008554 <_dtoa_r+0xb4>
 800851c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800851e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008522:	6013      	str	r3, [r2, #0]
 8008524:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008528:	4333      	orrs	r3, r6
 800852a:	f000 8592 	beq.w	8009052 <_dtoa_r+0xbb2>
 800852e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008530:	b963      	cbnz	r3, 800854c <_dtoa_r+0xac>
 8008532:	4b92      	ldr	r3, [pc, #584]	; (800877c <_dtoa_r+0x2dc>)
 8008534:	e022      	b.n	800857c <_dtoa_r+0xdc>
 8008536:	4b92      	ldr	r3, [pc, #584]	; (8008780 <_dtoa_r+0x2e0>)
 8008538:	9301      	str	r3, [sp, #4]
 800853a:	3308      	adds	r3, #8
 800853c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	9801      	ldr	r0, [sp, #4]
 8008542:	b013      	add	sp, #76	; 0x4c
 8008544:	ecbd 8b04 	vpop	{d8-d9}
 8008548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854c:	4b8b      	ldr	r3, [pc, #556]	; (800877c <_dtoa_r+0x2dc>)
 800854e:	9301      	str	r3, [sp, #4]
 8008550:	3303      	adds	r3, #3
 8008552:	e7f3      	b.n	800853c <_dtoa_r+0x9c>
 8008554:	2200      	movs	r2, #0
 8008556:	2300      	movs	r3, #0
 8008558:	4650      	mov	r0, sl
 800855a:	4659      	mov	r1, fp
 800855c:	f7f8 fab4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008560:	ec4b ab19 	vmov	d9, sl, fp
 8008564:	4680      	mov	r8, r0
 8008566:	b158      	cbz	r0, 8008580 <_dtoa_r+0xe0>
 8008568:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800856a:	2301      	movs	r3, #1
 800856c:	6013      	str	r3, [r2, #0]
 800856e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 856b 	beq.w	800904c <_dtoa_r+0xbac>
 8008576:	4883      	ldr	r0, [pc, #524]	; (8008784 <_dtoa_r+0x2e4>)
 8008578:	6018      	str	r0, [r3, #0]
 800857a:	1e43      	subs	r3, r0, #1
 800857c:	9301      	str	r3, [sp, #4]
 800857e:	e7df      	b.n	8008540 <_dtoa_r+0xa0>
 8008580:	ec4b ab10 	vmov	d0, sl, fp
 8008584:	aa10      	add	r2, sp, #64	; 0x40
 8008586:	a911      	add	r1, sp, #68	; 0x44
 8008588:	4620      	mov	r0, r4
 800858a:	f001 facb 	bl	8009b24 <__d2b>
 800858e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008592:	ee08 0a10 	vmov	s16, r0
 8008596:	2d00      	cmp	r5, #0
 8008598:	f000 8084 	beq.w	80086a4 <_dtoa_r+0x204>
 800859c:	ee19 3a90 	vmov	r3, s19
 80085a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80085a8:	4656      	mov	r6, sl
 80085aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80085ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80085b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80085b6:	4b74      	ldr	r3, [pc, #464]	; (8008788 <_dtoa_r+0x2e8>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	4630      	mov	r0, r6
 80085bc:	4639      	mov	r1, r7
 80085be:	f7f7 fe63 	bl	8000288 <__aeabi_dsub>
 80085c2:	a365      	add	r3, pc, #404	; (adr r3, 8008758 <_dtoa_r+0x2b8>)
 80085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c8:	f7f8 f816 	bl	80005f8 <__aeabi_dmul>
 80085cc:	a364      	add	r3, pc, #400	; (adr r3, 8008760 <_dtoa_r+0x2c0>)
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	f7f7 fe5b 	bl	800028c <__adddf3>
 80085d6:	4606      	mov	r6, r0
 80085d8:	4628      	mov	r0, r5
 80085da:	460f      	mov	r7, r1
 80085dc:	f7f7 ffa2 	bl	8000524 <__aeabi_i2d>
 80085e0:	a361      	add	r3, pc, #388	; (adr r3, 8008768 <_dtoa_r+0x2c8>)
 80085e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e6:	f7f8 f807 	bl	80005f8 <__aeabi_dmul>
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	4630      	mov	r0, r6
 80085f0:	4639      	mov	r1, r7
 80085f2:	f7f7 fe4b 	bl	800028c <__adddf3>
 80085f6:	4606      	mov	r6, r0
 80085f8:	460f      	mov	r7, r1
 80085fa:	f7f8 faad 	bl	8000b58 <__aeabi_d2iz>
 80085fe:	2200      	movs	r2, #0
 8008600:	9000      	str	r0, [sp, #0]
 8008602:	2300      	movs	r3, #0
 8008604:	4630      	mov	r0, r6
 8008606:	4639      	mov	r1, r7
 8008608:	f7f8 fa68 	bl	8000adc <__aeabi_dcmplt>
 800860c:	b150      	cbz	r0, 8008624 <_dtoa_r+0x184>
 800860e:	9800      	ldr	r0, [sp, #0]
 8008610:	f7f7 ff88 	bl	8000524 <__aeabi_i2d>
 8008614:	4632      	mov	r2, r6
 8008616:	463b      	mov	r3, r7
 8008618:	f7f8 fa56 	bl	8000ac8 <__aeabi_dcmpeq>
 800861c:	b910      	cbnz	r0, 8008624 <_dtoa_r+0x184>
 800861e:	9b00      	ldr	r3, [sp, #0]
 8008620:	3b01      	subs	r3, #1
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	9b00      	ldr	r3, [sp, #0]
 8008626:	2b16      	cmp	r3, #22
 8008628:	d85a      	bhi.n	80086e0 <_dtoa_r+0x240>
 800862a:	9a00      	ldr	r2, [sp, #0]
 800862c:	4b57      	ldr	r3, [pc, #348]	; (800878c <_dtoa_r+0x2ec>)
 800862e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008636:	ec51 0b19 	vmov	r0, r1, d9
 800863a:	f7f8 fa4f 	bl	8000adc <__aeabi_dcmplt>
 800863e:	2800      	cmp	r0, #0
 8008640:	d050      	beq.n	80086e4 <_dtoa_r+0x244>
 8008642:	9b00      	ldr	r3, [sp, #0]
 8008644:	3b01      	subs	r3, #1
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	2300      	movs	r3, #0
 800864a:	930b      	str	r3, [sp, #44]	; 0x2c
 800864c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800864e:	1b5d      	subs	r5, r3, r5
 8008650:	1e6b      	subs	r3, r5, #1
 8008652:	9305      	str	r3, [sp, #20]
 8008654:	bf45      	ittet	mi
 8008656:	f1c5 0301 	rsbmi	r3, r5, #1
 800865a:	9304      	strmi	r3, [sp, #16]
 800865c:	2300      	movpl	r3, #0
 800865e:	2300      	movmi	r3, #0
 8008660:	bf4c      	ite	mi
 8008662:	9305      	strmi	r3, [sp, #20]
 8008664:	9304      	strpl	r3, [sp, #16]
 8008666:	9b00      	ldr	r3, [sp, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	db3d      	blt.n	80086e8 <_dtoa_r+0x248>
 800866c:	9b05      	ldr	r3, [sp, #20]
 800866e:	9a00      	ldr	r2, [sp, #0]
 8008670:	920a      	str	r2, [sp, #40]	; 0x28
 8008672:	4413      	add	r3, r2
 8008674:	9305      	str	r3, [sp, #20]
 8008676:	2300      	movs	r3, #0
 8008678:	9307      	str	r3, [sp, #28]
 800867a:	9b06      	ldr	r3, [sp, #24]
 800867c:	2b09      	cmp	r3, #9
 800867e:	f200 8089 	bhi.w	8008794 <_dtoa_r+0x2f4>
 8008682:	2b05      	cmp	r3, #5
 8008684:	bfc4      	itt	gt
 8008686:	3b04      	subgt	r3, #4
 8008688:	9306      	strgt	r3, [sp, #24]
 800868a:	9b06      	ldr	r3, [sp, #24]
 800868c:	f1a3 0302 	sub.w	r3, r3, #2
 8008690:	bfcc      	ite	gt
 8008692:	2500      	movgt	r5, #0
 8008694:	2501      	movle	r5, #1
 8008696:	2b03      	cmp	r3, #3
 8008698:	f200 8087 	bhi.w	80087aa <_dtoa_r+0x30a>
 800869c:	e8df f003 	tbb	[pc, r3]
 80086a0:	59383a2d 	.word	0x59383a2d
 80086a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80086a8:	441d      	add	r5, r3
 80086aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80086ae:	2b20      	cmp	r3, #32
 80086b0:	bfc1      	itttt	gt
 80086b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80086b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80086ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80086be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80086c2:	bfda      	itte	le
 80086c4:	f1c3 0320 	rsble	r3, r3, #32
 80086c8:	fa06 f003 	lslle.w	r0, r6, r3
 80086cc:	4318      	orrgt	r0, r3
 80086ce:	f7f7 ff19 	bl	8000504 <__aeabi_ui2d>
 80086d2:	2301      	movs	r3, #1
 80086d4:	4606      	mov	r6, r0
 80086d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80086da:	3d01      	subs	r5, #1
 80086dc:	930e      	str	r3, [sp, #56]	; 0x38
 80086de:	e76a      	b.n	80085b6 <_dtoa_r+0x116>
 80086e0:	2301      	movs	r3, #1
 80086e2:	e7b2      	b.n	800864a <_dtoa_r+0x1aa>
 80086e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80086e6:	e7b1      	b.n	800864c <_dtoa_r+0x1ac>
 80086e8:	9b04      	ldr	r3, [sp, #16]
 80086ea:	9a00      	ldr	r2, [sp, #0]
 80086ec:	1a9b      	subs	r3, r3, r2
 80086ee:	9304      	str	r3, [sp, #16]
 80086f0:	4253      	negs	r3, r2
 80086f2:	9307      	str	r3, [sp, #28]
 80086f4:	2300      	movs	r3, #0
 80086f6:	930a      	str	r3, [sp, #40]	; 0x28
 80086f8:	e7bf      	b.n	800867a <_dtoa_r+0x1da>
 80086fa:	2300      	movs	r3, #0
 80086fc:	9308      	str	r3, [sp, #32]
 80086fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008700:	2b00      	cmp	r3, #0
 8008702:	dc55      	bgt.n	80087b0 <_dtoa_r+0x310>
 8008704:	2301      	movs	r3, #1
 8008706:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800870a:	461a      	mov	r2, r3
 800870c:	9209      	str	r2, [sp, #36]	; 0x24
 800870e:	e00c      	b.n	800872a <_dtoa_r+0x28a>
 8008710:	2301      	movs	r3, #1
 8008712:	e7f3      	b.n	80086fc <_dtoa_r+0x25c>
 8008714:	2300      	movs	r3, #0
 8008716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008718:	9308      	str	r3, [sp, #32]
 800871a:	9b00      	ldr	r3, [sp, #0]
 800871c:	4413      	add	r3, r2
 800871e:	9302      	str	r3, [sp, #8]
 8008720:	3301      	adds	r3, #1
 8008722:	2b01      	cmp	r3, #1
 8008724:	9303      	str	r3, [sp, #12]
 8008726:	bfb8      	it	lt
 8008728:	2301      	movlt	r3, #1
 800872a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800872c:	2200      	movs	r2, #0
 800872e:	6042      	str	r2, [r0, #4]
 8008730:	2204      	movs	r2, #4
 8008732:	f102 0614 	add.w	r6, r2, #20
 8008736:	429e      	cmp	r6, r3
 8008738:	6841      	ldr	r1, [r0, #4]
 800873a:	d93d      	bls.n	80087b8 <_dtoa_r+0x318>
 800873c:	4620      	mov	r0, r4
 800873e:	f000 fec9 	bl	80094d4 <_Balloc>
 8008742:	9001      	str	r0, [sp, #4]
 8008744:	2800      	cmp	r0, #0
 8008746:	d13b      	bne.n	80087c0 <_dtoa_r+0x320>
 8008748:	4b11      	ldr	r3, [pc, #68]	; (8008790 <_dtoa_r+0x2f0>)
 800874a:	4602      	mov	r2, r0
 800874c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008750:	e6c0      	b.n	80084d4 <_dtoa_r+0x34>
 8008752:	2301      	movs	r3, #1
 8008754:	e7df      	b.n	8008716 <_dtoa_r+0x276>
 8008756:	bf00      	nop
 8008758:	636f4361 	.word	0x636f4361
 800875c:	3fd287a7 	.word	0x3fd287a7
 8008760:	8b60c8b3 	.word	0x8b60c8b3
 8008764:	3fc68a28 	.word	0x3fc68a28
 8008768:	509f79fb 	.word	0x509f79fb
 800876c:	3fd34413 	.word	0x3fd34413
 8008770:	0800b441 	.word	0x0800b441
 8008774:	0800b458 	.word	0x0800b458
 8008778:	7ff00000 	.word	0x7ff00000
 800877c:	0800b43d 	.word	0x0800b43d
 8008780:	0800b434 	.word	0x0800b434
 8008784:	0800b411 	.word	0x0800b411
 8008788:	3ff80000 	.word	0x3ff80000
 800878c:	0800b5a8 	.word	0x0800b5a8
 8008790:	0800b4b3 	.word	0x0800b4b3
 8008794:	2501      	movs	r5, #1
 8008796:	2300      	movs	r3, #0
 8008798:	9306      	str	r3, [sp, #24]
 800879a:	9508      	str	r5, [sp, #32]
 800879c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80087a4:	2200      	movs	r2, #0
 80087a6:	2312      	movs	r3, #18
 80087a8:	e7b0      	b.n	800870c <_dtoa_r+0x26c>
 80087aa:	2301      	movs	r3, #1
 80087ac:	9308      	str	r3, [sp, #32]
 80087ae:	e7f5      	b.n	800879c <_dtoa_r+0x2fc>
 80087b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80087b6:	e7b8      	b.n	800872a <_dtoa_r+0x28a>
 80087b8:	3101      	adds	r1, #1
 80087ba:	6041      	str	r1, [r0, #4]
 80087bc:	0052      	lsls	r2, r2, #1
 80087be:	e7b8      	b.n	8008732 <_dtoa_r+0x292>
 80087c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087c2:	9a01      	ldr	r2, [sp, #4]
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	9b03      	ldr	r3, [sp, #12]
 80087c8:	2b0e      	cmp	r3, #14
 80087ca:	f200 809d 	bhi.w	8008908 <_dtoa_r+0x468>
 80087ce:	2d00      	cmp	r5, #0
 80087d0:	f000 809a 	beq.w	8008908 <_dtoa_r+0x468>
 80087d4:	9b00      	ldr	r3, [sp, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	dd32      	ble.n	8008840 <_dtoa_r+0x3a0>
 80087da:	4ab7      	ldr	r2, [pc, #732]	; (8008ab8 <_dtoa_r+0x618>)
 80087dc:	f003 030f 	and.w	r3, r3, #15
 80087e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80087e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087e8:	9b00      	ldr	r3, [sp, #0]
 80087ea:	05d8      	lsls	r0, r3, #23
 80087ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 80087f0:	d516      	bpl.n	8008820 <_dtoa_r+0x380>
 80087f2:	4bb2      	ldr	r3, [pc, #712]	; (8008abc <_dtoa_r+0x61c>)
 80087f4:	ec51 0b19 	vmov	r0, r1, d9
 80087f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087fc:	f7f8 f826 	bl	800084c <__aeabi_ddiv>
 8008800:	f007 070f 	and.w	r7, r7, #15
 8008804:	4682      	mov	sl, r0
 8008806:	468b      	mov	fp, r1
 8008808:	2503      	movs	r5, #3
 800880a:	4eac      	ldr	r6, [pc, #688]	; (8008abc <_dtoa_r+0x61c>)
 800880c:	b957      	cbnz	r7, 8008824 <_dtoa_r+0x384>
 800880e:	4642      	mov	r2, r8
 8008810:	464b      	mov	r3, r9
 8008812:	4650      	mov	r0, sl
 8008814:	4659      	mov	r1, fp
 8008816:	f7f8 f819 	bl	800084c <__aeabi_ddiv>
 800881a:	4682      	mov	sl, r0
 800881c:	468b      	mov	fp, r1
 800881e:	e028      	b.n	8008872 <_dtoa_r+0x3d2>
 8008820:	2502      	movs	r5, #2
 8008822:	e7f2      	b.n	800880a <_dtoa_r+0x36a>
 8008824:	07f9      	lsls	r1, r7, #31
 8008826:	d508      	bpl.n	800883a <_dtoa_r+0x39a>
 8008828:	4640      	mov	r0, r8
 800882a:	4649      	mov	r1, r9
 800882c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008830:	f7f7 fee2 	bl	80005f8 <__aeabi_dmul>
 8008834:	3501      	adds	r5, #1
 8008836:	4680      	mov	r8, r0
 8008838:	4689      	mov	r9, r1
 800883a:	107f      	asrs	r7, r7, #1
 800883c:	3608      	adds	r6, #8
 800883e:	e7e5      	b.n	800880c <_dtoa_r+0x36c>
 8008840:	f000 809b 	beq.w	800897a <_dtoa_r+0x4da>
 8008844:	9b00      	ldr	r3, [sp, #0]
 8008846:	4f9d      	ldr	r7, [pc, #628]	; (8008abc <_dtoa_r+0x61c>)
 8008848:	425e      	negs	r6, r3
 800884a:	4b9b      	ldr	r3, [pc, #620]	; (8008ab8 <_dtoa_r+0x618>)
 800884c:	f006 020f 	and.w	r2, r6, #15
 8008850:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008858:	ec51 0b19 	vmov	r0, r1, d9
 800885c:	f7f7 fecc 	bl	80005f8 <__aeabi_dmul>
 8008860:	1136      	asrs	r6, r6, #4
 8008862:	4682      	mov	sl, r0
 8008864:	468b      	mov	fp, r1
 8008866:	2300      	movs	r3, #0
 8008868:	2502      	movs	r5, #2
 800886a:	2e00      	cmp	r6, #0
 800886c:	d17a      	bne.n	8008964 <_dtoa_r+0x4c4>
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1d3      	bne.n	800881a <_dtoa_r+0x37a>
 8008872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008874:	2b00      	cmp	r3, #0
 8008876:	f000 8082 	beq.w	800897e <_dtoa_r+0x4de>
 800887a:	4b91      	ldr	r3, [pc, #580]	; (8008ac0 <_dtoa_r+0x620>)
 800887c:	2200      	movs	r2, #0
 800887e:	4650      	mov	r0, sl
 8008880:	4659      	mov	r1, fp
 8008882:	f7f8 f92b 	bl	8000adc <__aeabi_dcmplt>
 8008886:	2800      	cmp	r0, #0
 8008888:	d079      	beq.n	800897e <_dtoa_r+0x4de>
 800888a:	9b03      	ldr	r3, [sp, #12]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d076      	beq.n	800897e <_dtoa_r+0x4de>
 8008890:	9b02      	ldr	r3, [sp, #8]
 8008892:	2b00      	cmp	r3, #0
 8008894:	dd36      	ble.n	8008904 <_dtoa_r+0x464>
 8008896:	9b00      	ldr	r3, [sp, #0]
 8008898:	4650      	mov	r0, sl
 800889a:	4659      	mov	r1, fp
 800889c:	1e5f      	subs	r7, r3, #1
 800889e:	2200      	movs	r2, #0
 80088a0:	4b88      	ldr	r3, [pc, #544]	; (8008ac4 <_dtoa_r+0x624>)
 80088a2:	f7f7 fea9 	bl	80005f8 <__aeabi_dmul>
 80088a6:	9e02      	ldr	r6, [sp, #8]
 80088a8:	4682      	mov	sl, r0
 80088aa:	468b      	mov	fp, r1
 80088ac:	3501      	adds	r5, #1
 80088ae:	4628      	mov	r0, r5
 80088b0:	f7f7 fe38 	bl	8000524 <__aeabi_i2d>
 80088b4:	4652      	mov	r2, sl
 80088b6:	465b      	mov	r3, fp
 80088b8:	f7f7 fe9e 	bl	80005f8 <__aeabi_dmul>
 80088bc:	4b82      	ldr	r3, [pc, #520]	; (8008ac8 <_dtoa_r+0x628>)
 80088be:	2200      	movs	r2, #0
 80088c0:	f7f7 fce4 	bl	800028c <__adddf3>
 80088c4:	46d0      	mov	r8, sl
 80088c6:	46d9      	mov	r9, fp
 80088c8:	4682      	mov	sl, r0
 80088ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80088ce:	2e00      	cmp	r6, #0
 80088d0:	d158      	bne.n	8008984 <_dtoa_r+0x4e4>
 80088d2:	4b7e      	ldr	r3, [pc, #504]	; (8008acc <_dtoa_r+0x62c>)
 80088d4:	2200      	movs	r2, #0
 80088d6:	4640      	mov	r0, r8
 80088d8:	4649      	mov	r1, r9
 80088da:	f7f7 fcd5 	bl	8000288 <__aeabi_dsub>
 80088de:	4652      	mov	r2, sl
 80088e0:	465b      	mov	r3, fp
 80088e2:	4680      	mov	r8, r0
 80088e4:	4689      	mov	r9, r1
 80088e6:	f7f8 f917 	bl	8000b18 <__aeabi_dcmpgt>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	f040 8295 	bne.w	8008e1a <_dtoa_r+0x97a>
 80088f0:	4652      	mov	r2, sl
 80088f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80088f6:	4640      	mov	r0, r8
 80088f8:	4649      	mov	r1, r9
 80088fa:	f7f8 f8ef 	bl	8000adc <__aeabi_dcmplt>
 80088fe:	2800      	cmp	r0, #0
 8008900:	f040 8289 	bne.w	8008e16 <_dtoa_r+0x976>
 8008904:	ec5b ab19 	vmov	sl, fp, d9
 8008908:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800890a:	2b00      	cmp	r3, #0
 800890c:	f2c0 8148 	blt.w	8008ba0 <_dtoa_r+0x700>
 8008910:	9a00      	ldr	r2, [sp, #0]
 8008912:	2a0e      	cmp	r2, #14
 8008914:	f300 8144 	bgt.w	8008ba0 <_dtoa_r+0x700>
 8008918:	4b67      	ldr	r3, [pc, #412]	; (8008ab8 <_dtoa_r+0x618>)
 800891a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800891e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008924:	2b00      	cmp	r3, #0
 8008926:	f280 80d5 	bge.w	8008ad4 <_dtoa_r+0x634>
 800892a:	9b03      	ldr	r3, [sp, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	f300 80d1 	bgt.w	8008ad4 <_dtoa_r+0x634>
 8008932:	f040 826f 	bne.w	8008e14 <_dtoa_r+0x974>
 8008936:	4b65      	ldr	r3, [pc, #404]	; (8008acc <_dtoa_r+0x62c>)
 8008938:	2200      	movs	r2, #0
 800893a:	4640      	mov	r0, r8
 800893c:	4649      	mov	r1, r9
 800893e:	f7f7 fe5b 	bl	80005f8 <__aeabi_dmul>
 8008942:	4652      	mov	r2, sl
 8008944:	465b      	mov	r3, fp
 8008946:	f7f8 f8dd 	bl	8000b04 <__aeabi_dcmpge>
 800894a:	9e03      	ldr	r6, [sp, #12]
 800894c:	4637      	mov	r7, r6
 800894e:	2800      	cmp	r0, #0
 8008950:	f040 8245 	bne.w	8008dde <_dtoa_r+0x93e>
 8008954:	9d01      	ldr	r5, [sp, #4]
 8008956:	2331      	movs	r3, #49	; 0x31
 8008958:	f805 3b01 	strb.w	r3, [r5], #1
 800895c:	9b00      	ldr	r3, [sp, #0]
 800895e:	3301      	adds	r3, #1
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	e240      	b.n	8008de6 <_dtoa_r+0x946>
 8008964:	07f2      	lsls	r2, r6, #31
 8008966:	d505      	bpl.n	8008974 <_dtoa_r+0x4d4>
 8008968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800896c:	f7f7 fe44 	bl	80005f8 <__aeabi_dmul>
 8008970:	3501      	adds	r5, #1
 8008972:	2301      	movs	r3, #1
 8008974:	1076      	asrs	r6, r6, #1
 8008976:	3708      	adds	r7, #8
 8008978:	e777      	b.n	800886a <_dtoa_r+0x3ca>
 800897a:	2502      	movs	r5, #2
 800897c:	e779      	b.n	8008872 <_dtoa_r+0x3d2>
 800897e:	9f00      	ldr	r7, [sp, #0]
 8008980:	9e03      	ldr	r6, [sp, #12]
 8008982:	e794      	b.n	80088ae <_dtoa_r+0x40e>
 8008984:	9901      	ldr	r1, [sp, #4]
 8008986:	4b4c      	ldr	r3, [pc, #304]	; (8008ab8 <_dtoa_r+0x618>)
 8008988:	4431      	add	r1, r6
 800898a:	910d      	str	r1, [sp, #52]	; 0x34
 800898c:	9908      	ldr	r1, [sp, #32]
 800898e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008992:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008996:	2900      	cmp	r1, #0
 8008998:	d043      	beq.n	8008a22 <_dtoa_r+0x582>
 800899a:	494d      	ldr	r1, [pc, #308]	; (8008ad0 <_dtoa_r+0x630>)
 800899c:	2000      	movs	r0, #0
 800899e:	f7f7 ff55 	bl	800084c <__aeabi_ddiv>
 80089a2:	4652      	mov	r2, sl
 80089a4:	465b      	mov	r3, fp
 80089a6:	f7f7 fc6f 	bl	8000288 <__aeabi_dsub>
 80089aa:	9d01      	ldr	r5, [sp, #4]
 80089ac:	4682      	mov	sl, r0
 80089ae:	468b      	mov	fp, r1
 80089b0:	4649      	mov	r1, r9
 80089b2:	4640      	mov	r0, r8
 80089b4:	f7f8 f8d0 	bl	8000b58 <__aeabi_d2iz>
 80089b8:	4606      	mov	r6, r0
 80089ba:	f7f7 fdb3 	bl	8000524 <__aeabi_i2d>
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	4640      	mov	r0, r8
 80089c4:	4649      	mov	r1, r9
 80089c6:	f7f7 fc5f 	bl	8000288 <__aeabi_dsub>
 80089ca:	3630      	adds	r6, #48	; 0x30
 80089cc:	f805 6b01 	strb.w	r6, [r5], #1
 80089d0:	4652      	mov	r2, sl
 80089d2:	465b      	mov	r3, fp
 80089d4:	4680      	mov	r8, r0
 80089d6:	4689      	mov	r9, r1
 80089d8:	f7f8 f880 	bl	8000adc <__aeabi_dcmplt>
 80089dc:	2800      	cmp	r0, #0
 80089de:	d163      	bne.n	8008aa8 <_dtoa_r+0x608>
 80089e0:	4642      	mov	r2, r8
 80089e2:	464b      	mov	r3, r9
 80089e4:	4936      	ldr	r1, [pc, #216]	; (8008ac0 <_dtoa_r+0x620>)
 80089e6:	2000      	movs	r0, #0
 80089e8:	f7f7 fc4e 	bl	8000288 <__aeabi_dsub>
 80089ec:	4652      	mov	r2, sl
 80089ee:	465b      	mov	r3, fp
 80089f0:	f7f8 f874 	bl	8000adc <__aeabi_dcmplt>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	f040 80b5 	bne.w	8008b64 <_dtoa_r+0x6c4>
 80089fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089fc:	429d      	cmp	r5, r3
 80089fe:	d081      	beq.n	8008904 <_dtoa_r+0x464>
 8008a00:	4b30      	ldr	r3, [pc, #192]	; (8008ac4 <_dtoa_r+0x624>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	4650      	mov	r0, sl
 8008a06:	4659      	mov	r1, fp
 8008a08:	f7f7 fdf6 	bl	80005f8 <__aeabi_dmul>
 8008a0c:	4b2d      	ldr	r3, [pc, #180]	; (8008ac4 <_dtoa_r+0x624>)
 8008a0e:	4682      	mov	sl, r0
 8008a10:	468b      	mov	fp, r1
 8008a12:	4640      	mov	r0, r8
 8008a14:	4649      	mov	r1, r9
 8008a16:	2200      	movs	r2, #0
 8008a18:	f7f7 fdee 	bl	80005f8 <__aeabi_dmul>
 8008a1c:	4680      	mov	r8, r0
 8008a1e:	4689      	mov	r9, r1
 8008a20:	e7c6      	b.n	80089b0 <_dtoa_r+0x510>
 8008a22:	4650      	mov	r0, sl
 8008a24:	4659      	mov	r1, fp
 8008a26:	f7f7 fde7 	bl	80005f8 <__aeabi_dmul>
 8008a2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a2c:	9d01      	ldr	r5, [sp, #4]
 8008a2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a30:	4682      	mov	sl, r0
 8008a32:	468b      	mov	fp, r1
 8008a34:	4649      	mov	r1, r9
 8008a36:	4640      	mov	r0, r8
 8008a38:	f7f8 f88e 	bl	8000b58 <__aeabi_d2iz>
 8008a3c:	4606      	mov	r6, r0
 8008a3e:	f7f7 fd71 	bl	8000524 <__aeabi_i2d>
 8008a42:	3630      	adds	r6, #48	; 0x30
 8008a44:	4602      	mov	r2, r0
 8008a46:	460b      	mov	r3, r1
 8008a48:	4640      	mov	r0, r8
 8008a4a:	4649      	mov	r1, r9
 8008a4c:	f7f7 fc1c 	bl	8000288 <__aeabi_dsub>
 8008a50:	f805 6b01 	strb.w	r6, [r5], #1
 8008a54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a56:	429d      	cmp	r5, r3
 8008a58:	4680      	mov	r8, r0
 8008a5a:	4689      	mov	r9, r1
 8008a5c:	f04f 0200 	mov.w	r2, #0
 8008a60:	d124      	bne.n	8008aac <_dtoa_r+0x60c>
 8008a62:	4b1b      	ldr	r3, [pc, #108]	; (8008ad0 <_dtoa_r+0x630>)
 8008a64:	4650      	mov	r0, sl
 8008a66:	4659      	mov	r1, fp
 8008a68:	f7f7 fc10 	bl	800028c <__adddf3>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	4640      	mov	r0, r8
 8008a72:	4649      	mov	r1, r9
 8008a74:	f7f8 f850 	bl	8000b18 <__aeabi_dcmpgt>
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	d173      	bne.n	8008b64 <_dtoa_r+0x6c4>
 8008a7c:	4652      	mov	r2, sl
 8008a7e:	465b      	mov	r3, fp
 8008a80:	4913      	ldr	r1, [pc, #76]	; (8008ad0 <_dtoa_r+0x630>)
 8008a82:	2000      	movs	r0, #0
 8008a84:	f7f7 fc00 	bl	8000288 <__aeabi_dsub>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	4649      	mov	r1, r9
 8008a90:	f7f8 f824 	bl	8000adc <__aeabi_dcmplt>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	f43f af35 	beq.w	8008904 <_dtoa_r+0x464>
 8008a9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008a9c:	1e6b      	subs	r3, r5, #1
 8008a9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008aa0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008aa4:	2b30      	cmp	r3, #48	; 0x30
 8008aa6:	d0f8      	beq.n	8008a9a <_dtoa_r+0x5fa>
 8008aa8:	9700      	str	r7, [sp, #0]
 8008aaa:	e049      	b.n	8008b40 <_dtoa_r+0x6a0>
 8008aac:	4b05      	ldr	r3, [pc, #20]	; (8008ac4 <_dtoa_r+0x624>)
 8008aae:	f7f7 fda3 	bl	80005f8 <__aeabi_dmul>
 8008ab2:	4680      	mov	r8, r0
 8008ab4:	4689      	mov	r9, r1
 8008ab6:	e7bd      	b.n	8008a34 <_dtoa_r+0x594>
 8008ab8:	0800b5a8 	.word	0x0800b5a8
 8008abc:	0800b580 	.word	0x0800b580
 8008ac0:	3ff00000 	.word	0x3ff00000
 8008ac4:	40240000 	.word	0x40240000
 8008ac8:	401c0000 	.word	0x401c0000
 8008acc:	40140000 	.word	0x40140000
 8008ad0:	3fe00000 	.word	0x3fe00000
 8008ad4:	9d01      	ldr	r5, [sp, #4]
 8008ad6:	4656      	mov	r6, sl
 8008ad8:	465f      	mov	r7, fp
 8008ada:	4642      	mov	r2, r8
 8008adc:	464b      	mov	r3, r9
 8008ade:	4630      	mov	r0, r6
 8008ae0:	4639      	mov	r1, r7
 8008ae2:	f7f7 feb3 	bl	800084c <__aeabi_ddiv>
 8008ae6:	f7f8 f837 	bl	8000b58 <__aeabi_d2iz>
 8008aea:	4682      	mov	sl, r0
 8008aec:	f7f7 fd1a 	bl	8000524 <__aeabi_i2d>
 8008af0:	4642      	mov	r2, r8
 8008af2:	464b      	mov	r3, r9
 8008af4:	f7f7 fd80 	bl	80005f8 <__aeabi_dmul>
 8008af8:	4602      	mov	r2, r0
 8008afa:	460b      	mov	r3, r1
 8008afc:	4630      	mov	r0, r6
 8008afe:	4639      	mov	r1, r7
 8008b00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008b04:	f7f7 fbc0 	bl	8000288 <__aeabi_dsub>
 8008b08:	f805 6b01 	strb.w	r6, [r5], #1
 8008b0c:	9e01      	ldr	r6, [sp, #4]
 8008b0e:	9f03      	ldr	r7, [sp, #12]
 8008b10:	1bae      	subs	r6, r5, r6
 8008b12:	42b7      	cmp	r7, r6
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	d135      	bne.n	8008b86 <_dtoa_r+0x6e6>
 8008b1a:	f7f7 fbb7 	bl	800028c <__adddf3>
 8008b1e:	4642      	mov	r2, r8
 8008b20:	464b      	mov	r3, r9
 8008b22:	4606      	mov	r6, r0
 8008b24:	460f      	mov	r7, r1
 8008b26:	f7f7 fff7 	bl	8000b18 <__aeabi_dcmpgt>
 8008b2a:	b9d0      	cbnz	r0, 8008b62 <_dtoa_r+0x6c2>
 8008b2c:	4642      	mov	r2, r8
 8008b2e:	464b      	mov	r3, r9
 8008b30:	4630      	mov	r0, r6
 8008b32:	4639      	mov	r1, r7
 8008b34:	f7f7 ffc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b38:	b110      	cbz	r0, 8008b40 <_dtoa_r+0x6a0>
 8008b3a:	f01a 0f01 	tst.w	sl, #1
 8008b3e:	d110      	bne.n	8008b62 <_dtoa_r+0x6c2>
 8008b40:	4620      	mov	r0, r4
 8008b42:	ee18 1a10 	vmov	r1, s16
 8008b46:	f000 fd05 	bl	8009554 <_Bfree>
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	9800      	ldr	r0, [sp, #0]
 8008b4e:	702b      	strb	r3, [r5, #0]
 8008b50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b52:	3001      	adds	r0, #1
 8008b54:	6018      	str	r0, [r3, #0]
 8008b56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	f43f acf1 	beq.w	8008540 <_dtoa_r+0xa0>
 8008b5e:	601d      	str	r5, [r3, #0]
 8008b60:	e4ee      	b.n	8008540 <_dtoa_r+0xa0>
 8008b62:	9f00      	ldr	r7, [sp, #0]
 8008b64:	462b      	mov	r3, r5
 8008b66:	461d      	mov	r5, r3
 8008b68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b6c:	2a39      	cmp	r2, #57	; 0x39
 8008b6e:	d106      	bne.n	8008b7e <_dtoa_r+0x6de>
 8008b70:	9a01      	ldr	r2, [sp, #4]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d1f7      	bne.n	8008b66 <_dtoa_r+0x6c6>
 8008b76:	9901      	ldr	r1, [sp, #4]
 8008b78:	2230      	movs	r2, #48	; 0x30
 8008b7a:	3701      	adds	r7, #1
 8008b7c:	700a      	strb	r2, [r1, #0]
 8008b7e:	781a      	ldrb	r2, [r3, #0]
 8008b80:	3201      	adds	r2, #1
 8008b82:	701a      	strb	r2, [r3, #0]
 8008b84:	e790      	b.n	8008aa8 <_dtoa_r+0x608>
 8008b86:	4ba6      	ldr	r3, [pc, #664]	; (8008e20 <_dtoa_r+0x980>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f7f7 fd35 	bl	80005f8 <__aeabi_dmul>
 8008b8e:	2200      	movs	r2, #0
 8008b90:	2300      	movs	r3, #0
 8008b92:	4606      	mov	r6, r0
 8008b94:	460f      	mov	r7, r1
 8008b96:	f7f7 ff97 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d09d      	beq.n	8008ada <_dtoa_r+0x63a>
 8008b9e:	e7cf      	b.n	8008b40 <_dtoa_r+0x6a0>
 8008ba0:	9a08      	ldr	r2, [sp, #32]
 8008ba2:	2a00      	cmp	r2, #0
 8008ba4:	f000 80d7 	beq.w	8008d56 <_dtoa_r+0x8b6>
 8008ba8:	9a06      	ldr	r2, [sp, #24]
 8008baa:	2a01      	cmp	r2, #1
 8008bac:	f300 80ba 	bgt.w	8008d24 <_dtoa_r+0x884>
 8008bb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bb2:	2a00      	cmp	r2, #0
 8008bb4:	f000 80b2 	beq.w	8008d1c <_dtoa_r+0x87c>
 8008bb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008bbc:	9e07      	ldr	r6, [sp, #28]
 8008bbe:	9d04      	ldr	r5, [sp, #16]
 8008bc0:	9a04      	ldr	r2, [sp, #16]
 8008bc2:	441a      	add	r2, r3
 8008bc4:	9204      	str	r2, [sp, #16]
 8008bc6:	9a05      	ldr	r2, [sp, #20]
 8008bc8:	2101      	movs	r1, #1
 8008bca:	441a      	add	r2, r3
 8008bcc:	4620      	mov	r0, r4
 8008bce:	9205      	str	r2, [sp, #20]
 8008bd0:	f000 fd78 	bl	80096c4 <__i2b>
 8008bd4:	4607      	mov	r7, r0
 8008bd6:	2d00      	cmp	r5, #0
 8008bd8:	dd0c      	ble.n	8008bf4 <_dtoa_r+0x754>
 8008bda:	9b05      	ldr	r3, [sp, #20]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	dd09      	ble.n	8008bf4 <_dtoa_r+0x754>
 8008be0:	42ab      	cmp	r3, r5
 8008be2:	9a04      	ldr	r2, [sp, #16]
 8008be4:	bfa8      	it	ge
 8008be6:	462b      	movge	r3, r5
 8008be8:	1ad2      	subs	r2, r2, r3
 8008bea:	9204      	str	r2, [sp, #16]
 8008bec:	9a05      	ldr	r2, [sp, #20]
 8008bee:	1aed      	subs	r5, r5, r3
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	9305      	str	r3, [sp, #20]
 8008bf4:	9b07      	ldr	r3, [sp, #28]
 8008bf6:	b31b      	cbz	r3, 8008c40 <_dtoa_r+0x7a0>
 8008bf8:	9b08      	ldr	r3, [sp, #32]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 80af 	beq.w	8008d5e <_dtoa_r+0x8be>
 8008c00:	2e00      	cmp	r6, #0
 8008c02:	dd13      	ble.n	8008c2c <_dtoa_r+0x78c>
 8008c04:	4639      	mov	r1, r7
 8008c06:	4632      	mov	r2, r6
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f000 fe1b 	bl	8009844 <__pow5mult>
 8008c0e:	ee18 2a10 	vmov	r2, s16
 8008c12:	4601      	mov	r1, r0
 8008c14:	4607      	mov	r7, r0
 8008c16:	4620      	mov	r0, r4
 8008c18:	f000 fd6a 	bl	80096f0 <__multiply>
 8008c1c:	ee18 1a10 	vmov	r1, s16
 8008c20:	4680      	mov	r8, r0
 8008c22:	4620      	mov	r0, r4
 8008c24:	f000 fc96 	bl	8009554 <_Bfree>
 8008c28:	ee08 8a10 	vmov	s16, r8
 8008c2c:	9b07      	ldr	r3, [sp, #28]
 8008c2e:	1b9a      	subs	r2, r3, r6
 8008c30:	d006      	beq.n	8008c40 <_dtoa_r+0x7a0>
 8008c32:	ee18 1a10 	vmov	r1, s16
 8008c36:	4620      	mov	r0, r4
 8008c38:	f000 fe04 	bl	8009844 <__pow5mult>
 8008c3c:	ee08 0a10 	vmov	s16, r0
 8008c40:	2101      	movs	r1, #1
 8008c42:	4620      	mov	r0, r4
 8008c44:	f000 fd3e 	bl	80096c4 <__i2b>
 8008c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	4606      	mov	r6, r0
 8008c4e:	f340 8088 	ble.w	8008d62 <_dtoa_r+0x8c2>
 8008c52:	461a      	mov	r2, r3
 8008c54:	4601      	mov	r1, r0
 8008c56:	4620      	mov	r0, r4
 8008c58:	f000 fdf4 	bl	8009844 <__pow5mult>
 8008c5c:	9b06      	ldr	r3, [sp, #24]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	4606      	mov	r6, r0
 8008c62:	f340 8081 	ble.w	8008d68 <_dtoa_r+0x8c8>
 8008c66:	f04f 0800 	mov.w	r8, #0
 8008c6a:	6933      	ldr	r3, [r6, #16]
 8008c6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008c70:	6918      	ldr	r0, [r3, #16]
 8008c72:	f000 fcd7 	bl	8009624 <__hi0bits>
 8008c76:	f1c0 0020 	rsb	r0, r0, #32
 8008c7a:	9b05      	ldr	r3, [sp, #20]
 8008c7c:	4418      	add	r0, r3
 8008c7e:	f010 001f 	ands.w	r0, r0, #31
 8008c82:	f000 8092 	beq.w	8008daa <_dtoa_r+0x90a>
 8008c86:	f1c0 0320 	rsb	r3, r0, #32
 8008c8a:	2b04      	cmp	r3, #4
 8008c8c:	f340 808a 	ble.w	8008da4 <_dtoa_r+0x904>
 8008c90:	f1c0 001c 	rsb	r0, r0, #28
 8008c94:	9b04      	ldr	r3, [sp, #16]
 8008c96:	4403      	add	r3, r0
 8008c98:	9304      	str	r3, [sp, #16]
 8008c9a:	9b05      	ldr	r3, [sp, #20]
 8008c9c:	4403      	add	r3, r0
 8008c9e:	4405      	add	r5, r0
 8008ca0:	9305      	str	r3, [sp, #20]
 8008ca2:	9b04      	ldr	r3, [sp, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	dd07      	ble.n	8008cb8 <_dtoa_r+0x818>
 8008ca8:	ee18 1a10 	vmov	r1, s16
 8008cac:	461a      	mov	r2, r3
 8008cae:	4620      	mov	r0, r4
 8008cb0:	f000 fe22 	bl	80098f8 <__lshift>
 8008cb4:	ee08 0a10 	vmov	s16, r0
 8008cb8:	9b05      	ldr	r3, [sp, #20]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	dd05      	ble.n	8008cca <_dtoa_r+0x82a>
 8008cbe:	4631      	mov	r1, r6
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f000 fe18 	bl	80098f8 <__lshift>
 8008cc8:	4606      	mov	r6, r0
 8008cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d06e      	beq.n	8008dae <_dtoa_r+0x90e>
 8008cd0:	ee18 0a10 	vmov	r0, s16
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	f000 fe7f 	bl	80099d8 <__mcmp>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	da67      	bge.n	8008dae <_dtoa_r+0x90e>
 8008cde:	9b00      	ldr	r3, [sp, #0]
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	ee18 1a10 	vmov	r1, s16
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	220a      	movs	r2, #10
 8008cea:	2300      	movs	r3, #0
 8008cec:	4620      	mov	r0, r4
 8008cee:	f000 fc53 	bl	8009598 <__multadd>
 8008cf2:	9b08      	ldr	r3, [sp, #32]
 8008cf4:	ee08 0a10 	vmov	s16, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 81b1 	beq.w	8009060 <_dtoa_r+0xbc0>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	4639      	mov	r1, r7
 8008d02:	220a      	movs	r2, #10
 8008d04:	4620      	mov	r0, r4
 8008d06:	f000 fc47 	bl	8009598 <__multadd>
 8008d0a:	9b02      	ldr	r3, [sp, #8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	4607      	mov	r7, r0
 8008d10:	f300 808e 	bgt.w	8008e30 <_dtoa_r+0x990>
 8008d14:	9b06      	ldr	r3, [sp, #24]
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	dc51      	bgt.n	8008dbe <_dtoa_r+0x91e>
 8008d1a:	e089      	b.n	8008e30 <_dtoa_r+0x990>
 8008d1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008d22:	e74b      	b.n	8008bbc <_dtoa_r+0x71c>
 8008d24:	9b03      	ldr	r3, [sp, #12]
 8008d26:	1e5e      	subs	r6, r3, #1
 8008d28:	9b07      	ldr	r3, [sp, #28]
 8008d2a:	42b3      	cmp	r3, r6
 8008d2c:	bfbf      	itttt	lt
 8008d2e:	9b07      	ldrlt	r3, [sp, #28]
 8008d30:	9607      	strlt	r6, [sp, #28]
 8008d32:	1af2      	sublt	r2, r6, r3
 8008d34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008d36:	bfb6      	itet	lt
 8008d38:	189b      	addlt	r3, r3, r2
 8008d3a:	1b9e      	subge	r6, r3, r6
 8008d3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008d3e:	9b03      	ldr	r3, [sp, #12]
 8008d40:	bfb8      	it	lt
 8008d42:	2600      	movlt	r6, #0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	bfb7      	itett	lt
 8008d48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008d4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008d50:	1a9d      	sublt	r5, r3, r2
 8008d52:	2300      	movlt	r3, #0
 8008d54:	e734      	b.n	8008bc0 <_dtoa_r+0x720>
 8008d56:	9e07      	ldr	r6, [sp, #28]
 8008d58:	9d04      	ldr	r5, [sp, #16]
 8008d5a:	9f08      	ldr	r7, [sp, #32]
 8008d5c:	e73b      	b.n	8008bd6 <_dtoa_r+0x736>
 8008d5e:	9a07      	ldr	r2, [sp, #28]
 8008d60:	e767      	b.n	8008c32 <_dtoa_r+0x792>
 8008d62:	9b06      	ldr	r3, [sp, #24]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	dc18      	bgt.n	8008d9a <_dtoa_r+0x8fa>
 8008d68:	f1ba 0f00 	cmp.w	sl, #0
 8008d6c:	d115      	bne.n	8008d9a <_dtoa_r+0x8fa>
 8008d6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d72:	b993      	cbnz	r3, 8008d9a <_dtoa_r+0x8fa>
 8008d74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d78:	0d1b      	lsrs	r3, r3, #20
 8008d7a:	051b      	lsls	r3, r3, #20
 8008d7c:	b183      	cbz	r3, 8008da0 <_dtoa_r+0x900>
 8008d7e:	9b04      	ldr	r3, [sp, #16]
 8008d80:	3301      	adds	r3, #1
 8008d82:	9304      	str	r3, [sp, #16]
 8008d84:	9b05      	ldr	r3, [sp, #20]
 8008d86:	3301      	adds	r3, #1
 8008d88:	9305      	str	r3, [sp, #20]
 8008d8a:	f04f 0801 	mov.w	r8, #1
 8008d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f47f af6a 	bne.w	8008c6a <_dtoa_r+0x7ca>
 8008d96:	2001      	movs	r0, #1
 8008d98:	e76f      	b.n	8008c7a <_dtoa_r+0x7da>
 8008d9a:	f04f 0800 	mov.w	r8, #0
 8008d9e:	e7f6      	b.n	8008d8e <_dtoa_r+0x8ee>
 8008da0:	4698      	mov	r8, r3
 8008da2:	e7f4      	b.n	8008d8e <_dtoa_r+0x8ee>
 8008da4:	f43f af7d 	beq.w	8008ca2 <_dtoa_r+0x802>
 8008da8:	4618      	mov	r0, r3
 8008daa:	301c      	adds	r0, #28
 8008dac:	e772      	b.n	8008c94 <_dtoa_r+0x7f4>
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	dc37      	bgt.n	8008e24 <_dtoa_r+0x984>
 8008db4:	9b06      	ldr	r3, [sp, #24]
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	dd34      	ble.n	8008e24 <_dtoa_r+0x984>
 8008dba:	9b03      	ldr	r3, [sp, #12]
 8008dbc:	9302      	str	r3, [sp, #8]
 8008dbe:	9b02      	ldr	r3, [sp, #8]
 8008dc0:	b96b      	cbnz	r3, 8008dde <_dtoa_r+0x93e>
 8008dc2:	4631      	mov	r1, r6
 8008dc4:	2205      	movs	r2, #5
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f000 fbe6 	bl	8009598 <__multadd>
 8008dcc:	4601      	mov	r1, r0
 8008dce:	4606      	mov	r6, r0
 8008dd0:	ee18 0a10 	vmov	r0, s16
 8008dd4:	f000 fe00 	bl	80099d8 <__mcmp>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	f73f adbb 	bgt.w	8008954 <_dtoa_r+0x4b4>
 8008dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de0:	9d01      	ldr	r5, [sp, #4]
 8008de2:	43db      	mvns	r3, r3
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	f04f 0800 	mov.w	r8, #0
 8008dea:	4631      	mov	r1, r6
 8008dec:	4620      	mov	r0, r4
 8008dee:	f000 fbb1 	bl	8009554 <_Bfree>
 8008df2:	2f00      	cmp	r7, #0
 8008df4:	f43f aea4 	beq.w	8008b40 <_dtoa_r+0x6a0>
 8008df8:	f1b8 0f00 	cmp.w	r8, #0
 8008dfc:	d005      	beq.n	8008e0a <_dtoa_r+0x96a>
 8008dfe:	45b8      	cmp	r8, r7
 8008e00:	d003      	beq.n	8008e0a <_dtoa_r+0x96a>
 8008e02:	4641      	mov	r1, r8
 8008e04:	4620      	mov	r0, r4
 8008e06:	f000 fba5 	bl	8009554 <_Bfree>
 8008e0a:	4639      	mov	r1, r7
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f000 fba1 	bl	8009554 <_Bfree>
 8008e12:	e695      	b.n	8008b40 <_dtoa_r+0x6a0>
 8008e14:	2600      	movs	r6, #0
 8008e16:	4637      	mov	r7, r6
 8008e18:	e7e1      	b.n	8008dde <_dtoa_r+0x93e>
 8008e1a:	9700      	str	r7, [sp, #0]
 8008e1c:	4637      	mov	r7, r6
 8008e1e:	e599      	b.n	8008954 <_dtoa_r+0x4b4>
 8008e20:	40240000 	.word	0x40240000
 8008e24:	9b08      	ldr	r3, [sp, #32]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f000 80ca 	beq.w	8008fc0 <_dtoa_r+0xb20>
 8008e2c:	9b03      	ldr	r3, [sp, #12]
 8008e2e:	9302      	str	r3, [sp, #8]
 8008e30:	2d00      	cmp	r5, #0
 8008e32:	dd05      	ble.n	8008e40 <_dtoa_r+0x9a0>
 8008e34:	4639      	mov	r1, r7
 8008e36:	462a      	mov	r2, r5
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f000 fd5d 	bl	80098f8 <__lshift>
 8008e3e:	4607      	mov	r7, r0
 8008e40:	f1b8 0f00 	cmp.w	r8, #0
 8008e44:	d05b      	beq.n	8008efe <_dtoa_r+0xa5e>
 8008e46:	6879      	ldr	r1, [r7, #4]
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f000 fb43 	bl	80094d4 <_Balloc>
 8008e4e:	4605      	mov	r5, r0
 8008e50:	b928      	cbnz	r0, 8008e5e <_dtoa_r+0x9be>
 8008e52:	4b87      	ldr	r3, [pc, #540]	; (8009070 <_dtoa_r+0xbd0>)
 8008e54:	4602      	mov	r2, r0
 8008e56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008e5a:	f7ff bb3b 	b.w	80084d4 <_dtoa_r+0x34>
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	3202      	adds	r2, #2
 8008e62:	0092      	lsls	r2, r2, #2
 8008e64:	f107 010c 	add.w	r1, r7, #12
 8008e68:	300c      	adds	r0, #12
 8008e6a:	f7fe fcbf 	bl	80077ec <memcpy>
 8008e6e:	2201      	movs	r2, #1
 8008e70:	4629      	mov	r1, r5
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 fd40 	bl	80098f8 <__lshift>
 8008e78:	9b01      	ldr	r3, [sp, #4]
 8008e7a:	f103 0901 	add.w	r9, r3, #1
 8008e7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008e82:	4413      	add	r3, r2
 8008e84:	9305      	str	r3, [sp, #20]
 8008e86:	f00a 0301 	and.w	r3, sl, #1
 8008e8a:	46b8      	mov	r8, r7
 8008e8c:	9304      	str	r3, [sp, #16]
 8008e8e:	4607      	mov	r7, r0
 8008e90:	4631      	mov	r1, r6
 8008e92:	ee18 0a10 	vmov	r0, s16
 8008e96:	f7ff fa77 	bl	8008388 <quorem>
 8008e9a:	4641      	mov	r1, r8
 8008e9c:	9002      	str	r0, [sp, #8]
 8008e9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008ea2:	ee18 0a10 	vmov	r0, s16
 8008ea6:	f000 fd97 	bl	80099d8 <__mcmp>
 8008eaa:	463a      	mov	r2, r7
 8008eac:	9003      	str	r0, [sp, #12]
 8008eae:	4631      	mov	r1, r6
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f000 fdad 	bl	8009a10 <__mdiff>
 8008eb6:	68c2      	ldr	r2, [r0, #12]
 8008eb8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008ebc:	4605      	mov	r5, r0
 8008ebe:	bb02      	cbnz	r2, 8008f02 <_dtoa_r+0xa62>
 8008ec0:	4601      	mov	r1, r0
 8008ec2:	ee18 0a10 	vmov	r0, s16
 8008ec6:	f000 fd87 	bl	80099d8 <__mcmp>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	4629      	mov	r1, r5
 8008ece:	4620      	mov	r0, r4
 8008ed0:	9207      	str	r2, [sp, #28]
 8008ed2:	f000 fb3f 	bl	8009554 <_Bfree>
 8008ed6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008eda:	ea43 0102 	orr.w	r1, r3, r2
 8008ede:	9b04      	ldr	r3, [sp, #16]
 8008ee0:	430b      	orrs	r3, r1
 8008ee2:	464d      	mov	r5, r9
 8008ee4:	d10f      	bne.n	8008f06 <_dtoa_r+0xa66>
 8008ee6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008eea:	d02a      	beq.n	8008f42 <_dtoa_r+0xaa2>
 8008eec:	9b03      	ldr	r3, [sp, #12]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	dd02      	ble.n	8008ef8 <_dtoa_r+0xa58>
 8008ef2:	9b02      	ldr	r3, [sp, #8]
 8008ef4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008ef8:	f88b a000 	strb.w	sl, [fp]
 8008efc:	e775      	b.n	8008dea <_dtoa_r+0x94a>
 8008efe:	4638      	mov	r0, r7
 8008f00:	e7ba      	b.n	8008e78 <_dtoa_r+0x9d8>
 8008f02:	2201      	movs	r2, #1
 8008f04:	e7e2      	b.n	8008ecc <_dtoa_r+0xa2c>
 8008f06:	9b03      	ldr	r3, [sp, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	db04      	blt.n	8008f16 <_dtoa_r+0xa76>
 8008f0c:	9906      	ldr	r1, [sp, #24]
 8008f0e:	430b      	orrs	r3, r1
 8008f10:	9904      	ldr	r1, [sp, #16]
 8008f12:	430b      	orrs	r3, r1
 8008f14:	d122      	bne.n	8008f5c <_dtoa_r+0xabc>
 8008f16:	2a00      	cmp	r2, #0
 8008f18:	ddee      	ble.n	8008ef8 <_dtoa_r+0xa58>
 8008f1a:	ee18 1a10 	vmov	r1, s16
 8008f1e:	2201      	movs	r2, #1
 8008f20:	4620      	mov	r0, r4
 8008f22:	f000 fce9 	bl	80098f8 <__lshift>
 8008f26:	4631      	mov	r1, r6
 8008f28:	ee08 0a10 	vmov	s16, r0
 8008f2c:	f000 fd54 	bl	80099d8 <__mcmp>
 8008f30:	2800      	cmp	r0, #0
 8008f32:	dc03      	bgt.n	8008f3c <_dtoa_r+0xa9c>
 8008f34:	d1e0      	bne.n	8008ef8 <_dtoa_r+0xa58>
 8008f36:	f01a 0f01 	tst.w	sl, #1
 8008f3a:	d0dd      	beq.n	8008ef8 <_dtoa_r+0xa58>
 8008f3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f40:	d1d7      	bne.n	8008ef2 <_dtoa_r+0xa52>
 8008f42:	2339      	movs	r3, #57	; 0x39
 8008f44:	f88b 3000 	strb.w	r3, [fp]
 8008f48:	462b      	mov	r3, r5
 8008f4a:	461d      	mov	r5, r3
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008f52:	2a39      	cmp	r2, #57	; 0x39
 8008f54:	d071      	beq.n	800903a <_dtoa_r+0xb9a>
 8008f56:	3201      	adds	r2, #1
 8008f58:	701a      	strb	r2, [r3, #0]
 8008f5a:	e746      	b.n	8008dea <_dtoa_r+0x94a>
 8008f5c:	2a00      	cmp	r2, #0
 8008f5e:	dd07      	ble.n	8008f70 <_dtoa_r+0xad0>
 8008f60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f64:	d0ed      	beq.n	8008f42 <_dtoa_r+0xaa2>
 8008f66:	f10a 0301 	add.w	r3, sl, #1
 8008f6a:	f88b 3000 	strb.w	r3, [fp]
 8008f6e:	e73c      	b.n	8008dea <_dtoa_r+0x94a>
 8008f70:	9b05      	ldr	r3, [sp, #20]
 8008f72:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008f76:	4599      	cmp	r9, r3
 8008f78:	d047      	beq.n	800900a <_dtoa_r+0xb6a>
 8008f7a:	ee18 1a10 	vmov	r1, s16
 8008f7e:	2300      	movs	r3, #0
 8008f80:	220a      	movs	r2, #10
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 fb08 	bl	8009598 <__multadd>
 8008f88:	45b8      	cmp	r8, r7
 8008f8a:	ee08 0a10 	vmov	s16, r0
 8008f8e:	f04f 0300 	mov.w	r3, #0
 8008f92:	f04f 020a 	mov.w	r2, #10
 8008f96:	4641      	mov	r1, r8
 8008f98:	4620      	mov	r0, r4
 8008f9a:	d106      	bne.n	8008faa <_dtoa_r+0xb0a>
 8008f9c:	f000 fafc 	bl	8009598 <__multadd>
 8008fa0:	4680      	mov	r8, r0
 8008fa2:	4607      	mov	r7, r0
 8008fa4:	f109 0901 	add.w	r9, r9, #1
 8008fa8:	e772      	b.n	8008e90 <_dtoa_r+0x9f0>
 8008faa:	f000 faf5 	bl	8009598 <__multadd>
 8008fae:	4639      	mov	r1, r7
 8008fb0:	4680      	mov	r8, r0
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	220a      	movs	r2, #10
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f000 faee 	bl	8009598 <__multadd>
 8008fbc:	4607      	mov	r7, r0
 8008fbe:	e7f1      	b.n	8008fa4 <_dtoa_r+0xb04>
 8008fc0:	9b03      	ldr	r3, [sp, #12]
 8008fc2:	9302      	str	r3, [sp, #8]
 8008fc4:	9d01      	ldr	r5, [sp, #4]
 8008fc6:	ee18 0a10 	vmov	r0, s16
 8008fca:	4631      	mov	r1, r6
 8008fcc:	f7ff f9dc 	bl	8008388 <quorem>
 8008fd0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008fd4:	9b01      	ldr	r3, [sp, #4]
 8008fd6:	f805 ab01 	strb.w	sl, [r5], #1
 8008fda:	1aea      	subs	r2, r5, r3
 8008fdc:	9b02      	ldr	r3, [sp, #8]
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	dd09      	ble.n	8008ff6 <_dtoa_r+0xb56>
 8008fe2:	ee18 1a10 	vmov	r1, s16
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	220a      	movs	r2, #10
 8008fea:	4620      	mov	r0, r4
 8008fec:	f000 fad4 	bl	8009598 <__multadd>
 8008ff0:	ee08 0a10 	vmov	s16, r0
 8008ff4:	e7e7      	b.n	8008fc6 <_dtoa_r+0xb26>
 8008ff6:	9b02      	ldr	r3, [sp, #8]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	bfc8      	it	gt
 8008ffc:	461d      	movgt	r5, r3
 8008ffe:	9b01      	ldr	r3, [sp, #4]
 8009000:	bfd8      	it	le
 8009002:	2501      	movle	r5, #1
 8009004:	441d      	add	r5, r3
 8009006:	f04f 0800 	mov.w	r8, #0
 800900a:	ee18 1a10 	vmov	r1, s16
 800900e:	2201      	movs	r2, #1
 8009010:	4620      	mov	r0, r4
 8009012:	f000 fc71 	bl	80098f8 <__lshift>
 8009016:	4631      	mov	r1, r6
 8009018:	ee08 0a10 	vmov	s16, r0
 800901c:	f000 fcdc 	bl	80099d8 <__mcmp>
 8009020:	2800      	cmp	r0, #0
 8009022:	dc91      	bgt.n	8008f48 <_dtoa_r+0xaa8>
 8009024:	d102      	bne.n	800902c <_dtoa_r+0xb8c>
 8009026:	f01a 0f01 	tst.w	sl, #1
 800902a:	d18d      	bne.n	8008f48 <_dtoa_r+0xaa8>
 800902c:	462b      	mov	r3, r5
 800902e:	461d      	mov	r5, r3
 8009030:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009034:	2a30      	cmp	r2, #48	; 0x30
 8009036:	d0fa      	beq.n	800902e <_dtoa_r+0xb8e>
 8009038:	e6d7      	b.n	8008dea <_dtoa_r+0x94a>
 800903a:	9a01      	ldr	r2, [sp, #4]
 800903c:	429a      	cmp	r2, r3
 800903e:	d184      	bne.n	8008f4a <_dtoa_r+0xaaa>
 8009040:	9b00      	ldr	r3, [sp, #0]
 8009042:	3301      	adds	r3, #1
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	2331      	movs	r3, #49	; 0x31
 8009048:	7013      	strb	r3, [r2, #0]
 800904a:	e6ce      	b.n	8008dea <_dtoa_r+0x94a>
 800904c:	4b09      	ldr	r3, [pc, #36]	; (8009074 <_dtoa_r+0xbd4>)
 800904e:	f7ff ba95 	b.w	800857c <_dtoa_r+0xdc>
 8009052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009054:	2b00      	cmp	r3, #0
 8009056:	f47f aa6e 	bne.w	8008536 <_dtoa_r+0x96>
 800905a:	4b07      	ldr	r3, [pc, #28]	; (8009078 <_dtoa_r+0xbd8>)
 800905c:	f7ff ba8e 	b.w	800857c <_dtoa_r+0xdc>
 8009060:	9b02      	ldr	r3, [sp, #8]
 8009062:	2b00      	cmp	r3, #0
 8009064:	dcae      	bgt.n	8008fc4 <_dtoa_r+0xb24>
 8009066:	9b06      	ldr	r3, [sp, #24]
 8009068:	2b02      	cmp	r3, #2
 800906a:	f73f aea8 	bgt.w	8008dbe <_dtoa_r+0x91e>
 800906e:	e7a9      	b.n	8008fc4 <_dtoa_r+0xb24>
 8009070:	0800b4b3 	.word	0x0800b4b3
 8009074:	0800b410 	.word	0x0800b410
 8009078:	0800b434 	.word	0x0800b434

0800907c <__sflush_r>:
 800907c:	898a      	ldrh	r2, [r1, #12]
 800907e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009082:	4605      	mov	r5, r0
 8009084:	0710      	lsls	r0, r2, #28
 8009086:	460c      	mov	r4, r1
 8009088:	d458      	bmi.n	800913c <__sflush_r+0xc0>
 800908a:	684b      	ldr	r3, [r1, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	dc05      	bgt.n	800909c <__sflush_r+0x20>
 8009090:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009092:	2b00      	cmp	r3, #0
 8009094:	dc02      	bgt.n	800909c <__sflush_r+0x20>
 8009096:	2000      	movs	r0, #0
 8009098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800909c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800909e:	2e00      	cmp	r6, #0
 80090a0:	d0f9      	beq.n	8009096 <__sflush_r+0x1a>
 80090a2:	2300      	movs	r3, #0
 80090a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090a8:	682f      	ldr	r7, [r5, #0]
 80090aa:	602b      	str	r3, [r5, #0]
 80090ac:	d032      	beq.n	8009114 <__sflush_r+0x98>
 80090ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	075a      	lsls	r2, r3, #29
 80090b4:	d505      	bpl.n	80090c2 <__sflush_r+0x46>
 80090b6:	6863      	ldr	r3, [r4, #4]
 80090b8:	1ac0      	subs	r0, r0, r3
 80090ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090bc:	b10b      	cbz	r3, 80090c2 <__sflush_r+0x46>
 80090be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090c0:	1ac0      	subs	r0, r0, r3
 80090c2:	2300      	movs	r3, #0
 80090c4:	4602      	mov	r2, r0
 80090c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090c8:	6a21      	ldr	r1, [r4, #32]
 80090ca:	4628      	mov	r0, r5
 80090cc:	47b0      	blx	r6
 80090ce:	1c43      	adds	r3, r0, #1
 80090d0:	89a3      	ldrh	r3, [r4, #12]
 80090d2:	d106      	bne.n	80090e2 <__sflush_r+0x66>
 80090d4:	6829      	ldr	r1, [r5, #0]
 80090d6:	291d      	cmp	r1, #29
 80090d8:	d82c      	bhi.n	8009134 <__sflush_r+0xb8>
 80090da:	4a2a      	ldr	r2, [pc, #168]	; (8009184 <__sflush_r+0x108>)
 80090dc:	40ca      	lsrs	r2, r1
 80090de:	07d6      	lsls	r6, r2, #31
 80090e0:	d528      	bpl.n	8009134 <__sflush_r+0xb8>
 80090e2:	2200      	movs	r2, #0
 80090e4:	6062      	str	r2, [r4, #4]
 80090e6:	04d9      	lsls	r1, r3, #19
 80090e8:	6922      	ldr	r2, [r4, #16]
 80090ea:	6022      	str	r2, [r4, #0]
 80090ec:	d504      	bpl.n	80090f8 <__sflush_r+0x7c>
 80090ee:	1c42      	adds	r2, r0, #1
 80090f0:	d101      	bne.n	80090f6 <__sflush_r+0x7a>
 80090f2:	682b      	ldr	r3, [r5, #0]
 80090f4:	b903      	cbnz	r3, 80090f8 <__sflush_r+0x7c>
 80090f6:	6560      	str	r0, [r4, #84]	; 0x54
 80090f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090fa:	602f      	str	r7, [r5, #0]
 80090fc:	2900      	cmp	r1, #0
 80090fe:	d0ca      	beq.n	8009096 <__sflush_r+0x1a>
 8009100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009104:	4299      	cmp	r1, r3
 8009106:	d002      	beq.n	800910e <__sflush_r+0x92>
 8009108:	4628      	mov	r0, r5
 800910a:	f000 fd7d 	bl	8009c08 <_free_r>
 800910e:	2000      	movs	r0, #0
 8009110:	6360      	str	r0, [r4, #52]	; 0x34
 8009112:	e7c1      	b.n	8009098 <__sflush_r+0x1c>
 8009114:	6a21      	ldr	r1, [r4, #32]
 8009116:	2301      	movs	r3, #1
 8009118:	4628      	mov	r0, r5
 800911a:	47b0      	blx	r6
 800911c:	1c41      	adds	r1, r0, #1
 800911e:	d1c7      	bne.n	80090b0 <__sflush_r+0x34>
 8009120:	682b      	ldr	r3, [r5, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d0c4      	beq.n	80090b0 <__sflush_r+0x34>
 8009126:	2b1d      	cmp	r3, #29
 8009128:	d001      	beq.n	800912e <__sflush_r+0xb2>
 800912a:	2b16      	cmp	r3, #22
 800912c:	d101      	bne.n	8009132 <__sflush_r+0xb6>
 800912e:	602f      	str	r7, [r5, #0]
 8009130:	e7b1      	b.n	8009096 <__sflush_r+0x1a>
 8009132:	89a3      	ldrh	r3, [r4, #12]
 8009134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009138:	81a3      	strh	r3, [r4, #12]
 800913a:	e7ad      	b.n	8009098 <__sflush_r+0x1c>
 800913c:	690f      	ldr	r7, [r1, #16]
 800913e:	2f00      	cmp	r7, #0
 8009140:	d0a9      	beq.n	8009096 <__sflush_r+0x1a>
 8009142:	0793      	lsls	r3, r2, #30
 8009144:	680e      	ldr	r6, [r1, #0]
 8009146:	bf08      	it	eq
 8009148:	694b      	ldreq	r3, [r1, #20]
 800914a:	600f      	str	r7, [r1, #0]
 800914c:	bf18      	it	ne
 800914e:	2300      	movne	r3, #0
 8009150:	eba6 0807 	sub.w	r8, r6, r7
 8009154:	608b      	str	r3, [r1, #8]
 8009156:	f1b8 0f00 	cmp.w	r8, #0
 800915a:	dd9c      	ble.n	8009096 <__sflush_r+0x1a>
 800915c:	6a21      	ldr	r1, [r4, #32]
 800915e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009160:	4643      	mov	r3, r8
 8009162:	463a      	mov	r2, r7
 8009164:	4628      	mov	r0, r5
 8009166:	47b0      	blx	r6
 8009168:	2800      	cmp	r0, #0
 800916a:	dc06      	bgt.n	800917a <__sflush_r+0xfe>
 800916c:	89a3      	ldrh	r3, [r4, #12]
 800916e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009172:	81a3      	strh	r3, [r4, #12]
 8009174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009178:	e78e      	b.n	8009098 <__sflush_r+0x1c>
 800917a:	4407      	add	r7, r0
 800917c:	eba8 0800 	sub.w	r8, r8, r0
 8009180:	e7e9      	b.n	8009156 <__sflush_r+0xda>
 8009182:	bf00      	nop
 8009184:	20400001 	.word	0x20400001

08009188 <_fflush_r>:
 8009188:	b538      	push	{r3, r4, r5, lr}
 800918a:	690b      	ldr	r3, [r1, #16]
 800918c:	4605      	mov	r5, r0
 800918e:	460c      	mov	r4, r1
 8009190:	b913      	cbnz	r3, 8009198 <_fflush_r+0x10>
 8009192:	2500      	movs	r5, #0
 8009194:	4628      	mov	r0, r5
 8009196:	bd38      	pop	{r3, r4, r5, pc}
 8009198:	b118      	cbz	r0, 80091a2 <_fflush_r+0x1a>
 800919a:	6983      	ldr	r3, [r0, #24]
 800919c:	b90b      	cbnz	r3, 80091a2 <_fflush_r+0x1a>
 800919e:	f000 f887 	bl	80092b0 <__sinit>
 80091a2:	4b14      	ldr	r3, [pc, #80]	; (80091f4 <_fflush_r+0x6c>)
 80091a4:	429c      	cmp	r4, r3
 80091a6:	d11b      	bne.n	80091e0 <_fflush_r+0x58>
 80091a8:	686c      	ldr	r4, [r5, #4]
 80091aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d0ef      	beq.n	8009192 <_fflush_r+0xa>
 80091b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091b4:	07d0      	lsls	r0, r2, #31
 80091b6:	d404      	bmi.n	80091c2 <_fflush_r+0x3a>
 80091b8:	0599      	lsls	r1, r3, #22
 80091ba:	d402      	bmi.n	80091c2 <_fflush_r+0x3a>
 80091bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091be:	f000 f91a 	bl	80093f6 <__retarget_lock_acquire_recursive>
 80091c2:	4628      	mov	r0, r5
 80091c4:	4621      	mov	r1, r4
 80091c6:	f7ff ff59 	bl	800907c <__sflush_r>
 80091ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091cc:	07da      	lsls	r2, r3, #31
 80091ce:	4605      	mov	r5, r0
 80091d0:	d4e0      	bmi.n	8009194 <_fflush_r+0xc>
 80091d2:	89a3      	ldrh	r3, [r4, #12]
 80091d4:	059b      	lsls	r3, r3, #22
 80091d6:	d4dd      	bmi.n	8009194 <_fflush_r+0xc>
 80091d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091da:	f000 f90d 	bl	80093f8 <__retarget_lock_release_recursive>
 80091de:	e7d9      	b.n	8009194 <_fflush_r+0xc>
 80091e0:	4b05      	ldr	r3, [pc, #20]	; (80091f8 <_fflush_r+0x70>)
 80091e2:	429c      	cmp	r4, r3
 80091e4:	d101      	bne.n	80091ea <_fflush_r+0x62>
 80091e6:	68ac      	ldr	r4, [r5, #8]
 80091e8:	e7df      	b.n	80091aa <_fflush_r+0x22>
 80091ea:	4b04      	ldr	r3, [pc, #16]	; (80091fc <_fflush_r+0x74>)
 80091ec:	429c      	cmp	r4, r3
 80091ee:	bf08      	it	eq
 80091f0:	68ec      	ldreq	r4, [r5, #12]
 80091f2:	e7da      	b.n	80091aa <_fflush_r+0x22>
 80091f4:	0800b4e4 	.word	0x0800b4e4
 80091f8:	0800b504 	.word	0x0800b504
 80091fc:	0800b4c4 	.word	0x0800b4c4

08009200 <std>:
 8009200:	2300      	movs	r3, #0
 8009202:	b510      	push	{r4, lr}
 8009204:	4604      	mov	r4, r0
 8009206:	e9c0 3300 	strd	r3, r3, [r0]
 800920a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800920e:	6083      	str	r3, [r0, #8]
 8009210:	8181      	strh	r1, [r0, #12]
 8009212:	6643      	str	r3, [r0, #100]	; 0x64
 8009214:	81c2      	strh	r2, [r0, #14]
 8009216:	6183      	str	r3, [r0, #24]
 8009218:	4619      	mov	r1, r3
 800921a:	2208      	movs	r2, #8
 800921c:	305c      	adds	r0, #92	; 0x5c
 800921e:	f7fe faf3 	bl	8007808 <memset>
 8009222:	4b05      	ldr	r3, [pc, #20]	; (8009238 <std+0x38>)
 8009224:	6263      	str	r3, [r4, #36]	; 0x24
 8009226:	4b05      	ldr	r3, [pc, #20]	; (800923c <std+0x3c>)
 8009228:	62a3      	str	r3, [r4, #40]	; 0x28
 800922a:	4b05      	ldr	r3, [pc, #20]	; (8009240 <std+0x40>)
 800922c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800922e:	4b05      	ldr	r3, [pc, #20]	; (8009244 <std+0x44>)
 8009230:	6224      	str	r4, [r4, #32]
 8009232:	6323      	str	r3, [r4, #48]	; 0x30
 8009234:	bd10      	pop	{r4, pc}
 8009236:	bf00      	nop
 8009238:	0800a09d 	.word	0x0800a09d
 800923c:	0800a0bf 	.word	0x0800a0bf
 8009240:	0800a0f7 	.word	0x0800a0f7
 8009244:	0800a11b 	.word	0x0800a11b

08009248 <_cleanup_r>:
 8009248:	4901      	ldr	r1, [pc, #4]	; (8009250 <_cleanup_r+0x8>)
 800924a:	f000 b8af 	b.w	80093ac <_fwalk_reent>
 800924e:	bf00      	nop
 8009250:	08009189 	.word	0x08009189

08009254 <__sfmoreglue>:
 8009254:	b570      	push	{r4, r5, r6, lr}
 8009256:	2268      	movs	r2, #104	; 0x68
 8009258:	1e4d      	subs	r5, r1, #1
 800925a:	4355      	muls	r5, r2
 800925c:	460e      	mov	r6, r1
 800925e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009262:	f000 fd3d 	bl	8009ce0 <_malloc_r>
 8009266:	4604      	mov	r4, r0
 8009268:	b140      	cbz	r0, 800927c <__sfmoreglue+0x28>
 800926a:	2100      	movs	r1, #0
 800926c:	e9c0 1600 	strd	r1, r6, [r0]
 8009270:	300c      	adds	r0, #12
 8009272:	60a0      	str	r0, [r4, #8]
 8009274:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009278:	f7fe fac6 	bl	8007808 <memset>
 800927c:	4620      	mov	r0, r4
 800927e:	bd70      	pop	{r4, r5, r6, pc}

08009280 <__sfp_lock_acquire>:
 8009280:	4801      	ldr	r0, [pc, #4]	; (8009288 <__sfp_lock_acquire+0x8>)
 8009282:	f000 b8b8 	b.w	80093f6 <__retarget_lock_acquire_recursive>
 8009286:	bf00      	nop
 8009288:	20000265 	.word	0x20000265

0800928c <__sfp_lock_release>:
 800928c:	4801      	ldr	r0, [pc, #4]	; (8009294 <__sfp_lock_release+0x8>)
 800928e:	f000 b8b3 	b.w	80093f8 <__retarget_lock_release_recursive>
 8009292:	bf00      	nop
 8009294:	20000265 	.word	0x20000265

08009298 <__sinit_lock_acquire>:
 8009298:	4801      	ldr	r0, [pc, #4]	; (80092a0 <__sinit_lock_acquire+0x8>)
 800929a:	f000 b8ac 	b.w	80093f6 <__retarget_lock_acquire_recursive>
 800929e:	bf00      	nop
 80092a0:	20000266 	.word	0x20000266

080092a4 <__sinit_lock_release>:
 80092a4:	4801      	ldr	r0, [pc, #4]	; (80092ac <__sinit_lock_release+0x8>)
 80092a6:	f000 b8a7 	b.w	80093f8 <__retarget_lock_release_recursive>
 80092aa:	bf00      	nop
 80092ac:	20000266 	.word	0x20000266

080092b0 <__sinit>:
 80092b0:	b510      	push	{r4, lr}
 80092b2:	4604      	mov	r4, r0
 80092b4:	f7ff fff0 	bl	8009298 <__sinit_lock_acquire>
 80092b8:	69a3      	ldr	r3, [r4, #24]
 80092ba:	b11b      	cbz	r3, 80092c4 <__sinit+0x14>
 80092bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092c0:	f7ff bff0 	b.w	80092a4 <__sinit_lock_release>
 80092c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80092c8:	6523      	str	r3, [r4, #80]	; 0x50
 80092ca:	4b13      	ldr	r3, [pc, #76]	; (8009318 <__sinit+0x68>)
 80092cc:	4a13      	ldr	r2, [pc, #76]	; (800931c <__sinit+0x6c>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80092d2:	42a3      	cmp	r3, r4
 80092d4:	bf04      	itt	eq
 80092d6:	2301      	moveq	r3, #1
 80092d8:	61a3      	streq	r3, [r4, #24]
 80092da:	4620      	mov	r0, r4
 80092dc:	f000 f820 	bl	8009320 <__sfp>
 80092e0:	6060      	str	r0, [r4, #4]
 80092e2:	4620      	mov	r0, r4
 80092e4:	f000 f81c 	bl	8009320 <__sfp>
 80092e8:	60a0      	str	r0, [r4, #8]
 80092ea:	4620      	mov	r0, r4
 80092ec:	f000 f818 	bl	8009320 <__sfp>
 80092f0:	2200      	movs	r2, #0
 80092f2:	60e0      	str	r0, [r4, #12]
 80092f4:	2104      	movs	r1, #4
 80092f6:	6860      	ldr	r0, [r4, #4]
 80092f8:	f7ff ff82 	bl	8009200 <std>
 80092fc:	68a0      	ldr	r0, [r4, #8]
 80092fe:	2201      	movs	r2, #1
 8009300:	2109      	movs	r1, #9
 8009302:	f7ff ff7d 	bl	8009200 <std>
 8009306:	68e0      	ldr	r0, [r4, #12]
 8009308:	2202      	movs	r2, #2
 800930a:	2112      	movs	r1, #18
 800930c:	f7ff ff78 	bl	8009200 <std>
 8009310:	2301      	movs	r3, #1
 8009312:	61a3      	str	r3, [r4, #24]
 8009314:	e7d2      	b.n	80092bc <__sinit+0xc>
 8009316:	bf00      	nop
 8009318:	0800b3fc 	.word	0x0800b3fc
 800931c:	08009249 	.word	0x08009249

08009320 <__sfp>:
 8009320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009322:	4607      	mov	r7, r0
 8009324:	f7ff ffac 	bl	8009280 <__sfp_lock_acquire>
 8009328:	4b1e      	ldr	r3, [pc, #120]	; (80093a4 <__sfp+0x84>)
 800932a:	681e      	ldr	r6, [r3, #0]
 800932c:	69b3      	ldr	r3, [r6, #24]
 800932e:	b913      	cbnz	r3, 8009336 <__sfp+0x16>
 8009330:	4630      	mov	r0, r6
 8009332:	f7ff ffbd 	bl	80092b0 <__sinit>
 8009336:	3648      	adds	r6, #72	; 0x48
 8009338:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800933c:	3b01      	subs	r3, #1
 800933e:	d503      	bpl.n	8009348 <__sfp+0x28>
 8009340:	6833      	ldr	r3, [r6, #0]
 8009342:	b30b      	cbz	r3, 8009388 <__sfp+0x68>
 8009344:	6836      	ldr	r6, [r6, #0]
 8009346:	e7f7      	b.n	8009338 <__sfp+0x18>
 8009348:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800934c:	b9d5      	cbnz	r5, 8009384 <__sfp+0x64>
 800934e:	4b16      	ldr	r3, [pc, #88]	; (80093a8 <__sfp+0x88>)
 8009350:	60e3      	str	r3, [r4, #12]
 8009352:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009356:	6665      	str	r5, [r4, #100]	; 0x64
 8009358:	f000 f84c 	bl	80093f4 <__retarget_lock_init_recursive>
 800935c:	f7ff ff96 	bl	800928c <__sfp_lock_release>
 8009360:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009364:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009368:	6025      	str	r5, [r4, #0]
 800936a:	61a5      	str	r5, [r4, #24]
 800936c:	2208      	movs	r2, #8
 800936e:	4629      	mov	r1, r5
 8009370:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009374:	f7fe fa48 	bl	8007808 <memset>
 8009378:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800937c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009380:	4620      	mov	r0, r4
 8009382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009384:	3468      	adds	r4, #104	; 0x68
 8009386:	e7d9      	b.n	800933c <__sfp+0x1c>
 8009388:	2104      	movs	r1, #4
 800938a:	4638      	mov	r0, r7
 800938c:	f7ff ff62 	bl	8009254 <__sfmoreglue>
 8009390:	4604      	mov	r4, r0
 8009392:	6030      	str	r0, [r6, #0]
 8009394:	2800      	cmp	r0, #0
 8009396:	d1d5      	bne.n	8009344 <__sfp+0x24>
 8009398:	f7ff ff78 	bl	800928c <__sfp_lock_release>
 800939c:	230c      	movs	r3, #12
 800939e:	603b      	str	r3, [r7, #0]
 80093a0:	e7ee      	b.n	8009380 <__sfp+0x60>
 80093a2:	bf00      	nop
 80093a4:	0800b3fc 	.word	0x0800b3fc
 80093a8:	ffff0001 	.word	0xffff0001

080093ac <_fwalk_reent>:
 80093ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093b0:	4606      	mov	r6, r0
 80093b2:	4688      	mov	r8, r1
 80093b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80093b8:	2700      	movs	r7, #0
 80093ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093be:	f1b9 0901 	subs.w	r9, r9, #1
 80093c2:	d505      	bpl.n	80093d0 <_fwalk_reent+0x24>
 80093c4:	6824      	ldr	r4, [r4, #0]
 80093c6:	2c00      	cmp	r4, #0
 80093c8:	d1f7      	bne.n	80093ba <_fwalk_reent+0xe>
 80093ca:	4638      	mov	r0, r7
 80093cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093d0:	89ab      	ldrh	r3, [r5, #12]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d907      	bls.n	80093e6 <_fwalk_reent+0x3a>
 80093d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093da:	3301      	adds	r3, #1
 80093dc:	d003      	beq.n	80093e6 <_fwalk_reent+0x3a>
 80093de:	4629      	mov	r1, r5
 80093e0:	4630      	mov	r0, r6
 80093e2:	47c0      	blx	r8
 80093e4:	4307      	orrs	r7, r0
 80093e6:	3568      	adds	r5, #104	; 0x68
 80093e8:	e7e9      	b.n	80093be <_fwalk_reent+0x12>
	...

080093ec <_localeconv_r>:
 80093ec:	4800      	ldr	r0, [pc, #0]	; (80093f0 <_localeconv_r+0x4>)
 80093ee:	4770      	bx	lr
 80093f0:	20000174 	.word	0x20000174

080093f4 <__retarget_lock_init_recursive>:
 80093f4:	4770      	bx	lr

080093f6 <__retarget_lock_acquire_recursive>:
 80093f6:	4770      	bx	lr

080093f8 <__retarget_lock_release_recursive>:
 80093f8:	4770      	bx	lr

080093fa <__swhatbuf_r>:
 80093fa:	b570      	push	{r4, r5, r6, lr}
 80093fc:	460e      	mov	r6, r1
 80093fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009402:	2900      	cmp	r1, #0
 8009404:	b096      	sub	sp, #88	; 0x58
 8009406:	4614      	mov	r4, r2
 8009408:	461d      	mov	r5, r3
 800940a:	da08      	bge.n	800941e <__swhatbuf_r+0x24>
 800940c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	602a      	str	r2, [r5, #0]
 8009414:	061a      	lsls	r2, r3, #24
 8009416:	d410      	bmi.n	800943a <__swhatbuf_r+0x40>
 8009418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800941c:	e00e      	b.n	800943c <__swhatbuf_r+0x42>
 800941e:	466a      	mov	r2, sp
 8009420:	f000 fed2 	bl	800a1c8 <_fstat_r>
 8009424:	2800      	cmp	r0, #0
 8009426:	dbf1      	blt.n	800940c <__swhatbuf_r+0x12>
 8009428:	9a01      	ldr	r2, [sp, #4]
 800942a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800942e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009432:	425a      	negs	r2, r3
 8009434:	415a      	adcs	r2, r3
 8009436:	602a      	str	r2, [r5, #0]
 8009438:	e7ee      	b.n	8009418 <__swhatbuf_r+0x1e>
 800943a:	2340      	movs	r3, #64	; 0x40
 800943c:	2000      	movs	r0, #0
 800943e:	6023      	str	r3, [r4, #0]
 8009440:	b016      	add	sp, #88	; 0x58
 8009442:	bd70      	pop	{r4, r5, r6, pc}

08009444 <__smakebuf_r>:
 8009444:	898b      	ldrh	r3, [r1, #12]
 8009446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009448:	079d      	lsls	r5, r3, #30
 800944a:	4606      	mov	r6, r0
 800944c:	460c      	mov	r4, r1
 800944e:	d507      	bpl.n	8009460 <__smakebuf_r+0x1c>
 8009450:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	6123      	str	r3, [r4, #16]
 8009458:	2301      	movs	r3, #1
 800945a:	6163      	str	r3, [r4, #20]
 800945c:	b002      	add	sp, #8
 800945e:	bd70      	pop	{r4, r5, r6, pc}
 8009460:	ab01      	add	r3, sp, #4
 8009462:	466a      	mov	r2, sp
 8009464:	f7ff ffc9 	bl	80093fa <__swhatbuf_r>
 8009468:	9900      	ldr	r1, [sp, #0]
 800946a:	4605      	mov	r5, r0
 800946c:	4630      	mov	r0, r6
 800946e:	f000 fc37 	bl	8009ce0 <_malloc_r>
 8009472:	b948      	cbnz	r0, 8009488 <__smakebuf_r+0x44>
 8009474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009478:	059a      	lsls	r2, r3, #22
 800947a:	d4ef      	bmi.n	800945c <__smakebuf_r+0x18>
 800947c:	f023 0303 	bic.w	r3, r3, #3
 8009480:	f043 0302 	orr.w	r3, r3, #2
 8009484:	81a3      	strh	r3, [r4, #12]
 8009486:	e7e3      	b.n	8009450 <__smakebuf_r+0xc>
 8009488:	4b0d      	ldr	r3, [pc, #52]	; (80094c0 <__smakebuf_r+0x7c>)
 800948a:	62b3      	str	r3, [r6, #40]	; 0x28
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	6020      	str	r0, [r4, #0]
 8009490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009494:	81a3      	strh	r3, [r4, #12]
 8009496:	9b00      	ldr	r3, [sp, #0]
 8009498:	6163      	str	r3, [r4, #20]
 800949a:	9b01      	ldr	r3, [sp, #4]
 800949c:	6120      	str	r0, [r4, #16]
 800949e:	b15b      	cbz	r3, 80094b8 <__smakebuf_r+0x74>
 80094a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094a4:	4630      	mov	r0, r6
 80094a6:	f000 fea1 	bl	800a1ec <_isatty_r>
 80094aa:	b128      	cbz	r0, 80094b8 <__smakebuf_r+0x74>
 80094ac:	89a3      	ldrh	r3, [r4, #12]
 80094ae:	f023 0303 	bic.w	r3, r3, #3
 80094b2:	f043 0301 	orr.w	r3, r3, #1
 80094b6:	81a3      	strh	r3, [r4, #12]
 80094b8:	89a0      	ldrh	r0, [r4, #12]
 80094ba:	4305      	orrs	r5, r0
 80094bc:	81a5      	strh	r5, [r4, #12]
 80094be:	e7cd      	b.n	800945c <__smakebuf_r+0x18>
 80094c0:	08009249 	.word	0x08009249

080094c4 <malloc>:
 80094c4:	4b02      	ldr	r3, [pc, #8]	; (80094d0 <malloc+0xc>)
 80094c6:	4601      	mov	r1, r0
 80094c8:	6818      	ldr	r0, [r3, #0]
 80094ca:	f000 bc09 	b.w	8009ce0 <_malloc_r>
 80094ce:	bf00      	nop
 80094d0:	20000020 	.word	0x20000020

080094d4 <_Balloc>:
 80094d4:	b570      	push	{r4, r5, r6, lr}
 80094d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094d8:	4604      	mov	r4, r0
 80094da:	460d      	mov	r5, r1
 80094dc:	b976      	cbnz	r6, 80094fc <_Balloc+0x28>
 80094de:	2010      	movs	r0, #16
 80094e0:	f7ff fff0 	bl	80094c4 <malloc>
 80094e4:	4602      	mov	r2, r0
 80094e6:	6260      	str	r0, [r4, #36]	; 0x24
 80094e8:	b920      	cbnz	r0, 80094f4 <_Balloc+0x20>
 80094ea:	4b18      	ldr	r3, [pc, #96]	; (800954c <_Balloc+0x78>)
 80094ec:	4818      	ldr	r0, [pc, #96]	; (8009550 <_Balloc+0x7c>)
 80094ee:	2166      	movs	r1, #102	; 0x66
 80094f0:	f000 fe2a 	bl	800a148 <__assert_func>
 80094f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094f8:	6006      	str	r6, [r0, #0]
 80094fa:	60c6      	str	r6, [r0, #12]
 80094fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80094fe:	68f3      	ldr	r3, [r6, #12]
 8009500:	b183      	cbz	r3, 8009524 <_Balloc+0x50>
 8009502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800950a:	b9b8      	cbnz	r0, 800953c <_Balloc+0x68>
 800950c:	2101      	movs	r1, #1
 800950e:	fa01 f605 	lsl.w	r6, r1, r5
 8009512:	1d72      	adds	r2, r6, #5
 8009514:	0092      	lsls	r2, r2, #2
 8009516:	4620      	mov	r0, r4
 8009518:	f000 fb60 	bl	8009bdc <_calloc_r>
 800951c:	b160      	cbz	r0, 8009538 <_Balloc+0x64>
 800951e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009522:	e00e      	b.n	8009542 <_Balloc+0x6e>
 8009524:	2221      	movs	r2, #33	; 0x21
 8009526:	2104      	movs	r1, #4
 8009528:	4620      	mov	r0, r4
 800952a:	f000 fb57 	bl	8009bdc <_calloc_r>
 800952e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009530:	60f0      	str	r0, [r6, #12]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1e4      	bne.n	8009502 <_Balloc+0x2e>
 8009538:	2000      	movs	r0, #0
 800953a:	bd70      	pop	{r4, r5, r6, pc}
 800953c:	6802      	ldr	r2, [r0, #0]
 800953e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009542:	2300      	movs	r3, #0
 8009544:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009548:	e7f7      	b.n	800953a <_Balloc+0x66>
 800954a:	bf00      	nop
 800954c:	0800b441 	.word	0x0800b441
 8009550:	0800b524 	.word	0x0800b524

08009554 <_Bfree>:
 8009554:	b570      	push	{r4, r5, r6, lr}
 8009556:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009558:	4605      	mov	r5, r0
 800955a:	460c      	mov	r4, r1
 800955c:	b976      	cbnz	r6, 800957c <_Bfree+0x28>
 800955e:	2010      	movs	r0, #16
 8009560:	f7ff ffb0 	bl	80094c4 <malloc>
 8009564:	4602      	mov	r2, r0
 8009566:	6268      	str	r0, [r5, #36]	; 0x24
 8009568:	b920      	cbnz	r0, 8009574 <_Bfree+0x20>
 800956a:	4b09      	ldr	r3, [pc, #36]	; (8009590 <_Bfree+0x3c>)
 800956c:	4809      	ldr	r0, [pc, #36]	; (8009594 <_Bfree+0x40>)
 800956e:	218a      	movs	r1, #138	; 0x8a
 8009570:	f000 fdea 	bl	800a148 <__assert_func>
 8009574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009578:	6006      	str	r6, [r0, #0]
 800957a:	60c6      	str	r6, [r0, #12]
 800957c:	b13c      	cbz	r4, 800958e <_Bfree+0x3a>
 800957e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009580:	6862      	ldr	r2, [r4, #4]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009588:	6021      	str	r1, [r4, #0]
 800958a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800958e:	bd70      	pop	{r4, r5, r6, pc}
 8009590:	0800b441 	.word	0x0800b441
 8009594:	0800b524 	.word	0x0800b524

08009598 <__multadd>:
 8009598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800959c:	690d      	ldr	r5, [r1, #16]
 800959e:	4607      	mov	r7, r0
 80095a0:	460c      	mov	r4, r1
 80095a2:	461e      	mov	r6, r3
 80095a4:	f101 0c14 	add.w	ip, r1, #20
 80095a8:	2000      	movs	r0, #0
 80095aa:	f8dc 3000 	ldr.w	r3, [ip]
 80095ae:	b299      	uxth	r1, r3
 80095b0:	fb02 6101 	mla	r1, r2, r1, r6
 80095b4:	0c1e      	lsrs	r6, r3, #16
 80095b6:	0c0b      	lsrs	r3, r1, #16
 80095b8:	fb02 3306 	mla	r3, r2, r6, r3
 80095bc:	b289      	uxth	r1, r1
 80095be:	3001      	adds	r0, #1
 80095c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80095c4:	4285      	cmp	r5, r0
 80095c6:	f84c 1b04 	str.w	r1, [ip], #4
 80095ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80095ce:	dcec      	bgt.n	80095aa <__multadd+0x12>
 80095d0:	b30e      	cbz	r6, 8009616 <__multadd+0x7e>
 80095d2:	68a3      	ldr	r3, [r4, #8]
 80095d4:	42ab      	cmp	r3, r5
 80095d6:	dc19      	bgt.n	800960c <__multadd+0x74>
 80095d8:	6861      	ldr	r1, [r4, #4]
 80095da:	4638      	mov	r0, r7
 80095dc:	3101      	adds	r1, #1
 80095de:	f7ff ff79 	bl	80094d4 <_Balloc>
 80095e2:	4680      	mov	r8, r0
 80095e4:	b928      	cbnz	r0, 80095f2 <__multadd+0x5a>
 80095e6:	4602      	mov	r2, r0
 80095e8:	4b0c      	ldr	r3, [pc, #48]	; (800961c <__multadd+0x84>)
 80095ea:	480d      	ldr	r0, [pc, #52]	; (8009620 <__multadd+0x88>)
 80095ec:	21b5      	movs	r1, #181	; 0xb5
 80095ee:	f000 fdab 	bl	800a148 <__assert_func>
 80095f2:	6922      	ldr	r2, [r4, #16]
 80095f4:	3202      	adds	r2, #2
 80095f6:	f104 010c 	add.w	r1, r4, #12
 80095fa:	0092      	lsls	r2, r2, #2
 80095fc:	300c      	adds	r0, #12
 80095fe:	f7fe f8f5 	bl	80077ec <memcpy>
 8009602:	4621      	mov	r1, r4
 8009604:	4638      	mov	r0, r7
 8009606:	f7ff ffa5 	bl	8009554 <_Bfree>
 800960a:	4644      	mov	r4, r8
 800960c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009610:	3501      	adds	r5, #1
 8009612:	615e      	str	r6, [r3, #20]
 8009614:	6125      	str	r5, [r4, #16]
 8009616:	4620      	mov	r0, r4
 8009618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800961c:	0800b4b3 	.word	0x0800b4b3
 8009620:	0800b524 	.word	0x0800b524

08009624 <__hi0bits>:
 8009624:	0c03      	lsrs	r3, r0, #16
 8009626:	041b      	lsls	r3, r3, #16
 8009628:	b9d3      	cbnz	r3, 8009660 <__hi0bits+0x3c>
 800962a:	0400      	lsls	r0, r0, #16
 800962c:	2310      	movs	r3, #16
 800962e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009632:	bf04      	itt	eq
 8009634:	0200      	lsleq	r0, r0, #8
 8009636:	3308      	addeq	r3, #8
 8009638:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800963c:	bf04      	itt	eq
 800963e:	0100      	lsleq	r0, r0, #4
 8009640:	3304      	addeq	r3, #4
 8009642:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009646:	bf04      	itt	eq
 8009648:	0080      	lsleq	r0, r0, #2
 800964a:	3302      	addeq	r3, #2
 800964c:	2800      	cmp	r0, #0
 800964e:	db05      	blt.n	800965c <__hi0bits+0x38>
 8009650:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009654:	f103 0301 	add.w	r3, r3, #1
 8009658:	bf08      	it	eq
 800965a:	2320      	moveq	r3, #32
 800965c:	4618      	mov	r0, r3
 800965e:	4770      	bx	lr
 8009660:	2300      	movs	r3, #0
 8009662:	e7e4      	b.n	800962e <__hi0bits+0xa>

08009664 <__lo0bits>:
 8009664:	6803      	ldr	r3, [r0, #0]
 8009666:	f013 0207 	ands.w	r2, r3, #7
 800966a:	4601      	mov	r1, r0
 800966c:	d00b      	beq.n	8009686 <__lo0bits+0x22>
 800966e:	07da      	lsls	r2, r3, #31
 8009670:	d423      	bmi.n	80096ba <__lo0bits+0x56>
 8009672:	0798      	lsls	r0, r3, #30
 8009674:	bf49      	itett	mi
 8009676:	085b      	lsrmi	r3, r3, #1
 8009678:	089b      	lsrpl	r3, r3, #2
 800967a:	2001      	movmi	r0, #1
 800967c:	600b      	strmi	r3, [r1, #0]
 800967e:	bf5c      	itt	pl
 8009680:	600b      	strpl	r3, [r1, #0]
 8009682:	2002      	movpl	r0, #2
 8009684:	4770      	bx	lr
 8009686:	b298      	uxth	r0, r3
 8009688:	b9a8      	cbnz	r0, 80096b6 <__lo0bits+0x52>
 800968a:	0c1b      	lsrs	r3, r3, #16
 800968c:	2010      	movs	r0, #16
 800968e:	b2da      	uxtb	r2, r3
 8009690:	b90a      	cbnz	r2, 8009696 <__lo0bits+0x32>
 8009692:	3008      	adds	r0, #8
 8009694:	0a1b      	lsrs	r3, r3, #8
 8009696:	071a      	lsls	r2, r3, #28
 8009698:	bf04      	itt	eq
 800969a:	091b      	lsreq	r3, r3, #4
 800969c:	3004      	addeq	r0, #4
 800969e:	079a      	lsls	r2, r3, #30
 80096a0:	bf04      	itt	eq
 80096a2:	089b      	lsreq	r3, r3, #2
 80096a4:	3002      	addeq	r0, #2
 80096a6:	07da      	lsls	r2, r3, #31
 80096a8:	d403      	bmi.n	80096b2 <__lo0bits+0x4e>
 80096aa:	085b      	lsrs	r3, r3, #1
 80096ac:	f100 0001 	add.w	r0, r0, #1
 80096b0:	d005      	beq.n	80096be <__lo0bits+0x5a>
 80096b2:	600b      	str	r3, [r1, #0]
 80096b4:	4770      	bx	lr
 80096b6:	4610      	mov	r0, r2
 80096b8:	e7e9      	b.n	800968e <__lo0bits+0x2a>
 80096ba:	2000      	movs	r0, #0
 80096bc:	4770      	bx	lr
 80096be:	2020      	movs	r0, #32
 80096c0:	4770      	bx	lr
	...

080096c4 <__i2b>:
 80096c4:	b510      	push	{r4, lr}
 80096c6:	460c      	mov	r4, r1
 80096c8:	2101      	movs	r1, #1
 80096ca:	f7ff ff03 	bl	80094d4 <_Balloc>
 80096ce:	4602      	mov	r2, r0
 80096d0:	b928      	cbnz	r0, 80096de <__i2b+0x1a>
 80096d2:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <__i2b+0x24>)
 80096d4:	4805      	ldr	r0, [pc, #20]	; (80096ec <__i2b+0x28>)
 80096d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80096da:	f000 fd35 	bl	800a148 <__assert_func>
 80096de:	2301      	movs	r3, #1
 80096e0:	6144      	str	r4, [r0, #20]
 80096e2:	6103      	str	r3, [r0, #16]
 80096e4:	bd10      	pop	{r4, pc}
 80096e6:	bf00      	nop
 80096e8:	0800b4b3 	.word	0x0800b4b3
 80096ec:	0800b524 	.word	0x0800b524

080096f0 <__multiply>:
 80096f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f4:	4691      	mov	r9, r2
 80096f6:	690a      	ldr	r2, [r1, #16]
 80096f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	bfb8      	it	lt
 8009700:	460b      	movlt	r3, r1
 8009702:	460c      	mov	r4, r1
 8009704:	bfbc      	itt	lt
 8009706:	464c      	movlt	r4, r9
 8009708:	4699      	movlt	r9, r3
 800970a:	6927      	ldr	r7, [r4, #16]
 800970c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009710:	68a3      	ldr	r3, [r4, #8]
 8009712:	6861      	ldr	r1, [r4, #4]
 8009714:	eb07 060a 	add.w	r6, r7, sl
 8009718:	42b3      	cmp	r3, r6
 800971a:	b085      	sub	sp, #20
 800971c:	bfb8      	it	lt
 800971e:	3101      	addlt	r1, #1
 8009720:	f7ff fed8 	bl	80094d4 <_Balloc>
 8009724:	b930      	cbnz	r0, 8009734 <__multiply+0x44>
 8009726:	4602      	mov	r2, r0
 8009728:	4b44      	ldr	r3, [pc, #272]	; (800983c <__multiply+0x14c>)
 800972a:	4845      	ldr	r0, [pc, #276]	; (8009840 <__multiply+0x150>)
 800972c:	f240 115d 	movw	r1, #349	; 0x15d
 8009730:	f000 fd0a 	bl	800a148 <__assert_func>
 8009734:	f100 0514 	add.w	r5, r0, #20
 8009738:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800973c:	462b      	mov	r3, r5
 800973e:	2200      	movs	r2, #0
 8009740:	4543      	cmp	r3, r8
 8009742:	d321      	bcc.n	8009788 <__multiply+0x98>
 8009744:	f104 0314 	add.w	r3, r4, #20
 8009748:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800974c:	f109 0314 	add.w	r3, r9, #20
 8009750:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009754:	9202      	str	r2, [sp, #8]
 8009756:	1b3a      	subs	r2, r7, r4
 8009758:	3a15      	subs	r2, #21
 800975a:	f022 0203 	bic.w	r2, r2, #3
 800975e:	3204      	adds	r2, #4
 8009760:	f104 0115 	add.w	r1, r4, #21
 8009764:	428f      	cmp	r7, r1
 8009766:	bf38      	it	cc
 8009768:	2204      	movcc	r2, #4
 800976a:	9201      	str	r2, [sp, #4]
 800976c:	9a02      	ldr	r2, [sp, #8]
 800976e:	9303      	str	r3, [sp, #12]
 8009770:	429a      	cmp	r2, r3
 8009772:	d80c      	bhi.n	800978e <__multiply+0x9e>
 8009774:	2e00      	cmp	r6, #0
 8009776:	dd03      	ble.n	8009780 <__multiply+0x90>
 8009778:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800977c:	2b00      	cmp	r3, #0
 800977e:	d05a      	beq.n	8009836 <__multiply+0x146>
 8009780:	6106      	str	r6, [r0, #16]
 8009782:	b005      	add	sp, #20
 8009784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009788:	f843 2b04 	str.w	r2, [r3], #4
 800978c:	e7d8      	b.n	8009740 <__multiply+0x50>
 800978e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009792:	f1ba 0f00 	cmp.w	sl, #0
 8009796:	d024      	beq.n	80097e2 <__multiply+0xf2>
 8009798:	f104 0e14 	add.w	lr, r4, #20
 800979c:	46a9      	mov	r9, r5
 800979e:	f04f 0c00 	mov.w	ip, #0
 80097a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80097a6:	f8d9 1000 	ldr.w	r1, [r9]
 80097aa:	fa1f fb82 	uxth.w	fp, r2
 80097ae:	b289      	uxth	r1, r1
 80097b0:	fb0a 110b 	mla	r1, sl, fp, r1
 80097b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80097b8:	f8d9 2000 	ldr.w	r2, [r9]
 80097bc:	4461      	add	r1, ip
 80097be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097c2:	fb0a c20b 	mla	r2, sl, fp, ip
 80097c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80097ca:	b289      	uxth	r1, r1
 80097cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80097d0:	4577      	cmp	r7, lr
 80097d2:	f849 1b04 	str.w	r1, [r9], #4
 80097d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80097da:	d8e2      	bhi.n	80097a2 <__multiply+0xb2>
 80097dc:	9a01      	ldr	r2, [sp, #4]
 80097de:	f845 c002 	str.w	ip, [r5, r2]
 80097e2:	9a03      	ldr	r2, [sp, #12]
 80097e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80097e8:	3304      	adds	r3, #4
 80097ea:	f1b9 0f00 	cmp.w	r9, #0
 80097ee:	d020      	beq.n	8009832 <__multiply+0x142>
 80097f0:	6829      	ldr	r1, [r5, #0]
 80097f2:	f104 0c14 	add.w	ip, r4, #20
 80097f6:	46ae      	mov	lr, r5
 80097f8:	f04f 0a00 	mov.w	sl, #0
 80097fc:	f8bc b000 	ldrh.w	fp, [ip]
 8009800:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009804:	fb09 220b 	mla	r2, r9, fp, r2
 8009808:	4492      	add	sl, r2
 800980a:	b289      	uxth	r1, r1
 800980c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009810:	f84e 1b04 	str.w	r1, [lr], #4
 8009814:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009818:	f8be 1000 	ldrh.w	r1, [lr]
 800981c:	0c12      	lsrs	r2, r2, #16
 800981e:	fb09 1102 	mla	r1, r9, r2, r1
 8009822:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009826:	4567      	cmp	r7, ip
 8009828:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800982c:	d8e6      	bhi.n	80097fc <__multiply+0x10c>
 800982e:	9a01      	ldr	r2, [sp, #4]
 8009830:	50a9      	str	r1, [r5, r2]
 8009832:	3504      	adds	r5, #4
 8009834:	e79a      	b.n	800976c <__multiply+0x7c>
 8009836:	3e01      	subs	r6, #1
 8009838:	e79c      	b.n	8009774 <__multiply+0x84>
 800983a:	bf00      	nop
 800983c:	0800b4b3 	.word	0x0800b4b3
 8009840:	0800b524 	.word	0x0800b524

08009844 <__pow5mult>:
 8009844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009848:	4615      	mov	r5, r2
 800984a:	f012 0203 	ands.w	r2, r2, #3
 800984e:	4606      	mov	r6, r0
 8009850:	460f      	mov	r7, r1
 8009852:	d007      	beq.n	8009864 <__pow5mult+0x20>
 8009854:	4c25      	ldr	r4, [pc, #148]	; (80098ec <__pow5mult+0xa8>)
 8009856:	3a01      	subs	r2, #1
 8009858:	2300      	movs	r3, #0
 800985a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800985e:	f7ff fe9b 	bl	8009598 <__multadd>
 8009862:	4607      	mov	r7, r0
 8009864:	10ad      	asrs	r5, r5, #2
 8009866:	d03d      	beq.n	80098e4 <__pow5mult+0xa0>
 8009868:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800986a:	b97c      	cbnz	r4, 800988c <__pow5mult+0x48>
 800986c:	2010      	movs	r0, #16
 800986e:	f7ff fe29 	bl	80094c4 <malloc>
 8009872:	4602      	mov	r2, r0
 8009874:	6270      	str	r0, [r6, #36]	; 0x24
 8009876:	b928      	cbnz	r0, 8009884 <__pow5mult+0x40>
 8009878:	4b1d      	ldr	r3, [pc, #116]	; (80098f0 <__pow5mult+0xac>)
 800987a:	481e      	ldr	r0, [pc, #120]	; (80098f4 <__pow5mult+0xb0>)
 800987c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009880:	f000 fc62 	bl	800a148 <__assert_func>
 8009884:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009888:	6004      	str	r4, [r0, #0]
 800988a:	60c4      	str	r4, [r0, #12]
 800988c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009890:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009894:	b94c      	cbnz	r4, 80098aa <__pow5mult+0x66>
 8009896:	f240 2171 	movw	r1, #625	; 0x271
 800989a:	4630      	mov	r0, r6
 800989c:	f7ff ff12 	bl	80096c4 <__i2b>
 80098a0:	2300      	movs	r3, #0
 80098a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80098a6:	4604      	mov	r4, r0
 80098a8:	6003      	str	r3, [r0, #0]
 80098aa:	f04f 0900 	mov.w	r9, #0
 80098ae:	07eb      	lsls	r3, r5, #31
 80098b0:	d50a      	bpl.n	80098c8 <__pow5mult+0x84>
 80098b2:	4639      	mov	r1, r7
 80098b4:	4622      	mov	r2, r4
 80098b6:	4630      	mov	r0, r6
 80098b8:	f7ff ff1a 	bl	80096f0 <__multiply>
 80098bc:	4639      	mov	r1, r7
 80098be:	4680      	mov	r8, r0
 80098c0:	4630      	mov	r0, r6
 80098c2:	f7ff fe47 	bl	8009554 <_Bfree>
 80098c6:	4647      	mov	r7, r8
 80098c8:	106d      	asrs	r5, r5, #1
 80098ca:	d00b      	beq.n	80098e4 <__pow5mult+0xa0>
 80098cc:	6820      	ldr	r0, [r4, #0]
 80098ce:	b938      	cbnz	r0, 80098e0 <__pow5mult+0x9c>
 80098d0:	4622      	mov	r2, r4
 80098d2:	4621      	mov	r1, r4
 80098d4:	4630      	mov	r0, r6
 80098d6:	f7ff ff0b 	bl	80096f0 <__multiply>
 80098da:	6020      	str	r0, [r4, #0]
 80098dc:	f8c0 9000 	str.w	r9, [r0]
 80098e0:	4604      	mov	r4, r0
 80098e2:	e7e4      	b.n	80098ae <__pow5mult+0x6a>
 80098e4:	4638      	mov	r0, r7
 80098e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098ea:	bf00      	nop
 80098ec:	0800b670 	.word	0x0800b670
 80098f0:	0800b441 	.word	0x0800b441
 80098f4:	0800b524 	.word	0x0800b524

080098f8 <__lshift>:
 80098f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098fc:	460c      	mov	r4, r1
 80098fe:	6849      	ldr	r1, [r1, #4]
 8009900:	6923      	ldr	r3, [r4, #16]
 8009902:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009906:	68a3      	ldr	r3, [r4, #8]
 8009908:	4607      	mov	r7, r0
 800990a:	4691      	mov	r9, r2
 800990c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009910:	f108 0601 	add.w	r6, r8, #1
 8009914:	42b3      	cmp	r3, r6
 8009916:	db0b      	blt.n	8009930 <__lshift+0x38>
 8009918:	4638      	mov	r0, r7
 800991a:	f7ff fddb 	bl	80094d4 <_Balloc>
 800991e:	4605      	mov	r5, r0
 8009920:	b948      	cbnz	r0, 8009936 <__lshift+0x3e>
 8009922:	4602      	mov	r2, r0
 8009924:	4b2a      	ldr	r3, [pc, #168]	; (80099d0 <__lshift+0xd8>)
 8009926:	482b      	ldr	r0, [pc, #172]	; (80099d4 <__lshift+0xdc>)
 8009928:	f240 11d9 	movw	r1, #473	; 0x1d9
 800992c:	f000 fc0c 	bl	800a148 <__assert_func>
 8009930:	3101      	adds	r1, #1
 8009932:	005b      	lsls	r3, r3, #1
 8009934:	e7ee      	b.n	8009914 <__lshift+0x1c>
 8009936:	2300      	movs	r3, #0
 8009938:	f100 0114 	add.w	r1, r0, #20
 800993c:	f100 0210 	add.w	r2, r0, #16
 8009940:	4618      	mov	r0, r3
 8009942:	4553      	cmp	r3, sl
 8009944:	db37      	blt.n	80099b6 <__lshift+0xbe>
 8009946:	6920      	ldr	r0, [r4, #16]
 8009948:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800994c:	f104 0314 	add.w	r3, r4, #20
 8009950:	f019 091f 	ands.w	r9, r9, #31
 8009954:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009958:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800995c:	d02f      	beq.n	80099be <__lshift+0xc6>
 800995e:	f1c9 0e20 	rsb	lr, r9, #32
 8009962:	468a      	mov	sl, r1
 8009964:	f04f 0c00 	mov.w	ip, #0
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	fa02 f209 	lsl.w	r2, r2, r9
 800996e:	ea42 020c 	orr.w	r2, r2, ip
 8009972:	f84a 2b04 	str.w	r2, [sl], #4
 8009976:	f853 2b04 	ldr.w	r2, [r3], #4
 800997a:	4298      	cmp	r0, r3
 800997c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009980:	d8f2      	bhi.n	8009968 <__lshift+0x70>
 8009982:	1b03      	subs	r3, r0, r4
 8009984:	3b15      	subs	r3, #21
 8009986:	f023 0303 	bic.w	r3, r3, #3
 800998a:	3304      	adds	r3, #4
 800998c:	f104 0215 	add.w	r2, r4, #21
 8009990:	4290      	cmp	r0, r2
 8009992:	bf38      	it	cc
 8009994:	2304      	movcc	r3, #4
 8009996:	f841 c003 	str.w	ip, [r1, r3]
 800999a:	f1bc 0f00 	cmp.w	ip, #0
 800999e:	d001      	beq.n	80099a4 <__lshift+0xac>
 80099a0:	f108 0602 	add.w	r6, r8, #2
 80099a4:	3e01      	subs	r6, #1
 80099a6:	4638      	mov	r0, r7
 80099a8:	612e      	str	r6, [r5, #16]
 80099aa:	4621      	mov	r1, r4
 80099ac:	f7ff fdd2 	bl	8009554 <_Bfree>
 80099b0:	4628      	mov	r0, r5
 80099b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80099ba:	3301      	adds	r3, #1
 80099bc:	e7c1      	b.n	8009942 <__lshift+0x4a>
 80099be:	3904      	subs	r1, #4
 80099c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80099c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80099c8:	4298      	cmp	r0, r3
 80099ca:	d8f9      	bhi.n	80099c0 <__lshift+0xc8>
 80099cc:	e7ea      	b.n	80099a4 <__lshift+0xac>
 80099ce:	bf00      	nop
 80099d0:	0800b4b3 	.word	0x0800b4b3
 80099d4:	0800b524 	.word	0x0800b524

080099d8 <__mcmp>:
 80099d8:	b530      	push	{r4, r5, lr}
 80099da:	6902      	ldr	r2, [r0, #16]
 80099dc:	690c      	ldr	r4, [r1, #16]
 80099de:	1b12      	subs	r2, r2, r4
 80099e0:	d10e      	bne.n	8009a00 <__mcmp+0x28>
 80099e2:	f100 0314 	add.w	r3, r0, #20
 80099e6:	3114      	adds	r1, #20
 80099e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80099ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80099f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80099f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80099f8:	42a5      	cmp	r5, r4
 80099fa:	d003      	beq.n	8009a04 <__mcmp+0x2c>
 80099fc:	d305      	bcc.n	8009a0a <__mcmp+0x32>
 80099fe:	2201      	movs	r2, #1
 8009a00:	4610      	mov	r0, r2
 8009a02:	bd30      	pop	{r4, r5, pc}
 8009a04:	4283      	cmp	r3, r0
 8009a06:	d3f3      	bcc.n	80099f0 <__mcmp+0x18>
 8009a08:	e7fa      	b.n	8009a00 <__mcmp+0x28>
 8009a0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a0e:	e7f7      	b.n	8009a00 <__mcmp+0x28>

08009a10 <__mdiff>:
 8009a10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a14:	460c      	mov	r4, r1
 8009a16:	4606      	mov	r6, r0
 8009a18:	4611      	mov	r1, r2
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	4690      	mov	r8, r2
 8009a1e:	f7ff ffdb 	bl	80099d8 <__mcmp>
 8009a22:	1e05      	subs	r5, r0, #0
 8009a24:	d110      	bne.n	8009a48 <__mdiff+0x38>
 8009a26:	4629      	mov	r1, r5
 8009a28:	4630      	mov	r0, r6
 8009a2a:	f7ff fd53 	bl	80094d4 <_Balloc>
 8009a2e:	b930      	cbnz	r0, 8009a3e <__mdiff+0x2e>
 8009a30:	4b3a      	ldr	r3, [pc, #232]	; (8009b1c <__mdiff+0x10c>)
 8009a32:	4602      	mov	r2, r0
 8009a34:	f240 2132 	movw	r1, #562	; 0x232
 8009a38:	4839      	ldr	r0, [pc, #228]	; (8009b20 <__mdiff+0x110>)
 8009a3a:	f000 fb85 	bl	800a148 <__assert_func>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a48:	bfa4      	itt	ge
 8009a4a:	4643      	movge	r3, r8
 8009a4c:	46a0      	movge	r8, r4
 8009a4e:	4630      	mov	r0, r6
 8009a50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009a54:	bfa6      	itte	ge
 8009a56:	461c      	movge	r4, r3
 8009a58:	2500      	movge	r5, #0
 8009a5a:	2501      	movlt	r5, #1
 8009a5c:	f7ff fd3a 	bl	80094d4 <_Balloc>
 8009a60:	b920      	cbnz	r0, 8009a6c <__mdiff+0x5c>
 8009a62:	4b2e      	ldr	r3, [pc, #184]	; (8009b1c <__mdiff+0x10c>)
 8009a64:	4602      	mov	r2, r0
 8009a66:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009a6a:	e7e5      	b.n	8009a38 <__mdiff+0x28>
 8009a6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009a70:	6926      	ldr	r6, [r4, #16]
 8009a72:	60c5      	str	r5, [r0, #12]
 8009a74:	f104 0914 	add.w	r9, r4, #20
 8009a78:	f108 0514 	add.w	r5, r8, #20
 8009a7c:	f100 0e14 	add.w	lr, r0, #20
 8009a80:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009a84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009a88:	f108 0210 	add.w	r2, r8, #16
 8009a8c:	46f2      	mov	sl, lr
 8009a8e:	2100      	movs	r1, #0
 8009a90:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a94:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009a98:	fa1f f883 	uxth.w	r8, r3
 8009a9c:	fa11 f18b 	uxtah	r1, r1, fp
 8009aa0:	0c1b      	lsrs	r3, r3, #16
 8009aa2:	eba1 0808 	sub.w	r8, r1, r8
 8009aa6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009aaa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009aae:	fa1f f888 	uxth.w	r8, r8
 8009ab2:	1419      	asrs	r1, r3, #16
 8009ab4:	454e      	cmp	r6, r9
 8009ab6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009aba:	f84a 3b04 	str.w	r3, [sl], #4
 8009abe:	d8e7      	bhi.n	8009a90 <__mdiff+0x80>
 8009ac0:	1b33      	subs	r3, r6, r4
 8009ac2:	3b15      	subs	r3, #21
 8009ac4:	f023 0303 	bic.w	r3, r3, #3
 8009ac8:	3304      	adds	r3, #4
 8009aca:	3415      	adds	r4, #21
 8009acc:	42a6      	cmp	r6, r4
 8009ace:	bf38      	it	cc
 8009ad0:	2304      	movcc	r3, #4
 8009ad2:	441d      	add	r5, r3
 8009ad4:	4473      	add	r3, lr
 8009ad6:	469e      	mov	lr, r3
 8009ad8:	462e      	mov	r6, r5
 8009ada:	4566      	cmp	r6, ip
 8009adc:	d30e      	bcc.n	8009afc <__mdiff+0xec>
 8009ade:	f10c 0203 	add.w	r2, ip, #3
 8009ae2:	1b52      	subs	r2, r2, r5
 8009ae4:	f022 0203 	bic.w	r2, r2, #3
 8009ae8:	3d03      	subs	r5, #3
 8009aea:	45ac      	cmp	ip, r5
 8009aec:	bf38      	it	cc
 8009aee:	2200      	movcc	r2, #0
 8009af0:	441a      	add	r2, r3
 8009af2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009af6:	b17b      	cbz	r3, 8009b18 <__mdiff+0x108>
 8009af8:	6107      	str	r7, [r0, #16]
 8009afa:	e7a3      	b.n	8009a44 <__mdiff+0x34>
 8009afc:	f856 8b04 	ldr.w	r8, [r6], #4
 8009b00:	fa11 f288 	uxtah	r2, r1, r8
 8009b04:	1414      	asrs	r4, r2, #16
 8009b06:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009b0a:	b292      	uxth	r2, r2
 8009b0c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009b10:	f84e 2b04 	str.w	r2, [lr], #4
 8009b14:	1421      	asrs	r1, r4, #16
 8009b16:	e7e0      	b.n	8009ada <__mdiff+0xca>
 8009b18:	3f01      	subs	r7, #1
 8009b1a:	e7ea      	b.n	8009af2 <__mdiff+0xe2>
 8009b1c:	0800b4b3 	.word	0x0800b4b3
 8009b20:	0800b524 	.word	0x0800b524

08009b24 <__d2b>:
 8009b24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b28:	4689      	mov	r9, r1
 8009b2a:	2101      	movs	r1, #1
 8009b2c:	ec57 6b10 	vmov	r6, r7, d0
 8009b30:	4690      	mov	r8, r2
 8009b32:	f7ff fccf 	bl	80094d4 <_Balloc>
 8009b36:	4604      	mov	r4, r0
 8009b38:	b930      	cbnz	r0, 8009b48 <__d2b+0x24>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	4b25      	ldr	r3, [pc, #148]	; (8009bd4 <__d2b+0xb0>)
 8009b3e:	4826      	ldr	r0, [pc, #152]	; (8009bd8 <__d2b+0xb4>)
 8009b40:	f240 310a 	movw	r1, #778	; 0x30a
 8009b44:	f000 fb00 	bl	800a148 <__assert_func>
 8009b48:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009b4c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009b50:	bb35      	cbnz	r5, 8009ba0 <__d2b+0x7c>
 8009b52:	2e00      	cmp	r6, #0
 8009b54:	9301      	str	r3, [sp, #4]
 8009b56:	d028      	beq.n	8009baa <__d2b+0x86>
 8009b58:	4668      	mov	r0, sp
 8009b5a:	9600      	str	r6, [sp, #0]
 8009b5c:	f7ff fd82 	bl	8009664 <__lo0bits>
 8009b60:	9900      	ldr	r1, [sp, #0]
 8009b62:	b300      	cbz	r0, 8009ba6 <__d2b+0x82>
 8009b64:	9a01      	ldr	r2, [sp, #4]
 8009b66:	f1c0 0320 	rsb	r3, r0, #32
 8009b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b6e:	430b      	orrs	r3, r1
 8009b70:	40c2      	lsrs	r2, r0
 8009b72:	6163      	str	r3, [r4, #20]
 8009b74:	9201      	str	r2, [sp, #4]
 8009b76:	9b01      	ldr	r3, [sp, #4]
 8009b78:	61a3      	str	r3, [r4, #24]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	bf14      	ite	ne
 8009b7e:	2202      	movne	r2, #2
 8009b80:	2201      	moveq	r2, #1
 8009b82:	6122      	str	r2, [r4, #16]
 8009b84:	b1d5      	cbz	r5, 8009bbc <__d2b+0x98>
 8009b86:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009b8a:	4405      	add	r5, r0
 8009b8c:	f8c9 5000 	str.w	r5, [r9]
 8009b90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b94:	f8c8 0000 	str.w	r0, [r8]
 8009b98:	4620      	mov	r0, r4
 8009b9a:	b003      	add	sp, #12
 8009b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ba0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ba4:	e7d5      	b.n	8009b52 <__d2b+0x2e>
 8009ba6:	6161      	str	r1, [r4, #20]
 8009ba8:	e7e5      	b.n	8009b76 <__d2b+0x52>
 8009baa:	a801      	add	r0, sp, #4
 8009bac:	f7ff fd5a 	bl	8009664 <__lo0bits>
 8009bb0:	9b01      	ldr	r3, [sp, #4]
 8009bb2:	6163      	str	r3, [r4, #20]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	6122      	str	r2, [r4, #16]
 8009bb8:	3020      	adds	r0, #32
 8009bba:	e7e3      	b.n	8009b84 <__d2b+0x60>
 8009bbc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009bc0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009bc4:	f8c9 0000 	str.w	r0, [r9]
 8009bc8:	6918      	ldr	r0, [r3, #16]
 8009bca:	f7ff fd2b 	bl	8009624 <__hi0bits>
 8009bce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009bd2:	e7df      	b.n	8009b94 <__d2b+0x70>
 8009bd4:	0800b4b3 	.word	0x0800b4b3
 8009bd8:	0800b524 	.word	0x0800b524

08009bdc <_calloc_r>:
 8009bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bde:	fba1 2402 	umull	r2, r4, r1, r2
 8009be2:	b94c      	cbnz	r4, 8009bf8 <_calloc_r+0x1c>
 8009be4:	4611      	mov	r1, r2
 8009be6:	9201      	str	r2, [sp, #4]
 8009be8:	f000 f87a 	bl	8009ce0 <_malloc_r>
 8009bec:	9a01      	ldr	r2, [sp, #4]
 8009bee:	4605      	mov	r5, r0
 8009bf0:	b930      	cbnz	r0, 8009c00 <_calloc_r+0x24>
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	b003      	add	sp, #12
 8009bf6:	bd30      	pop	{r4, r5, pc}
 8009bf8:	220c      	movs	r2, #12
 8009bfa:	6002      	str	r2, [r0, #0]
 8009bfc:	2500      	movs	r5, #0
 8009bfe:	e7f8      	b.n	8009bf2 <_calloc_r+0x16>
 8009c00:	4621      	mov	r1, r4
 8009c02:	f7fd fe01 	bl	8007808 <memset>
 8009c06:	e7f4      	b.n	8009bf2 <_calloc_r+0x16>

08009c08 <_free_r>:
 8009c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c0a:	2900      	cmp	r1, #0
 8009c0c:	d044      	beq.n	8009c98 <_free_r+0x90>
 8009c0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c12:	9001      	str	r0, [sp, #4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f1a1 0404 	sub.w	r4, r1, #4
 8009c1a:	bfb8      	it	lt
 8009c1c:	18e4      	addlt	r4, r4, r3
 8009c1e:	f000 fb19 	bl	800a254 <__malloc_lock>
 8009c22:	4a1e      	ldr	r2, [pc, #120]	; (8009c9c <_free_r+0x94>)
 8009c24:	9801      	ldr	r0, [sp, #4]
 8009c26:	6813      	ldr	r3, [r2, #0]
 8009c28:	b933      	cbnz	r3, 8009c38 <_free_r+0x30>
 8009c2a:	6063      	str	r3, [r4, #4]
 8009c2c:	6014      	str	r4, [r2, #0]
 8009c2e:	b003      	add	sp, #12
 8009c30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c34:	f000 bb14 	b.w	800a260 <__malloc_unlock>
 8009c38:	42a3      	cmp	r3, r4
 8009c3a:	d908      	bls.n	8009c4e <_free_r+0x46>
 8009c3c:	6825      	ldr	r5, [r4, #0]
 8009c3e:	1961      	adds	r1, r4, r5
 8009c40:	428b      	cmp	r3, r1
 8009c42:	bf01      	itttt	eq
 8009c44:	6819      	ldreq	r1, [r3, #0]
 8009c46:	685b      	ldreq	r3, [r3, #4]
 8009c48:	1949      	addeq	r1, r1, r5
 8009c4a:	6021      	streq	r1, [r4, #0]
 8009c4c:	e7ed      	b.n	8009c2a <_free_r+0x22>
 8009c4e:	461a      	mov	r2, r3
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	b10b      	cbz	r3, 8009c58 <_free_r+0x50>
 8009c54:	42a3      	cmp	r3, r4
 8009c56:	d9fa      	bls.n	8009c4e <_free_r+0x46>
 8009c58:	6811      	ldr	r1, [r2, #0]
 8009c5a:	1855      	adds	r5, r2, r1
 8009c5c:	42a5      	cmp	r5, r4
 8009c5e:	d10b      	bne.n	8009c78 <_free_r+0x70>
 8009c60:	6824      	ldr	r4, [r4, #0]
 8009c62:	4421      	add	r1, r4
 8009c64:	1854      	adds	r4, r2, r1
 8009c66:	42a3      	cmp	r3, r4
 8009c68:	6011      	str	r1, [r2, #0]
 8009c6a:	d1e0      	bne.n	8009c2e <_free_r+0x26>
 8009c6c:	681c      	ldr	r4, [r3, #0]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	6053      	str	r3, [r2, #4]
 8009c72:	4421      	add	r1, r4
 8009c74:	6011      	str	r1, [r2, #0]
 8009c76:	e7da      	b.n	8009c2e <_free_r+0x26>
 8009c78:	d902      	bls.n	8009c80 <_free_r+0x78>
 8009c7a:	230c      	movs	r3, #12
 8009c7c:	6003      	str	r3, [r0, #0]
 8009c7e:	e7d6      	b.n	8009c2e <_free_r+0x26>
 8009c80:	6825      	ldr	r5, [r4, #0]
 8009c82:	1961      	adds	r1, r4, r5
 8009c84:	428b      	cmp	r3, r1
 8009c86:	bf04      	itt	eq
 8009c88:	6819      	ldreq	r1, [r3, #0]
 8009c8a:	685b      	ldreq	r3, [r3, #4]
 8009c8c:	6063      	str	r3, [r4, #4]
 8009c8e:	bf04      	itt	eq
 8009c90:	1949      	addeq	r1, r1, r5
 8009c92:	6021      	streq	r1, [r4, #0]
 8009c94:	6054      	str	r4, [r2, #4]
 8009c96:	e7ca      	b.n	8009c2e <_free_r+0x26>
 8009c98:	b003      	add	sp, #12
 8009c9a:	bd30      	pop	{r4, r5, pc}
 8009c9c:	20000268 	.word	0x20000268

08009ca0 <sbrk_aligned>:
 8009ca0:	b570      	push	{r4, r5, r6, lr}
 8009ca2:	4e0e      	ldr	r6, [pc, #56]	; (8009cdc <sbrk_aligned+0x3c>)
 8009ca4:	460c      	mov	r4, r1
 8009ca6:	6831      	ldr	r1, [r6, #0]
 8009ca8:	4605      	mov	r5, r0
 8009caa:	b911      	cbnz	r1, 8009cb2 <sbrk_aligned+0x12>
 8009cac:	f000 f9e6 	bl	800a07c <_sbrk_r>
 8009cb0:	6030      	str	r0, [r6, #0]
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	f000 f9e1 	bl	800a07c <_sbrk_r>
 8009cba:	1c43      	adds	r3, r0, #1
 8009cbc:	d00a      	beq.n	8009cd4 <sbrk_aligned+0x34>
 8009cbe:	1cc4      	adds	r4, r0, #3
 8009cc0:	f024 0403 	bic.w	r4, r4, #3
 8009cc4:	42a0      	cmp	r0, r4
 8009cc6:	d007      	beq.n	8009cd8 <sbrk_aligned+0x38>
 8009cc8:	1a21      	subs	r1, r4, r0
 8009cca:	4628      	mov	r0, r5
 8009ccc:	f000 f9d6 	bl	800a07c <_sbrk_r>
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d101      	bne.n	8009cd8 <sbrk_aligned+0x38>
 8009cd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009cd8:	4620      	mov	r0, r4
 8009cda:	bd70      	pop	{r4, r5, r6, pc}
 8009cdc:	2000026c 	.word	0x2000026c

08009ce0 <_malloc_r>:
 8009ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce4:	1ccd      	adds	r5, r1, #3
 8009ce6:	f025 0503 	bic.w	r5, r5, #3
 8009cea:	3508      	adds	r5, #8
 8009cec:	2d0c      	cmp	r5, #12
 8009cee:	bf38      	it	cc
 8009cf0:	250c      	movcc	r5, #12
 8009cf2:	2d00      	cmp	r5, #0
 8009cf4:	4607      	mov	r7, r0
 8009cf6:	db01      	blt.n	8009cfc <_malloc_r+0x1c>
 8009cf8:	42a9      	cmp	r1, r5
 8009cfa:	d905      	bls.n	8009d08 <_malloc_r+0x28>
 8009cfc:	230c      	movs	r3, #12
 8009cfe:	603b      	str	r3, [r7, #0]
 8009d00:	2600      	movs	r6, #0
 8009d02:	4630      	mov	r0, r6
 8009d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d08:	4e2e      	ldr	r6, [pc, #184]	; (8009dc4 <_malloc_r+0xe4>)
 8009d0a:	f000 faa3 	bl	800a254 <__malloc_lock>
 8009d0e:	6833      	ldr	r3, [r6, #0]
 8009d10:	461c      	mov	r4, r3
 8009d12:	bb34      	cbnz	r4, 8009d62 <_malloc_r+0x82>
 8009d14:	4629      	mov	r1, r5
 8009d16:	4638      	mov	r0, r7
 8009d18:	f7ff ffc2 	bl	8009ca0 <sbrk_aligned>
 8009d1c:	1c43      	adds	r3, r0, #1
 8009d1e:	4604      	mov	r4, r0
 8009d20:	d14d      	bne.n	8009dbe <_malloc_r+0xde>
 8009d22:	6834      	ldr	r4, [r6, #0]
 8009d24:	4626      	mov	r6, r4
 8009d26:	2e00      	cmp	r6, #0
 8009d28:	d140      	bne.n	8009dac <_malloc_r+0xcc>
 8009d2a:	6823      	ldr	r3, [r4, #0]
 8009d2c:	4631      	mov	r1, r6
 8009d2e:	4638      	mov	r0, r7
 8009d30:	eb04 0803 	add.w	r8, r4, r3
 8009d34:	f000 f9a2 	bl	800a07c <_sbrk_r>
 8009d38:	4580      	cmp	r8, r0
 8009d3a:	d13a      	bne.n	8009db2 <_malloc_r+0xd2>
 8009d3c:	6821      	ldr	r1, [r4, #0]
 8009d3e:	3503      	adds	r5, #3
 8009d40:	1a6d      	subs	r5, r5, r1
 8009d42:	f025 0503 	bic.w	r5, r5, #3
 8009d46:	3508      	adds	r5, #8
 8009d48:	2d0c      	cmp	r5, #12
 8009d4a:	bf38      	it	cc
 8009d4c:	250c      	movcc	r5, #12
 8009d4e:	4629      	mov	r1, r5
 8009d50:	4638      	mov	r0, r7
 8009d52:	f7ff ffa5 	bl	8009ca0 <sbrk_aligned>
 8009d56:	3001      	adds	r0, #1
 8009d58:	d02b      	beq.n	8009db2 <_malloc_r+0xd2>
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	442b      	add	r3, r5
 8009d5e:	6023      	str	r3, [r4, #0]
 8009d60:	e00e      	b.n	8009d80 <_malloc_r+0xa0>
 8009d62:	6822      	ldr	r2, [r4, #0]
 8009d64:	1b52      	subs	r2, r2, r5
 8009d66:	d41e      	bmi.n	8009da6 <_malloc_r+0xc6>
 8009d68:	2a0b      	cmp	r2, #11
 8009d6a:	d916      	bls.n	8009d9a <_malloc_r+0xba>
 8009d6c:	1961      	adds	r1, r4, r5
 8009d6e:	42a3      	cmp	r3, r4
 8009d70:	6025      	str	r5, [r4, #0]
 8009d72:	bf18      	it	ne
 8009d74:	6059      	strne	r1, [r3, #4]
 8009d76:	6863      	ldr	r3, [r4, #4]
 8009d78:	bf08      	it	eq
 8009d7a:	6031      	streq	r1, [r6, #0]
 8009d7c:	5162      	str	r2, [r4, r5]
 8009d7e:	604b      	str	r3, [r1, #4]
 8009d80:	4638      	mov	r0, r7
 8009d82:	f104 060b 	add.w	r6, r4, #11
 8009d86:	f000 fa6b 	bl	800a260 <__malloc_unlock>
 8009d8a:	f026 0607 	bic.w	r6, r6, #7
 8009d8e:	1d23      	adds	r3, r4, #4
 8009d90:	1af2      	subs	r2, r6, r3
 8009d92:	d0b6      	beq.n	8009d02 <_malloc_r+0x22>
 8009d94:	1b9b      	subs	r3, r3, r6
 8009d96:	50a3      	str	r3, [r4, r2]
 8009d98:	e7b3      	b.n	8009d02 <_malloc_r+0x22>
 8009d9a:	6862      	ldr	r2, [r4, #4]
 8009d9c:	42a3      	cmp	r3, r4
 8009d9e:	bf0c      	ite	eq
 8009da0:	6032      	streq	r2, [r6, #0]
 8009da2:	605a      	strne	r2, [r3, #4]
 8009da4:	e7ec      	b.n	8009d80 <_malloc_r+0xa0>
 8009da6:	4623      	mov	r3, r4
 8009da8:	6864      	ldr	r4, [r4, #4]
 8009daa:	e7b2      	b.n	8009d12 <_malloc_r+0x32>
 8009dac:	4634      	mov	r4, r6
 8009dae:	6876      	ldr	r6, [r6, #4]
 8009db0:	e7b9      	b.n	8009d26 <_malloc_r+0x46>
 8009db2:	230c      	movs	r3, #12
 8009db4:	603b      	str	r3, [r7, #0]
 8009db6:	4638      	mov	r0, r7
 8009db8:	f000 fa52 	bl	800a260 <__malloc_unlock>
 8009dbc:	e7a1      	b.n	8009d02 <_malloc_r+0x22>
 8009dbe:	6025      	str	r5, [r4, #0]
 8009dc0:	e7de      	b.n	8009d80 <_malloc_r+0xa0>
 8009dc2:	bf00      	nop
 8009dc4:	20000268 	.word	0x20000268

08009dc8 <__sfputc_r>:
 8009dc8:	6893      	ldr	r3, [r2, #8]
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	b410      	push	{r4}
 8009dd0:	6093      	str	r3, [r2, #8]
 8009dd2:	da08      	bge.n	8009de6 <__sfputc_r+0x1e>
 8009dd4:	6994      	ldr	r4, [r2, #24]
 8009dd6:	42a3      	cmp	r3, r4
 8009dd8:	db01      	blt.n	8009dde <__sfputc_r+0x16>
 8009dda:	290a      	cmp	r1, #10
 8009ddc:	d103      	bne.n	8009de6 <__sfputc_r+0x1e>
 8009dde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009de2:	f7fe ba11 	b.w	8008208 <__swbuf_r>
 8009de6:	6813      	ldr	r3, [r2, #0]
 8009de8:	1c58      	adds	r0, r3, #1
 8009dea:	6010      	str	r0, [r2, #0]
 8009dec:	7019      	strb	r1, [r3, #0]
 8009dee:	4608      	mov	r0, r1
 8009df0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <__sfputs_r>:
 8009df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df8:	4606      	mov	r6, r0
 8009dfa:	460f      	mov	r7, r1
 8009dfc:	4614      	mov	r4, r2
 8009dfe:	18d5      	adds	r5, r2, r3
 8009e00:	42ac      	cmp	r4, r5
 8009e02:	d101      	bne.n	8009e08 <__sfputs_r+0x12>
 8009e04:	2000      	movs	r0, #0
 8009e06:	e007      	b.n	8009e18 <__sfputs_r+0x22>
 8009e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e0c:	463a      	mov	r2, r7
 8009e0e:	4630      	mov	r0, r6
 8009e10:	f7ff ffda 	bl	8009dc8 <__sfputc_r>
 8009e14:	1c43      	adds	r3, r0, #1
 8009e16:	d1f3      	bne.n	8009e00 <__sfputs_r+0xa>
 8009e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e1c <_vfiprintf_r>:
 8009e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e20:	460d      	mov	r5, r1
 8009e22:	b09d      	sub	sp, #116	; 0x74
 8009e24:	4614      	mov	r4, r2
 8009e26:	4698      	mov	r8, r3
 8009e28:	4606      	mov	r6, r0
 8009e2a:	b118      	cbz	r0, 8009e34 <_vfiprintf_r+0x18>
 8009e2c:	6983      	ldr	r3, [r0, #24]
 8009e2e:	b90b      	cbnz	r3, 8009e34 <_vfiprintf_r+0x18>
 8009e30:	f7ff fa3e 	bl	80092b0 <__sinit>
 8009e34:	4b89      	ldr	r3, [pc, #548]	; (800a05c <_vfiprintf_r+0x240>)
 8009e36:	429d      	cmp	r5, r3
 8009e38:	d11b      	bne.n	8009e72 <_vfiprintf_r+0x56>
 8009e3a:	6875      	ldr	r5, [r6, #4]
 8009e3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e3e:	07d9      	lsls	r1, r3, #31
 8009e40:	d405      	bmi.n	8009e4e <_vfiprintf_r+0x32>
 8009e42:	89ab      	ldrh	r3, [r5, #12]
 8009e44:	059a      	lsls	r2, r3, #22
 8009e46:	d402      	bmi.n	8009e4e <_vfiprintf_r+0x32>
 8009e48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e4a:	f7ff fad4 	bl	80093f6 <__retarget_lock_acquire_recursive>
 8009e4e:	89ab      	ldrh	r3, [r5, #12]
 8009e50:	071b      	lsls	r3, r3, #28
 8009e52:	d501      	bpl.n	8009e58 <_vfiprintf_r+0x3c>
 8009e54:	692b      	ldr	r3, [r5, #16]
 8009e56:	b9eb      	cbnz	r3, 8009e94 <_vfiprintf_r+0x78>
 8009e58:	4629      	mov	r1, r5
 8009e5a:	4630      	mov	r0, r6
 8009e5c:	f7fe fa26 	bl	80082ac <__swsetup_r>
 8009e60:	b1c0      	cbz	r0, 8009e94 <_vfiprintf_r+0x78>
 8009e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e64:	07dc      	lsls	r4, r3, #31
 8009e66:	d50e      	bpl.n	8009e86 <_vfiprintf_r+0x6a>
 8009e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e6c:	b01d      	add	sp, #116	; 0x74
 8009e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e72:	4b7b      	ldr	r3, [pc, #492]	; (800a060 <_vfiprintf_r+0x244>)
 8009e74:	429d      	cmp	r5, r3
 8009e76:	d101      	bne.n	8009e7c <_vfiprintf_r+0x60>
 8009e78:	68b5      	ldr	r5, [r6, #8]
 8009e7a:	e7df      	b.n	8009e3c <_vfiprintf_r+0x20>
 8009e7c:	4b79      	ldr	r3, [pc, #484]	; (800a064 <_vfiprintf_r+0x248>)
 8009e7e:	429d      	cmp	r5, r3
 8009e80:	bf08      	it	eq
 8009e82:	68f5      	ldreq	r5, [r6, #12]
 8009e84:	e7da      	b.n	8009e3c <_vfiprintf_r+0x20>
 8009e86:	89ab      	ldrh	r3, [r5, #12]
 8009e88:	0598      	lsls	r0, r3, #22
 8009e8a:	d4ed      	bmi.n	8009e68 <_vfiprintf_r+0x4c>
 8009e8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e8e:	f7ff fab3 	bl	80093f8 <__retarget_lock_release_recursive>
 8009e92:	e7e9      	b.n	8009e68 <_vfiprintf_r+0x4c>
 8009e94:	2300      	movs	r3, #0
 8009e96:	9309      	str	r3, [sp, #36]	; 0x24
 8009e98:	2320      	movs	r3, #32
 8009e9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ea2:	2330      	movs	r3, #48	; 0x30
 8009ea4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a068 <_vfiprintf_r+0x24c>
 8009ea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009eac:	f04f 0901 	mov.w	r9, #1
 8009eb0:	4623      	mov	r3, r4
 8009eb2:	469a      	mov	sl, r3
 8009eb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eb8:	b10a      	cbz	r2, 8009ebe <_vfiprintf_r+0xa2>
 8009eba:	2a25      	cmp	r2, #37	; 0x25
 8009ebc:	d1f9      	bne.n	8009eb2 <_vfiprintf_r+0x96>
 8009ebe:	ebba 0b04 	subs.w	fp, sl, r4
 8009ec2:	d00b      	beq.n	8009edc <_vfiprintf_r+0xc0>
 8009ec4:	465b      	mov	r3, fp
 8009ec6:	4622      	mov	r2, r4
 8009ec8:	4629      	mov	r1, r5
 8009eca:	4630      	mov	r0, r6
 8009ecc:	f7ff ff93 	bl	8009df6 <__sfputs_r>
 8009ed0:	3001      	adds	r0, #1
 8009ed2:	f000 80aa 	beq.w	800a02a <_vfiprintf_r+0x20e>
 8009ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ed8:	445a      	add	r2, fp
 8009eda:	9209      	str	r2, [sp, #36]	; 0x24
 8009edc:	f89a 3000 	ldrb.w	r3, [sl]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	f000 80a2 	beq.w	800a02a <_vfiprintf_r+0x20e>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ef0:	f10a 0a01 	add.w	sl, sl, #1
 8009ef4:	9304      	str	r3, [sp, #16]
 8009ef6:	9307      	str	r3, [sp, #28]
 8009ef8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009efc:	931a      	str	r3, [sp, #104]	; 0x68
 8009efe:	4654      	mov	r4, sl
 8009f00:	2205      	movs	r2, #5
 8009f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f06:	4858      	ldr	r0, [pc, #352]	; (800a068 <_vfiprintf_r+0x24c>)
 8009f08:	f7f6 f96a 	bl	80001e0 <memchr>
 8009f0c:	9a04      	ldr	r2, [sp, #16]
 8009f0e:	b9d8      	cbnz	r0, 8009f48 <_vfiprintf_r+0x12c>
 8009f10:	06d1      	lsls	r1, r2, #27
 8009f12:	bf44      	itt	mi
 8009f14:	2320      	movmi	r3, #32
 8009f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f1a:	0713      	lsls	r3, r2, #28
 8009f1c:	bf44      	itt	mi
 8009f1e:	232b      	movmi	r3, #43	; 0x2b
 8009f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f24:	f89a 3000 	ldrb.w	r3, [sl]
 8009f28:	2b2a      	cmp	r3, #42	; 0x2a
 8009f2a:	d015      	beq.n	8009f58 <_vfiprintf_r+0x13c>
 8009f2c:	9a07      	ldr	r2, [sp, #28]
 8009f2e:	4654      	mov	r4, sl
 8009f30:	2000      	movs	r0, #0
 8009f32:	f04f 0c0a 	mov.w	ip, #10
 8009f36:	4621      	mov	r1, r4
 8009f38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f3c:	3b30      	subs	r3, #48	; 0x30
 8009f3e:	2b09      	cmp	r3, #9
 8009f40:	d94e      	bls.n	8009fe0 <_vfiprintf_r+0x1c4>
 8009f42:	b1b0      	cbz	r0, 8009f72 <_vfiprintf_r+0x156>
 8009f44:	9207      	str	r2, [sp, #28]
 8009f46:	e014      	b.n	8009f72 <_vfiprintf_r+0x156>
 8009f48:	eba0 0308 	sub.w	r3, r0, r8
 8009f4c:	fa09 f303 	lsl.w	r3, r9, r3
 8009f50:	4313      	orrs	r3, r2
 8009f52:	9304      	str	r3, [sp, #16]
 8009f54:	46a2      	mov	sl, r4
 8009f56:	e7d2      	b.n	8009efe <_vfiprintf_r+0xe2>
 8009f58:	9b03      	ldr	r3, [sp, #12]
 8009f5a:	1d19      	adds	r1, r3, #4
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	9103      	str	r1, [sp, #12]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	bfbb      	ittet	lt
 8009f64:	425b      	neglt	r3, r3
 8009f66:	f042 0202 	orrlt.w	r2, r2, #2
 8009f6a:	9307      	strge	r3, [sp, #28]
 8009f6c:	9307      	strlt	r3, [sp, #28]
 8009f6e:	bfb8      	it	lt
 8009f70:	9204      	strlt	r2, [sp, #16]
 8009f72:	7823      	ldrb	r3, [r4, #0]
 8009f74:	2b2e      	cmp	r3, #46	; 0x2e
 8009f76:	d10c      	bne.n	8009f92 <_vfiprintf_r+0x176>
 8009f78:	7863      	ldrb	r3, [r4, #1]
 8009f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f7c:	d135      	bne.n	8009fea <_vfiprintf_r+0x1ce>
 8009f7e:	9b03      	ldr	r3, [sp, #12]
 8009f80:	1d1a      	adds	r2, r3, #4
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	9203      	str	r2, [sp, #12]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	bfb8      	it	lt
 8009f8a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009f8e:	3402      	adds	r4, #2
 8009f90:	9305      	str	r3, [sp, #20]
 8009f92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a078 <_vfiprintf_r+0x25c>
 8009f96:	7821      	ldrb	r1, [r4, #0]
 8009f98:	2203      	movs	r2, #3
 8009f9a:	4650      	mov	r0, sl
 8009f9c:	f7f6 f920 	bl	80001e0 <memchr>
 8009fa0:	b140      	cbz	r0, 8009fb4 <_vfiprintf_r+0x198>
 8009fa2:	2340      	movs	r3, #64	; 0x40
 8009fa4:	eba0 000a 	sub.w	r0, r0, sl
 8009fa8:	fa03 f000 	lsl.w	r0, r3, r0
 8009fac:	9b04      	ldr	r3, [sp, #16]
 8009fae:	4303      	orrs	r3, r0
 8009fb0:	3401      	adds	r4, #1
 8009fb2:	9304      	str	r3, [sp, #16]
 8009fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fb8:	482c      	ldr	r0, [pc, #176]	; (800a06c <_vfiprintf_r+0x250>)
 8009fba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fbe:	2206      	movs	r2, #6
 8009fc0:	f7f6 f90e 	bl	80001e0 <memchr>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d03f      	beq.n	800a048 <_vfiprintf_r+0x22c>
 8009fc8:	4b29      	ldr	r3, [pc, #164]	; (800a070 <_vfiprintf_r+0x254>)
 8009fca:	bb1b      	cbnz	r3, 800a014 <_vfiprintf_r+0x1f8>
 8009fcc:	9b03      	ldr	r3, [sp, #12]
 8009fce:	3307      	adds	r3, #7
 8009fd0:	f023 0307 	bic.w	r3, r3, #7
 8009fd4:	3308      	adds	r3, #8
 8009fd6:	9303      	str	r3, [sp, #12]
 8009fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fda:	443b      	add	r3, r7
 8009fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8009fde:	e767      	b.n	8009eb0 <_vfiprintf_r+0x94>
 8009fe0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	2001      	movs	r0, #1
 8009fe8:	e7a5      	b.n	8009f36 <_vfiprintf_r+0x11a>
 8009fea:	2300      	movs	r3, #0
 8009fec:	3401      	adds	r4, #1
 8009fee:	9305      	str	r3, [sp, #20]
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	f04f 0c0a 	mov.w	ip, #10
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ffc:	3a30      	subs	r2, #48	; 0x30
 8009ffe:	2a09      	cmp	r2, #9
 800a000:	d903      	bls.n	800a00a <_vfiprintf_r+0x1ee>
 800a002:	2b00      	cmp	r3, #0
 800a004:	d0c5      	beq.n	8009f92 <_vfiprintf_r+0x176>
 800a006:	9105      	str	r1, [sp, #20]
 800a008:	e7c3      	b.n	8009f92 <_vfiprintf_r+0x176>
 800a00a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a00e:	4604      	mov	r4, r0
 800a010:	2301      	movs	r3, #1
 800a012:	e7f0      	b.n	8009ff6 <_vfiprintf_r+0x1da>
 800a014:	ab03      	add	r3, sp, #12
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	462a      	mov	r2, r5
 800a01a:	4b16      	ldr	r3, [pc, #88]	; (800a074 <_vfiprintf_r+0x258>)
 800a01c:	a904      	add	r1, sp, #16
 800a01e:	4630      	mov	r0, r6
 800a020:	f7fd fc9a 	bl	8007958 <_printf_float>
 800a024:	4607      	mov	r7, r0
 800a026:	1c78      	adds	r0, r7, #1
 800a028:	d1d6      	bne.n	8009fd8 <_vfiprintf_r+0x1bc>
 800a02a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a02c:	07d9      	lsls	r1, r3, #31
 800a02e:	d405      	bmi.n	800a03c <_vfiprintf_r+0x220>
 800a030:	89ab      	ldrh	r3, [r5, #12]
 800a032:	059a      	lsls	r2, r3, #22
 800a034:	d402      	bmi.n	800a03c <_vfiprintf_r+0x220>
 800a036:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a038:	f7ff f9de 	bl	80093f8 <__retarget_lock_release_recursive>
 800a03c:	89ab      	ldrh	r3, [r5, #12]
 800a03e:	065b      	lsls	r3, r3, #25
 800a040:	f53f af12 	bmi.w	8009e68 <_vfiprintf_r+0x4c>
 800a044:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a046:	e711      	b.n	8009e6c <_vfiprintf_r+0x50>
 800a048:	ab03      	add	r3, sp, #12
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	462a      	mov	r2, r5
 800a04e:	4b09      	ldr	r3, [pc, #36]	; (800a074 <_vfiprintf_r+0x258>)
 800a050:	a904      	add	r1, sp, #16
 800a052:	4630      	mov	r0, r6
 800a054:	f7fd ff24 	bl	8007ea0 <_printf_i>
 800a058:	e7e4      	b.n	800a024 <_vfiprintf_r+0x208>
 800a05a:	bf00      	nop
 800a05c:	0800b4e4 	.word	0x0800b4e4
 800a060:	0800b504 	.word	0x0800b504
 800a064:	0800b4c4 	.word	0x0800b4c4
 800a068:	0800b67c 	.word	0x0800b67c
 800a06c:	0800b686 	.word	0x0800b686
 800a070:	08007959 	.word	0x08007959
 800a074:	08009df7 	.word	0x08009df7
 800a078:	0800b682 	.word	0x0800b682

0800a07c <_sbrk_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	4d06      	ldr	r5, [pc, #24]	; (800a098 <_sbrk_r+0x1c>)
 800a080:	2300      	movs	r3, #0
 800a082:	4604      	mov	r4, r0
 800a084:	4608      	mov	r0, r1
 800a086:	602b      	str	r3, [r5, #0]
 800a088:	f7fa f842 	bl	8004110 <_sbrk>
 800a08c:	1c43      	adds	r3, r0, #1
 800a08e:	d102      	bne.n	800a096 <_sbrk_r+0x1a>
 800a090:	682b      	ldr	r3, [r5, #0]
 800a092:	b103      	cbz	r3, 800a096 <_sbrk_r+0x1a>
 800a094:	6023      	str	r3, [r4, #0]
 800a096:	bd38      	pop	{r3, r4, r5, pc}
 800a098:	20000270 	.word	0x20000270

0800a09c <__sread>:
 800a09c:	b510      	push	{r4, lr}
 800a09e:	460c      	mov	r4, r1
 800a0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0a4:	f000 f8e2 	bl	800a26c <_read_r>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	bfab      	itete	ge
 800a0ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a0ae:	89a3      	ldrhlt	r3, [r4, #12]
 800a0b0:	181b      	addge	r3, r3, r0
 800a0b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a0b6:	bfac      	ite	ge
 800a0b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a0ba:	81a3      	strhlt	r3, [r4, #12]
 800a0bc:	bd10      	pop	{r4, pc}

0800a0be <__swrite>:
 800a0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0c2:	461f      	mov	r7, r3
 800a0c4:	898b      	ldrh	r3, [r1, #12]
 800a0c6:	05db      	lsls	r3, r3, #23
 800a0c8:	4605      	mov	r5, r0
 800a0ca:	460c      	mov	r4, r1
 800a0cc:	4616      	mov	r6, r2
 800a0ce:	d505      	bpl.n	800a0dc <__swrite+0x1e>
 800a0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f000 f898 	bl	800a20c <_lseek_r>
 800a0dc:	89a3      	ldrh	r3, [r4, #12]
 800a0de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0e6:	81a3      	strh	r3, [r4, #12]
 800a0e8:	4632      	mov	r2, r6
 800a0ea:	463b      	mov	r3, r7
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f2:	f000 b817 	b.w	800a124 <_write_r>

0800a0f6 <__sseek>:
 800a0f6:	b510      	push	{r4, lr}
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0fe:	f000 f885 	bl	800a20c <_lseek_r>
 800a102:	1c43      	adds	r3, r0, #1
 800a104:	89a3      	ldrh	r3, [r4, #12]
 800a106:	bf15      	itete	ne
 800a108:	6560      	strne	r0, [r4, #84]	; 0x54
 800a10a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a10e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a112:	81a3      	strheq	r3, [r4, #12]
 800a114:	bf18      	it	ne
 800a116:	81a3      	strhne	r3, [r4, #12]
 800a118:	bd10      	pop	{r4, pc}

0800a11a <__sclose>:
 800a11a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a11e:	f000 b831 	b.w	800a184 <_close_r>
	...

0800a124 <_write_r>:
 800a124:	b538      	push	{r3, r4, r5, lr}
 800a126:	4d07      	ldr	r5, [pc, #28]	; (800a144 <_write_r+0x20>)
 800a128:	4604      	mov	r4, r0
 800a12a:	4608      	mov	r0, r1
 800a12c:	4611      	mov	r1, r2
 800a12e:	2200      	movs	r2, #0
 800a130:	602a      	str	r2, [r5, #0]
 800a132:	461a      	mov	r2, r3
 800a134:	f7fa fe14 	bl	8004d60 <_write>
 800a138:	1c43      	adds	r3, r0, #1
 800a13a:	d102      	bne.n	800a142 <_write_r+0x1e>
 800a13c:	682b      	ldr	r3, [r5, #0]
 800a13e:	b103      	cbz	r3, 800a142 <_write_r+0x1e>
 800a140:	6023      	str	r3, [r4, #0]
 800a142:	bd38      	pop	{r3, r4, r5, pc}
 800a144:	20000270 	.word	0x20000270

0800a148 <__assert_func>:
 800a148:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a14a:	4614      	mov	r4, r2
 800a14c:	461a      	mov	r2, r3
 800a14e:	4b09      	ldr	r3, [pc, #36]	; (800a174 <__assert_func+0x2c>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4605      	mov	r5, r0
 800a154:	68d8      	ldr	r0, [r3, #12]
 800a156:	b14c      	cbz	r4, 800a16c <__assert_func+0x24>
 800a158:	4b07      	ldr	r3, [pc, #28]	; (800a178 <__assert_func+0x30>)
 800a15a:	9100      	str	r1, [sp, #0]
 800a15c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a160:	4906      	ldr	r1, [pc, #24]	; (800a17c <__assert_func+0x34>)
 800a162:	462b      	mov	r3, r5
 800a164:	f000 f81e 	bl	800a1a4 <fiprintf>
 800a168:	f000 f89f 	bl	800a2aa <abort>
 800a16c:	4b04      	ldr	r3, [pc, #16]	; (800a180 <__assert_func+0x38>)
 800a16e:	461c      	mov	r4, r3
 800a170:	e7f3      	b.n	800a15a <__assert_func+0x12>
 800a172:	bf00      	nop
 800a174:	20000020 	.word	0x20000020
 800a178:	0800b68d 	.word	0x0800b68d
 800a17c:	0800b69a 	.word	0x0800b69a
 800a180:	0800b6c8 	.word	0x0800b6c8

0800a184 <_close_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	4d06      	ldr	r5, [pc, #24]	; (800a1a0 <_close_r+0x1c>)
 800a188:	2300      	movs	r3, #0
 800a18a:	4604      	mov	r4, r0
 800a18c:	4608      	mov	r0, r1
 800a18e:	602b      	str	r3, [r5, #0]
 800a190:	f7f9 ff89 	bl	80040a6 <_close>
 800a194:	1c43      	adds	r3, r0, #1
 800a196:	d102      	bne.n	800a19e <_close_r+0x1a>
 800a198:	682b      	ldr	r3, [r5, #0]
 800a19a:	b103      	cbz	r3, 800a19e <_close_r+0x1a>
 800a19c:	6023      	str	r3, [r4, #0]
 800a19e:	bd38      	pop	{r3, r4, r5, pc}
 800a1a0:	20000270 	.word	0x20000270

0800a1a4 <fiprintf>:
 800a1a4:	b40e      	push	{r1, r2, r3}
 800a1a6:	b503      	push	{r0, r1, lr}
 800a1a8:	4601      	mov	r1, r0
 800a1aa:	ab03      	add	r3, sp, #12
 800a1ac:	4805      	ldr	r0, [pc, #20]	; (800a1c4 <fiprintf+0x20>)
 800a1ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1b2:	6800      	ldr	r0, [r0, #0]
 800a1b4:	9301      	str	r3, [sp, #4]
 800a1b6:	f7ff fe31 	bl	8009e1c <_vfiprintf_r>
 800a1ba:	b002      	add	sp, #8
 800a1bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1c0:	b003      	add	sp, #12
 800a1c2:	4770      	bx	lr
 800a1c4:	20000020 	.word	0x20000020

0800a1c8 <_fstat_r>:
 800a1c8:	b538      	push	{r3, r4, r5, lr}
 800a1ca:	4d07      	ldr	r5, [pc, #28]	; (800a1e8 <_fstat_r+0x20>)
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	4608      	mov	r0, r1
 800a1d2:	4611      	mov	r1, r2
 800a1d4:	602b      	str	r3, [r5, #0]
 800a1d6:	f7f9 ff72 	bl	80040be <_fstat>
 800a1da:	1c43      	adds	r3, r0, #1
 800a1dc:	d102      	bne.n	800a1e4 <_fstat_r+0x1c>
 800a1de:	682b      	ldr	r3, [r5, #0]
 800a1e0:	b103      	cbz	r3, 800a1e4 <_fstat_r+0x1c>
 800a1e2:	6023      	str	r3, [r4, #0]
 800a1e4:	bd38      	pop	{r3, r4, r5, pc}
 800a1e6:	bf00      	nop
 800a1e8:	20000270 	.word	0x20000270

0800a1ec <_isatty_r>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	4d06      	ldr	r5, [pc, #24]	; (800a208 <_isatty_r+0x1c>)
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	4608      	mov	r0, r1
 800a1f6:	602b      	str	r3, [r5, #0]
 800a1f8:	f7f9 ff71 	bl	80040de <_isatty>
 800a1fc:	1c43      	adds	r3, r0, #1
 800a1fe:	d102      	bne.n	800a206 <_isatty_r+0x1a>
 800a200:	682b      	ldr	r3, [r5, #0]
 800a202:	b103      	cbz	r3, 800a206 <_isatty_r+0x1a>
 800a204:	6023      	str	r3, [r4, #0]
 800a206:	bd38      	pop	{r3, r4, r5, pc}
 800a208:	20000270 	.word	0x20000270

0800a20c <_lseek_r>:
 800a20c:	b538      	push	{r3, r4, r5, lr}
 800a20e:	4d07      	ldr	r5, [pc, #28]	; (800a22c <_lseek_r+0x20>)
 800a210:	4604      	mov	r4, r0
 800a212:	4608      	mov	r0, r1
 800a214:	4611      	mov	r1, r2
 800a216:	2200      	movs	r2, #0
 800a218:	602a      	str	r2, [r5, #0]
 800a21a:	461a      	mov	r2, r3
 800a21c:	f7f9 ff6a 	bl	80040f4 <_lseek>
 800a220:	1c43      	adds	r3, r0, #1
 800a222:	d102      	bne.n	800a22a <_lseek_r+0x1e>
 800a224:	682b      	ldr	r3, [r5, #0]
 800a226:	b103      	cbz	r3, 800a22a <_lseek_r+0x1e>
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	bd38      	pop	{r3, r4, r5, pc}
 800a22c:	20000270 	.word	0x20000270

0800a230 <__ascii_mbtowc>:
 800a230:	b082      	sub	sp, #8
 800a232:	b901      	cbnz	r1, 800a236 <__ascii_mbtowc+0x6>
 800a234:	a901      	add	r1, sp, #4
 800a236:	b142      	cbz	r2, 800a24a <__ascii_mbtowc+0x1a>
 800a238:	b14b      	cbz	r3, 800a24e <__ascii_mbtowc+0x1e>
 800a23a:	7813      	ldrb	r3, [r2, #0]
 800a23c:	600b      	str	r3, [r1, #0]
 800a23e:	7812      	ldrb	r2, [r2, #0]
 800a240:	1e10      	subs	r0, r2, #0
 800a242:	bf18      	it	ne
 800a244:	2001      	movne	r0, #1
 800a246:	b002      	add	sp, #8
 800a248:	4770      	bx	lr
 800a24a:	4610      	mov	r0, r2
 800a24c:	e7fb      	b.n	800a246 <__ascii_mbtowc+0x16>
 800a24e:	f06f 0001 	mvn.w	r0, #1
 800a252:	e7f8      	b.n	800a246 <__ascii_mbtowc+0x16>

0800a254 <__malloc_lock>:
 800a254:	4801      	ldr	r0, [pc, #4]	; (800a25c <__malloc_lock+0x8>)
 800a256:	f7ff b8ce 	b.w	80093f6 <__retarget_lock_acquire_recursive>
 800a25a:	bf00      	nop
 800a25c:	20000264 	.word	0x20000264

0800a260 <__malloc_unlock>:
 800a260:	4801      	ldr	r0, [pc, #4]	; (800a268 <__malloc_unlock+0x8>)
 800a262:	f7ff b8c9 	b.w	80093f8 <__retarget_lock_release_recursive>
 800a266:	bf00      	nop
 800a268:	20000264 	.word	0x20000264

0800a26c <_read_r>:
 800a26c:	b538      	push	{r3, r4, r5, lr}
 800a26e:	4d07      	ldr	r5, [pc, #28]	; (800a28c <_read_r+0x20>)
 800a270:	4604      	mov	r4, r0
 800a272:	4608      	mov	r0, r1
 800a274:	4611      	mov	r1, r2
 800a276:	2200      	movs	r2, #0
 800a278:	602a      	str	r2, [r5, #0]
 800a27a:	461a      	mov	r2, r3
 800a27c:	f7f9 fef6 	bl	800406c <_read>
 800a280:	1c43      	adds	r3, r0, #1
 800a282:	d102      	bne.n	800a28a <_read_r+0x1e>
 800a284:	682b      	ldr	r3, [r5, #0]
 800a286:	b103      	cbz	r3, 800a28a <_read_r+0x1e>
 800a288:	6023      	str	r3, [r4, #0]
 800a28a:	bd38      	pop	{r3, r4, r5, pc}
 800a28c:	20000270 	.word	0x20000270

0800a290 <__ascii_wctomb>:
 800a290:	b149      	cbz	r1, 800a2a6 <__ascii_wctomb+0x16>
 800a292:	2aff      	cmp	r2, #255	; 0xff
 800a294:	bf85      	ittet	hi
 800a296:	238a      	movhi	r3, #138	; 0x8a
 800a298:	6003      	strhi	r3, [r0, #0]
 800a29a:	700a      	strbls	r2, [r1, #0]
 800a29c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a2a0:	bf98      	it	ls
 800a2a2:	2001      	movls	r0, #1
 800a2a4:	4770      	bx	lr
 800a2a6:	4608      	mov	r0, r1
 800a2a8:	4770      	bx	lr

0800a2aa <abort>:
 800a2aa:	b508      	push	{r3, lr}
 800a2ac:	2006      	movs	r0, #6
 800a2ae:	f000 f82b 	bl	800a308 <raise>
 800a2b2:	2001      	movs	r0, #1
 800a2b4:	f7f9 fed0 	bl	8004058 <_exit>

0800a2b8 <_raise_r>:
 800a2b8:	291f      	cmp	r1, #31
 800a2ba:	b538      	push	{r3, r4, r5, lr}
 800a2bc:	4604      	mov	r4, r0
 800a2be:	460d      	mov	r5, r1
 800a2c0:	d904      	bls.n	800a2cc <_raise_r+0x14>
 800a2c2:	2316      	movs	r3, #22
 800a2c4:	6003      	str	r3, [r0, #0]
 800a2c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2ca:	bd38      	pop	{r3, r4, r5, pc}
 800a2cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a2ce:	b112      	cbz	r2, 800a2d6 <_raise_r+0x1e>
 800a2d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2d4:	b94b      	cbnz	r3, 800a2ea <_raise_r+0x32>
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f000 f830 	bl	800a33c <_getpid_r>
 800a2dc:	462a      	mov	r2, r5
 800a2de:	4601      	mov	r1, r0
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2e6:	f000 b817 	b.w	800a318 <_kill_r>
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d00a      	beq.n	800a304 <_raise_r+0x4c>
 800a2ee:	1c59      	adds	r1, r3, #1
 800a2f0:	d103      	bne.n	800a2fa <_raise_r+0x42>
 800a2f2:	2316      	movs	r3, #22
 800a2f4:	6003      	str	r3, [r0, #0]
 800a2f6:	2001      	movs	r0, #1
 800a2f8:	e7e7      	b.n	800a2ca <_raise_r+0x12>
 800a2fa:	2400      	movs	r4, #0
 800a2fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a300:	4628      	mov	r0, r5
 800a302:	4798      	blx	r3
 800a304:	2000      	movs	r0, #0
 800a306:	e7e0      	b.n	800a2ca <_raise_r+0x12>

0800a308 <raise>:
 800a308:	4b02      	ldr	r3, [pc, #8]	; (800a314 <raise+0xc>)
 800a30a:	4601      	mov	r1, r0
 800a30c:	6818      	ldr	r0, [r3, #0]
 800a30e:	f7ff bfd3 	b.w	800a2b8 <_raise_r>
 800a312:	bf00      	nop
 800a314:	20000020 	.word	0x20000020

0800a318 <_kill_r>:
 800a318:	b538      	push	{r3, r4, r5, lr}
 800a31a:	4d07      	ldr	r5, [pc, #28]	; (800a338 <_kill_r+0x20>)
 800a31c:	2300      	movs	r3, #0
 800a31e:	4604      	mov	r4, r0
 800a320:	4608      	mov	r0, r1
 800a322:	4611      	mov	r1, r2
 800a324:	602b      	str	r3, [r5, #0]
 800a326:	f7f9 fe87 	bl	8004038 <_kill>
 800a32a:	1c43      	adds	r3, r0, #1
 800a32c:	d102      	bne.n	800a334 <_kill_r+0x1c>
 800a32e:	682b      	ldr	r3, [r5, #0]
 800a330:	b103      	cbz	r3, 800a334 <_kill_r+0x1c>
 800a332:	6023      	str	r3, [r4, #0]
 800a334:	bd38      	pop	{r3, r4, r5, pc}
 800a336:	bf00      	nop
 800a338:	20000270 	.word	0x20000270

0800a33c <_getpid_r>:
 800a33c:	f7f9 be74 	b.w	8004028 <_getpid>

0800a340 <sqrt>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	ed2d 8b02 	vpush	{d8}
 800a346:	ec55 4b10 	vmov	r4, r5, d0
 800a34a:	f000 f853 	bl	800a3f4 <__ieee754_sqrt>
 800a34e:	4622      	mov	r2, r4
 800a350:	462b      	mov	r3, r5
 800a352:	4620      	mov	r0, r4
 800a354:	4629      	mov	r1, r5
 800a356:	eeb0 8a40 	vmov.f32	s16, s0
 800a35a:	eef0 8a60 	vmov.f32	s17, s1
 800a35e:	f7f6 fbe5 	bl	8000b2c <__aeabi_dcmpun>
 800a362:	b990      	cbnz	r0, 800a38a <sqrt+0x4a>
 800a364:	2200      	movs	r2, #0
 800a366:	2300      	movs	r3, #0
 800a368:	4620      	mov	r0, r4
 800a36a:	4629      	mov	r1, r5
 800a36c:	f7f6 fbb6 	bl	8000adc <__aeabi_dcmplt>
 800a370:	b158      	cbz	r0, 800a38a <sqrt+0x4a>
 800a372:	f7fd fa11 	bl	8007798 <__errno>
 800a376:	2321      	movs	r3, #33	; 0x21
 800a378:	6003      	str	r3, [r0, #0]
 800a37a:	2200      	movs	r2, #0
 800a37c:	2300      	movs	r3, #0
 800a37e:	4610      	mov	r0, r2
 800a380:	4619      	mov	r1, r3
 800a382:	f7f6 fa63 	bl	800084c <__aeabi_ddiv>
 800a386:	ec41 0b18 	vmov	d8, r0, r1
 800a38a:	eeb0 0a48 	vmov.f32	s0, s16
 800a38e:	eef0 0a68 	vmov.f32	s1, s17
 800a392:	ecbd 8b02 	vpop	{d8}
 800a396:	bd38      	pop	{r3, r4, r5, pc}

0800a398 <asinf>:
 800a398:	b508      	push	{r3, lr}
 800a39a:	ed2d 8b02 	vpush	{d8}
 800a39e:	eeb0 8a40 	vmov.f32	s16, s0
 800a3a2:	f000 f8d9 	bl	800a558 <__ieee754_asinf>
 800a3a6:	eeb4 8a48 	vcmp.f32	s16, s16
 800a3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ae:	eef0 8a40 	vmov.f32	s17, s0
 800a3b2:	d615      	bvs.n	800a3e0 <asinf+0x48>
 800a3b4:	eeb0 0a48 	vmov.f32	s0, s16
 800a3b8:	f000 fb2c 	bl	800aa14 <fabsf>
 800a3bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a3c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a3c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3c8:	dd0a      	ble.n	800a3e0 <asinf+0x48>
 800a3ca:	f7fd f9e5 	bl	8007798 <__errno>
 800a3ce:	ecbd 8b02 	vpop	{d8}
 800a3d2:	2321      	movs	r3, #33	; 0x21
 800a3d4:	6003      	str	r3, [r0, #0]
 800a3d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a3da:	4804      	ldr	r0, [pc, #16]	; (800a3ec <asinf+0x54>)
 800a3dc:	f000 bb22 	b.w	800aa24 <nanf>
 800a3e0:	eeb0 0a68 	vmov.f32	s0, s17
 800a3e4:	ecbd 8b02 	vpop	{d8}
 800a3e8:	bd08      	pop	{r3, pc}
 800a3ea:	bf00      	nop
 800a3ec:	0800b6c8 	.word	0x0800b6c8

0800a3f0 <atan2f>:
 800a3f0:	f000 b998 	b.w	800a724 <__ieee754_atan2f>

0800a3f4 <__ieee754_sqrt>:
 800a3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f8:	ec55 4b10 	vmov	r4, r5, d0
 800a3fc:	4e55      	ldr	r6, [pc, #340]	; (800a554 <__ieee754_sqrt+0x160>)
 800a3fe:	43ae      	bics	r6, r5
 800a400:	ee10 0a10 	vmov	r0, s0
 800a404:	ee10 3a10 	vmov	r3, s0
 800a408:	462a      	mov	r2, r5
 800a40a:	4629      	mov	r1, r5
 800a40c:	d110      	bne.n	800a430 <__ieee754_sqrt+0x3c>
 800a40e:	ee10 2a10 	vmov	r2, s0
 800a412:	462b      	mov	r3, r5
 800a414:	f7f6 f8f0 	bl	80005f8 <__aeabi_dmul>
 800a418:	4602      	mov	r2, r0
 800a41a:	460b      	mov	r3, r1
 800a41c:	4620      	mov	r0, r4
 800a41e:	4629      	mov	r1, r5
 800a420:	f7f5 ff34 	bl	800028c <__adddf3>
 800a424:	4604      	mov	r4, r0
 800a426:	460d      	mov	r5, r1
 800a428:	ec45 4b10 	vmov	d0, r4, r5
 800a42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a430:	2d00      	cmp	r5, #0
 800a432:	dc10      	bgt.n	800a456 <__ieee754_sqrt+0x62>
 800a434:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a438:	4330      	orrs	r0, r6
 800a43a:	d0f5      	beq.n	800a428 <__ieee754_sqrt+0x34>
 800a43c:	b15d      	cbz	r5, 800a456 <__ieee754_sqrt+0x62>
 800a43e:	ee10 2a10 	vmov	r2, s0
 800a442:	462b      	mov	r3, r5
 800a444:	ee10 0a10 	vmov	r0, s0
 800a448:	f7f5 ff1e 	bl	8000288 <__aeabi_dsub>
 800a44c:	4602      	mov	r2, r0
 800a44e:	460b      	mov	r3, r1
 800a450:	f7f6 f9fc 	bl	800084c <__aeabi_ddiv>
 800a454:	e7e6      	b.n	800a424 <__ieee754_sqrt+0x30>
 800a456:	1512      	asrs	r2, r2, #20
 800a458:	d074      	beq.n	800a544 <__ieee754_sqrt+0x150>
 800a45a:	07d4      	lsls	r4, r2, #31
 800a45c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a460:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a464:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a468:	bf5e      	ittt	pl
 800a46a:	0fda      	lsrpl	r2, r3, #31
 800a46c:	005b      	lslpl	r3, r3, #1
 800a46e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a472:	2400      	movs	r4, #0
 800a474:	0fda      	lsrs	r2, r3, #31
 800a476:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a47a:	107f      	asrs	r7, r7, #1
 800a47c:	005b      	lsls	r3, r3, #1
 800a47e:	2516      	movs	r5, #22
 800a480:	4620      	mov	r0, r4
 800a482:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a486:	1886      	adds	r6, r0, r2
 800a488:	428e      	cmp	r6, r1
 800a48a:	bfde      	ittt	le
 800a48c:	1b89      	suble	r1, r1, r6
 800a48e:	18b0      	addle	r0, r6, r2
 800a490:	18a4      	addle	r4, r4, r2
 800a492:	0049      	lsls	r1, r1, #1
 800a494:	3d01      	subs	r5, #1
 800a496:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a49a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a49e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a4a2:	d1f0      	bne.n	800a486 <__ieee754_sqrt+0x92>
 800a4a4:	462a      	mov	r2, r5
 800a4a6:	f04f 0e20 	mov.w	lr, #32
 800a4aa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a4ae:	4281      	cmp	r1, r0
 800a4b0:	eb06 0c05 	add.w	ip, r6, r5
 800a4b4:	dc02      	bgt.n	800a4bc <__ieee754_sqrt+0xc8>
 800a4b6:	d113      	bne.n	800a4e0 <__ieee754_sqrt+0xec>
 800a4b8:	459c      	cmp	ip, r3
 800a4ba:	d811      	bhi.n	800a4e0 <__ieee754_sqrt+0xec>
 800a4bc:	f1bc 0f00 	cmp.w	ip, #0
 800a4c0:	eb0c 0506 	add.w	r5, ip, r6
 800a4c4:	da43      	bge.n	800a54e <__ieee754_sqrt+0x15a>
 800a4c6:	2d00      	cmp	r5, #0
 800a4c8:	db41      	blt.n	800a54e <__ieee754_sqrt+0x15a>
 800a4ca:	f100 0801 	add.w	r8, r0, #1
 800a4ce:	1a09      	subs	r1, r1, r0
 800a4d0:	459c      	cmp	ip, r3
 800a4d2:	bf88      	it	hi
 800a4d4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800a4d8:	eba3 030c 	sub.w	r3, r3, ip
 800a4dc:	4432      	add	r2, r6
 800a4de:	4640      	mov	r0, r8
 800a4e0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a4e4:	f1be 0e01 	subs.w	lr, lr, #1
 800a4e8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a4ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a4f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a4f4:	d1db      	bne.n	800a4ae <__ieee754_sqrt+0xba>
 800a4f6:	430b      	orrs	r3, r1
 800a4f8:	d006      	beq.n	800a508 <__ieee754_sqrt+0x114>
 800a4fa:	1c50      	adds	r0, r2, #1
 800a4fc:	bf13      	iteet	ne
 800a4fe:	3201      	addne	r2, #1
 800a500:	3401      	addeq	r4, #1
 800a502:	4672      	moveq	r2, lr
 800a504:	f022 0201 	bicne.w	r2, r2, #1
 800a508:	1063      	asrs	r3, r4, #1
 800a50a:	0852      	lsrs	r2, r2, #1
 800a50c:	07e1      	lsls	r1, r4, #31
 800a50e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a512:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a516:	bf48      	it	mi
 800a518:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a51c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a520:	4614      	mov	r4, r2
 800a522:	e781      	b.n	800a428 <__ieee754_sqrt+0x34>
 800a524:	0ad9      	lsrs	r1, r3, #11
 800a526:	3815      	subs	r0, #21
 800a528:	055b      	lsls	r3, r3, #21
 800a52a:	2900      	cmp	r1, #0
 800a52c:	d0fa      	beq.n	800a524 <__ieee754_sqrt+0x130>
 800a52e:	02cd      	lsls	r5, r1, #11
 800a530:	d50a      	bpl.n	800a548 <__ieee754_sqrt+0x154>
 800a532:	f1c2 0420 	rsb	r4, r2, #32
 800a536:	fa23 f404 	lsr.w	r4, r3, r4
 800a53a:	1e55      	subs	r5, r2, #1
 800a53c:	4093      	lsls	r3, r2
 800a53e:	4321      	orrs	r1, r4
 800a540:	1b42      	subs	r2, r0, r5
 800a542:	e78a      	b.n	800a45a <__ieee754_sqrt+0x66>
 800a544:	4610      	mov	r0, r2
 800a546:	e7f0      	b.n	800a52a <__ieee754_sqrt+0x136>
 800a548:	0049      	lsls	r1, r1, #1
 800a54a:	3201      	adds	r2, #1
 800a54c:	e7ef      	b.n	800a52e <__ieee754_sqrt+0x13a>
 800a54e:	4680      	mov	r8, r0
 800a550:	e7bd      	b.n	800a4ce <__ieee754_sqrt+0xda>
 800a552:	bf00      	nop
 800a554:	7ff00000 	.word	0x7ff00000

0800a558 <__ieee754_asinf>:
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	ee10 5a10 	vmov	r5, s0
 800a55e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a562:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a566:	ed2d 8b04 	vpush	{d8-d9}
 800a56a:	d10c      	bne.n	800a586 <__ieee754_asinf+0x2e>
 800a56c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800a6e4 <__ieee754_asinf+0x18c>
 800a570:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800a6e8 <__ieee754_asinf+0x190>
 800a574:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a578:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a57c:	eeb0 0a67 	vmov.f32	s0, s15
 800a580:	ecbd 8b04 	vpop	{d8-d9}
 800a584:	bd38      	pop	{r3, r4, r5, pc}
 800a586:	dd04      	ble.n	800a592 <__ieee754_asinf+0x3a>
 800a588:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a58c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a590:	e7f6      	b.n	800a580 <__ieee754_asinf+0x28>
 800a592:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800a596:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800a59a:	da0b      	bge.n	800a5b4 <__ieee754_asinf+0x5c>
 800a59c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800a5a0:	da52      	bge.n	800a648 <__ieee754_asinf+0xf0>
 800a5a2:	eddf 7a52 	vldr	s15, [pc, #328]	; 800a6ec <__ieee754_asinf+0x194>
 800a5a6:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a5aa:	eef4 7ae8 	vcmpe.f32	s15, s17
 800a5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b2:	dce5      	bgt.n	800a580 <__ieee754_asinf+0x28>
 800a5b4:	f000 fa2e 	bl	800aa14 <fabsf>
 800a5b8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800a5bc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800a5c0:	ee20 8a08 	vmul.f32	s16, s0, s16
 800a5c4:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800a6f0 <__ieee754_asinf+0x198>
 800a5c8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800a6f4 <__ieee754_asinf+0x19c>
 800a5cc:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800a6f8 <__ieee754_asinf+0x1a0>
 800a5d0:	eea8 7a27 	vfma.f32	s14, s16, s15
 800a5d4:	eddf 7a49 	vldr	s15, [pc, #292]	; 800a6fc <__ieee754_asinf+0x1a4>
 800a5d8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a5dc:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800a700 <__ieee754_asinf+0x1a8>
 800a5e0:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a5e4:	eddf 7a47 	vldr	s15, [pc, #284]	; 800a704 <__ieee754_asinf+0x1ac>
 800a5e8:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a5ec:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a708 <__ieee754_asinf+0x1b0>
 800a5f0:	eea7 9a88 	vfma.f32	s18, s15, s16
 800a5f4:	eddf 7a45 	vldr	s15, [pc, #276]	; 800a70c <__ieee754_asinf+0x1b4>
 800a5f8:	eee8 7a07 	vfma.f32	s15, s16, s14
 800a5fc:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800a710 <__ieee754_asinf+0x1b8>
 800a600:	eea7 7a88 	vfma.f32	s14, s15, s16
 800a604:	eddf 7a43 	vldr	s15, [pc, #268]	; 800a714 <__ieee754_asinf+0x1bc>
 800a608:	eee7 7a08 	vfma.f32	s15, s14, s16
 800a60c:	eeb0 0a48 	vmov.f32	s0, s16
 800a610:	eee7 8a88 	vfma.f32	s17, s15, s16
 800a614:	f000 f926 	bl	800a864 <__ieee754_sqrtf>
 800a618:	4b3f      	ldr	r3, [pc, #252]	; (800a718 <__ieee754_asinf+0x1c0>)
 800a61a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800a61e:	429c      	cmp	r4, r3
 800a620:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800a624:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a628:	dd3d      	ble.n	800a6a6 <__ieee754_asinf+0x14e>
 800a62a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800a62e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800a71c <__ieee754_asinf+0x1c4>
 800a632:	eee0 7a26 	vfma.f32	s15, s0, s13
 800a636:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800a6e8 <__ieee754_asinf+0x190>
 800a63a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a63e:	2d00      	cmp	r5, #0
 800a640:	bfd8      	it	le
 800a642:	eeb1 0a40 	vnegle.f32	s0, s0
 800a646:	e79b      	b.n	800a580 <__ieee754_asinf+0x28>
 800a648:	ee60 7a00 	vmul.f32	s15, s0, s0
 800a64c:	eddf 6a28 	vldr	s13, [pc, #160]	; 800a6f0 <__ieee754_asinf+0x198>
 800a650:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800a6f4 <__ieee754_asinf+0x19c>
 800a654:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800a708 <__ieee754_asinf+0x1b0>
 800a658:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800a65c:	eddf 6a27 	vldr	s13, [pc, #156]	; 800a6fc <__ieee754_asinf+0x1a4>
 800a660:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a664:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a700 <__ieee754_asinf+0x1a8>
 800a668:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a66c:	eddf 6a25 	vldr	s13, [pc, #148]	; 800a704 <__ieee754_asinf+0x1ac>
 800a670:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a674:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800a6f8 <__ieee754_asinf+0x1a0>
 800a678:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a67c:	eddf 6a23 	vldr	s13, [pc, #140]	; 800a70c <__ieee754_asinf+0x1b4>
 800a680:	eee7 6a86 	vfma.f32	s13, s15, s12
 800a684:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800a710 <__ieee754_asinf+0x1b8>
 800a688:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800a68c:	eddf 6a21 	vldr	s13, [pc, #132]	; 800a714 <__ieee754_asinf+0x1bc>
 800a690:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a694:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a698:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800a69c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800a6a0:	eea0 0a27 	vfma.f32	s0, s0, s15
 800a6a4:	e76c      	b.n	800a580 <__ieee754_asinf+0x28>
 800a6a6:	ee10 3a10 	vmov	r3, s0
 800a6aa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a6ae:	f023 030f 	bic.w	r3, r3, #15
 800a6b2:	ee07 3a10 	vmov	s14, r3
 800a6b6:	eea7 8a47 	vfms.f32	s16, s14, s14
 800a6ba:	ee70 7a07 	vadd.f32	s15, s0, s14
 800a6be:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a6c2:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800a6c6:	eddf 7a07 	vldr	s15, [pc, #28]	; 800a6e4 <__ieee754_asinf+0x18c>
 800a6ca:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800a6ce:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800a6d2:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800a720 <__ieee754_asinf+0x1c8>
 800a6d6:	eeb0 6a40 	vmov.f32	s12, s0
 800a6da:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a6de:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a6e2:	e7aa      	b.n	800a63a <__ieee754_asinf+0xe2>
 800a6e4:	b33bbd2e 	.word	0xb33bbd2e
 800a6e8:	3fc90fdb 	.word	0x3fc90fdb
 800a6ec:	7149f2ca 	.word	0x7149f2ca
 800a6f0:	3811ef08 	.word	0x3811ef08
 800a6f4:	3a4f7f04 	.word	0x3a4f7f04
 800a6f8:	3e2aaaab 	.word	0x3e2aaaab
 800a6fc:	bd241146 	.word	0xbd241146
 800a700:	3e4e0aa8 	.word	0x3e4e0aa8
 800a704:	bea6b090 	.word	0xbea6b090
 800a708:	3d9dc62e 	.word	0x3d9dc62e
 800a70c:	bf303361 	.word	0xbf303361
 800a710:	4001572d 	.word	0x4001572d
 800a714:	c019d139 	.word	0xc019d139
 800a718:	3f799999 	.word	0x3f799999
 800a71c:	333bbd2e 	.word	0x333bbd2e
 800a720:	3f490fdb 	.word	0x3f490fdb

0800a724 <__ieee754_atan2f>:
 800a724:	ee10 2a90 	vmov	r2, s1
 800a728:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a72c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a730:	b510      	push	{r4, lr}
 800a732:	eef0 7a40 	vmov.f32	s15, s0
 800a736:	dc06      	bgt.n	800a746 <__ieee754_atan2f+0x22>
 800a738:	ee10 0a10 	vmov	r0, s0
 800a73c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a740:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a744:	dd04      	ble.n	800a750 <__ieee754_atan2f+0x2c>
 800a746:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a74a:	eeb0 0a67 	vmov.f32	s0, s15
 800a74e:	bd10      	pop	{r4, pc}
 800a750:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a754:	d103      	bne.n	800a75e <__ieee754_atan2f+0x3a>
 800a756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a75a:	f000 b887 	b.w	800a86c <atanf>
 800a75e:	1794      	asrs	r4, r2, #30
 800a760:	f004 0402 	and.w	r4, r4, #2
 800a764:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a768:	b943      	cbnz	r3, 800a77c <__ieee754_atan2f+0x58>
 800a76a:	2c02      	cmp	r4, #2
 800a76c:	d05e      	beq.n	800a82c <__ieee754_atan2f+0x108>
 800a76e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a840 <__ieee754_atan2f+0x11c>
 800a772:	2c03      	cmp	r4, #3
 800a774:	bf08      	it	eq
 800a776:	eef0 7a47 	vmoveq.f32	s15, s14
 800a77a:	e7e6      	b.n	800a74a <__ieee754_atan2f+0x26>
 800a77c:	b941      	cbnz	r1, 800a790 <__ieee754_atan2f+0x6c>
 800a77e:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a844 <__ieee754_atan2f+0x120>
 800a782:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800a848 <__ieee754_atan2f+0x124>
 800a786:	2800      	cmp	r0, #0
 800a788:	bfb8      	it	lt
 800a78a:	eef0 7a40 	vmovlt.f32	s15, s0
 800a78e:	e7dc      	b.n	800a74a <__ieee754_atan2f+0x26>
 800a790:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a794:	d110      	bne.n	800a7b8 <__ieee754_atan2f+0x94>
 800a796:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a79a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a79e:	d107      	bne.n	800a7b0 <__ieee754_atan2f+0x8c>
 800a7a0:	2c02      	cmp	r4, #2
 800a7a2:	d846      	bhi.n	800a832 <__ieee754_atan2f+0x10e>
 800a7a4:	4b29      	ldr	r3, [pc, #164]	; (800a84c <__ieee754_atan2f+0x128>)
 800a7a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a7aa:	edd4 7a00 	vldr	s15, [r4]
 800a7ae:	e7cc      	b.n	800a74a <__ieee754_atan2f+0x26>
 800a7b0:	2c02      	cmp	r4, #2
 800a7b2:	d841      	bhi.n	800a838 <__ieee754_atan2f+0x114>
 800a7b4:	4b26      	ldr	r3, [pc, #152]	; (800a850 <__ieee754_atan2f+0x12c>)
 800a7b6:	e7f6      	b.n	800a7a6 <__ieee754_atan2f+0x82>
 800a7b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a7bc:	d0df      	beq.n	800a77e <__ieee754_atan2f+0x5a>
 800a7be:	1a5b      	subs	r3, r3, r1
 800a7c0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800a7c4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a7c8:	da1a      	bge.n	800a800 <__ieee754_atan2f+0xdc>
 800a7ca:	2a00      	cmp	r2, #0
 800a7cc:	da01      	bge.n	800a7d2 <__ieee754_atan2f+0xae>
 800a7ce:	313c      	adds	r1, #60	; 0x3c
 800a7d0:	db19      	blt.n	800a806 <__ieee754_atan2f+0xe2>
 800a7d2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a7d6:	f000 f91d 	bl	800aa14 <fabsf>
 800a7da:	f000 f847 	bl	800a86c <atanf>
 800a7de:	eef0 7a40 	vmov.f32	s15, s0
 800a7e2:	2c01      	cmp	r4, #1
 800a7e4:	d012      	beq.n	800a80c <__ieee754_atan2f+0xe8>
 800a7e6:	2c02      	cmp	r4, #2
 800a7e8:	d017      	beq.n	800a81a <__ieee754_atan2f+0xf6>
 800a7ea:	2c00      	cmp	r4, #0
 800a7ec:	d0ad      	beq.n	800a74a <__ieee754_atan2f+0x26>
 800a7ee:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a854 <__ieee754_atan2f+0x130>
 800a7f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a7f6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a858 <__ieee754_atan2f+0x134>
 800a7fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a7fe:	e7a4      	b.n	800a74a <__ieee754_atan2f+0x26>
 800a800:	eddf 7a10 	vldr	s15, [pc, #64]	; 800a844 <__ieee754_atan2f+0x120>
 800a804:	e7ed      	b.n	800a7e2 <__ieee754_atan2f+0xbe>
 800a806:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a85c <__ieee754_atan2f+0x138>
 800a80a:	e7ea      	b.n	800a7e2 <__ieee754_atan2f+0xbe>
 800a80c:	ee17 3a90 	vmov	r3, s15
 800a810:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a814:	ee07 3a90 	vmov	s15, r3
 800a818:	e797      	b.n	800a74a <__ieee754_atan2f+0x26>
 800a81a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a854 <__ieee754_atan2f+0x130>
 800a81e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a822:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800a858 <__ieee754_atan2f+0x134>
 800a826:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a82a:	e78e      	b.n	800a74a <__ieee754_atan2f+0x26>
 800a82c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800a858 <__ieee754_atan2f+0x134>
 800a830:	e78b      	b.n	800a74a <__ieee754_atan2f+0x26>
 800a832:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a860 <__ieee754_atan2f+0x13c>
 800a836:	e788      	b.n	800a74a <__ieee754_atan2f+0x26>
 800a838:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a85c <__ieee754_atan2f+0x138>
 800a83c:	e785      	b.n	800a74a <__ieee754_atan2f+0x26>
 800a83e:	bf00      	nop
 800a840:	c0490fdb 	.word	0xc0490fdb
 800a844:	3fc90fdb 	.word	0x3fc90fdb
 800a848:	bfc90fdb 	.word	0xbfc90fdb
 800a84c:	0800b7d4 	.word	0x0800b7d4
 800a850:	0800b7e0 	.word	0x0800b7e0
 800a854:	33bbbd2e 	.word	0x33bbbd2e
 800a858:	40490fdb 	.word	0x40490fdb
 800a85c:	00000000 	.word	0x00000000
 800a860:	3f490fdb 	.word	0x3f490fdb

0800a864 <__ieee754_sqrtf>:
 800a864:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a868:	4770      	bx	lr
	...

0800a86c <atanf>:
 800a86c:	b538      	push	{r3, r4, r5, lr}
 800a86e:	ee10 5a10 	vmov	r5, s0
 800a872:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a876:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800a87a:	eef0 7a40 	vmov.f32	s15, s0
 800a87e:	db10      	blt.n	800a8a2 <atanf+0x36>
 800a880:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a884:	dd04      	ble.n	800a890 <atanf+0x24>
 800a886:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a88a:	eeb0 0a67 	vmov.f32	s0, s15
 800a88e:	bd38      	pop	{r3, r4, r5, pc}
 800a890:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800a9c8 <atanf+0x15c>
 800a894:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800a9cc <atanf+0x160>
 800a898:	2d00      	cmp	r5, #0
 800a89a:	bfd8      	it	le
 800a89c:	eef0 7a40 	vmovle.f32	s15, s0
 800a8a0:	e7f3      	b.n	800a88a <atanf+0x1e>
 800a8a2:	4b4b      	ldr	r3, [pc, #300]	; (800a9d0 <atanf+0x164>)
 800a8a4:	429c      	cmp	r4, r3
 800a8a6:	dc10      	bgt.n	800a8ca <atanf+0x5e>
 800a8a8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800a8ac:	da0a      	bge.n	800a8c4 <atanf+0x58>
 800a8ae:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a9d4 <atanf+0x168>
 800a8b2:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a8b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8ba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8c2:	dce2      	bgt.n	800a88a <atanf+0x1e>
 800a8c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8c8:	e013      	b.n	800a8f2 <atanf+0x86>
 800a8ca:	f000 f8a3 	bl	800aa14 <fabsf>
 800a8ce:	4b42      	ldr	r3, [pc, #264]	; (800a9d8 <atanf+0x16c>)
 800a8d0:	429c      	cmp	r4, r3
 800a8d2:	dc4f      	bgt.n	800a974 <atanf+0x108>
 800a8d4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800a8d8:	429c      	cmp	r4, r3
 800a8da:	dc41      	bgt.n	800a960 <atanf+0xf4>
 800a8dc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a8e0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a8e4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a8ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a8f2:	1c5a      	adds	r2, r3, #1
 800a8f4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a8f8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a9dc <atanf+0x170>
 800a8fc:	eddf 5a38 	vldr	s11, [pc, #224]	; 800a9e0 <atanf+0x174>
 800a900:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800a9e4 <atanf+0x178>
 800a904:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a908:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a90c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a9e8 <atanf+0x17c>
 800a910:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a914:	eddf 5a35 	vldr	s11, [pc, #212]	; 800a9ec <atanf+0x180>
 800a918:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a91c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a9f0 <atanf+0x184>
 800a920:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a924:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a9f4 <atanf+0x188>
 800a928:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a92c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800a9f8 <atanf+0x18c>
 800a930:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a934:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a9fc <atanf+0x190>
 800a938:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a93c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800aa00 <atanf+0x194>
 800a940:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a944:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800aa04 <atanf+0x198>
 800a948:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a94c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a950:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a954:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a958:	d121      	bne.n	800a99e <atanf+0x132>
 800a95a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a95e:	e794      	b.n	800a88a <atanf+0x1e>
 800a960:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a964:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a968:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a96c:	2301      	movs	r3, #1
 800a96e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a972:	e7be      	b.n	800a8f2 <atanf+0x86>
 800a974:	4b24      	ldr	r3, [pc, #144]	; (800aa08 <atanf+0x19c>)
 800a976:	429c      	cmp	r4, r3
 800a978:	dc0b      	bgt.n	800a992 <atanf+0x126>
 800a97a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800a97e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a982:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a986:	2302      	movs	r3, #2
 800a988:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a98c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a990:	e7af      	b.n	800a8f2 <atanf+0x86>
 800a992:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a996:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a99a:	2303      	movs	r3, #3
 800a99c:	e7a9      	b.n	800a8f2 <atanf+0x86>
 800a99e:	4a1b      	ldr	r2, [pc, #108]	; (800aa0c <atanf+0x1a0>)
 800a9a0:	491b      	ldr	r1, [pc, #108]	; (800aa10 <atanf+0x1a4>)
 800a9a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a9a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a9aa:	ed93 0a00 	vldr	s0, [r3]
 800a9ae:	ee37 7a40 	vsub.f32	s14, s14, s0
 800a9b2:	ed92 0a00 	vldr	s0, [r2]
 800a9b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9ba:	2d00      	cmp	r5, #0
 800a9bc:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a9c0:	bfb8      	it	lt
 800a9c2:	eef1 7a67 	vneglt.f32	s15, s15
 800a9c6:	e760      	b.n	800a88a <atanf+0x1e>
 800a9c8:	3fc90fdb 	.word	0x3fc90fdb
 800a9cc:	bfc90fdb 	.word	0xbfc90fdb
 800a9d0:	3edfffff 	.word	0x3edfffff
 800a9d4:	7149f2ca 	.word	0x7149f2ca
 800a9d8:	3f97ffff 	.word	0x3f97ffff
 800a9dc:	3c8569d7 	.word	0x3c8569d7
 800a9e0:	3d4bda59 	.word	0x3d4bda59
 800a9e4:	bd6ef16b 	.word	0xbd6ef16b
 800a9e8:	3d886b35 	.word	0x3d886b35
 800a9ec:	3dba2e6e 	.word	0x3dba2e6e
 800a9f0:	3e124925 	.word	0x3e124925
 800a9f4:	3eaaaaab 	.word	0x3eaaaaab
 800a9f8:	bd15a221 	.word	0xbd15a221
 800a9fc:	bd9d8795 	.word	0xbd9d8795
 800aa00:	bde38e38 	.word	0xbde38e38
 800aa04:	be4ccccd 	.word	0xbe4ccccd
 800aa08:	401bffff 	.word	0x401bffff
 800aa0c:	0800b7ec 	.word	0x0800b7ec
 800aa10:	0800b7fc 	.word	0x0800b7fc

0800aa14 <fabsf>:
 800aa14:	ee10 3a10 	vmov	r3, s0
 800aa18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa1c:	ee00 3a10 	vmov	s0, r3
 800aa20:	4770      	bx	lr
	...

0800aa24 <nanf>:
 800aa24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800aa2c <nanf+0x8>
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	7fc00000 	.word	0x7fc00000

0800aa30 <_init>:
 800aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa32:	bf00      	nop
 800aa34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa36:	bc08      	pop	{r3}
 800aa38:	469e      	mov	lr, r3
 800aa3a:	4770      	bx	lr

0800aa3c <_fini>:
 800aa3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3e:	bf00      	nop
 800aa40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa42:	bc08      	pop	{r3}
 800aa44:	469e      	mov	lr, r3
 800aa46:	4770      	bx	lr
