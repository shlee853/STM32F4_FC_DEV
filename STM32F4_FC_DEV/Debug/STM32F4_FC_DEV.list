
STM32F4_FC_DEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001a80  08001a80  00011a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a98  08001a98  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08001a98  08001a98  00011a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001aa0  08001aa0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001aa0  08001aa0  00011aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001aa4  08001aa4  00011aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004839  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000010f5  00000000  00000000  0002486d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000548  00000000  00000000  00025968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000004b0  00000000  00000000  00025eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018e43  00000000  00000000  00026360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004265  00000000  00000000  0003f1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b4c5  00000000  00000000  00043408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000ce8cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001460  00000000  00000000  000ce920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001a68 	.word	0x08001a68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001a68 	.word	0x08001a68

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004d8:	4907      	ldr	r1, [pc, #28]	; (80004f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4313      	orrs	r3, r2
 80004de:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4013      	ands	r3, r2
 80004e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ea:	68fb      	ldr	r3, [r7, #12]
}
 80004ec:	bf00      	nop
 80004ee:	3714      	adds	r7, #20
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	40023800 	.word	0x40023800

080004fc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	041a      	lsls	r2, r3, #16
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	619a      	str	r2, [r3, #24]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
	...

0800051c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000522:	463b      	mov	r3, r7
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]
 8000530:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000532:	2080      	movs	r0, #128	; 0x80
 8000534:	f7ff ffca 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000538:	2004      	movs	r0, #4
 800053a:	f7ff ffc7 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800053e:	2002      	movs	r0, #2
 8000540:	f7ff ffc4 	bl	80004cc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000544:	2120      	movs	r1, #32
 8000546:	480b      	ldr	r0, [pc, #44]	; (8000574 <MX_GPIO_Init+0x58>)
 8000548:	f7ff ffd8 	bl	80004fc <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800054c:	2320      	movs	r3, #32
 800054e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000550:	2301      	movs	r3, #1
 8000552:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800055c:	2300      	movs	r3, #0
 800055e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000560:	463b      	mov	r3, r7
 8000562:	4619      	mov	r1, r3
 8000564:	4803      	ldr	r0, [pc, #12]	; (8000574 <MX_GPIO_Init+0x58>)
 8000566:	f000 fd8f 	bl	8001088 <LL_GPIO_Init>

}
 800056a:	bf00      	nop
 800056c:	3718      	adds	r7, #24
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40020400 	.word	0x40020400

08000578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f003 0307 	and.w	r3, r3, #7
 8000586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <__NVIC_SetPriorityGrouping+0x44>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000594:	4013      	ands	r3, r2
 8000596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005aa:	4a04      	ldr	r2, [pc, #16]	; (80005bc <__NVIC_SetPriorityGrouping+0x44>)
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	60d3      	str	r3, [r2, #12]
}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <__NVIC_GetPriorityGrouping+0x18>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	0a1b      	lsrs	r3, r3, #8
 80005ca:	f003 0307 	and.w	r3, r3, #7
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	6039      	str	r1, [r7, #0]
 80005e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	db0a      	blt.n	8000606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	490c      	ldr	r1, [pc, #48]	; (8000628 <__NVIC_SetPriority+0x4c>)
 80005f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fa:	0112      	lsls	r2, r2, #4
 80005fc:	b2d2      	uxtb	r2, r2
 80005fe:	440b      	add	r3, r1
 8000600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000604:	e00a      	b.n	800061c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4908      	ldr	r1, [pc, #32]	; (800062c <__NVIC_SetPriority+0x50>)
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	f003 030f 	and.w	r3, r3, #15
 8000612:	3b04      	subs	r3, #4
 8000614:	0112      	lsls	r2, r2, #4
 8000616:	b2d2      	uxtb	r2, r2
 8000618:	440b      	add	r3, r1
 800061a:	761a      	strb	r2, [r3, #24]
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	e000e100 	.word	0xe000e100
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000630:	b480      	push	{r7}
 8000632:	b089      	sub	sp, #36	; 0x24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f003 0307 	and.w	r3, r3, #7
 8000642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	f1c3 0307 	rsb	r3, r3, #7
 800064a:	2b04      	cmp	r3, #4
 800064c:	bf28      	it	cs
 800064e:	2304      	movcs	r3, #4
 8000650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000652:	69fb      	ldr	r3, [r7, #28]
 8000654:	3304      	adds	r3, #4
 8000656:	2b06      	cmp	r3, #6
 8000658:	d902      	bls.n	8000660 <NVIC_EncodePriority+0x30>
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	3b03      	subs	r3, #3
 800065e:	e000      	b.n	8000662 <NVIC_EncodePriority+0x32>
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000668:	69bb      	ldr	r3, [r7, #24]
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	43da      	mvns	r2, r3
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	401a      	ands	r2, r3
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000678:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	fa01 f303 	lsl.w	r3, r1, r3
 8000682:	43d9      	mvns	r1, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000688:	4313      	orrs	r3, r2
         );
}
 800068a:	4618      	mov	r0, r3
 800068c:	3724      	adds	r7, #36	; 0x24
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <LL_RCC_HSE_Enable+0x1c>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <LL_RCC_HSE_Enable+0x1c>)
 80006a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006a6:	6013      	str	r3, [r2, #0]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800

080006b8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <LL_RCC_HSE_IsReady+0x24>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80006c8:	bf0c      	ite	eq
 80006ca:	2301      	moveq	r3, #1
 80006cc:	2300      	movne	r3, #0
 80006ce:	b2db      	uxtb	r3, r3
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800

080006e0 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <LL_RCC_SetSysClkSource+0x24>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	f023 0203 	bic.w	r2, r3, #3
 80006f0:	4904      	ldr	r1, [pc, #16]	; (8000704 <LL_RCC_SetSysClkSource+0x24>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4313      	orrs	r3, r2
 80006f6:	608b      	str	r3, [r1, #8]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	40023800 	.word	0x40023800

08000708 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <LL_RCC_GetSysClkSource+0x18>)
 800070e:	689b      	ldr	r3, [r3, #8]
 8000710:	f003 030c 	and.w	r3, r3, #12
}
 8000714:	4618      	mov	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800

08000724 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <LL_RCC_SetAHBPrescaler+0x24>)
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000734:	4904      	ldr	r1, [pc, #16]	; (8000748 <LL_RCC_SetAHBPrescaler+0x24>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4313      	orrs	r3, r2
 800073a:	608b      	str	r3, [r1, #8]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	40023800 	.word	0x40023800

0800074c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800075c:	4904      	ldr	r1, [pc, #16]	; (8000770 <LL_RCC_SetAPB1Prescaler+0x24>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4313      	orrs	r3, r2
 8000762:	608b      	str	r3, [r1, #8]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	40023800 	.word	0x40023800

08000774 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <LL_RCC_SetAPB2Prescaler+0x24>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000784:	4904      	ldr	r1, [pc, #16]	; (8000798 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4313      	orrs	r3, r2
 800078a:	608b      	str	r3, [r1, #8]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	40023800 	.word	0x40023800

0800079c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <LL_RCC_PLL_Enable+0x1c>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <LL_RCC_PLL_Enable+0x1c>)
 80007a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007aa:	6013      	str	r3, [r2, #0]
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <LL_RCC_PLL_IsReady+0x24>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80007cc:	bf0c      	ite	eq
 80007ce:	2301      	moveq	r3, #1
 80007d0:	2300      	movne	r3, #0
 80007d2:	b2db      	uxtb	r3, r3
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800

080007e4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
 80007f0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80007f4:	685a      	ldr	r2, [r3, #4]
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80007f8:	4013      	ands	r3, r2
 80007fa:	68f9      	ldr	r1, [r7, #12]
 80007fc:	68ba      	ldr	r2, [r7, #8]
 80007fe:	4311      	orrs	r1, r2
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	0192      	lsls	r2, r2, #6
 8000804:	430a      	orrs	r2, r1
 8000806:	4908      	ldr	r1, [pc, #32]	; (8000828 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000808:	4313      	orrs	r3, r2
 800080a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000814:	4904      	ldr	r1, [pc, #16]	; (8000828 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	4313      	orrs	r3, r2
 800081a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	40023800 	.word	0x40023800
 800082c:	ffbf8000 	.word	0xffbf8000

08000830 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <LL_APB1_GRP1_EnableClock+0x2c>)
 800083a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800083c:	4907      	ldr	r1, [pc, #28]	; (800085c <LL_APB1_GRP1_EnableClock+0x2c>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4313      	orrs	r3, r2
 8000842:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000846:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4013      	ands	r3, r2
 800084c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800084e:	68fb      	ldr	r3, [r7, #12]
}
 8000850:	bf00      	nop
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	40023800 	.word	0x40023800

08000860 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <LL_APB2_GRP1_EnableClock+0x2c>)
 800086a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800086c:	4907      	ldr	r1, [pc, #28]	; (800088c <LL_APB2_GRP1_EnableClock+0x2c>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4313      	orrs	r3, r2
 8000872:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000876:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4013      	ands	r3, r2
 800087c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800087e:	68fb      	ldr	r3, [r7, #12]
}
 8000880:	bf00      	nop
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	40023800 	.word	0x40023800

08000890 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <LL_FLASH_SetLatency+0x24>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f023 0207 	bic.w	r2, r3, #7
 80008a0:	4904      	ldr	r1, [pc, #16]	; (80008b4 <LL_FLASH_SetLatency+0x24>)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	600b      	str	r3, [r1, #0]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	40023c00 	.word	0x40023c00

080008b8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <LL_FLASH_GetLatency+0x18>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f003 0307 	and.w	r3, r3, #7
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40023c00 	.word	0x40023c00

080008d4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80008e4:	4904      	ldr	r1, [pc, #16]	; (80008f8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	600b      	str	r3, [r1, #0]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	40007000 	.word	0x40007000

080008fc <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b089      	sub	sp, #36	; 0x24
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	330c      	adds	r3, #12
 8000908:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	e853 3f00 	ldrex	r3, [r3]
 8000910:	60bb      	str	r3, [r7, #8]
   return(result);
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	f043 0320 	orr.w	r3, r3, #32
 8000918:	61fb      	str	r3, [r7, #28]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	330c      	adds	r3, #12
 800091e:	69fa      	ldr	r2, [r7, #28]
 8000920:	61ba      	str	r2, [r7, #24]
 8000922:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000924:	6979      	ldr	r1, [r7, #20]
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	e841 2300 	strex	r3, r2, [r1]
 800092c:	613b      	str	r3, [r7, #16]
   return(result);
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d1e7      	bne.n	8000904 <LL_USART_EnableIT_RXNE+0x8>
}
 8000934:	bf00      	nop
 8000936:	bf00      	nop
 8000938:	3724      	adds	r7, #36	; 0x24
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
 800094a:	460b      	mov	r3, r1
 800094c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800094e:	78fa      	ldrb	r2, [r7, #3]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	605a      	str	r2, [r3, #4]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000970:	68fa      	ldr	r2, [r7, #12]
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	4013      	ands	r3, r2
 8000976:	041a      	lsls	r2, r3, #16
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	43d9      	mvns	r1, r3
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	400b      	ands	r3, r1
 8000980:	431a      	orrs	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	619a      	str	r2, [r3, #24]
}
 8000986:	bf00      	nop
 8000988:	3714      	adds	r7, #20
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000998:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800099c:	f7ff ff60 	bl	8000860 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80009a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80009a4:	f7ff ff44 	bl	8000830 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f7ff fde5 	bl	8000578 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80009ae:	f7ff fe07 	bl	80005c0 <__NVIC_GetPriorityGrouping>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2200      	movs	r2, #0
 80009b6:	210f      	movs	r1, #15
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fe39 	bl	8000630 <NVIC_EncodePriority>
 80009be:	4603      	mov	r3, r0
 80009c0:	4619      	mov	r1, r3
 80009c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009c6:	f7ff fe09 	bl	80005dc <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ca:	f000 f821 	bl	8000a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ce:	f7ff fda5 	bl	800051c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80009d2:	f000 f9cb 	bl	8000d6c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_USART_EnableIT_RXNE(USART6);	// 인터럽트 활성화
 80009d6:	480a      	ldr	r0, [pc, #40]	; (8000a00 <main+0x6c>)
 80009d8:	f7ff ff90 	bl	80008fc <LL_USART_EnableIT_RXNE>
  {
  //	  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
  //	  LL_mDelay(1000);
  //	  LL_USART_TransmitData8(USART6,'B');

	  if(flag_INT_USART6 == 1){
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <main+0x70>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d1fb      	bne.n	80009dc <main+0x48>
		  flag_INT_USART6 =0;
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <main+0x70>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
		  LL_USART_TransmitData8(USART6,rxd); // 호스트로부터 수신한 데이터를 그대로 다시 보냄
 80009ea:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <main+0x74>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	4619      	mov	r1, r3
 80009f0:	4803      	ldr	r0, [pc, #12]	; (8000a00 <main+0x6c>)
 80009f2:	f7ff ffa6 	bl	8000942 <LL_USART_TransmitData8>
		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 80009f6:	2120      	movs	r1, #32
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <main+0x78>)
 80009fa:	f7ff ffb1 	bl	8000960 <LL_GPIO_TogglePin>
	  if(flag_INT_USART6 == 1){
 80009fe:	e7ed      	b.n	80009dc <main+0x48>
 8000a00:	40011400 	.word	0x40011400
 8000a04:	20000020 	.word	0x20000020
 8000a08:	20000021 	.word	0x20000021
 8000a0c:	40020400 	.word	0x40020400

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8000a14:	2005      	movs	r0, #5
 8000a16:	f7ff ff3b 	bl	8000890 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000a1a:	bf00      	nop
 8000a1c:	f7ff ff4c 	bl	80008b8 <LL_FLASH_GetLatency>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b05      	cmp	r3, #5
 8000a24:	d1fa      	bne.n	8000a1c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000a26:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a2a:	f7ff ff53 	bl	80008d4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8000a2e:	f7ff fe33 	bl	8000698 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000a32:	bf00      	nop
 8000a34:	f7ff fe40 	bl	80006b8 <LL_RCC_HSE_IsReady>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d1fa      	bne.n	8000a34 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 8000a3e:	2300      	movs	r3, #0
 8000a40:	22a8      	movs	r2, #168	; 0xa8
 8000a42:	2104      	movs	r1, #4
 8000a44:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000a48:	f7ff fecc 	bl	80007e4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000a4c:	f7ff fea6 	bl	800079c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000a50:	bf00      	nop
 8000a52:	f7ff feb3 	bl	80007bc <LL_RCC_PLL_IsReady>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d1fa      	bne.n	8000a52 <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff fe61 	bl	8000724 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000a62:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000a66:	f7ff fe71 	bl	800074c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000a6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a6e:	f7ff fe81 	bl	8000774 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000a72:	2002      	movs	r0, #2
 8000a74:	f7ff fe34 	bl	80006e0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000a78:	bf00      	nop
 8000a7a:	f7ff fe45 	bl	8000708 <LL_RCC_GetSysClkSource>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b08      	cmp	r3, #8
 8000a82:	d1fa      	bne.n	8000a7a <SystemClock_Config+0x6a>
  {

  }
  LL_Init1msTick(168000000);
 8000a84:	4803      	ldr	r0, [pc, #12]	; (8000a94 <SystemClock_Config+0x84>)
 8000a86:	f000 ffad 	bl	80019e4 <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8000a8a:	4802      	ldr	r0, [pc, #8]	; (8000a94 <SystemClock_Config+0x84>)
 8000a8c:	f000 ffb8 	bl	8001a00 <LL_SetSystemCoreClock>
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	0a037a00 	.word	0x0a037a00

08000a98 <LL_USART_IsActiveFlag_RXNE>:
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f003 0320 	and.w	r3, r3, #32
 8000aa8:	2b20      	cmp	r3, #32
 8000aaa:	bf0c      	ite	eq
 8000aac:	2301      	moveq	r3, #1
 8000aae:	2300      	movne	r3, #0
 8000ab0:	b2db      	uxtb	r3, r3
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <LL_USART_ClearFlag_RXNE>:
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f06f 0220 	mvn.w	r2, #32
 8000acc:	601a      	str	r2, [r3, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <LL_USART_ReceiveData8>:
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	b2db      	uxtb	r3, r3
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6)) // 인터럽트중 USART6인지 확인
 8000b50:	480a      	ldr	r0, [pc, #40]	; (8000b7c <USART6_IRQHandler+0x30>)
 8000b52:	f7ff ffa1 	bl	8000a98 <LL_USART_IsActiveFlag_RXNE>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d00c      	beq.n	8000b76 <USART6_IRQHandler+0x2a>
	{
			LL_USART_ClearFlag_RXNE(USART6); // 맞으면 비트 클리어
 8000b5c:	4807      	ldr	r0, [pc, #28]	; (8000b7c <USART6_IRQHandler+0x30>)
 8000b5e:	f7ff ffae 	bl	8000abe <LL_USART_ClearFlag_RXNE>
			rxd = LL_USART_ReceiveData8(USART6); // 데이터 수신
 8000b62:	4806      	ldr	r0, [pc, #24]	; (8000b7c <USART6_IRQHandler+0x30>)
 8000b64:	f7ff ffb9 	bl	8000ada <LL_USART_ReceiveData8>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <USART6_IRQHandler+0x34>)
 8000b6e:	701a      	strb	r2, [r3, #0]
			flag_INT_USART6 = 1; // flag 클리어
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <USART6_IRQHandler+0x38>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40011400 	.word	0x40011400
 8000b80:	20000021 	.word	0x20000021
 8000b84:	20000020 	.word	0x20000020

08000b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_GetPriorityGrouping>:
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	f003 0307 	and.w	r3, r3, #7
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_EnableIRQ>:
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db0b      	blt.n	8000bf2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	f003 021f 	and.w	r2, r3, #31
 8000be0:	4907      	ldr	r1, [pc, #28]	; (8000c00 <__NVIC_EnableIRQ+0x38>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	095b      	lsrs	r3, r3, #5
 8000be8:	2001      	movs	r0, #1
 8000bea:	fa00 f202 	lsl.w	r2, r0, r2
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000e100 	.word	0xe000e100

08000c04 <__NVIC_SetPriority>:
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	db0a      	blt.n	8000c2e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	490c      	ldr	r1, [pc, #48]	; (8000c50 <__NVIC_SetPriority+0x4c>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	440b      	add	r3, r1
 8000c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c2c:	e00a      	b.n	8000c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4908      	ldr	r1, [pc, #32]	; (8000c54 <__NVIC_SetPriority+0x50>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	3b04      	subs	r3, #4
 8000c3c:	0112      	lsls	r2, r2, #4
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	440b      	add	r3, r1
 8000c42:	761a      	strb	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <NVIC_EncodePriority>:
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	; 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f1c3 0307 	rsb	r3, r3, #7
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	bf28      	it	cs
 8000c76:	2304      	movcs	r3, #4
 8000c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d902      	bls.n	8000c88 <NVIC_EncodePriority+0x30>
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3b03      	subs	r3, #3
 8000c86:	e000      	b.n	8000c8a <NVIC_EncodePriority+0x32>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43da      	mvns	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43d9      	mvns	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	4313      	orrs	r3, r2
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3724      	adds	r7, #36	; 0x24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <LL_AHB1_GRP1_EnableClock>:
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ccc:	4907      	ldr	r1, [pc, #28]	; (8000cec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	40023800 	.word	0x40023800

08000cf0 <LL_APB2_GRP1_EnableClock>:
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000cfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000cfc:	4907      	ldr	r1, [pc, #28]	; (8000d1c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	40023800 	.word	0x40023800

08000d20 <LL_USART_Enable>:
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	60da      	str	r2, [r3, #12]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_USART_ConfigAsyncMode>:
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	615a      	str	r2, [r3, #20]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08e      	sub	sp, #56	; 0x38
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]
 8000d7c:	609a      	str	r2, [r3, #8]
 8000d7e:	60da      	str	r2, [r3, #12]
 8000d80:	611a      	str	r2, [r3, #16]
 8000d82:	615a      	str	r2, [r3, #20]
 8000d84:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
 8000d94:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8000d96:	2020      	movs	r0, #32
 8000d98:	f7ff ffaa 	bl	8000cf0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000d9c:	2004      	movs	r0, #4
 8000d9e:	f7ff ff8f 	bl	8000cc0 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000da2:	23c0      	movs	r3, #192	; 0xc0
 8000da4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000da6:	2302      	movs	r3, #2
 8000da8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000db6:	2308      	movs	r3, #8
 8000db8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4819      	ldr	r0, [pc, #100]	; (8000e24 <MX_USART6_UART_Init+0xb8>)
 8000dc0:	f000 f962 	bl	8001088 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000dc4:	f7ff fef2 	bl	8000bac <__NVIC_GetPriorityGrouping>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff42 	bl	8000c58 <NVIC_EncodePriority>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	2047      	movs	r0, #71	; 0x47
 8000dda:	f7ff ff13 	bl	8000c04 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8000dde:	2047      	movs	r0, #71	; 0x47
 8000de0:	f7ff fef2 	bl	8000bc8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000de4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000de8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000df6:	230c      	movs	r3, #12
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	4807      	ldr	r0, [pc, #28]	; (8000e28 <MX_USART6_UART_Init+0xbc>)
 8000e0a:	f000 fd51 	bl	80018b0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8000e0e:	4806      	ldr	r0, [pc, #24]	; (8000e28 <MX_USART6_UART_Init+0xbc>)
 8000e10:	f7ff ff96 	bl	8000d40 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8000e14:	4804      	ldr	r0, [pc, #16]	; (8000e28 <MX_USART6_UART_Init+0xbc>)
 8000e16:	f7ff ff83 	bl	8000d20 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e1a:	bf00      	nop
 8000e1c:	3738      	adds	r7, #56	; 0x38
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40020800 	.word	0x40020800
 8000e28:	40011400 	.word	0x40011400

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e32:	490e      	ldr	r1, [pc, #56]	; (8000e6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e34:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e48:	4c0b      	ldr	r4, [pc, #44]	; (8000e78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e56:	f7ff fe97 	bl	8000b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f000 fde1 	bl	8001a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fd99 	bl	8000994 <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000e70:	08001aa8 	.word	0x08001aa8
  ldr r2, =_sbss
 8000e74:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000e78:	20000024 	.word	0x20000024

08000e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>

08000e7e <LL_GPIO_SetPinMode>:
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b089      	sub	sp, #36	; 0x24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	60f8      	str	r0, [r7, #12]
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	fa93 f3a3 	rbit	r3, r3
 8000e98:	613b      	str	r3, [r7, #16]
  return result;
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	fab3 f383 	clz	r3, r3
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2103      	movs	r1, #3
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	401a      	ands	r2, r3
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa93 f3a3 	rbit	r3, r3
 8000eb8:	61bb      	str	r3, [r7, #24]
  return result;
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	fab3 f383 	clz	r3, r3
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	601a      	str	r2, [r3, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	3724      	adds	r7, #36	; 0x24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <LL_GPIO_SetPinOutputType>:
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	401a      	ands	r2, r3
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	fb01 f303 	mul.w	r3, r1, r3
 8000efa:	431a      	orrs	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	605a      	str	r2, [r3, #4]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_GPIO_SetPinSpeed>:
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa93 f3a3 	rbit	r3, r3
 8000f26:	613b      	str	r3, [r7, #16]
  return result;
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	fab3 f383 	clz	r3, r3
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2103      	movs	r1, #3
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	fa93 f3a3 	rbit	r3, r3
 8000f46:	61bb      	str	r3, [r7, #24]
  return result;
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fab3 f383 	clz	r3, r3
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	fa01 f303 	lsl.w	r3, r1, r3
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	609a      	str	r2, [r3, #8]
}
 8000f5e:	bf00      	nop
 8000f60:	3724      	adds	r7, #36	; 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <LL_GPIO_SetPinPull>:
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b089      	sub	sp, #36	; 0x24
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	60f8      	str	r0, [r7, #12]
 8000f72:	60b9      	str	r1, [r7, #8]
 8000f74:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	68da      	ldr	r2, [r3, #12]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	fa93 f3a3 	rbit	r3, r3
 8000f84:	613b      	str	r3, [r7, #16]
  return result;
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	fab3 f383 	clz	r3, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	2103      	movs	r1, #3
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	401a      	ands	r2, r3
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa93 f3a3 	rbit	r3, r3
 8000fa4:	61bb      	str	r3, [r7, #24]
  return result;
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	fab3 f383 	clz	r3, r3
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	60da      	str	r2, [r3, #12]
}
 8000fbc:	bf00      	nop
 8000fbe:	3724      	adds	r7, #36	; 0x24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <LL_GPIO_SetAFPin_0_7>:
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6a1a      	ldr	r2, [r3, #32]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa93 f3a3 	rbit	r3, r3
 8000fe2:	613b      	str	r3, [r7, #16]
  return result;
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	fab3 f383 	clz	r3, r3
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	210f      	movs	r1, #15
 8000ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	fa93 f3a3 	rbit	r3, r3
 8001002:	61bb      	str	r3, [r7, #24]
  return result;
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fab3 f383 	clz	r3, r3
 800100a:	b2db      	uxtb	r3, r3
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	fa01 f303 	lsl.w	r3, r1, r3
 8001014:	431a      	orrs	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	621a      	str	r2, [r3, #32]
}
 800101a:	bf00      	nop
 800101c:	3724      	adds	r7, #36	; 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <LL_GPIO_SetAFPin_8_15>:
{
 8001026:	b480      	push	{r7}
 8001028:	b089      	sub	sp, #36	; 0x24
 800102a:	af00      	add	r7, sp, #0
 800102c:	60f8      	str	r0, [r7, #12]
 800102e:	60b9      	str	r1, [r7, #8]
 8001030:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa93 f3a3 	rbit	r3, r3
 8001042:	613b      	str	r3, [r7, #16]
  return result;
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	fab3 f383 	clz	r3, r3
 800104a:	b2db      	uxtb	r3, r3
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	210f      	movs	r1, #15
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	401a      	ands	r2, r3
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	0a1b      	lsrs	r3, r3, #8
 800105c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa93 f3a3 	rbit	r3, r3
 8001064:	61bb      	str	r3, [r7, #24]
  return result;
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	fab3 f383 	clz	r3, r3
 800106c:	b2db      	uxtb	r3, r3
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	6879      	ldr	r1, [r7, #4]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	431a      	orrs	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800107c:	bf00      	nop
 800107e:	3724      	adds	r7, #36	; 0x24
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa93 f3a3 	rbit	r3, r3
 80010a6:	613b      	str	r3, [r7, #16]
  return result;
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	fab3 f383 	clz	r3, r3
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80010b2:	e050      	b.n	8001156 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	2101      	movs	r1, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d042      	beq.n	8001150 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d003      	beq.n	80010da <LL_GPIO_Init+0x52>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d10d      	bne.n	80010f6 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	461a      	mov	r2, r3
 80010e0:	69b9      	ldr	r1, [r7, #24]
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ff12 	bl	8000f0c <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	461a      	mov	r2, r3
 80010ee:	69b9      	ldr	r1, [r7, #24]
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff fef3 	bl	8000edc <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	461a      	mov	r2, r3
 80010fc:	69b9      	ldr	r1, [r7, #24]
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ff33 	bl	8000f6a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b02      	cmp	r3, #2
 800110a:	d11a      	bne.n	8001142 <LL_GPIO_Init+0xba>
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	fa93 f3a3 	rbit	r3, r3
 8001116:	60bb      	str	r3, [r7, #8]
  return result;
 8001118:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800111a:	fab3 f383 	clz	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b07      	cmp	r3, #7
 8001122:	d807      	bhi.n	8001134 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	461a      	mov	r2, r3
 800112a:	69b9      	ldr	r1, [r7, #24]
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff4b 	bl	8000fc8 <LL_GPIO_SetAFPin_0_7>
 8001132:	e006      	b.n	8001142 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	461a      	mov	r2, r3
 800113a:	69b9      	ldr	r1, [r7, #24]
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff72 	bl	8001026 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	461a      	mov	r2, r3
 8001148:	69b9      	ldr	r1, [r7, #24]
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff fe97 	bl	8000e7e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	3301      	adds	r3, #1
 8001154:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa22 f303 	lsr.w	r3, r2, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1a7      	bne.n	80010b4 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3720      	adds	r7, #32
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <LL_RCC_GetSysClkSource>:
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <LL_RCC_GetSysClkSource+0x18>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 030c 	and.w	r3, r3, #12
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800

0800118c <LL_RCC_GetAHBPrescaler>:
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <LL_RCC_GetAHBPrescaler+0x18>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800

080011a8 <LL_RCC_GetAPB1Prescaler>:
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800

080011c4 <LL_RCC_GetAPB2Prescaler>:
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <LL_RCC_GetAPB2Prescaler+0x18>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <LL_RCC_PLL_GetMainSource+0x18>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800

080011fc <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <LL_RCC_PLL_GetN+0x18>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	099b      	lsrs	r3, r3, #6
 8001206:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40023800 	.word	0x40023800

08001218 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800121c:	4b04      	ldr	r3, [pc, #16]	; (8001230 <LL_RCC_PLL_GetP+0x18>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800

08001234 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <LL_RCC_PLL_GetDivider+0x18>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8001258:	f000 f820 	bl	800129c <RCC_GetSystemClockFreq>
 800125c:	4602      	mov	r2, r0
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f840 	bl	80012ec <RCC_GetHCLKClockFreq>
 800126c:	4602      	mov	r2, r0
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4618      	mov	r0, r3
 8001278:	f000 f84e 	bl	8001318 <RCC_GetPCLK1ClockFreq>
 800127c:	4602      	mov	r2, r0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f85a 	bl	8001340 <RCC_GetPCLK2ClockFreq>
 800128c:	4602      	mov	r2, r0
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	60da      	str	r2, [r3, #12]
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80012a6:	f7ff ff63 	bl	8001170 <LL_RCC_GetSysClkSource>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b08      	cmp	r3, #8
 80012ae:	d00c      	beq.n	80012ca <RCC_GetSystemClockFreq+0x2e>
 80012b0:	2b08      	cmp	r3, #8
 80012b2:	d80f      	bhi.n	80012d4 <RCC_GetSystemClockFreq+0x38>
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d002      	beq.n	80012be <RCC_GetSystemClockFreq+0x22>
 80012b8:	2b04      	cmp	r3, #4
 80012ba:	d003      	beq.n	80012c4 <RCC_GetSystemClockFreq+0x28>
 80012bc:	e00a      	b.n	80012d4 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <RCC_GetSystemClockFreq+0x48>)
 80012c0:	607b      	str	r3, [r7, #4]
      break;
 80012c2:	e00a      	b.n	80012da <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <RCC_GetSystemClockFreq+0x4c>)
 80012c6:	607b      	str	r3, [r7, #4]
      break;
 80012c8:	e007      	b.n	80012da <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80012ca:	2008      	movs	r0, #8
 80012cc:	f000 f84c 	bl	8001368 <RCC_PLL_GetFreqDomain_SYS>
 80012d0:	6078      	str	r0, [r7, #4]
      break;
 80012d2:	e002      	b.n	80012da <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <RCC_GetSystemClockFreq+0x48>)
 80012d6:	607b      	str	r3, [r7, #4]
      break;
 80012d8:	bf00      	nop
  }

  return frequency;
 80012da:	687b      	ldr	r3, [r7, #4]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	00f42400 	.word	0x00f42400
 80012e8:	007a1200 	.word	0x007a1200

080012ec <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80012f4:	f7ff ff4a 	bl	800118c <LL_RCC_GetAHBPrescaler>
 80012f8:	4603      	mov	r3, r0
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	f003 030f 	and.w	r3, r3, #15
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <RCC_GetHCLKClockFreq+0x28>)
 8001302:	5cd3      	ldrb	r3, [r2, r3]
 8001304:	461a      	mov	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	40d3      	lsrs	r3, r2
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	08001a80 	.word	0x08001a80

08001318 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001320:	f7ff ff42 	bl	80011a8 <LL_RCC_GetAPB1Prescaler>
 8001324:	4603      	mov	r3, r0
 8001326:	0a9b      	lsrs	r3, r3, #10
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <RCC_GetPCLK1ClockFreq+0x24>)
 800132a:	5cd3      	ldrb	r3, [r2, r3]
 800132c:	461a      	mov	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	40d3      	lsrs	r3, r2
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	08001a90 	.word	0x08001a90

08001340 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001348:	f7ff ff3c 	bl	80011c4 <LL_RCC_GetAPB2Prescaler>
 800134c:	4603      	mov	r3, r0
 800134e:	0b5b      	lsrs	r3, r3, #13
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <RCC_GetPCLK2ClockFreq+0x24>)
 8001352:	5cd3      	ldrb	r3, [r2, r3]
 8001354:	461a      	mov	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	40d3      	lsrs	r3, r2
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	08001a90 	.word	0x08001a90

08001368 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800137c:	f7ff ff30 	bl	80011e0 <LL_RCC_PLL_GetMainSource>
 8001380:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d004      	beq.n	8001392 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800138e:	d003      	beq.n	8001398 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8001390:	e005      	b.n	800139e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001394:	617b      	str	r3, [r7, #20]
      break;
 8001396:	e005      	b.n	80013a4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800139a:	617b      	str	r3, [r7, #20]
      break;
 800139c:	e002      	b.n	80013a4 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80013a0:	617b      	str	r3, [r7, #20]
      break;
 80013a2:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d113      	bne.n	80013d2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80013aa:	f7ff ff43 	bl	8001234 <LL_RCC_PLL_GetDivider>
 80013ae:	4602      	mov	r2, r0
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fbb3 f4f2 	udiv	r4, r3, r2
 80013b6:	f7ff ff21 	bl	80011fc <LL_RCC_PLL_GetN>
 80013ba:	4603      	mov	r3, r0
 80013bc:	fb03 f404 	mul.w	r4, r3, r4
 80013c0:	f7ff ff2a 	bl	8001218 <LL_RCC_PLL_GetP>
 80013c4:	4603      	mov	r3, r0
 80013c6:	0c1b      	lsrs	r3, r3, #16
 80013c8:	3301      	adds	r3, #1
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	fbb4 f3f3 	udiv	r3, r4, r3
 80013d0:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80013d2:	693b      	ldr	r3, [r7, #16]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	371c      	adds	r7, #28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd90      	pop	{r4, r7, pc}
 80013dc:	00f42400 	.word	0x00f42400
 80013e0:	007a1200 	.word	0x007a1200

080013e4 <LL_USART_IsEnabled>:
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013f8:	bf0c      	ite	eq
 80013fa:	2301      	moveq	r3, #1
 80013fc:	2300      	movne	r3, #0
 80013fe:	b2db      	uxtb	r3, r3
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <LL_USART_SetStopBitsLength>:
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	431a      	orrs	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	611a      	str	r2, [r3, #16]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <LL_USART_SetHWFlowCtrl>:
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	615a      	str	r2, [r3, #20]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <LL_USART_SetBaudRate>:
{
 8001458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800145c:	b0c0      	sub	sp, #256	; 0x100
 800145e:	af00      	add	r7, sp, #0
 8001460:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001464:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8001468:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800146c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001478:	f040 810c 	bne.w	8001694 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800147c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001480:	2200      	movs	r2, #0
 8001482:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001486:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800148a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800148e:	4622      	mov	r2, r4
 8001490:	462b      	mov	r3, r5
 8001492:	1891      	adds	r1, r2, r2
 8001494:	6639      	str	r1, [r7, #96]	; 0x60
 8001496:	415b      	adcs	r3, r3
 8001498:	667b      	str	r3, [r7, #100]	; 0x64
 800149a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800149e:	4621      	mov	r1, r4
 80014a0:	eb12 0801 	adds.w	r8, r2, r1
 80014a4:	4629      	mov	r1, r5
 80014a6:	eb43 0901 	adc.w	r9, r3, r1
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	f04f 0300 	mov.w	r3, #0
 80014b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014be:	4690      	mov	r8, r2
 80014c0:	4699      	mov	r9, r3
 80014c2:	4623      	mov	r3, r4
 80014c4:	eb18 0303 	adds.w	r3, r8, r3
 80014c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80014cc:	462b      	mov	r3, r5
 80014ce:	eb49 0303 	adc.w	r3, r9, r3
 80014d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80014d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80014da:	2200      	movs	r2, #0
 80014dc:	469a      	mov	sl, r3
 80014de:	4693      	mov	fp, r2
 80014e0:	eb1a 030a 	adds.w	r3, sl, sl
 80014e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80014e6:	eb4b 030b 	adc.w	r3, fp, fp
 80014ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80014ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80014f4:	f7fe fe68 	bl	80001c8 <__aeabi_uldivmod>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4b64      	ldr	r3, [pc, #400]	; (8001690 <LL_USART_SetBaudRate+0x238>)
 80014fe:	fba3 2302 	umull	r2, r3, r3, r2
 8001502:	095b      	lsrs	r3, r3, #5
 8001504:	b29b      	uxth	r3, r3
 8001506:	011b      	lsls	r3, r3, #4
 8001508:	b29c      	uxth	r4, r3
 800150a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800150e:	2200      	movs	r2, #0
 8001510:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001514:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001518:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800151c:	4642      	mov	r2, r8
 800151e:	464b      	mov	r3, r9
 8001520:	1891      	adds	r1, r2, r2
 8001522:	6539      	str	r1, [r7, #80]	; 0x50
 8001524:	415b      	adcs	r3, r3
 8001526:	657b      	str	r3, [r7, #84]	; 0x54
 8001528:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800152c:	4641      	mov	r1, r8
 800152e:	1851      	adds	r1, r2, r1
 8001530:	64b9      	str	r1, [r7, #72]	; 0x48
 8001532:	4649      	mov	r1, r9
 8001534:	414b      	adcs	r3, r1
 8001536:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	f04f 0300 	mov.w	r3, #0
 8001540:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8001544:	4659      	mov	r1, fp
 8001546:	00cb      	lsls	r3, r1, #3
 8001548:	4651      	mov	r1, sl
 800154a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800154e:	4651      	mov	r1, sl
 8001550:	00ca      	lsls	r2, r1, #3
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	4603      	mov	r3, r0
 8001558:	4642      	mov	r2, r8
 800155a:	189b      	adds	r3, r3, r2
 800155c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001560:	464b      	mov	r3, r9
 8001562:	460a      	mov	r2, r1
 8001564:	eb42 0303 	adc.w	r3, r2, r3
 8001568:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800156c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001570:	2200      	movs	r2, #0
 8001572:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001576:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800157a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800157e:	460b      	mov	r3, r1
 8001580:	18db      	adds	r3, r3, r3
 8001582:	643b      	str	r3, [r7, #64]	; 0x40
 8001584:	4613      	mov	r3, r2
 8001586:	eb42 0303 	adc.w	r3, r2, r3
 800158a:	647b      	str	r3, [r7, #68]	; 0x44
 800158c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001590:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8001594:	f7fe fe18 	bl	80001c8 <__aeabi_uldivmod>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4611      	mov	r1, r2
 800159e:	4b3c      	ldr	r3, [pc, #240]	; (8001690 <LL_USART_SetBaudRate+0x238>)
 80015a0:	fba3 2301 	umull	r2, r3, r3, r1
 80015a4:	095b      	lsrs	r3, r3, #5
 80015a6:	2264      	movs	r2, #100	; 0x64
 80015a8:	fb02 f303 	mul.w	r3, r2, r3
 80015ac:	1acb      	subs	r3, r1, r3
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80015b4:	4b36      	ldr	r3, [pc, #216]	; (8001690 <LL_USART_SetBaudRate+0x238>)
 80015b6:	fba3 2302 	umull	r2, r3, r3, r2
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	b29b      	uxth	r3, r3
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	4423      	add	r3, r4
 80015ca:	b29c      	uxth	r4, r3
 80015cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80015d0:	2200      	movs	r2, #0
 80015d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80015d6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80015da:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80015de:	4642      	mov	r2, r8
 80015e0:	464b      	mov	r3, r9
 80015e2:	1891      	adds	r1, r2, r2
 80015e4:	63b9      	str	r1, [r7, #56]	; 0x38
 80015e6:	415b      	adcs	r3, r3
 80015e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015ea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80015ee:	4641      	mov	r1, r8
 80015f0:	1851      	adds	r1, r2, r1
 80015f2:	6339      	str	r1, [r7, #48]	; 0x30
 80015f4:	4649      	mov	r1, r9
 80015f6:	414b      	adcs	r3, r1
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	f04f 0300 	mov.w	r3, #0
 8001602:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001606:	4659      	mov	r1, fp
 8001608:	00cb      	lsls	r3, r1, #3
 800160a:	4651      	mov	r1, sl
 800160c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001610:	4651      	mov	r1, sl
 8001612:	00ca      	lsls	r2, r1, #3
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	4603      	mov	r3, r0
 800161a:	4642      	mov	r2, r8
 800161c:	189b      	adds	r3, r3, r2
 800161e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001622:	464b      	mov	r3, r9
 8001624:	460a      	mov	r2, r1
 8001626:	eb42 0303 	adc.w	r3, r2, r3
 800162a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800162e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001632:	2200      	movs	r2, #0
 8001634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001638:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800163c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8001640:	460b      	mov	r3, r1
 8001642:	18db      	adds	r3, r3, r3
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
 8001646:	4613      	mov	r3, r2
 8001648:	eb42 0303 	adc.w	r3, r2, r3
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800164e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001652:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001656:	f7fe fdb7 	bl	80001c8 <__aeabi_uldivmod>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <LL_USART_SetBaudRate+0x238>)
 8001660:	fba3 1302 	umull	r1, r3, r3, r2
 8001664:	095b      	lsrs	r3, r3, #5
 8001666:	2164      	movs	r1, #100	; 0x64
 8001668:	fb01 f303 	mul.w	r3, r1, r3
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	3332      	adds	r3, #50	; 0x32
 8001672:	4a07      	ldr	r2, [pc, #28]	; (8001690 <LL_USART_SetBaudRate+0x238>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	095b      	lsrs	r3, r3, #5
 800167a:	b29b      	uxth	r3, r3
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	b29b      	uxth	r3, r3
 8001682:	4423      	add	r3, r4
 8001684:	b29b      	uxth	r3, r3
 8001686:	461a      	mov	r2, r3
 8001688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800168c:	609a      	str	r2, [r3, #8]
}
 800168e:	e107      	b.n	80018a0 <LL_USART_SetBaudRate+0x448>
 8001690:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001694:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001698:	2200      	movs	r2, #0
 800169a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800169e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80016a2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80016a6:	4642      	mov	r2, r8
 80016a8:	464b      	mov	r3, r9
 80016aa:	1891      	adds	r1, r2, r2
 80016ac:	6239      	str	r1, [r7, #32]
 80016ae:	415b      	adcs	r3, r3
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
 80016b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016b6:	4641      	mov	r1, r8
 80016b8:	1854      	adds	r4, r2, r1
 80016ba:	4649      	mov	r1, r9
 80016bc:	eb43 0501 	adc.w	r5, r3, r1
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	f04f 0300 	mov.w	r3, #0
 80016c8:	00eb      	lsls	r3, r5, #3
 80016ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016ce:	00e2      	lsls	r2, r4, #3
 80016d0:	4614      	mov	r4, r2
 80016d2:	461d      	mov	r5, r3
 80016d4:	4643      	mov	r3, r8
 80016d6:	18e3      	adds	r3, r4, r3
 80016d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016dc:	464b      	mov	r3, r9
 80016de:	eb45 0303 	adc.w	r3, r5, r3
 80016e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80016e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80016ea:	2200      	movs	r2, #0
 80016ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016f0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001700:	4629      	mov	r1, r5
 8001702:	008b      	lsls	r3, r1, #2
 8001704:	4621      	mov	r1, r4
 8001706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800170a:	4621      	mov	r1, r4
 800170c:	008a      	lsls	r2, r1, #2
 800170e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001712:	f7fe fd59 	bl	80001c8 <__aeabi_uldivmod>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4b64      	ldr	r3, [pc, #400]	; (80018ac <LL_USART_SetBaudRate+0x454>)
 800171c:	fba3 2302 	umull	r2, r3, r3, r2
 8001720:	095b      	lsrs	r3, r3, #5
 8001722:	b29b      	uxth	r3, r3
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	b29c      	uxth	r4, r3
 8001728:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800172c:	2200      	movs	r2, #0
 800172e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001732:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001736:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800173a:	4642      	mov	r2, r8
 800173c:	464b      	mov	r3, r9
 800173e:	1891      	adds	r1, r2, r2
 8001740:	61b9      	str	r1, [r7, #24]
 8001742:	415b      	adcs	r3, r3
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800174a:	4641      	mov	r1, r8
 800174c:	1851      	adds	r1, r2, r1
 800174e:	6139      	str	r1, [r7, #16]
 8001750:	4649      	mov	r1, r9
 8001752:	414b      	adcs	r3, r1
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001762:	4659      	mov	r1, fp
 8001764:	00cb      	lsls	r3, r1, #3
 8001766:	4651      	mov	r1, sl
 8001768:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800176c:	4651      	mov	r1, sl
 800176e:	00ca      	lsls	r2, r1, #3
 8001770:	4610      	mov	r0, r2
 8001772:	4619      	mov	r1, r3
 8001774:	4603      	mov	r3, r0
 8001776:	4642      	mov	r2, r8
 8001778:	189b      	adds	r3, r3, r2
 800177a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800177e:	464b      	mov	r3, r9
 8001780:	460a      	mov	r2, r1
 8001782:	eb42 0303 	adc.w	r3, r2, r3
 8001786:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800178a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800178e:	2200      	movs	r2, #0
 8001790:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001794:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80017a4:	4649      	mov	r1, r9
 80017a6:	008b      	lsls	r3, r1, #2
 80017a8:	4641      	mov	r1, r8
 80017aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017ae:	4641      	mov	r1, r8
 80017b0:	008a      	lsls	r2, r1, #2
 80017b2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80017b6:	f7fe fd07 	bl	80001c8 <__aeabi_uldivmod>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <LL_USART_SetBaudRate+0x454>)
 80017c0:	fba3 1302 	umull	r1, r3, r3, r2
 80017c4:	095b      	lsrs	r3, r3, #5
 80017c6:	2164      	movs	r1, #100	; 0x64
 80017c8:	fb01 f303 	mul.w	r3, r1, r3
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	3332      	adds	r3, #50	; 0x32
 80017d2:	4a36      	ldr	r2, [pc, #216]	; (80018ac <LL_USART_SetBaudRate+0x454>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	095b      	lsrs	r3, r3, #5
 80017da:	b29b      	uxth	r3, r3
 80017dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	4423      	add	r3, r4
 80017e4:	b29c      	uxth	r4, r3
 80017e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80017ea:	2200      	movs	r2, #0
 80017ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80017ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80017f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80017f4:	4642      	mov	r2, r8
 80017f6:	464b      	mov	r3, r9
 80017f8:	1891      	adds	r1, r2, r2
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	415b      	adcs	r3, r3
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001804:	4641      	mov	r1, r8
 8001806:	1851      	adds	r1, r2, r1
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	4649      	mov	r1, r9
 800180c:	414b      	adcs	r3, r1
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800181c:	4659      	mov	r1, fp
 800181e:	00cb      	lsls	r3, r1, #3
 8001820:	4651      	mov	r1, sl
 8001822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001826:	4651      	mov	r1, sl
 8001828:	00ca      	lsls	r2, r1, #3
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	4603      	mov	r3, r0
 8001830:	4642      	mov	r2, r8
 8001832:	189b      	adds	r3, r3, r2
 8001834:	673b      	str	r3, [r7, #112]	; 0x70
 8001836:	464b      	mov	r3, r9
 8001838:	460a      	mov	r2, r1
 800183a:	eb42 0303 	adc.w	r3, r2, r3
 800183e:	677b      	str	r3, [r7, #116]	; 0x74
 8001840:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001844:	2200      	movs	r2, #0
 8001846:	66bb      	str	r3, [r7, #104]	; 0x68
 8001848:	66fa      	str	r2, [r7, #108]	; 0x6c
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8001856:	4649      	mov	r1, r9
 8001858:	008b      	lsls	r3, r1, #2
 800185a:	4641      	mov	r1, r8
 800185c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001860:	4641      	mov	r1, r8
 8001862:	008a      	lsls	r2, r1, #2
 8001864:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001868:	f7fe fcae 	bl	80001c8 <__aeabi_uldivmod>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <LL_USART_SetBaudRate+0x454>)
 8001872:	fba3 1302 	umull	r1, r3, r3, r2
 8001876:	095b      	lsrs	r3, r3, #5
 8001878:	2164      	movs	r1, #100	; 0x64
 800187a:	fb01 f303 	mul.w	r3, r1, r3
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	3332      	adds	r3, #50	; 0x32
 8001884:	4a09      	ldr	r2, [pc, #36]	; (80018ac <LL_USART_SetBaudRate+0x454>)
 8001886:	fba2 2303 	umull	r2, r3, r2, r3
 800188a:	095b      	lsrs	r3, r3, #5
 800188c:	b29b      	uxth	r3, r3
 800188e:	f003 030f 	and.w	r3, r3, #15
 8001892:	b29b      	uxth	r3, r3
 8001894:	4423      	add	r3, r4
 8001896:	b29b      	uxth	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800189e:	609a      	str	r2, [r3, #8]
}
 80018a0:	bf00      	nop
 80018a2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80018a6:	46bd      	mov	sp, r7
 80018a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ac:	51eb851f 	.word	0x51eb851f

080018b0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fd8e 	bl	80013e4 <LL_USART_IsEnabled>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d15e      	bne.n	800198c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80018d6:	f023 030c 	bic.w	r3, r3, #12
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	6851      	ldr	r1, [r2, #4]
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	68d2      	ldr	r2, [r2, #12]
 80018e2:	4311      	orrs	r1, r2
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	6912      	ldr	r2, [r2, #16]
 80018e8:	4311      	orrs	r1, r2
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	6992      	ldr	r2, [r2, #24]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	431a      	orrs	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	4619      	mov	r1, r3
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff fd85 	bl	800140c <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	4619      	mov	r1, r3
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff fd92 	bl	8001432 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800190e:	f107 0308 	add.w	r3, r7, #8
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fc9c 	bl	8001250 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a1f      	ldr	r2, [pc, #124]	; (8001998 <LL_USART_Init+0xe8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d102      	bne.n	8001926 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	61bb      	str	r3, [r7, #24]
 8001924:	e021      	b.n	800196a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a1c      	ldr	r2, [pc, #112]	; (800199c <LL_USART_Init+0xec>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d102      	bne.n	8001934 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	61bb      	str	r3, [r7, #24]
 8001932:	e01a      	b.n	800196a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a1a      	ldr	r2, [pc, #104]	; (80019a0 <LL_USART_Init+0xf0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d102      	bne.n	8001942 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	61bb      	str	r3, [r7, #24]
 8001940:	e013      	b.n	800196a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a17      	ldr	r2, [pc, #92]	; (80019a4 <LL_USART_Init+0xf4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d102      	bne.n	8001950 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	61bb      	str	r3, [r7, #24]
 800194e:	e00c      	b.n	800196a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <LL_USART_Init+0xf8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d102      	bne.n	800195e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	61bb      	str	r3, [r7, #24]
 800195c:	e005      	b.n	800196a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a12      	ldr	r2, [pc, #72]	; (80019ac <LL_USART_Init+0xfc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d101      	bne.n	800196a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00d      	beq.n	800198c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d009      	beq.n	800198c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8001978:	2300      	movs	r3, #0
 800197a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	699a      	ldr	r2, [r3, #24]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	69b9      	ldr	r1, [r7, #24]
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff fd66 	bl	8001458 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800198c:	7ffb      	ldrb	r3, [r7, #31]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3720      	adds	r7, #32
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40011000 	.word	0x40011000
 800199c:	40004400 	.word	0x40004400
 80019a0:	40004800 	.word	0x40004800
 80019a4:	40011400 	.word	0x40011400
 80019a8:	40004c00 	.word	0x40004c00
 80019ac:	40005000 	.word	0x40005000

080019b0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <LL_InitTick+0x30>)
 80019c4:	3b01      	subs	r3, #1
 80019c6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <LL_InitTick+0x30>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <LL_InitTick+0x30>)
 80019d0:	2205      	movs	r2, #5
 80019d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e010 	.word	0xe000e010

080019e4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80019ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ffdd 	bl	80019b0 <LL_InitTick>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <LL_SetSystemCoreClock+0x1c>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000000 	.word	0x20000000

08001a20 <__libc_init_array>:
 8001a20:	b570      	push	{r4, r5, r6, lr}
 8001a22:	4d0d      	ldr	r5, [pc, #52]	; (8001a58 <__libc_init_array+0x38>)
 8001a24:	4c0d      	ldr	r4, [pc, #52]	; (8001a5c <__libc_init_array+0x3c>)
 8001a26:	1b64      	subs	r4, r4, r5
 8001a28:	10a4      	asrs	r4, r4, #2
 8001a2a:	2600      	movs	r6, #0
 8001a2c:	42a6      	cmp	r6, r4
 8001a2e:	d109      	bne.n	8001a44 <__libc_init_array+0x24>
 8001a30:	4d0b      	ldr	r5, [pc, #44]	; (8001a60 <__libc_init_array+0x40>)
 8001a32:	4c0c      	ldr	r4, [pc, #48]	; (8001a64 <__libc_init_array+0x44>)
 8001a34:	f000 f818 	bl	8001a68 <_init>
 8001a38:	1b64      	subs	r4, r4, r5
 8001a3a:	10a4      	asrs	r4, r4, #2
 8001a3c:	2600      	movs	r6, #0
 8001a3e:	42a6      	cmp	r6, r4
 8001a40:	d105      	bne.n	8001a4e <__libc_init_array+0x2e>
 8001a42:	bd70      	pop	{r4, r5, r6, pc}
 8001a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a48:	4798      	blx	r3
 8001a4a:	3601      	adds	r6, #1
 8001a4c:	e7ee      	b.n	8001a2c <__libc_init_array+0xc>
 8001a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a52:	4798      	blx	r3
 8001a54:	3601      	adds	r6, #1
 8001a56:	e7f2      	b.n	8001a3e <__libc_init_array+0x1e>
 8001a58:	08001aa0 	.word	0x08001aa0
 8001a5c:	08001aa0 	.word	0x08001aa0
 8001a60:	08001aa0 	.word	0x08001aa0
 8001a64:	08001aa4 	.word	0x08001aa4

08001a68 <_init>:
 8001a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a6a:	bf00      	nop
 8001a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a6e:	bc08      	pop	{r3}
 8001a70:	469e      	mov	lr, r3
 8001a72:	4770      	bx	lr

08001a74 <_fini>:
 8001a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a76:	bf00      	nop
 8001a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a7a:	bc08      	pop	{r3}
 8001a7c:	469e      	mov	lr, r3
 8001a7e:	4770      	bx	lr
