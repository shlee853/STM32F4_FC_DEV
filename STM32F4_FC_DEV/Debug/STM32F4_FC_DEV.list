
STM32F4_FC_DEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001654  0800dba0  0800dba0  0001dba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f1f4  0800f1f4  00020bb8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f1f4  0800f1f4  0001f1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f1fc  0800f1fc  00020bb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f1fc  0800f1fc  0001f1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f200  0800f200  0001f200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000bb8  20000000  0800f204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020bb8  2**0
                  CONTENTS
 10 .bss          000017c0  20000bb8  20000bb8  00020bb8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002378  20002378  00020bb8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020bb8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f4b6  00000000  00000000  00020be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b1a  00000000  00000000  0004009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001830  00000000  00000000  00045bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001610  00000000  00000000  000473e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028c3d  00000000  00000000  000489f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e3bc  00000000  00000000  00071635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dca0f  00000000  00000000  0008f9f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016c400  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000775c  00000000  00000000  0016c450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000bb8 	.word	0x20000bb8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800db84 	.word	0x0800db84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000bbc 	.word	0x20000bbc
 80001cc:	0800db84 	.word	0x0800db84

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <LL_DMA_SetDataLength+0x44>)
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4413      	add	r3, r2
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	0c1b      	lsrs	r3, r3, #16
 8000f6a:	041b      	lsls	r3, r3, #16
 8000f6c:	4908      	ldr	r1, [pc, #32]	; (8000f90 <LL_DMA_SetDataLength+0x44>)
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	440a      	add	r2, r1
 8000f72:	7812      	ldrb	r2, [r2, #0]
 8000f74:	4611      	mov	r1, r2
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	440a      	add	r2, r1
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	604b      	str	r3, [r1, #4]
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	0800ed8c 	.word	0x0800ed8c

08000f94 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <LL_DMA_SetMemoryAddress+0x2c>)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4413      	add	r3, r2
 8000fae:	461a      	mov	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	0800ed8c 	.word	0x0800ed8c

08000fc4 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <LL_DMA_SetPeriphAddress+0x2c>)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4413      	add	r3, r2
 8000fde:	461a      	mov	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6093      	str	r3, [r2, #8]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	0800ed8c 	.word	0x0800ed8c

08000ff4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000ffe:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <LL_DMA_EnableIT_TC+0x3c>)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4908      	ldr	r1, [pc, #32]	; (8001030 <LL_DMA_EnableIT_TC+0x3c>)
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	440a      	add	r2, r1
 8001014:	7812      	ldrb	r2, [r2, #0]
 8001016:	4611      	mov	r1, r2
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	440a      	add	r2, r1
 800101c:	f043 0310 	orr.w	r3, r3, #16
 8001020:	6013      	str	r3, [r2, #0]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	0800ed8c 	.word	0x0800ed8c

08001034 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3314      	adds	r3, #20
 8001040:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	e853 3f00 	ldrex	r3, [r3]
 8001048:	60bb      	str	r3, [r7, #8]
   return(result);
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001050:	61fb      	str	r3, [r7, #28]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3314      	adds	r3, #20
 8001056:	69fa      	ldr	r2, [r7, #28]
 8001058:	61ba      	str	r2, [r7, #24]
 800105a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800105c:	6979      	ldr	r1, [r7, #20]
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	e841 2300 	strex	r3, r2, [r1]
 8001064:	613b      	str	r3, [r7, #16]
   return(result);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1e7      	bne.n	800103c <LL_USART_EnableDMAReq_RX+0x8>
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3304      	adds	r3, #4
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <GPS_DMA_init>:

int recv_cnt;
int err_cnt;

void GPS_DMA_init(GPS_RAW_MESSAGE* gps_raw_message, USART_TypeDef* UART,DMA_TypeDef* DMA,uint32_t DMA_STREAM)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	603b      	str	r3, [r7, #0]


	//DMA, INTERRUPT SETTINGS
	LL_DMA_SetMemoryAddress(DMA,DMA_STREAM,(uint32_t)(gps_raw_message->gps_raw_buf));
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3308      	adds	r3, #8
 80010a4:	461a      	mov	r2, r3
 80010a6:	6839      	ldr	r1, [r7, #0]
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff73 	bl	8000f94 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetPeriphAddress(DMA,DMA_STREAM,LL_USART_DMA_GetRegAddr(UART));
 80010ae:	68b8      	ldr	r0, [r7, #8]
 80010b0:	f7ff ffe3 	bl	800107a <LL_USART_DMA_GetRegAddr>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	6839      	ldr	r1, [r7, #0]
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff82 	bl	8000fc4 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetDataLength(DMA,DMA_STREAM,MSG_LENGTH_NAV_SOL);
 80010c0:	223c      	movs	r2, #60	; 0x3c
 80010c2:	6839      	ldr	r1, [r7, #0]
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff41 	bl	8000f4c <LL_DMA_SetDataLength>

	//  LL_DMA_EnableIT_HT(DMA1, LL_DMA_STREAM_1);
    LL_DMA_EnableIT_TC(DMA, DMA_STREAM);
 80010ca:	6839      	ldr	r1, [r7, #0]
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff91 	bl	8000ff4 <LL_DMA_EnableIT_TC>
	LL_USART_EnableDMAReq_RX(UART);
 80010d2:	68b8      	ldr	r0, [r7, #8]
 80010d4:	f7ff ffae 	bl	8001034 <LL_USART_EnableDMAReq_RX>

}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <GPS_Parsing>:



void GPS_Parsing(GPS_RAW_MESSAGE* message, MSG_NAV* msg_nav, int* recv_cnt, int* err_cnt)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	603b      	str	r3, [r7, #0]
	uint8_t* ptr,*gps_ptr = message->gps_raw_buf;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	3308      	adds	r3, #8
 80010f2:	61fb      	str	r3, [r7, #28]
	int32_t temp;
	unsigned short msg_length = 0, checksum = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	837b      	strh	r3, [r7, #26]
 80010f8:	2300      	movs	r3, #0
 80010fa:	833b      	strh	r3, [r7, #24]
	unsigned char classID = 0, messageID = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	75fb      	strb	r3, [r7, #23]
 8001100:	2300      	movs	r3, #0
 8001102:	75bb      	strb	r3, [r7, #22]
	if(gps_ptr[0]==MSG_UBX_SOF1 && gps_ptr[1]==MSG_UBX_SOF2){
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2bb5      	cmp	r3, #181	; 0xb5
 800110a:	d14a      	bne.n	80011a2 <GPS_Parsing+0xc2>
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	3301      	adds	r3, #1
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b62      	cmp	r3, #98	; 0x62
 8001114:	d145      	bne.n	80011a2 <GPS_Parsing+0xc2>

		ptr 		= gps_ptr + 2;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3302      	adds	r3, #2
 800111a:	613b      	str	r3, [r7, #16]
		classID 	= *ptr++;
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	613a      	str	r2, [r7, #16]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	75fb      	strb	r3, [r7, #23]
		messageID 	= *ptr++;
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	613a      	str	r2, [r7, #16]
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	75bb      	strb	r3, [r7, #22]

		if(messageID==MSG_ID_UBX_NAV_POSLLH) {
 8001130:	7dbb      	ldrb	r3, [r7, #22]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d114      	bne.n	8001160 <GPS_Parsing+0x80>
			msg_length 	= (ptr[1] << 8) + (ptr[0]);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	3301      	adds	r3, #1
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b29b      	uxth	r3, r3
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	b29a      	uxth	r2, r3
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	4413      	add	r3, r2
 800114a:	837b      	strh	r3, [r7, #26]
			ptr = ptr +2;
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	3302      	adds	r3, #2
 8001150:	613b      	str	r3, [r7, #16]
			memcpy(msg_nav, ptr, msg_length);
 8001152:	8b7b      	ldrh	r3, [r7, #26]
 8001154:	461a      	mov	r2, r3
 8001156:	6939      	ldr	r1, [r7, #16]
 8001158:	68b8      	ldr	r0, [r7, #8]
 800115a:	f009 f85d 	bl	800a218 <memcpy>
 800115e:	e01a      	b.n	8001196 <GPS_Parsing+0xb6>

//			printf("time:[%d]ms\t lon: [%d]deg\t lat: [%d]deg\t h: [%d]mm\t hMSL: [%d]mm\t hAcc: [%d]mm\t vAcc: [%d]mm\n",msg_nav->iTOW, msg_nav->lon,msg_nav->lat, msg_nav->h, msg_nav->hMSL, msg_nav->hAcc, msg_nav->vAcc);

		}
		else if(messageID==MSG_ID_UBX_NAV_SOL) {
 8001160:	7dbb      	ldrb	r3, [r7, #22]
 8001162:	2b06      	cmp	r3, #6
 8001164:	d117      	bne.n	8001196 <GPS_Parsing+0xb6>
			msg_length 	= (ptr[1] << 8) + (ptr[0]);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	3301      	adds	r3, #1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b29b      	uxth	r3, r3
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b29a      	uxth	r2, r3
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b29b      	uxth	r3, r3
 8001178:	4413      	add	r3, r2
 800117a:	837b      	strh	r3, [r7, #26]
			ptr = ptr +2;
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	3302      	adds	r3, #2
 8001180:	613b      	str	r3, [r7, #16]
			msg_nav = msg_nav + MSG_LENGTH_NAV_POSLLH - 8;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8001188:	60bb      	str	r3, [r7, #8]
			memcpy(msg_nav, ptr, msg_length);
 800118a:	8b7b      	ldrh	r3, [r7, #26]
 800118c:	461a      	mov	r2, r3
 800118e:	6939      	ldr	r1, [r7, #16]
 8001190:	68b8      	ldr	r0, [r7, #8]
 8001192:	f009 f841 	bl	800a218 <memcpy>
		}

		recv_cnt[0]++;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	e005      	b.n	80011ae <GPS_Parsing+0xce>

	}

	else
	{
		err_cnt[0]++;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	601a      	str	r2, [r3, #0]
	}
//	printf("recv: %d\t err: %d\n", recv_cnt[0], err_cnt[0]);

}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3720      	adds	r7, #32
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011c4:	4907      	ldr	r1, [pc, #28]	; (80011e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4013      	ands	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011d6:	68fb      	ldr	r3, [r7, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	40023800 	.word	0x40023800

080011e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011f4:	4907      	ldr	r1, [pc, #28]	; (8001214 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4013      	ands	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40023800 	.word	0x40023800

08001218 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	601a      	str	r2, [r3, #0]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f023 0210 	bic.w	r2, r3, #16
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	431a      	orrs	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	605a      	str	r2, [r3, #4]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b01      	cmp	r3, #1
 8001270:	d101      	bne.n	8001276 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b02      	cmp	r3, #2
 8001296:	d101      	bne.n	800129c <LL_SPI_IsActiveFlag_TXE+0x18>
 8001298:	2301      	movs	r3, #1
 800129a:	e000      	b.n	800129e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	330c      	adds	r3, #12
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b085      	sub	sp, #20
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	330c      	adds	r3, #12
 80012d6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	78fa      	ldrb	r2, [r7, #3]
 80012dc:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	4013      	ands	r3, r2
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	bf0c      	ite	eq
 8001302:	2301      	moveq	r3, #1
 8001304:	2300      	movne	r3, #0
 8001306:	b2db      	uxtb	r3, r3
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	619a      	str	r2, [r3, #24]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	041a      	lsls	r2, r3, #16
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	619a      	str	r2, [r3, #24]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b090      	sub	sp, #64	; 0x40
 8001354:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	2228      	movs	r2, #40	; 0x28
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f008 ff68 	bl	800a234 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001374:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001378:	f7ff ff36 	bl	80011e8 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff ff1b 	bl	80011b8 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001382:	2004      	movs	r0, #4
 8001384:	f7ff ff18 	bl	80011b8 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001388:	23e0      	movs	r3, #224	; 0xe0
 800138a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800138c:	2302      	movs	r3, #2
 800138e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800139c:	2305      	movs	r3, #5
 800139e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	463b      	mov	r3, r7
 80013a2:	4619      	mov	r1, r3
 80013a4:	4825      	ldr	r0, [pc, #148]	; (800143c <ICM20602_GPIO_SPI_Initialization+0xec>)
 80013a6:	f007 feed 	bl	8009184 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80013ae:	f44f 7382 	mov.w	r3, #260	; 0x104
 80013b2:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80013b8:	2302      	movs	r3, #2
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80013bc:	2301      	movs	r3, #1
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80013c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80013c6:	2310      	movs	r3, #16
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80013ca:	2300      	movs	r3, #0
 80013cc:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80013d2:	230a      	movs	r3, #10
 80013d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 80013d6:	f107 0318 	add.w	r3, r7, #24
 80013da:	4619      	mov	r1, r3
 80013dc:	4818      	ldr	r0, [pc, #96]	; (8001440 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80013de:	f008 f8a2 	bl	8009526 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80013e2:	2100      	movs	r1, #0
 80013e4:	4816      	ldr	r0, [pc, #88]	; (8001440 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80013e6:	f7ff ff27 	bl	8001238 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80013ea:	2110      	movs	r1, #16
 80013ec:	4813      	ldr	r0, [pc, #76]	; (800143c <ICM20602_GPIO_SPI_Initialization+0xec>)
 80013ee:	f7ff ff9f 	bl	8001330 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80013f2:	2310      	movs	r3, #16
 80013f4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013f6:	2301      	movs	r3, #1
 80013f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8001406:	463b      	mov	r3, r7
 8001408:	4619      	mov	r1, r3
 800140a:	480c      	ldr	r0, [pc, #48]	; (800143c <ICM20602_GPIO_SPI_Initialization+0xec>)
 800140c:	f007 feba 	bl	8009184 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8001410:	2310      	movs	r3, #16
 8001412:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001418:	2301      	movs	r3, #1
 800141a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 800141c:	463b      	mov	r3, r7
 800141e:	4619      	mov	r1, r3
 8001420:	4808      	ldr	r0, [pc, #32]	; (8001444 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001422:	f007 feaf 	bl	8009184 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001428:	f7ff fef6 	bl	8001218 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 800142c:	2110      	movs	r1, #16
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001430:	f7ff ff70 	bl	8001314 <LL_GPIO_SetOutputPin>
}
 8001434:	bf00      	nop
 8001436:	3740      	adds	r7, #64	; 0x40
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40020000 	.word	0x40020000
 8001440:	40013000 	.word	0x40013000
 8001444:	40020800 	.word	0x40020800

08001448 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8001452:	bf00      	nop
 8001454:	480c      	ldr	r0, [pc, #48]	; (8001488 <SPI1_SendByte+0x40>)
 8001456:	f7ff ff15 	bl	8001284 <LL_SPI_IsActiveFlag_TXE>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f9      	beq.n	8001454 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	4619      	mov	r1, r3
 8001464:	4808      	ldr	r0, [pc, #32]	; (8001488 <SPI1_SendByte+0x40>)
 8001466:	f7ff ff2e 	bl	80012c6 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 800146a:	bf00      	nop
 800146c:	4806      	ldr	r0, [pc, #24]	; (8001488 <SPI1_SendByte+0x40>)
 800146e:	f7ff fef6 	bl	800125e <LL_SPI_IsActiveFlag_RXNE>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f9      	beq.n	800146c <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8001478:	4803      	ldr	r0, [pc, #12]	; (8001488 <SPI1_SendByte+0x40>)
 800147a:	f7ff ff16 	bl	80012aa <LL_SPI_ReceiveData8>
 800147e:	4603      	mov	r3, r0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40013000 	.word	0x40013000

0800148c <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8001496:	2110      	movs	r1, #16
 8001498:	480b      	ldr	r0, [pc, #44]	; (80014c8 <ICM20602_Readbyte+0x3c>)
 800149a:	f7ff ff49 	bl	8001330 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff ffce 	bl	8001448 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff ffcb 	bl	8001448 <SPI1_SendByte>
 80014b2:	4603      	mov	r3, r0
 80014b4:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 80014b6:	2110      	movs	r1, #16
 80014b8:	4803      	ldr	r0, [pc, #12]	; (80014c8 <ICM20602_Readbyte+0x3c>)
 80014ba:	f7ff ff2b 	bl	8001314 <LL_GPIO_SetOutputPin>
	
	return val;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40020000 	.word	0x40020000

080014cc <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	603a      	str	r2, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
 80014d8:	460b      	mov	r3, r1
 80014da:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 80014e0:	2110      	movs	r1, #16
 80014e2:	4810      	ldr	r0, [pc, #64]	; (8001524 <ICM20602_Readbytes+0x58>)
 80014e4:	f7ff ff24 	bl	8001330 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ffa9 	bl	8001448 <SPI1_SendByte>
	while(i < len)
 80014f6:	e009      	b.n	800150c <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	60fa      	str	r2, [r7, #12]
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	18d4      	adds	r4, r2, r3
 8001502:	2000      	movs	r0, #0
 8001504:	f7ff ffa0 	bl	8001448 <SPI1_SendByte>
 8001508:	4603      	mov	r3, r0
 800150a:	7023      	strb	r3, [r4, #0]
	while(i < len)
 800150c:	79bb      	ldrb	r3, [r7, #6]
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d3f1      	bcc.n	80014f8 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 8001514:	2110      	movs	r1, #16
 8001516:	4803      	ldr	r0, [pc, #12]	; (8001524 <ICM20602_Readbytes+0x58>)
 8001518:	f7ff fefc 	bl	8001314 <LL_GPIO_SetOutputPin>
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bd90      	pop	{r4, r7, pc}
 8001524:	40020000 	.word	0x40020000

08001528 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	460a      	mov	r2, r1
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	4613      	mov	r3, r2
 8001536:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8001538:	2110      	movs	r1, #16
 800153a:	480b      	ldr	r0, [pc, #44]	; (8001568 <ICM20602_Writebyte+0x40>)
 800153c:	f7ff fef8 	bl	8001330 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001546:	b2db      	uxtb	r3, r3
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff7d 	bl	8001448 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800154e:	79bb      	ldrb	r3, [r7, #6]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff79 	bl	8001448 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8001556:	2110      	movs	r1, #16
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <ICM20602_Writebyte+0x40>)
 800155a:	f7ff fedb 	bl	8001314 <LL_GPIO_SetOutputPin>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40020000 	.word	0x40020000

0800156c <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001588:	f7ff fee2 	bl	8001350 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 800158c:	4838      	ldr	r0, [pc, #224]	; (8001670 <ICM20602_Initialization+0x104>)
 800158e:	f009 fba3 	bl	800acd8 <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8001592:	2075      	movs	r0, #117	; 0x75
 8001594:	f7ff ff7a 	bl	800148c <ICM20602_Readbyte>
 8001598:	4603      	mov	r3, r0
 800159a:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	2b12      	cmp	r3, #18
 80015a0:	d105      	bne.n	80015ae <ICM20602_Initialization+0x42>
	{
		printf("\r\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4833      	ldr	r0, [pc, #204]	; (8001674 <ICM20602_Initialization+0x108>)
 80015a8:	f009 fb96 	bl	800acd8 <iprintf>
 80015ac:	e012      	b.n	80015d4 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	2b12      	cmp	r3, #18
 80015b2:	d00f      	beq.n	80015d4 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 80015b4:	2075      	movs	r0, #117	; 0x75
 80015b6:	f7ff ff69 	bl	800148c <ICM20602_Readbyte>
 80015ba:	4603      	mov	r3, r0
 80015bc:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	2b12      	cmp	r3, #18
 80015c2:	d007      	beq.n	80015d4 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	2212      	movs	r2, #18
 80015c8:	4619      	mov	r1, r3
 80015ca:	482b      	ldr	r0, [pc, #172]	; (8001678 <ICM20602_Initialization+0x10c>)
 80015cc:	f009 fb84 	bl	800acd8 <iprintf>
			return 1; //ERROR
 80015d0:	2301      	movs	r3, #1
 80015d2:	e048      	b.n	8001666 <ICM20602_Initialization+0xfa>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	206b      	movs	r0, #107	; 0x6b
 80015d8:	f7ff ffa6 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 80015dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015e0:	f003 fb2e 	bl	8004c40 <usDelay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 80015e4:	2101      	movs	r1, #1
 80015e6:	206b      	movs	r0, #107	; 0x6b
 80015e8:	f7ff ff9e 	bl	8001528 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	usDelay(50000);
 80015ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015f0:	f003 fb26 	bl	8004c40 <usDelay>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 80015f4:	2100      	movs	r1, #0
 80015f6:	206c      	movs	r0, #108	; 0x6c
 80015f8:	f7ff ff96 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 80015fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001600:	f003 fb1e 	bl	8004c40 <usDelay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8001604:	2100      	movs	r1, #0
 8001606:	2019      	movs	r0, #25
 8001608:	f7ff ff8e 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800160c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001610:	f003 fb16 	bl	8004c40 <usDelay>
	
	// Gyro DLPF Config
//	ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001614:	2105      	movs	r1, #5
 8001616:	201a      	movs	r0, #26
 8001618:	f7ff ff86 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800161c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001620:	f003 fb0e 	bl	8004c40 <usDelay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001624:	2118      	movs	r1, #24
 8001626:	201b      	movs	r0, #27
 8001628:	f7ff ff7e 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800162c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001630:	f003 fb06 	bl	8004c40 <usDelay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001634:	2118      	movs	r1, #24
 8001636:	201c      	movs	r0, #28
 8001638:	f7ff ff76 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800163c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001640:	f003 fafe 	bl	8004c40 <usDelay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001644:	2103      	movs	r1, #3
 8001646:	201d      	movs	r0, #29
 8001648:	f7ff ff6e 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800164c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001650:	f003 faf6 	bl	8004c40 <usDelay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001654:	2101      	movs	r1, #1
 8001656:	2038      	movs	r0, #56	; 0x38
 8001658:	f7ff ff66 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800165c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001660:	f003 faee 	bl	8004c40 <usDelay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	0800dba0 	.word	0x0800dba0
 8001674:	0800dbb8 	.word	0x0800dbb8
 8001678:	0800dbdc 	.word	0x0800dbdc

0800167c <ICM20602_Get6AxisRawData>:

void ICM20602_Get6AxisRawData(short* accel, short* gyro)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
	unsigned char data[14];
	ICM20602_Readbytes(ACCEL_XOUT_H, 14, data);
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	461a      	mov	r2, r3
 800168c:	210e      	movs	r1, #14
 800168e:	203b      	movs	r0, #59	; 0x3b
 8001690:	f7ff ff1c 	bl	80014cc <ICM20602_Readbytes>
	
	accel[0] = (data[0] << 8) | data[1];
 8001694:	7a3b      	ldrb	r3, [r7, #8]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	b21a      	sxth	r2, r3
 800169a:	7a7b      	ldrb	r3, [r7, #9]
 800169c:	b21b      	sxth	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	801a      	strh	r2, [r3, #0]
	accel[1] = (data[2] << 8) | data[3];
 80016a6:	7abb      	ldrb	r3, [r7, #10]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	b219      	sxth	r1, r3
 80016ac:	7afb      	ldrb	r3, [r7, #11]
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3302      	adds	r3, #2
 80016b4:	430a      	orrs	r2, r1
 80016b6:	b212      	sxth	r2, r2
 80016b8:	801a      	strh	r2, [r3, #0]
	accel[2] = (data[4] << 8) | data[5];
 80016ba:	7b3b      	ldrb	r3, [r7, #12]
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b219      	sxth	r1, r3
 80016c0:	7b7b      	ldrb	r3, [r7, #13]
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3304      	adds	r3, #4
 80016c8:	430a      	orrs	r2, r1
 80016ca:	b212      	sxth	r2, r2
 80016cc:	801a      	strh	r2, [r3, #0]

	gyro[0] = ((data[8] << 8) | data[9]);
 80016ce:	7c3b      	ldrb	r3, [r7, #16]
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	b21a      	sxth	r2, r3
 80016d4:	7c7b      	ldrb	r3, [r7, #17]
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	b21a      	sxth	r2, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[10] << 8) | data[11]);
 80016e0:	7cbb      	ldrb	r3, [r7, #18]
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b219      	sxth	r1, r3
 80016e6:	7cfb      	ldrb	r3, [r7, #19]
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	3302      	adds	r3, #2
 80016ee:	430a      	orrs	r2, r1
 80016f0:	b212      	sxth	r2, r2
 80016f2:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[12] << 8) | data[13]);
 80016f4:	7d3b      	ldrb	r3, [r7, #20]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b219      	sxth	r1, r3
 80016fa:	7d7b      	ldrb	r3, [r7, #21]
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	3304      	adds	r3, #4
 8001702:	430a      	orrs	r2, r1
 8001704:	b212      	sxth	r2, r2
 8001706:	801a      	strh	r2, [r3, #0]
}
 8001708:	bf00      	nop
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8001714:	2110      	movs	r1, #16
 8001716:	4803      	ldr	r0, [pc, #12]	; (8001724 <ICM20602_DataReady+0x14>)
 8001718:	f7ff fde7 	bl	80012ea <LL_GPIO_IsInputPinSet>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40020800 	.word	0x40020800

08001728 <GetRPY>:
float twoKi = 0.0f;                      // 2 * integral gain (Ki)
float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f; // integral error terms scaled by Ki


void GetRPY(float* sampleFreq)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af02      	add	r7, sp, #8
 800172e:	6078      	str	r0, [r7, #4]


	  ICM20602_Get6AxisRawData(&ICM20602.acc_x_raw, &ICM20602.gyro_x_raw);	//	39.11us
 8001730:	4967      	ldr	r1, [pc, #412]	; (80018d0 <GetRPY+0x1a8>)
 8001732:	4868      	ldr	r0, [pc, #416]	; (80018d4 <GetRPY+0x1ac>)
 8001734:	f7ff ffa2 	bl	800167c <ICM20602_Get6AxisRawData>
	  GYROX_RATE = (ICM20602.gyro_x_raw - gx_cal) * 0.06103515625 * 0.017453289;
 8001738:	4b66      	ldr	r3, [pc, #408]	; (80018d4 <GetRPY+0x1ac>)
 800173a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800173e:	ee07 3a90 	vmov	s15, r3
 8001742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001746:	4b64      	ldr	r3, [pc, #400]	; (80018d8 <GetRPY+0x1b0>)
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001750:	ee17 0a90 	vmov	r0, s15
 8001754:	f7fe fef8 	bl	8000548 <__aeabi_f2d>
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	4b5f      	ldr	r3, [pc, #380]	; (80018dc <GetRPY+0x1b4>)
 800175e:	f7fe ff4b 	bl	80005f8 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	a357      	add	r3, pc, #348	; (adr r3, 80018c8 <GetRPY+0x1a0>)
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	f7fe ff42 	bl	80005f8 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f7ff fa14 	bl	8000ba8 <__aeabi_d2f>
 8001780:	4603      	mov	r3, r0
 8001782:	4a57      	ldr	r2, [pc, #348]	; (80018e0 <GetRPY+0x1b8>)
 8001784:	6013      	str	r3, [r2, #0]
	  GYROY_RATE = (ICM20602.gyro_y_raw - gy_cal) * 0.06103515625 * 0.017453289;
 8001786:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <GetRPY+0x1ac>)
 8001788:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001794:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <GetRPY+0x1bc>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179e:	ee17 0a90 	vmov	r0, s15
 80017a2:	f7fe fed1 	bl	8000548 <__aeabi_f2d>
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	4b4c      	ldr	r3, [pc, #304]	; (80018dc <GetRPY+0x1b4>)
 80017ac:	f7fe ff24 	bl	80005f8 <__aeabi_dmul>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	a343      	add	r3, pc, #268	; (adr r3, 80018c8 <GetRPY+0x1a0>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7fe ff1b 	bl	80005f8 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f9ed 	bl	8000ba8 <__aeabi_d2f>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4a45      	ldr	r2, [pc, #276]	; (80018e8 <GetRPY+0x1c0>)
 80017d2:	6013      	str	r3, [r2, #0]
	  GYROZ_RATE = (ICM20602.gyro_z_raw - gz_cal) * 0.06103515625 * 0.017453289;
 80017d4:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <GetRPY+0x1ac>)
 80017d6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e2:	4b42      	ldr	r3, [pc, #264]	; (80018ec <GetRPY+0x1c4>)
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ec:	ee17 0a90 	vmov	r0, s15
 80017f0:	f7fe feaa 	bl	8000548 <__aeabi_f2d>
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4b38      	ldr	r3, [pc, #224]	; (80018dc <GetRPY+0x1b4>)
 80017fa:	f7fe fefd 	bl	80005f8 <__aeabi_dmul>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	a330      	add	r3, pc, #192	; (adr r3, 80018c8 <GetRPY+0x1a0>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe fef4 	bl	80005f8 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f9c6 	bl	8000ba8 <__aeabi_d2f>
 800181c:	4603      	mov	r3, r0
 800181e:	4a34      	ldr	r2, [pc, #208]	; (80018f0 <GetRPY+0x1c8>)
 8001820:	6013      	str	r3, [r2, #0]

	  ACCX_RATE = (ICM20602.acc_x_raw - ax_cal) * 0.00048828125;
 8001822:	4b2c      	ldr	r3, [pc, #176]	; (80018d4 <GetRPY+0x1ac>)
 8001824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001828:	ee07 3a90 	vmov	s15, r3
 800182c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001830:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <GetRPY+0x1cc>)
 8001832:	edd3 7a00 	vldr	s15, [r3]
 8001836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800183a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80018f8 <GetRPY+0x1d0>
 800183e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <GetRPY+0x1d4>)
 8001844:	edc3 7a00 	vstr	s15, [r3]
	  ACCY_RATE = (ICM20602.acc_y_raw - ay_cal) * 0.00048828125;
 8001848:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <GetRPY+0x1ac>)
 800184a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001856:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <GetRPY+0x1d8>)
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001860:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80018f8 <GetRPY+0x1d0>
 8001864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001868:	4b26      	ldr	r3, [pc, #152]	; (8001904 <GetRPY+0x1dc>)
 800186a:	edc3 7a00 	vstr	s15, [r3]
	  ACCZ_RATE = (ICM20602.acc_z_raw) * 0.00048828125;
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <GetRPY+0x1ac>)
 8001870:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe55 	bl	8000524 <__aeabi_i2d>
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8001882:	f7fe feb9 	bl	80005f8 <__aeabi_dmul>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff f98b 	bl	8000ba8 <__aeabi_d2f>
 8001892:	4603      	mov	r3, r0
 8001894:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <GetRPY+0x1e0>)
 8001896:	6013      	str	r3, [r2, #0]

//		  MadgwickQuaternionUpdate(&ACCX_RATE,&ACCY_RATE,&ACCZ_RATE,&GYROX_RATE,&GYROY_RATE,&GYROZ_RATE);	//57us
	  MahonyAHRSupdateIMU(&GYROX_RATE,&GYROY_RATE,&GYROZ_RATE, &ACCX_RATE,&ACCY_RATE,&ACCZ_RATE, *sampleFreq);		//42us
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <GetRPY+0x1e0>)
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <GetRPY+0x1dc>)
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	eeb0 0a67 	vmov.f32	s0, s15
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <GetRPY+0x1d4>)
 80018ac:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <GetRPY+0x1c8>)
 80018ae:	490e      	ldr	r1, [pc, #56]	; (80018e8 <GetRPY+0x1c0>)
 80018b0:	480b      	ldr	r0, [pc, #44]	; (80018e0 <GetRPY+0x1b8>)
 80018b2:	f000 f903 	bl	8001abc <MahonyAHRSupdateIMU>
	  Quaternion_Update(&q);	//10us
 80018b6:	4815      	ldr	r0, [pc, #84]	; (800190c <GetRPY+0x1e4>)
 80018b8:	f000 f82a 	bl	8001910 <Quaternion_Update>

//		  printf("%.2f\n",(sampleFreq[0]));
//		  printf("%.d %.d %.d\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
//		  printf("%.1f %.1f %.1f\n", GYROX_RATE, GYROY_RATE, GYROZ_RATE);
//		  printf("%.1f %.1f %.1f\n", ACCX_RATE, ACCY_RATE, ACCZ_RATE);
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	f3af 8000 	nop.w
 80018c8:	65d9bd65 	.word	0x65d9bd65
 80018cc:	3f91df46 	.word	0x3f91df46
 80018d0:	20000ca4 	.word	0x20000ca4
 80018d4:	20000c9c 	.word	0x20000c9c
 80018d8:	20000bec 	.word	0x20000bec
 80018dc:	3faf4000 	.word	0x3faf4000
 80018e0:	20000bd4 	.word	0x20000bd4
 80018e4:	20000bf0 	.word	0x20000bf0
 80018e8:	20000bd8 	.word	0x20000bd8
 80018ec:	20000bf4 	.word	0x20000bf4
 80018f0:	20000bdc 	.word	0x20000bdc
 80018f4:	20000bf8 	.word	0x20000bf8
 80018f8:	3a000000 	.word	0x3a000000
 80018fc:	20000be0 	.word	0x20000be0
 8001900:	20000bfc 	.word	0x20000bfc
 8001904:	20000be4 	.word	0x20000be4
 8001908:	20000be8 	.word	0x20000be8
 800190c:	20000000 	.word	0x20000000

08001910 <Quaternion_Update>:

void Quaternion_Update(float* q)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;

	q1 = q[0]; //x
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	617b      	str	r3, [r7, #20]
	q2 = q[1]; //y
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	613b      	str	r3, [r7, #16]
	q3 = q[2]; //z
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	60fb      	str	r3, [r7, #12]
	q4 = q[3]; //w
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	60bb      	str	r3, [r7, #8]


	Yaw 	= -atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8001930:	ed97 7a04 	vldr	s14, [r7, #16]
 8001934:	edd7 7a03 	vldr	s15, [r7, #12]
 8001938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800193c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001940:	edd7 7a02 	vldr	s15, [r7, #8]
 8001944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800194c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001950:	edd7 7a05 	vldr	s15, [r7, #20]
 8001954:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001958:	edd7 7a04 	vldr	s15, [r7, #16]
 800195c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001960:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001964:	edd7 7a03 	vldr	s15, [r7, #12]
 8001968:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800196c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001970:	edd7 7a02 	vldr	s15, [r7, #8]
 8001974:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197c:	eef0 0a67 	vmov.f32	s1, s15
 8001980:	eeb0 0a66 	vmov.f32	s0, s13
 8001984:	f00b fdde 	bl	800d544 <atan2f>
 8001988:	eef0 7a40 	vmov.f32	s15, s0
 800198c:	eef1 7a67 	vneg.f32	s15, s15
 8001990:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <Quaternion_Update+0x198>)
 8001992:	edc3 7a00 	vstr	s15, [r3]
	Pitch  	= -asinf(2.0f * (q2*q4 - q1*q3));
 8001996:	ed97 7a04 	vldr	s14, [r7, #16]
 800199a:	edd7 7a02 	vldr	s15, [r7, #8]
 800199e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a2:	edd7 6a05 	vldr	s13, [r7, #20]
 80019a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80019aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019b6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ba:	f00b fd97 	bl	800d4ec <asinf>
 80019be:	eef0 7a40 	vmov.f32	s15, s0
 80019c2:	eef1 7a67 	vneg.f32	s15, s15
 80019c6:	4b39      	ldr	r3, [pc, #228]	; (8001aac <Quaternion_Update+0x19c>)
 80019c8:	edc3 7a00 	vstr	s15, [r3]
	Roll   	= atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 80019cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80019d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80019d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d8:	edd7 6a03 	vldr	s13, [r7, #12]
 80019dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80019f0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80019f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a00:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a18:	eef0 0a67 	vmov.f32	s1, s15
 8001a1c:	eeb0 0a66 	vmov.f32	s0, s13
 8001a20:	f00b fd90 	bl	800d544 <atan2f>
 8001a24:	eef0 7a40 	vmov.f32	s15, s0
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <Quaternion_Update+0x1a0>)
 8001a2a:	edc3 7a00 	vstr	s15, [r3]

	Pitch *= RAD2DEG;
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <Quaternion_Update+0x19c>)
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001ab4 <Quaternion_Update+0x1a4>
 8001a38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <Quaternion_Update+0x19c>)
 8001a3e:	edc3 7a00 	vstr	s15, [r3]
	Roll  *= RAD2DEG;
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <Quaternion_Update+0x1a0>)
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001ab4 <Quaternion_Update+0x1a4>
 8001a4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <Quaternion_Update+0x1a0>)
 8001a52:	edc3 7a00 	vstr	s15, [r3]
	Yaw   *= RAD2DEG;
 8001a56:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001ab4 <Quaternion_Update+0x1a4>
 8001a60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a64:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a66:	edc3 7a00 	vstr	s15, [r3]
	
	if(Yaw>=0)
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a6c:	edd3 7a00 	vldr	s15, [r3]
 8001a70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a78:	db0a      	blt.n	8001a90 <Quaternion_Update+0x180>
		Yaw = 360.f - Yaw;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001ab8 <Quaternion_Update+0x1a8>
 8001a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a8a:	edc3 7a00 	vstr	s15, [r3]
	
//	 printf("%d %d %d\n", (int)(Roll), (int)(Pitch), (int)(Yaw));
//	 printf("%d %d %d\n", (int)(q[0]*100), (int)(q[1]*100),(int)(q[2]*100));


}
 8001a8e:	e007      	b.n	8001aa0 <Quaternion_Update+0x190>
		Yaw = -Yaw;
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	eef1 7a67 	vneg.f32	s15, s15
 8001a9a:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a9c:	edc3 7a00 	vstr	s15, [r3]
}
 8001aa0:	bf00      	nop
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000cc4 	.word	0x20000cc4
 8001aac:	20000ccc 	.word	0x20000ccc
 8001ab0:	20000cc8 	.word	0x20000cc8
 8001ab4:	42652ee1 	.word	0x42652ee1
 8001ab8:	43b40000 	.word	0x43b40000

08001abc <MahonyAHRSupdateIMU>:
    q[2] = q3 * norm;
    q[3] = q4 * norm;
}


void MahonyAHRSupdateIMU(float* gx, float* gy, float* gz, float* ax, float* ay, float* az, float sampleFreq) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b090      	sub	sp, #64	; 0x40
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6178      	str	r0, [r7, #20]
 8001ac4:	6139      	str	r1, [r7, #16]
 8001ac6:	60fa      	str	r2, [r7, #12]
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	ed87 0a01 	vstr	s0, [r7, #4]
  float halfvx, halfvy, halfvz;
  float halfex, halfey, halfez;
  float qa, qb, qc;

  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if(!((ax[0] == 0.0f) && (ay[0] == 0.0f) && (az[0] == 0.0f))) {
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001adc:	d110      	bne.n	8001b00 <MahonyAHRSupdateIMU+0x44>
 8001ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aec:	d108      	bne.n	8001b00 <MahonyAHRSupdateIMU+0x44>
 8001aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afc:	f000 8175 	beq.w	8001dea <MahonyAHRSupdateIMU+0x32e>

    // Normalise accelerometer measurement
    norm = sqrt(ax[0] * ax[0] + ay[0] * ay[0] + az[0] * az[0]);
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	ed93 7a00 	vldr	s14, [r3]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b12:	edd3 6a00 	vldr	s13, [r3]
 8001b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b26:	edd3 6a00 	vldr	s13, [r3]
 8001b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b38:	ee17 0a90 	vmov	r0, s15
 8001b3c:	f7fe fd04 	bl	8000548 <__aeabi_f2d>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	ec43 2b10 	vmov	d0, r2, r3
 8001b48:	f00b fca4 	bl	800d494 <sqrt>
 8001b4c:	ec53 2b10 	vmov	r2, r3, d0
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	f7ff f828 	bl	8000ba8 <__aeabi_d2f>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    ax[0] /= norm;
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	edd3 6a00 	vldr	s13, [r3]
 8001b62:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	edc3 7a00 	vstr	s15, [r3]
    ay[0] /= norm;
 8001b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b72:	edd3 6a00 	vldr	s13, [r3]
 8001b76:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b80:	edc3 7a00 	vstr	s15, [r3]
    az[0] /= norm;
 8001b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b86:	edd3 6a00 	vldr	s13, [r3]
 8001b8a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b94:	edc3 7a00 	vstr	s15, [r3]

    // Estimated direction of gravity and vector perpendicular to magnetic flux
    halfvx = q[1] * q[3] - q[0] * q[2];
 8001b98:	4b72      	ldr	r3, [pc, #456]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001b9a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b9e:	4b71      	ldr	r3, [pc, #452]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001ba0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba8:	4b6e      	ldr	r3, [pc, #440]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001baa:	edd3 6a00 	vldr	s13, [r3]
 8001bae:	4b6d      	ldr	r3, [pc, #436]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bbc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    halfvy = q[0] * q[1] + q[2] * q[3];
 8001bc0:	4b68      	ldr	r3, [pc, #416]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bc2:	ed93 7a00 	vldr	s14, [r3]
 8001bc6:	4b67      	ldr	r3, [pc, #412]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd0:	4b64      	ldr	r3, [pc, #400]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bd2:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bd6:	4b63      	ldr	r3, [pc, #396]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bd8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8001be8:	4b5e      	ldr	r3, [pc, #376]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bea:	ed93 7a00 	vldr	s14, [r3]
 8001bee:	4b5d      	ldr	r3, [pc, #372]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bf0:	edd3 7a00 	vldr	s15, [r3]
 8001bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001bfc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c00:	4b58      	ldr	r3, [pc, #352]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001c02:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c06:	4b57      	ldr	r3, [pc, #348]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001c08:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c14:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    // Error is sum of cross product between estimated and measured direction of gravity
    halfex = (ay[0] * halfvz - az[0] * halfvy);
 8001c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c1a:	ed93 7a00 	vldr	s14, [r3]
 8001c1e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001c22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c28:	edd3 6a00 	vldr	s13, [r3]
 8001c2c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c38:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    halfey = (az[0] * halfvx - ax[0] * halfvz);
 8001c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c3e:	ed93 7a00 	vldr	s14, [r3]
 8001c42:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	edd3 6a00 	vldr	s13, [r3]
 8001c50:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001c54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c5c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    halfez = (ax[0] * halfvy - ay[0] * halfvx);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	ed93 7a00 	vldr	s14, [r3]
 8001c66:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c70:	edd3 6a00 	vldr	s13, [r3]
 8001c74:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // Compute and apply integral feedback if enabled
    if(twoKi > 0.0f) {
 8001c84:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <MahonyAHRSupdateIMU+0x2ac>)
 8001c86:	edd3 7a00 	vldr	s15, [r3]
 8001c8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	dd71      	ble.n	8001d78 <MahonyAHRSupdateIMU+0x2bc>
      integralFBx += twoKi * halfex * (1.0f / sampleFreq);  // integral error scaled by Ki
 8001c94:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <MahonyAHRSupdateIMU+0x2ac>)
 8001c96:	ed93 7a00 	vldr	s14, [r3]
 8001c9a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ca2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001ca6:	edd7 6a01 	vldr	s13, [r7, #4]
 8001caa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001cae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb2:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <MahonyAHRSupdateIMU+0x2b0>)
 8001cb4:	edd3 7a00 	vldr	s15, [r3]
 8001cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <MahonyAHRSupdateIMU+0x2b0>)
 8001cbe:	edc3 7a00 	vstr	s15, [r3]
      integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 8001cc2:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <MahonyAHRSupdateIMU+0x2ac>)
 8001cc4:	ed93 7a00 	vldr	s14, [r3]
 8001cc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ccc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001cd4:	edd7 6a01 	vldr	s13, [r7, #4]
 8001cd8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce0:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <MahonyAHRSupdateIMU+0x2b4>)
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cea:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <MahonyAHRSupdateIMU+0x2b4>)
 8001cec:	edc3 7a00 	vstr	s15, [r3]
      integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <MahonyAHRSupdateIMU+0x2ac>)
 8001cf2:	ed93 7a00 	vldr	s14, [r3]
 8001cf6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cfe:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001d02:	edd7 6a01 	vldr	s13, [r7, #4]
 8001d06:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001d0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <MahonyAHRSupdateIMU+0x2b8>)
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d18:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <MahonyAHRSupdateIMU+0x2b8>)
 8001d1a:	edc3 7a00 	vstr	s15, [r3]
      gx[0] += integralFBx;  // apply integral feedback
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	ed93 7a00 	vldr	s14, [r3]
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MahonyAHRSupdateIMU+0x2b0>)
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	edc3 7a00 	vstr	s15, [r3]
      gy[0] += integralFBy;
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	ed93 7a00 	vldr	s14, [r3]
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <MahonyAHRSupdateIMU+0x2b4>)
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	edc3 7a00 	vstr	s15, [r3]
      gz[0] += integralFBz;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	ed93 7a00 	vldr	s14, [r3]
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <MahonyAHRSupdateIMU+0x2b8>)
 8001d52:	edd3 7a00 	vldr	s15, [r3]
 8001d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	edc3 7a00 	vstr	s15, [r3]
 8001d60:	e016      	b.n	8001d90 <MahonyAHRSupdateIMU+0x2d4>
 8001d62:	bf00      	nop
 8001d64:	20000000 	.word	0x20000000
 8001d68:	20000c00 	.word	0x20000c00
 8001d6c:	20000c04 	.word	0x20000c04
 8001d70:	20000c08 	.word	0x20000c08
 8001d74:	20000c0c 	.word	0x20000c0c
    }
    else {
      integralFBx = 0.0f; // prevent integral windup
 8001d78:	4bb2      	ldr	r3, [pc, #712]	; (8002044 <MahonyAHRSupdateIMU+0x588>)
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
      integralFBy = 0.0f;
 8001d80:	4bb1      	ldr	r3, [pc, #708]	; (8002048 <MahonyAHRSupdateIMU+0x58c>)
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
      integralFBz = 0.0f;
 8001d88:	4bb0      	ldr	r3, [pc, #704]	; (800204c <MahonyAHRSupdateIMU+0x590>)
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
    }

    // Apply proportional feedback
    gx[0] += twoKp * halfex;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	ed93 7a00 	vldr	s14, [r3]
 8001d96:	4bae      	ldr	r3, [pc, #696]	; (8002050 <MahonyAHRSupdateIMU+0x594>)
 8001d98:	edd3 6a00 	vldr	s13, [r3]
 8001d9c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	edc3 7a00 	vstr	s15, [r3]
    gy[0] += twoKp * halfey;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	ed93 7a00 	vldr	s14, [r3]
 8001db4:	4ba6      	ldr	r3, [pc, #664]	; (8002050 <MahonyAHRSupdateIMU+0x594>)
 8001db6:	edd3 6a00 	vldr	s13, [r3]
 8001dba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001dbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	edc3 7a00 	vstr	s15, [r3]
    gz[0] += twoKp * halfez;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	ed93 7a00 	vldr	s14, [r3]
 8001dd2:	4b9f      	ldr	r3, [pc, #636]	; (8002050 <MahonyAHRSupdateIMU+0x594>)
 8001dd4:	edd3 6a00 	vldr	s13, [r3]
 8001dd8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ddc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	edc3 7a00 	vstr	s15, [r3]
  }

  // Integrate rate of change of quaternion
  gx[0] *= (0.5f * (1.0f / sampleFreq));   // pre-multiply common factors
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	ed93 7a00 	vldr	s14, [r3]
 8001df0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001df4:	edd7 6a01 	vldr	s13, [r7, #4]
 8001df8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001dfc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001e00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	edc3 7a00 	vstr	s15, [r3]
  gy[0] *= (0.5f * (1.0f / sampleFreq));
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	ed93 7a00 	vldr	s14, [r3]
 8001e14:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001e18:	edd7 6a01 	vldr	s13, [r7, #4]
 8001e1c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e20:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001e24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	edc3 7a00 	vstr	s15, [r3]
  gz[0] *= (0.5f * (1.0f / sampleFreq));
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	ed93 7a00 	vldr	s14, [r3]
 8001e38:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001e3c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001e40:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e44:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001e48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	edc3 7a00 	vstr	s15, [r3]
  qa = q[0];
 8001e56:	4b7f      	ldr	r3, [pc, #508]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	623b      	str	r3, [r7, #32]
  qb = q[1];
 8001e5c:	4b7d      	ldr	r3, [pc, #500]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	61fb      	str	r3, [r7, #28]
  qc = q[2];
 8001e62:	4b7c      	ldr	r3, [pc, #496]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	61bb      	str	r3, [r7, #24]
  q[0] += (-qb * gx[0] - qc * gy[0] - q[3] * gz[0]);
 8001e68:	4b7a      	ldr	r3, [pc, #488]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001e6a:	ed93 7a00 	vldr	s14, [r3]
 8001e6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e72:	eef1 6a67 	vneg.f32	s13, s15
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	ed93 6a00 	vldr	s12, [r3]
 8001e86:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e8e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e92:	4b70      	ldr	r3, [pc, #448]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001e94:	ed93 6a03 	vldr	s12, [r3, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ea2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eaa:	4b6a      	ldr	r3, [pc, #424]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001eac:	edc3 7a00 	vstr	s15, [r3]
  q[1] += (qa * gx[0] + qc * gz[0] - q[3] * gy[0]);
 8001eb0:	4b68      	ldr	r3, [pc, #416]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001eb2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	edd3 6a00 	vldr	s13, [r3]
 8001ebc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ec0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	ed93 6a00 	vldr	s12, [r3]
 8001eca:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ece:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ed2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ed6:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001ed8:	ed93 6a03 	vldr	s12, [r3, #12]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	edd3 7a00 	vldr	s15, [r3]
 8001ee2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ee6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eee:	4b59      	ldr	r3, [pc, #356]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001ef0:	edc3 7a01 	vstr	s15, [r3, #4]
  q[2] += (qa * gy[0] - qb * gz[0] + q[3] * gx[0]);
 8001ef4:	4b57      	ldr	r3, [pc, #348]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001ef6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	edd3 6a00 	vldr	s13, [r3]
 8001f00:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	ed93 6a00 	vldr	s12, [r3]
 8001f0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f16:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f1a:	4b4e      	ldr	r3, [pc, #312]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f1c:	ed93 6a03 	vldr	s12, [r3, #12]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f32:	4b48      	ldr	r3, [pc, #288]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f34:	edc3 7a02 	vstr	s15, [r3, #8]
  q[3] += (qa * gz[0] + qb * gy[0] - qc * gx[0]);
 8001f38:	4b46      	ldr	r3, [pc, #280]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f3a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	edd3 6a00 	vldr	s13, [r3]
 8001f44:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	ed93 6a00 	vldr	s12, [r3]
 8001f52:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f5a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	ed93 6a00 	vldr	s12, [r3]
 8001f64:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f6c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f74:	4b37      	ldr	r3, [pc, #220]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f76:	edc3 7a03 	vstr	s15, [r3, #12]

  // Normalise quaternion
  norm = sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8001f7a:	4b36      	ldr	r3, [pc, #216]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f7c:	ed93 7a00 	vldr	s14, [r3]
 8001f80:	4b34      	ldr	r3, [pc, #208]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f82:	edd3 7a00 	vldr	s15, [r3]
 8001f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f8a:	4b32      	ldr	r3, [pc, #200]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f8c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f90:	4b30      	ldr	r3, [pc, #192]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f92:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f9e:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001fa0:	edd3 6a02 	vldr	s13, [r3, #8]
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001fa6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001faa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fb2:	4b28      	ldr	r3, [pc, #160]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001fb4:	edd3 6a03 	vldr	s13, [r3, #12]
 8001fb8:	4b26      	ldr	r3, [pc, #152]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001fba:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc6:	ee17 0a90 	vmov	r0, s15
 8001fca:	f7fe fabd 	bl	8000548 <__aeabi_f2d>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	ec43 2b10 	vmov	d0, r2, r3
 8001fd6:	f00b fa5d 	bl	800d494 <sqrt>
 8001fda:	ec53 2b10 	vmov	r2, r3, d0
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f7fe fde1 	bl	8000ba8 <__aeabi_d2f>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  q[0] /= norm;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001fec:	edd3 6a00 	vldr	s13, [r3]
 8001ff0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001ffa:	edc3 7a00 	vstr	s15, [r3]
  q[1] /= norm;
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8002000:	edd3 6a01 	vldr	s13, [r3, #4]
 8002004:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 800200e:	edc3 7a01 	vstr	s15, [r3, #4]
  q[2] /= norm;
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8002014:	edd3 6a02 	vldr	s13, [r3, #8]
 8002018:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800201c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8002022:	edc3 7a02 	vstr	s15, [r3, #8]
  q[3] /= norm;
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8002028:	edd3 6a03 	vldr	s13, [r3, #12]
 800202c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8002036:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800203a:	bf00      	nop
 800203c:	3740      	adds	r7, #64	; 0x40
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000c04 	.word	0x20000c04
 8002048:	20000c08 	.word	0x20000c08
 800204c:	20000c0c 	.word	0x20000c0c
 8002050:	20000010 	.word	0x20000010
 8002054:	20000000 	.word	0x20000000

08002058 <SBUS_Parsing>:

}


void SBUS_Parsing(SBUS_RAW_MESSAGE* raw, MSG_SBUS* msg_sbus, int* rx_recv_cnt, int* rx_err_cnt)
{
 8002058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800205a:	b093      	sub	sp, #76	; 0x4c
 800205c:	af08      	add	r7, sp, #32
 800205e:	6178      	str	r0, [r7, #20]
 8002060:	6139      	str	r1, [r7, #16]
 8002062:	60fa      	str	r2, [r7, #12]
 8002064:	60bb      	str	r3, [r7, #8]
	uint8_t* ptr = raw->rx_buf;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3308      	adds	r3, #8
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t temp;
	unsigned short msg_length = 0, checksum = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002070:	2300      	movs	r3, #0
 8002072:	843b      	strh	r3, [r7, #32]
	unsigned char classID = 0, messageID = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	77fb      	strb	r3, [r7, #31]
 8002078:	2300      	movs	r3, #0
 800207a:	77bb      	strb	r3, [r7, #30]
	if(ptr[0]==MSG_SBUS_SOF ){
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b0f      	cmp	r3, #15
 8002082:	f040 819e 	bne.w	80023c2 <SBUS_Parsing+0x36a>
		msg_sbus->header = ptr[0];
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	701a      	strb	r2, [r3, #0]
	       msg_sbus->rx_channel[0]   = (int16_t)(ptr[1] | ((ptr[2] << 8) & 0x07FF));
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	3301      	adds	r3, #1
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b21a      	sxth	r2, r3
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	3302      	adds	r3, #2
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	b21b      	sxth	r3, r3
 80020a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b21a      	sxth	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	805a      	strh	r2, [r3, #2]
	        msg_sbus->rx_channel[1]  = (int16_t)((ptr[2] >> 3) | ((ptr[3] << 5) & 0x07FF));
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	3302      	adds	r3, #2
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	b21a      	sxth	r2, r3
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	3303      	adds	r3, #3
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	015b      	lsls	r3, r3, #5
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	4313      	orrs	r3, r2
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	809a      	strh	r2, [r3, #4]
	        msg_sbus->rx_channel[2]  = (int16_t)((ptr[3] >> 6) | (ptr[4] << 2) | ((ptr[5] << 10) & 0x07FF));
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	3303      	adds	r3, #3
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	099b      	lsrs	r3, r3, #6
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	b21a      	sxth	r2, r3
 80020de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e0:	3304      	adds	r3, #4
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	4313      	orrs	r3, r2
 80020ea:	b21a      	sxth	r2, r3
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	3305      	adds	r3, #5
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	029b      	lsls	r3, r3, #10
 80020f4:	b21b      	sxth	r3, r3
 80020f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020fa:	b21b      	sxth	r3, r3
 80020fc:	4313      	orrs	r3, r2
 80020fe:	b21a      	sxth	r2, r3
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	80da      	strh	r2, [r3, #6]
	        msg_sbus->rx_channel[3]  = (int16_t)((ptr[5] >> 1) | ((ptr[6] << 7) & 0x07FF));
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	3305      	adds	r3, #5
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	b21a      	sxth	r2, r3
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	3306      	adds	r3, #6
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	01db      	lsls	r3, r3, #7
 8002118:	b21b      	sxth	r3, r3
 800211a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800211e:	b21b      	sxth	r3, r3
 8002120:	4313      	orrs	r3, r2
 8002122:	b21a      	sxth	r2, r3
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	811a      	strh	r2, [r3, #8]
	        msg_sbus->rx_channel[4]  = (int16_t)((ptr[6] >> 4) | ((ptr[7] << 4) & 0x07FF));
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	3306      	adds	r3, #6
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	b2db      	uxtb	r3, r3
 8002132:	b21a      	sxth	r2, r3
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	3307      	adds	r3, #7
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	b21b      	sxth	r3, r3
 800213e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002142:	b21b      	sxth	r3, r3
 8002144:	4313      	orrs	r3, r2
 8002146:	b21a      	sxth	r2, r3
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	815a      	strh	r2, [r3, #10]
	        msg_sbus->rx_channel[5]  = (int16_t)((ptr[7] >> 7) | (ptr[8] << 1) | ((ptr[9] << 9) & 0x07FF));
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	3307      	adds	r3, #7
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	09db      	lsrs	r3, r3, #7
 8002154:	b2db      	uxtb	r3, r3
 8002156:	b21a      	sxth	r2, r3
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	3308      	adds	r3, #8
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	b21b      	sxth	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b21a      	sxth	r2, r3
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	3309      	adds	r3, #9
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	025b      	lsls	r3, r3, #9
 800216e:	b21b      	sxth	r3, r3
 8002170:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002174:	b21b      	sxth	r3, r3
 8002176:	4313      	orrs	r3, r2
 8002178:	b21a      	sxth	r2, r3
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	819a      	strh	r2, [r3, #12]
	        msg_sbus->rx_channel[6]  = (int16_t)((ptr[9] >> 2) | ((ptr[10] << 6) & 0x07FF));
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	3309      	adds	r3, #9
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	b2db      	uxtb	r3, r3
 8002188:	b21a      	sxth	r2, r3
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	330a      	adds	r3, #10
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	019b      	lsls	r3, r3, #6
 8002192:	b21b      	sxth	r3, r3
 8002194:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002198:	b21b      	sxth	r3, r3
 800219a:	4313      	orrs	r3, r2
 800219c:	b21a      	sxth	r2, r3
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	81da      	strh	r2, [r3, #14]
	        msg_sbus->rx_channel[7]  = (int16_t)((ptr[10] >> 5) | ((ptr[11] << 3) & 0x07FF));
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	330a      	adds	r3, #10
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	b21a      	sxth	r2, r3
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	330b      	adds	r3, #11
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021bc:	b21b      	sxth	r3, r3
 80021be:	4313      	orrs	r3, r2
 80021c0:	b21a      	sxth	r2, r3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	821a      	strh	r2, [r3, #16]
	        msg_sbus->rx_channel[8]  = (int16_t)(ptr[12] | ((ptr[13] << 8) & 0x07FF));
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	330c      	adds	r3, #12
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b21a      	sxth	r2, r3
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	330d      	adds	r3, #13
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021dc:	b21b      	sxth	r3, r3
 80021de:	4313      	orrs	r3, r2
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	825a      	strh	r2, [r3, #18]
	        msg_sbus->rx_channel[9]  = (int16_t)((ptr[13] >> 3) | ((ptr[14] << 5) & 0x07FF));
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	330d      	adds	r3, #13
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	08db      	lsrs	r3, r3, #3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	b21a      	sxth	r2, r3
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	330e      	adds	r3, #14
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	015b      	lsls	r3, r3, #5
 80021fa:	b21b      	sxth	r3, r3
 80021fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002200:	b21b      	sxth	r3, r3
 8002202:	4313      	orrs	r3, r2
 8002204:	b21a      	sxth	r2, r3
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	829a      	strh	r2, [r3, #20]
	        msg_sbus->rx_channel[10] = (int16_t)((ptr[14] >> 6) | (ptr[15] << 2) |((ptr[16] << 10) & 0x07FF));
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	330e      	adds	r3, #14
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	099b      	lsrs	r3, r3, #6
 8002212:	b2db      	uxtb	r3, r3
 8002214:	b21a      	sxth	r2, r3
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	330f      	adds	r3, #15
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	b21b      	sxth	r3, r3
 8002220:	4313      	orrs	r3, r2
 8002222:	b21a      	sxth	r2, r3
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	3310      	adds	r3, #16
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	029b      	lsls	r3, r3, #10
 800222c:	b21b      	sxth	r3, r3
 800222e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002232:	b21b      	sxth	r3, r3
 8002234:	4313      	orrs	r3, r2
 8002236:	b21a      	sxth	r2, r3
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	82da      	strh	r2, [r3, #22]
	        msg_sbus->rx_channel[11] = (int16_t)((ptr[16] >> 1) | ((ptr[17] << 7) & 0x07FF));
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	3310      	adds	r3, #16
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	085b      	lsrs	r3, r3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	b21a      	sxth	r2, r3
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	3311      	adds	r3, #17
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	01db      	lsls	r3, r3, #7
 8002250:	b21b      	sxth	r3, r3
 8002252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002256:	b21b      	sxth	r3, r3
 8002258:	4313      	orrs	r3, r2
 800225a:	b21a      	sxth	r2, r3
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	831a      	strh	r2, [r3, #24]
	        msg_sbus->rx_channel[12] = (int16_t)((ptr[17] >> 4) | ((ptr[18] << 4) & 0x07FF));
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	3311      	adds	r3, #17
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	b2db      	uxtb	r3, r3
 800226a:	b21a      	sxth	r2, r3
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	3312      	adds	r3, #18
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	b21b      	sxth	r3, r3
 8002276:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800227a:	b21b      	sxth	r3, r3
 800227c:	4313      	orrs	r3, r2
 800227e:	b21a      	sxth	r2, r3
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	835a      	strh	r2, [r3, #26]
	        msg_sbus->rx_channel[13] = (int16_t)((ptr[18] >> 7) | (ptr[19] << 1) | ((ptr[20] << 9) & 0x07FF));
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	3312      	adds	r3, #18
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	09db      	lsrs	r3, r3, #7
 800228c:	b2db      	uxtb	r3, r3
 800228e:	b21a      	sxth	r2, r3
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	3313      	adds	r3, #19
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	b21b      	sxth	r3, r3
 800229a:	4313      	orrs	r3, r2
 800229c:	b21a      	sxth	r2, r3
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	3314      	adds	r3, #20
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	025b      	lsls	r3, r3, #9
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ac:	b21b      	sxth	r3, r3
 80022ae:	4313      	orrs	r3, r2
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	839a      	strh	r2, [r3, #28]
	        msg_sbus->rx_channel[14] = (int16_t)((ptr[20] >> 2) | ((ptr[21] << 6) & 0x07FF));
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	3314      	adds	r3, #20
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	089b      	lsrs	r3, r3, #2
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	b21a      	sxth	r2, r3
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	3315      	adds	r3, #21
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	019b      	lsls	r3, r3, #6
 80022ca:	b21b      	sxth	r3, r3
 80022cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	4313      	orrs	r3, r2
 80022d4:	b21a      	sxth	r2, r3
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	83da      	strh	r2, [r3, #30]
	        msg_sbus->rx_channel[15] = (int16_t)((ptr[21] >> 5) | ((ptr[22] << 3) & 0x07FF));
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	3315      	adds	r3, #21
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	b21a      	sxth	r2, r3
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	3316      	adds	r3, #22
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	b21b      	sxth	r3, r3
 80022f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022f4:	b21b      	sxth	r3, r3
 80022f6:	4313      	orrs	r3, r2
 80022f8:	b21a      	sxth	r2, r3
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	841a      	strh	r2, [r3, #32]
	        msg_sbus->rx_channel17 	= ptr[23] & MSG_SBUS_CH17_BIT_MASK;
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	3317      	adds	r3, #23
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	b2da      	uxtb	r2, r3
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	        msg_sbus->rx_channel18 	= ptr[23] & MSG_SBUS_CH18_BIT_MASK;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	3317      	adds	r3, #23
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	b2da      	uxtb	r2, r3
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	        msg_sbus->frame_lost 	= ptr[23] & MSG_SBUS_FL_BIT_MASK;
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	3317      	adds	r3, #23
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	b2da      	uxtb	r2, r3
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	        msg_sbus->failsafe 		= ptr[23] & MSG_SBUS_FS_BIT_MASK;
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	3317      	adds	r3, #23
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	b2da      	uxtb	r2, r3
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25


		rx_recv_cnt[0]++;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	601a      	str	r2, [r3, #0]

		printf("cnt: %d\t ch[1]:%d\t ch[2]:%d\t ch[3]:%d\t ch[4]:%d\t ch[5]:%d\t ch[6]:%d\t ch[7]:%d\t ch[8]:%d\t FL:%d FS:%d\n",rx_recv_cnt[0], msg_sbus->rx_channel[0],msg_sbus->rx_channel[1],msg_sbus->rx_channel[2],msg_sbus->rx_channel[3],msg_sbus->rx_channel[4],msg_sbus->rx_channel[5],msg_sbus->rx_channel[6],msg_sbus->rx_channel[7], msg_sbus->frame_lost, msg_sbus->failsafe);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6819      	ldr	r1, [r3, #0]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800235a:	469c      	mov	ip, r3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002362:	469e      	mov	lr, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800236a:	461a      	mov	r2, r3
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002372:	4618      	mov	r0, r3
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800237a:	461c      	mov	r4, r3
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002382:	461d      	mov	r5, r3
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800238a:	461e      	mov	r6, r3
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002392:	607b      	str	r3, [r7, #4]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023a2:	9307      	str	r3, [sp, #28]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	9306      	str	r3, [sp, #24]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	9305      	str	r3, [sp, #20]
 80023ac:	9604      	str	r6, [sp, #16]
 80023ae:	9503      	str	r5, [sp, #12]
 80023b0:	9402      	str	r4, [sp, #8]
 80023b2:	9001      	str	r0, [sp, #4]
 80023b4:	9200      	str	r2, [sp, #0]
 80023b6:	4673      	mov	r3, lr
 80023b8:	4662      	mov	r2, ip
 80023ba:	4806      	ldr	r0, [pc, #24]	; (80023d4 <SBUS_Parsing+0x37c>)
 80023bc:	f008 fc8c 	bl	800acd8 <iprintf>
	{
		rx_err_cnt[0]++;
	}
//	printf("recv: %d\t err: %d\n", rx_recv_cnt[0], rx_err_cnt[0]);

}
 80023c0:	e004      	b.n	80023cc <SBUS_Parsing+0x374>
		rx_err_cnt[0]++;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	601a      	str	r2, [r3, #0]
}
 80023cc:	bf00      	nop
 80023ce:	372c      	adds	r7, #44	; 0x2c
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d4:	0800dc08 	.word	0x0800dc08

080023d8 <LL_SPI_Enable>:
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	601a      	str	r2, [r3, #0]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_SPI_IsActiveFlag_RXNE>:
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <LL_SPI_IsActiveFlag_RXNE+0x18>
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <LL_SPI_IsActiveFlag_TXE>:
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b02      	cmp	r3, #2
 8002430:	d101      	bne.n	8002436 <LL_SPI_IsActiveFlag_TXE+0x18>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_SPI_ReceiveData8>:
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	330c      	adds	r3, #12
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	b2db      	uxtb	r3, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_SPI_TransmitData8>:
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	330c      	adds	r3, #12
 8002470:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	701a      	strb	r2, [r3, #0]
}
 8002478:	bf00      	nop
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_GPIO_SetOutputPin>:
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	619a      	str	r2, [r3, #24]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_GPIO_ResetOutputPin>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	041a      	lsls	r2, r3, #16
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	619a      	str	r2, [r3, #24]
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <W25QXX_SPI_Initialization>:

w25qxx_t w25qxx;


void W25QXX_SPI_Initialization(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
	LL_SPI_Enable(W25QXX_SPI_CHANNEL);
 80024c4:	4805      	ldr	r0, [pc, #20]	; (80024dc <W25QXX_SPI_Initialization+0x1c>)
 80024c6:	f7ff ff87 	bl	80023d8 <LL_SPI_Enable>
	CHIP_DESELECT(W25QXX);
 80024ca:	2108      	movs	r1, #8
 80024cc:	4804      	ldr	r0, [pc, #16]	; (80024e0 <W25QXX_SPI_Initialization+0x20>)
 80024ce:	f7ff ffd9 	bl	8002484 <LL_GPIO_SetOutputPin>

	W25qxx_Init();
 80024d2:	f000 f925 	bl	8002720 <W25qxx_Init>

}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40003c00 	.word	0x40003c00
 80024e0:	40020400 	.word	0x40020400

080024e4 <W25qxx_Spi>:




unsigned char W25qxx_Spi(unsigned char data)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(W25QXX_SPI_CHANNEL)==RESET);
 80024ee:	bf00      	nop
 80024f0:	480c      	ldr	r0, [pc, #48]	; (8002524 <W25qxx_Spi+0x40>)
 80024f2:	f7ff ff94 	bl	800241e <LL_SPI_IsActiveFlag_TXE>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f9      	beq.n	80024f0 <W25qxx_Spi+0xc>
	LL_SPI_TransmitData8(W25QXX_SPI_CHANNEL, data);
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	4619      	mov	r1, r3
 8002500:	4808      	ldr	r0, [pc, #32]	; (8002524 <W25qxx_Spi+0x40>)
 8002502:	f7ff ffad 	bl	8002460 <LL_SPI_TransmitData8>

	while(LL_SPI_IsActiveFlag_RXNE(W25QXX_SPI_CHANNEL)==RESET);
 8002506:	bf00      	nop
 8002508:	4806      	ldr	r0, [pc, #24]	; (8002524 <W25qxx_Spi+0x40>)
 800250a:	f7ff ff75 	bl	80023f8 <LL_SPI_IsActiveFlag_RXNE>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f9      	beq.n	8002508 <W25qxx_Spi+0x24>
	return LL_SPI_ReceiveData8(W25QXX_SPI_CHANNEL);
 8002514:	4803      	ldr	r0, [pc, #12]	; (8002524 <W25qxx_Spi+0x40>)
 8002516:	f7ff ff95 	bl	8002444 <LL_SPI_ReceiveData8>
 800251a:	4603      	mov	r3, r0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40003c00 	.word	0x40003c00

08002528 <W25qxx_Spi_Receive>:


void W25qxx_Spi_Receive(unsigned char* data, unsigned int len)
{
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
	unsigned int i = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
	while(i<len) {
 8002536:	e01b      	b.n	8002570 <W25qxx_Spi_Receive+0x48>

		while(LL_SPI_IsActiveFlag_TXE(W25QXX_SPI_CHANNEL)==RESET);
 8002538:	bf00      	nop
 800253a:	4812      	ldr	r0, [pc, #72]	; (8002584 <W25qxx_Spi_Receive+0x5c>)
 800253c:	f7ff ff6f 	bl	800241e <LL_SPI_IsActiveFlag_TXE>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f9      	beq.n	800253a <W25qxx_Spi_Receive+0x12>
		LL_SPI_TransmitData8(W25QXX_SPI_CHANNEL, W25QXX_DUMMY_BYTE);
 8002546:	21a5      	movs	r1, #165	; 0xa5
 8002548:	480e      	ldr	r0, [pc, #56]	; (8002584 <W25qxx_Spi_Receive+0x5c>)
 800254a:	f7ff ff89 	bl	8002460 <LL_SPI_TransmitData8>

		while(LL_SPI_IsActiveFlag_RXNE(W25QXX_SPI_CHANNEL)==RESET);
 800254e:	bf00      	nop
 8002550:	480c      	ldr	r0, [pc, #48]	; (8002584 <W25qxx_Spi_Receive+0x5c>)
 8002552:	f7ff ff51 	bl	80023f8 <LL_SPI_IsActiveFlag_RXNE>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f9      	beq.n	8002550 <W25qxx_Spi_Receive+0x28>
		data[i++] = LL_SPI_ReceiveData8(W25QXX_SPI_CHANNEL);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	60fa      	str	r2, [r7, #12]
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	18d4      	adds	r4, r2, r3
 8002566:	4807      	ldr	r0, [pc, #28]	; (8002584 <W25qxx_Spi_Receive+0x5c>)
 8002568:	f7ff ff6c 	bl	8002444 <LL_SPI_ReceiveData8>
 800256c:	4603      	mov	r3, r0
 800256e:	7023      	strb	r3, [r4, #0]
	while(i<len) {
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d3df      	bcc.n	8002538 <W25qxx_Spi_Receive+0x10>

	}
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	bd90      	pop	{r4, r7, pc}
 8002582:	bf00      	nop
 8002584:	40003c00 	.word	0x40003c00

08002588 <W25qxx_ReadID>:

//////////////////////////////////////////////////////////////


uint32_t W25qxx_ReadID(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	607b      	str	r3, [r7, #4]
	uint8_t pBuffer[3];

	CHIP_SELECT(W25QXX);
 8002592:	2108      	movs	r1, #8
 8002594:	480d      	ldr	r0, [pc, #52]	; (80025cc <W25qxx_ReadID+0x44>)
 8002596:	f7ff ff83 	bl	80024a0 <LL_GPIO_ResetOutputPin>
	W25qxx_Spi(REG_ADDR_JEDEC_ID);
 800259a:	209f      	movs	r0, #159	; 0x9f
 800259c:	f7ff ffa2 	bl	80024e4 <W25qxx_Spi>
	W25qxx_Spi_Receive(pBuffer,sizeof(pBuffer));
 80025a0:	463b      	mov	r3, r7
 80025a2:	2103      	movs	r1, #3
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ffbf 	bl	8002528 <W25qxx_Spi_Receive>
	CHIP_DESELECT(W25QXX);
 80025aa:	2108      	movs	r1, #8
 80025ac:	4807      	ldr	r0, [pc, #28]	; (80025cc <W25qxx_ReadID+0x44>)
 80025ae:	f7ff ff69 	bl	8002484 <LL_GPIO_SetOutputPin>
	Temp = (pBuffer[0] << 16) | (pBuffer[1] << 8) | pBuffer[2];
 80025b2:	783b      	ldrb	r3, [r7, #0]
 80025b4:	041a      	lsls	r2, r3, #16
 80025b6:	787b      	ldrb	r3, [r7, #1]
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	4313      	orrs	r3, r2
 80025bc:	78ba      	ldrb	r2, [r7, #2]
 80025be:	4313      	orrs	r3, r2
 80025c0:	607b      	str	r3, [r7, #4]
	return Temp;
 80025c2:	687b      	ldr	r3, [r7, #4]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40020400 	.word	0x40020400

080025d0 <W25qxx_ReadUniqID>:

void W25qxx_ReadUniqID(void)
{
 80025d0:	b590      	push	{r4, r7, lr}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
	CHIP_SELECT(W25QXX);
 80025d6:	2108      	movs	r1, #8
 80025d8:	481e      	ldr	r0, [pc, #120]	; (8002654 <W25qxx_ReadUniqID+0x84>)
 80025da:	f7ff ff61 	bl	80024a0 <LL_GPIO_ResetOutputPin>
	W25qxx_Spi(REG_ADDR_UNIQUE_ID);
 80025de:	204b      	movs	r0, #75	; 0x4b
 80025e0:	f7ff ff80 	bl	80024e4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80025e4:	2300      	movs	r3, #0
 80025e6:	71fb      	strb	r3, [r7, #7]
 80025e8:	e005      	b.n	80025f6 <W25qxx_ReadUniqID+0x26>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80025ea:	20a5      	movs	r0, #165	; 0xa5
 80025ec:	f7ff ff7a 	bl	80024e4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	3301      	adds	r3, #1
 80025f4:	71fb      	strb	r3, [r7, #7]
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d9f6      	bls.n	80025ea <W25qxx_ReadUniqID+0x1a>
	for (uint8_t i = 0; i < 8; i++)
 80025fc:	2300      	movs	r3, #0
 80025fe:	71bb      	strb	r3, [r7, #6]
 8002600:	e00b      	b.n	800261a <W25qxx_ReadUniqID+0x4a>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002602:	79bc      	ldrb	r4, [r7, #6]
 8002604:	20a5      	movs	r0, #165	; 0xa5
 8002606:	f7ff ff6d 	bl	80024e4 <W25qxx_Spi>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	4b12      	ldr	r3, [pc, #72]	; (8002658 <W25qxx_ReadUniqID+0x88>)
 8002610:	4423      	add	r3, r4
 8002612:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8002614:	79bb      	ldrb	r3, [r7, #6]
 8002616:	3301      	adds	r3, #1
 8002618:	71bb      	strb	r3, [r7, #6]
 800261a:	79bb      	ldrb	r3, [r7, #6]
 800261c:	2b07      	cmp	r3, #7
 800261e:	d9f0      	bls.n	8002602 <W25qxx_ReadUniqID+0x32>
	CHIP_DESELECT(W25QXX);
 8002620:	2108      	movs	r1, #8
 8002622:	480c      	ldr	r0, [pc, #48]	; (8002654 <W25qxx_ReadUniqID+0x84>)
 8002624:	f7ff ff2e 	bl	8002484 <LL_GPIO_SetOutputPin>

#if (_W25QXX_DEBUG == 1)
	for (uint8_t i = 0; i < 8; i++)
 8002628:	2300      	movs	r3, #0
 800262a:	717b      	strb	r3, [r7, #5]
 800262c:	e00a      	b.n	8002644 <W25qxx_ReadUniqID+0x74>
		printf("w25qxx UniqID:0x%X\r\n", w25qxx.UniqID[i]);
 800262e:	797b      	ldrb	r3, [r7, #5]
 8002630:	4a09      	ldr	r2, [pc, #36]	; (8002658 <W25qxx_ReadUniqID+0x88>)
 8002632:	4413      	add	r3, r2
 8002634:	785b      	ldrb	r3, [r3, #1]
 8002636:	4619      	mov	r1, r3
 8002638:	4808      	ldr	r0, [pc, #32]	; (800265c <W25qxx_ReadUniqID+0x8c>)
 800263a:	f008 fb4d 	bl	800acd8 <iprintf>
	for (uint8_t i = 0; i < 8; i++)
 800263e:	797b      	ldrb	r3, [r7, #5]
 8002640:	3301      	adds	r3, #1
 8002642:	717b      	strb	r3, [r7, #5]
 8002644:	797b      	ldrb	r3, [r7, #5]
 8002646:	2b07      	cmp	r3, #7
 8002648:	d9f1      	bls.n	800262e <W25qxx_ReadUniqID+0x5e>
#endif


}
 800264a:	bf00      	nop
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bd90      	pop	{r4, r7, pc}
 8002654:	40020400 	.word	0x40020400
 8002658:	20000cd0 	.word	0x20000cd0
 800265c:	0800dc70 	.word	0x0800dc70

08002660 <W25qxx_ReadStatusRegister>:




uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	73fb      	strb	r3, [r7, #15]
	CHIP_SELECT(W25QXX);
 800266e:	2108      	movs	r1, #8
 8002670:	4826      	ldr	r0, [pc, #152]	; (800270c <W25qxx_ReadStatusRegister+0xac>)
 8002672:	f7ff ff15 	bl	80024a0 <LL_GPIO_ResetOutputPin>
	if (SelectStatusRegister_1_2_3 == 1)
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d10c      	bne.n	8002696 <W25qxx_ReadStatusRegister+0x36>
	{
		W25qxx_Spi(REG_READ_STATUS_1);
 800267c:	2005      	movs	r0, #5
 800267e:	f7ff ff31 	bl	80024e4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002682:	20a5      	movs	r0, #165	; 0xa5
 8002684:	f7ff ff2e 	bl	80024e4 <W25qxx_Spi>
 8002688:	4603      	mov	r3, r0
 800268a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 800268c:	4a20      	ldr	r2, [pc, #128]	; (8002710 <W25qxx_ReadStatusRegister+0xb0>)
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8002694:	e01b      	b.n	80026ce <W25qxx_ReadStatusRegister+0x6e>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d10c      	bne.n	80026b6 <W25qxx_ReadStatusRegister+0x56>
	{
		W25qxx_Spi(REG_READ_STATUS_2);
 800269c:	2035      	movs	r0, #53	; 0x35
 800269e:	f7ff ff21 	bl	80024e4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80026a2:	20a5      	movs	r0, #165	; 0xa5
 80026a4:	f7ff ff1e 	bl	80024e4 <W25qxx_Spi>
 80026a8:	4603      	mov	r3, r0
 80026aa:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80026ac:	4a18      	ldr	r2, [pc, #96]	; (8002710 <W25qxx_ReadStatusRegister+0xb0>)
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80026b4:	e00b      	b.n	80026ce <W25qxx_ReadStatusRegister+0x6e>
	}
	else
	{
		W25qxx_Spi(REG_READ_STATUS_3);
 80026b6:	2015      	movs	r0, #21
 80026b8:	f7ff ff14 	bl	80024e4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80026bc:	20a5      	movs	r0, #165	; 0xa5
 80026be:	f7ff ff11 	bl	80024e4 <W25qxx_Spi>
 80026c2:	4603      	mov	r3, r0
 80026c4:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80026c6:	4a12      	ldr	r2, [pc, #72]	; (8002710 <W25qxx_ReadStatusRegister+0xb0>)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	CHIP_DESELECT(W25QXX);
 80026ce:	2108      	movs	r1, #8
 80026d0:	480e      	ldr	r0, [pc, #56]	; (800270c <W25qxx_ReadStatusRegister+0xac>)
 80026d2:	f7ff fed7 	bl	8002484 <LL_GPIO_SetOutputPin>

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx StatusRegister1:0x%X\r\n", w25qxx.StatusRegister1);
 80026d6:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <W25qxx_ReadStatusRegister+0xb0>)
 80026d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026dc:	4619      	mov	r1, r3
 80026de:	480d      	ldr	r0, [pc, #52]	; (8002714 <W25qxx_ReadStatusRegister+0xb4>)
 80026e0:	f008 fafa 	bl	800acd8 <iprintf>
	printf("w25qxx StatusRegister2:0x%X\r\n", w25qxx.StatusRegister2);
 80026e4:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <W25qxx_ReadStatusRegister+0xb0>)
 80026e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80026ea:	4619      	mov	r1, r3
 80026ec:	480a      	ldr	r0, [pc, #40]	; (8002718 <W25qxx_ReadStatusRegister+0xb8>)
 80026ee:	f008 faf3 	bl	800acd8 <iprintf>
	printf("w25qxx StatusRegister3:0x%X\r\n", w25qxx.StatusRegister3);
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <W25qxx_ReadStatusRegister+0xb0>)
 80026f4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80026f8:	4619      	mov	r1, r3
 80026fa:	4808      	ldr	r0, [pc, #32]	; (800271c <W25qxx_ReadStatusRegister+0xbc>)
 80026fc:	f008 faec 	bl	800acd8 <iprintf>
#endif
	return status;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40020400 	.word	0x40020400
 8002710:	20000cd0 	.word	0x20000cd0
 8002714:	0800dc88 	.word	0x0800dc88
 8002718:	0800dca8 	.word	0x0800dca8
 800271c:	0800dcc8 	.word	0x0800dcc8

08002720 <W25qxx_Init>:
	CHIP_DESELECT(W25QXX);
}


bool W25qxx_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8002726:	4b87      	ldr	r3, [pc, #540]	; (8002944 <W25qxx_Init+0x224>)
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 800272e:	4886      	ldr	r0, [pc, #536]	; (8002948 <W25qxx_Init+0x228>)
 8002730:	f008 fb6e 	bl	800ae10 <puts>
#endif
	id = W25qxx_ReadID();
 8002734:	f7ff ff28 	bl	8002588 <W25qxx_ReadID>
 8002738:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4883      	ldr	r0, [pc, #524]	; (800294c <W25qxx_Init+0x22c>)
 800273e:	f008 facb 	bl	800acd8 <iprintf>
#endif
	switch (id & 0x000000FF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	3b11      	subs	r3, #17
 8002748:	2b0f      	cmp	r3, #15
 800274a:	f200 808a 	bhi.w	8002862 <W25qxx_Init+0x142>
 800274e:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <W25qxx_Init+0x34>)
 8002750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002754:	0800284f 	.word	0x0800284f
 8002758:	0800283b 	.word	0x0800283b
 800275c:	08002827 	.word	0x08002827
 8002760:	08002813 	.word	0x08002813
 8002764:	080027ff 	.word	0x080027ff
 8002768:	080027eb 	.word	0x080027eb
 800276c:	080027d7 	.word	0x080027d7
 8002770:	080027c1 	.word	0x080027c1
 8002774:	080027ab 	.word	0x080027ab
 8002778:	08002863 	.word	0x08002863
 800277c:	08002863 	.word	0x08002863
 8002780:	08002863 	.word	0x08002863
 8002784:	08002863 	.word	0x08002863
 8002788:	08002863 	.word	0x08002863
 800278c:	08002863 	.word	0x08002863
 8002790:	08002795 	.word	0x08002795
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8002794:	4b6b      	ldr	r3, [pc, #428]	; (8002944 <W25qxx_Init+0x224>)
 8002796:	220a      	movs	r2, #10
 8002798:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800279a:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <W25qxx_Init+0x224>)
 800279c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027a0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 80027a2:	486b      	ldr	r0, [pc, #428]	; (8002950 <W25qxx_Init+0x230>)
 80027a4:	f008 fb34 	bl	800ae10 <puts>
#endif
		break;
 80027a8:	e064      	b.n	8002874 <W25qxx_Init+0x154>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 80027aa:	4b66      	ldr	r3, [pc, #408]	; (8002944 <W25qxx_Init+0x224>)
 80027ac:	2209      	movs	r2, #9
 80027ae:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80027b0:	4b64      	ldr	r3, [pc, #400]	; (8002944 <W25qxx_Init+0x224>)
 80027b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027b6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 80027b8:	4866      	ldr	r0, [pc, #408]	; (8002954 <W25qxx_Init+0x234>)
 80027ba:	f008 fb29 	bl	800ae10 <puts>
#endif
		break;
 80027be:	e059      	b.n	8002874 <W25qxx_Init+0x154>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 80027c0:	4b60      	ldr	r3, [pc, #384]	; (8002944 <W25qxx_Init+0x224>)
 80027c2:	2208      	movs	r2, #8
 80027c4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80027c6:	4b5f      	ldr	r3, [pc, #380]	; (8002944 <W25qxx_Init+0x224>)
 80027c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027cc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 80027ce:	4862      	ldr	r0, [pc, #392]	; (8002958 <W25qxx_Init+0x238>)
 80027d0:	f008 fb1e 	bl	800ae10 <puts>
#endif
		break;
 80027d4:	e04e      	b.n	8002874 <W25qxx_Init+0x154>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80027d6:	4b5b      	ldr	r3, [pc, #364]	; (8002944 <W25qxx_Init+0x224>)
 80027d8:	2207      	movs	r2, #7
 80027da:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80027dc:	4b59      	ldr	r3, [pc, #356]	; (8002944 <W25qxx_Init+0x224>)
 80027de:	2280      	movs	r2, #128	; 0x80
 80027e0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 80027e2:	485e      	ldr	r0, [pc, #376]	; (800295c <W25qxx_Init+0x23c>)
 80027e4:	f008 fb14 	bl	800ae10 <puts>
#endif
		break;
 80027e8:	e044      	b.n	8002874 <W25qxx_Init+0x154>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80027ea:	4b56      	ldr	r3, [pc, #344]	; (8002944 <W25qxx_Init+0x224>)
 80027ec:	2206      	movs	r2, #6
 80027ee:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80027f0:	4b54      	ldr	r3, [pc, #336]	; (8002944 <W25qxx_Init+0x224>)
 80027f2:	2240      	movs	r2, #64	; 0x40
 80027f4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 80027f6:	485a      	ldr	r0, [pc, #360]	; (8002960 <W25qxx_Init+0x240>)
 80027f8:	f008 fb0a 	bl	800ae10 <puts>
#endif
		break;
 80027fc:	e03a      	b.n	8002874 <W25qxx_Init+0x154>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80027fe:	4b51      	ldr	r3, [pc, #324]	; (8002944 <W25qxx_Init+0x224>)
 8002800:	2205      	movs	r2, #5
 8002802:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8002804:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <W25qxx_Init+0x224>)
 8002806:	2220      	movs	r2, #32
 8002808:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 800280a:	4856      	ldr	r0, [pc, #344]	; (8002964 <W25qxx_Init+0x244>)
 800280c:	f008 fb00 	bl	800ae10 <puts>
#endif
		break;
 8002810:	e030      	b.n	8002874 <W25qxx_Init+0x154>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8002812:	4b4c      	ldr	r3, [pc, #304]	; (8002944 <W25qxx_Init+0x224>)
 8002814:	2204      	movs	r2, #4
 8002816:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8002818:	4b4a      	ldr	r3, [pc, #296]	; (8002944 <W25qxx_Init+0x224>)
 800281a:	2210      	movs	r2, #16
 800281c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 800281e:	4852      	ldr	r0, [pc, #328]	; (8002968 <W25qxx_Init+0x248>)
 8002820:	f008 faf6 	bl	800ae10 <puts>
#endif
		break;
 8002824:	e026      	b.n	8002874 <W25qxx_Init+0x154>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8002826:	4b47      	ldr	r3, [pc, #284]	; (8002944 <W25qxx_Init+0x224>)
 8002828:	2203      	movs	r2, #3
 800282a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 800282c:	4b45      	ldr	r3, [pc, #276]	; (8002944 <W25qxx_Init+0x224>)
 800282e:	2208      	movs	r2, #8
 8002830:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8002832:	484e      	ldr	r0, [pc, #312]	; (800296c <W25qxx_Init+0x24c>)
 8002834:	f008 faec 	bl	800ae10 <puts>
#endif
		break;
 8002838:	e01c      	b.n	8002874 <W25qxx_Init+0x154>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 800283a:	4b42      	ldr	r3, [pc, #264]	; (8002944 <W25qxx_Init+0x224>)
 800283c:	2202      	movs	r2, #2
 800283e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8002840:	4b40      	ldr	r3, [pc, #256]	; (8002944 <W25qxx_Init+0x224>)
 8002842:	2204      	movs	r2, #4
 8002844:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8002846:	484a      	ldr	r0, [pc, #296]	; (8002970 <W25qxx_Init+0x250>)
 8002848:	f008 fae2 	bl	800ae10 <puts>
#endif
		break;
 800284c:	e012      	b.n	8002874 <W25qxx_Init+0x154>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 800284e:	4b3d      	ldr	r3, [pc, #244]	; (8002944 <W25qxx_Init+0x224>)
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8002854:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <W25qxx_Init+0x224>)
 8002856:	2202      	movs	r2, #2
 8002858:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 800285a:	4846      	ldr	r0, [pc, #280]	; (8002974 <W25qxx_Init+0x254>)
 800285c:	f008 fad8 	bl	800ae10 <puts>
#endif
		break;
 8002860:	e008      	b.n	8002874 <W25qxx_Init+0x154>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8002862:	4845      	ldr	r0, [pc, #276]	; (8002978 <W25qxx_Init+0x258>)
 8002864:	f008 fad4 	bl	800ae10 <puts>
#endif
		w25qxx.Lock = 0;
 8002868:	4b36      	ldr	r3, [pc, #216]	; (8002944 <W25qxx_Init+0x224>)
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8002870:	2300      	movs	r3, #0
 8002872:	e063      	b.n	800293c <W25qxx_Init+0x21c>
	}
	w25qxx.PageSize = 256;
 8002874:	4b33      	ldr	r3, [pc, #204]	; (8002944 <W25qxx_Init+0x224>)
 8002876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800287a:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800287c:	4b31      	ldr	r3, [pc, #196]	; (8002944 <W25qxx_Init+0x224>)
 800287e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002882:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8002884:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <W25qxx_Init+0x224>)
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	4a2e      	ldr	r2, [pc, #184]	; (8002944 <W25qxx_Init+0x224>)
 800288c:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800288e:	4b2d      	ldr	r3, [pc, #180]	; (8002944 <W25qxx_Init+0x224>)
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	4a2c      	ldr	r2, [pc, #176]	; (8002944 <W25qxx_Init+0x224>)
 8002894:	6912      	ldr	r2, [r2, #16]
 8002896:	fb02 f303 	mul.w	r3, r2, r3
 800289a:	4a2a      	ldr	r2, [pc, #168]	; (8002944 <W25qxx_Init+0x224>)
 800289c:	8952      	ldrh	r2, [r2, #10]
 800289e:	fbb3 f3f2 	udiv	r3, r3, r2
 80028a2:	4a28      	ldr	r2, [pc, #160]	; (8002944 <W25qxx_Init+0x224>)
 80028a4:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80028a6:	4b27      	ldr	r3, [pc, #156]	; (8002944 <W25qxx_Init+0x224>)
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	4a25      	ldr	r2, [pc, #148]	; (8002944 <W25qxx_Init+0x224>)
 80028ae:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 80028b0:	4b24      	ldr	r3, [pc, #144]	; (8002944 <W25qxx_Init+0x224>)
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	4a23      	ldr	r2, [pc, #140]	; (8002944 <W25qxx_Init+0x224>)
 80028b6:	6912      	ldr	r2, [r2, #16]
 80028b8:	fb02 f303 	mul.w	r3, r2, r3
 80028bc:	0a9b      	lsrs	r3, r3, #10
 80028be:	4a21      	ldr	r2, [pc, #132]	; (8002944 <W25qxx_Init+0x224>)
 80028c0:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 80028c2:	f7ff fe85 	bl	80025d0 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 80028c6:	2001      	movs	r0, #1
 80028c8:	f7ff feca 	bl	8002660 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 80028cc:	2002      	movs	r0, #2
 80028ce:	f7ff fec7 	bl	8002660 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 80028d2:	2003      	movs	r0, #3
 80028d4:	f7ff fec4 	bl	8002660 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 80028d8:	4b1a      	ldr	r3, [pc, #104]	; (8002944 <W25qxx_Init+0x224>)
 80028da:	895b      	ldrh	r3, [r3, #10]
 80028dc:	4619      	mov	r1, r3
 80028de:	4827      	ldr	r0, [pc, #156]	; (800297c <W25qxx_Init+0x25c>)
 80028e0:	f008 f9fa 	bl	800acd8 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 80028e4:	4b17      	ldr	r3, [pc, #92]	; (8002944 <W25qxx_Init+0x224>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4619      	mov	r1, r3
 80028ea:	4825      	ldr	r0, [pc, #148]	; (8002980 <W25qxx_Init+0x260>)
 80028ec:	f008 f9f4 	bl	800acd8 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <W25qxx_Init+0x224>)
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	4619      	mov	r1, r3
 80028f6:	4823      	ldr	r0, [pc, #140]	; (8002984 <W25qxx_Init+0x264>)
 80028f8:	f008 f9ee 	bl	800acd8 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 80028fc:	4b11      	ldr	r3, [pc, #68]	; (8002944 <W25qxx_Init+0x224>)
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	4619      	mov	r1, r3
 8002902:	4821      	ldr	r0, [pc, #132]	; (8002988 <W25qxx_Init+0x268>)
 8002904:	f008 f9e8 	bl	800acd8 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8002908:	4b0e      	ldr	r3, [pc, #56]	; (8002944 <W25qxx_Init+0x224>)
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	4619      	mov	r1, r3
 800290e:	481f      	ldr	r0, [pc, #124]	; (800298c <W25qxx_Init+0x26c>)
 8002910:	f008 f9e2 	bl	800acd8 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <W25qxx_Init+0x224>)
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	4619      	mov	r1, r3
 800291a:	481d      	ldr	r0, [pc, #116]	; (8002990 <W25qxx_Init+0x270>)
 800291c:	f008 f9dc 	bl	800acd8 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8002920:	4b08      	ldr	r3, [pc, #32]	; (8002944 <W25qxx_Init+0x224>)
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	4619      	mov	r1, r3
 8002926:	481b      	ldr	r0, [pc, #108]	; (8002994 <W25qxx_Init+0x274>)
 8002928:	f008 f9d6 	bl	800acd8 <iprintf>
	printf("w25qxx Init Done\r\n");
 800292c:	481a      	ldr	r0, [pc, #104]	; (8002998 <W25qxx_Init+0x278>)
 800292e:	f008 fa6f 	bl	800ae10 <puts>
#endif
	w25qxx.Lock = 0;
 8002932:	4b04      	ldr	r3, [pc, #16]	; (8002944 <W25qxx_Init+0x224>)
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800293a:	2301      	movs	r3, #1
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20000cd0 	.word	0x20000cd0
 8002948:	0800dce8 	.word	0x0800dce8
 800294c:	0800dd00 	.word	0x0800dd00
 8002950:	0800dd14 	.word	0x0800dd14
 8002954:	0800dd2c 	.word	0x0800dd2c
 8002958:	0800dd44 	.word	0x0800dd44
 800295c:	0800dd5c 	.word	0x0800dd5c
 8002960:	0800dd74 	.word	0x0800dd74
 8002964:	0800dd8c 	.word	0x0800dd8c
 8002968:	0800dda4 	.word	0x0800dda4
 800296c:	0800ddbc 	.word	0x0800ddbc
 8002970:	0800ddd4 	.word	0x0800ddd4
 8002974:	0800ddec 	.word	0x0800ddec
 8002978:	0800de04 	.word	0x0800de04
 800297c:	0800de18 	.word	0x0800de18
 8002980:	0800de38 	.word	0x0800de38
 8002984:	0800de50 	.word	0x0800de50
 8002988:	0800de70 	.word	0x0800de70
 800298c:	0800de8c 	.word	0x0800de8c
 8002990:	0800deac 	.word	0x0800deac
 8002994:	0800dec8 	.word	0x0800dec8
 8002998:	0800dee8 	.word	0x0800dee8

0800299c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029a2:	463b      	mov	r3, r7
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80029ae:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029b0:	4a21      	ldr	r2, [pc, #132]	; (8002a38 <MX_ADC1_Init+0x9c>)
 80029b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80029b4:	4b1f      	ldr	r3, [pc, #124]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029b6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80029ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029bc:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80029c2:	4b1c      	ldr	r3, [pc, #112]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80029c8:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029ce:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029d6:	4b17      	ldr	r3, [pc, #92]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029d8:	2200      	movs	r2, #0
 80029da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029dc:	4b15      	ldr	r3, [pc, #84]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029de:	4a17      	ldr	r2, [pc, #92]	; (8002a3c <MX_ADC1_Init+0xa0>)
 80029e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029e2:	4b14      	ldr	r3, [pc, #80]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80029ee:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029f6:	4b0f      	ldr	r3, [pc, #60]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029fc:	480d      	ldr	r0, [pc, #52]	; (8002a34 <MX_ADC1_Init+0x98>)
 80029fe:	f003 ffa5 	bl	800694c <HAL_ADC_Init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002a08:	f002 f942 	bl	8004c90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002a0c:	230c      	movs	r3, #12
 8002a0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a10:	2301      	movs	r3, #1
 8002a12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002a14:	2307      	movs	r3, #7
 8002a16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a18:	463b      	mov	r3, r7
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4805      	ldr	r0, [pc, #20]	; (8002a34 <MX_ADC1_Init+0x98>)
 8002a1e:	f004 f907 	bl	8006c30 <HAL_ADC_ConfigChannel>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002a28:	f002 f932 	bl	8004c90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a2c:	bf00      	nop
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000cf8 	.word	0x20000cf8
 8002a38:	40012000 	.word	0x40012000
 8002a3c:	0f000001 	.word	0x0f000001

08002a40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a2e      	ldr	r2, [pc, #184]	; (8002b18 <HAL_ADC_MspInit+0xd8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d156      	bne.n	8002b10 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <HAL_ADC_MspInit+0xdc>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	4a2c      	ldr	r2, [pc, #176]	; (8002b1c <HAL_ADC_MspInit+0xdc>)
 8002a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a70:	6453      	str	r3, [r2, #68]	; 0x44
 8002a72:	4b2a      	ldr	r3, [pc, #168]	; (8002b1c <HAL_ADC_MspInit+0xdc>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	4b26      	ldr	r3, [pc, #152]	; (8002b1c <HAL_ADC_MspInit+0xdc>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	4a25      	ldr	r2, [pc, #148]	; (8002b1c <HAL_ADC_MspInit+0xdc>)
 8002a88:	f043 0304 	orr.w	r3, r3, #4
 8002a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8e:	4b23      	ldr	r3, [pc, #140]	; (8002b1c <HAL_ADC_MspInit+0xdc>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa6:	f107 0314 	add.w	r3, r7, #20
 8002aaa:	4619      	mov	r1, r3
 8002aac:	481c      	ldr	r0, [pc, #112]	; (8002b20 <HAL_ADC_MspInit+0xe0>)
 8002aae:	f005 faa9 	bl	8008004 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002ab2:	4b1c      	ldr	r3, [pc, #112]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002ab4:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <HAL_ADC_MspInit+0xe8>)
 8002ab6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002ab8:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002abe:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac4:	4b17      	ldr	r3, [pc, #92]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8002aca:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ad0:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002ad2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ad6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ad8:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002ada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ade:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ae0:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002ae2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ae6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002ae8:	4b0e      	ldr	r3, [pc, #56]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aee:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002af4:	480b      	ldr	r0, [pc, #44]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002af6:	f004 fc4d 	bl	8007394 <HAL_DMA_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002b00:	f002 f8c6 	bl	8004c90 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a07      	ldr	r2, [pc, #28]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38
 8002b0a:	4a06      	ldr	r2, [pc, #24]	; (8002b24 <HAL_ADC_MspInit+0xe4>)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002b10:	bf00      	nop
 8002b12:	3728      	adds	r7, #40	; 0x28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40012000 	.word	0x40012000
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40020800 	.word	0x40020800
 8002b24:	20000d40 	.word	0x20000d40
 8002b28:	40026410 	.word	0x40026410

08002b2c <QueueInit>:
#include <string.h>

#include "circular_queue.h"


void QueueInit(Queue* q){
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
	q->front = 0;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	q->rear = 0;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	q->cursor = 0;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	q->usage = 0;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <IsEmpty>:


int IsEmpty(Queue* q){
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	return (q->front == q->rear);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f8d3 21f4 	ldr.w	r2, [r3, #500]	; 0x1f4
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8002b74:	429a      	cmp	r2, r3
 8002b76:	bf0c      	ite	eq
 8002b78:	2301      	moveq	r3, #1
 8002b7a:	2300      	movne	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
	//return (q->usage == 0);
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <IsFull>:


int IsFull(Queue* q){
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
	return (q->front == ((q->rear + 1) % MAX_HISTORY_BUFFER_LENGTH));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f8d3 01f4 	ldr.w	r0, [r3, #500]	; 0x1f4
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8002ba0:	1c59      	adds	r1, r3, #1
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <IsFull+0x44>)
 8002ba4:	fb83 2301 	smull	r2, r3, r3, r1
 8002ba8:	109a      	asrs	r2, r3, #2
 8002baa:	17cb      	asrs	r3, r1, #31
 8002bac:	1ad2      	subs	r2, r2, r3
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	1aca      	subs	r2, r1, r3
 8002bb8:	4290      	cmp	r0, r2
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
	//return (q->usage == MAX_HISTORY_BUFFER);
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	66666667 	.word	0x66666667

08002bd4 <Enqueue>:


void Enqueue(Queue* q, uint8_t* str, uint8_t length){
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	4613      	mov	r3, r2
 8002be0:	71fb      	strb	r3, [r7, #7]
	if(IsFull(q)){
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f7ff ffd2 	bl	8002b8c <IsFull>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <Enqueue+0x20>
		Dequeue(q);
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f82c 	bl	8002c4c <Dequeue>
	}
	memcpy(q->history[q->rear], str, length);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8002bfa:	2232      	movs	r2, #50	; 0x32
 8002bfc:	fb02 f303 	mul.w	r3, r2, r3
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4413      	add	r3, r2
 8002c04:	79fa      	ldrb	r2, [r7, #7]
 8002c06:	68b9      	ldr	r1, [r7, #8]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f007 fb05 	bl	800a218 <memcpy>
	q->rear = (q->rear + 1) % MAX_HISTORY_BUFFER_LENGTH;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8002c14:	1c59      	adds	r1, r3, #1
 8002c16:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <Enqueue+0x74>)
 8002c18:	fb83 2301 	smull	r2, r3, r3, r1
 8002c1c:	109a      	asrs	r2, r3, #2
 8002c1e:	17cb      	asrs	r3, r1, #31
 8002c20:	1ad2      	subs	r2, r2, r3
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	1aca      	subs	r2, r1, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	q->usage++;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
}
 8002c40:	bf00      	nop
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	66666667 	.word	0x66666667

08002c4c <Dequeue>:


int Dequeue(Queue* q){
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
	if (IsEmpty(q)) {
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff83 	bl	8002b60 <IsEmpty>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <Dequeue+0x18>
		return 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	e019      	b.n	8002c98 <Dequeue+0x4c>
	}
	else {
		q->front = (q->front + 1) % MAX_HISTORY_BUFFER_LENGTH;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8002c6a:	1c59      	adds	r1, r3, #1
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <Dequeue+0x54>)
 8002c6e:	fb83 2301 	smull	r2, r3, r3, r1
 8002c72:	109a      	asrs	r2, r3, #2
 8002c74:	17cb      	asrs	r3, r1, #31
 8002c76:	1ad2      	subs	r2, r2, r3
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	1aca      	subs	r2, r1, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		q->usage--;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8002c8e:	1e5a      	subs	r2, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		return 1;
 8002c96:	2301      	movs	r3, #1
	}
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	66666667 	.word	0x66666667

08002ca4 <move_cursor>:


int move_cursor(Queue* q, int dir){
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
	if (dir == UP){
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d11c      	bne.n	8002cee <move_cursor+0x4a>
		if(q->cursor == q->front){
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d101      	bne.n	8002cc8 <move_cursor+0x24>
			return 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	e040      	b.n	8002d4a <move_cursor+0xa6>
		}

		if(q->cursor == 0){
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d104      	bne.n	8002cdc <move_cursor+0x38>
			q->cursor = MAX_HISTORY_BUFFER_LENGTH - 1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2209      	movs	r2, #9
 8002cd6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8002cda:	e006      	b.n	8002cea <move_cursor+0x46>
		}else{
			q->cursor = q->cursor - 1;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ce2:	1e5a      	subs	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		}
		return 1;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e02d      	b.n	8002d4a <move_cursor+0xa6>
	}
	else if(dir == DOWN){
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d129      	bne.n	8002d48 <move_cursor+0xa4>
		if(((q->cursor + 1) % MAX_HISTORY_BUFFER_LENGTH) == q->rear){
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cfa:	1c59      	adds	r1, r3, #1
 8002cfc:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <move_cursor+0xb4>)
 8002cfe:	fb83 2301 	smull	r2, r3, r3, r1
 8002d02:	109a      	asrs	r2, r3, #2
 8002d04:	17cb      	asrs	r3, r1, #31
 8002d06:	1ad2      	subs	r2, r2, r3
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	1aca      	subs	r2, r1, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d101      	bne.n	8002d20 <move_cursor+0x7c>
			return 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e014      	b.n	8002d4a <move_cursor+0xa6>
		}

		q->cursor = (q->cursor + 1) % MAX_HISTORY_BUFFER_LENGTH;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d26:	1c59      	adds	r1, r3, #1
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <move_cursor+0xb4>)
 8002d2a:	fb83 2301 	smull	r2, r3, r3, r1
 8002d2e:	109a      	asrs	r2, r3, #2
 8002d30:	17cb      	asrs	r3, r1, #31
 8002d32:	1ad2      	subs	r2, r2, r3
 8002d34:	4613      	mov	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	1aca      	subs	r2, r1, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		return 1;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <move_cursor+0xa6>
	}
	return 0;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	66666667 	.word	0x66666667

08002d5c <print_history>:



void print_history(Queue* q, int num){
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
	if(q->usage == 0){
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d06e      	beq.n	8002e4e <print_history+0xf2>
		return;
	}

	int idx = 1;
 8002d70:	2301      	movs	r3, #1
 8002d72:	60fb      	str	r3, [r7, #12]

	if(num){
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d038      	beq.n	8002dec <print_history+0x90>
		for(int i = 0; i < num; ++i){
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	e006      	b.n	8002d8e <print_history+0x32>
			move_cursor(q, UP);
 8002d80:	2100      	movs	r1, #0
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff ff8e 	bl	8002ca4 <move_cursor>
		for(int i = 0; i < num; ++i){
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	dbf4      	blt.n	8002d80 <print_history+0x24>
		}

		while(q->cursor != q->rear){
 8002d96:	e020      	b.n	8002dda <print_history+0x7e>
			printf("%d %s\r\n", idx++, q->history[q->cursor]);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	60fa      	str	r2, [r7, #12]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8002da4:	2132      	movs	r1, #50	; 0x32
 8002da6:	fb01 f202 	mul.w	r2, r1, r2
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	440a      	add	r2, r1
 8002dae:	4619      	mov	r1, r3
 8002db0:	4829      	ldr	r0, [pc, #164]	; (8002e58 <print_history+0xfc>)
 8002db2:	f007 ff91 	bl	800acd8 <iprintf>
			q->cursor = (q->cursor + 1) % MAX_HISTORY_BUFFER_LENGTH;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002dbc:	1c59      	adds	r1, r3, #1
 8002dbe:	4b27      	ldr	r3, [pc, #156]	; (8002e5c <print_history+0x100>)
 8002dc0:	fb83 2301 	smull	r2, r3, r3, r1
 8002dc4:	109a      	asrs	r2, r3, #2
 8002dc6:	17cb      	asrs	r3, r1, #31
 8002dc8:	1ad2      	subs	r2, r2, r3
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	1aca      	subs	r2, r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while(q->cursor != q->rear){
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d1d6      	bne.n	8002d98 <print_history+0x3c>
 8002dea:	e031      	b.n	8002e50 <print_history+0xf4>
		}
	}else{
		q->cursor = q->front;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f8d3 21f4 	ldr.w	r2, [r3, #500]	; 0x1f4
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while(q->cursor != q->rear){
 8002df8:	e020      	b.n	8002e3c <print_history+0xe0>

			printf("%d %s\r\n", idx++, q->history[q->cursor]);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	60fa      	str	r2, [r7, #12]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8002e06:	2132      	movs	r1, #50	; 0x32
 8002e08:	fb01 f202 	mul.w	r2, r1, r2
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	440a      	add	r2, r1
 8002e10:	4619      	mov	r1, r3
 8002e12:	4811      	ldr	r0, [pc, #68]	; (8002e58 <print_history+0xfc>)
 8002e14:	f007 ff60 	bl	800acd8 <iprintf>

			//printf("******\n");
			q->cursor = (q->cursor + 1) % MAX_HISTORY_BUFFER_LENGTH;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e1e:	1c59      	adds	r1, r3, #1
 8002e20:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <print_history+0x100>)
 8002e22:	fb83 2301 	smull	r2, r3, r3, r1
 8002e26:	109a      	asrs	r2, r3, #2
 8002e28:	17cb      	asrs	r3, r1, #31
 8002e2a:	1ad2      	subs	r2, r2, r3
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	1aca      	subs	r2, r1, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while(q->cursor != q->rear){
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d1d6      	bne.n	8002dfa <print_history+0x9e>
 8002e4c:	e000      	b.n	8002e50 <print_history+0xf4>
		return;
 8002e4e:	bf00      	nop
		}

	}
}
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	0800e4dc 	.word	0x0800e4dc
 8002e5c:	66666667 	.word	0x66666667

08002e60 <CliInit>:
char cmd_buf[MAX_CMD_BUFFER_LENGTH];
char tmp_buf[MAX_CMD_BUFFER_LENGTH];


void CliInit(UART_HandleTypeDef* huart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	QueueInit(&que);
 8002e68:	4808      	ldr	r0, [pc, #32]	; (8002e8c <CliInit+0x2c>)
 8002e6a:	f7ff fe5f 	bl	8002b2c <QueueInit>
//	UartInit(&huart);
	CommandInit();
 8002e6e:	f000 f8c3 	bl	8002ff8 <CommandInit>
	CliDisplayInfo();
 8002e72:	f000 f80f 	bl	8002e94 <CliDisplayInfo>
    USART_Transmit(huart->Instance, "CMD>>",5);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2205      	movs	r2, #5
 8002e7c:	4904      	ldr	r1, [pc, #16]	; (8002e90 <CliInit+0x30>)
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f003 fa0c 	bl	800629c <USART_Transmit>

}
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	2000192c 	.word	0x2000192c
 8002e90:	0800e4e4 	.word	0x0800e4e4

08002e94 <CliDisplayInfo>:


void CliDisplayInfo()
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
	printf("===================================================================\r\n");
 8002e98:	480e      	ldr	r0, [pc, #56]	; (8002ed4 <CliDisplayInfo+0x40>)
 8002e9a:	f007 ffb9 	bl	800ae10 <puts>
	printf("*                                                                 *\r\n");
 8002e9e:	480e      	ldr	r0, [pc, #56]	; (8002ed8 <CliDisplayInfo+0x44>)
 8002ea0:	f007 ffb6 	bl	800ae10 <puts>
	printf("*                                                                 *\r\n");
 8002ea4:	480c      	ldr	r0, [pc, #48]	; (8002ed8 <CliDisplayInfo+0x44>)
 8002ea6:	f007 ffb3 	bl	800ae10 <puts>
	printf("*                       STM32F405 CLI Program                     *\r\n");
 8002eaa:	480c      	ldr	r0, [pc, #48]	; (8002edc <CliDisplayInfo+0x48>)
 8002eac:	f007 ffb0 	bl	800ae10 <puts>
	printf("*                       Version: 1.00                             *\r\n");
 8002eb0:	480b      	ldr	r0, [pc, #44]	; (8002ee0 <CliDisplayInfo+0x4c>)
 8002eb2:	f007 ffad 	bl	800ae10 <puts>
	printf("*                       Released: 2023-03-11                      *\r\n");
 8002eb6:	480b      	ldr	r0, [pc, #44]	; (8002ee4 <CliDisplayInfo+0x50>)
 8002eb8:	f007 ffaa 	bl	800ae10 <puts>
	printf("*                                                                 *\r\n");
 8002ebc:	4806      	ldr	r0, [pc, #24]	; (8002ed8 <CliDisplayInfo+0x44>)
 8002ebe:	f007 ffa7 	bl	800ae10 <puts>
	printf("*                                                                 *\r\n");
 8002ec2:	4805      	ldr	r0, [pc, #20]	; (8002ed8 <CliDisplayInfo+0x44>)
 8002ec4:	f007 ffa4 	bl	800ae10 <puts>
	printf("===================================================================\r\n");
 8002ec8:	4802      	ldr	r0, [pc, #8]	; (8002ed4 <CliDisplayInfo+0x40>)
 8002eca:	f007 ffa1 	bl	800ae10 <puts>
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	0800e4ec 	.word	0x0800e4ec
 8002ed8:	0800e534 	.word	0x0800e534
 8002edc:	0800e57c 	.word	0x0800e57c
 8002ee0:	0800e5c4 	.word	0x0800e5c4
 8002ee4:	0800e60c 	.word	0x0800e60c

08002ee8 <CliDo>:


void CliDo(UART_HandleTypeDef* huart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	memset(cmd_buf, 0x00, MAX_CMD_BUFFER_LENGTH);
 8002ef0:	2232      	movs	r2, #50	; 0x32
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	480e      	ldr	r0, [pc, #56]	; (8002f30 <CliDo+0x48>)
 8002ef6:	f007 f99d 	bl	800a234 <memset>

	RxCpltCallback(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fd92 	bl	8003a24 <RxCpltCallback>

	if(UartReceiveBuffer(huart, (uint8_t *)cmd_buf, MAX_CMD_BUFFER_LENGTH)>0){
 8002f00:	2232      	movs	r2, #50	; 0x32
 8002f02:	490b      	ldr	r1, [pc, #44]	; (8002f30 <CliDo+0x48>)
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 faff 	bl	8003508 <UartReceiveBuffer>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	dd0a      	ble.n	8002f26 <CliDo+0x3e>
		CLiParseCmdLine(huart, cmd_buf);
 8002f10:	4907      	ldr	r1, [pc, #28]	; (8002f30 <CliDo+0x48>)
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f810 	bl	8002f38 <CLiParseCmdLine>
	    USART_Transmit(huart->Instance, "CMD>>",5);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2205      	movs	r2, #5
 8002f1e:	4905      	ldr	r1, [pc, #20]	; (8002f34 <CliDo+0x4c>)
 8002f20:	4618      	mov	r0, r3
 8002f22:	f003 f9bb 	bl	800629c <USART_Transmit>
	}
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000dd4 	.word	0x20000dd4
 8002f34:	0800e4e4 	.word	0x0800e4e4

08002f38 <CLiParseCmdLine>:


void CLiParseCmdLine(UART_HandleTypeDef* huart, char* cmd_line)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	; 0x28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
	static const char *delim = " \f\n\r\t\v";
	char* tok;
	char* next_ptr;
	char *argv[5]= {0,};
 8002f42:	f107 0308 	add.w	r3, r7, #8
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	609a      	str	r2, [r3, #8]
 8002f4e:	60da      	str	r2, [r3, #12]
 8002f50:	611a      	str	r2, [r3, #16]
	uint8_t argc = 0;
 8002f52:	2300      	movs	r3, #0
 8002f54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	//char tmp_line[MAX_CMD_BUFFER_LENGTH];
	memset(tmp_buf, 0x00, sizeof(tmp_buf));
 8002f58:	2232      	movs	r2, #50	; 0x32
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	481c      	ldr	r0, [pc, #112]	; (8002fd0 <CLiParseCmdLine+0x98>)
 8002f5e:	f007 f969 	bl	800a234 <memset>

	memcpy(tmp_buf, cmd_line, strlen(cmd_line));
 8002f62:	6838      	ldr	r0, [r7, #0]
 8002f64:	f7fd f934 	bl	80001d0 <strlen>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	6839      	ldr	r1, [r7, #0]
 8002f6e:	4818      	ldr	r0, [pc, #96]	; (8002fd0 <CLiParseCmdLine+0x98>)
 8002f70:	f007 f952 	bl	800a218 <memcpy>

	tok = strtok_r(tmp_buf, delim, &next_ptr);
 8002f74:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <CLiParseCmdLine+0x9c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f107 021c 	add.w	r2, r7, #28
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4814      	ldr	r0, [pc, #80]	; (8002fd0 <CLiParseCmdLine+0x98>)
 8002f80:	f007 ffe2 	bl	800af48 <strtok_r>
 8002f84:	6278      	str	r0, [r7, #36]	; 0x24

	while(tok){
 8002f86:	e013      	b.n	8002fb0 <CLiParseCmdLine+0x78>
		argv[argc++] = tok;
 8002f88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	f887 2023 	strb.w	r2, [r7, #35]	; 0x23
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	3328      	adds	r3, #40	; 0x28
 8002f96:	443b      	add	r3, r7
 8002f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9a:	f843 2c20 	str.w	r2, [r3, #-32]
		tok = strtok_r(NULL, delim, &next_ptr);
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <CLiParseCmdLine+0x9c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f107 021c 	add.w	r2, r7, #28
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f007 ffcd 	bl	800af48 <strtok_r>
 8002fae:	6278      	str	r0, [r7, #36]	; 0x24
	while(tok){
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1e8      	bne.n	8002f88 <CLiParseCmdLine+0x50>
	}

	CliMatchCommand(argc, argv);
 8002fb6:	f107 0208 	add.w	r2, r7, #8
 8002fba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f000 f809 	bl	8002fd8 <CliMatchCommand>
}
 8002fc6:	bf00      	nop
 8002fc8:	3728      	adds	r7, #40	; 0x28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000da0 	.word	0x20000da0
 8002fd4:	20000014 	.word	0x20000014

08002fd8 <CliMatchCommand>:


void CliMatchCommand(uint8_t argc, char* argv[])
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	6039      	str	r1, [r7, #0]
 8002fe2:	71fb      	strb	r3, [r7, #7]
	CommnadDo(argc, argv);
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	6839      	ldr	r1, [r7, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 f865 	bl	80030b8 <CommnadDo>
}
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <CommandInit>:
};
CommandSet commandSet[MAX_CMD_NUM];


void CommandInit()
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
	for(int i = 0; i< MAX_CMD_NUM; ++i){
 8002ffe:	2300      	movs	r3, #0
 8003000:	607b      	str	r3, [r7, #4]
 8003002:	e021      	b.n	8003048 <CommandInit+0x50>
		if(strlen(commands[i]) == 0){
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2232      	movs	r2, #50	; 0x32
 8003008:	fb02 f303 	mul.w	r3, r2, r3
 800300c:	4a20      	ldr	r2, [pc, #128]	; (8003090 <CommandInit+0x98>)
 800300e:	4413      	add	r3, r2
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d01c      	beq.n	8003050 <CommandInit+0x58>
			break;
		}
		memcpy(commandSet[i].command_name, commands[i], MAX_HISTORY_BUFFER_LENGTH);
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	1a9b      	subs	r3, r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4a1c      	ldr	r2, [pc, #112]	; (8003094 <CommandInit+0x9c>)
 8003022:	1898      	adds	r0, r3, r2
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2232      	movs	r2, #50	; 0x32
 8003028:	fb02 f303 	mul.w	r3, r2, r3
 800302c:	4a18      	ldr	r2, [pc, #96]	; (8003090 <CommandInit+0x98>)
 800302e:	4413      	add	r3, r2
 8003030:	220a      	movs	r2, #10
 8003032:	4619      	mov	r1, r3
 8003034:	f007 f8f0 	bl	800a218 <memcpy>
		usage++;
 8003038:	4b17      	ldr	r3, [pc, #92]	; (8003098 <CommandInit+0xa0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	3301      	adds	r3, #1
 800303e:	4a16      	ldr	r2, [pc, #88]	; (8003098 <CommandInit+0xa0>)
 8003040:	6013      	str	r3, [r2, #0]
	for(int i = 0; i< MAX_CMD_NUM; ++i){
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3301      	adds	r3, #1
 8003046:	607b      	str	r3, [r7, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b31      	cmp	r3, #49	; 0x31
 800304c:	ddda      	ble.n	8003004 <CommandInit+0xc>
 800304e:	e000      	b.n	8003052 <CommandInit+0x5a>
			break;
 8003050:	bf00      	nop
	}

	commandSet[0].CommandFuncPtr = CommandHistory;
 8003052:	4b10      	ldr	r3, [pc, #64]	; (8003094 <CommandInit+0x9c>)
 8003054:	4a11      	ldr	r2, [pc, #68]	; (800309c <CommandInit+0xa4>)
 8003056:	635a      	str	r2, [r3, #52]	; 0x34
	commandSet[1].CommandFuncPtr = CommandHelp;
 8003058:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <CommandInit+0x9c>)
 800305a:	4a11      	ldr	r2, [pc, #68]	; (80030a0 <CommandInit+0xa8>)
 800305c:	66da      	str	r2, [r3, #108]	; 0x6c
	commandSet[2].CommandFuncPtr = CommandMd;
 800305e:	4b0d      	ldr	r3, [pc, #52]	; (8003094 <CommandInit+0x9c>)
 8003060:	4a10      	ldr	r2, [pc, #64]	; (80030a4 <CommandInit+0xac>)
 8003062:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	commandSet[3].CommandFuncPtr = CommandLed;
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <CommandInit+0x9c>)
 8003068:	4a0f      	ldr	r2, [pc, #60]	; (80030a8 <CommandInit+0xb0>)
 800306a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	commandSet[4].CommandFuncPtr = CommandFwDownload;
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <CommandInit+0x9c>)
 8003070:	4a0e      	ldr	r2, [pc, #56]	; (80030ac <CommandInit+0xb4>)
 8003072:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	commandSet[5].CommandFuncPtr = CommandRunApplication;
 8003076:	4b07      	ldr	r3, [pc, #28]	; (8003094 <CommandInit+0x9c>)
 8003078:	4a0d      	ldr	r2, [pc, #52]	; (80030b0 <CommandInit+0xb8>)
 800307a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	commandSet[6].CommandFuncPtr = CommandErase;
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <CommandInit+0x9c>)
 8003080:	4a0c      	ldr	r2, [pc, #48]	; (80030b4 <CommandInit+0xbc>)
 8003082:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000018 	.word	0x20000018
 8003094:	20000e08 	.word	0x20000e08
 8003098:	20000c18 	.word	0x20000c18
 800309c:	08003129 	.word	0x08003129
 80030a0:	08003169 	.word	0x08003169
 80030a4:	080031c5 	.word	0x080031c5
 80030a8:	08003379 	.word	0x08003379
 80030ac:	080032f1 	.word	0x080032f1
 80030b0:	0800333d 	.word	0x0800333d
 80030b4:	08003359 	.word	0x08003359

080030b8 <CommnadDo>:


void CommnadDo(uint8_t argc, char* argv[])
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	6039      	str	r1, [r7, #0]
 80030c2:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < usage; ++i){
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	e01f      	b.n	800310a <CommnadDo+0x52>
		if(stricmp(argv[0], commandSet[i].command_name) == 0){
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	1a9b      	subs	r3, r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4a11      	ldr	r2, [pc, #68]	; (8003120 <CommnadDo+0x68>)
 80030da:	4413      	add	r3, r2
 80030dc:	4619      	mov	r1, r3
 80030de:	f007 fecf 	bl	800ae80 <strcasecmp>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10d      	bne.n	8003104 <CommnadDo+0x4c>
			commandSet[i].CommandFuncPtr(argc, argv);
 80030e8:	490d      	ldr	r1, [pc, #52]	; (8003120 <CommnadDo+0x68>)
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	440b      	add	r3, r1
 80030f6:	3334      	adds	r3, #52	; 0x34
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	79fa      	ldrb	r2, [r7, #7]
 80030fc:	6839      	ldr	r1, [r7, #0]
 80030fe:	4610      	mov	r0, r2
 8003100:	4798      	blx	r3
			break;
 8003102:	e008      	b.n	8003116 <CommnadDo+0x5e>
	for(int i = 0; i < usage; ++i){
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3301      	adds	r3, #1
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <CommnadDo+0x6c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	429a      	cmp	r2, r3
 8003112:	dbda      	blt.n	80030ca <CommnadDo+0x12>
		}
	}
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000e08 	.word	0x20000e08
 8003124:	20000c18 	.word	0x20000c18

08003128 <CommandHistory>:


void CommandHistory(uint8_t argc, char* argv[])
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	6039      	str	r1, [r7, #0]
 8003132:	71fb      	strb	r3, [r7, #7]
	if(argc > 2){
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d903      	bls.n	8003142 <CommandHistory+0x1a>
		printf("Usage : history [num]\r\n");
 800313a:	4809      	ldr	r0, [pc, #36]	; (8003160 <CommandHistory+0x38>)
 800313c:	f007 fe68 	bl	800ae10 <puts>
		return;
 8003140:	e00a      	b.n	8003158 <CommandHistory+0x30>
	}


	int num = atoi(argv[1]);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	3304      	adds	r3, #4
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f007 f827 	bl	800a19c <atoi>
 800314e:	60f8      	str	r0, [r7, #12]
	print_history(&que, num);
 8003150:	68f9      	ldr	r1, [r7, #12]
 8003152:	4804      	ldr	r0, [pc, #16]	; (8003164 <CommandHistory+0x3c>)
 8003154:	f7ff fe02 	bl	8002d5c <print_history>
}
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	0800e65c 	.word	0x0800e65c
 8003164:	2000192c 	.word	0x2000192c

08003168 <CommandHelp>:


void CommandHelp(uint8_t argc, char* argv[])
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	6039      	str	r1, [r7, #0]
 8003172:	71fb      	strb	r3, [r7, #7]
	printf("=====================================\r\n");
 8003174:	480f      	ldr	r0, [pc, #60]	; (80031b4 <CommandHelp+0x4c>)
 8003176:	f007 fe4b 	bl	800ae10 <puts>

	for(int i = 0; i< usage; ++i){
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	e00d      	b.n	800319c <CommandHelp+0x34>
		printf("* %s\r\n", commandSet[i].command_name);
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4a0b      	ldr	r2, [pc, #44]	; (80031b8 <CommandHelp+0x50>)
 800318c:	4413      	add	r3, r2
 800318e:	4619      	mov	r1, r3
 8003190:	480a      	ldr	r0, [pc, #40]	; (80031bc <CommandHelp+0x54>)
 8003192:	f007 fda1 	bl	800acd8 <iprintf>
	for(int i = 0; i< usage; ++i){
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	3301      	adds	r3, #1
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	4b08      	ldr	r3, [pc, #32]	; (80031c0 <CommandHelp+0x58>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	dbec      	blt.n	8003180 <CommandHelp+0x18>
	}

	printf("=====================================\r\n");
 80031a6:	4803      	ldr	r0, [pc, #12]	; (80031b4 <CommandHelp+0x4c>)
 80031a8:	f007 fe32 	bl	800ae10 <puts>

}
 80031ac:	bf00      	nop
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	0800e674 	.word	0x0800e674
 80031b8:	20000e08 	.word	0x20000e08
 80031bc:	0800e69c 	.word	0x0800e69c
 80031c0:	20000c18 	.word	0x20000c18

080031c4 <CommandMd>:


void CommandMd(uint8_t argc, char* argv[])
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08a      	sub	sp, #40	; 0x28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	6039      	str	r1, [r7, #0]
 80031ce:	71fb      	strb	r3, [r7, #7]
	int size = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	613b      	str	r3, [r7, #16]
	unsigned int *addr, *cp_addr;
	unsigned char asc[4];

	if (argc != 3){
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	d003      	beq.n	80031e2 <CommandMd+0x1e>
		printf("Usage : md addr [size] \r\n");
 80031da:	483f      	ldr	r0, [pc, #252]	; (80032d8 <CommandMd+0x114>)
 80031dc:	f007 fe18 	bl	800ae10 <puts>
 80031e0:	e077      	b.n	80032d2 <CommandMd+0x10e>
		return;
	}

	size = (int)strtoul((const char *)argv[2], (char**)NULL, (int)0);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	3308      	adds	r3, #8
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2200      	movs	r2, #0
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f007 ffad 	bl	800b14c <strtoul>
 80031f2:	4603      	mov	r3, r0
 80031f4:	613b      	str	r3, [r7, #16]
	addr   = (unsigned int *)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	3304      	adds	r3, #4
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2200      	movs	r2, #0
 80031fe:	2100      	movs	r1, #0
 8003200:	4618      	mov	r0, r3
 8003202:	f007 ffa3 	bl	800b14c <strtoul>
 8003206:	4603      	mov	r3, r0
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
	cp_addr = (unsigned int *)addr;
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	623b      	str	r3, [r7, #32]

	printf("\r\n");
 800320e:	4833      	ldr	r0, [pc, #204]	; (80032dc <CommandMd+0x118>)
 8003210:	f007 fdfe 	bl	800ae10 <puts>

	for (int idx = 0; idx < size; ++idx){
 8003214:	2300      	movs	r3, #0
 8003216:	61fb      	str	r3, [r7, #28]
 8003218:	e057      	b.n	80032ca <CommandMd+0x106>
		if((idx%4) == 0){
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d104      	bne.n	800322e <CommandMd+0x6a>
			printf(" 0x%08X: ", (unsigned int)addr);
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	4619      	mov	r1, r3
 8003228:	482d      	ldr	r0, [pc, #180]	; (80032e0 <CommandMd+0x11c>)
 800322a:	f007 fd55 	bl	800acd8 <iprintf>
		}
		printf(" 0x%08X", *(addr));
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4619      	mov	r1, r3
 8003234:	482b      	ldr	r0, [pc, #172]	; (80032e4 <CommandMd+0x120>)
 8003236:	f007 fd4f 	bl	800acd8 <iprintf>


		if ((idx%4) == 3)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	425a      	negs	r2, r3
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	f002 0203 	and.w	r2, r2, #3
 8003246:	bf58      	it	pl
 8003248:	4253      	negpl	r3, r2
 800324a:	2b03      	cmp	r3, #3
 800324c:	d137      	bne.n	80032be <CommandMd+0xfa>
		{
		  printf ("  |");
 800324e:	4826      	ldr	r0, [pc, #152]	; (80032e8 <CommandMd+0x124>)
 8003250:	f007 fd42 	bl	800acd8 <iprintf>
		  for (int idx1= 0; idx1< 4; idx1++)
 8003254:	2300      	movs	r3, #0
 8003256:	61bb      	str	r3, [r7, #24]
 8003258:	e02b      	b.n	80032b2 <CommandMd+0xee>
 800325a:	6a3b      	ldr	r3, [r7, #32]
 800325c:	681b      	ldr	r3, [r3, #0]
		  {
			memcpy((char *)asc, (char *)cp_addr, 4);
 800325e:	60fb      	str	r3, [r7, #12]
			for (int i = 0; i < 4; ++i)
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	e01c      	b.n	80032a0 <CommandMd+0xdc>
			{
			  if (asc[i] > 0x1f && asc[i] < 0x7f)
 8003266:	f107 020c 	add.w	r2, r7, #12
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	4413      	add	r3, r2
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b1f      	cmp	r3, #31
 8003272:	d90f      	bls.n	8003294 <CommandMd+0xd0>
 8003274:	f107 020c 	add.w	r2, r7, #12
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	4413      	add	r3, r2
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b7e      	cmp	r3, #126	; 0x7e
 8003280:	d808      	bhi.n	8003294 <CommandMd+0xd0>
			  {
				printf("%c", asc[i]);
 8003282:	f107 020c 	add.w	r2, r7, #12
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	4413      	add	r3, r2
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f007 fd3b 	bl	800ad08 <putchar>
 8003292:	e002      	b.n	800329a <CommandMd+0xd6>
			  }
			  else
			  {
				printf(".");
 8003294:	202e      	movs	r0, #46	; 0x2e
 8003296:	f007 fd37 	bl	800ad08 <putchar>
			for (int i = 0; i < 4; ++i)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	3301      	adds	r3, #1
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	dddf      	ble.n	8003266 <CommandMd+0xa2>
			  }
			}
			cp_addr+=1;
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	3304      	adds	r3, #4
 80032aa:	623b      	str	r3, [r7, #32]
		  for (int idx1= 0; idx1< 4; idx1++)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	3301      	adds	r3, #1
 80032b0:	61bb      	str	r3, [r7, #24]
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	ddd0      	ble.n	800325a <CommandMd+0x96>
		  }
		  printf("|\r\n");
 80032b8:	480c      	ldr	r0, [pc, #48]	; (80032ec <CommandMd+0x128>)
 80032ba:	f007 fda9 	bl	800ae10 <puts>
		}
		addr++;
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	3304      	adds	r3, #4
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24
	for (int idx = 0; idx < size; ++idx){
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	3301      	adds	r3, #1
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	dba3      	blt.n	800321a <CommandMd+0x56>
	}
}
 80032d2:	3728      	adds	r7, #40	; 0x28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	0800e6a4 	.word	0x0800e6a4
 80032dc:	0800e6c0 	.word	0x0800e6c0
 80032e0:	0800e6c4 	.word	0x0800e6c4
 80032e4:	0800e6d0 	.word	0x0800e6d0
 80032e8:	0800e6d8 	.word	0x0800e6d8
 80032ec:	0800e6dc 	.word	0x0800e6dc

080032f0 <CommandFwDownload>:

void CommandFwDownload(uint8_t argc, char* argv[])
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	6039      	str	r1, [r7, #0]
 80032fa:	71fb      	strb	r3, [r7, #7]
	// TO DO
	printf("BootLoader loacted in FLASH 0x%lx ~ 0x%lx\r\n", BOOTLOADER_ADDRESS, APPLICATION_ADDRESS - 1);
 80032fc:	4a09      	ldr	r2, [pc, #36]	; (8003324 <CommandFwDownload+0x34>)
 80032fe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003302:	4809      	ldr	r0, [pc, #36]	; (8003328 <CommandFwDownload+0x38>)
 8003304:	f007 fce8 	bl	800acd8 <iprintf>
	printf("User Application will loacte in FLASH 0x%lx ~ 0x%x\r\n", APPLICATION_ADDRESS, USER_FLASH_END_ADDRESS);
 8003308:	4a08      	ldr	r2, [pc, #32]	; (800332c <CommandFwDownload+0x3c>)
 800330a:	4909      	ldr	r1, [pc, #36]	; (8003330 <CommandFwDownload+0x40>)
 800330c:	4809      	ldr	r0, [pc, #36]	; (8003334 <CommandFwDownload+0x44>)
 800330e:	f007 fce3 	bl	800acd8 <iprintf>

	SerialDownload();
 8003312:	f001 fcc3 	bl	8004c9c <SerialDownload>
	UartInit(&huart6);
 8003316:	4808      	ldr	r0, [pc, #32]	; (8003338 <CommandFwDownload+0x48>)
 8003318:	f000 f8c8 	bl	80034ac <UartInit>

}
 800331c:	bf00      	nop
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	0801ffff 	.word	0x0801ffff
 8003328:	0800e6e0 	.word	0x0800e6e0
 800332c:	080fffff 	.word	0x080fffff
 8003330:	08020000 	.word	0x08020000
 8003334:	0800e70c 	.word	0x0800e70c
 8003338:	20000c4c 	.word	0x20000c4c

0800333c <CommandRunApplication>:


void CommandRunApplication(uint8_t argc, char* argv[])
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	6039      	str	r1, [r7, #0]
 8003346:	71fb      	strb	r3, [r7, #7]

	HAL_DeInit();
 8003348:	f003 fa7c 	bl	8006844 <HAL_DeInit>
	RunApplication();
 800334c:	f001 fd0a 	bl	8004d64 <RunApplication>
}
 8003350:	bf00      	nop
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <CommandErase>:

void CommandErase(uint8_t argc, char* argv[])
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	6039      	str	r1, [r7, #0]
 8003362:	71fb      	strb	r3, [r7, #7]
	FLASH_If_Erase(APPLICATION_ADDRESS);
 8003364:	4803      	ldr	r0, [pc, #12]	; (8003374 <CommandErase+0x1c>)
 8003366:	f000 fdc7 	bl	8003ef8 <FLASH_If_Erase>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	08020000 	.word	0x08020000

08003378 <CommandLed>:

void CommandLed(uint8_t argc, char* argv[])
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	6039      	str	r1, [r7, #0]
 8003382:	71fb      	strb	r3, [r7, #7]
			printf("Usage : led [led_num] [On/Off]\n");
		}
	}else{
		printf("Usage : led [led_num] [On/Off]\n");
	}*/
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <FindCommands>:



int FindCommands(char* cmd_buff, char* tab_buff)
{
 8003390:	b590      	push	{r4, r7, lr}
 8003392:	b089      	sub	sp, #36	; 0x24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
	int count = 0, last_idx = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
	int cmd_buff_length = strlen(cmd_buff);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fc ff14 	bl	80001d0 <strlen>
 80033a8:	4603      	mov	r3, r0
 80033aa:	60fb      	str	r3, [r7, #12]

	char* check_list = (char *)malloc(sizeof(char) * usage);
 80033ac:	4b3b      	ldr	r3, [pc, #236]	; (800349c <FindCommands+0x10c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f006 ff21 	bl	800a1f8 <malloc>
 80033b6:	4603      	mov	r3, r0
 80033b8:	60bb      	str	r3, [r7, #8]
	memset(check_list, 0x00, sizeof(char) * usage);
 80033ba:	4b38      	ldr	r3, [pc, #224]	; (800349c <FindCommands+0x10c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	2100      	movs	r1, #0
 80033c2:	68b8      	ldr	r0, [r7, #8]
 80033c4:	f006 ff36 	bl	800a234 <memset>

	if(cmd_buff_length == 0){
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <FindCommands+0x42>
		return 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	e060      	b.n	8003494 <FindCommands+0x104>
	}

	for(int i = 0; i < usage; ++i){
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	e01a      	b.n	800340e <FindCommands+0x7e>
		if(strnicmp(cmd_buff, commands[i], cmd_buff_length) == 0){
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2232      	movs	r2, #50	; 0x32
 80033dc:	fb02 f303 	mul.w	r3, r2, r3
 80033e0:	4a2f      	ldr	r2, [pc, #188]	; (80034a0 <FindCommands+0x110>)
 80033e2:	4413      	add	r3, r2
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4619      	mov	r1, r3
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f007 fd63 	bl	800aeb4 <strncasecmp>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d109      	bne.n	8003408 <FindCommands+0x78>
			count++;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	3301      	adds	r3, #1
 80033f8:	61fb      	str	r3, [r7, #28]
			last_idx = i;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	61bb      	str	r3, [r7, #24]
			check_list[i] = 1;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	4413      	add	r3, r2
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < usage; ++i){
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	3301      	adds	r3, #1
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	4b23      	ldr	r3, [pc, #140]	; (800349c <FindCommands+0x10c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	429a      	cmp	r2, r3
 8003416:	dbdf      	blt.n	80033d8 <FindCommands+0x48>
		}
	}

	if(count == 0){
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d036      	beq.n	800348c <FindCommands+0xfc>
		;
	}
	else if (count == 1){
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d115      	bne.n	8003450 <FindCommands+0xc0>
		memcpy(tab_buff, commands[last_idx], strlen(commands[last_idx]));
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2232      	movs	r2, #50	; 0x32
 8003428:	fb02 f303 	mul.w	r3, r2, r3
 800342c:	4a1c      	ldr	r2, [pc, #112]	; (80034a0 <FindCommands+0x110>)
 800342e:	189c      	adds	r4, r3, r2
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	2232      	movs	r2, #50	; 0x32
 8003434:	fb02 f303 	mul.w	r3, r2, r3
 8003438:	4a19      	ldr	r2, [pc, #100]	; (80034a0 <FindCommands+0x110>)
 800343a:	4413      	add	r3, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f7fc fec7 	bl	80001d0 <strlen>
 8003442:	4603      	mov	r3, r0
 8003444:	461a      	mov	r2, r3
 8003446:	4621      	mov	r1, r4
 8003448:	6838      	ldr	r0, [r7, #0]
 800344a:	f006 fee5 	bl	800a218 <memcpy>
 800344e:	e01d      	b.n	800348c <FindCommands+0xfc>
	}
	else{
		printf("\r\n");
 8003450:	4814      	ldr	r0, [pc, #80]	; (80034a4 <FindCommands+0x114>)
 8003452:	f007 fcdd 	bl	800ae10 <puts>
		for(int i = 0; i < usage; ++i){
 8003456:	2300      	movs	r3, #0
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	e012      	b.n	8003482 <FindCommands+0xf2>
			if(check_list[i]){
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	4413      	add	r3, r2
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d009      	beq.n	800347c <FindCommands+0xec>
				printf("* %s\r\n", commands[i]);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	2232      	movs	r2, #50	; 0x32
 800346c:	fb02 f303 	mul.w	r3, r2, r3
 8003470:	4a0b      	ldr	r2, [pc, #44]	; (80034a0 <FindCommands+0x110>)
 8003472:	4413      	add	r3, r2
 8003474:	4619      	mov	r1, r3
 8003476:	480c      	ldr	r0, [pc, #48]	; (80034a8 <FindCommands+0x118>)
 8003478:	f007 fc2e 	bl	800acd8 <iprintf>
		for(int i = 0; i < usage; ++i){
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	3301      	adds	r3, #1
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <FindCommands+0x10c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	429a      	cmp	r2, r3
 800348a:	dbe7      	blt.n	800345c <FindCommands+0xcc>
			}
		}
	}

	free(check_list);
 800348c:	68b8      	ldr	r0, [r7, #8]
 800348e:	f006 febb 	bl	800a208 <free>
	return count;
 8003492:	69fb      	ldr	r3, [r7, #28]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3724      	adds	r7, #36	; 0x24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd90      	pop	{r4, r7, pc}
 800349c:	20000c18 	.word	0x20000c18
 80034a0:	20000018 	.word	0x20000018
 80034a4:	0800e6c0 	.word	0x0800e6c0
 80034a8:	0800e69c 	.word	0x0800e69c

080034ac <UartInit>:
extern uint8_t g_rx_buffer 		= 0;

Queue que;

void UartInit(UART_HandleTypeDef* huart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	huart->Instance = USART6;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a12      	ldr	r2, [pc, #72]	; (8003500 <UartInit+0x54>)
 80034b8:	601a      	str	r2, [r3, #0]
	huart->Init.BaudRate = 115200;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034c0:	605a      	str	r2, [r3, #4]
	huart->Init.WordLength = UART_WORDLENGTH_8B;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	609a      	str	r2, [r3, #8]
	huart->Init.StopBits = UART_STOPBITS_1;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	60da      	str	r2, [r3, #12]
	huart->Init.Parity = UART_PARITY_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	611a      	str	r2, [r3, #16]
	huart->Init.Mode = UART_MODE_TX_RX;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	220c      	movs	r2, #12
 80034d8:	615a      	str	r2, [r3, #20]
	huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	619a      	str	r2, [r3, #24]
	huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(huart) != HAL_OK){
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f004 ff5c 	bl	80083a4 <HAL_UART_Init>
	  //Error_Handler();
	}

	HAL_UART_Receive_IT(huart, &g_rx_buffer, 1);
 80034ec:	2201      	movs	r2, #1
 80034ee:	4905      	ldr	r1, [pc, #20]	; (8003504 <UartInit+0x58>)
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f005 f8d8 	bl	80086a6 <HAL_UART_Receive_IT>
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40011400 	.word	0x40011400
 8003504:	20000c21 	.word	0x20000c21

08003508 <UartReceiveBuffer>:


int UartReceiveBuffer(UART_HandleTypeDef* huart, uint8_t *buf, uint8_t size)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	4613      	mov	r3, r2
 8003514:	71fb      	strb	r3, [r7, #7]
	int ret_value = 0;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]

	if(cmd_buff[cmd_buff_length-2] == '\r' && cmd_buff[cmd_buff_length-1] == '\n'){
 800351a:	4b31      	ldr	r3, [pc, #196]	; (80035e0 <UartReceiveBuffer+0xd8>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	3b02      	subs	r3, #2
 8003520:	4a30      	ldr	r2, [pc, #192]	; (80035e4 <UartReceiveBuffer+0xdc>)
 8003522:	5cd3      	ldrb	r3, [r2, r3]
 8003524:	2b0d      	cmp	r3, #13
 8003526:	d156      	bne.n	80035d6 <UartReceiveBuffer+0xce>
 8003528:	4b2d      	ldr	r3, [pc, #180]	; (80035e0 <UartReceiveBuffer+0xd8>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	3b01      	subs	r3, #1
 800352e:	4a2d      	ldr	r2, [pc, #180]	; (80035e4 <UartReceiveBuffer+0xdc>)
 8003530:	5cd3      	ldrb	r3, [r2, r3]
 8003532:	2b0a      	cmp	r3, #10
 8003534:	d14f      	bne.n	80035d6 <UartReceiveBuffer+0xce>


		__HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0220 	bic.w	r2, r2, #32
 8003544:	60da      	str	r2, [r3, #12]
		if(size < cmd_buff_length)
 8003546:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <UartReceiveBuffer+0xd8>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	79fa      	ldrb	r2, [r7, #7]
 800354c:	429a      	cmp	r2, r3
 800354e:	d202      	bcs.n	8003556 <UartReceiveBuffer+0x4e>
			cmd_buff_length = size;
 8003550:	4a23      	ldr	r2, [pc, #140]	; (80035e0 <UartReceiveBuffer+0xd8>)
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	7013      	strb	r3, [r2, #0]


		cmd_buff_length -= 2;
 8003556:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <UartReceiveBuffer+0xd8>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	3b02      	subs	r3, #2
 800355c:	b2da      	uxtb	r2, r3
 800355e:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <UartReceiveBuffer+0xd8>)
 8003560:	701a      	strb	r2, [r3, #0]
		memcpy(buf, cmd_buff, cmd_buff_length);
 8003562:	4b1f      	ldr	r3, [pc, #124]	; (80035e0 <UartReceiveBuffer+0xd8>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	461a      	mov	r2, r3
 8003568:	491e      	ldr	r1, [pc, #120]	; (80035e4 <UartReceiveBuffer+0xdc>)
 800356a:	68b8      	ldr	r0, [r7, #8]
 800356c:	f006 fe54 	bl	800a218 <memcpy>
		ret_value = cmd_buff_length;
 8003570:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <UartReceiveBuffer+0xd8>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	617b      	str	r3, [r7, #20]

		if(cmd_buff_length > 0){
 8003576:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <UartReceiveBuffer+0xd8>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00d      	beq.n	800359a <UartReceiveBuffer+0x92>
			Enqueue(&que, buf, cmd_buff_length);
 800357e:	4b18      	ldr	r3, [pc, #96]	; (80035e0 <UartReceiveBuffer+0xd8>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	4818      	ldr	r0, [pc, #96]	; (80035e8 <UartReceiveBuffer+0xe0>)
 8003588:	f7ff fb24 	bl	8002bd4 <Enqueue>
			que.cursor = que.rear;
 800358c:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <UartReceiveBuffer+0xe0>)
 800358e:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8003592:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <UartReceiveBuffer+0xe0>)
 8003594:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
 8003598:	e008      	b.n	80035ac <UartReceiveBuffer+0xa4>
		}
		else if(cmd_buff_length==0) {
 800359a:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <UartReceiveBuffer+0xd8>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d104      	bne.n	80035ac <UartReceiveBuffer+0xa4>
			USART_Transmit(USART6, "CMD>>",5);
 80035a2:	2205      	movs	r2, #5
 80035a4:	4911      	ldr	r1, [pc, #68]	; (80035ec <UartReceiveBuffer+0xe4>)
 80035a6:	4812      	ldr	r0, [pc, #72]	; (80035f0 <UartReceiveBuffer+0xe8>)
 80035a8:	f002 fe78 	bl	800629c <USART_Transmit>
		}

		memset(cmd_buff, 0x00, sizeof(cmd_buff));
 80035ac:	2233      	movs	r2, #51	; 0x33
 80035ae:	2100      	movs	r1, #0
 80035b0:	480c      	ldr	r0, [pc, #48]	; (80035e4 <UartReceiveBuffer+0xdc>)
 80035b2:	f006 fe3f 	bl	800a234 <memset>
		cmd_buff_length = 0;
 80035b6:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <UartReceiveBuffer+0xd8>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]

		__HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0220 	orr.w	r2, r2, #32
 80035ca:	60da      	str	r2, [r3, #12]
		HAL_UART_Receive_IT(huart, &g_rx_buffer, 1);
 80035cc:	2201      	movs	r2, #1
 80035ce:	4909      	ldr	r1, [pc, #36]	; (80035f4 <UartReceiveBuffer+0xec>)
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f005 f868 	bl	80086a6 <HAL_UART_Receive_IT>

	}

	return ret_value;
 80035d6:	697b      	ldr	r3, [r7, #20]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20000c20 	.word	0x20000c20
 80035e4:	200018f8 	.word	0x200018f8
 80035e8:	2000192c 	.word	0x2000192c
 80035ec:	0800e744 	.word	0x0800e744
 80035f0:	40011400 	.word	0x40011400
 80035f4:	20000c21 	.word	0x20000c21

080035f8 <UartWriteCmdBuffer>:
	    return 0;
}


void UartWriteCmdBuffer(UART_HandleTypeDef* huart, int* uart_state)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
	char cdata[4], len = 1;
 8003602:	2301      	movs	r3, #1
 8003604:	73fb      	strb	r3, [r7, #15]
	memset(cdata, 0x00, 4);
 8003606:	f107 0308 	add.w	r3, r7, #8
 800360a:	2204      	movs	r2, #4
 800360c:	2100      	movs	r1, #0
 800360e:	4618      	mov	r0, r3
 8003610:	f006 fe10 	bl	800a234 <memset>

	if(*uart_state == UART_RX_IDLE){
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	f040 8087 	bne.w	800372c <UartWriteCmdBuffer+0x134>
		switch(g_rx_buffer) {
 800361e:	4b50      	ldr	r3, [pc, #320]	; (8003760 <UartWriteCmdBuffer+0x168>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b1b      	cmp	r3, #27
 8003624:	dc30      	bgt.n	8003688 <UartWriteCmdBuffer+0x90>
 8003626:	2b08      	cmp	r3, #8
 8003628:	db71      	blt.n	800370e <UartWriteCmdBuffer+0x116>
 800362a:	3b08      	subs	r3, #8
 800362c:	2b13      	cmp	r3, #19
 800362e:	d86e      	bhi.n	800370e <UartWriteCmdBuffer+0x116>
 8003630:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <UartWriteCmdBuffer+0x40>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	080036d9 	.word	0x080036d9
 800363c:	08003697 	.word	0x08003697
 8003640:	0800369f 	.word	0x0800369f
 8003644:	0800370f 	.word	0x0800370f
 8003648:	0800370f 	.word	0x0800370f
 800364c:	0800369f 	.word	0x0800369f
 8003650:	0800370f 	.word	0x0800370f
 8003654:	0800370f 	.word	0x0800370f
 8003658:	0800370f 	.word	0x0800370f
 800365c:	0800370f 	.word	0x0800370f
 8003660:	0800370f 	.word	0x0800370f
 8003664:	0800370f 	.word	0x0800370f
 8003668:	0800370f 	.word	0x0800370f
 800366c:	0800370f 	.word	0x0800370f
 8003670:	0800370f 	.word	0x0800370f
 8003674:	0800370f 	.word	0x0800370f
 8003678:	0800370f 	.word	0x0800370f
 800367c:	0800370f 	.word	0x0800370f
 8003680:	0800370f 	.word	0x0800370f
 8003684:	0800368f 	.word	0x0800368f
 8003688:	2b7f      	cmp	r3, #127	; 0x7f
 800368a:	d025      	beq.n	80036d8 <UartWriteCmdBuffer+0xe0>
 800368c:	e03f      	b.n	800370e <UartWriteCmdBuffer+0x116>
			case CLI_KEY_ESC:
				*uart_state = UART_RX_ESC;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2201      	movs	r2, #1
 8003692:	601a      	str	r2, [r3, #0]
				break;
 8003694:	e04f      	b.n	8003736 <UartWriteCmdBuffer+0x13e>

			case CLI_KEY_HORIZONTAL_TAB:
				*uart_state = UART_RX_TAB;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2204      	movs	r2, #4
 800369a:	601a      	str	r2, [r3, #0]
				break;
 800369c:	e04b      	b.n	8003736 <UartWriteCmdBuffer+0x13e>

			case CLI_KEY_CARRIAGE_RETURN:
			case CLI_KEY_LINE_FEED:
				len = 2;
 800369e:	2302      	movs	r3, #2
 80036a0:	73fb      	strb	r3, [r7, #15]
				sprintf(cdata, "\r\n");
 80036a2:	f107 0308 	add.w	r3, r7, #8
 80036a6:	492f      	ldr	r1, [pc, #188]	; (8003764 <UartWriteCmdBuffer+0x16c>)
 80036a8:	4618      	mov	r0, r3
 80036aa:	f007 fbc9 	bl	800ae40 <siprintf>

				cmd_buff[cmd_buff_length++] = '\r';
 80036ae:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <UartWriteCmdBuffer+0x170>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	b2d1      	uxtb	r1, r2
 80036b6:	4a2c      	ldr	r2, [pc, #176]	; (8003768 <UartWriteCmdBuffer+0x170>)
 80036b8:	7011      	strb	r1, [r2, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	4b2b      	ldr	r3, [pc, #172]	; (800376c <UartWriteCmdBuffer+0x174>)
 80036be:	210d      	movs	r1, #13
 80036c0:	5499      	strb	r1, [r3, r2]
				cmd_buff[cmd_buff_length++] = '\n';
 80036c2:	4b29      	ldr	r3, [pc, #164]	; (8003768 <UartWriteCmdBuffer+0x170>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	b2d1      	uxtb	r1, r2
 80036ca:	4a27      	ldr	r2, [pc, #156]	; (8003768 <UartWriteCmdBuffer+0x170>)
 80036cc:	7011      	strb	r1, [r2, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	4b26      	ldr	r3, [pc, #152]	; (800376c <UartWriteCmdBuffer+0x174>)
 80036d2:	210a      	movs	r1, #10
 80036d4:	5499      	strb	r1, [r3, r2]
				break;
 80036d6:	e02e      	b.n	8003736 <UartWriteCmdBuffer+0x13e>

			case '\b':
			case CLI_KEY_DELETE:
				if(cmd_buff_length == 0){
 80036d8:	4b23      	ldr	r3, [pc, #140]	; (8003768 <UartWriteCmdBuffer+0x170>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d027      	beq.n	8003730 <UartWriteCmdBuffer+0x138>
					break;
				}
				len = 3;
 80036e0:	2303      	movs	r3, #3
 80036e2:	73fb      	strb	r3, [r7, #15]
				sprintf(cdata, "\b \b");
 80036e4:	f107 0308 	add.w	r3, r7, #8
 80036e8:	4921      	ldr	r1, [pc, #132]	; (8003770 <UartWriteCmdBuffer+0x178>)
 80036ea:	4618      	mov	r0, r3
 80036ec:	f007 fba8 	bl	800ae40 <siprintf>

				if(cmd_buff_length > 0)
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <UartWriteCmdBuffer+0x170>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d01d      	beq.n	8003734 <UartWriteCmdBuffer+0x13c>
					cmd_buff[cmd_buff_length--] = '\0';
 80036f8:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <UartWriteCmdBuffer+0x170>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	1e5a      	subs	r2, r3, #1
 80036fe:	b2d1      	uxtb	r1, r2
 8003700:	4a19      	ldr	r2, [pc, #100]	; (8003768 <UartWriteCmdBuffer+0x170>)
 8003702:	7011      	strb	r1, [r2, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	4b19      	ldr	r3, [pc, #100]	; (800376c <UartWriteCmdBuffer+0x174>)
 8003708:	2100      	movs	r1, #0
 800370a:	5499      	strb	r1, [r3, r2]
				break;
 800370c:	e012      	b.n	8003734 <UartWriteCmdBuffer+0x13c>

			default:
				cdata[0] = g_rx_buffer;
 800370e:	4b14      	ldr	r3, [pc, #80]	; (8003760 <UartWriteCmdBuffer+0x168>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	723b      	strb	r3, [r7, #8]
				cmd_buff[cmd_buff_length++] = g_rx_buffer;
 8003714:	4b14      	ldr	r3, [pc, #80]	; (8003768 <UartWriteCmdBuffer+0x170>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	b2d1      	uxtb	r1, r2
 800371c:	4a12      	ldr	r2, [pc, #72]	; (8003768 <UartWriteCmdBuffer+0x170>)
 800371e:	7011      	strb	r1, [r2, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <UartWriteCmdBuffer+0x168>)
 8003724:	7819      	ldrb	r1, [r3, #0]
 8003726:	4b11      	ldr	r3, [pc, #68]	; (800376c <UartWriteCmdBuffer+0x174>)
 8003728:	5499      	strb	r1, [r3, r2]
				break;
 800372a:	e004      	b.n	8003736 <UartWriteCmdBuffer+0x13e>
		}
	}
 800372c:	bf00      	nop
 800372e:	e002      	b.n	8003736 <UartWriteCmdBuffer+0x13e>
					break;
 8003730:	bf00      	nop
 8003732:	e000      	b.n	8003736 <UartWriteCmdBuffer+0x13e>
				break;
 8003734:	bf00      	nop

	UartWriteSpecialKey(huart, uart_state);
 8003736:	6839      	ldr	r1, [r7, #0]
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 f81b 	bl	8003774 <UartWriteSpecialKey>

	HAL_UART_Transmit(huart, (uint8_t *)cdata, len, 10);
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	b29a      	uxth	r2, r3
 8003742:	f107 0108 	add.w	r1, r7, #8
 8003746:	230a      	movs	r3, #10
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f004 fe78 	bl	800843e <HAL_UART_Transmit>
	HAL_UART_Receive_IT(huart, &g_rx_buffer, 1);
 800374e:	2201      	movs	r2, #1
 8003750:	4903      	ldr	r1, [pc, #12]	; (8003760 <UartWriteCmdBuffer+0x168>)
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f004 ffa7 	bl	80086a6 <HAL_UART_Receive_IT>
}
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000c21 	.word	0x20000c21
 8003764:	0800e74c 	.word	0x0800e74c
 8003768:	20000c20 	.word	0x20000c20
 800376c:	200018f8 	.word	0x200018f8
 8003770:	0800e750 	.word	0x0800e750

08003774 <UartWriteSpecialKey>:


void UartWriteSpecialKey(UART_HandleTypeDef* huart, int* uart_state)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]

	switch(*uart_state){
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3b01      	subs	r3, #1
 8003784:	2b03      	cmp	r3, #3
 8003786:	d82b      	bhi.n	80037e0 <UartWriteSpecialKey+0x6c>
 8003788:	a201      	add	r2, pc, #4	; (adr r2, 8003790 <UartWriteSpecialKey+0x1c>)
 800378a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378e:	bf00      	nop
 8003790:	080037a1 	.word	0x080037a1
 8003794:	080037b3 	.word	0x080037b3
 8003798:	080037c5 	.word	0x080037c5
 800379c:	080037d3 	.word	0x080037d3
		case UART_RX_ESC:
			*uart_state = UART_RX_BRACKET;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2202      	movs	r2, #2
 80037a4:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(huart, &g_rx_buffer, 1);
 80037a6:	2201      	movs	r2, #1
 80037a8:	490f      	ldr	r1, [pc, #60]	; (80037e8 <UartWriteSpecialKey+0x74>)
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f004 ff7b 	bl	80086a6 <HAL_UART_Receive_IT>
			break;
 80037b0:	e016      	b.n	80037e0 <UartWriteSpecialKey+0x6c>

		case UART_RX_BRACKET:
			*uart_state = UART_RX_DIR;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2203      	movs	r2, #3
 80037b6:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(huart, &g_rx_buffer, 1);
 80037b8:	2201      	movs	r2, #1
 80037ba:	490b      	ldr	r1, [pc, #44]	; (80037e8 <UartWriteSpecialKey+0x74>)
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f004 ff72 	bl	80086a6 <HAL_UART_Receive_IT>
			break;
 80037c2:	e00d      	b.n	80037e0 <UartWriteSpecialKey+0x6c>

		case UART_RX_DIR:
			*uart_state = UART_RX_IDLE;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
			UartWriteDirKey(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f80e 	bl	80037ec <UartWriteDirKey>
			break;
 80037d0:	e006      	b.n	80037e0 <UartWriteSpecialKey+0x6c>

		case UART_RX_TAB:
			*uart_state = UART_RX_IDLE;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
			UartWriteTabKey(huart);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f851 	bl	8003880 <UartWriteTabKey>
			break;
 80037de:	bf00      	nop

		default:
			;

	}
}
 80037e0:	bf00      	nop
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20000c21 	.word	0x20000c21

080037ec <UartWriteDirKey>:


void UartWriteDirKey(UART_HandleTypeDef* huart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	if(g_rx_buffer == CLI_KEY_UP){
 80037f4:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <UartWriteDirKey+0x88>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b41      	cmp	r3, #65	; 0x41
 80037fa:	d112      	bne.n	8003822 <UartWriteDirKey+0x36>
		if(que.cursor == que.front){
 80037fc:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <UartWriteDirKey+0x8c>)
 80037fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003802:	4b1d      	ldr	r3, [pc, #116]	; (8003878 <UartWriteDirKey+0x8c>)
 8003804:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8003808:	429a      	cmp	r2, r3
 800380a:	d02d      	beq.n	8003868 <UartWriteDirKey+0x7c>
			return;
		}

		UartEraseCmdBuffer(huart);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f887 	bl	8003920 <UartEraseCmdBuffer>
		move_cursor(&que, UP);
 8003812:	2100      	movs	r1, #0
 8003814:	4818      	ldr	r0, [pc, #96]	; (8003878 <UartWriteDirKey+0x8c>)
 8003816:	f7ff fa45 	bl	8002ca4 <move_cursor>
		UartWriteHistoryOnCmdBuffer(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f8c2 	bl	80039a4 <UartWriteHistoryOnCmdBuffer>
 8003820:	e025      	b.n	800386e <UartWriteDirKey+0x82>

	}
	else if(g_rx_buffer == CLI_KEY_DOWN){
 8003822:	4b14      	ldr	r3, [pc, #80]	; (8003874 <UartWriteDirKey+0x88>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b42      	cmp	r3, #66	; 0x42
 8003828:	d121      	bne.n	800386e <UartWriteDirKey+0x82>
		if(((que.cursor + 1)%MAX_HISTORY_BUFFER_LENGTH) == que.rear){
 800382a:	4b13      	ldr	r3, [pc, #76]	; (8003878 <UartWriteDirKey+0x8c>)
 800382c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003830:	1c59      	adds	r1, r3, #1
 8003832:	4b12      	ldr	r3, [pc, #72]	; (800387c <UartWriteDirKey+0x90>)
 8003834:	fb83 2301 	smull	r2, r3, r3, r1
 8003838:	109a      	asrs	r2, r3, #2
 800383a:	17cb      	asrs	r3, r1, #31
 800383c:	1ad2      	subs	r2, r2, r3
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	1aca      	subs	r2, r1, r3
 8003848:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <UartWriteDirKey+0x8c>)
 800384a:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800384e:	429a      	cmp	r2, r3
 8003850:	d00c      	beq.n	800386c <UartWriteDirKey+0x80>
			return;
		}

		UartEraseCmdBuffer(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f864 	bl	8003920 <UartEraseCmdBuffer>
		move_cursor(&que, DOWN);
 8003858:	2101      	movs	r1, #1
 800385a:	4807      	ldr	r0, [pc, #28]	; (8003878 <UartWriteDirKey+0x8c>)
 800385c:	f7ff fa22 	bl	8002ca4 <move_cursor>
		UartWriteHistoryOnCmdBuffer(huart);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f89f 	bl	80039a4 <UartWriteHistoryOnCmdBuffer>
 8003866:	e002      	b.n	800386e <UartWriteDirKey+0x82>
			return;
 8003868:	bf00      	nop
 800386a:	e000      	b.n	800386e <UartWriteDirKey+0x82>
			return;
 800386c:	bf00      	nop
	}
}
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20000c21 	.word	0x20000c21
 8003878:	2000192c 	.word	0x2000192c
 800387c:	66666667 	.word	0x66666667

08003880 <UartWriteTabKey>:


void UartWriteTabKey(UART_HandleTypeDef* huart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b090      	sub	sp, #64	; 0x40
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
	char tab_buff[MAX_CMD_BUFFER_LENGTH];
	memset(tab_buff, 0x00, sizeof(tab_buff));
 8003888:	f107 0308 	add.w	r3, r7, #8
 800388c:	2232      	movs	r2, #50	; 0x32
 800388e:	2100      	movs	r1, #0
 8003890:	4618      	mov	r0, r3
 8003892:	f006 fccf 	bl	800a234 <memset>

	int total_commands = FindCommands((char *)cmd_buff, tab_buff);
 8003896:	f107 0308 	add.w	r3, r7, #8
 800389a:	4619      	mov	r1, r3
 800389c:	481e      	ldr	r0, [pc, #120]	; (8003918 <UartWriteTabKey+0x98>)
 800389e:	f7ff fd77 	bl	8003390 <FindCommands>
 80038a2:	63f8      	str	r0, [r7, #60]	; 0x3c

	if(total_commands == 0){
 80038a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d032      	beq.n	8003910 <UartWriteTabKey+0x90>
		;
	}
	else if(total_commands== 1){
 80038aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d11e      	bne.n	80038ee <UartWriteTabKey+0x6e>
		UartEraseCmdBuffer(huart);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f835 	bl	8003920 <UartEraseCmdBuffer>

		cmd_buff_length = strlen(tab_buff);
 80038b6:	f107 0308 	add.w	r3, r7, #8
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fc fc88 	bl	80001d0 <strlen>
 80038c0:	4603      	mov	r3, r0
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	4b15      	ldr	r3, [pc, #84]	; (800391c <UartWriteTabKey+0x9c>)
 80038c6:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Transmit_IT(huart, (uint8_t *)tab_buff, cmd_buff_length);
		HAL_UART_Transmit(huart, (uint8_t *)tab_buff, cmd_buff_length, 100);
 80038c8:	4b14      	ldr	r3, [pc, #80]	; (800391c <UartWriteTabKey+0x9c>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	f107 0108 	add.w	r1, r7, #8
 80038d2:	2364      	movs	r3, #100	; 0x64
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f004 fdb2 	bl	800843e <HAL_UART_Transmit>
		memcpy(cmd_buff, (uint8_t *)tab_buff, cmd_buff_length);
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <UartWriteTabKey+0x9c>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	f107 0308 	add.w	r3, r7, #8
 80038e4:	4619      	mov	r1, r3
 80038e6:	480c      	ldr	r0, [pc, #48]	; (8003918 <UartWriteTabKey+0x98>)
 80038e8:	f006 fc96 	bl	800a218 <memcpy>
		memset(cmd_buff, 0x00, sizeof(cmd_buff));
		cmd_buff_length = 2;
		cmd_buff[0] = '\r';
		cmd_buff[1] = '\n';
	}
}
 80038ec:	e010      	b.n	8003910 <UartWriteTabKey+0x90>
		UartEraseCmdBuffer(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 f816 	bl	8003920 <UartEraseCmdBuffer>
		memset(cmd_buff, 0x00, sizeof(cmd_buff));
 80038f4:	2233      	movs	r2, #51	; 0x33
 80038f6:	2100      	movs	r1, #0
 80038f8:	4807      	ldr	r0, [pc, #28]	; (8003918 <UartWriteTabKey+0x98>)
 80038fa:	f006 fc9b 	bl	800a234 <memset>
		cmd_buff_length = 2;
 80038fe:	4b07      	ldr	r3, [pc, #28]	; (800391c <UartWriteTabKey+0x9c>)
 8003900:	2202      	movs	r2, #2
 8003902:	701a      	strb	r2, [r3, #0]
		cmd_buff[0] = '\r';
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <UartWriteTabKey+0x98>)
 8003906:	220d      	movs	r2, #13
 8003908:	701a      	strb	r2, [r3, #0]
		cmd_buff[1] = '\n';
 800390a:	4b03      	ldr	r3, [pc, #12]	; (8003918 <UartWriteTabKey+0x98>)
 800390c:	220a      	movs	r2, #10
 800390e:	705a      	strb	r2, [r3, #1]
}
 8003910:	bf00      	nop
 8003912:	3740      	adds	r7, #64	; 0x40
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	200018f8 	.word	0x200018f8
 800391c:	20000c20 	.word	0x20000c20

08003920 <UartEraseCmdBuffer>:


void UartEraseCmdBuffer(UART_HandleTypeDef* huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	char cdata[4];
	int len;

	memset(cdata, 0x00, 4);
 8003928:	f107 0308 	add.w	r3, r7, #8
 800392c:	2204      	movs	r2, #4
 800392e:	2100      	movs	r1, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f006 fc7f 	bl	800a234 <memset>

	while(cmd_buff_length){
 8003936:	e024      	b.n	8003982 <UartEraseCmdBuffer+0x62>
		len = 3;
 8003938:	2303      	movs	r3, #3
 800393a:	60fb      	str	r3, [r7, #12]
		sprintf(cdata, "\b \b");
 800393c:	f107 0308 	add.w	r3, r7, #8
 8003940:	4914      	ldr	r1, [pc, #80]	; (8003994 <UartEraseCmdBuffer+0x74>)
 8003942:	4618      	mov	r0, r3
 8003944:	f007 fa7c 	bl	800ae40 <siprintf>

		if(cmd_buff_length)
 8003948:	4b13      	ldr	r3, [pc, #76]	; (8003998 <UartEraseCmdBuffer+0x78>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00b      	beq.n	8003968 <UartEraseCmdBuffer+0x48>
			cmd_buff[--cmd_buff_length] = '\0';
 8003950:	4b11      	ldr	r3, [pc, #68]	; (8003998 <UartEraseCmdBuffer+0x78>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	3b01      	subs	r3, #1
 8003956:	b2da      	uxtb	r2, r3
 8003958:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <UartEraseCmdBuffer+0x78>)
 800395a:	701a      	strb	r2, [r3, #0]
 800395c:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <UartEraseCmdBuffer+0x78>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	4b0e      	ldr	r3, [pc, #56]	; (800399c <UartEraseCmdBuffer+0x7c>)
 8003964:	2100      	movs	r1, #0
 8003966:	5499      	strb	r1, [r3, r2]

		HAL_UART_Transmit(huart, (uint8_t *)cdata, len, 10);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	b29a      	uxth	r2, r3
 800396c:	f107 0108 	add.w	r1, r7, #8
 8003970:	230a      	movs	r3, #10
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f004 fd63 	bl	800843e <HAL_UART_Transmit>
		HAL_UART_Receive_IT(huart, &g_rx_buffer, 1);
 8003978:	2201      	movs	r2, #1
 800397a:	4909      	ldr	r1, [pc, #36]	; (80039a0 <UartEraseCmdBuffer+0x80>)
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f004 fe92 	bl	80086a6 <HAL_UART_Receive_IT>
	while(cmd_buff_length){
 8003982:	4b05      	ldr	r3, [pc, #20]	; (8003998 <UartEraseCmdBuffer+0x78>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1d6      	bne.n	8003938 <UartEraseCmdBuffer+0x18>
	}
}
 800398a:	bf00      	nop
 800398c:	bf00      	nop
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	0800e750 	.word	0x0800e750
 8003998:	20000c20 	.word	0x20000c20
 800399c:	200018f8 	.word	0x200018f8
 80039a0:	20000c21 	.word	0x20000c21

080039a4 <UartWriteHistoryOnCmdBuffer>:


void UartWriteHistoryOnCmdBuffer(UART_HandleTypeDef* huart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	memset(cmd_buff, 0x00, sizeof(cmd_buff));
 80039ac:	2233      	movs	r2, #51	; 0x33
 80039ae:	2100      	movs	r1, #0
 80039b0:	4819      	ldr	r0, [pc, #100]	; (8003a18 <UartWriteHistoryOnCmdBuffer+0x74>)
 80039b2:	f006 fc3f 	bl	800a234 <memset>
	cmd_buff_length = strlen((const char *)que.history[que.cursor]);
 80039b6:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <UartWriteHistoryOnCmdBuffer+0x78>)
 80039b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80039bc:	2232      	movs	r2, #50	; 0x32
 80039be:	fb02 f303 	mul.w	r3, r2, r3
 80039c2:	4a16      	ldr	r2, [pc, #88]	; (8003a1c <UartWriteHistoryOnCmdBuffer+0x78>)
 80039c4:	4413      	add	r3, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fc fc02 	bl	80001d0 <strlen>
 80039cc:	4603      	mov	r3, r0
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <UartWriteHistoryOnCmdBuffer+0x7c>)
 80039d2:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(huart, (uint8_t *)que.history[que.cursor], cmd_buff_length, 10);
 80039d4:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <UartWriteHistoryOnCmdBuffer+0x78>)
 80039d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80039da:	2232      	movs	r2, #50	; 0x32
 80039dc:	fb02 f303 	mul.w	r3, r2, r3
 80039e0:	4a0e      	ldr	r2, [pc, #56]	; (8003a1c <UartWriteHistoryOnCmdBuffer+0x78>)
 80039e2:	1899      	adds	r1, r3, r2
 80039e4:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <UartWriteHistoryOnCmdBuffer+0x7c>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	230a      	movs	r3, #10
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f004 fd26 	bl	800843e <HAL_UART_Transmit>
	memcpy(cmd_buff, (uint8_t *)que.history[que.cursor], cmd_buff_length);
 80039f2:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <UartWriteHistoryOnCmdBuffer+0x78>)
 80039f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80039f8:	2232      	movs	r2, #50	; 0x32
 80039fa:	fb02 f303 	mul.w	r3, r2, r3
 80039fe:	4a07      	ldr	r2, [pc, #28]	; (8003a1c <UartWriteHistoryOnCmdBuffer+0x78>)
 8003a00:	4413      	add	r3, r2
 8003a02:	4a07      	ldr	r2, [pc, #28]	; (8003a20 <UartWriteHistoryOnCmdBuffer+0x7c>)
 8003a04:	7812      	ldrb	r2, [r2, #0]
 8003a06:	4619      	mov	r1, r3
 8003a08:	4803      	ldr	r0, [pc, #12]	; (8003a18 <UartWriteHistoryOnCmdBuffer+0x74>)
 8003a0a:	f006 fc05 	bl	800a218 <memcpy>
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	200018f8 	.word	0x200018f8
 8003a1c:	2000192c 	.word	0x2000192c
 8003a20:	20000c20 	.word	0x20000c20

08003a24 <RxCpltCallback>:


void RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6){
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a05      	ldr	r2, [pc, #20]	; (8003a48 <RxCpltCallback+0x24>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d103      	bne.n	8003a3e <RxCpltCallback+0x1a>
		UartWriteCmdBuffer(huart, &uart_state);
 8003a36:	4905      	ldr	r1, [pc, #20]	; (8003a4c <RxCpltCallback+0x28>)
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff fddd 	bl	80035f8 <UartWriteCmdBuffer>
	}
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40011400 	.word	0x40011400
 8003a4c:	20000c1c 	.word	0x20000c1c

08003a50 <Int2Str>:
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 8003a5a:	4b26      	ldr	r3, [pc, #152]	; (8003af4 <Int2Str+0xa4>)
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	2300      	movs	r3, #0
 8003a64:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
 8003a6a:	e038      	b.n	8003ade <Int2Str+0x8e>
  {
    p_str[pos++] = (intnum / divider) + 48;
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1c59      	adds	r1, r3, #1
 8003a7a:	60f9      	str	r1, [r7, #12]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	440b      	add	r3, r1
 8003a80:	3230      	adds	r2, #48	; 0x30
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a8e:	6939      	ldr	r1, [r7, #16]
 8003a90:	fb01 f202 	mul.w	r2, r1, r2
 8003a94:	1a9b      	subs	r3, r3, r2
 8003a96:	603b      	str	r3, [r7, #0]
    divider /= 10;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4a17      	ldr	r2, [pc, #92]	; (8003af8 <Int2Str+0xa8>)
 8003a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa0:	08db      	lsrs	r3, r3, #3
 8003aa2:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') & (status == 0))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	4413      	add	r3, r2
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b30      	cmp	r3, #48	; 0x30
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	bf0c      	ite	eq
 8003abe:	2301      	moveq	r3, #1
 8003ac0:	2300      	movne	r3, #0
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <Int2Str+0x82>
    {
      pos = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	e002      	b.n	8003ad8 <Int2Str+0x88>
    }
    else
    {
      status++;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	3301      	adds	r3, #1
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b09      	cmp	r3, #9
 8003ae2:	d9c3      	bls.n	8003a6c <Int2Str+0x1c>
    }
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	3b9aca00 	.word	0x3b9aca00
 8003af8:	cccccccd 	.word	0xcccccccd

08003afc <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b30      	cmp	r3, #48	; 0x30
 8003b18:	f040 80d7 	bne.w	8003cca <Str2Int+0x1ce>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b78      	cmp	r3, #120	; 0x78
 8003b24:	d005      	beq.n	8003b32 <Str2Int+0x36>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b58      	cmp	r3, #88	; 0x58
 8003b2e:	f040 80cc 	bne.w	8003cca <Str2Int+0x1ce>
  {
    i = 2;
 8003b32:	2302      	movs	r3, #2
 8003b34:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 8003b36:	e057      	b.n	8003be8 <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b40      	cmp	r3, #64	; 0x40
 8003b42:	d905      	bls.n	8003b50 <Str2Int+0x54>
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	4413      	add	r3, r2
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b46      	cmp	r3, #70	; 0x46
 8003b4e:	d917      	bls.n	8003b80 <Str2Int+0x84>
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	4413      	add	r3, r2
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b60      	cmp	r3, #96	; 0x60
 8003b5a:	d905      	bls.n	8003b68 <Str2Int+0x6c>
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	4413      	add	r3, r2
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b66      	cmp	r3, #102	; 0x66
 8003b66:	d90b      	bls.n	8003b80 <Str2Int+0x84>
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b2f      	cmp	r3, #47	; 0x2f
 8003b72:	d936      	bls.n	8003be2 <Str2Int+0xe6>
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	4413      	add	r3, r2
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b39      	cmp	r3, #57	; 0x39
 8003b7e:	d830      	bhi.n	8003be2 <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	440a      	add	r2, r1
 8003b8a:	7812      	ldrb	r2, [r2, #0]
 8003b8c:	2a2f      	cmp	r2, #47	; 0x2f
 8003b8e:	d90b      	bls.n	8003ba8 <Str2Int+0xac>
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	440a      	add	r2, r1
 8003b96:	7812      	ldrb	r2, [r2, #0]
 8003b98:	2a39      	cmp	r2, #57	; 0x39
 8003b9a:	d805      	bhi.n	8003ba8 <Str2Int+0xac>
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	440a      	add	r2, r1
 8003ba2:	7812      	ldrb	r2, [r2, #0]
 8003ba4:	3a30      	subs	r2, #48	; 0x30
 8003ba6:	e016      	b.n	8003bd6 <Str2Int+0xda>
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	440a      	add	r2, r1
 8003bae:	7812      	ldrb	r2, [r2, #0]
 8003bb0:	2a40      	cmp	r2, #64	; 0x40
 8003bb2:	d90b      	bls.n	8003bcc <Str2Int+0xd0>
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	440a      	add	r2, r1
 8003bba:	7812      	ldrb	r2, [r2, #0]
 8003bbc:	2a46      	cmp	r2, #70	; 0x46
 8003bbe:	d805      	bhi.n	8003bcc <Str2Int+0xd0>
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	440a      	add	r2, r1
 8003bc6:	7812      	ldrb	r2, [r2, #0]
 8003bc8:	3a37      	subs	r2, #55	; 0x37
 8003bca:	e004      	b.n	8003bd6 <Str2Int+0xda>
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	440a      	add	r2, r1
 8003bd2:	7812      	ldrb	r2, [r2, #0]
 8003bd4:	3a57      	subs	r2, #87	; 0x57
 8003bd6:	4413      	add	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	617b      	str	r3, [r7, #20]
 8003be0:	e002      	b.n	8003be8 <Str2Int+0xec>
        res = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	613b      	str	r3, [r7, #16]
        break;
 8003be6:	e008      	b.n	8003bfa <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2b0a      	cmp	r3, #10
 8003bec:	d805      	bhi.n	8003bfa <Str2Int+0xfe>
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d19e      	bne.n	8003b38 <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	4413      	add	r3, r2
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d167      	bne.n	8003cd6 <Str2Int+0x1da>
    {
      *p_intnum = val;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	601a      	str	r2, [r3, #0]
      res = 1;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 8003c10:	e061      	b.n	8003cd6 <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	4413      	add	r3, r2
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d105      	bne.n	8003c2a <Str2Int+0x12e>
      {
        *p_intnum = val;
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 8003c24:	2301      	movs	r3, #1
 8003c26:	613b      	str	r3, [r7, #16]
 8003c28:	e04c      	b.n	8003cc4 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	4413      	add	r3, r2
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b6b      	cmp	r3, #107	; 0x6b
 8003c34:	d005      	beq.n	8003c42 <Str2Int+0x146>
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b4b      	cmp	r3, #75	; 0x4b
 8003c40:	d10b      	bne.n	8003c5a <Str2Int+0x15e>
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <Str2Int+0x15e>
      {
        val = val << 10;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	029b      	lsls	r3, r3, #10
 8003c4c:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	601a      	str	r2, [r3, #0]
        res = 1;
 8003c54:	2301      	movs	r3, #1
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	e034      	b.n	8003cc4 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	4413      	add	r3, r2
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b6d      	cmp	r3, #109	; 0x6d
 8003c64:	d005      	beq.n	8003c72 <Str2Int+0x176>
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b4d      	cmp	r3, #77	; 0x4d
 8003c70:	d10b      	bne.n	8003c8a <Str2Int+0x18e>
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <Str2Int+0x18e>
      {
        val = val << 20;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	051b      	lsls	r3, r3, #20
 8003c7c:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	601a      	str	r2, [r3, #0]
        res = 1;
 8003c84:	2301      	movs	r3, #1
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	e01c      	b.n	8003cc4 <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	4413      	add	r3, r2
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b2f      	cmp	r3, #47	; 0x2f
 8003c94:	d913      	bls.n	8003cbe <Str2Int+0x1c2>
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b39      	cmp	r3, #57	; 0x39
 8003ca0:	d80d      	bhi.n	8003cbe <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	4619      	mov	r1, r3
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	440b      	add	r3, r1
 8003cb8:	3b30      	subs	r3, #48	; 0x30
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	e002      	b.n	8003cc4 <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	613b      	str	r3, [r7, #16]
        break;
 8003cc2:	e008      	b.n	8003cd6 <Str2Int+0x1da>
      }
      i++;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b0a      	cmp	r3, #10
 8003cce:	d802      	bhi.n	8003cd6 <Str2Int+0x1da>
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d19d      	bne.n	8003c12 <Str2Int+0x116>
    }
  }

  return res;
 8003cd6:	693b      	ldr	r3, [r7, #16]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	371c      	adds	r7, #28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
void Serial_PutString(uint8_t *p_string)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint16_t length = 0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	81fb      	strh	r3, [r7, #14]

  while (p_string[length] != '\0')
 8003cf0:	e002      	b.n	8003cf8 <Serial_PutString+0x14>
  {
    length++;
 8003cf2:	89fb      	ldrh	r3, [r7, #14]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	81fb      	strh	r3, [r7, #14]
  while (p_string[length] != '\0')
 8003cf8:	89fb      	ldrh	r3, [r7, #14]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f6      	bne.n	8003cf2 <Serial_PutString+0xe>
  }
  HAL_UART_Transmit(&huart6, p_string, length, TX_TIMEOUT);
 8003d04:	89fa      	ldrh	r2, [r7, #14]
 8003d06:	2364      	movs	r3, #100	; 0x64
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	4803      	ldr	r0, [pc, #12]	; (8003d18 <Serial_PutString+0x34>)
 8003d0c:	f004 fb97 	bl	800843e <HAL_UART_Transmit>
}
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	20000c4c 	.word	0x20000c4c

08003d1c <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	4603      	mov	r3, r0
 8003d24:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if ( huart6.gState == HAL_UART_STATE_TIMEOUT )
 8003d26:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <Serial_PutByte+0x34>)
 8003d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2ba0      	cmp	r3, #160	; 0xa0
 8003d30:	d103      	bne.n	8003d3a <Serial_PutByte+0x1e>
  {
	  huart6.gState = HAL_UART_STATE_READY;
 8003d32:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <Serial_PutByte+0x34>)
 8003d34:	2220      	movs	r2, #32
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  return HAL_UART_Transmit(&huart6, &param, 1, TX_TIMEOUT);
 8003d3a:	1df9      	adds	r1, r7, #7
 8003d3c:	2364      	movs	r3, #100	; 0x64
 8003d3e:	2201      	movs	r2, #1
 8003d40:	4803      	ldr	r0, [pc, #12]	; (8003d50 <Serial_PutByte+0x34>)
 8003d42:	f004 fb7c 	bl	800843e <HAL_UART_Transmit>
 8003d46:	4603      	mov	r3, r0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20000c4c 	.word	0x20000c4c

08003d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d58:	4b04      	ldr	r3, [pc, #16]	; (8003d6c <__NVIC_GetPriorityGrouping+0x18>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	f003 0307 	and.w	r3, r3, #7
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	e000ed00 	.word	0xe000ed00

08003d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	4603      	mov	r3, r0
 8003d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	db0b      	blt.n	8003d9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d82:	79fb      	ldrb	r3, [r7, #7]
 8003d84:	f003 021f 	and.w	r2, r3, #31
 8003d88:	4907      	ldr	r1, [pc, #28]	; (8003da8 <__NVIC_EnableIRQ+0x38>)
 8003d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8e:	095b      	lsrs	r3, r3, #5
 8003d90:	2001      	movs	r0, #1
 8003d92:	fa00 f202 	lsl.w	r2, r0, r2
 8003d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	e000e100 	.word	0xe000e100

08003dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	6039      	str	r1, [r7, #0]
 8003db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	db0a      	blt.n	8003dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	490c      	ldr	r1, [pc, #48]	; (8003df8 <__NVIC_SetPriority+0x4c>)
 8003dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dca:	0112      	lsls	r2, r2, #4
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	440b      	add	r3, r1
 8003dd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dd4:	e00a      	b.n	8003dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	4908      	ldr	r1, [pc, #32]	; (8003dfc <__NVIC_SetPriority+0x50>)
 8003ddc:	79fb      	ldrb	r3, [r7, #7]
 8003dde:	f003 030f 	and.w	r3, r3, #15
 8003de2:	3b04      	subs	r3, #4
 8003de4:	0112      	lsls	r2, r2, #4
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	440b      	add	r3, r1
 8003dea:	761a      	strb	r2, [r3, #24]
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	e000e100 	.word	0xe000e100
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b089      	sub	sp, #36	; 0x24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f1c3 0307 	rsb	r3, r3, #7
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	bf28      	it	cs
 8003e1e:	2304      	movcs	r3, #4
 8003e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	3304      	adds	r3, #4
 8003e26:	2b06      	cmp	r3, #6
 8003e28:	d902      	bls.n	8003e30 <NVIC_EncodePriority+0x30>
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	3b03      	subs	r3, #3
 8003e2e:	e000      	b.n	8003e32 <NVIC_EncodePriority+0x32>
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43da      	mvns	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	401a      	ands	r2, r3
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e52:	43d9      	mvns	r1, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e58:	4313      	orrs	r3, r2
         );
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3724      	adds	r7, #36	; 0x24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
	...

08003e68 <LL_AHB1_GRP1_EnableClock>:
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003e70:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003e72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e74:	4907      	ldr	r1, [pc, #28]	; (8003e94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4013      	ands	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e86:	68fb      	ldr	r3, [r7, #12]
}
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	40023800 	.word	0x40023800

08003e98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8003e9c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8003ea0:	f7ff ffe2 	bl	8003e68 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8003ea4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003ea8:	f7ff ffde 	bl	8003e68 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003eac:	f7ff ff52 	bl	8003d54 <__NVIC_GetPriorityGrouping>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff ffa2 	bl	8003e00 <NVIC_EncodePriority>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	200c      	movs	r0, #12
 8003ec2:	f7ff ff73 	bl	8003dac <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003ec6:	200c      	movs	r0, #12
 8003ec8:	f7ff ff52 	bl	8003d70 <__NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2100      	movs	r1, #0
 8003ed0:	2038      	movs	r0, #56	; 0x38
 8003ed2:	f003 fa28 	bl	8007326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003ed6:	2038      	movs	r0, #56	; 0x38
 8003ed8:	f003 fa41 	bl	800735e <HAL_NVIC_EnableIRQ>

}
 8003edc:	bf00      	nop
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock(); 
 8003ee4:	f003 fe1a 	bl	8007b1c <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | 
 8003ee8:	4b02      	ldr	r3, [pc, #8]	; (8003ef4 <FLASH_If_Init+0x14>)
 8003eea:	22f3      	movs	r2, #243	; 0xf3
 8003eec:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
}
 8003eee:	bf00      	nop
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023c00 	.word	0x40023c00

08003ef8 <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
uint32_t FLASH_If_Erase(uint32_t StartSector)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08a      	sub	sp, #40	; 0x28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t UserStartSector;
  uint32_t SectorError;
  FLASH_EraseInitTypeDef pEraseInit;

  /* Unlock the Flash to enable the flash control register access *************/ 
  FLASH_If_Init();
 8003f00:	f7ff ffee 	bl	8003ee0 <FLASH_If_Init>
  
  /* Get the sector where start the user flash area */
  UserStartSector = GetSector(APPLICATION_ADDRESS);
 8003f04:	480e      	ldr	r0, [pc, #56]	; (8003f40 <FLASH_If_Erase+0x48>)
 8003f06:	f000 f85d 	bl	8003fc4 <GetSector>
 8003f0a:	6278      	str	r0, [r7, #36]	; 0x24
  
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60fb      	str	r3, [r7, #12]
  pEraseInit.Sector = UserStartSector;
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	617b      	str	r3, [r7, #20]
  pEraseInit.NbSectors = 6;
 8003f14:	2306      	movs	r3, #6
 8003f16:	61bb      	str	r3, [r7, #24]
  pEraseInit.VoltageRange = VOLTAGE_RANGE_3;
 8003f18:	2302      	movs	r3, #2
 8003f1a:	61fb      	str	r3, [r7, #28]
    
  if (HAL_FLASHEx_Erase(&pEraseInit, &SectorError) != HAL_OK)
 8003f1c:	f107 0220 	add.w	r2, r7, #32
 8003f20:	f107 030c 	add.w	r3, r7, #12
 8003f24:	4611      	mov	r1, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f003 ff4a 	bl	8007dc0 <HAL_FLASHEx_Erase>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <FLASH_If_Erase+0x3e>
  {
     /* Error occurred while page erase */
     return (1);
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <FLASH_If_Erase+0x40>
  }
  
  return (0);
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3728      	adds	r7, #40	; 0x28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	08020000 	.word	0x08020000

08003f44 <FLASH_If_Write>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t FlashAddress, uint32_t* Data ,uint32_t DataLength)
{
 8003f44:	b5b0      	push	{r4, r5, r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  uint32_t i = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]

  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	e024      	b.n	8003fa4 <FLASH_If_Write+0x60>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, FlashAddress, *(uint32_t*)(Data+i)) == HAL_OK)      
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	4413      	add	r3, r2
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2200      	movs	r2, #0
 8003f66:	461c      	mov	r4, r3
 8003f68:	4615      	mov	r5, r2
 8003f6a:	4622      	mov	r2, r4
 8003f6c:	462b      	mov	r3, r5
 8003f6e:	68f9      	ldr	r1, [r7, #12]
 8003f70:	2002      	movs	r0, #2
 8003f72:	f003 fd7f 	bl	8007a74 <HAL_FLASH_Program>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10e      	bne.n	8003f9a <FLASH_If_Write+0x56>
    {
     /* Check the written value */
      if (*(uint32_t*)FlashAddress != *(uint32_t*)(Data+i))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	440b      	add	r3, r1
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d001      	beq.n	8003f92 <FLASH_If_Write+0x4e>
      {
        /* Flash content doesn't match SRAM content */
        return(FLASHIF_WRITINGCTRL_ERROR);
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e011      	b.n	8003fb6 <FLASH_If_Write+0x72>
      }
      /* Increment FLASH destination address */
      FlashAddress += 4;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3304      	adds	r3, #4
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e001      	b.n	8003f9e <FLASH_If_Write+0x5a>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (FLASHIF_WRITING_ERROR);
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e00b      	b.n	8003fb6 <FLASH_If_Write+0x72>
  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d203      	bcs.n	8003fb4 <FLASH_If_Write+0x70>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4a04      	ldr	r2, [pc, #16]	; (8003fc0 <FLASH_If_Write+0x7c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d9d2      	bls.n	8003f5a <FLASH_If_Write+0x16>
    }
  }

  return (FLASHIF_OK);
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	080ffffb 	.word	0x080ffffb

08003fc4 <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  Address: Flash address
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60fb      	str	r3, [r7, #12]
  
  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a2a      	ldr	r2, [pc, #168]	; (800407c <GetSector+0xb8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d206      	bcs.n	8003fe6 <GetSector+0x22>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fde:	d302      	bcc.n	8003fe6 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;  
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	e043      	b.n	800406e <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a25      	ldr	r2, [pc, #148]	; (8004080 <GetSector+0xbc>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d806      	bhi.n	8003ffc <GetSector+0x38>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a22      	ldr	r2, [pc, #136]	; (800407c <GetSector+0xb8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d302      	bcc.n	8003ffc <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;  
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	e038      	b.n	800406e <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a21      	ldr	r2, [pc, #132]	; (8004084 <GetSector+0xc0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d206      	bcs.n	8004012 <GetSector+0x4e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a1e      	ldr	r2, [pc, #120]	; (8004080 <GetSector+0xbc>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d902      	bls.n	8004012 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;  
 800400c:	2302      	movs	r3, #2
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	e02d      	b.n	800406e <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a1c      	ldr	r2, [pc, #112]	; (8004088 <GetSector+0xc4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d806      	bhi.n	8004028 <GetSector+0x64>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a19      	ldr	r2, [pc, #100]	; (8004084 <GetSector+0xc0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d302      	bcc.n	8004028 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;  
 8004022:	2303      	movs	r3, #3
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	e022      	b.n	800406e <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a18      	ldr	r2, [pc, #96]	; (800408c <GetSector+0xc8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d806      	bhi.n	800403e <GetSector+0x7a>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a15      	ldr	r2, [pc, #84]	; (8004088 <GetSector+0xc4>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d902      	bls.n	800403e <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;  
 8004038:	2304      	movs	r3, #4
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	e017      	b.n	800406e <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a13      	ldr	r2, [pc, #76]	; (8004090 <GetSector+0xcc>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d806      	bhi.n	8004054 <GetSector+0x90>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a10      	ldr	r2, [pc, #64]	; (800408c <GetSector+0xc8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d902      	bls.n	8004054 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;  
 800404e:	2305      	movs	r3, #5
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	e00c      	b.n	800406e <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a0f      	ldr	r2, [pc, #60]	; (8004094 <GetSector+0xd0>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d806      	bhi.n	800406a <GetSector+0xa6>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a0c      	ldr	r2, [pc, #48]	; (8004090 <GetSector+0xcc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d902      	bls.n	800406a <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;  
 8004064:	2306      	movs	r3, #6
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	e001      	b.n	800406e <GetSector+0xaa>
  }
  else /*(Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11))*/
  {
    sector = FLASH_SECTOR_7;  
 800406a:	2307      	movs	r3, #7
 800406c:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 800406e:	68fb      	ldr	r3, [r7, #12]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	08008000 	.word	0x08008000
 8004080:	0800ffff 	.word	0x0800ffff
 8004084:	08018000 	.word	0x08018000
 8004088:	0801ffff 	.word	0x0801ffff
 800408c:	0803ffff 	.word	0x0803ffff
 8004090:	0807ffff 	.word	0x0807ffff
 8004094:	080bffff 	.word	0x080bffff

08004098 <__NVIC_GetPriorityGrouping>:
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800409c:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <__NVIC_GetPriorityGrouping+0x18>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	0a1b      	lsrs	r3, r3, #8
 80040a2:	f003 0307 	and.w	r3, r3, #7
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	e000ed00 	.word	0xe000ed00

080040b4 <__NVIC_EnableIRQ>:
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	db0b      	blt.n	80040de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	f003 021f 	and.w	r2, r3, #31
 80040cc:	4907      	ldr	r1, [pc, #28]	; (80040ec <__NVIC_EnableIRQ+0x38>)
 80040ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	2001      	movs	r0, #1
 80040d6:	fa00 f202 	lsl.w	r2, r0, r2
 80040da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	e000e100 	.word	0xe000e100

080040f0 <__NVIC_SetPriority>:
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	4603      	mov	r3, r0
 80040f8:	6039      	str	r1, [r7, #0]
 80040fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004100:	2b00      	cmp	r3, #0
 8004102:	db0a      	blt.n	800411a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	b2da      	uxtb	r2, r3
 8004108:	490c      	ldr	r1, [pc, #48]	; (800413c <__NVIC_SetPriority+0x4c>)
 800410a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410e:	0112      	lsls	r2, r2, #4
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	440b      	add	r3, r1
 8004114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004118:	e00a      	b.n	8004130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	b2da      	uxtb	r2, r3
 800411e:	4908      	ldr	r1, [pc, #32]	; (8004140 <__NVIC_SetPriority+0x50>)
 8004120:	79fb      	ldrb	r3, [r7, #7]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	3b04      	subs	r3, #4
 8004128:	0112      	lsls	r2, r2, #4
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	440b      	add	r3, r1
 800412e:	761a      	strb	r2, [r3, #24]
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	e000e100 	.word	0xe000e100
 8004140:	e000ed00 	.word	0xe000ed00

08004144 <NVIC_EncodePriority>:
{
 8004144:	b480      	push	{r7}
 8004146:	b089      	sub	sp, #36	; 0x24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f1c3 0307 	rsb	r3, r3, #7
 800415e:	2b04      	cmp	r3, #4
 8004160:	bf28      	it	cs
 8004162:	2304      	movcs	r3, #4
 8004164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3304      	adds	r3, #4
 800416a:	2b06      	cmp	r3, #6
 800416c:	d902      	bls.n	8004174 <NVIC_EncodePriority+0x30>
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	3b03      	subs	r3, #3
 8004172:	e000      	b.n	8004176 <NVIC_EncodePriority+0x32>
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43da      	mvns	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	401a      	ands	r2, r3
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800418c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	fa01 f303 	lsl.w	r3, r1, r3
 8004196:	43d9      	mvns	r1, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800419c:	4313      	orrs	r3, r2
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3724      	adds	r7, #36	; 0x24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
	...

080041ac <LL_AHB1_GRP1_EnableClock>:
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80041b4:	4b08      	ldr	r3, [pc, #32]	; (80041d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80041b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b8:	4907      	ldr	r1, [pc, #28]	; (80041d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4313      	orrs	r3, r2
 80041be:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80041c0:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80041c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4013      	ands	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80041ca:	68fb      	ldr	r3, [r7, #12]
}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	40023800 	.word	0x40023800

080041dc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80041e6:	4a13      	ldr	r2, [pc, #76]	; (8004234 <LL_SYSCFG_SetEXTISource+0x58>)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	3302      	adds	r3, #2
 80041ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	0c1b      	lsrs	r3, r3, #16
 80041f6:	43db      	mvns	r3, r3
 80041f8:	ea02 0103 	and.w	r1, r2, r3
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	0c1b      	lsrs	r3, r3, #16
 8004200:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	fa93 f3a3 	rbit	r3, r3
 8004208:	60bb      	str	r3, [r7, #8]
  return result;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	fab3 f383 	clz	r3, r3
 8004210:	b2db      	uxtb	r3, r3
 8004212:	461a      	mov	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	fa03 f202 	lsl.w	r2, r3, r2
 800421a:	4806      	ldr	r0, [pc, #24]	; (8004234 <LL_SYSCFG_SetEXTISource+0x58>)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	430a      	orrs	r2, r1
 8004222:	3302      	adds	r3, #2
 8004224:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8004228:	bf00      	nop
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40013800 	.word	0x40013800

08004238 <LL_GPIO_SetPinMode>:
{
 8004238:	b480      	push	{r7}
 800423a:	b089      	sub	sp, #36	; 0x24
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	fa93 f3a3 	rbit	r3, r3
 8004252:	613b      	str	r3, [r7, #16]
  return result;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	fab3 f383 	clz	r3, r3
 800425a:	b2db      	uxtb	r3, r3
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	2103      	movs	r1, #3
 8004260:	fa01 f303 	lsl.w	r3, r1, r3
 8004264:	43db      	mvns	r3, r3
 8004266:	401a      	ands	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	fa93 f3a3 	rbit	r3, r3
 8004272:	61bb      	str	r3, [r7, #24]
  return result;
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	fab3 f383 	clz	r3, r3
 800427a:	b2db      	uxtb	r3, r3
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	fa01 f303 	lsl.w	r3, r1, r3
 8004284:	431a      	orrs	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	601a      	str	r2, [r3, #0]
}
 800428a:	bf00      	nop
 800428c:	3724      	adds	r7, #36	; 0x24
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <LL_GPIO_SetPinPull>:
{
 8004296:	b480      	push	{r7}
 8004298:	b089      	sub	sp, #36	; 0x24
 800429a:	af00      	add	r7, sp, #0
 800429c:	60f8      	str	r0, [r7, #12]
 800429e:	60b9      	str	r1, [r7, #8]
 80042a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	fa93 f3a3 	rbit	r3, r3
 80042b0:	613b      	str	r3, [r7, #16]
  return result;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	fab3 f383 	clz	r3, r3
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	2103      	movs	r1, #3
 80042be:	fa01 f303 	lsl.w	r3, r1, r3
 80042c2:	43db      	mvns	r3, r3
 80042c4:	401a      	ands	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	fa93 f3a3 	rbit	r3, r3
 80042d0:	61bb      	str	r3, [r7, #24]
  return result;
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	fab3 f383 	clz	r3, r3
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	fa01 f303 	lsl.w	r3, r1, r3
 80042e2:	431a      	orrs	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	60da      	str	r2, [r3, #12]
}
 80042e8:	bf00      	nop
 80042ea:	3724      	adds	r7, #36	; 0x24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <LL_GPIO_ResetOutputPin>:
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	041a      	lsls	r2, r3, #16
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	619a      	str	r2, [r3, #24]
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800431a:	f107 0318 	add.w	r3, r7, #24
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004324:	463b      	mov	r3, r7
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	605a      	str	r2, [r3, #4]
 800432c:	609a      	str	r2, [r3, #8]
 800432e:	60da      	str	r2, [r3, #12]
 8004330:	611a      	str	r2, [r3, #16]
 8004332:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8004334:	2080      	movs	r0, #128	; 0x80
 8004336:	f7ff ff39 	bl	80041ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800433a:	2004      	movs	r0, #4
 800433c:	f7ff ff36 	bl	80041ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004340:	2001      	movs	r0, #1
 8004342:	f7ff ff33 	bl	80041ac <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004346:	2002      	movs	r0, #2
 8004348:	f7ff ff30 	bl	80041ac <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 800434c:	2110      	movs	r1, #16
 800434e:	482a      	ldr	r0, [pc, #168]	; (80043f8 <MX_GPIO_Init+0xe4>)
 8004350:	f7ff ffd0 	bl	80042f4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3|LL_GPIO_PIN_5);
 8004354:	2128      	movs	r1, #40	; 0x28
 8004356:	4829      	ldr	r0, [pc, #164]	; (80043fc <MX_GPIO_Init+0xe8>)
 8004358:	f7ff ffcc 	bl	80042f4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800435c:	2310      	movs	r3, #16
 800435e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004360:	2301      	movs	r3, #1
 8004362:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004364:	2300      	movs	r3, #0
 8004366:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800436c:	2300      	movs	r3, #0
 800436e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004370:	463b      	mov	r3, r7
 8004372:	4619      	mov	r1, r3
 8004374:	4820      	ldr	r0, [pc, #128]	; (80043f8 <MX_GPIO_Init+0xe4>)
 8004376:	f004 ff05 	bl	8009184 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_5;
 800437a:	2328      	movs	r3, #40	; 0x28
 800437c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800437e:	2301      	movs	r3, #1
 8004380:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004382:	2300      	movs	r3, #0
 8004384:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800438e:	463b      	mov	r3, r7
 8004390:	4619      	mov	r1, r3
 8004392:	481a      	ldr	r0, [pc, #104]	; (80043fc <MX_GPIO_Init+0xe8>)
 8004394:	f004 fef6 	bl	8009184 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE4);
 8004398:	4919      	ldr	r1, [pc, #100]	; (8004400 <MX_GPIO_Init+0xec>)
 800439a:	2002      	movs	r0, #2
 800439c:	f7ff ff1e 	bl	80041dc <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 80043a0:	2310      	movs	r3, #16
 80043a2:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80043a4:	2301      	movs	r3, #1
 80043a6:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80043a8:	2300      	movs	r3, #0
 80043aa:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80043ac:	2301      	movs	r3, #1
 80043ae:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80043b0:	f107 0318 	add.w	r3, r7, #24
 80043b4:	4618      	mov	r0, r3
 80043b6:	f004 fd5f 	bl	8008e78 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 80043ba:	2200      	movs	r2, #0
 80043bc:	2110      	movs	r1, #16
 80043be:	4811      	ldr	r0, [pc, #68]	; (8004404 <MX_GPIO_Init+0xf0>)
 80043c0:	f7ff ff69 	bl	8004296 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_4, LL_GPIO_MODE_INPUT);
 80043c4:	2200      	movs	r2, #0
 80043c6:	2110      	movs	r1, #16
 80043c8:	480e      	ldr	r0, [pc, #56]	; (8004404 <MX_GPIO_Init+0xf0>)
 80043ca:	f7ff ff35 	bl	8004238 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80043ce:	f7ff fe63 	bl	8004098 <__NVIC_GetPriorityGrouping>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2200      	movs	r2, #0
 80043d6:	2100      	movs	r1, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff feb3 	bl	8004144 <NVIC_EncodePriority>
 80043de:	4603      	mov	r3, r0
 80043e0:	4619      	mov	r1, r3
 80043e2:	200a      	movs	r0, #10
 80043e4:	f7ff fe84 	bl	80040f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 80043e8:	200a      	movs	r0, #10
 80043ea:	f7ff fe63 	bl	80040b4 <__NVIC_EnableIRQ>

}
 80043ee:	bf00      	nop
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40020000 	.word	0x40020000
 80043fc:	40020400 	.word	0x40020400
 8004400:	000f0001 	.word	0x000f0001
 8004404:	40020800 	.word	0x40020800

08004408 <LL_DMA_EnableStream>:
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8004412:	4a0c      	ldr	r2, [pc, #48]	; (8004444 <LL_DMA_EnableStream+0x3c>)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	4413      	add	r3, r2
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4413      	add	r3, r2
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4908      	ldr	r1, [pc, #32]	; (8004444 <LL_DMA_EnableStream+0x3c>)
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	440a      	add	r2, r1
 8004428:	7812      	ldrb	r2, [r2, #0]
 800442a:	4611      	mov	r1, r2
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	440a      	add	r2, r1
 8004430:	f043 0301 	orr.w	r3, r3, #1
 8004434:	6013      	str	r3, [r2, #0]
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	0800ed94 	.word	0x0800ed94

08004448 <LL_DMA_DisableStream>:
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8004452:	4a0c      	ldr	r2, [pc, #48]	; (8004484 <LL_DMA_DisableStream+0x3c>)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	4413      	add	r3, r2
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4413      	add	r3, r2
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4908      	ldr	r1, [pc, #32]	; (8004484 <LL_DMA_DisableStream+0x3c>)
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	440a      	add	r2, r1
 8004468:	7812      	ldrb	r2, [r2, #0]
 800446a:	4611      	mov	r1, r2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	440a      	add	r2, r1
 8004470:	f023 0301 	bic.w	r3, r3, #1
 8004474:	6013      	str	r3, [r2, #0]
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	0800ed94 	.word	0x0800ed94

08004488 <LL_DMA_ClearFlag_TC1>:
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004496:	609a      	str	r2, [r3, #8]
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80044a8:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <LL_RCC_HSE_Enable+0x1c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a04      	ldr	r2, [pc, #16]	; (80044c0 <LL_RCC_HSE_Enable+0x1c>)
 80044ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b2:	6013      	str	r3, [r2, #0]
}
 80044b4:	bf00      	nop
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40023800 	.word	0x40023800

080044c4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80044c8:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <LL_RCC_HSE_IsReady+0x24>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044d4:	bf0c      	ite	eq
 80044d6:	2301      	moveq	r3, #1
 80044d8:	2300      	movne	r3, #0
 80044da:	b2db      	uxtb	r3, r3
}
 80044dc:	4618      	mov	r0, r3
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40023800 	.word	0x40023800

080044ec <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <LL_RCC_SetSysClkSource+0x24>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f023 0203 	bic.w	r2, r3, #3
 80044fc:	4904      	ldr	r1, [pc, #16]	; (8004510 <LL_RCC_SetSysClkSource+0x24>)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4313      	orrs	r3, r2
 8004502:	608b      	str	r3, [r1, #8]
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	40023800 	.word	0x40023800

08004514 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004518:	4b04      	ldr	r3, [pc, #16]	; (800452c <LL_RCC_GetSysClkSource+0x18>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 030c 	and.w	r3, r3, #12
}
 8004520:	4618      	mov	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800

08004530 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004538:	4b06      	ldr	r3, [pc, #24]	; (8004554 <LL_RCC_SetAHBPrescaler+0x24>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004540:	4904      	ldr	r1, [pc, #16]	; (8004554 <LL_RCC_SetAHBPrescaler+0x24>)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4313      	orrs	r3, r2
 8004546:	608b      	str	r3, [r1, #8]
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	40023800 	.word	0x40023800

08004558 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004560:	4b06      	ldr	r3, [pc, #24]	; (800457c <LL_RCC_SetAPB1Prescaler+0x24>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004568:	4904      	ldr	r1, [pc, #16]	; (800457c <LL_RCC_SetAPB1Prescaler+0x24>)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4313      	orrs	r3, r2
 800456e:	608b      	str	r3, [r1, #8]
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	40023800 	.word	0x40023800

08004580 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004588:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004590:	4904      	ldr	r1, [pc, #16]	; (80045a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4313      	orrs	r3, r2
 8004596:	608b      	str	r3, [r1, #8]
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	40023800 	.word	0x40023800

080045a8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <LL_RCC_PLL_Enable+0x1c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a04      	ldr	r2, [pc, #16]	; (80045c4 <LL_RCC_PLL_Enable+0x1c>)
 80045b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045b6:	6013      	str	r3, [r2, #0]
}
 80045b8:	bf00      	nop
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40023800 	.word	0x40023800

080045c8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80045cc:	4b07      	ldr	r3, [pc, #28]	; (80045ec <LL_RCC_PLL_IsReady+0x24>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045d8:	bf0c      	ite	eq
 80045da:	2301      	moveq	r3, #1
 80045dc:	2300      	movne	r3, #0
 80045de:	b2db      	uxtb	r3, r3
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40023800 	.word	0x40023800

080045f0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80045fe:	4b0d      	ldr	r3, [pc, #52]	; (8004634 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	4b0d      	ldr	r3, [pc, #52]	; (8004638 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8004604:	4013      	ands	r3, r2
 8004606:	68f9      	ldr	r1, [r7, #12]
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	4311      	orrs	r1, r2
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	0192      	lsls	r2, r2, #6
 8004610:	430a      	orrs	r2, r1
 8004612:	4908      	ldr	r1, [pc, #32]	; (8004634 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8004614:	4313      	orrs	r3, r2
 8004616:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8004618:	4b06      	ldr	r3, [pc, #24]	; (8004634 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004620:	4904      	ldr	r1, [pc, #16]	; (8004634 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	4313      	orrs	r3, r2
 8004626:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8004628:	bf00      	nop
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	40023800 	.word	0x40023800
 8004638:	ffbf8000 	.word	0xffbf8000

0800463c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8004644:	4b06      	ldr	r3, [pc, #24]	; (8004660 <LL_FLASH_SetLatency+0x24>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f023 0207 	bic.w	r2, r3, #7
 800464c:	4904      	ldr	r1, [pc, #16]	; (8004660 <LL_FLASH_SetLatency+0x24>)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4313      	orrs	r3, r2
 8004652:	600b      	str	r3, [r1, #0]
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	40023c00 	.word	0x40023c00

08004664 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8004668:	4b04      	ldr	r3, [pc, #16]	; (800467c <LL_FLASH_GetLatency+0x18>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0307 	and.w	r3, r3, #7
}
 8004670:	4618      	mov	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40023c00 	.word	0x40023c00

08004680 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004692:	4a07      	ldr	r2, [pc, #28]	; (80046b0 <LL_InitTick+0x30>)
 8004694:	3b01      	subs	r3, #1
 8004696:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004698:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <LL_InitTick+0x30>)
 800469a:	2200      	movs	r2, #0
 800469c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800469e:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <LL_InitTick+0x30>)
 80046a0:	2205      	movs	r2, #5
 80046a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	e000e010 	.word	0xe000e010

080046b4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80046bc:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046c4:	4904      	ldr	r1, [pc, #16]	; (80046d8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	600b      	str	r3, [r1, #0]
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	40007000 	.word	0x40007000

080046dc <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f043 0201 	orr.w	r2, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	601a      	str	r2, [r3, #0]
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1a      	ldr	r2, [r3, #32]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	621a      	str	r2, [r3, #32]
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <LL_USART_EnableIT_IDLE>:
{
 800471e:	b480      	push	{r7}
 8004720:	b089      	sub	sp, #36	; 0x24
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	330c      	adds	r3, #12
 800472a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	e853 3f00 	ldrex	r3, [r3]
 8004732:	60bb      	str	r3, [r7, #8]
   return(result);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f043 0310 	orr.w	r3, r3, #16
 800473a:	61fb      	str	r3, [r7, #28]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	330c      	adds	r3, #12
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	61ba      	str	r2, [r7, #24]
 8004744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	6979      	ldr	r1, [r7, #20]
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	e841 2300 	strex	r3, r2, [r1]
 800474e:	613b      	str	r3, [r7, #16]
   return(result);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e7      	bne.n	8004726 <LL_USART_EnableIT_IDLE+0x8>
}
 8004756:	bf00      	nop
 8004758:	bf00      	nop
 800475a:	3724      	adds	r7, #36	; 0x24
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <LL_USART_EnableIT_RXNE>:
{
 8004764:	b480      	push	{r7}
 8004766:	b089      	sub	sp, #36	; 0x24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	330c      	adds	r3, #12
 8004770:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	e853 3f00 	ldrex	r3, [r3]
 8004778:	60bb      	str	r3, [r7, #8]
   return(result);
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f043 0320 	orr.w	r3, r3, #32
 8004780:	61fb      	str	r3, [r7, #28]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	330c      	adds	r3, #12
 8004786:	69fa      	ldr	r2, [r7, #28]
 8004788:	61ba      	str	r2, [r7, #24]
 800478a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	6979      	ldr	r1, [r7, #20]
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	613b      	str	r3, [r7, #16]
   return(result);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e7      	bne.n	800476c <LL_USART_EnableIT_RXNE+0x8>
}
 800479c:	bf00      	nop
 800479e:	bf00      	nop
 80047a0:	3724      	adds	r7, #36	; 0x24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	b2db      	uxtb	r3, r3
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	4013      	ands	r3, r2
 80047da:	041a      	lsls	r2, r3, #16
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	43d9      	mvns	r1, r3
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	400b      	ands	r3, r1
 80047e4:	431a      	orrs	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	619a      	str	r2, [r3, #24]
}
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
	...

080047f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80047f8:	b590      	push	{r4, r7, lr}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80047fe:	f001 ffff 	bl	8006800 <HAL_Init>

  /* USER CODE BEGIN Init */
  memset(&read_flash_arr,0,256);
 8004802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004806:	2100      	movs	r1, #0
 8004808:	48a2      	ldr	r0, [pc, #648]	; (8004a94 <main+0x29c>)
 800480a:	f005 fd13 	bl	800a234 <memset>
  for(int i=0; i<256;i++){
 800480e:	2300      	movs	r3, #0
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	e009      	b.n	8004828 <main+0x30>
	  write_flash_arr[i]=i;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	b2d9      	uxtb	r1, r3
 8004818:	4a9f      	ldr	r2, [pc, #636]	; (8004a98 <main+0x2a0>)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4413      	add	r3, r2
 800481e:	460a      	mov	r2, r1
 8004820:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<256;i++){
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	3301      	adds	r3, #1
 8004826:	607b      	str	r3, [r7, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2bff      	cmp	r3, #255	; 0xff
 800482c:	ddf2      	ble.n	8004814 <main+0x1c>
  }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800482e:	f000 f9bd 	bl	8004bac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LL_InitTick(168000000, 1000000U);		//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음
 8004832:	499a      	ldr	r1, [pc, #616]	; (8004a9c <main+0x2a4>)
 8004834:	489a      	ldr	r0, [pc, #616]	; (8004aa0 <main+0x2a8>)
 8004836:	f7ff ff23 	bl	8004680 <LL_InitTick>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800483a:	f7ff fd6b 	bl	8004314 <MX_GPIO_Init>
  MX_DMA_Init();
 800483e:	f7ff fb2b 	bl	8003e98 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8004842:	f001 fc8b 	bl	800615c <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8004846:	f000 fb9b 	bl	8004f80 <MX_SPI1_Init>
  MX_TIM3_Init();
 800484a:	f001 f807 	bl	800585c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800484e:	f001 fbf3 	bl	8006038 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8004852:	f001 fb91 	bl	8005f78 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8004856:	f001 f895 	bl	8005984 <MX_TIM5_Init>
  MX_SPI3_Init();
 800485a:	f000 fbf3 	bl	8005044 <MX_SPI3_Init>
  MX_ADC1_Init();
 800485e:	f7fe f89d 	bl	800299c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  W25QXX_SPI_Initialization();
 8004862:	f7fd fe2d 	bl	80024c0 <W25QXX_SPI_Initialization>
  usDelay(100000);

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH1);
*/
  // ESC PWM
  LL_TIM_EnableCounter(TIM3);
 8004866:	488f      	ldr	r0, [pc, #572]	; (8004aa4 <main+0x2ac>)
 8004868:	f7ff ff38 	bl	80046dc <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH3);	// M1
 800486c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004870:	488c      	ldr	r0, [pc, #560]	; (8004aa4 <main+0x2ac>)
 8004872:	f7ff ff43 	bl	80046fc <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); 	// M2
 8004876:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800487a:	488a      	ldr	r0, [pc, #552]	; (8004aa4 <main+0x2ac>)
 800487c:	f7ff ff3e 	bl	80046fc <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM5);
 8004880:	4889      	ldr	r0, [pc, #548]	; (8004aa8 <main+0x2b0>)
 8004882:	f7ff ff2b 	bl	80046dc <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);	// M3
 8004886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800488a:	4887      	ldr	r0, [pc, #540]	; (8004aa8 <main+0x2b0>)
 800488c:	f7ff ff36 	bl	80046fc <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);	// M4
 8004890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004894:	4884      	ldr	r0, [pc, #528]	; (8004aa8 <main+0x2b0>)
 8004896:	f7ff ff31 	bl	80046fc <LL_TIM_CC_EnableChannel>
  TIM5->CCR4 = MIN_TIM_PWM;
  TIM5->CCR3 = MIN_TIM_PWM;
  usDelay(8000000);	// 7sec
*/

  ICM20602_Initialization();
 800489a:	f7fc fe67 	bl	800156c <ICM20602_Initialization>

  // Batery ADC Check
  HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);
 800489e:	2201      	movs	r2, #1
 80048a0:	4982      	ldr	r1, [pc, #520]	; (8004aac <main+0x2b4>)
 80048a2:	4883      	ldr	r0, [pc, #524]	; (8004ab0 <main+0x2b8>)
 80048a4:	f002 f896 	bl	80069d4 <HAL_ADC_Start_DMA>


  // 시간측정을 위한 레지스터 초기화 값
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80048a8:	4b82      	ldr	r3, [pc, #520]	; (8004ab4 <main+0x2bc>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	4a81      	ldr	r2, [pc, #516]	; (8004ab4 <main+0x2bc>)
 80048ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048b2:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 80048b4:	4b80      	ldr	r3, [pc, #512]	; (8004ab8 <main+0x2c0>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80048ba:	4b7f      	ldr	r3, [pc, #508]	; (8004ab8 <main+0x2c0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a7e      	ldr	r2, [pc, #504]	; (8004ab8 <main+0x2c0>)
 80048c0:	f043 0301 	orr.w	r3, r3, #1
 80048c4:	6013      	str	r3, [r2, #0]

  // UART3 GPS 수신기 DMA 및 인터럽트 설정
  GPS_DMA_init(&raw_gps, USART3, DMA1, LL_DMA_STREAM_1);
 80048c6:	2301      	movs	r3, #1
 80048c8:	4a7c      	ldr	r2, [pc, #496]	; (8004abc <main+0x2c4>)
 80048ca:	497d      	ldr	r1, [pc, #500]	; (8004ac0 <main+0x2c8>)
 80048cc:	487d      	ldr	r0, [pc, #500]	; (8004ac4 <main+0x2cc>)
 80048ce:	f7fc fbe0 	bl	8001092 <GPS_DMA_init>
  LL_DMA_EnableStream(DMA1,LL_DMA_STREAM_1);
 80048d2:	2101      	movs	r1, #1
 80048d4:	4879      	ldr	r0, [pc, #484]	; (8004abc <main+0x2c4>)
 80048d6:	f7ff fd97 	bl	8004408 <LL_DMA_EnableStream>
  LL_USART_EnableIT_IDLE(USART3);
 80048da:	4879      	ldr	r0, [pc, #484]	; (8004ac0 <main+0x2c8>)
 80048dc:	f7ff ff1f 	bl	800471e <LL_USART_EnableIT_IDLE>

  // UART1 SBUS 수신기 인터럽트 설정
  LL_USART_EnableIT_IDLE(USART1);
 80048e0:	4879      	ldr	r0, [pc, #484]	; (8004ac8 <main+0x2d0>)
 80048e2:	f7ff ff1c 	bl	800471e <LL_USART_EnableIT_IDLE>
  LL_USART_EnableIT_RXNE(USART1);
 80048e6:	4878      	ldr	r0, [pc, #480]	; (8004ac8 <main+0x2d0>)
 80048e8:	f7ff ff3c 	bl	8004764 <LL_USART_EnableIT_RXNE>

  // UART6 문자열 인터페이스 DMA 및  인터럽트 설정
//  USART_DMA_Transmit_INIT(USART6, DMA2, LL_DMA_STREAM_6);
  LL_USART_EnableIT_RXNE(USART6);	// UART6 인터럽트 활성화
 80048ec:	4877      	ldr	r0, [pc, #476]	; (8004acc <main+0x2d4>)
 80048ee:	f7ff ff39 	bl	8004764 <LL_USART_EnableIT_RXNE>
//  LL_USART_EnableIT_IDLE(USART6);
//  LL_USART_EnableIT_TC(USART6);

  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 80048f2:	2120      	movs	r1, #32
 80048f4:	4876      	ldr	r0, [pc, #472]	; (8004ad0 <main+0x2d8>)
 80048f6:	f7ff ff65 	bl	80047c4 <LL_GPIO_TogglePin>

  CliInit(&huart6);
 80048fa:	4876      	ldr	r0, [pc, #472]	; (8004ad4 <main+0x2dc>)
 80048fc:	f7fe fab0 	bl	8002e60 <CliInit>
  FLASH_If_Init();
 8004900:	f7ff faee 	bl	8003ee0 <FLASH_If_Init>
  //	  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
  //	  usDelay(1000000);
  //	  LL_USART_TransmitData8(USART6,'B');


	  if(flag_INT_UART1_RX==1){
 8004904:	4b74      	ldr	r3, [pc, #464]	; (8004ad8 <main+0x2e0>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d111      	bne.n	8004930 <main+0x138>
		  raw_rx.rx_buf[cnt1++] = LL_USART_ReceiveData8(USART1);
 800490c:	4b73      	ldr	r3, [pc, #460]	; (8004adc <main+0x2e4>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	b2d1      	uxtb	r1, r2
 8004914:	4a71      	ldr	r2, [pc, #452]	; (8004adc <main+0x2e4>)
 8004916:	7011      	strb	r1, [r2, #0]
 8004918:	461c      	mov	r4, r3
 800491a:	486b      	ldr	r0, [pc, #428]	; (8004ac8 <main+0x2d0>)
 800491c:	f7ff ff45 	bl	80047aa <LL_USART_ReceiveData8>
 8004920:	4603      	mov	r3, r0
 8004922:	461a      	mov	r2, r3
 8004924:	4b6e      	ldr	r3, [pc, #440]	; (8004ae0 <main+0x2e8>)
 8004926:	4423      	add	r3, r4
 8004928:	721a      	strb	r2, [r3, #8]
          flag_INT_UART1_RX =0;
 800492a:	4b6b      	ldr	r3, [pc, #428]	; (8004ad8 <main+0x2e0>)
 800492c:	2200      	movs	r2, #0
 800492e:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_INT_UART1_RX_DONE == 1)
 8004930:	4b6c      	ldr	r3, [pc, #432]	; (8004ae4 <main+0x2ec>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d10b      	bne.n	8004950 <main+0x158>
	  {
		  SBUS_Parsing(&raw_rx, &msg_sbus, &rx_recv_cnt, &rx_err_cnt);
 8004938:	4b6b      	ldr	r3, [pc, #428]	; (8004ae8 <main+0x2f0>)
 800493a:	4a6c      	ldr	r2, [pc, #432]	; (8004aec <main+0x2f4>)
 800493c:	496c      	ldr	r1, [pc, #432]	; (8004af0 <main+0x2f8>)
 800493e:	4868      	ldr	r0, [pc, #416]	; (8004ae0 <main+0x2e8>)
 8004940:	f7fd fb8a 	bl	8002058 <SBUS_Parsing>
          cnt1=0;
 8004944:	4b65      	ldr	r3, [pc, #404]	; (8004adc <main+0x2e4>)
 8004946:	2200      	movs	r2, #0
 8004948:	701a      	strb	r2, [r3, #0]
		  flag_INT_UART1_RX_DONE = 0;
 800494a:	4b66      	ldr	r3, [pc, #408]	; (8004ae4 <main+0x2ec>)
 800494c:	2200      	movs	r2, #0
 800494e:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_INT_UART4_RX==1){
 8004950:	4b68      	ldr	r3, [pc, #416]	; (8004af4 <main+0x2fc>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d102      	bne.n	800495e <main+0x166>
		  flag_INT_UART4_RX = 0;
 8004958:	4b66      	ldr	r3, [pc, #408]	; (8004af4 <main+0x2fc>)
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]
	  }


	  if(flag_INT_USART6 == 1){
 800495e:	4b66      	ldr	r3, [pc, #408]	; (8004af8 <main+0x300>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d105      	bne.n	8004972 <main+0x17a>
		  flag_INT_USART6 =0;
 8004966:	4b64      	ldr	r3, [pc, #400]	; (8004af8 <main+0x300>)
 8004968:	2200      	movs	r2, #0
 800496a:	701a      	strb	r2, [r3, #0]

		  CliDo(&huart6);
 800496c:	4859      	ldr	r0, [pc, #356]	; (8004ad4 <main+0x2dc>)
 800496e:	f7fe fabb 	bl	8002ee8 <CliDo>
//		  LL_USART_TransmitData8(USART6,rxd); // 호스트로부터 수신한 데이터를 그대로 다시 보냄
//		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
	  }

	  // UART3에서 한 프레임 GPS 데이터 수신완료에 인터럽트 발생, GPS데이터가 수신될 때마다 DMA는 데이터카운트를 하나씩 감소하면서 0이 될 때까지 전송
	  if(flag_INT_UART3_GPS == 1){
 8004972:	4b62      	ldr	r3, [pc, #392]	; (8004afc <main+0x304>)
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d109      	bne.n	800498e <main+0x196>

//		  cnt=(uint8_t)(MSG_LENGTH_NAV_SOL-LL_DMA_GetDataLength(DMA1,LL_DMA_STREAM_1));
		  LL_DMA_DisableStream(DMA1,LL_DMA_STREAM_1);
 800497a:	2101      	movs	r1, #1
 800497c:	484f      	ldr	r0, [pc, #316]	; (8004abc <main+0x2c4>)
 800497e:	f7ff fd63 	bl	8004448 <LL_DMA_DisableStream>
		  LL_DMA_ClearFlag_TC1(DMA1);
 8004982:	484e      	ldr	r0, [pc, #312]	; (8004abc <main+0x2c4>)
 8004984:	f7ff fd80 	bl	8004488 <LL_DMA_ClearFlag_TC1>
//		  cnt = 0;
		  flag_INT_UART3_GPS =0;
 8004988:	4b5c      	ldr	r3, [pc, #368]	; (8004afc <main+0x304>)
 800498a:	2200      	movs	r2, #0
 800498c:	701a      	strb	r2, [r3, #0]

	  }

	  // DMA 데이터카운트가 0이되면 인터럽트 발생, 데이터를 버퍼로 수신 완료
	  if(flag_DMA1_DONE == 1)
 800498e:	4b5c      	ldr	r3, [pc, #368]	; (8004b00 <main+0x308>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d119      	bne.n	80049ca <main+0x1d2>
	  {
//		  cnt=(uint8_t)(MSG_LENGTH_NAV_SOL-LL_DMA_GetDataLength(DMA1,LL_DMA_STREAM_1));

		  // Batery Checker
		  BatVol = adcVal*ADC_BAT_COEFF;
 8004996:	4b45      	ldr	r3, [pc, #276]	; (8004aac <main+0x2b4>)
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049a2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8004b04 <main+0x30c>
 80049a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049aa:	4b57      	ldr	r3, [pc, #348]	; (8004b08 <main+0x310>)
 80049ac:	edc3 7a00 	vstr	s15, [r3]
//		  printf("Battery Check: ADC[%d], Voltage[%f]\n", adcVal, BatVol);

		  // GPS Parsing
		  GPS_Parsing(&raw_gps, &msg_nav, &recv_cnt, &err_cnt);
 80049b0:	4b56      	ldr	r3, [pc, #344]	; (8004b0c <main+0x314>)
 80049b2:	4a57      	ldr	r2, [pc, #348]	; (8004b10 <main+0x318>)
 80049b4:	4957      	ldr	r1, [pc, #348]	; (8004b14 <main+0x31c>)
 80049b6:	4843      	ldr	r0, [pc, #268]	; (8004ac4 <main+0x2cc>)
 80049b8:	f7fc fb92 	bl	80010e0 <GPS_Parsing>
		  LL_DMA_EnableStream(DMA1,LL_DMA_STREAM_1);
 80049bc:	2101      	movs	r1, #1
 80049be:	483f      	ldr	r0, [pc, #252]	; (8004abc <main+0x2c4>)
 80049c0:	f7ff fd22 	bl	8004408 <LL_DMA_EnableStream>
		  flag_DMA1_DONE = 0;
 80049c4:	4b4e      	ldr	r3, [pc, #312]	; (8004b00 <main+0x308>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	701a      	strb	r2, [r3, #0]
	  }


	  if(ICM20602_DataReady() == 1)
 80049ca:	f7fc fea1 	bl	8001710 <ICM20602_DataReady>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d10a      	bne.n	80049ea <main+0x1f2>
	  {

		  t2 = DWT->CYCCNT;
 80049d4:	4b38      	ldr	r3, [pc, #224]	; (8004ab8 <main+0x2c0>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	4a4f      	ldr	r2, [pc, #316]	; (8004b18 <main+0x320>)
 80049da:	6013      	str	r3, [r2, #0]
//		  sampleFreq = (1000000.0f /(((float)(t2-t1))/CLOCK_PER_USEC)); // set integration time by time elapsed since last filter update
		  t1 = t2;
 80049dc:	4b4e      	ldr	r3, [pc, #312]	; (8004b18 <main+0x320>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a4e      	ldr	r2, [pc, #312]	; (8004b1c <main+0x324>)
 80049e2:	6013      	str	r3, [r2, #0]
//		  printf("%.2f\n",(sampleFreq));
		  GetRPY(&sampleFreq);
 80049e4:	484e      	ldr	r0, [pc, #312]	; (8004b20 <main+0x328>)
 80049e6:	f7fc fe9f 	bl	8001728 <GetRPY>

	  }


	  // Failsafe
	  if(msg_sbus.failsafe==MSG_SBUS_FS_BIT_MASK) {
 80049ea:	4b41      	ldr	r3, [pc, #260]	; (8004af0 <main+0x2f8>)
 80049ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d110      	bne.n	8004a16 <main+0x21e>
		  TIM3->CCR3 = MIN_TIM_PWM;
 80049f4:	4b2b      	ldr	r3, [pc, #172]	; (8004aa4 <main+0x2ac>)
 80049f6:	f642 1204 	movw	r2, #10500	; 0x2904
 80049fa:	63da      	str	r2, [r3, #60]	; 0x3c
		  TIM3->CCR4 = MIN_TIM_PWM;
 80049fc:	4b29      	ldr	r3, [pc, #164]	; (8004aa4 <main+0x2ac>)
 80049fe:	f642 1204 	movw	r2, #10500	; 0x2904
 8004a02:	641a      	str	r2, [r3, #64]	; 0x40
		  TIM5->CCR4 = MIN_TIM_PWM;
 8004a04:	4b28      	ldr	r3, [pc, #160]	; (8004aa8 <main+0x2b0>)
 8004a06:	f642 1204 	movw	r2, #10500	; 0x2904
 8004a0a:	641a      	str	r2, [r3, #64]	; 0x40
		  TIM5->CCR3 = MIN_TIM_PWM;
 8004a0c:	4b26      	ldr	r3, [pc, #152]	; (8004aa8 <main+0x2b0>)
 8004a0e:	f642 1204 	movw	r2, #10500	; 0x2904
 8004a12:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a14:	e776      	b.n	8004904 <main+0x10c>
	  }

	  // Radio Control
	  else	  {

		  if(radio_safe==0) {
 8004a16:	4b43      	ldr	r3, [pc, #268]	; (8004b24 <main+0x32c>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f040 8086 	bne.w	8004b2c <main+0x334>
			  if((msg_sbus.rx_channel[0] < MIN_RADIO_CH1_PWM + 5)&&(msg_sbus.rx_channel[0] > 0)) {
 8004a20:	4b33      	ldr	r3, [pc, #204]	; (8004af0 <main+0x2f8>)
 8004a22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004a26:	2bc4      	cmp	r3, #196	; 0xc4
 8004a28:	f73f af6c 	bgt.w	8004904 <main+0x10c>
 8004a2c:	4b30      	ldr	r3, [pc, #192]	; (8004af0 <main+0x2f8>)
 8004a2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f77f af66 	ble.w	8004904 <main+0x10c>
				   LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 8004a38:	2120      	movs	r1, #32
 8004a3a:	4825      	ldr	r0, [pc, #148]	; (8004ad0 <main+0x2d8>)
 8004a3c:	f7ff fec2 	bl	80047c4 <LL_GPIO_TogglePin>
				   usDelay(500000);
 8004a40:	4839      	ldr	r0, [pc, #228]	; (8004b28 <main+0x330>)
 8004a42:	f000 f8fd 	bl	8004c40 <usDelay>
				   LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 8004a46:	2120      	movs	r1, #32
 8004a48:	4821      	ldr	r0, [pc, #132]	; (8004ad0 <main+0x2d8>)
 8004a4a:	f7ff febb 	bl	80047c4 <LL_GPIO_TogglePin>
				   usDelay(500000);
 8004a4e:	4836      	ldr	r0, [pc, #216]	; (8004b28 <main+0x330>)
 8004a50:	f000 f8f6 	bl	8004c40 <usDelay>
				   LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 8004a54:	2120      	movs	r1, #32
 8004a56:	481e      	ldr	r0, [pc, #120]	; (8004ad0 <main+0x2d8>)
 8004a58:	f7ff feb4 	bl	80047c4 <LL_GPIO_TogglePin>
				   usDelay(500000);
 8004a5c:	4832      	ldr	r0, [pc, #200]	; (8004b28 <main+0x330>)
 8004a5e:	f000 f8ef 	bl	8004c40 <usDelay>
				   LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 8004a62:	2120      	movs	r1, #32
 8004a64:	481a      	ldr	r0, [pc, #104]	; (8004ad0 <main+0x2d8>)
 8004a66:	f7ff fead 	bl	80047c4 <LL_GPIO_TogglePin>
				   usDelay(500000);
 8004a6a:	482f      	ldr	r0, [pc, #188]	; (8004b28 <main+0x330>)
 8004a6c:	f000 f8e8 	bl	8004c40 <usDelay>
				   LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 8004a70:	2120      	movs	r1, #32
 8004a72:	4817      	ldr	r0, [pc, #92]	; (8004ad0 <main+0x2d8>)
 8004a74:	f7ff fea6 	bl	80047c4 <LL_GPIO_TogglePin>
				   usDelay(500000);
 8004a78:	482b      	ldr	r0, [pc, #172]	; (8004b28 <main+0x330>)
 8004a7a:	f000 f8e1 	bl	8004c40 <usDelay>
				   LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 8004a7e:	2120      	movs	r1, #32
 8004a80:	4813      	ldr	r0, [pc, #76]	; (8004ad0 <main+0x2d8>)
 8004a82:	f7ff fe9f 	bl	80047c4 <LL_GPIO_TogglePin>
				   usDelay(500000);
 8004a86:	4828      	ldr	r0, [pc, #160]	; (8004b28 <main+0x330>)
 8004a88:	f000 f8da 	bl	8004c40 <usDelay>
				   radio_safe = 1;
 8004a8c:	4b25      	ldr	r3, [pc, #148]	; (8004b24 <main+0x32c>)
 8004a8e:	2201      	movs	r2, #1
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	e737      	b.n	8004904 <main+0x10c>
 8004a94:	20001c60 	.word	0x20001c60
 8004a98:	20001b5c 	.word	0x20001b5c
 8004a9c:	000f4240 	.word	0x000f4240
 8004aa0:	0a037a00 	.word	0x0a037a00
 8004aa4:	40000400 	.word	0x40000400
 8004aa8:	40000c00 	.word	0x40000c00
 8004aac:	20001d7c 	.word	0x20001d7c
 8004ab0:	20000cf8 	.word	0x20000cf8
 8004ab4:	e000edf0 	.word	0xe000edf0
 8004ab8:	e0001000 	.word	0xe0001000
 8004abc:	40026000 	.word	0x40026000
 8004ac0:	40004800 	.word	0x40004800
 8004ac4:	20001d80 	.word	0x20001d80
 8004ac8:	40011000 	.word	0x40011000
 8004acc:	40011400 	.word	0x40011400
 8004ad0:	40020400 	.word	0x40020400
 8004ad4:	20000c4c 	.word	0x20000c4c
 8004ad8:	20001f40 	.word	0x20001f40
 8004adc:	20000c22 	.word	0x20000c22
 8004ae0:	20001dc4 	.word	0x20001dc4
 8004ae4:	20001e3d 	.word	0x20001e3d
 8004ae8:	20000c14 	.word	0x20000c14
 8004aec:	20000c10 	.word	0x20000c10
 8004af0:	20001b30 	.word	0x20001b30
 8004af4:	20001e35 	.word	0x20001e35
 8004af8:	20001e36 	.word	0x20001e36
 8004afc:	20001e3e 	.word	0x20001e3e
 8004b00:	20001f41 	.word	0x20001f41
 8004b04:	3c0e8f5c 	.word	0x3c0e8f5c
 8004b08:	20000c24 	.word	0x20000c24
 8004b0c:	20000c48 	.word	0x20000c48
 8004b10:	20000c44 	.word	0x20000c44
 8004b14:	20001d60 	.word	0x20001d60
 8004b18:	20000c2c 	.word	0x20000c2c
 8004b1c:	20000c28 	.word	0x20000c28
 8004b20:	20001de8 	.word	0x20001de8
 8004b24:	20000c23 	.word	0x20000c23
 8004b28:	0007a120 	.word	0x0007a120
			  }
		  }

		  else {
			  TIM3->CCR3 = MIN_TIM_PWM + RANGE_TIM_PWM/RANGE_RADIO_CH1_PWM*(msg_sbus.rx_channel[0]-MIN_RADIO_CH1_PWM);
 8004b2c:	4b1c      	ldr	r3, [pc, #112]	; (8004ba0 <main+0x3a8>)
 8004b2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b32:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 8004b36:	4613      	mov	r3, r2
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	4413      	add	r3, r2
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004b42:	3304      	adds	r3, #4
 8004b44:	4a17      	ldr	r2, [pc, #92]	; (8004ba4 <main+0x3ac>)
 8004b46:	63d3      	str	r3, [r2, #60]	; 0x3c
			  TIM3->CCR4 = MIN_TIM_PWM + RANGE_TIM_PWM/RANGE_RADIO_CH1_PWM*(msg_sbus.rx_channel[0]-MIN_RADIO_CH1_PWM);
 8004b48:	4b15      	ldr	r3, [pc, #84]	; (8004ba0 <main+0x3a8>)
 8004b4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b4e:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 8004b52:	4613      	mov	r3, r2
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	4413      	add	r3, r2
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004b5e:	3304      	adds	r3, #4
 8004b60:	4a10      	ldr	r2, [pc, #64]	; (8004ba4 <main+0x3ac>)
 8004b62:	6413      	str	r3, [r2, #64]	; 0x40
			  TIM5->CCR4 = MIN_TIM_PWM + RANGE_TIM_PWM/RANGE_RADIO_CH1_PWM*(msg_sbus.rx_channel[0]-MIN_RADIO_CH1_PWM);
 8004b64:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <main+0x3a8>)
 8004b66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b6a:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 8004b6e:	4613      	mov	r3, r2
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	4413      	add	r3, r2
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	4a0a      	ldr	r2, [pc, #40]	; (8004ba8 <main+0x3b0>)
 8004b7e:	6413      	str	r3, [r2, #64]	; 0x40
			  TIM5->CCR3 = MIN_TIM_PWM + RANGE_TIM_PWM/RANGE_RADIO_CH1_PWM*(msg_sbus.rx_channel[0]-MIN_RADIO_CH1_PWM);
 8004b80:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <main+0x3a8>)
 8004b82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b86:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	4413      	add	r3, r2
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8004b96:	3304      	adds	r3, #4
 8004b98:	4a03      	ldr	r2, [pc, #12]	; (8004ba8 <main+0x3b0>)
 8004b9a:	63d3      	str	r3, [r2, #60]	; 0x3c
	  if(flag_INT_UART1_RX==1){
 8004b9c:	e6b2      	b.n	8004904 <main+0x10c>
 8004b9e:	bf00      	nop
 8004ba0:	20001b30 	.word	0x20001b30
 8004ba4:	40000400 	.word	0x40000400
 8004ba8:	40000c00 	.word	0x40000c00

08004bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8004bb0:	2005      	movs	r0, #5
 8004bb2:	f7ff fd43 	bl	800463c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8004bb6:	bf00      	nop
 8004bb8:	f7ff fd54 	bl	8004664 <LL_FLASH_GetLatency>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b05      	cmp	r3, #5
 8004bc0:	d1fa      	bne.n	8004bb8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8004bc2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004bc6:	f7ff fd75 	bl	80046b4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8004bca:	f7ff fc6b 	bl	80044a4 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8004bce:	bf00      	nop
 8004bd0:	f7ff fc78 	bl	80044c4 <LL_RCC_HSE_IsReady>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d1fa      	bne.n	8004bd0 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 8004bda:	2300      	movs	r3, #0
 8004bdc:	22a8      	movs	r2, #168	; 0xa8
 8004bde:	2104      	movs	r1, #4
 8004be0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004be4:	f7ff fd04 	bl	80045f0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8004be8:	f7ff fcde 	bl	80045a8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8004bec:	bf00      	nop
 8004bee:	f7ff fceb 	bl	80045c8 <LL_RCC_PLL_IsReady>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d1fa      	bne.n	8004bee <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	f7ff fc99 	bl	8004530 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8004bfe:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8004c02:	f7ff fca9 	bl	8004558 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8004c06:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004c0a:	f7ff fcb9 	bl	8004580 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8004c0e:	2002      	movs	r0, #2
 8004c10:	f7ff fc6c 	bl	80044ec <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004c14:	bf00      	nop
 8004c16:	f7ff fc7d 	bl	8004514 <LL_RCC_GetSysClkSource>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d1fa      	bne.n	8004c16 <SystemClock_Config+0x6a>
  {

  }
  LL_SetSystemCoreClock(168000000);
 8004c20:	4806      	ldr	r0, [pc, #24]	; (8004c3c <SystemClock_Config+0x90>)
 8004c22:	f005 faab 	bl	800a17c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8004c26:	200f      	movs	r0, #15
 8004c28:	f001 fe40 	bl	80068ac <HAL_InitTick>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8004c32:	f000 f82d 	bl	8004c90 <Error_Handler>
  }
}
 8004c36:	bf00      	nop
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	0a037a00 	.word	0x0a037a00

08004c40 <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(unsigned int nTime)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
	__IO unsigned int  tmp = SysTick->CTRL;
 8004c48:	4b0f      	ldr	r3, [pc, #60]	; (8004c88 <usDelay+0x48>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60fb      	str	r3, [r7, #12]
	((void)tmp);
 8004c4e:	68fb      	ldr	r3, [r7, #12]

	SysTick->VAL = 0;
 8004c50:	4b0d      	ldr	r3, [pc, #52]	; (8004c88 <usDelay+0x48>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	609a      	str	r2, [r3, #8]

	SysTick->CTRL = SysTick->CTRL | SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk; // clock source
 8004c56:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <usDelay+0x48>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a0b      	ldr	r2, [pc, #44]	; (8004c88 <usDelay+0x48>)
 8004c5c:	f043 0307 	orr.w	r3, r3, #7
 8004c60:	6013      	str	r3, [r2, #0]

	TimingDelay = nTime-1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3b01      	subs	r3, #1
 8004c66:	4a09      	ldr	r2, [pc, #36]	; (8004c8c <usDelay+0x4c>)
 8004c68:	6013      	str	r3, [r2, #0]

	while(TimingDelay);
 8004c6a:	bf00      	nop
 8004c6c:	4b07      	ldr	r3, [pc, #28]	; (8004c8c <usDelay+0x4c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1fb      	bne.n	8004c6c <usDelay+0x2c>

	SysTick->CTRL = 0;
 8004c74:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <usDelay+0x48>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]

}
 8004c7a:	bf00      	nop
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	e000e010 	.word	0xe000e010
 8004c8c:	20001e38 	.word	0x20001e38

08004c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004c94:	b672      	cpsid	i
}
 8004c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004c98:	e7fe      	b.n	8004c98 <Error_Handler+0x8>
	...

08004c9c <SerialDownload>:
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void SerialDownload(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
  uint8_t number[11] = {0};
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	607b      	str	r3, [r7, #4]
 8004ca6:	f107 0308 	add.w	r3, r7, #8
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	f8c3 2003 	str.w	r2, [r3, #3]
  uint32_t size = 0;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	603b      	str	r3, [r7, #0]
  COM_StatusTypeDef result;

  Serial_PutString((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 8004cb6:	4821      	ldr	r0, [pc, #132]	; (8004d3c <SerialDownload+0xa0>)
 8004cb8:	f7ff f814 	bl	8003ce4 <Serial_PutString>
  result = Ymodem_Receive( &size );
 8004cbc:	463b      	mov	r3, r7
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 fc4a 	bl	8006558 <Ymodem_Receive>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	73fb      	strb	r3, [r7, #15]
  if (result == COM_OK)
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d119      	bne.n	8004d02 <SerialDownload+0x66>
  {
    Serial_PutString((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 8004cce:	481c      	ldr	r0, [pc, #112]	; (8004d40 <SerialDownload+0xa4>)
 8004cd0:	f7ff f808 	bl	8003ce4 <Serial_PutString>
    Serial_PutString(aFileName);
 8004cd4:	481b      	ldr	r0, [pc, #108]	; (8004d44 <SerialDownload+0xa8>)
 8004cd6:	f7ff f805 	bl	8003ce4 <Serial_PutString>
    Int2Str(number, size);
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	1d3b      	adds	r3, r7, #4
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fe feb5 	bl	8003a50 <Int2Str>
    Serial_PutString((uint8_t *)"\n\r Size: ");
 8004ce6:	4818      	ldr	r0, [pc, #96]	; (8004d48 <SerialDownload+0xac>)
 8004ce8:	f7fe fffc 	bl	8003ce4 <Serial_PutString>
    Serial_PutString(number);
 8004cec:	1d3b      	adds	r3, r7, #4
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe fff8 	bl	8003ce4 <Serial_PutString>
    Serial_PutString((uint8_t *)" Bytes\r\n");
 8004cf4:	4815      	ldr	r0, [pc, #84]	; (8004d4c <SerialDownload+0xb0>)
 8004cf6:	f7fe fff5 	bl	8003ce4 <Serial_PutString>
    Serial_PutString((uint8_t *)"-------------------\n");
 8004cfa:	4815      	ldr	r0, [pc, #84]	; (8004d50 <SerialDownload+0xb4>)
 8004cfc:	f7fe fff2 	bl	8003ce4 <Serial_PutString>
  }
  else
  {
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
  }
}
 8004d00:	e017      	b.n	8004d32 <SerialDownload+0x96>
  else if (result == COM_LIMIT)
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	2b05      	cmp	r3, #5
 8004d06:	d103      	bne.n	8004d10 <SerialDownload+0x74>
    Serial_PutString((uint8_t *)"\n\n\rThe image size is higher than the allowed space memory!\n\r");
 8004d08:	4812      	ldr	r0, [pc, #72]	; (8004d54 <SerialDownload+0xb8>)
 8004d0a:	f7fe ffeb 	bl	8003ce4 <Serial_PutString>
}
 8004d0e:	e010      	b.n	8004d32 <SerialDownload+0x96>
  else if (result == COM_DATA)
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d103      	bne.n	8004d1e <SerialDownload+0x82>
    Serial_PutString((uint8_t *)"\n\n\rVerification failed!\n\r");
 8004d16:	4810      	ldr	r0, [pc, #64]	; (8004d58 <SerialDownload+0xbc>)
 8004d18:	f7fe ffe4 	bl	8003ce4 <Serial_PutString>
}
 8004d1c:	e009      	b.n	8004d32 <SerialDownload+0x96>
  else if (result == COM_ABORT)
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d103      	bne.n	8004d2c <SerialDownload+0x90>
    Serial_PutString((uint8_t *)"\r\n\nAborted by user.\n\r");
 8004d24:	480d      	ldr	r0, [pc, #52]	; (8004d5c <SerialDownload+0xc0>)
 8004d26:	f7fe ffdd 	bl	8003ce4 <Serial_PutString>
}
 8004d2a:	e002      	b.n	8004d32 <SerialDownload+0x96>
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
 8004d2c:	480c      	ldr	r0, [pc, #48]	; (8004d60 <SerialDownload+0xc4>)
 8004d2e:	f7fe ffd9 	bl	8003ce4 <Serial_PutString>
}
 8004d32:	bf00      	nop
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	0800e754 	.word	0x0800e754
 8004d40:	0800e790 	.word	0x0800e790
 8004d44:	20001df4 	.word	0x20001df4
 8004d48:	0800e7e4 	.word	0x0800e7e4
 8004d4c:	0800e7f0 	.word	0x0800e7f0
 8004d50:	0800e7fc 	.word	0x0800e7fc
 8004d54:	0800e814 	.word	0x0800e814
 8004d58:	0800e854 	.word	0x0800e854
 8004d5c:	0800e870 	.word	0x0800e870
 8004d60:	0800e888 	.word	0x0800e888

08004d64 <RunApplication>:
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void RunApplication(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 // Serial_PutString((uint8_t *)"Start program execution......\r\n\n");
  //NVIC_SystemReset();
  //NVIC_DisableIRQ();
  //DNVIC_SetVector()
  SCB->VTOR = APPLICATION_ADDRESS;
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <RunApplication+0x3c>)
 8004d6c:	4a0d      	ldr	r2, [pc, #52]	; (8004da4 <RunApplication+0x40>)
 8004d6e:	609a      	str	r2, [r3, #8]
  /* execute the new program */
  JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8004d70:	4b0d      	ldr	r3, [pc, #52]	; (8004da8 <RunApplication+0x44>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a0d      	ldr	r2, [pc, #52]	; (8004dac <RunApplication+0x48>)
 8004d76:	6013      	str	r3, [r2, #0]
  /* Jump to user application */
  JumpToApplication = (pFunction) JumpAddress;
 8004d78:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <RunApplication+0x48>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	; (8004db0 <RunApplication+0x4c>)
 8004d80:	601a      	str	r2, [r3, #0]
  /* Initialize user application's Stack Pointer */
  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8004d82:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <RunApplication+0x40>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f383 8808 	msr	MSP, r3
}
 8004d8e:	bf00      	nop
  //SCB->VTOR = APPLICATION_ADDRESS;
  JumpToApplication();
 8004d90:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <RunApplication+0x4c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4798      	blx	r3
}
 8004d96:	bf00      	nop
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	e000ed00 	.word	0xe000ed00
 8004da4:	08020000 	.word	0x08020000
 8004da8:	08020004 	.word	0x08020004
 8004dac:	20001dec 	.word	0x20001dec
 8004db0:	20001df0 	.word	0x20001df0

08004db4 <__NVIC_GetPriorityGrouping>:
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004db8:	4b04      	ldr	r3, [pc, #16]	; (8004dcc <__NVIC_GetPriorityGrouping+0x18>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	0a1b      	lsrs	r3, r3, #8
 8004dbe:	f003 0307 	and.w	r3, r3, #7
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	e000ed00 	.word	0xe000ed00

08004dd0 <__NVIC_EnableIRQ>:
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	db0b      	blt.n	8004dfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004de2:	79fb      	ldrb	r3, [r7, #7]
 8004de4:	f003 021f 	and.w	r2, r3, #31
 8004de8:	4907      	ldr	r1, [pc, #28]	; (8004e08 <__NVIC_EnableIRQ+0x38>)
 8004dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	2001      	movs	r0, #1
 8004df2:	fa00 f202 	lsl.w	r2, r0, r2
 8004df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	e000e100 	.word	0xe000e100

08004e0c <__NVIC_SetPriority>:
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	6039      	str	r1, [r7, #0]
 8004e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	db0a      	blt.n	8004e36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	490c      	ldr	r1, [pc, #48]	; (8004e58 <__NVIC_SetPriority+0x4c>)
 8004e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e2a:	0112      	lsls	r2, r2, #4
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	440b      	add	r3, r1
 8004e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e34:	e00a      	b.n	8004e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	4908      	ldr	r1, [pc, #32]	; (8004e5c <__NVIC_SetPriority+0x50>)
 8004e3c:	79fb      	ldrb	r3, [r7, #7]
 8004e3e:	f003 030f 	and.w	r3, r3, #15
 8004e42:	3b04      	subs	r3, #4
 8004e44:	0112      	lsls	r2, r2, #4
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	440b      	add	r3, r1
 8004e4a:	761a      	strb	r2, [r3, #24]
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	e000e100 	.word	0xe000e100
 8004e5c:	e000ed00 	.word	0xe000ed00

08004e60 <NVIC_EncodePriority>:
{
 8004e60:	b480      	push	{r7}
 8004e62:	b089      	sub	sp, #36	; 0x24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f1c3 0307 	rsb	r3, r3, #7
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	bf28      	it	cs
 8004e7e:	2304      	movcs	r3, #4
 8004e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	3304      	adds	r3, #4
 8004e86:	2b06      	cmp	r3, #6
 8004e88:	d902      	bls.n	8004e90 <NVIC_EncodePriority+0x30>
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	3b03      	subs	r3, #3
 8004e8e:	e000      	b.n	8004e92 <NVIC_EncodePriority+0x32>
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	43da      	mvns	r2, r3
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	401a      	ands	r2, r3
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ea8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb2:	43d9      	mvns	r1, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb8:	4313      	orrs	r3, r2
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3724      	adds	r7, #36	; 0x24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
	...

08004ec8 <LL_AHB1_GRP1_EnableClock>:
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004ed0:	4b08      	ldr	r3, [pc, #32]	; (8004ef4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ed4:	4907      	ldr	r1, [pc, #28]	; (8004ef4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004edc:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
}
 8004ee8:	bf00      	nop
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	40023800 	.word	0x40023800

08004ef8 <LL_APB1_GRP1_EnableClock>:
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8004f00:	4b08      	ldr	r3, [pc, #32]	; (8004f24 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f04:	4907      	ldr	r1, [pc, #28]	; (8004f24 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004f0c:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4013      	ands	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004f16:	68fb      	ldr	r3, [r7, #12]
}
 8004f18:	bf00      	nop
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	40023800 	.word	0x40023800

08004f28 <LL_APB2_GRP1_EnableClock>:
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8004f30:	4b08      	ldr	r3, [pc, #32]	; (8004f54 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f34:	4907      	ldr	r1, [pc, #28]	; (8004f54 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004f3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4013      	ands	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004f46:	68fb      	ldr	r3, [r7, #12]
}
 8004f48:	bf00      	nop
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	40023800 	.word	0x40023800

08004f58 <LL_SPI_SetStandard>:
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f023 0210 	bic.w	r2, r3, #16
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	605a      	str	r2, [r3, #4]
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
	...

08004f80 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b090      	sub	sp, #64	; 0x40
 8004f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8004f86:	f107 0318 	add.w	r3, r7, #24
 8004f8a:	2228      	movs	r2, #40	; 0x28
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f005 f950 	bl	800a234 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f94:	463b      	mov	r3, r7
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	605a      	str	r2, [r3, #4]
 8004f9c:	609a      	str	r2, [r3, #8]
 8004f9e:	60da      	str	r2, [r3, #12]
 8004fa0:	611a      	str	r2, [r3, #16]
 8004fa2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8004fa4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004fa8:	f7ff ffbe 	bl	8004f28 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004fac:	2001      	movs	r0, #1
 8004fae:	f7ff ff8b 	bl	8004ec8 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8004fb2:	23e0      	movs	r3, #224	; 0xe0
 8004fb4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8004fc6:	2305      	movs	r3, #5
 8004fc8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fca:	463b      	mov	r3, r7
 8004fcc:	4619      	mov	r1, r3
 8004fce:	481b      	ldr	r0, [pc, #108]	; (800503c <MX_SPI1_Init+0xbc>)
 8004fd0:	f004 f8d8 	bl	8009184 <LL_GPIO_Init>

  /* SPI1 interrupt Init */
  NVIC_SetPriority(SPI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004fd4:	f7ff feee 	bl	8004db4 <__NVIC_GetPriorityGrouping>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2100      	movs	r1, #0
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff ff3e 	bl	8004e60 <NVIC_EncodePriority>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	2023      	movs	r0, #35	; 0x23
 8004fea:	f7ff ff0f 	bl	8004e0c <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI1_IRQn);
 8004fee:	2023      	movs	r0, #35	; 0x23
 8004ff0:	f7ff feee 	bl	8004dd0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8004ff8:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004ffc:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8004ffe:	2300      	movs	r3, #0
 8005000:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8005002:	2302      	movs	r3, #2
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8005006:	2301      	movs	r3, #1
 8005008:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800500a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800500e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8005010:	2310      	movs	r3, #16
 8005012:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8005014:	2300      	movs	r3, #0
 8005016:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8005018:	2300      	movs	r3, #0
 800501a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 800501c:	230a      	movs	r3, #10
 800501e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8005020:	f107 0318 	add.w	r3, r7, #24
 8005024:	4619      	mov	r1, r3
 8005026:	4806      	ldr	r0, [pc, #24]	; (8005040 <MX_SPI1_Init+0xc0>)
 8005028:	f004 fa7d 	bl	8009526 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 800502c:	2100      	movs	r1, #0
 800502e:	4804      	ldr	r0, [pc, #16]	; (8005040 <MX_SPI1_Init+0xc0>)
 8005030:	f7ff ff92 	bl	8004f58 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005034:	bf00      	nop
 8005036:	3740      	adds	r7, #64	; 0x40
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40020000 	.word	0x40020000
 8005040:	40013000 	.word	0x40013000

08005044 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b090      	sub	sp, #64	; 0x40
 8005048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800504a:	f107 0318 	add.w	r3, r7, #24
 800504e:	2228      	movs	r2, #40	; 0x28
 8005050:	2100      	movs	r1, #0
 8005052:	4618      	mov	r0, r3
 8005054:	f005 f8ee 	bl	800a234 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005058:	463b      	mov	r3, r7
 800505a:	2200      	movs	r2, #0
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	605a      	str	r2, [r3, #4]
 8005060:	609a      	str	r2, [r3, #8]
 8005062:	60da      	str	r2, [r3, #12]
 8005064:	611a      	str	r2, [r3, #16]
 8005066:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8005068:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800506c:	f7ff ff44 	bl	8004ef8 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005070:	2004      	movs	r0, #4
 8005072:	f7ff ff29 	bl	8004ec8 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8005076:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800507a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800507c:	2302      	movs	r3, #2
 800507e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005080:	2303      	movs	r3, #3
 8005082:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005084:	2300      	movs	r3, #0
 8005086:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005088:	2300      	movs	r3, #0
 800508a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800508c:	2306      	movs	r3, #6
 800508e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005090:	463b      	mov	r3, r7
 8005092:	4619      	mov	r1, r3
 8005094:	481b      	ldr	r0, [pc, #108]	; (8005104 <MX_SPI3_Init+0xc0>)
 8005096:	f004 f875 	bl	8009184 <LL_GPIO_Init>

  /* SPI3 interrupt Init */
  NVIC_SetPriority(SPI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800509a:	f7ff fe8b 	bl	8004db4 <__NVIC_GetPriorityGrouping>
 800509e:	4603      	mov	r3, r0
 80050a0:	2200      	movs	r2, #0
 80050a2:	2100      	movs	r1, #0
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff fedb 	bl	8004e60 <NVIC_EncodePriority>
 80050aa:	4603      	mov	r3, r0
 80050ac:	4619      	mov	r1, r3
 80050ae:	2033      	movs	r0, #51	; 0x33
 80050b0:	f7ff feac 	bl	8004e0c <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI3_IRQn);
 80050b4:	2033      	movs	r0, #51	; 0x33
 80050b6:	f7ff fe8b 	bl	8004dd0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80050ba:	2300      	movs	r3, #0
 80050bc:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80050be:	f44f 7382 	mov.w	r3, #260	; 0x104
 80050c2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80050c4:	2300      	movs	r3, #0
 80050c6:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 80050c8:	2300      	movs	r3, #0
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 80050cc:	2300      	movs	r3, #0
 80050ce:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80050d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 80050d6:	2300      	movs	r3, #0
 80050d8:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80050da:	2300      	movs	r3, #0
 80050dc:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80050de:	2300      	movs	r3, #0
 80050e0:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 80050e2:	230a      	movs	r3, #10
 80050e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 80050e6:	f107 0318 	add.w	r3, r7, #24
 80050ea:	4619      	mov	r1, r3
 80050ec:	4806      	ldr	r0, [pc, #24]	; (8005108 <MX_SPI3_Init+0xc4>)
 80050ee:	f004 fa1a 	bl	8009526 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 80050f2:	2100      	movs	r1, #0
 80050f4:	4804      	ldr	r0, [pc, #16]	; (8005108 <MX_SPI3_Init+0xc4>)
 80050f6:	f7ff ff2f 	bl	8004f58 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80050fa:	bf00      	nop
 80050fc:	3740      	adds	r7, #64	; 0x40
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	40020800 	.word	0x40020800
 8005108:	40003c00 	.word	0x40003c00

0800510c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005112:	2300      	movs	r3, #0
 8005114:	607b      	str	r3, [r7, #4]
 8005116:	4b10      	ldr	r3, [pc, #64]	; (8005158 <HAL_MspInit+0x4c>)
 8005118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511a:	4a0f      	ldr	r2, [pc, #60]	; (8005158 <HAL_MspInit+0x4c>)
 800511c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005120:	6453      	str	r3, [r2, #68]	; 0x44
 8005122:	4b0d      	ldr	r3, [pc, #52]	; (8005158 <HAL_MspInit+0x4c>)
 8005124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800512a:	607b      	str	r3, [r7, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800512e:	2300      	movs	r3, #0
 8005130:	603b      	str	r3, [r7, #0]
 8005132:	4b09      	ldr	r3, [pc, #36]	; (8005158 <HAL_MspInit+0x4c>)
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	4a08      	ldr	r2, [pc, #32]	; (8005158 <HAL_MspInit+0x4c>)
 8005138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800513c:	6413      	str	r3, [r2, #64]	; 0x40
 800513e:	4b06      	ldr	r3, [pc, #24]	; (8005158 <HAL_MspInit+0x4c>)
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40023800 	.word	0x40023800

0800515c <LL_DMA_IsActiveFlag_TC1>:
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800516c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005170:	bf0c      	ite	eq
 8005172:	2301      	moveq	r3, #1
 8005174:	2300      	movne	r3, #0
 8005176:	b2db      	uxtb	r3, r3
}
 8005178:	4618      	mov	r0, r3
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <LL_DMA_ClearFlag_TC1>:
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005192:	609a      	str	r2, [r3, #8]
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE) == DMA_SxCR_TCIE);
 80051aa:	4a0a      	ldr	r2, [pc, #40]	; (80051d4 <LL_DMA_IsEnabledIT_TC+0x34>)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	4413      	add	r3, r2
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	461a      	mov	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4413      	add	r3, r2
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	2b10      	cmp	r3, #16
 80051c0:	bf0c      	ite	eq
 80051c2:	2301      	moveq	r3, #1
 80051c4:	2300      	movne	r3, #0
 80051c6:	b2db      	uxtb	r3, r3
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	0800ed9c 	.word	0x0800ed9c

080051d8 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80051e0:	4b07      	ldr	r3, [pc, #28]	; (8005200 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80051e2:	695a      	ldr	r2, [r3, #20]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4013      	ands	r3, r2
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	bf0c      	ite	eq
 80051ee:	2301      	moveq	r3, #1
 80051f0:	2300      	movne	r3, #0
 80051f2:	b2db      	uxtb	r3, r3
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	40013c00 	.word	0x40013c00

08005204 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 800520c:	4a04      	ldr	r2, [pc, #16]	; (8005220 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6153      	str	r3, [r2, #20]
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40013c00 	.word	0x40013c00

08005224 <LL_USART_IsActiveFlag_IDLE>:
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0310 	and.w	r3, r3, #16
 8005234:	2b10      	cmp	r3, #16
 8005236:	bf0c      	ite	eq
 8005238:	2301      	moveq	r3, #1
 800523a:	2300      	movne	r3, #0
 800523c:	b2db      	uxtb	r3, r3
}
 800523e:	4618      	mov	r0, r3
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <LL_USART_IsActiveFlag_RXNE>:
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b20      	cmp	r3, #32
 800525c:	bf0c      	ite	eq
 800525e:	2301      	moveq	r3, #1
 8005260:	2300      	movne	r3, #0
 8005262:	b2db      	uxtb	r3, r3
}
 8005264:	4618      	mov	r0, r3
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <LL_USART_ClearFlag_IDLE>:
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800527e:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8005286:	68fb      	ldr	r3, [r7, #12]
}
 8005288:	bf00      	nop
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <LL_USART_ClearFlag_RXNE>:
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f06f 0220 	mvn.w	r2, #32
 80052a2:	601a      	str	r2, [r3, #0]
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <LL_USART_IsEnabledIT_IDLE>:
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 0310 	and.w	r3, r3, #16
 80052c0:	2b10      	cmp	r3, #16
 80052c2:	bf0c      	ite	eq
 80052c4:	2301      	moveq	r3, #1
 80052c6:	2300      	movne	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <LL_USART_IsEnabledIT_RXNE>:
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	bf0c      	ite	eq
 80052ea:	2301      	moveq	r3, #1
 80052ec:	2300      	movne	r3, #0
 80052ee:	b2db      	uxtb	r3, r3
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <LL_USART_ReceiveData8>:
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	b2db      	uxtb	r3, r3
}
 800530a:	4618      	mov	r0, r3
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005316:	b480      	push	{r7}
 8005318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800531a:	e7fe      	b.n	800531a <NMI_Handler+0x4>

0800531c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005320:	e7fe      	b.n	8005320 <HardFault_Handler+0x4>

08005322 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005322:	b480      	push	{r7}
 8005324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005326:	e7fe      	b.n	8005326 <MemManage_Handler+0x4>

08005328 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800532c:	e7fe      	b.n	800532c <BusFault_Handler+0x4>

0800532e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800532e:	b480      	push	{r7}
 8005330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005332:	e7fe      	b.n	8005332 <UsageFault_Handler+0x4>

08005334 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005334:	b480      	push	{r7}
 8005336:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005338:	bf00      	nop
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005342:	b480      	push	{r7}
 8005344:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005346:	bf00      	nop
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005354:	bf00      	nop
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 8005364:	4b06      	ldr	r3, [pc, #24]	; (8005380 <SysTick_Handler+0x20>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d004      	beq.n	8005376 <SysTick_Handler+0x16>

		TimingDelay--;
 800536c:	4b04      	ldr	r3, [pc, #16]	; (8005380 <SysTick_Handler+0x20>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3b01      	subs	r3, #1
 8005372:	4a03      	ldr	r2, [pc, #12]	; (8005380 <SysTick_Handler+0x20>)
 8005374:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005376:	f001 fac9 	bl	800690c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800537a:	bf00      	nop
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	20001e38 	.word	0x20001e38

08005384 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	// IMU SPI External interrupt
  /* USER CODE END EXTI4_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 8005388:	2010      	movs	r0, #16
 800538a:	f7ff ff25 	bl	80051d8 <LL_EXTI_IsActiveFlag_0_31>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <EXTI4_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 8005394:	2010      	movs	r0, #16
 8005396:	f7ff ff35 	bl	8005204 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800539a:	bf00      	nop
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

    /* Check transfer-complete interrupt */
    if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_TC1(DMA1)) {
 80053a4:	2101      	movs	r1, #1
 80053a6:	480a      	ldr	r0, [pc, #40]	; (80053d0 <DMA1_Stream1_IRQHandler+0x30>)
 80053a8:	f7ff fefa 	bl	80051a0 <LL_DMA_IsEnabledIT_TC>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00b      	beq.n	80053ca <DMA1_Stream1_IRQHandler+0x2a>
 80053b2:	4807      	ldr	r0, [pc, #28]	; (80053d0 <DMA1_Stream1_IRQHandler+0x30>)
 80053b4:	f7ff fed2 	bl	800515c <LL_DMA_IsActiveFlag_TC1>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d005      	beq.n	80053ca <DMA1_Stream1_IRQHandler+0x2a>
		LL_DMA_ClearFlag_TC1(DMA1);
 80053be:	4804      	ldr	r0, [pc, #16]	; (80053d0 <DMA1_Stream1_IRQHandler+0x30>)
 80053c0:	f7ff fee0 	bl	8005184 <LL_DMA_ClearFlag_TC1>
        flag_DMA1_DONE = 1;
 80053c4:	4b03      	ldr	r3, [pc, #12]	; (80053d4 <DMA1_Stream1_IRQHandler+0x34>)
 80053c6:	2201      	movs	r2, #1
 80053c8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Stream1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80053ca:	bf00      	nop
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	40026000 	.word	0x40026000
 80053d4:	20001f41 	.word	0x20001f41

080053d8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0

  /* USER CODE END SPI1_IRQn 0 */
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80053dc:	bf00      	nop
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
	...

080053e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	if(LL_USART_IsEnabledIT_RXNE(USART1) && LL_USART_IsActiveFlag_RXNE(USART1)) // 인터럽트중 USART6인지 확인
 80053ec:	4812      	ldr	r0, [pc, #72]	; (8005438 <USART1_IRQHandler+0x50>)
 80053ee:	f7ff ff72 	bl	80052d6 <LL_USART_IsEnabledIT_RXNE>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00b      	beq.n	8005410 <USART1_IRQHandler+0x28>
 80053f8:	480f      	ldr	r0, [pc, #60]	; (8005438 <USART1_IRQHandler+0x50>)
 80053fa:	f7ff ff26 	bl	800524a <LL_USART_IsActiveFlag_RXNE>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d005      	beq.n	8005410 <USART1_IRQHandler+0x28>
	{
			LL_USART_ClearFlag_RXNE(USART1); // 맞으면 비트 클리어
 8005404:	480c      	ldr	r0, [pc, #48]	; (8005438 <USART1_IRQHandler+0x50>)
 8005406:	f7ff ff45 	bl	8005294 <LL_USART_ClearFlag_RXNE>
			flag_INT_UART1_RX = 1; // flag 클리어
 800540a:	4b0c      	ldr	r3, [pc, #48]	; (800543c <USART1_IRQHandler+0x54>)
 800540c:	2201      	movs	r2, #1
 800540e:	701a      	strb	r2, [r3, #0]

	}


	if(LL_USART_IsEnabledIT_IDLE(USART1) && LL_USART_IsActiveFlag_IDLE(USART1)) {
 8005410:	4809      	ldr	r0, [pc, #36]	; (8005438 <USART1_IRQHandler+0x50>)
 8005412:	f7ff ff4d 	bl	80052b0 <LL_USART_IsEnabledIT_IDLE>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00b      	beq.n	8005434 <USART1_IRQHandler+0x4c>
 800541c:	4806      	ldr	r0, [pc, #24]	; (8005438 <USART1_IRQHandler+0x50>)
 800541e:	f7ff ff01 	bl	8005224 <LL_USART_IsActiveFlag_IDLE>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d005      	beq.n	8005434 <USART1_IRQHandler+0x4c>
		LL_USART_ClearFlag_IDLE(USART1);
 8005428:	4803      	ldr	r0, [pc, #12]	; (8005438 <USART1_IRQHandler+0x50>)
 800542a:	f7ff ff21 	bl	8005270 <LL_USART_ClearFlag_IDLE>
		flag_INT_UART1_RX_DONE = 1; // 수신완료
 800542e:	4b04      	ldr	r3, [pc, #16]	; (8005440 <USART1_IRQHandler+0x58>)
 8005430:	2201      	movs	r2, #1
 8005432:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005434:	bf00      	nop
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40011000 	.word	0x40011000
 800543c:	20001f40 	.word	0x20001f40
 8005440:	20001e3d 	.word	0x20001e3d

08005444 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
			rxd_gps = LL_USART_ReceiveData8(USART3); // 데이터 수신
			flag_INT_UART3_GPS = 1; // flag 클리어

	}
*/
	if(LL_USART_IsEnabledIT_IDLE(USART3) && LL_USART_IsActiveFlag_IDLE(USART3)) {
 8005448:	4809      	ldr	r0, [pc, #36]	; (8005470 <USART3_IRQHandler+0x2c>)
 800544a:	f7ff ff31 	bl	80052b0 <LL_USART_IsEnabledIT_IDLE>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00b      	beq.n	800546c <USART3_IRQHandler+0x28>
 8005454:	4806      	ldr	r0, [pc, #24]	; (8005470 <USART3_IRQHandler+0x2c>)
 8005456:	f7ff fee5 	bl	8005224 <LL_USART_IsActiveFlag_IDLE>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <USART3_IRQHandler+0x28>
		LL_USART_ClearFlag_IDLE(USART3);
 8005460:	4803      	ldr	r0, [pc, #12]	; (8005470 <USART3_IRQHandler+0x2c>)
 8005462:	f7ff ff05 	bl	8005270 <LL_USART_ClearFlag_IDLE>
		flag_INT_UART3_GPS = 1; // flag 클리어
 8005466:	4b03      	ldr	r3, [pc, #12]	; (8005474 <USART3_IRQHandler+0x30>)
 8005468:	2201      	movs	r2, #1
 800546a:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800546c:	bf00      	nop
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40004800 	.word	0x40004800
 8005474:	20001e3e 	.word	0x20001e3e

08005478 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0

  /* USER CODE END SPI3_IRQn 0 */
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800547c:	bf00      	nop
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
	...

08005488 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800548c:	4802      	ldr	r0, [pc, #8]	; (8005498 <DMA2_Stream0_IRQHandler+0x10>)
 800548e:	f002 f887 	bl	80075a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005492:	bf00      	nop
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20000d40 	.word	0x20000d40

0800549c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6) && LL_USART_IsActiveFlag_RXNE(USART6))// 인터럽트중 USART6인지 확인
 80054a0:	480d      	ldr	r0, [pc, #52]	; (80054d8 <USART6_IRQHandler+0x3c>)
 80054a2:	f7ff fed2 	bl	800524a <LL_USART_IsActiveFlag_RXNE>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d012      	beq.n	80054d2 <USART6_IRQHandler+0x36>
 80054ac:	480a      	ldr	r0, [pc, #40]	; (80054d8 <USART6_IRQHandler+0x3c>)
 80054ae:	f7ff fecc 	bl	800524a <LL_USART_IsActiveFlag_RXNE>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00c      	beq.n	80054d2 <USART6_IRQHandler+0x36>
	{
			LL_USART_ClearFlag_RXNE(USART6); // 맞으면 비트 클리어
 80054b8:	4807      	ldr	r0, [pc, #28]	; (80054d8 <USART6_IRQHandler+0x3c>)
 80054ba:	f7ff feeb 	bl	8005294 <LL_USART_ClearFlag_RXNE>
			g_rx_buffer = LL_USART_ReceiveData8(USART6); // 데이터 수신
 80054be:	4806      	ldr	r0, [pc, #24]	; (80054d8 <USART6_IRQHandler+0x3c>)
 80054c0:	f7ff ff1c 	bl	80052fc <LL_USART_ReceiveData8>
 80054c4:	4603      	mov	r3, r0
 80054c6:	461a      	mov	r2, r3
 80054c8:	4b04      	ldr	r3, [pc, #16]	; (80054dc <USART6_IRQHandler+0x40>)
 80054ca:	701a      	strb	r2, [r3, #0]
			flag_INT_USART6 = 1; // flag 클리어
 80054cc:	4b04      	ldr	r3, [pc, #16]	; (80054e0 <USART6_IRQHandler+0x44>)
 80054ce:	2201      	movs	r2, #1
 80054d0:	701a      	strb	r2, [r3, #0]
		flag_INT_UART6_RX_DONE = 1; // flag 클리어

    }
*/
  /* USER CODE END USART6_IRQn 1 */
}
 80054d2:	bf00      	nop
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	40011400 	.word	0x40011400
 80054dc:	20000c21 	.word	0x20000c21
 80054e0:	20001e36 	.word	0x20001e36

080054e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  return 1;
 80054e8:	2301      	movs	r3, #1
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <_kill>:

int _kill(int pid, int sig)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80054fe:	f004 fe51 	bl	800a1a4 <__errno>
 8005502:	4603      	mov	r3, r0
 8005504:	2216      	movs	r2, #22
 8005506:	601a      	str	r2, [r3, #0]
  return -1;
 8005508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <_exit>:

void _exit (int status)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800551c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff ffe7 	bl	80054f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005526:	e7fe      	b.n	8005526 <_exit+0x12>

08005528 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005534:	2300      	movs	r3, #0
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	e00a      	b.n	8005550 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800553a:	f3af 8000 	nop.w
 800553e:	4601      	mov	r1, r0
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	1c5a      	adds	r2, r3, #1
 8005544:	60ba      	str	r2, [r7, #8]
 8005546:	b2ca      	uxtb	r2, r1
 8005548:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	3301      	adds	r3, #1
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	429a      	cmp	r2, r3
 8005556:	dbf0      	blt.n	800553a <_read+0x12>
  }

  return len;
 8005558:	687b      	ldr	r3, [r7, #4]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}

08005562 <_close>:
  }
  return len;
}

int _close(int file)
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800556a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800556e:	4618      	mov	r0, r3
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800558a:	605a      	str	r2, [r3, #4]
  return 0;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <_isatty>:

int _isatty(int file)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80055a2:	2301      	movs	r3, #1
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
	...

080055cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80055d4:	4a14      	ldr	r2, [pc, #80]	; (8005628 <_sbrk+0x5c>)
 80055d6:	4b15      	ldr	r3, [pc, #84]	; (800562c <_sbrk+0x60>)
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80055e0:	4b13      	ldr	r3, [pc, #76]	; (8005630 <_sbrk+0x64>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d102      	bne.n	80055ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80055e8:	4b11      	ldr	r3, [pc, #68]	; (8005630 <_sbrk+0x64>)
 80055ea:	4a12      	ldr	r2, [pc, #72]	; (8005634 <_sbrk+0x68>)
 80055ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80055ee:	4b10      	ldr	r3, [pc, #64]	; (8005630 <_sbrk+0x64>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4413      	add	r3, r2
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d207      	bcs.n	800560c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055fc:	f004 fdd2 	bl	800a1a4 <__errno>
 8005600:	4603      	mov	r3, r0
 8005602:	220c      	movs	r2, #12
 8005604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800560a:	e009      	b.n	8005620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800560c:	4b08      	ldr	r3, [pc, #32]	; (8005630 <_sbrk+0x64>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005612:	4b07      	ldr	r3, [pc, #28]	; (8005630 <_sbrk+0x64>)
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4413      	add	r3, r2
 800561a:	4a05      	ldr	r2, [pc, #20]	; (8005630 <_sbrk+0x64>)
 800561c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800561e:	68fb      	ldr	r3, [r7, #12]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3718      	adds	r7, #24
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	20020000 	.word	0x20020000
 800562c:	00000400 	.word	0x00000400
 8005630:	20000c30 	.word	0x20000c30
 8005634:	20002378 	.word	0x20002378

08005638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800563c:	4b06      	ldr	r3, [pc, #24]	; (8005658 <SystemInit+0x20>)
 800563e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005642:	4a05      	ldr	r2, [pc, #20]	; (8005658 <SystemInit+0x20>)
 8005644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800564c:	bf00      	nop
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	e000ed00 	.word	0xe000ed00

0800565c <LL_AHB1_GRP1_EnableClock>:
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005664:	4b08      	ldr	r3, [pc, #32]	; (8005688 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005668:	4907      	ldr	r1, [pc, #28]	; (8005688 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4313      	orrs	r3, r2
 800566e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005670:	4b05      	ldr	r3, [pc, #20]	; (8005688 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4013      	ands	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800567a:	68fb      	ldr	r3, [r7, #12]
}
 800567c:	bf00      	nop
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	40023800 	.word	0x40023800

0800568c <LL_APB1_GRP1_EnableClock>:
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8005694:	4b08      	ldr	r3, [pc, #32]	; (80056b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8005696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005698:	4907      	ldr	r1, [pc, #28]	; (80056b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4313      	orrs	r3, r2
 800569e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80056a0:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80056a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4013      	ands	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80056aa:	68fb      	ldr	r3, [r7, #12]
}
 80056ac:	bf00      	nop
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	40023800 	.word	0x40023800

080056bc <LL_TIM_EnableARRPreload>:
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	601a      	str	r2, [r3, #0]
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d01c      	beq.n	8005726 <LL_TIM_OC_EnableFast+0x4a>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b04      	cmp	r3, #4
 80056f0:	d017      	beq.n	8005722 <LL_TIM_OC_EnableFast+0x46>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b10      	cmp	r3, #16
 80056f6:	d012      	beq.n	800571e <LL_TIM_OC_EnableFast+0x42>
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2b40      	cmp	r3, #64	; 0x40
 80056fc:	d00d      	beq.n	800571a <LL_TIM_OC_EnableFast+0x3e>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005704:	d007      	beq.n	8005716 <LL_TIM_OC_EnableFast+0x3a>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800570c:	d101      	bne.n	8005712 <LL_TIM_OC_EnableFast+0x36>
 800570e:	2305      	movs	r3, #5
 8005710:	e00a      	b.n	8005728 <LL_TIM_OC_EnableFast+0x4c>
 8005712:	2306      	movs	r3, #6
 8005714:	e008      	b.n	8005728 <LL_TIM_OC_EnableFast+0x4c>
 8005716:	2304      	movs	r3, #4
 8005718:	e006      	b.n	8005728 <LL_TIM_OC_EnableFast+0x4c>
 800571a:	2303      	movs	r3, #3
 800571c:	e004      	b.n	8005728 <LL_TIM_OC_EnableFast+0x4c>
 800571e:	2302      	movs	r3, #2
 8005720:	e002      	b.n	8005728 <LL_TIM_OC_EnableFast+0x4c>
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <LL_TIM_OC_EnableFast+0x4c>
 8005726:	2300      	movs	r3, #0
 8005728:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3318      	adds	r3, #24
 800572e:	4619      	mov	r1, r3
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	4a0a      	ldr	r2, [pc, #40]	; (800575c <LL_TIM_OC_EnableFast+0x80>)
 8005734:	5cd3      	ldrb	r3, [r2, r3]
 8005736:	440b      	add	r3, r1
 8005738:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	4907      	ldr	r1, [pc, #28]	; (8005760 <LL_TIM_OC_EnableFast+0x84>)
 8005742:	5ccb      	ldrb	r3, [r1, r3]
 8005744:	4619      	mov	r1, r3
 8005746:	2304      	movs	r3, #4
 8005748:	408b      	lsls	r3, r1
 800574a:	431a      	orrs	r2, r3
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	601a      	str	r2, [r3, #0]

}
 8005750:	bf00      	nop
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	0800edbc 	.word	0x0800edbc
 8005760:	0800edc4 	.word	0x0800edc4

08005764 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d01c      	beq.n	80057ae <LL_TIM_OC_EnablePreload+0x4a>
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b04      	cmp	r3, #4
 8005778:	d017      	beq.n	80057aa <LL_TIM_OC_EnablePreload+0x46>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b10      	cmp	r3, #16
 800577e:	d012      	beq.n	80057a6 <LL_TIM_OC_EnablePreload+0x42>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b40      	cmp	r3, #64	; 0x40
 8005784:	d00d      	beq.n	80057a2 <LL_TIM_OC_EnablePreload+0x3e>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800578c:	d007      	beq.n	800579e <LL_TIM_OC_EnablePreload+0x3a>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005794:	d101      	bne.n	800579a <LL_TIM_OC_EnablePreload+0x36>
 8005796:	2305      	movs	r3, #5
 8005798:	e00a      	b.n	80057b0 <LL_TIM_OC_EnablePreload+0x4c>
 800579a:	2306      	movs	r3, #6
 800579c:	e008      	b.n	80057b0 <LL_TIM_OC_EnablePreload+0x4c>
 800579e:	2304      	movs	r3, #4
 80057a0:	e006      	b.n	80057b0 <LL_TIM_OC_EnablePreload+0x4c>
 80057a2:	2303      	movs	r3, #3
 80057a4:	e004      	b.n	80057b0 <LL_TIM_OC_EnablePreload+0x4c>
 80057a6:	2302      	movs	r3, #2
 80057a8:	e002      	b.n	80057b0 <LL_TIM_OC_EnablePreload+0x4c>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <LL_TIM_OC_EnablePreload+0x4c>
 80057ae:	2300      	movs	r3, #0
 80057b0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3318      	adds	r3, #24
 80057b6:	4619      	mov	r1, r3
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	4a0a      	ldr	r2, [pc, #40]	; (80057e4 <LL_TIM_OC_EnablePreload+0x80>)
 80057bc:	5cd3      	ldrb	r3, [r2, r3]
 80057be:	440b      	add	r3, r1
 80057c0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
 80057c8:	4907      	ldr	r1, [pc, #28]	; (80057e8 <LL_TIM_OC_EnablePreload+0x84>)
 80057ca:	5ccb      	ldrb	r3, [r1, r3]
 80057cc:	4619      	mov	r1, r3
 80057ce:	2308      	movs	r3, #8
 80057d0:	408b      	lsls	r3, r1
 80057d2:	431a      	orrs	r2, r3
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	601a      	str	r2, [r3, #0]
}
 80057d8:	bf00      	nop
 80057da:	3714      	adds	r7, #20
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	0800edbc 	.word	0x0800edbc
 80057e8:	0800edc4 	.word	0x0800edc4

080057ec <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057fe:	f023 0307 	bic.w	r3, r3, #7
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	431a      	orrs	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	609a      	str	r2, [r3, #8]
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	605a      	str	r2, [r3, #4]
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	609a      	str	r2, [r3, #8]
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b094      	sub	sp, #80	; 0x50
 8005860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005862:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005866:	2200      	movs	r2, #0
 8005868:	601a      	str	r2, [r3, #0]
 800586a:	605a      	str	r2, [r3, #4]
 800586c:	609a      	str	r2, [r3, #8]
 800586e:	60da      	str	r2, [r3, #12]
 8005870:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8005872:	f107 031c 	add.w	r3, r7, #28
 8005876:	2220      	movs	r2, #32
 8005878:	2100      	movs	r1, #0
 800587a:	4618      	mov	r0, r3
 800587c:	f004 fcda 	bl	800a234 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005880:	1d3b      	adds	r3, r7, #4
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	605a      	str	r2, [r3, #4]
 8005888:	609a      	str	r2, [r3, #8]
 800588a:	60da      	str	r2, [r3, #12]
 800588c:	611a      	str	r2, [r3, #16]
 800588e:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8005890:	2002      	movs	r0, #2
 8005892:	f7ff fefb 	bl	800568c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800589a:	2300      	movs	r3, #0
 800589c:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 41999;
 800589e:	f24a 430f 	movw	r3, #41999	; 0xa40f
 80058a2:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80058a4:	2300      	movs	r3, #0
 80058a6:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80058a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80058ac:	4619      	mov	r1, r3
 80058ae:	4833      	ldr	r0, [pc, #204]	; (800597c <MX_TIM3_Init+0x120>)
 80058b0:	f003 fefe 	bl	80096b0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 80058b4:	4831      	ldr	r0, [pc, #196]	; (800597c <MX_TIM3_Init+0x120>)
 80058b6:	f7ff ff01 	bl	80056bc <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80058ba:	2100      	movs	r1, #0
 80058bc:	482f      	ldr	r0, [pc, #188]	; (800597c <MX_TIM3_Init+0x120>)
 80058be:	f7ff ff95 	bl	80057ec <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 80058c2:	2101      	movs	r1, #1
 80058c4:	482d      	ldr	r0, [pc, #180]	; (800597c <MX_TIM3_Init+0x120>)
 80058c6:	f7ff ff4d 	bl	8005764 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80058ca:	2360      	movs	r3, #96	; 0x60
 80058cc:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80058ce:	2300      	movs	r3, #0
 80058d0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80058d2:	2300      	movs	r3, #0
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80058d6:	2300      	movs	r3, #0
 80058d8:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80058da:	2300      	movs	r3, #0
 80058dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80058de:	f107 031c 	add.w	r3, r7, #28
 80058e2:	461a      	mov	r2, r3
 80058e4:	2101      	movs	r1, #1
 80058e6:	4825      	ldr	r0, [pc, #148]	; (800597c <MX_TIM3_Init+0x120>)
 80058e8:	f003 ff7c 	bl	80097e4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80058ec:	2101      	movs	r1, #1
 80058ee:	4823      	ldr	r0, [pc, #140]	; (800597c <MX_TIM3_Init+0x120>)
 80058f0:	f7ff fef4 	bl	80056dc <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 80058f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058f8:	4820      	ldr	r0, [pc, #128]	; (800597c <MX_TIM3_Init+0x120>)
 80058fa:	f7ff ff33 	bl	8005764 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80058fe:	f107 031c 	add.w	r3, r7, #28
 8005902:	461a      	mov	r2, r3
 8005904:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005908:	481c      	ldr	r0, [pc, #112]	; (800597c <MX_TIM3_Init+0x120>)
 800590a:	f003 ff6b 	bl	80097e4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH3);
 800590e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005912:	481a      	ldr	r0, [pc, #104]	; (800597c <MX_TIM3_Init+0x120>)
 8005914:	f7ff fee2 	bl	80056dc <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8005918:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800591c:	4817      	ldr	r0, [pc, #92]	; (800597c <MX_TIM3_Init+0x120>)
 800591e:	f7ff ff21 	bl	8005764 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8005922:	f107 031c 	add.w	r3, r7, #28
 8005926:	461a      	mov	r2, r3
 8005928:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800592c:	4813      	ldr	r0, [pc, #76]	; (800597c <MX_TIM3_Init+0x120>)
 800592e:	f003 ff59 	bl	80097e4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8005932:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005936:	4811      	ldr	r0, [pc, #68]	; (800597c <MX_TIM3_Init+0x120>)
 8005938:	f7ff fed0 	bl	80056dc <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800593c:	2100      	movs	r1, #0
 800593e:	480f      	ldr	r0, [pc, #60]	; (800597c <MX_TIM3_Init+0x120>)
 8005940:	f7ff ff69 	bl	8005816 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8005944:	480d      	ldr	r0, [pc, #52]	; (800597c <MX_TIM3_Init+0x120>)
 8005946:	f7ff ff79 	bl	800583c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800594a:	2002      	movs	r0, #2
 800594c:	f7ff fe86 	bl	800565c <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4;
 8005950:	2313      	movs	r3, #19
 8005952:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005954:	2302      	movs	r3, #2
 8005956:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800595c:	2300      	movs	r3, #0
 800595e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005960:	2300      	movs	r3, #0
 8005962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8005964:	2302      	movs	r3, #2
 8005966:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005968:	1d3b      	adds	r3, r7, #4
 800596a:	4619      	mov	r1, r3
 800596c:	4804      	ldr	r0, [pc, #16]	; (8005980 <MX_TIM3_Init+0x124>)
 800596e:	f003 fc09 	bl	8009184 <LL_GPIO_Init>

}
 8005972:	bf00      	nop
 8005974:	3750      	adds	r7, #80	; 0x50
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	40000400 	.word	0x40000400
 8005980:	40020400 	.word	0x40020400

08005984 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b094      	sub	sp, #80	; 0x50
 8005988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800598a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	605a      	str	r2, [r3, #4]
 8005994:	609a      	str	r2, [r3, #8]
 8005996:	60da      	str	r2, [r3, #12]
 8005998:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800599a:	f107 031c 	add.w	r3, r7, #28
 800599e:	2220      	movs	r2, #32
 80059a0:	2100      	movs	r1, #0
 80059a2:	4618      	mov	r0, r3
 80059a4:	f004 fc46 	bl	800a234 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059a8:	1d3b      	adds	r3, r7, #4
 80059aa:	2200      	movs	r2, #0
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	605a      	str	r2, [r3, #4]
 80059b0:	609a      	str	r2, [r3, #8]
 80059b2:	60da      	str	r2, [r3, #12]
 80059b4:	611a      	str	r2, [r3, #16]
 80059b6:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 80059b8:	2008      	movs	r0, #8
 80059ba:	f7ff fe67 	bl	800568c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80059be:	2300      	movs	r3, #0
 80059c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80059c2:	2300      	movs	r3, #0
 80059c4:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 41999;
 80059c6:	f24a 430f 	movw	r3, #41999	; 0xa40f
 80059ca:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80059cc:	2300      	movs	r3, #0
 80059ce:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 80059d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80059d4:	4619      	mov	r1, r3
 80059d6:	482b      	ldr	r0, [pc, #172]	; (8005a84 <MX_TIM5_Init+0x100>)
 80059d8:	f003 fe6a 	bl	80096b0 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 80059dc:	4829      	ldr	r0, [pc, #164]	; (8005a84 <MX_TIM5_Init+0x100>)
 80059de:	f7ff fe6d 	bl	80056bc <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 80059e2:	2100      	movs	r1, #0
 80059e4:	4827      	ldr	r0, [pc, #156]	; (8005a84 <MX_TIM5_Init+0x100>)
 80059e6:	f7ff ff01 	bl	80057ec <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 80059ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059ee:	4825      	ldr	r0, [pc, #148]	; (8005a84 <MX_TIM5_Init+0x100>)
 80059f0:	f7ff feb8 	bl	8005764 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80059f4:	2360      	movs	r3, #96	; 0x60
 80059f6:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80059f8:	2300      	movs	r3, #0
 80059fa:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80059fc:	2300      	movs	r3, #0
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005a04:	2300      	movs	r3, #0
 8005a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8005a08:	f107 031c 	add.w	r3, r7, #28
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a12:	481c      	ldr	r0, [pc, #112]	; (8005a84 <MX_TIM5_Init+0x100>)
 8005a14:	f003 fee6 	bl	80097e4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 8005a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a1c:	4819      	ldr	r0, [pc, #100]	; (8005a84 <MX_TIM5_Init+0x100>)
 8005a1e:	f7ff fe5d 	bl	80056dc <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 8005a22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a26:	4817      	ldr	r0, [pc, #92]	; (8005a84 <MX_TIM5_Init+0x100>)
 8005a28:	f7ff fe9c 	bl	8005764 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8005a2c:	f107 031c 	add.w	r3, r7, #28
 8005a30:	461a      	mov	r2, r3
 8005a32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a36:	4813      	ldr	r0, [pc, #76]	; (8005a84 <MX_TIM5_Init+0x100>)
 8005a38:	f003 fed4 	bl	80097e4 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 8005a3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a40:	4810      	ldr	r0, [pc, #64]	; (8005a84 <MX_TIM5_Init+0x100>)
 8005a42:	f7ff fe4b 	bl	80056dc <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8005a46:	2100      	movs	r1, #0
 8005a48:	480e      	ldr	r0, [pc, #56]	; (8005a84 <MX_TIM5_Init+0x100>)
 8005a4a:	f7ff fee4 	bl	8005816 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8005a4e:	480d      	ldr	r0, [pc, #52]	; (8005a84 <MX_TIM5_Init+0x100>)
 8005a50:	f7ff fef4 	bl	800583c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005a54:	2001      	movs	r0, #1
 8005a56:	f7ff fe01 	bl	800565c <LL_AHB1_GRP1_EnableClock>
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8005a5a:	230c      	movs	r3, #12
 8005a5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005a5e:	2302      	movs	r3, #2
 8005a60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8005a6e:	2302      	movs	r3, #2
 8005a70:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a72:	1d3b      	adds	r3, r7, #4
 8005a74:	4619      	mov	r1, r3
 8005a76:	4804      	ldr	r0, [pc, #16]	; (8005a88 <MX_TIM5_Init+0x104>)
 8005a78:	f003 fb84 	bl	8009184 <LL_GPIO_Init>

}
 8005a7c:	bf00      	nop
 8005a7e:	3750      	adds	r7, #80	; 0x50
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40000c00 	.word	0x40000c00
 8005a88:	40020000 	.word	0x40020000

08005a8c <__NVIC_GetPriorityGrouping>:
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a90:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	0a1b      	lsrs	r3, r3, #8
 8005a96:	f003 0307 	and.w	r3, r3, #7
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	e000ed00 	.word	0xe000ed00

08005aa8 <__NVIC_EnableIRQ>:
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	db0b      	blt.n	8005ad2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	f003 021f 	and.w	r2, r3, #31
 8005ac0:	4907      	ldr	r1, [pc, #28]	; (8005ae0 <__NVIC_EnableIRQ+0x38>)
 8005ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	2001      	movs	r0, #1
 8005aca:	fa00 f202 	lsl.w	r2, r0, r2
 8005ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	e000e100 	.word	0xe000e100

08005ae4 <__NVIC_SetPriority>:
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	6039      	str	r1, [r7, #0]
 8005aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	db0a      	blt.n	8005b0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	490c      	ldr	r1, [pc, #48]	; (8005b30 <__NVIC_SetPriority+0x4c>)
 8005afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b02:	0112      	lsls	r2, r2, #4
 8005b04:	b2d2      	uxtb	r2, r2
 8005b06:	440b      	add	r3, r1
 8005b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005b0c:	e00a      	b.n	8005b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	4908      	ldr	r1, [pc, #32]	; (8005b34 <__NVIC_SetPriority+0x50>)
 8005b14:	79fb      	ldrb	r3, [r7, #7]
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	3b04      	subs	r3, #4
 8005b1c:	0112      	lsls	r2, r2, #4
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	440b      	add	r3, r1
 8005b22:	761a      	strb	r2, [r3, #24]
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	e000e100 	.word	0xe000e100
 8005b34:	e000ed00 	.word	0xe000ed00

08005b38 <NVIC_EncodePriority>:
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b089      	sub	sp, #36	; 0x24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f1c3 0307 	rsb	r3, r3, #7
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	bf28      	it	cs
 8005b56:	2304      	movcs	r3, #4
 8005b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	2b06      	cmp	r3, #6
 8005b60:	d902      	bls.n	8005b68 <NVIC_EncodePriority+0x30>
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	3b03      	subs	r3, #3
 8005b66:	e000      	b.n	8005b6a <NVIC_EncodePriority+0x32>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	43da      	mvns	r2, r3
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	401a      	ands	r2, r3
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8a:	43d9      	mvns	r1, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b90:	4313      	orrs	r3, r2
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3724      	adds	r7, #36	; 0x24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
	...

08005ba0 <LL_DMA_SetDataTransferDirection>:
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8005bac:	4a0d      	ldr	r2, [pc, #52]	; (8005be4 <LL_DMA_SetDataTransferDirection+0x44>)
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4413      	add	r3, r2
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005bc0:	4908      	ldr	r1, [pc, #32]	; (8005be4 <LL_DMA_SetDataTransferDirection+0x44>)
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	440b      	add	r3, r1
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	440b      	add	r3, r1
 8005bce:	4619      	mov	r1, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	600b      	str	r3, [r1, #0]
}
 8005bd6:	bf00      	nop
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	0800edcc 	.word	0x0800edcc

08005be8 <LL_DMA_SetMode>:
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8005bf4:	4a0d      	ldr	r2, [pc, #52]	; (8005c2c <LL_DMA_SetMode+0x44>)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4413      	add	r3, r2
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8005c08:	4908      	ldr	r1, [pc, #32]	; (8005c2c <LL_DMA_SetMode+0x44>)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	440b      	add	r3, r1
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	4619      	mov	r1, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	440b      	add	r3, r1
 8005c16:	4619      	mov	r1, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	600b      	str	r3, [r1, #0]
}
 8005c1e:	bf00      	nop
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	0800edcc 	.word	0x0800edcc

08005c30 <LL_DMA_SetPeriphIncMode>:
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8005c3c:	4a0d      	ldr	r2, [pc, #52]	; (8005c74 <LL_DMA_SetPeriphIncMode+0x44>)
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	4413      	add	r3, r2
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	461a      	mov	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4413      	add	r3, r2
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005c50:	4908      	ldr	r1, [pc, #32]	; (8005c74 <LL_DMA_SetPeriphIncMode+0x44>)
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	440b      	add	r3, r1
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	440b      	add	r3, r1
 8005c5e:	4619      	mov	r1, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	600b      	str	r3, [r1, #0]
}
 8005c66:	bf00      	nop
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	0800edcc 	.word	0x0800edcc

08005c78 <LL_DMA_SetMemoryIncMode>:
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8005c84:	4a0d      	ldr	r2, [pc, #52]	; (8005cbc <LL_DMA_SetMemoryIncMode+0x44>)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	4413      	add	r3, r2
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4413      	add	r3, r2
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c98:	4908      	ldr	r1, [pc, #32]	; (8005cbc <LL_DMA_SetMemoryIncMode+0x44>)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	440b      	add	r3, r1
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	440b      	add	r3, r1
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	600b      	str	r3, [r1, #0]
}
 8005cae:	bf00      	nop
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	0800edcc 	.word	0x0800edcc

08005cc0 <LL_DMA_SetPeriphSize>:
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8005ccc:	4a0d      	ldr	r2, [pc, #52]	; (8005d04 <LL_DMA_SetPeriphSize+0x44>)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	4413      	add	r3, r2
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8005ce0:	4908      	ldr	r1, [pc, #32]	; (8005d04 <LL_DMA_SetPeriphSize+0x44>)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	440b      	add	r3, r1
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	4619      	mov	r1, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	440b      	add	r3, r1
 8005cee:	4619      	mov	r1, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	600b      	str	r3, [r1, #0]
}
 8005cf6:	bf00      	nop
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	0800edcc 	.word	0x0800edcc

08005d08 <LL_DMA_SetMemorySize>:
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8005d14:	4a0d      	ldr	r2, [pc, #52]	; (8005d4c <LL_DMA_SetMemorySize+0x44>)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	4413      	add	r3, r2
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4413      	add	r3, r2
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8005d28:	4908      	ldr	r1, [pc, #32]	; (8005d4c <LL_DMA_SetMemorySize+0x44>)
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	440b      	add	r3, r1
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	4619      	mov	r1, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	440b      	add	r3, r1
 8005d36:	4619      	mov	r1, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	600b      	str	r3, [r1, #0]
}
 8005d3e:	bf00      	nop
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	0800edcc 	.word	0x0800edcc

08005d50 <LL_DMA_SetStreamPriorityLevel>:
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8005d5c:	4a0d      	ldr	r2, [pc, #52]	; (8005d94 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	4413      	add	r3, r2
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	461a      	mov	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4413      	add	r3, r2
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d70:	4908      	ldr	r1, [pc, #32]	; (8005d94 <LL_DMA_SetStreamPriorityLevel+0x44>)
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	440b      	add	r3, r1
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	440b      	add	r3, r1
 8005d7e:	4619      	mov	r1, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	600b      	str	r3, [r1, #0]
}
 8005d86:	bf00      	nop
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	0800edcc 	.word	0x0800edcc

08005d98 <LL_DMA_SetChannelSelection>:
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8005da4:	4a0d      	ldr	r2, [pc, #52]	; (8005ddc <LL_DMA_SetChannelSelection+0x44>)
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	4413      	add	r3, r2
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	461a      	mov	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4413      	add	r3, r2
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005db8:	4908      	ldr	r1, [pc, #32]	; (8005ddc <LL_DMA_SetChannelSelection+0x44>)
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	440b      	add	r3, r1
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	440b      	add	r3, r1
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	600b      	str	r3, [r1, #0]
}
 8005dce:	bf00      	nop
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	0800edcc 	.word	0x0800edcc

08005de0 <LL_DMA_DisableFifoMode>:
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8005dea:	4a0c      	ldr	r2, [pc, #48]	; (8005e1c <LL_DMA_DisableFifoMode+0x3c>)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	4413      	add	r3, r2
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	461a      	mov	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4413      	add	r3, r2
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	4908      	ldr	r1, [pc, #32]	; (8005e1c <LL_DMA_DisableFifoMode+0x3c>)
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	440a      	add	r2, r1
 8005e00:	7812      	ldrb	r2, [r2, #0]
 8005e02:	4611      	mov	r1, r2
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	440a      	add	r2, r1
 8005e08:	f023 0304 	bic.w	r3, r3, #4
 8005e0c:	6153      	str	r3, [r2, #20]
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	0800edcc 	.word	0x0800edcc

08005e20 <LL_AHB1_GRP1_EnableClock>:
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8005e28:	4b08      	ldr	r3, [pc, #32]	; (8005e4c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e2c:	4907      	ldr	r1, [pc, #28]	; (8005e4c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8005e34:	4b05      	ldr	r3, [pc, #20]	; (8005e4c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
}
 8005e40:	bf00      	nop
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	40023800 	.word	0x40023800

08005e50 <LL_APB1_GRP1_EnableClock>:
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8005e58:	4b08      	ldr	r3, [pc, #32]	; (8005e7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8005e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e5c:	4907      	ldr	r1, [pc, #28]	; (8005e7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005e64:	4b05      	ldr	r3, [pc, #20]	; (8005e7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8005e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
}
 8005e70:	bf00      	nop
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	40023800 	.word	0x40023800

08005e80 <LL_APB2_GRP1_EnableClock>:
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005e88:	4b08      	ldr	r3, [pc, #32]	; (8005eac <LL_APB2_GRP1_EnableClock+0x2c>)
 8005e8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e8c:	4907      	ldr	r1, [pc, #28]	; (8005eac <LL_APB2_GRP1_EnableClock+0x2c>)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005e94:	4b05      	ldr	r3, [pc, #20]	; (8005eac <LL_APB2_GRP1_EnableClock+0x2c>)
 8005e96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ea0:	bf00      	nop
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	40023800 	.word	0x40023800

08005eb0 <LL_USART_Enable>:
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	60da      	str	r2, [r3, #12]
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <LL_USART_ConfigAsyncMode>:
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	615a      	str	r2, [r3, #20]
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <LL_USART_ConfigHalfDuplexMode>:
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	f023 0222 	bic.w	r2, r3, #34	; 0x22
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	615a      	str	r2, [r3, #20]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	f043 0208 	orr.w	r2, r3, #8
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	615a      	str	r2, [r3, #20]
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <LL_USART_IsActiveFlag_TXE>:
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f44:	2b80      	cmp	r3, #128	; 0x80
 8005f46:	bf0c      	ite	eq
 8005f48:	2301      	moveq	r3, #1
 8005f4a:	2300      	movne	r3, #0
 8005f4c:	b2db      	uxtb	r3, r3
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	460b      	mov	r3, r1
 8005f64:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8005f66:	78fa      	ldrb	r2, [r7, #3]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	605a      	str	r2, [r3, #4]
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08e      	sub	sp, #56	; 0x38
 8005f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005f7e:	f107 031c 	add.w	r3, r7, #28
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	605a      	str	r2, [r3, #4]
 8005f88:	609a      	str	r2, [r3, #8]
 8005f8a:	60da      	str	r2, [r3, #12]
 8005f8c:	611a      	str	r2, [r3, #16]
 8005f8e:	615a      	str	r2, [r3, #20]
 8005f90:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f92:	1d3b      	adds	r3, r7, #4
 8005f94:	2200      	movs	r2, #0
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	605a      	str	r2, [r3, #4]
 8005f9a:	609a      	str	r2, [r3, #8]
 8005f9c:	60da      	str	r2, [r3, #12]
 8005f9e:	611a      	str	r2, [r3, #16]
 8005fa0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8005fa2:	2010      	movs	r0, #16
 8005fa4:	f7ff ff6c 	bl	8005e80 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005fa8:	2001      	movs	r0, #1
 8005faa:	f7ff ff39 	bl	8005e20 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8005fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8005fc4:	2307      	movs	r3, #7
 8005fc6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fc8:	1d3b      	adds	r3, r7, #4
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4817      	ldr	r0, [pc, #92]	; (800602c <MX_USART1_UART_Init+0xb4>)
 8005fce:	f003 f8d9 	bl	8009184 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005fd2:	f7ff fd5b 	bl	8005a8c <__NVIC_GetPriorityGrouping>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2100      	movs	r1, #0
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7ff fdab 	bl	8005b38 <NVIC_EncodePriority>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	2025      	movs	r0, #37	; 0x25
 8005fe8:	f7ff fd7c 	bl	8005ae4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8005fec:	2025      	movs	r0, #37	; 0x25
 8005fee:	f7ff fd5b 	bl	8005aa8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 100000;
 8005ff2:	4b0f      	ldr	r3, [pc, #60]	; (8006030 <MX_USART1_UART_Init+0xb8>)
 8005ff4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_2;
 8005ffa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ffe:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8006000:	2300      	movs	r3, #0
 8006002:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8006004:	230c      	movs	r3, #12
 8006006:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8006008:	2300      	movs	r3, #0
 800600a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 800600c:	f107 031c 	add.w	r3, r7, #28
 8006010:	4619      	mov	r1, r3
 8006012:	4808      	ldr	r0, [pc, #32]	; (8006034 <MX_USART1_UART_Init+0xbc>)
 8006014:	f004 f832 	bl	800a07c <LL_USART_Init>
  LL_USART_Enable(USART1);
 8006018:	4806      	ldr	r0, [pc, #24]	; (8006034 <MX_USART1_UART_Init+0xbc>)
 800601a:	f7ff ff49 	bl	8005eb0 <LL_USART_Enable>
  LL_USART_ConfigHalfDuplexMode(USART1);
 800601e:	4805      	ldr	r0, [pc, #20]	; (8006034 <MX_USART1_UART_Init+0xbc>)
 8006020:	f7ff ff6c 	bl	8005efc <LL_USART_ConfigHalfDuplexMode>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006024:	bf00      	nop
 8006026:	3738      	adds	r7, #56	; 0x38
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	40020000 	.word	0x40020000
 8006030:	000186a0 	.word	0x000186a0
 8006034:	40011000 	.word	0x40011000

08006038 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08e      	sub	sp, #56	; 0x38
 800603c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800603e:	f107 031c 	add.w	r3, r7, #28
 8006042:	2200      	movs	r2, #0
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	605a      	str	r2, [r3, #4]
 8006048:	609a      	str	r2, [r3, #8]
 800604a:	60da      	str	r2, [r3, #12]
 800604c:	611a      	str	r2, [r3, #16]
 800604e:	615a      	str	r2, [r3, #20]
 8006050:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006052:	1d3b      	adds	r3, r7, #4
 8006054:	2200      	movs	r2, #0
 8006056:	601a      	str	r2, [r3, #0]
 8006058:	605a      	str	r2, [r3, #4]
 800605a:	609a      	str	r2, [r3, #8]
 800605c:	60da      	str	r2, [r3, #12]
 800605e:	611a      	str	r2, [r3, #16]
 8006060:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8006062:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8006066:	f7ff fef3 	bl	8005e50 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800606a:	2002      	movs	r0, #2
 800606c:	f7ff fed8 	bl	8005e20 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = UART3_GPS_TX_Pin|UART3_GPS_RX_Pin;
 8006070:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006074:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006076:	2302      	movs	r3, #2
 8006078:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800607a:	2303      	movs	r3, #3
 800607c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800607e:	2300      	movs	r3, #0
 8006080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8006086:	2307      	movs	r3, #7
 8006088:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800608a:	1d3b      	adds	r3, r7, #4
 800608c:	4619      	mov	r1, r3
 800608e:	4830      	ldr	r0, [pc, #192]	; (8006150 <MX_USART3_UART_Init+0x118>)
 8006090:	f003 f878 	bl	8009184 <LL_GPIO_Init>

  /* USART3 DMA Init */

  /* USART3_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_1, LL_DMA_CHANNEL_4);
 8006094:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006098:	2101      	movs	r1, #1
 800609a:	482e      	ldr	r0, [pc, #184]	; (8006154 <MX_USART3_UART_Init+0x11c>)
 800609c:	f7ff fe7c 	bl	8005d98 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80060a0:	2200      	movs	r2, #0
 80060a2:	2101      	movs	r1, #1
 80060a4:	482b      	ldr	r0, [pc, #172]	; (8006154 <MX_USART3_UART_Init+0x11c>)
 80060a6:	f7ff fd7b 	bl	8005ba0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 80060aa:	2200      	movs	r2, #0
 80060ac:	2101      	movs	r1, #1
 80060ae:	4829      	ldr	r0, [pc, #164]	; (8006154 <MX_USART3_UART_Init+0x11c>)
 80060b0:	f7ff fe4e 	bl	8005d50 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 80060b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060b8:	2101      	movs	r1, #1
 80060ba:	4826      	ldr	r0, [pc, #152]	; (8006154 <MX_USART3_UART_Init+0x11c>)
 80060bc:	f7ff fd94 	bl	8005be8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 80060c0:	2200      	movs	r2, #0
 80060c2:	2101      	movs	r1, #1
 80060c4:	4823      	ldr	r0, [pc, #140]	; (8006154 <MX_USART3_UART_Init+0x11c>)
 80060c6:	f7ff fdb3 	bl	8005c30 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 80060ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060ce:	2101      	movs	r1, #1
 80060d0:	4820      	ldr	r0, [pc, #128]	; (8006154 <MX_USART3_UART_Init+0x11c>)
 80060d2:	f7ff fdd1 	bl	8005c78 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 80060d6:	2200      	movs	r2, #0
 80060d8:	2101      	movs	r1, #1
 80060da:	481e      	ldr	r0, [pc, #120]	; (8006154 <MX_USART3_UART_Init+0x11c>)
 80060dc:	f7ff fdf0 	bl	8005cc0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 80060e0:	2200      	movs	r2, #0
 80060e2:	2101      	movs	r1, #1
 80060e4:	481b      	ldr	r0, [pc, #108]	; (8006154 <MX_USART3_UART_Init+0x11c>)
 80060e6:	f7ff fe0f 	bl	8005d08 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_1);
 80060ea:	2101      	movs	r1, #1
 80060ec:	4819      	ldr	r0, [pc, #100]	; (8006154 <MX_USART3_UART_Init+0x11c>)
 80060ee:	f7ff fe77 	bl	8005de0 <LL_DMA_DisableFifoMode>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80060f2:	f7ff fccb 	bl	8005a8c <__NVIC_GetPriorityGrouping>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2200      	movs	r2, #0
 80060fa:	2100      	movs	r1, #0
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7ff fd1b 	bl	8005b38 <NVIC_EncodePriority>
 8006102:	4603      	mov	r3, r0
 8006104:	4619      	mov	r1, r3
 8006106:	2027      	movs	r0, #39	; 0x27
 8006108:	f7ff fcec 	bl	8005ae4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 800610c:	2027      	movs	r0, #39	; 0x27
 800610e:	f7ff fccb 	bl	8005aa8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */


  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8006112:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8006116:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8006118:	2300      	movs	r3, #0
 800611a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800611c:	2300      	movs	r3, #0
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8006120:	2300      	movs	r3, #0
 8006122:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8006124:	230c      	movs	r3, #12
 8006126:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8006128:	2300      	movs	r3, #0
 800612a:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800612c:	2300      	movs	r3, #0
 800612e:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8006130:	f107 031c 	add.w	r3, r7, #28
 8006134:	4619      	mov	r1, r3
 8006136:	4808      	ldr	r0, [pc, #32]	; (8006158 <MX_USART3_UART_Init+0x120>)
 8006138:	f003 ffa0 	bl	800a07c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800613c:	4806      	ldr	r0, [pc, #24]	; (8006158 <MX_USART3_UART_Init+0x120>)
 800613e:	f7ff fec7 	bl	8005ed0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8006142:	4805      	ldr	r0, [pc, #20]	; (8006158 <MX_USART3_UART_Init+0x120>)
 8006144:	f7ff feb4 	bl	8005eb0 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006148:	bf00      	nop
 800614a:	3738      	adds	r7, #56	; 0x38
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	40020400 	.word	0x40020400
 8006154:	40026000 	.word	0x40026000
 8006158:	40004800 	.word	0x40004800

0800615c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8006160:	4b11      	ldr	r3, [pc, #68]	; (80061a8 <MX_USART6_UART_Init+0x4c>)
 8006162:	4a12      	ldr	r2, [pc, #72]	; (80061ac <MX_USART6_UART_Init+0x50>)
 8006164:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8006166:	4b10      	ldr	r3, [pc, #64]	; (80061a8 <MX_USART6_UART_Init+0x4c>)
 8006168:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800616c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800616e:	4b0e      	ldr	r3, [pc, #56]	; (80061a8 <MX_USART6_UART_Init+0x4c>)
 8006170:	2200      	movs	r2, #0
 8006172:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8006174:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <MX_USART6_UART_Init+0x4c>)
 8006176:	2200      	movs	r2, #0
 8006178:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800617a:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <MX_USART6_UART_Init+0x4c>)
 800617c:	2200      	movs	r2, #0
 800617e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8006180:	4b09      	ldr	r3, [pc, #36]	; (80061a8 <MX_USART6_UART_Init+0x4c>)
 8006182:	220c      	movs	r2, #12
 8006184:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006186:	4b08      	ldr	r3, [pc, #32]	; (80061a8 <MX_USART6_UART_Init+0x4c>)
 8006188:	2200      	movs	r2, #0
 800618a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800618c:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <MX_USART6_UART_Init+0x4c>)
 800618e:	2200      	movs	r2, #0
 8006190:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8006192:	4805      	ldr	r0, [pc, #20]	; (80061a8 <MX_USART6_UART_Init+0x4c>)
 8006194:	f002 f906 	bl	80083a4 <HAL_UART_Init>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800619e:	f7fe fd77 	bl	8004c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80061a2:	bf00      	nop
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20000c4c 	.word	0x20000c4c
 80061ac:	40011400 	.word	0x40011400

080061b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08a      	sub	sp, #40	; 0x28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061b8:	f107 0314 	add.w	r3, r7, #20
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	605a      	str	r2, [r3, #4]
 80061c2:	609a      	str	r2, [r3, #8]
 80061c4:	60da      	str	r2, [r3, #12]
 80061c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a1d      	ldr	r2, [pc, #116]	; (8006244 <HAL_UART_MspInit+0x94>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d133      	bne.n	800623a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80061d2:	2300      	movs	r3, #0
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	4b1c      	ldr	r3, [pc, #112]	; (8006248 <HAL_UART_MspInit+0x98>)
 80061d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061da:	4a1b      	ldr	r2, [pc, #108]	; (8006248 <HAL_UART_MspInit+0x98>)
 80061dc:	f043 0320 	orr.w	r3, r3, #32
 80061e0:	6453      	str	r3, [r2, #68]	; 0x44
 80061e2:	4b19      	ldr	r3, [pc, #100]	; (8006248 <HAL_UART_MspInit+0x98>)
 80061e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e6:	f003 0320 	and.w	r3, r3, #32
 80061ea:	613b      	str	r3, [r7, #16]
 80061ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061ee:	2300      	movs	r3, #0
 80061f0:	60fb      	str	r3, [r7, #12]
 80061f2:	4b15      	ldr	r3, [pc, #84]	; (8006248 <HAL_UART_MspInit+0x98>)
 80061f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f6:	4a14      	ldr	r2, [pc, #80]	; (8006248 <HAL_UART_MspInit+0x98>)
 80061f8:	f043 0304 	orr.w	r3, r3, #4
 80061fc:	6313      	str	r3, [r2, #48]	; 0x30
 80061fe:	4b12      	ldr	r3, [pc, #72]	; (8006248 <HAL_UART_MspInit+0x98>)
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800620a:	23c0      	movs	r3, #192	; 0xc0
 800620c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800620e:	2302      	movs	r3, #2
 8006210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006212:	2300      	movs	r3, #0
 8006214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006216:	2303      	movs	r3, #3
 8006218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800621a:	2308      	movs	r3, #8
 800621c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800621e:	f107 0314 	add.w	r3, r7, #20
 8006222:	4619      	mov	r1, r3
 8006224:	4809      	ldr	r0, [pc, #36]	; (800624c <HAL_UART_MspInit+0x9c>)
 8006226:	f001 feed 	bl	8008004 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800622a:	2200      	movs	r2, #0
 800622c:	2100      	movs	r1, #0
 800622e:	2047      	movs	r0, #71	; 0x47
 8006230:	f001 f879 	bl	8007326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006234:	2047      	movs	r0, #71	; 0x47
 8006236:	f001 f892 	bl	800735e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800623a:	bf00      	nop
 800623c:	3728      	adds	r7, #40	; 0x28
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	40011400 	.word	0x40011400
 8006248:	40023800 	.word	0x40023800
 800624c:	40020800 	.word	0x40020800

08006250 <_write>:
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char* p, int len)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 800625c:	2300      	movs	r3, #0
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	e011      	b.n	8006286 <_write+0x36>
	{
		LL_USART_TransmitData8(USART6, *(p+i));
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	4413      	add	r3, r2
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	4619      	mov	r1, r3
 800626c:	480a      	ldr	r0, [pc, #40]	; (8006298 <_write+0x48>)
 800626e:	f7ff fe74 	bl	8005f5a <LL_USART_TransmitData8>
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8006272:	bf00      	nop
 8006274:	4808      	ldr	r0, [pc, #32]	; (8006298 <_write+0x48>)
 8006276:	f7ff fe5d 	bl	8005f34 <LL_USART_IsActiveFlag_TXE>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0f9      	beq.n	8006274 <_write+0x24>
	for(int i=0;i<len;i++)
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	3301      	adds	r3, #1
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	429a      	cmp	r2, r3
 800628c:	dbe9      	blt.n	8006262 <_write+0x12>
//		usDelay(100);	// 문자 1개 출력당 약 100us 소요, Float, int형 차이 없음
	}
	return len;
 800628e:	687b      	ldr	r3, [r7, #4]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	40011400 	.word	0x40011400

0800629c <USART_Transmit>:

void USART_Transmit(USART_TypeDef *USARTx, uint8_t * data, uint16_t length){
 800629c:	b580      	push	{r7, lr}
 800629e:	b086      	sub	sp, #24
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	4613      	mov	r3, r2
 80062a8:	80fb      	strh	r3, [r7, #6]
    uint16_t i=0;
 80062aa:	2300      	movs	r3, #0
 80062ac:	82fb      	strh	r3, [r7, #22]
    for(i=0;i<length;i++){
 80062ae:	2300      	movs	r3, #0
 80062b0:	82fb      	strh	r3, [r7, #22]
 80062b2:	e011      	b.n	80062d8 <USART_Transmit+0x3c>
        LL_USART_TransmitData8(USARTx,*(data+i));
 80062b4:	8afb      	ldrh	r3, [r7, #22]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	4413      	add	r3, r2
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	4619      	mov	r1, r3
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f7ff fe4b 	bl	8005f5a <LL_USART_TransmitData8>
        while(!LL_USART_IsActiveFlag_TXE(USARTx));
 80062c4:	bf00      	nop
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f7ff fe34 	bl	8005f34 <LL_USART_IsActiveFlag_TXE>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d0f9      	beq.n	80062c6 <USART_Transmit+0x2a>
    for(i=0;i<length;i++){
 80062d2:	8afb      	ldrh	r3, [r7, #22]
 80062d4:	3301      	adds	r3, #1
 80062d6:	82fb      	strh	r3, [r7, #22]
 80062d8:	8afa      	ldrh	r2, [r7, #22]
 80062da:	88fb      	ldrh	r3, [r7, #6]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d3e9      	bcc.n	80062b4 <USART_Transmit+0x18>
    }
}
 80062e0:	bf00      	nop
 80062e2:	bf00      	nop
 80062e4:	3718      	adds	r7, #24
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <ReceivePacket>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */
static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 80062f8:	2300      	movs	r3, #0
 80062fa:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1;

  *p_length = 0;
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2200      	movs	r2, #0
 8006300:	601a      	str	r2, [r3, #0]
  huart6.RxState = HAL_UART_STATE_READY;
 8006302:	4b61      	ldr	r3, [pc, #388]	; (8006488 <ReceivePacket+0x19c>)
 8006304:	2220      	movs	r2, #32
 8006306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  status = HAL_UART_Receive(&huart6, &char1, 1, timeout);
 800630a:	f107 0113 	add.w	r1, r7, #19
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	485d      	ldr	r0, [pc, #372]	; (8006488 <ReceivePacket+0x19c>)
 8006314:	f002 f925 	bl	8008562 <HAL_UART_Receive>
 8006318:	4603      	mov	r3, r0
 800631a:	76fb      	strb	r3, [r7, #27]

  if (status == HAL_OK)
 800631c:	7efb      	ldrb	r3, [r7, #27]
 800631e:	2b00      	cmp	r3, #0
 8006320:	f040 80aa 	bne.w	8006478 <ReceivePacket+0x18c>
  {
    switch (char1)
 8006324:	7cfb      	ldrb	r3, [r7, #19]
 8006326:	2b61      	cmp	r3, #97	; 0x61
 8006328:	d059      	beq.n	80063de <ReceivePacket+0xf2>
 800632a:	2b61      	cmp	r3, #97	; 0x61
 800632c:	dc5a      	bgt.n	80063e4 <ReceivePacket+0xf8>
 800632e:	2b18      	cmp	r3, #24
 8006330:	dc38      	bgt.n	80063a4 <ReceivePacket+0xb8>
 8006332:	2b00      	cmp	r3, #0
 8006334:	dd56      	ble.n	80063e4 <ReceivePacket+0xf8>
 8006336:	3b01      	subs	r3, #1
 8006338:	2b17      	cmp	r3, #23
 800633a:	d853      	bhi.n	80063e4 <ReceivePacket+0xf8>
 800633c:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <ReceivePacket+0x58>)
 800633e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006342:	bf00      	nop
 8006344:	080063ab 	.word	0x080063ab
 8006348:	080063b1 	.word	0x080063b1
 800634c:	080063e5 	.word	0x080063e5
 8006350:	080063eb 	.word	0x080063eb
 8006354:	080063e5 	.word	0x080063e5
 8006358:	080063e5 	.word	0x080063e5
 800635c:	080063e5 	.word	0x080063e5
 8006360:	080063e5 	.word	0x080063e5
 8006364:	080063e5 	.word	0x080063e5
 8006368:	080063e5 	.word	0x080063e5
 800636c:	080063e5 	.word	0x080063e5
 8006370:	080063e5 	.word	0x080063e5
 8006374:	080063e5 	.word	0x080063e5
 8006378:	080063e5 	.word	0x080063e5
 800637c:	080063e5 	.word	0x080063e5
 8006380:	080063e5 	.word	0x080063e5
 8006384:	080063e5 	.word	0x080063e5
 8006388:	080063e5 	.word	0x080063e5
 800638c:	080063e5 	.word	0x080063e5
 8006390:	080063e5 	.word	0x080063e5
 8006394:	080063e5 	.word	0x080063e5
 8006398:	080063e5 	.word	0x080063e5
 800639c:	080063e5 	.word	0x080063e5
 80063a0:	080063b9 	.word	0x080063b9
 80063a4:	2b41      	cmp	r3, #65	; 0x41
 80063a6:	d01a      	beq.n	80063de <ReceivePacket+0xf2>
 80063a8:	e01c      	b.n	80063e4 <ReceivePacket+0xf8>
    {
      case SOH:
        packet_size = PACKET_SIZE;
 80063aa:	2380      	movs	r3, #128	; 0x80
 80063ac:	61fb      	str	r3, [r7, #28]
        break;
 80063ae:	e01d      	b.n	80063ec <ReceivePacket+0x100>
      case STX:
        packet_size = PACKET_1K_SIZE;
 80063b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063b4:	61fb      	str	r3, [r7, #28]
        break;
 80063b6:	e019      	b.n	80063ec <ReceivePacket+0x100>
      case EOT:
        break;
      case CA:
        if ((HAL_UART_Receive(&huart6, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 80063b8:	f107 0113 	add.w	r1, r7, #19
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	4831      	ldr	r0, [pc, #196]	; (8006488 <ReceivePacket+0x19c>)
 80063c2:	f002 f8ce 	bl	8008562 <HAL_UART_Receive>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d105      	bne.n	80063d8 <ReceivePacket+0xec>
 80063cc:	7cfb      	ldrb	r3, [r7, #19]
 80063ce:	2b18      	cmp	r3, #24
 80063d0:	d102      	bne.n	80063d8 <ReceivePacket+0xec>
        {
          packet_size = 2;
 80063d2:	2302      	movs	r3, #2
 80063d4:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          status = HAL_ERROR;
        }
        break;
 80063d6:	e009      	b.n	80063ec <ReceivePacket+0x100>
          status = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	76fb      	strb	r3, [r7, #27]
        break;
 80063dc:	e006      	b.n	80063ec <ReceivePacket+0x100>
      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 80063de:	2302      	movs	r3, #2
 80063e0:	76fb      	strb	r3, [r7, #27]
        break;
 80063e2:	e003      	b.n	80063ec <ReceivePacket+0x100>
      default:
        status = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	76fb      	strb	r3, [r7, #27]
        break;
 80063e8:	e000      	b.n	80063ec <ReceivePacket+0x100>
        break;
 80063ea:	bf00      	nop
    }
    *p_data = char1;
 80063ec:	7cfa      	ldrb	r2, [r7, #19]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	2b7f      	cmp	r3, #127	; 0x7f
 80063f6:	d93f      	bls.n	8006478 <ReceivePacket+0x18c>
    {
      status = HAL_UART_Receive(&huart6, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	1c99      	adds	r1, r3, #2
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3304      	adds	r3, #4
 8006402:	b29a      	uxth	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4820      	ldr	r0, [pc, #128]	; (8006488 <ReceivePacket+0x19c>)
 8006408:	f002 f8ab 	bl	8008562 <HAL_UART_Receive>
 800640c:	4603      	mov	r3, r0
 800640e:	76fb      	strb	r3, [r7, #27]

      /* Simple packet sanity check */
      if (status == HAL_OK )
 8006410:	7efb      	ldrb	r3, [r7, #27]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d12e      	bne.n	8006474 <ReceivePacket+0x188>
      {
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3302      	adds	r3, #2
 800641a:	781a      	ldrb	r2, [r3, #0]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3303      	adds	r3, #3
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	43db      	mvns	r3, r3
 8006424:	b2db      	uxtb	r3, r3
 8006426:	429a      	cmp	r2, r3
 8006428:	d004      	beq.n	8006434 <ReceivePacket+0x148>
        {
          packet_size = 0;
 800642a:	2300      	movs	r3, #0
 800642c:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	76fb      	strb	r3, [r7, #27]
 8006432:	e021      	b.n	8006478 <ReceivePacket+0x18c>
        }
        else
        {
          /* Check packet CRC */
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	3304      	adds	r3, #4
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	021b      	lsls	r3, r3, #8
 8006440:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	3305      	adds	r3, #5
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	4413      	add	r3, r2
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	461a      	mov	r2, r3
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	4413      	add	r3, r2
 8006452:	617b      	str	r3, [r7, #20]
          if (Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3304      	adds	r3, #4
 8006458:	69f9      	ldr	r1, [r7, #28]
 800645a:	4618      	mov	r0, r3
 800645c:	f000 f84a 	bl	80064f4 <Cal_CRC16>
 8006460:	4603      	mov	r3, r0
 8006462:	461a      	mov	r2, r3
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	4293      	cmp	r3, r2
 8006468:	d006      	beq.n	8006478 <ReceivePacket+0x18c>
          {
            packet_size = 0;
 800646a:	2300      	movs	r3, #0
 800646c:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	76fb      	strb	r3, [r7, #27]
 8006472:	e001      	b.n	8006478 <ReceivePacket+0x18c>
          }
        }
      }
      else
      {
        packet_size = 0;
 8006474:	2300      	movs	r3, #0
 8006476:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	69fa      	ldr	r2, [r7, #28]
 800647c:	601a      	str	r2, [r3, #0]
  return status;
 800647e:	7efb      	ldrb	r3, [r7, #27]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3720      	adds	r7, #32
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20000c4c 	.word	0x20000c4c

0800648c <UpdateCRC16>:
  * @param  crc_in input value 
  * @param  input byte
  * @retval None
  */
uint16_t UpdateCRC16(uint16_t crc_in, uint8_t byte)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	4603      	mov	r3, r0
 8006494:	460a      	mov	r2, r1
 8006496:	80fb      	strh	r3, [r7, #6]
 8006498:	4613      	mov	r3, r2
 800649a:	717b      	strb	r3, [r7, #5]
  uint32_t crc = crc_in;
 800649c:	88fb      	ldrh	r3, [r7, #6]
 800649e:	60fb      	str	r3, [r7, #12]
  uint32_t in = byte | 0x100;
 80064a0:	797b      	ldrb	r3, [r7, #5]
 80064a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a6:	60bb      	str	r3, [r7, #8]

  do
  {
    crc <<= 1;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	60fb      	str	r3, [r7, #12]
    in <<= 1;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	60bb      	str	r3, [r7, #8]
    if(in & 0x100)
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <UpdateCRC16+0x38>
      ++crc;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3301      	adds	r3, #1
 80064c2:	60fb      	str	r3, [r7, #12]
    if(crc & 0x10000)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d005      	beq.n	80064da <UpdateCRC16+0x4e>
      crc ^= 0x1021;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 80064d4:	f083 0301 	eor.w	r3, r3, #1
 80064d8:	60fb      	str	r3, [r7, #12]
  }
  
  while(!(in & 0x10000));
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d0e1      	beq.n	80064a8 <UpdateCRC16+0x1c>

  return crc & 0xffffu;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	b29b      	uxth	r3, r3
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <Cal_CRC16>:
  * @param  data
  * @param  length
  * @retval None
  */
uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]
  const uint8_t* dataEnd = p_data+size;
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	4413      	add	r3, r2
 8006508:	60bb      	str	r3, [r7, #8]

  while(p_data < dataEnd)
 800650a:	e00a      	b.n	8006522 <Cal_CRC16+0x2e>
    crc = UpdateCRC16(crc, *p_data++);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	b298      	uxth	r0, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	607a      	str	r2, [r7, #4]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	4619      	mov	r1, r3
 800651a:	f7ff ffb7 	bl	800648c <UpdateCRC16>
 800651e:	4603      	mov	r3, r0
 8006520:	60fb      	str	r3, [r7, #12]
  while(p_data < dataEnd)
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	429a      	cmp	r2, r3
 8006528:	d3f0      	bcc.n	800650c <Cal_CRC16+0x18>
 
  crc = UpdateCRC16(crc, 0);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	b29b      	uxth	r3, r3
 800652e:	2100      	movs	r1, #0
 8006530:	4618      	mov	r0, r3
 8006532:	f7ff ffab 	bl	800648c <UpdateCRC16>
 8006536:	4603      	mov	r3, r0
 8006538:	60fb      	str	r3, [r7, #12]
  crc = UpdateCRC16(crc, 0);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	b29b      	uxth	r3, r3
 800653e:	2100      	movs	r1, #0
 8006540:	4618      	mov	r0, r3
 8006542:	f7ff ffa3 	bl	800648c <UpdateCRC16>
 8006546:	4603      	mov	r3, r0
 8006548:	60fb      	str	r3, [r7, #12]

  return crc&0xffffu;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	b29b      	uxth	r3, r3
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <Ymodem_Receive>:
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b092      	sub	sp, #72	; 0x48
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	643b      	str	r3, [r7, #64]	; 0x40
 8006564:	2300      	movs	r3, #0
 8006566:	63bb      	str	r3, [r7, #56]	; 0x38
 8006568:	2300      	movs	r3, #0
 800656a:	637b      	str	r3, [r7, #52]	; 0x34
 // uint32_t flashdestination;
  uint32_t ramsource, filesize;
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH], tmp, packets_received;
  COM_StatusTypeDef result = COM_OK;
 800656c:	2300      	movs	r3, #0
 800656e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  /* Initialize flashdestination variable */
  flashdestination = APPLICATION_ADDRESS;
 8006572:	4b87      	ldr	r3, [pc, #540]	; (8006790 <Ymodem_Receive+0x238>)
 8006574:	4a87      	ldr	r2, [pc, #540]	; (8006794 <Ymodem_Receive+0x23c>)
 8006576:	601a      	str	r2, [r3, #0]

  while ((session_done == 0) && (result == COM_OK))
 8006578:	e0fb      	b.n	8006772 <Ymodem_Receive+0x21a>
  {
    packets_received = 0;
 800657a:	2300      	movs	r3, #0
 800657c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    file_done = 0;
 8006580:	2300      	movs	r3, #0
 8006582:	63fb      	str	r3, [r7, #60]	; 0x3c
    while ((file_done == 0) && (result == COM_OK))
 8006584:	e0ed      	b.n	8006762 <Ymodem_Receive+0x20a>
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 8006586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800658a:	f242 7210 	movw	r2, #10000	; 0x2710
 800658e:	4619      	mov	r1, r3
 8006590:	4881      	ldr	r0, [pc, #516]	; (8006798 <Ymodem_Receive+0x240>)
 8006592:	f7ff feab 	bl	80062ec <ReceivePacket>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d003      	beq.n	80065a4 <Ymodem_Receive+0x4c>
 800659c:	2b02      	cmp	r3, #2
 800659e:	f000 80c2 	beq.w	8006726 <Ymodem_Receive+0x1ce>
 80065a2:	e0ca      	b.n	800673a <Ymodem_Receive+0x1e2>
      {
        case HAL_OK:
          errors = 0;
 80065a4:	2300      	movs	r3, #0
 80065a6:	63bb      	str	r3, [r7, #56]	; 0x38
          switch (packet_length)
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d008      	beq.n	80065c0 <Ymodem_Receive+0x68>
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d10c      	bne.n	80065cc <Ymodem_Receive+0x74>
          {
            case 2:
              /* Abort by sender */
              Serial_PutByte(ACK);
 80065b2:	2006      	movs	r0, #6
 80065b4:	f7fd fbb2 	bl	8003d1c <Serial_PutByte>
              result = COM_ABORT;
 80065b8:	2302      	movs	r3, #2
 80065ba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
              break;
 80065be:	e0b1      	b.n	8006724 <Ymodem_Receive+0x1cc>
            case 0:
              /* End of transmission */
              Serial_PutByte(ACK);
 80065c0:	2006      	movs	r0, #6
 80065c2:	f7fd fbab 	bl	8003d1c <Serial_PutByte>
              file_done = 1;
 80065c6:	2301      	movs	r3, #1
 80065c8:	63fb      	str	r3, [r7, #60]	; 0x3c
              break;
 80065ca:	e0ab      	b.n	8006724 <Ymodem_Receive+0x1cc>
            default:
              /* Normal packet */
              if (aPacketData[PACKET_NUMBER_INDEX] != packets_received)
 80065cc:	4b72      	ldr	r3, [pc, #456]	; (8006798 <Ymodem_Receive+0x240>)
 80065ce:	789b      	ldrb	r3, [r3, #2]
 80065d0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d003      	beq.n	80065e0 <Ymodem_Receive+0x88>
              {
                Serial_PutByte(NAK);
 80065d8:	2015      	movs	r0, #21
 80065da:	f7fd fb9f 	bl	8003d1c <Serial_PutByte>
                  }
                }
                packets_received ++;
                session_begin = 1;
              }
              break;
 80065de:	e0a0      	b.n	8006722 <Ymodem_Receive+0x1ca>
                if (packets_received == 0)
 80065e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d175      	bne.n	80066d4 <Ymodem_Receive+0x17c>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 80065e8:	4b6b      	ldr	r3, [pc, #428]	; (8006798 <Ymodem_Receive+0x240>)
 80065ea:	791b      	ldrb	r3, [r3, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d069      	beq.n	80066c4 <Ymodem_Receive+0x16c>
                    i = 0;
 80065f0:	2300      	movs	r3, #0
 80065f2:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 80065f4:	4b69      	ldr	r3, [pc, #420]	; (800679c <Ymodem_Receive+0x244>)
 80065f6:	633b      	str	r3, [r7, #48]	; 0x30
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 80065f8:	e008      	b.n	800660c <Ymodem_Receive+0xb4>
                      aFileName[i++] = *file_ptr++;
 80065fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065fc:	1c53      	adds	r3, r2, #1
 80065fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006602:	1c59      	adds	r1, r3, #1
 8006604:	6479      	str	r1, [r7, #68]	; 0x44
 8006606:	7811      	ldrb	r1, [r2, #0]
 8006608:	4a65      	ldr	r2, [pc, #404]	; (80067a0 <Ymodem_Receive+0x248>)
 800660a:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 800660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <Ymodem_Receive+0xc2>
 8006614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006616:	2b3f      	cmp	r3, #63	; 0x3f
 8006618:	d9ef      	bls.n	80065fa <Ymodem_Receive+0xa2>
                    aFileName[i++] = '\0';
 800661a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800661c:	1c5a      	adds	r2, r3, #1
 800661e:	647a      	str	r2, [r7, #68]	; 0x44
 8006620:	4a5f      	ldr	r2, [pc, #380]	; (80067a0 <Ymodem_Receive+0x248>)
 8006622:	2100      	movs	r1, #0
 8006624:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 8006626:	2300      	movs	r3, #0
 8006628:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr ++;
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	3301      	adds	r3, #1
 800662e:	633b      	str	r3, [r7, #48]	; 0x30
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 8006630:	e00a      	b.n	8006648 <Ymodem_Receive+0xf0>
                      file_size[i++] = *file_ptr++;
 8006632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006634:	1c53      	adds	r3, r2, #1
 8006636:	633b      	str	r3, [r7, #48]	; 0x30
 8006638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800663a:	1c59      	adds	r1, r3, #1
 800663c:	6479      	str	r1, [r7, #68]	; 0x44
 800663e:	7812      	ldrb	r2, [r2, #0]
 8006640:	3348      	adds	r3, #72	; 0x48
 8006642:	443b      	add	r3, r7
 8006644:	f803 2c38 	strb.w	r2, [r3, #-56]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b20      	cmp	r3, #32
 800664e:	d002      	beq.n	8006656 <Ymodem_Receive+0xfe>
 8006650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006652:	2b0f      	cmp	r3, #15
 8006654:	d9ed      	bls.n	8006632 <Ymodem_Receive+0xda>
                    file_size[i++] = '\0';
 8006656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	647a      	str	r2, [r7, #68]	; 0x44
 800665c:	3348      	adds	r3, #72	; 0x48
 800665e:	443b      	add	r3, r7
 8006660:	2200      	movs	r2, #0
 8006662:	f803 2c38 	strb.w	r2, [r3, #-56]
                    Str2Int(file_size, &filesize);
 8006666:	f107 0220 	add.w	r2, r7, #32
 800666a:	f107 0310 	add.w	r3, r7, #16
 800666e:	4611      	mov	r1, r2
 8006670:	4618      	mov	r0, r3
 8006672:	f7fd fa43 	bl	8003afc <Str2Int>
                    if (*p_size > (USER_FLASH_SIZE + 1))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a4a      	ldr	r2, [pc, #296]	; (80067a4 <Ymodem_Receive+0x24c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d914      	bls.n	80066aa <Ymodem_Receive+0x152>
                      tmp = CA;
 8006680:	2318      	movs	r3, #24
 8006682:	73fb      	strb	r3, [r7, #15]
                      HAL_UART_Transmit(&huart6, &tmp, 1, NAK_TIMEOUT);
 8006684:	f107 010f 	add.w	r1, r7, #15
 8006688:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800668c:	2201      	movs	r2, #1
 800668e:	4846      	ldr	r0, [pc, #280]	; (80067a8 <Ymodem_Receive+0x250>)
 8006690:	f001 fed5 	bl	800843e <HAL_UART_Transmit>
                      HAL_UART_Transmit(&huart6, &tmp, 1, NAK_TIMEOUT);
 8006694:	f107 010f 	add.w	r1, r7, #15
 8006698:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800669c:	2201      	movs	r2, #1
 800669e:	4842      	ldr	r0, [pc, #264]	; (80067a8 <Ymodem_Receive+0x250>)
 80066a0:	f001 fecd 	bl	800843e <HAL_UART_Transmit>
                      result = COM_LIMIT;
 80066a4:	2305      	movs	r3, #5
 80066a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    FLASH_If_Erase(APPLICATION_ADDRESS);
 80066aa:	483a      	ldr	r0, [pc, #232]	; (8006794 <Ymodem_Receive+0x23c>)
 80066ac:	f7fd fc24 	bl	8003ef8 <FLASH_If_Erase>
                    *p_size = filesize;
 80066b0:	6a3a      	ldr	r2, [r7, #32]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	601a      	str	r2, [r3, #0]
                    Serial_PutByte(ACK);
 80066b6:	2006      	movs	r0, #6
 80066b8:	f7fd fb30 	bl	8003d1c <Serial_PutByte>
                    Serial_PutByte(CRC16);
 80066bc:	2043      	movs	r0, #67	; 0x43
 80066be:	f7fd fb2d 	bl	8003d1c <Serial_PutByte>
 80066c2:	e027      	b.n	8006714 <Ymodem_Receive+0x1bc>
                    Serial_PutByte(ACK);
 80066c4:	2006      	movs	r0, #6
 80066c6:	f7fd fb29 	bl	8003d1c <Serial_PutByte>
                    file_done = 1;
 80066ca:	2301      	movs	r3, #1
 80066cc:	63fb      	str	r3, [r7, #60]	; 0x3c
                    session_done = 1;
 80066ce:	2301      	movs	r3, #1
 80066d0:	643b      	str	r3, [r7, #64]	; 0x40
                    break;
 80066d2:	e027      	b.n	8006724 <Ymodem_Receive+0x1cc>
                  ramsource = (uint32_t) & aPacketData[PACKET_DATA_INDEX];
 80066d4:	4b31      	ldr	r3, [pc, #196]	; (800679c <Ymodem_Receive+0x244>)
 80066d6:	62bb      	str	r3, [r7, #40]	; 0x28
                  if (FLASH_If_Write(flashdestination, (uint32_t*) ramsource, packet_length/4) == FLASHIF_OK)
 80066d8:	4b2d      	ldr	r3, [pc, #180]	; (8006790 <Ymodem_Receive+0x238>)
 80066da:	6818      	ldr	r0, [r3, #0]
 80066dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	089b      	lsrs	r3, r3, #2
 80066e2:	461a      	mov	r2, r3
 80066e4:	f7fd fc2e 	bl	8003f44 <FLASH_If_Write>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d109      	bne.n	8006702 <Ymodem_Receive+0x1aa>
                    flashdestination += packet_length;
 80066ee:	4b28      	ldr	r3, [pc, #160]	; (8006790 <Ymodem_Receive+0x238>)
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	4413      	add	r3, r2
 80066f6:	4a26      	ldr	r2, [pc, #152]	; (8006790 <Ymodem_Receive+0x238>)
 80066f8:	6013      	str	r3, [r2, #0]
                    Serial_PutByte(ACK);
 80066fa:	2006      	movs	r0, #6
 80066fc:	f7fd fb0e 	bl	8003d1c <Serial_PutByte>
 8006700:	e008      	b.n	8006714 <Ymodem_Receive+0x1bc>
                    Serial_PutByte(CA);
 8006702:	2018      	movs	r0, #24
 8006704:	f7fd fb0a 	bl	8003d1c <Serial_PutByte>
                    Serial_PutByte(CA);
 8006708:	2018      	movs	r0, #24
 800670a:	f7fd fb07 	bl	8003d1c <Serial_PutByte>
                    result = COM_DATA;
 800670e:	2304      	movs	r3, #4
 8006710:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                packets_received ++;
 8006714:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006718:	3301      	adds	r3, #1
 800671a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                session_begin = 1;
 800671e:	2301      	movs	r3, #1
 8006720:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8006722:	bf00      	nop
          }
          break;
 8006724:	e01d      	b.n	8006762 <Ymodem_Receive+0x20a>
        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
 8006726:	2018      	movs	r0, #24
 8006728:	f7fd faf8 	bl	8003d1c <Serial_PutByte>
          Serial_PutByte(CA);
 800672c:	2018      	movs	r0, #24
 800672e:	f7fd faf5 	bl	8003d1c <Serial_PutByte>
          result = COM_ABORT;
 8006732:	2302      	movs	r3, #2
 8006734:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          break;
 8006738:	e013      	b.n	8006762 <Ymodem_Receive+0x20a>
        default:
          if (session_begin > 0)
 800673a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673c:	2b00      	cmp	r3, #0
 800673e:	d002      	beq.n	8006746 <Ymodem_Receive+0x1ee>
          {
            errors ++;
 8006740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006742:	3301      	adds	r3, #1
 8006744:	63bb      	str	r3, [r7, #56]	; 0x38
          }
          if (errors > MAX_ERRORS)
 8006746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006748:	2b05      	cmp	r3, #5
 800674a:	d906      	bls.n	800675a <Ymodem_Receive+0x202>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 800674c:	2018      	movs	r0, #24
 800674e:	f7fd fae5 	bl	8003d1c <Serial_PutByte>
            Serial_PutByte(CA);
 8006752:	2018      	movs	r0, #24
 8006754:	f7fd fae2 	bl	8003d1c <Serial_PutByte>
 8006758:	e002      	b.n	8006760 <Ymodem_Receive+0x208>
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
 800675a:	2043      	movs	r0, #67	; 0x43
 800675c:	f7fd fade 	bl	8003d1c <Serial_PutByte>
          }
          break;
 8006760:	bf00      	nop
    while ((file_done == 0) && (result == COM_OK))
 8006762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d104      	bne.n	8006772 <Ymodem_Receive+0x21a>
 8006768:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800676c:	2b00      	cmp	r3, #0
 800676e:	f43f af0a 	beq.w	8006586 <Ymodem_Receive+0x2e>
  while ((session_done == 0) && (result == COM_OK))
 8006772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006774:	2b00      	cmp	r3, #0
 8006776:	d104      	bne.n	8006782 <Ymodem_Receive+0x22a>
 8006778:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800677c:	2b00      	cmp	r3, #0
 800677e:	f43f aefc 	beq.w	800657a <Ymodem_Receive+0x22>
      }
    }
  }
  return result;
 8006782:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
}
 8006786:	4618      	mov	r0, r3
 8006788:	3748      	adds	r7, #72	; 0x48
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	20002350 	.word	0x20002350
 8006794:	08020000 	.word	0x08020000
 8006798:	20001f48 	.word	0x20001f48
 800679c:	20001f4c 	.word	0x20001f4c
 80067a0:	20001df4 	.word	0x20001df4
 80067a4:	000e0001 	.word	0x000e0001
 80067a8:	20000c4c 	.word	0x20000c4c

080067ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80067ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80067e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80067b0:	480d      	ldr	r0, [pc, #52]	; (80067e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80067b2:	490e      	ldr	r1, [pc, #56]	; (80067ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80067b4:	4a0e      	ldr	r2, [pc, #56]	; (80067f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80067b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80067b8:	e002      	b.n	80067c0 <LoopCopyDataInit>

080067ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80067ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80067bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80067be:	3304      	adds	r3, #4

080067c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80067c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80067c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80067c4:	d3f9      	bcc.n	80067ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80067c6:	4a0b      	ldr	r2, [pc, #44]	; (80067f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80067c8:	4c0b      	ldr	r4, [pc, #44]	; (80067f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80067ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80067cc:	e001      	b.n	80067d2 <LoopFillZerobss>

080067ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80067ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80067d0:	3204      	adds	r2, #4

080067d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80067d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80067d4:	d3fb      	bcc.n	80067ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80067d6:	f7fe ff2f 	bl	8005638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80067da:	f003 fce9 	bl	800a1b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80067de:	f7fe f80b 	bl	80047f8 <main>
  bx  lr    
 80067e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80067e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80067e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80067ec:	20000bb8 	.word	0x20000bb8
  ldr r2, =_sidata
 80067f0:	0800f204 	.word	0x0800f204
  ldr r2, =_sbss
 80067f4:	20000bb8 	.word	0x20000bb8
  ldr r4, =_ebss
 80067f8:	20002378 	.word	0x20002378

080067fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80067fc:	e7fe      	b.n	80067fc <ADC_IRQHandler>
	...

08006800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006804:	4b0e      	ldr	r3, [pc, #56]	; (8006840 <HAL_Init+0x40>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a0d      	ldr	r2, [pc, #52]	; (8006840 <HAL_Init+0x40>)
 800680a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800680e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006810:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <HAL_Init+0x40>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a0a      	ldr	r2, [pc, #40]	; (8006840 <HAL_Init+0x40>)
 8006816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800681a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800681c:	4b08      	ldr	r3, [pc, #32]	; (8006840 <HAL_Init+0x40>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a07      	ldr	r2, [pc, #28]	; (8006840 <HAL_Init+0x40>)
 8006822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006826:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006828:	2003      	movs	r0, #3
 800682a:	f000 fd71 	bl	8007310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800682e:	200f      	movs	r0, #15
 8006830:	f000 f83c 	bl	80068ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006834:	f7fe fc6a 	bl	800510c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	40023c00 	.word	0x40023c00

08006844 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8006848:	4b13      	ldr	r3, [pc, #76]	; (8006898 <HAL_DeInit+0x54>)
 800684a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800684e:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8006850:	4b11      	ldr	r3, [pc, #68]	; (8006898 <HAL_DeInit+0x54>)
 8006852:	2200      	movs	r2, #0
 8006854:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8006856:	4b10      	ldr	r3, [pc, #64]	; (8006898 <HAL_DeInit+0x54>)
 8006858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800685c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 800685e:	4b0e      	ldr	r3, [pc, #56]	; (8006898 <HAL_DeInit+0x54>)
 8006860:	2200      	movs	r2, #0
 8006862:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8006864:	4b0c      	ldr	r3, [pc, #48]	; (8006898 <HAL_DeInit+0x54>)
 8006866:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800686a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 800686c:	4b0a      	ldr	r3, [pc, #40]	; (8006898 <HAL_DeInit+0x54>)
 800686e:	2200      	movs	r2, #0
 8006870:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8006872:	4b09      	ldr	r3, [pc, #36]	; (8006898 <HAL_DeInit+0x54>)
 8006874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006878:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800687a:	4b07      	ldr	r3, [pc, #28]	; (8006898 <HAL_DeInit+0x54>)
 800687c:	2200      	movs	r2, #0
 800687e:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8006880:	4b05      	ldr	r3, [pc, #20]	; (8006898 <HAL_DeInit+0x54>)
 8006882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006886:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8006888:	4b03      	ldr	r3, [pc, #12]	; (8006898 <HAL_DeInit+0x54>)
 800688a:	2200      	movs	r2, #0
 800688c:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800688e:	f000 f805 	bl	800689c <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	bd80      	pop	{r7, pc}
 8006898:	40023800 	.word	0x40023800

0800689c <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 80068a0:	bf00      	nop
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
	...

080068ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80068b4:	4b12      	ldr	r3, [pc, #72]	; (8006900 <HAL_InitTick+0x54>)
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	4b12      	ldr	r3, [pc, #72]	; (8006904 <HAL_InitTick+0x58>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	4619      	mov	r1, r3
 80068be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80068c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 fd55 	bl	800737a <HAL_SYSTICK_Config>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e00e      	b.n	80068f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b0f      	cmp	r3, #15
 80068de:	d80a      	bhi.n	80068f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80068e0:	2200      	movs	r2, #0
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068e8:	f000 fd1d 	bl	8007326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80068ec:	4a06      	ldr	r2, [pc, #24]	; (8006908 <HAL_InitTick+0x5c>)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	e000      	b.n	80068f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	200009dc 	.word	0x200009dc
 8006904:	200009e4 	.word	0x200009e4
 8006908:	200009e0 	.word	0x200009e0

0800690c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800690c:	b480      	push	{r7}
 800690e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006910:	4b06      	ldr	r3, [pc, #24]	; (800692c <HAL_IncTick+0x20>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	461a      	mov	r2, r3
 8006916:	4b06      	ldr	r3, [pc, #24]	; (8006930 <HAL_IncTick+0x24>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4413      	add	r3, r2
 800691c:	4a04      	ldr	r2, [pc, #16]	; (8006930 <HAL_IncTick+0x24>)
 800691e:	6013      	str	r3, [r2, #0]
}
 8006920:	bf00      	nop
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	200009e4 	.word	0x200009e4
 8006930:	20002354 	.word	0x20002354

08006934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006934:	b480      	push	{r7}
 8006936:	af00      	add	r7, sp, #0
  return uwTick;
 8006938:	4b03      	ldr	r3, [pc, #12]	; (8006948 <HAL_GetTick+0x14>)
 800693a:	681b      	ldr	r3, [r3, #0]
}
 800693c:	4618      	mov	r0, r3
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	20002354 	.word	0x20002354

0800694c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006954:	2300      	movs	r3, #0
 8006956:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e033      	b.n	80069ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	2b00      	cmp	r3, #0
 8006968:	d109      	bne.n	800697e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7fc f868 	bl	8002a40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	2b00      	cmp	r3, #0
 8006988:	d118      	bne.n	80069bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006992:	f023 0302 	bic.w	r3, r3, #2
 8006996:	f043 0202 	orr.w	r2, r3, #2
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fa68 	bl	8006e74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	f023 0303 	bic.w	r3, r3, #3
 80069b2:	f043 0201 	orr.w	r2, r3, #1
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	641a      	str	r2, [r3, #64]	; 0x40
 80069ba:	e001      	b.n	80069c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
	...

080069d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d101      	bne.n	80069f2 <HAL_ADC_Start_DMA+0x1e>
 80069ee:	2302      	movs	r3, #2
 80069f0:	e0e9      	b.n	8006bc6 <HAL_ADC_Start_DMA+0x1f2>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d018      	beq.n	8006a3a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0201 	orr.w	r2, r2, #1
 8006a16:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006a18:	4b6d      	ldr	r3, [pc, #436]	; (8006bd0 <HAL_ADC_Start_DMA+0x1fc>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a6d      	ldr	r2, [pc, #436]	; (8006bd4 <HAL_ADC_Start_DMA+0x200>)
 8006a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a22:	0c9a      	lsrs	r2, r3, #18
 8006a24:	4613      	mov	r3, r2
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	4413      	add	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006a2c:	e002      	b.n	8006a34 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	3b01      	subs	r3, #1
 8006a32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1f9      	bne.n	8006a2e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a48:	d107      	bne.n	8006a5a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a58:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	f040 80a1 	bne.w	8006bac <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006a72:	f023 0301 	bic.w	r3, r3, #1
 8006a76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d007      	beq.n	8006a9c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006a94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa8:	d106      	bne.n	8006ab8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aae:	f023 0206 	bic.w	r2, r3, #6
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	645a      	str	r2, [r3, #68]	; 0x44
 8006ab6:	e002      	b.n	8006abe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ac6:	4b44      	ldr	r3, [pc, #272]	; (8006bd8 <HAL_ADC_Start_DMA+0x204>)
 8006ac8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	4a43      	ldr	r2, [pc, #268]	; (8006bdc <HAL_ADC_Start_DMA+0x208>)
 8006ad0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad6:	4a42      	ldr	r2, [pc, #264]	; (8006be0 <HAL_ADC_Start_DMA+0x20c>)
 8006ad8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ade:	4a41      	ldr	r2, [pc, #260]	; (8006be4 <HAL_ADC_Start_DMA+0x210>)
 8006ae0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006aea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006afa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689a      	ldr	r2, [r3, #8]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b0a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	334c      	adds	r3, #76	; 0x4c
 8006b16:	4619      	mov	r1, r3
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f000 fce8 	bl	80074f0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f003 031f 	and.w	r3, r3, #31
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d12a      	bne.n	8006b82 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a2d      	ldr	r2, [pc, #180]	; (8006be8 <HAL_ADC_Start_DMA+0x214>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d015      	beq.n	8006b62 <HAL_ADC_Start_DMA+0x18e>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a2c      	ldr	r2, [pc, #176]	; (8006bec <HAL_ADC_Start_DMA+0x218>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d105      	bne.n	8006b4c <HAL_ADC_Start_DMA+0x178>
 8006b40:	4b25      	ldr	r3, [pc, #148]	; (8006bd8 <HAL_ADC_Start_DMA+0x204>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f003 031f 	and.w	r3, r3, #31
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a27      	ldr	r2, [pc, #156]	; (8006bf0 <HAL_ADC_Start_DMA+0x21c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d136      	bne.n	8006bc4 <HAL_ADC_Start_DMA+0x1f0>
 8006b56:	4b20      	ldr	r3, [pc, #128]	; (8006bd8 <HAL_ADC_Start_DMA+0x204>)
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f003 0310 	and.w	r3, r3, #16
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d130      	bne.n	8006bc4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d129      	bne.n	8006bc4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689a      	ldr	r2, [r3, #8]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006b7e:	609a      	str	r2, [r3, #8]
 8006b80:	e020      	b.n	8006bc4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a18      	ldr	r2, [pc, #96]	; (8006be8 <HAL_ADC_Start_DMA+0x214>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d11b      	bne.n	8006bc4 <HAL_ADC_Start_DMA+0x1f0>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d114      	bne.n	8006bc4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006ba8:	609a      	str	r2, [r3, #8]
 8006baa:	e00b      	b.n	8006bc4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb0:	f043 0210 	orr.w	r2, r3, #16
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bbc:	f043 0201 	orr.w	r2, r3, #1
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	200009dc 	.word	0x200009dc
 8006bd4:	431bde83 	.word	0x431bde83
 8006bd8:	40012300 	.word	0x40012300
 8006bdc:	0800706d 	.word	0x0800706d
 8006be0:	08007127 	.word	0x08007127
 8006be4:	08007143 	.word	0x08007143
 8006be8:	40012000 	.word	0x40012000
 8006bec:	40012100 	.word	0x40012100
 8006bf0:	40012200 	.word	0x40012200

08006bf4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006bfc:	bf00      	nop
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d101      	bne.n	8006c4c <HAL_ADC_ConfigChannel+0x1c>
 8006c48:	2302      	movs	r3, #2
 8006c4a:	e105      	b.n	8006e58 <HAL_ADC_ConfigChannel+0x228>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b09      	cmp	r3, #9
 8006c5a:	d925      	bls.n	8006ca8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68d9      	ldr	r1, [r3, #12]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	461a      	mov	r2, r3
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	4413      	add	r3, r2
 8006c70:	3b1e      	subs	r3, #30
 8006c72:	2207      	movs	r2, #7
 8006c74:	fa02 f303 	lsl.w	r3, r2, r3
 8006c78:	43da      	mvns	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	400a      	ands	r2, r1
 8006c80:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68d9      	ldr	r1, [r3, #12]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	689a      	ldr	r2, [r3, #8]
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	4618      	mov	r0, r3
 8006c94:	4603      	mov	r3, r0
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	4403      	add	r3, r0
 8006c9a:	3b1e      	subs	r3, #30
 8006c9c:	409a      	lsls	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	60da      	str	r2, [r3, #12]
 8006ca6:	e022      	b.n	8006cee <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6919      	ldr	r1, [r3, #16]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	4413      	add	r3, r2
 8006cbc:	2207      	movs	r2, #7
 8006cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc2:	43da      	mvns	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	400a      	ands	r2, r1
 8006cca:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6919      	ldr	r1, [r3, #16]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	4618      	mov	r0, r3
 8006cde:	4603      	mov	r3, r0
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	4403      	add	r3, r0
 8006ce4:	409a      	lsls	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	430a      	orrs	r2, r1
 8006cec:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2b06      	cmp	r3, #6
 8006cf4:	d824      	bhi.n	8006d40 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	4613      	mov	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	3b05      	subs	r3, #5
 8006d08:	221f      	movs	r2, #31
 8006d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0e:	43da      	mvns	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	400a      	ands	r2, r1
 8006d16:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	4618      	mov	r0, r3
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	685a      	ldr	r2, [r3, #4]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	4413      	add	r3, r2
 8006d30:	3b05      	subs	r3, #5
 8006d32:	fa00 f203 	lsl.w	r2, r0, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8006d3e:	e04c      	b.n	8006dda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	2b0c      	cmp	r3, #12
 8006d46:	d824      	bhi.n	8006d92 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	4613      	mov	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	3b23      	subs	r3, #35	; 0x23
 8006d5a:	221f      	movs	r2, #31
 8006d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d60:	43da      	mvns	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	400a      	ands	r2, r1
 8006d68:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	4618      	mov	r0, r3
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	3b23      	subs	r3, #35	; 0x23
 8006d84:	fa00 f203 	lsl.w	r2, r0, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	631a      	str	r2, [r3, #48]	; 0x30
 8006d90:	e023      	b.n	8006dda <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	3b41      	subs	r3, #65	; 0x41
 8006da4:	221f      	movs	r2, #31
 8006da6:	fa02 f303 	lsl.w	r3, r2, r3
 8006daa:	43da      	mvns	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	400a      	ands	r2, r1
 8006db2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	3b41      	subs	r3, #65	; 0x41
 8006dce:	fa00 f203 	lsl.w	r2, r0, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006dda:	4b22      	ldr	r3, [pc, #136]	; (8006e64 <HAL_ADC_ConfigChannel+0x234>)
 8006ddc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a21      	ldr	r2, [pc, #132]	; (8006e68 <HAL_ADC_ConfigChannel+0x238>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d109      	bne.n	8006dfc <HAL_ADC_ConfigChannel+0x1cc>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b12      	cmp	r3, #18
 8006dee:	d105      	bne.n	8006dfc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a19      	ldr	r2, [pc, #100]	; (8006e68 <HAL_ADC_ConfigChannel+0x238>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d123      	bne.n	8006e4e <HAL_ADC_ConfigChannel+0x21e>
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b10      	cmp	r3, #16
 8006e0c:	d003      	beq.n	8006e16 <HAL_ADC_ConfigChannel+0x1e6>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b11      	cmp	r3, #17
 8006e14:	d11b      	bne.n	8006e4e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b10      	cmp	r3, #16
 8006e28:	d111      	bne.n	8006e4e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006e2a:	4b10      	ldr	r3, [pc, #64]	; (8006e6c <HAL_ADC_ConfigChannel+0x23c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a10      	ldr	r2, [pc, #64]	; (8006e70 <HAL_ADC_ConfigChannel+0x240>)
 8006e30:	fba2 2303 	umull	r2, r3, r2, r3
 8006e34:	0c9a      	lsrs	r2, r3, #18
 8006e36:	4613      	mov	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006e40:	e002      	b.n	8006e48 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1f9      	bne.n	8006e42 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	40012300 	.word	0x40012300
 8006e68:	40012000 	.word	0x40012000
 8006e6c:	200009dc 	.word	0x200009dc
 8006e70:	431bde83 	.word	0x431bde83

08006e74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006e7c:	4b79      	ldr	r3, [pc, #484]	; (8007064 <ADC_Init+0x1f0>)
 8006e7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	431a      	orrs	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ea8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6859      	ldr	r1, [r3, #4]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	021a      	lsls	r2, r3, #8
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006ecc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	6859      	ldr	r1, [r3, #4]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006eee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6899      	ldr	r1, [r3, #8]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68da      	ldr	r2, [r3, #12]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f06:	4a58      	ldr	r2, [pc, #352]	; (8007068 <ADC_Init+0x1f4>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d022      	beq.n	8006f52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6899      	ldr	r1, [r3, #8]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	689a      	ldr	r2, [r3, #8]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006f3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6899      	ldr	r1, [r3, #8]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	609a      	str	r2, [r3, #8]
 8006f50:	e00f      	b.n	8006f72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	689a      	ldr	r2, [r3, #8]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006f60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006f70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 0202 	bic.w	r2, r2, #2
 8006f80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6899      	ldr	r1, [r3, #8]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	7e1b      	ldrb	r3, [r3, #24]
 8006f8c:	005a      	lsls	r2, r3, #1
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d01b      	beq.n	8006fd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006fbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6859      	ldr	r1, [r3, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	035a      	lsls	r2, r3, #13
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	605a      	str	r2, [r3, #4]
 8006fd6:	e007      	b.n	8006fe8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fe6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	69db      	ldr	r3, [r3, #28]
 8007002:	3b01      	subs	r3, #1
 8007004:	051a      	lsls	r2, r3, #20
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800701c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6899      	ldr	r1, [r3, #8]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800702a:	025a      	lsls	r2, r3, #9
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	430a      	orrs	r2, r1
 8007032:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007042:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6899      	ldr	r1, [r3, #8]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	029a      	lsls	r2, r3, #10
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	430a      	orrs	r2, r1
 8007056:	609a      	str	r2, [r3, #8]
}
 8007058:	bf00      	nop
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	40012300 	.word	0x40012300
 8007068:	0f000001 	.word	0x0f000001

0800706c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007078:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007082:	2b00      	cmp	r3, #0
 8007084:	d13c      	bne.n	8007100 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d12b      	bne.n	80070f8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d127      	bne.n	80070f8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d006      	beq.n	80070c4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d119      	bne.n	80070f8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 0220 	bic.w	r2, r2, #32
 80070d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d105      	bne.n	80070f8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f0:	f043 0201 	orr.w	r2, r3, #1
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f7ff fd7b 	bl	8006bf4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80070fe:	e00e      	b.n	800711e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007104:	f003 0310 	and.w	r3, r3, #16
 8007108:	2b00      	cmp	r3, #0
 800710a:	d003      	beq.n	8007114 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f7ff fd85 	bl	8006c1c <HAL_ADC_ErrorCallback>
}
 8007112:	e004      	b.n	800711e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	4798      	blx	r3
}
 800711e:	bf00      	nop
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007132:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f7ff fd67 	bl	8006c08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800713a:	bf00      	nop
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b084      	sub	sp, #16
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2240      	movs	r2, #64	; 0x40
 8007154:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715a:	f043 0204 	orr.w	r2, r3, #4
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f7ff fd5a 	bl	8006c1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007168:	bf00      	nop
 800716a:	3710      	adds	r7, #16
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <__NVIC_SetPriorityGrouping>:
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f003 0307 	and.w	r3, r3, #7
 800717e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007180:	4b0c      	ldr	r3, [pc, #48]	; (80071b4 <__NVIC_SetPriorityGrouping+0x44>)
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800718c:	4013      	ands	r3, r2
 800718e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800719c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80071a2:	4a04      	ldr	r2, [pc, #16]	; (80071b4 <__NVIC_SetPriorityGrouping+0x44>)
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	60d3      	str	r3, [r2, #12]
}
 80071a8:	bf00      	nop
 80071aa:	3714      	adds	r7, #20
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	e000ed00 	.word	0xe000ed00

080071b8 <__NVIC_GetPriorityGrouping>:
{
 80071b8:	b480      	push	{r7}
 80071ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071bc:	4b04      	ldr	r3, [pc, #16]	; (80071d0 <__NVIC_GetPriorityGrouping+0x18>)
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	0a1b      	lsrs	r3, r3, #8
 80071c2:	f003 0307 	and.w	r3, r3, #7
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	e000ed00 	.word	0xe000ed00

080071d4 <__NVIC_EnableIRQ>:
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	4603      	mov	r3, r0
 80071dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	db0b      	blt.n	80071fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071e6:	79fb      	ldrb	r3, [r7, #7]
 80071e8:	f003 021f 	and.w	r2, r3, #31
 80071ec:	4907      	ldr	r1, [pc, #28]	; (800720c <__NVIC_EnableIRQ+0x38>)
 80071ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071f2:	095b      	lsrs	r3, r3, #5
 80071f4:	2001      	movs	r0, #1
 80071f6:	fa00 f202 	lsl.w	r2, r0, r2
 80071fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80071fe:	bf00      	nop
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	e000e100 	.word	0xe000e100

08007210 <__NVIC_SetPriority>:
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	4603      	mov	r3, r0
 8007218:	6039      	str	r1, [r7, #0]
 800721a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800721c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007220:	2b00      	cmp	r3, #0
 8007222:	db0a      	blt.n	800723a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	b2da      	uxtb	r2, r3
 8007228:	490c      	ldr	r1, [pc, #48]	; (800725c <__NVIC_SetPriority+0x4c>)
 800722a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800722e:	0112      	lsls	r2, r2, #4
 8007230:	b2d2      	uxtb	r2, r2
 8007232:	440b      	add	r3, r1
 8007234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007238:	e00a      	b.n	8007250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	b2da      	uxtb	r2, r3
 800723e:	4908      	ldr	r1, [pc, #32]	; (8007260 <__NVIC_SetPriority+0x50>)
 8007240:	79fb      	ldrb	r3, [r7, #7]
 8007242:	f003 030f 	and.w	r3, r3, #15
 8007246:	3b04      	subs	r3, #4
 8007248:	0112      	lsls	r2, r2, #4
 800724a:	b2d2      	uxtb	r2, r2
 800724c:	440b      	add	r3, r1
 800724e:	761a      	strb	r2, [r3, #24]
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	e000e100 	.word	0xe000e100
 8007260:	e000ed00 	.word	0xe000ed00

08007264 <NVIC_EncodePriority>:
{
 8007264:	b480      	push	{r7}
 8007266:	b089      	sub	sp, #36	; 0x24
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f003 0307 	and.w	r3, r3, #7
 8007276:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	f1c3 0307 	rsb	r3, r3, #7
 800727e:	2b04      	cmp	r3, #4
 8007280:	bf28      	it	cs
 8007282:	2304      	movcs	r3, #4
 8007284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	3304      	adds	r3, #4
 800728a:	2b06      	cmp	r3, #6
 800728c:	d902      	bls.n	8007294 <NVIC_EncodePriority+0x30>
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	3b03      	subs	r3, #3
 8007292:	e000      	b.n	8007296 <NVIC_EncodePriority+0x32>
 8007294:	2300      	movs	r3, #0
 8007296:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	fa02 f303 	lsl.w	r3, r2, r3
 80072a2:	43da      	mvns	r2, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	401a      	ands	r2, r3
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80072ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	fa01 f303 	lsl.w	r3, r1, r3
 80072b6:	43d9      	mvns	r1, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072bc:	4313      	orrs	r3, r2
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3724      	adds	r7, #36	; 0x24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
	...

080072cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3b01      	subs	r3, #1
 80072d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072dc:	d301      	bcc.n	80072e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80072de:	2301      	movs	r3, #1
 80072e0:	e00f      	b.n	8007302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072e2:	4a0a      	ldr	r2, [pc, #40]	; (800730c <SysTick_Config+0x40>)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80072ea:	210f      	movs	r1, #15
 80072ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072f0:	f7ff ff8e 	bl	8007210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072f4:	4b05      	ldr	r3, [pc, #20]	; (800730c <SysTick_Config+0x40>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072fa:	4b04      	ldr	r3, [pc, #16]	; (800730c <SysTick_Config+0x40>)
 80072fc:	2207      	movs	r2, #7
 80072fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	e000e010 	.word	0xe000e010

08007310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7ff ff29 	bl	8007170 <__NVIC_SetPriorityGrouping>
}
 800731e:	bf00      	nop
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007326:	b580      	push	{r7, lr}
 8007328:	b086      	sub	sp, #24
 800732a:	af00      	add	r7, sp, #0
 800732c:	4603      	mov	r3, r0
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	607a      	str	r2, [r7, #4]
 8007332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007334:	2300      	movs	r3, #0
 8007336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007338:	f7ff ff3e 	bl	80071b8 <__NVIC_GetPriorityGrouping>
 800733c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	68b9      	ldr	r1, [r7, #8]
 8007342:	6978      	ldr	r0, [r7, #20]
 8007344:	f7ff ff8e 	bl	8007264 <NVIC_EncodePriority>
 8007348:	4602      	mov	r2, r0
 800734a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800734e:	4611      	mov	r1, r2
 8007350:	4618      	mov	r0, r3
 8007352:	f7ff ff5d 	bl	8007210 <__NVIC_SetPriority>
}
 8007356:	bf00      	nop
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b082      	sub	sp, #8
 8007362:	af00      	add	r7, sp, #0
 8007364:	4603      	mov	r3, r0
 8007366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800736c:	4618      	mov	r0, r3
 800736e:	f7ff ff31 	bl	80071d4 <__NVIC_EnableIRQ>
}
 8007372:	bf00      	nop
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b082      	sub	sp, #8
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7ff ffa2 	bl	80072cc <SysTick_Config>
 8007388:	4603      	mov	r3, r0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
	...

08007394 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800739c:	2300      	movs	r3, #0
 800739e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80073a0:	f7ff fac8 	bl	8006934 <HAL_GetTick>
 80073a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e099      	b.n	80074e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 0201 	bic.w	r2, r2, #1
 80073ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073d0:	e00f      	b.n	80073f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80073d2:	f7ff faaf 	bl	8006934 <HAL_GetTick>
 80073d6:	4602      	mov	r2, r0
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	2b05      	cmp	r3, #5
 80073de:	d908      	bls.n	80073f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2220      	movs	r2, #32
 80073e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2203      	movs	r2, #3
 80073ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e078      	b.n	80074e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e8      	bne.n	80073d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	4b38      	ldr	r3, [pc, #224]	; (80074ec <HAL_DMA_Init+0x158>)
 800740c:	4013      	ands	r3, r2
 800740e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800741e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	691b      	ldr	r3, [r3, #16]
 8007424:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800742a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007436:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	4313      	orrs	r3, r2
 8007442:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	2b04      	cmp	r3, #4
 800744a:	d107      	bne.n	800745c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007454:	4313      	orrs	r3, r2
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	4313      	orrs	r3, r2
 800745a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f023 0307 	bic.w	r3, r3, #7
 8007472:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	4313      	orrs	r3, r2
 800747c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007482:	2b04      	cmp	r3, #4
 8007484:	d117      	bne.n	80074b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	4313      	orrs	r3, r2
 800748e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00e      	beq.n	80074b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fa6f 	bl	800797c <DMA_CheckFifoParam>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d008      	beq.n	80074b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2240      	movs	r2, #64	; 0x40
 80074a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80074b2:	2301      	movs	r3, #1
 80074b4:	e016      	b.n	80074e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fa26 	bl	8007910 <DMA_CalcBaseAndBitshift>
 80074c4:	4603      	mov	r3, r0
 80074c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074cc:	223f      	movs	r2, #63	; 0x3f
 80074ce:	409a      	lsls	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	f010803f 	.word	0xf010803f

080074f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
 80074fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074fe:	2300      	movs	r3, #0
 8007500:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007506:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800750e:	2b01      	cmp	r3, #1
 8007510:	d101      	bne.n	8007516 <HAL_DMA_Start_IT+0x26>
 8007512:	2302      	movs	r3, #2
 8007514:	e040      	b.n	8007598 <HAL_DMA_Start_IT+0xa8>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b01      	cmp	r3, #1
 8007528:	d12f      	bne.n	800758a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2202      	movs	r2, #2
 800752e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	68b9      	ldr	r1, [r7, #8]
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 f9b8 	bl	80078b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007548:	223f      	movs	r2, #63	; 0x3f
 800754a:	409a      	lsls	r2, r3
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0216 	orr.w	r2, r2, #22
 800755e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	2b00      	cmp	r3, #0
 8007566:	d007      	beq.n	8007578 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f042 0208 	orr.w	r2, r2, #8
 8007576:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f042 0201 	orr.w	r2, r2, #1
 8007586:	601a      	str	r2, [r3, #0]
 8007588:	e005      	b.n	8007596 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007592:	2302      	movs	r3, #2
 8007594:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007596:	7dfb      	ldrb	r3, [r7, #23]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3718      	adds	r7, #24
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80075a8:	2300      	movs	r3, #0
 80075aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80075ac:	4b8e      	ldr	r3, [pc, #568]	; (80077e8 <HAL_DMA_IRQHandler+0x248>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a8e      	ldr	r2, [pc, #568]	; (80077ec <HAL_DMA_IRQHandler+0x24c>)
 80075b2:	fba2 2303 	umull	r2, r3, r2, r3
 80075b6:	0a9b      	lsrs	r3, r3, #10
 80075b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ca:	2208      	movs	r2, #8
 80075cc:	409a      	lsls	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	4013      	ands	r3, r2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01a      	beq.n	800760c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d013      	beq.n	800760c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0204 	bic.w	r2, r2, #4
 80075f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075f8:	2208      	movs	r2, #8
 80075fa:	409a      	lsls	r2, r3
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007604:	f043 0201 	orr.w	r2, r3, #1
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007610:	2201      	movs	r2, #1
 8007612:	409a      	lsls	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4013      	ands	r3, r2
 8007618:	2b00      	cmp	r3, #0
 800761a:	d012      	beq.n	8007642 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00b      	beq.n	8007642 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800762e:	2201      	movs	r2, #1
 8007630:	409a      	lsls	r2, r3
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763a:	f043 0202 	orr.w	r2, r3, #2
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007646:	2204      	movs	r2, #4
 8007648:	409a      	lsls	r2, r3
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	4013      	ands	r3, r2
 800764e:	2b00      	cmp	r3, #0
 8007650:	d012      	beq.n	8007678 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00b      	beq.n	8007678 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007664:	2204      	movs	r2, #4
 8007666:	409a      	lsls	r2, r3
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007670:	f043 0204 	orr.w	r2, r3, #4
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800767c:	2210      	movs	r2, #16
 800767e:	409a      	lsls	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4013      	ands	r3, r2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d043      	beq.n	8007710 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0308 	and.w	r3, r3, #8
 8007692:	2b00      	cmp	r3, #0
 8007694:	d03c      	beq.n	8007710 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800769a:	2210      	movs	r2, #16
 800769c:	409a      	lsls	r2, r3
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d018      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d108      	bne.n	80076d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d024      	beq.n	8007710 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	4798      	blx	r3
 80076ce:	e01f      	b.n	8007710 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d01b      	beq.n	8007710 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	4798      	blx	r3
 80076e0:	e016      	b.n	8007710 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d107      	bne.n	8007700 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 0208 	bic.w	r2, r2, #8
 80076fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007704:	2b00      	cmp	r3, #0
 8007706:	d003      	beq.n	8007710 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007714:	2220      	movs	r2, #32
 8007716:	409a      	lsls	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4013      	ands	r3, r2
 800771c:	2b00      	cmp	r3, #0
 800771e:	f000 808f 	beq.w	8007840 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0310 	and.w	r3, r3, #16
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 8087 	beq.w	8007840 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007736:	2220      	movs	r2, #32
 8007738:	409a      	lsls	r2, r3
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b05      	cmp	r3, #5
 8007748:	d136      	bne.n	80077b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0216 	bic.w	r2, r2, #22
 8007758:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	695a      	ldr	r2, [r3, #20]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007768:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	d103      	bne.n	800777a <HAL_DMA_IRQHandler+0x1da>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007776:	2b00      	cmp	r3, #0
 8007778:	d007      	beq.n	800778a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0208 	bic.w	r2, r2, #8
 8007788:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800778e:	223f      	movs	r2, #63	; 0x3f
 8007790:	409a      	lsls	r2, r3
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d07e      	beq.n	80078ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	4798      	blx	r3
        }
        return;
 80077b6:	e079      	b.n	80078ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d01d      	beq.n	8007802 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10d      	bne.n	80077f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d031      	beq.n	8007840 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	4798      	blx	r3
 80077e4:	e02c      	b.n	8007840 <HAL_DMA_IRQHandler+0x2a0>
 80077e6:	bf00      	nop
 80077e8:	200009dc 	.word	0x200009dc
 80077ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d023      	beq.n	8007840 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	4798      	blx	r3
 8007800:	e01e      	b.n	8007840 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10f      	bne.n	8007830 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f022 0210 	bic.w	r2, r2, #16
 800781e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007844:	2b00      	cmp	r3, #0
 8007846:	d032      	beq.n	80078ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d022      	beq.n	800789a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2205      	movs	r2, #5
 8007858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f022 0201 	bic.w	r2, r2, #1
 800786a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	3301      	adds	r3, #1
 8007870:	60bb      	str	r3, [r7, #8]
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	429a      	cmp	r2, r3
 8007876:	d307      	bcc.n	8007888 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1f2      	bne.n	800786c <HAL_DMA_IRQHandler+0x2cc>
 8007886:	e000      	b.n	800788a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007888:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d005      	beq.n	80078ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	4798      	blx	r3
 80078aa:	e000      	b.n	80078ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80078ac:	bf00      	nop
    }
  }
}
 80078ae:	3718      	adds	r7, #24
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
 80078c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80078d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	2b40      	cmp	r3, #64	; 0x40
 80078e0:	d108      	bne.n	80078f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80078f2:	e007      	b.n	8007904 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	60da      	str	r2, [r3, #12]
}
 8007904:	bf00      	nop
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	3b10      	subs	r3, #16
 8007920:	4a14      	ldr	r2, [pc, #80]	; (8007974 <DMA_CalcBaseAndBitshift+0x64>)
 8007922:	fba2 2303 	umull	r2, r3, r2, r3
 8007926:	091b      	lsrs	r3, r3, #4
 8007928:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800792a:	4a13      	ldr	r2, [pc, #76]	; (8007978 <DMA_CalcBaseAndBitshift+0x68>)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	4413      	add	r3, r2
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2b03      	cmp	r3, #3
 800793c:	d909      	bls.n	8007952 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007946:	f023 0303 	bic.w	r3, r3, #3
 800794a:	1d1a      	adds	r2, r3, #4
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	659a      	str	r2, [r3, #88]	; 0x58
 8007950:	e007      	b.n	8007962 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800795a:	f023 0303 	bic.w	r3, r3, #3
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007966:	4618      	mov	r0, r3
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	aaaaaaab 	.word	0xaaaaaaab
 8007978:	0800edd4 	.word	0x0800edd4

0800797c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d11f      	bne.n	80079d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2b03      	cmp	r3, #3
 800799a:	d856      	bhi.n	8007a4a <DMA_CheckFifoParam+0xce>
 800799c:	a201      	add	r2, pc, #4	; (adr r2, 80079a4 <DMA_CheckFifoParam+0x28>)
 800799e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a2:	bf00      	nop
 80079a4:	080079b5 	.word	0x080079b5
 80079a8:	080079c7 	.word	0x080079c7
 80079ac:	080079b5 	.word	0x080079b5
 80079b0:	08007a4b 	.word	0x08007a4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d046      	beq.n	8007a4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079c4:	e043      	b.n	8007a4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80079ce:	d140      	bne.n	8007a52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079d4:	e03d      	b.n	8007a52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079de:	d121      	bne.n	8007a24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d837      	bhi.n	8007a56 <DMA_CheckFifoParam+0xda>
 80079e6:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <DMA_CheckFifoParam+0x70>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	080079fd 	.word	0x080079fd
 80079f0:	08007a03 	.word	0x08007a03
 80079f4:	080079fd 	.word	0x080079fd
 80079f8:	08007a15 	.word	0x08007a15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007a00:	e030      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d025      	beq.n	8007a5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a12:	e022      	b.n	8007a5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a1c:	d11f      	bne.n	8007a5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007a22:	e01c      	b.n	8007a5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d903      	bls.n	8007a32 <DMA_CheckFifoParam+0xb6>
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	d003      	beq.n	8007a38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007a30:	e018      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	73fb      	strb	r3, [r7, #15]
      break;
 8007a36:	e015      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00e      	beq.n	8007a62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	73fb      	strb	r3, [r7, #15]
      break;
 8007a48:	e00b      	b.n	8007a62 <DMA_CheckFifoParam+0xe6>
      break;
 8007a4a:	bf00      	nop
 8007a4c:	e00a      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
      break;
 8007a4e:	bf00      	nop
 8007a50:	e008      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
      break;
 8007a52:	bf00      	nop
 8007a54:	e006      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
      break;
 8007a56:	bf00      	nop
 8007a58:	e004      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
      break;
 8007a5a:	bf00      	nop
 8007a5c:	e002      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
      break;   
 8007a5e:	bf00      	nop
 8007a60:	e000      	b.n	8007a64 <DMA_CheckFifoParam+0xe8>
      break;
 8007a62:	bf00      	nop
    }
  } 
  
  return status; 
 8007a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop

08007a74 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007a86:	4b23      	ldr	r3, [pc, #140]	; (8007b14 <HAL_FLASH_Program+0xa0>)
 8007a88:	7e1b      	ldrb	r3, [r3, #24]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d101      	bne.n	8007a92 <HAL_FLASH_Program+0x1e>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e03b      	b.n	8007b0a <HAL_FLASH_Program+0x96>
 8007a92:	4b20      	ldr	r3, [pc, #128]	; (8007b14 <HAL_FLASH_Program+0xa0>)
 8007a94:	2201      	movs	r2, #1
 8007a96:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a98:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007a9c:	f000 f860 	bl	8007b60 <FLASH_WaitForLastOperation>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8007aa4:	7dfb      	ldrb	r3, [r7, #23]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d12b      	bne.n	8007b02 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d105      	bne.n	8007abc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8007ab0:	783b      	ldrb	r3, [r7, #0]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	68b8      	ldr	r0, [r7, #8]
 8007ab6:	f000 f90b 	bl	8007cd0 <FLASH_Program_Byte>
 8007aba:	e016      	b.n	8007aea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d105      	bne.n	8007ace <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8007ac2:	883b      	ldrh	r3, [r7, #0]
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	68b8      	ldr	r0, [r7, #8]
 8007ac8:	f000 f8de 	bl	8007c88 <FLASH_Program_HalfWord>
 8007acc:	e00d      	b.n	8007aea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d105      	bne.n	8007ae0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	68b8      	ldr	r0, [r7, #8]
 8007ada:	f000 f8b3 	bl	8007c44 <FLASH_Program_Word>
 8007ade:	e004      	b.n	8007aea <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8007ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ae4:	68b8      	ldr	r0, [r7, #8]
 8007ae6:	f000 f87b 	bl	8007be0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007aea:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007aee:	f000 f837 	bl	8007b60 <FLASH_WaitForLastOperation>
 8007af2:	4603      	mov	r3, r0
 8007af4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8007af6:	4b08      	ldr	r3, [pc, #32]	; (8007b18 <HAL_FLASH_Program+0xa4>)
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	4a07      	ldr	r2, [pc, #28]	; (8007b18 <HAL_FLASH_Program+0xa4>)
 8007afc:	f023 0301 	bic.w	r3, r3, #1
 8007b00:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007b02:	4b04      	ldr	r3, [pc, #16]	; (8007b14 <HAL_FLASH_Program+0xa0>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	761a      	strb	r2, [r3, #24]
  
  return status;
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20002358 	.word	0x20002358
 8007b18:	40023c00 	.word	0x40023c00

08007b1c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007b26:	4b0b      	ldr	r3, [pc, #44]	; (8007b54 <HAL_FLASH_Unlock+0x38>)
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	da0b      	bge.n	8007b46 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007b2e:	4b09      	ldr	r3, [pc, #36]	; (8007b54 <HAL_FLASH_Unlock+0x38>)
 8007b30:	4a09      	ldr	r2, [pc, #36]	; (8007b58 <HAL_FLASH_Unlock+0x3c>)
 8007b32:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007b34:	4b07      	ldr	r3, [pc, #28]	; (8007b54 <HAL_FLASH_Unlock+0x38>)
 8007b36:	4a09      	ldr	r2, [pc, #36]	; (8007b5c <HAL_FLASH_Unlock+0x40>)
 8007b38:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007b3a:	4b06      	ldr	r3, [pc, #24]	; (8007b54 <HAL_FLASH_Unlock+0x38>)
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	da01      	bge.n	8007b46 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007b46:	79fb      	ldrb	r3, [r7, #7]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	40023c00 	.word	0x40023c00
 8007b58:	45670123 	.word	0x45670123
 8007b5c:	cdef89ab 	.word	0xcdef89ab

08007b60 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007b6c:	4b1a      	ldr	r3, [pc, #104]	; (8007bd8 <FLASH_WaitForLastOperation+0x78>)
 8007b6e:	2200      	movs	r2, #0
 8007b70:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007b72:	f7fe fedf 	bl	8006934 <HAL_GetTick>
 8007b76:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007b78:	e010      	b.n	8007b9c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b80:	d00c      	beq.n	8007b9c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d007      	beq.n	8007b98 <FLASH_WaitForLastOperation+0x38>
 8007b88:	f7fe fed4 	bl	8006934 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d201      	bcs.n	8007b9c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e019      	b.n	8007bd0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007b9c:	4b0f      	ldr	r3, [pc, #60]	; (8007bdc <FLASH_WaitForLastOperation+0x7c>)
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1e8      	bne.n	8007b7a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007ba8:	4b0c      	ldr	r3, [pc, #48]	; (8007bdc <FLASH_WaitForLastOperation+0x7c>)
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	f003 0301 	and.w	r3, r3, #1
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d002      	beq.n	8007bba <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007bb4:	4b09      	ldr	r3, [pc, #36]	; (8007bdc <FLASH_WaitForLastOperation+0x7c>)
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007bba:	4b08      	ldr	r3, [pc, #32]	; (8007bdc <FLASH_WaitForLastOperation+0x7c>)
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007bc6:	f000 f8a5 	bl	8007d14 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e000      	b.n	8007bd0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
  
}  
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	20002358 	.word	0x20002358
 8007bdc:	40023c00 	.word	0x40023c00

08007be0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007bec:	4b14      	ldr	r3, [pc, #80]	; (8007c40 <FLASH_Program_DoubleWord+0x60>)
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	4a13      	ldr	r2, [pc, #76]	; (8007c40 <FLASH_Program_DoubleWord+0x60>)
 8007bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007bf8:	4b11      	ldr	r3, [pc, #68]	; (8007c40 <FLASH_Program_DoubleWord+0x60>)
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	4a10      	ldr	r2, [pc, #64]	; (8007c40 <FLASH_Program_DoubleWord+0x60>)
 8007bfe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007c02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007c04:	4b0e      	ldr	r3, [pc, #56]	; (8007c40 <FLASH_Program_DoubleWord+0x60>)
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	4a0d      	ldr	r2, [pc, #52]	; (8007c40 <FLASH_Program_DoubleWord+0x60>)
 8007c0a:	f043 0301 	orr.w	r3, r3, #1
 8007c0e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007c16:	f3bf 8f6f 	isb	sy
}
 8007c1a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8007c1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c20:	f04f 0200 	mov.w	r2, #0
 8007c24:	f04f 0300 	mov.w	r3, #0
 8007c28:	000a      	movs	r2, r1
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	68f9      	ldr	r1, [r7, #12]
 8007c2e:	3104      	adds	r1, #4
 8007c30:	4613      	mov	r3, r2
 8007c32:	600b      	str	r3, [r1, #0]
}
 8007c34:	bf00      	nop
 8007c36:	3714      	adds	r7, #20
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr
 8007c40:	40023c00 	.word	0x40023c00

08007c44 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007c4e:	4b0d      	ldr	r3, [pc, #52]	; (8007c84 <FLASH_Program_Word+0x40>)
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	4a0c      	ldr	r2, [pc, #48]	; (8007c84 <FLASH_Program_Word+0x40>)
 8007c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c58:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8007c5a:	4b0a      	ldr	r3, [pc, #40]	; (8007c84 <FLASH_Program_Word+0x40>)
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	4a09      	ldr	r2, [pc, #36]	; (8007c84 <FLASH_Program_Word+0x40>)
 8007c60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c64:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007c66:	4b07      	ldr	r3, [pc, #28]	; (8007c84 <FLASH_Program_Word+0x40>)
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	4a06      	ldr	r2, [pc, #24]	; (8007c84 <FLASH_Program_Word+0x40>)
 8007c6c:	f043 0301 	orr.w	r3, r3, #1
 8007c70:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	601a      	str	r2, [r3, #0]
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	40023c00 	.word	0x40023c00

08007c88 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007c94:	4b0d      	ldr	r3, [pc, #52]	; (8007ccc <FLASH_Program_HalfWord+0x44>)
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	4a0c      	ldr	r2, [pc, #48]	; (8007ccc <FLASH_Program_HalfWord+0x44>)
 8007c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007ca0:	4b0a      	ldr	r3, [pc, #40]	; (8007ccc <FLASH_Program_HalfWord+0x44>)
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	4a09      	ldr	r2, [pc, #36]	; (8007ccc <FLASH_Program_HalfWord+0x44>)
 8007ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007caa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007cac:	4b07      	ldr	r3, [pc, #28]	; (8007ccc <FLASH_Program_HalfWord+0x44>)
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	4a06      	ldr	r2, [pc, #24]	; (8007ccc <FLASH_Program_HalfWord+0x44>)
 8007cb2:	f043 0301 	orr.w	r3, r3, #1
 8007cb6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	887a      	ldrh	r2, [r7, #2]
 8007cbc:	801a      	strh	r2, [r3, #0]
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	40023c00 	.word	0x40023c00

08007cd0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007cdc:	4b0c      	ldr	r3, [pc, #48]	; (8007d10 <FLASH_Program_Byte+0x40>)
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	4a0b      	ldr	r2, [pc, #44]	; (8007d10 <FLASH_Program_Byte+0x40>)
 8007ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ce6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007ce8:	4b09      	ldr	r3, [pc, #36]	; (8007d10 <FLASH_Program_Byte+0x40>)
 8007cea:	4a09      	ldr	r2, [pc, #36]	; (8007d10 <FLASH_Program_Byte+0x40>)
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007cf0:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <FLASH_Program_Byte+0x40>)
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	4a06      	ldr	r2, [pc, #24]	; (8007d10 <FLASH_Program_Byte+0x40>)
 8007cf6:	f043 0301 	orr.w	r3, r3, #1
 8007cfa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	78fa      	ldrb	r2, [r7, #3]
 8007d00:	701a      	strb	r2, [r3, #0]
}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	40023c00 	.word	0x40023c00

08007d14 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007d14:	b480      	push	{r7}
 8007d16:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007d18:	4b27      	ldr	r3, [pc, #156]	; (8007db8 <FLASH_SetErrorCode+0xa4>)
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	f003 0310 	and.w	r3, r3, #16
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d008      	beq.n	8007d36 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007d24:	4b25      	ldr	r3, [pc, #148]	; (8007dbc <FLASH_SetErrorCode+0xa8>)
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	f043 0310 	orr.w	r3, r3, #16
 8007d2c:	4a23      	ldr	r2, [pc, #140]	; (8007dbc <FLASH_SetErrorCode+0xa8>)
 8007d2e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007d30:	4b21      	ldr	r3, [pc, #132]	; (8007db8 <FLASH_SetErrorCode+0xa4>)
 8007d32:	2210      	movs	r2, #16
 8007d34:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007d36:	4b20      	ldr	r3, [pc, #128]	; (8007db8 <FLASH_SetErrorCode+0xa4>)
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	f003 0320 	and.w	r3, r3, #32
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d008      	beq.n	8007d54 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007d42:	4b1e      	ldr	r3, [pc, #120]	; (8007dbc <FLASH_SetErrorCode+0xa8>)
 8007d44:	69db      	ldr	r3, [r3, #28]
 8007d46:	f043 0308 	orr.w	r3, r3, #8
 8007d4a:	4a1c      	ldr	r2, [pc, #112]	; (8007dbc <FLASH_SetErrorCode+0xa8>)
 8007d4c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007d4e:	4b1a      	ldr	r3, [pc, #104]	; (8007db8 <FLASH_SetErrorCode+0xa4>)
 8007d50:	2220      	movs	r2, #32
 8007d52:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007d54:	4b18      	ldr	r3, [pc, #96]	; (8007db8 <FLASH_SetErrorCode+0xa4>)
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d008      	beq.n	8007d72 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007d60:	4b16      	ldr	r3, [pc, #88]	; (8007dbc <FLASH_SetErrorCode+0xa8>)
 8007d62:	69db      	ldr	r3, [r3, #28]
 8007d64:	f043 0304 	orr.w	r3, r3, #4
 8007d68:	4a14      	ldr	r2, [pc, #80]	; (8007dbc <FLASH_SetErrorCode+0xa8>)
 8007d6a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007d6c:	4b12      	ldr	r3, [pc, #72]	; (8007db8 <FLASH_SetErrorCode+0xa4>)
 8007d6e:	2240      	movs	r2, #64	; 0x40
 8007d70:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007d72:	4b11      	ldr	r3, [pc, #68]	; (8007db8 <FLASH_SetErrorCode+0xa4>)
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d008      	beq.n	8007d90 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007d7e:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <FLASH_SetErrorCode+0xa8>)
 8007d80:	69db      	ldr	r3, [r3, #28]
 8007d82:	f043 0302 	orr.w	r3, r3, #2
 8007d86:	4a0d      	ldr	r2, [pc, #52]	; (8007dbc <FLASH_SetErrorCode+0xa8>)
 8007d88:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007d8a:	4b0b      	ldr	r3, [pc, #44]	; (8007db8 <FLASH_SetErrorCode+0xa4>)
 8007d8c:	2280      	movs	r2, #128	; 0x80
 8007d8e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007d90:	4b09      	ldr	r3, [pc, #36]	; (8007db8 <FLASH_SetErrorCode+0xa4>)
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	f003 0302 	and.w	r3, r3, #2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d008      	beq.n	8007dae <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007d9c:	4b07      	ldr	r3, [pc, #28]	; (8007dbc <FLASH_SetErrorCode+0xa8>)
 8007d9e:	69db      	ldr	r3, [r3, #28]
 8007da0:	f043 0320 	orr.w	r3, r3, #32
 8007da4:	4a05      	ldr	r2, [pc, #20]	; (8007dbc <FLASH_SetErrorCode+0xa8>)
 8007da6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007da8:	4b03      	ldr	r3, [pc, #12]	; (8007db8 <FLASH_SetErrorCode+0xa4>)
 8007daa:	2202      	movs	r2, #2
 8007dac:	60da      	str	r2, [r3, #12]
  }
}
 8007dae:	bf00      	nop
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	40023c00 	.word	0x40023c00
 8007dbc:	20002358 	.word	0x20002358

08007dc0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007dd2:	4b31      	ldr	r3, [pc, #196]	; (8007e98 <HAL_FLASHEx_Erase+0xd8>)
 8007dd4:	7e1b      	ldrb	r3, [r3, #24]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d101      	bne.n	8007dde <HAL_FLASHEx_Erase+0x1e>
 8007dda:	2302      	movs	r3, #2
 8007ddc:	e058      	b.n	8007e90 <HAL_FLASHEx_Erase+0xd0>
 8007dde:	4b2e      	ldr	r3, [pc, #184]	; (8007e98 <HAL_FLASHEx_Erase+0xd8>)
 8007de0:	2201      	movs	r2, #1
 8007de2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007de4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007de8:	f7ff feba 	bl	8007b60 <FLASH_WaitForLastOperation>
 8007dec:	4603      	mov	r3, r0
 8007dee:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d148      	bne.n	8007e88 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007dfc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d115      	bne.n	8007e32 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	4619      	mov	r1, r3
 8007e12:	4610      	mov	r0, r2
 8007e14:	f000 f844 	bl	8007ea0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007e18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007e1c:	f7ff fea0 	bl	8007b60 <FLASH_WaitForLastOperation>
 8007e20:	4603      	mov	r3, r0
 8007e22:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007e24:	4b1d      	ldr	r3, [pc, #116]	; (8007e9c <HAL_FLASHEx_Erase+0xdc>)
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	4a1c      	ldr	r2, [pc, #112]	; (8007e9c <HAL_FLASHEx_Erase+0xdc>)
 8007e2a:	f023 0304 	bic.w	r3, r3, #4
 8007e2e:	6113      	str	r3, [r2, #16]
 8007e30:	e028      	b.n	8007e84 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	60bb      	str	r3, [r7, #8]
 8007e38:	e01c      	b.n	8007e74 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	4619      	mov	r1, r3
 8007e42:	68b8      	ldr	r0, [r7, #8]
 8007e44:	f000 f850 	bl	8007ee8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007e48:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007e4c:	f7ff fe88 	bl	8007b60 <FLASH_WaitForLastOperation>
 8007e50:	4603      	mov	r3, r0
 8007e52:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007e54:	4b11      	ldr	r3, [pc, #68]	; (8007e9c <HAL_FLASHEx_Erase+0xdc>)
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	4a10      	ldr	r2, [pc, #64]	; (8007e9c <HAL_FLASHEx_Erase+0xdc>)
 8007e5a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8007e5e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d003      	beq.n	8007e6e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	601a      	str	r2, [r3, #0]
          break;
 8007e6c:	e00a      	b.n	8007e84 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	3301      	adds	r3, #1
 8007e72:	60bb      	str	r3, [r7, #8]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	68da      	ldr	r2, [r3, #12]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d3da      	bcc.n	8007e3a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007e84:	f000 f878 	bl	8007f78 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007e88:	4b03      	ldr	r3, [pc, #12]	; (8007e98 <HAL_FLASHEx_Erase+0xd8>)
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	761a      	strb	r2, [r3, #24]

  return status;
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	20002358 	.word	0x20002358
 8007e9c:	40023c00 	.word	0x40023c00

08007ea0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	6039      	str	r1, [r7, #0]
 8007eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007eac:	4b0d      	ldr	r3, [pc, #52]	; (8007ee4 <FLASH_MassErase+0x44>)
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	4a0c      	ldr	r2, [pc, #48]	; (8007ee4 <FLASH_MassErase+0x44>)
 8007eb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eb6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007eb8:	4b0a      	ldr	r3, [pc, #40]	; (8007ee4 <FLASH_MassErase+0x44>)
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	4a09      	ldr	r2, [pc, #36]	; (8007ee4 <FLASH_MassErase+0x44>)
 8007ebe:	f043 0304 	orr.w	r3, r3, #4
 8007ec2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8007ec4:	4b07      	ldr	r3, [pc, #28]	; (8007ee4 <FLASH_MassErase+0x44>)
 8007ec6:	691a      	ldr	r2, [r3, #16]
 8007ec8:	79fb      	ldrb	r3, [r7, #7]
 8007eca:	021b      	lsls	r3, r3, #8
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	4a05      	ldr	r2, [pc, #20]	; (8007ee4 <FLASH_MassErase+0x44>)
 8007ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ed4:	6113      	str	r3, [r2, #16]
}
 8007ed6:	bf00      	nop
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	40023c00 	.word	0x40023c00

08007ee8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007ef8:	78fb      	ldrb	r3, [r7, #3]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d102      	bne.n	8007f04 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8007efe:	2300      	movs	r3, #0
 8007f00:	60fb      	str	r3, [r7, #12]
 8007f02:	e010      	b.n	8007f26 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007f04:	78fb      	ldrb	r3, [r7, #3]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d103      	bne.n	8007f12 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007f0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	e009      	b.n	8007f26 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007f12:	78fb      	ldrb	r3, [r7, #3]
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d103      	bne.n	8007f20 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f1c:	60fb      	str	r3, [r7, #12]
 8007f1e:	e002      	b.n	8007f26 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007f20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007f24:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007f26:	4b13      	ldr	r3, [pc, #76]	; (8007f74 <FLASH_Erase_Sector+0x8c>)
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	4a12      	ldr	r2, [pc, #72]	; (8007f74 <FLASH_Erase_Sector+0x8c>)
 8007f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f30:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007f32:	4b10      	ldr	r3, [pc, #64]	; (8007f74 <FLASH_Erase_Sector+0x8c>)
 8007f34:	691a      	ldr	r2, [r3, #16]
 8007f36:	490f      	ldr	r1, [pc, #60]	; (8007f74 <FLASH_Erase_Sector+0x8c>)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007f3e:	4b0d      	ldr	r3, [pc, #52]	; (8007f74 <FLASH_Erase_Sector+0x8c>)
 8007f40:	691b      	ldr	r3, [r3, #16]
 8007f42:	4a0c      	ldr	r2, [pc, #48]	; (8007f74 <FLASH_Erase_Sector+0x8c>)
 8007f44:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007f48:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007f4a:	4b0a      	ldr	r3, [pc, #40]	; (8007f74 <FLASH_Erase_Sector+0x8c>)
 8007f4c:	691a      	ldr	r2, [r3, #16]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	00db      	lsls	r3, r3, #3
 8007f52:	4313      	orrs	r3, r2
 8007f54:	4a07      	ldr	r2, [pc, #28]	; (8007f74 <FLASH_Erase_Sector+0x8c>)
 8007f56:	f043 0302 	orr.w	r3, r3, #2
 8007f5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007f5c:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <FLASH_Erase_Sector+0x8c>)
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	4a04      	ldr	r2, [pc, #16]	; (8007f74 <FLASH_Erase_Sector+0x8c>)
 8007f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f66:	6113      	str	r3, [r2, #16]
}
 8007f68:	bf00      	nop
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr
 8007f74:	40023c00 	.word	0x40023c00

08007f78 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8007f7c:	4b20      	ldr	r3, [pc, #128]	; (8008000 <FLASH_FlushCaches+0x88>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d017      	beq.n	8007fb8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007f88:	4b1d      	ldr	r3, [pc, #116]	; (8008000 <FLASH_FlushCaches+0x88>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a1c      	ldr	r2, [pc, #112]	; (8008000 <FLASH_FlushCaches+0x88>)
 8007f8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f92:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007f94:	4b1a      	ldr	r3, [pc, #104]	; (8008000 <FLASH_FlushCaches+0x88>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a19      	ldr	r2, [pc, #100]	; (8008000 <FLASH_FlushCaches+0x88>)
 8007f9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007f9e:	6013      	str	r3, [r2, #0]
 8007fa0:	4b17      	ldr	r3, [pc, #92]	; (8008000 <FLASH_FlushCaches+0x88>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a16      	ldr	r2, [pc, #88]	; (8008000 <FLASH_FlushCaches+0x88>)
 8007fa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007faa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007fac:	4b14      	ldr	r3, [pc, #80]	; (8008000 <FLASH_FlushCaches+0x88>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a13      	ldr	r2, [pc, #76]	; (8008000 <FLASH_FlushCaches+0x88>)
 8007fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007fb6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007fb8:	4b11      	ldr	r3, [pc, #68]	; (8008000 <FLASH_FlushCaches+0x88>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d017      	beq.n	8007ff4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007fc4:	4b0e      	ldr	r3, [pc, #56]	; (8008000 <FLASH_FlushCaches+0x88>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a0d      	ldr	r2, [pc, #52]	; (8008000 <FLASH_FlushCaches+0x88>)
 8007fca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fce:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007fd0:	4b0b      	ldr	r3, [pc, #44]	; (8008000 <FLASH_FlushCaches+0x88>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a0a      	ldr	r2, [pc, #40]	; (8008000 <FLASH_FlushCaches+0x88>)
 8007fd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007fda:	6013      	str	r3, [r2, #0]
 8007fdc:	4b08      	ldr	r3, [pc, #32]	; (8008000 <FLASH_FlushCaches+0x88>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a07      	ldr	r2, [pc, #28]	; (8008000 <FLASH_FlushCaches+0x88>)
 8007fe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fe6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007fe8:	4b05      	ldr	r3, [pc, #20]	; (8008000 <FLASH_FlushCaches+0x88>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a04      	ldr	r2, [pc, #16]	; (8008000 <FLASH_FlushCaches+0x88>)
 8007fee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ff2:	6013      	str	r3, [r2, #0]
  }
}
 8007ff4:	bf00      	nop
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	40023c00 	.word	0x40023c00

08008004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008004:	b480      	push	{r7}
 8008006:	b089      	sub	sp, #36	; 0x24
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800800e:	2300      	movs	r3, #0
 8008010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008012:	2300      	movs	r3, #0
 8008014:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008016:	2300      	movs	r3, #0
 8008018:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800801a:	2300      	movs	r3, #0
 800801c:	61fb      	str	r3, [r7, #28]
 800801e:	e16b      	b.n	80082f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008020:	2201      	movs	r2, #1
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	fa02 f303 	lsl.w	r3, r2, r3
 8008028:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	4013      	ands	r3, r2
 8008032:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	429a      	cmp	r2, r3
 800803a:	f040 815a 	bne.w	80082f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f003 0303 	and.w	r3, r3, #3
 8008046:	2b01      	cmp	r3, #1
 8008048:	d005      	beq.n	8008056 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008052:	2b02      	cmp	r3, #2
 8008054:	d130      	bne.n	80080b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	005b      	lsls	r3, r3, #1
 8008060:	2203      	movs	r2, #3
 8008062:	fa02 f303 	lsl.w	r3, r2, r3
 8008066:	43db      	mvns	r3, r3
 8008068:	69ba      	ldr	r2, [r7, #24]
 800806a:	4013      	ands	r3, r2
 800806c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	68da      	ldr	r2, [r3, #12]
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	005b      	lsls	r3, r3, #1
 8008076:	fa02 f303 	lsl.w	r3, r2, r3
 800807a:	69ba      	ldr	r2, [r7, #24]
 800807c:	4313      	orrs	r3, r2
 800807e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800808c:	2201      	movs	r2, #1
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	fa02 f303 	lsl.w	r3, r2, r3
 8008094:	43db      	mvns	r3, r3
 8008096:	69ba      	ldr	r2, [r7, #24]
 8008098:	4013      	ands	r3, r2
 800809a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	091b      	lsrs	r3, r3, #4
 80080a2:	f003 0201 	and.w	r2, r3, #1
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	fa02 f303 	lsl.w	r3, r2, r3
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	69ba      	ldr	r2, [r7, #24]
 80080b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f003 0303 	and.w	r3, r3, #3
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d017      	beq.n	80080f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	005b      	lsls	r3, r3, #1
 80080ce:	2203      	movs	r2, #3
 80080d0:	fa02 f303 	lsl.w	r3, r2, r3
 80080d4:	43db      	mvns	r3, r3
 80080d6:	69ba      	ldr	r2, [r7, #24]
 80080d8:	4013      	ands	r3, r2
 80080da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	689a      	ldr	r2, [r3, #8]
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	005b      	lsls	r3, r3, #1
 80080e4:	fa02 f303 	lsl.w	r3, r2, r3
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	f003 0303 	and.w	r3, r3, #3
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d123      	bne.n	8008148 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008100:	69fb      	ldr	r3, [r7, #28]
 8008102:	08da      	lsrs	r2, r3, #3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	3208      	adds	r2, #8
 8008108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800810c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	f003 0307 	and.w	r3, r3, #7
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	220f      	movs	r2, #15
 8008118:	fa02 f303 	lsl.w	r3, r2, r3
 800811c:	43db      	mvns	r3, r3
 800811e:	69ba      	ldr	r2, [r7, #24]
 8008120:	4013      	ands	r3, r2
 8008122:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	691a      	ldr	r2, [r3, #16]
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	f003 0307 	and.w	r3, r3, #7
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	fa02 f303 	lsl.w	r3, r2, r3
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	4313      	orrs	r3, r2
 8008138:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	08da      	lsrs	r2, r3, #3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	3208      	adds	r2, #8
 8008142:	69b9      	ldr	r1, [r7, #24]
 8008144:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	005b      	lsls	r3, r3, #1
 8008152:	2203      	movs	r2, #3
 8008154:	fa02 f303 	lsl.w	r3, r2, r3
 8008158:	43db      	mvns	r3, r3
 800815a:	69ba      	ldr	r2, [r7, #24]
 800815c:	4013      	ands	r3, r2
 800815e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	f003 0203 	and.w	r2, r3, #3
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	005b      	lsls	r3, r3, #1
 800816c:	fa02 f303 	lsl.w	r3, r2, r3
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	4313      	orrs	r3, r2
 8008174:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	69ba      	ldr	r2, [r7, #24]
 800817a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008184:	2b00      	cmp	r3, #0
 8008186:	f000 80b4 	beq.w	80082f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800818a:	2300      	movs	r3, #0
 800818c:	60fb      	str	r3, [r7, #12]
 800818e:	4b60      	ldr	r3, [pc, #384]	; (8008310 <HAL_GPIO_Init+0x30c>)
 8008190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008192:	4a5f      	ldr	r2, [pc, #380]	; (8008310 <HAL_GPIO_Init+0x30c>)
 8008194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008198:	6453      	str	r3, [r2, #68]	; 0x44
 800819a:	4b5d      	ldr	r3, [pc, #372]	; (8008310 <HAL_GPIO_Init+0x30c>)
 800819c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800819e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081a2:	60fb      	str	r3, [r7, #12]
 80081a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80081a6:	4a5b      	ldr	r2, [pc, #364]	; (8008314 <HAL_GPIO_Init+0x310>)
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	089b      	lsrs	r3, r3, #2
 80081ac:	3302      	adds	r3, #2
 80081ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	f003 0303 	and.w	r3, r3, #3
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	220f      	movs	r2, #15
 80081be:	fa02 f303 	lsl.w	r3, r2, r3
 80081c2:	43db      	mvns	r3, r3
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	4013      	ands	r3, r2
 80081c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a52      	ldr	r2, [pc, #328]	; (8008318 <HAL_GPIO_Init+0x314>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d02b      	beq.n	800822a <HAL_GPIO_Init+0x226>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a51      	ldr	r2, [pc, #324]	; (800831c <HAL_GPIO_Init+0x318>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d025      	beq.n	8008226 <HAL_GPIO_Init+0x222>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a50      	ldr	r2, [pc, #320]	; (8008320 <HAL_GPIO_Init+0x31c>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d01f      	beq.n	8008222 <HAL_GPIO_Init+0x21e>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a4f      	ldr	r2, [pc, #316]	; (8008324 <HAL_GPIO_Init+0x320>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d019      	beq.n	800821e <HAL_GPIO_Init+0x21a>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a4e      	ldr	r2, [pc, #312]	; (8008328 <HAL_GPIO_Init+0x324>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d013      	beq.n	800821a <HAL_GPIO_Init+0x216>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a4d      	ldr	r2, [pc, #308]	; (800832c <HAL_GPIO_Init+0x328>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d00d      	beq.n	8008216 <HAL_GPIO_Init+0x212>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a4c      	ldr	r2, [pc, #304]	; (8008330 <HAL_GPIO_Init+0x32c>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d007      	beq.n	8008212 <HAL_GPIO_Init+0x20e>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a4b      	ldr	r2, [pc, #300]	; (8008334 <HAL_GPIO_Init+0x330>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d101      	bne.n	800820e <HAL_GPIO_Init+0x20a>
 800820a:	2307      	movs	r3, #7
 800820c:	e00e      	b.n	800822c <HAL_GPIO_Init+0x228>
 800820e:	2308      	movs	r3, #8
 8008210:	e00c      	b.n	800822c <HAL_GPIO_Init+0x228>
 8008212:	2306      	movs	r3, #6
 8008214:	e00a      	b.n	800822c <HAL_GPIO_Init+0x228>
 8008216:	2305      	movs	r3, #5
 8008218:	e008      	b.n	800822c <HAL_GPIO_Init+0x228>
 800821a:	2304      	movs	r3, #4
 800821c:	e006      	b.n	800822c <HAL_GPIO_Init+0x228>
 800821e:	2303      	movs	r3, #3
 8008220:	e004      	b.n	800822c <HAL_GPIO_Init+0x228>
 8008222:	2302      	movs	r3, #2
 8008224:	e002      	b.n	800822c <HAL_GPIO_Init+0x228>
 8008226:	2301      	movs	r3, #1
 8008228:	e000      	b.n	800822c <HAL_GPIO_Init+0x228>
 800822a:	2300      	movs	r3, #0
 800822c:	69fa      	ldr	r2, [r7, #28]
 800822e:	f002 0203 	and.w	r2, r2, #3
 8008232:	0092      	lsls	r2, r2, #2
 8008234:	4093      	lsls	r3, r2
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	4313      	orrs	r3, r2
 800823a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800823c:	4935      	ldr	r1, [pc, #212]	; (8008314 <HAL_GPIO_Init+0x310>)
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	089b      	lsrs	r3, r3, #2
 8008242:	3302      	adds	r3, #2
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800824a:	4b3b      	ldr	r3, [pc, #236]	; (8008338 <HAL_GPIO_Init+0x334>)
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	43db      	mvns	r3, r3
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	4013      	ands	r3, r2
 8008258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d003      	beq.n	800826e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008266:	69ba      	ldr	r2, [r7, #24]
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	4313      	orrs	r3, r2
 800826c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800826e:	4a32      	ldr	r2, [pc, #200]	; (8008338 <HAL_GPIO_Init+0x334>)
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008274:	4b30      	ldr	r3, [pc, #192]	; (8008338 <HAL_GPIO_Init+0x334>)
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	43db      	mvns	r3, r3
 800827e:	69ba      	ldr	r2, [r7, #24]
 8008280:	4013      	ands	r3, r2
 8008282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d003      	beq.n	8008298 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008290:	69ba      	ldr	r2, [r7, #24]
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	4313      	orrs	r3, r2
 8008296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008298:	4a27      	ldr	r2, [pc, #156]	; (8008338 <HAL_GPIO_Init+0x334>)
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800829e:	4b26      	ldr	r3, [pc, #152]	; (8008338 <HAL_GPIO_Init+0x334>)
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	43db      	mvns	r3, r3
 80082a8:	69ba      	ldr	r2, [r7, #24]
 80082aa:	4013      	ands	r3, r2
 80082ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80082ba:	69ba      	ldr	r2, [r7, #24]
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	4313      	orrs	r3, r2
 80082c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80082c2:	4a1d      	ldr	r2, [pc, #116]	; (8008338 <HAL_GPIO_Init+0x334>)
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80082c8:	4b1b      	ldr	r3, [pc, #108]	; (8008338 <HAL_GPIO_Init+0x334>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	43db      	mvns	r3, r3
 80082d2:	69ba      	ldr	r2, [r7, #24]
 80082d4:	4013      	ands	r3, r2
 80082d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d003      	beq.n	80082ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80082e4:	69ba      	ldr	r2, [r7, #24]
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80082ec:	4a12      	ldr	r2, [pc, #72]	; (8008338 <HAL_GPIO_Init+0x334>)
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	3301      	adds	r3, #1
 80082f6:	61fb      	str	r3, [r7, #28]
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	2b0f      	cmp	r3, #15
 80082fc:	f67f ae90 	bls.w	8008020 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008300:	bf00      	nop
 8008302:	bf00      	nop
 8008304:	3724      	adds	r7, #36	; 0x24
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	40023800 	.word	0x40023800
 8008314:	40013800 	.word	0x40013800
 8008318:	40020000 	.word	0x40020000
 800831c:	40020400 	.word	0x40020400
 8008320:	40020800 	.word	0x40020800
 8008324:	40020c00 	.word	0x40020c00
 8008328:	40021000 	.word	0x40021000
 800832c:	40021400 	.word	0x40021400
 8008330:	40021800 	.word	0x40021800
 8008334:	40021c00 	.word	0x40021c00
 8008338:	40013c00 	.word	0x40013c00

0800833c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800833c:	b480      	push	{r7}
 800833e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008340:	4b03      	ldr	r3, [pc, #12]	; (8008350 <HAL_RCC_GetHCLKFreq+0x14>)
 8008342:	681b      	ldr	r3, [r3, #0]
}
 8008344:	4618      	mov	r0, r3
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	200009dc 	.word	0x200009dc

08008354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008358:	f7ff fff0 	bl	800833c <HAL_RCC_GetHCLKFreq>
 800835c:	4602      	mov	r2, r0
 800835e:	4b05      	ldr	r3, [pc, #20]	; (8008374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	0a9b      	lsrs	r3, r3, #10
 8008364:	f003 0307 	and.w	r3, r3, #7
 8008368:	4903      	ldr	r1, [pc, #12]	; (8008378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800836a:	5ccb      	ldrb	r3, [r1, r3]
 800836c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008370:	4618      	mov	r0, r3
 8008372:	bd80      	pop	{r7, pc}
 8008374:	40023800 	.word	0x40023800
 8008378:	0800edb4 	.word	0x0800edb4

0800837c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008380:	f7ff ffdc 	bl	800833c <HAL_RCC_GetHCLKFreq>
 8008384:	4602      	mov	r2, r0
 8008386:	4b05      	ldr	r3, [pc, #20]	; (800839c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	0b5b      	lsrs	r3, r3, #13
 800838c:	f003 0307 	and.w	r3, r3, #7
 8008390:	4903      	ldr	r1, [pc, #12]	; (80083a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008392:	5ccb      	ldrb	r3, [r1, r3]
 8008394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008398:	4618      	mov	r0, r3
 800839a:	bd80      	pop	{r7, pc}
 800839c:	40023800 	.word	0x40023800
 80083a0:	0800edb4 	.word	0x0800edb4

080083a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e03f      	b.n	8008436 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d106      	bne.n	80083d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7fd fef0 	bl	80061b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2224      	movs	r2, #36	; 0x24
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68da      	ldr	r2, [r3, #12]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fa39 	bl	8008860 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	691a      	ldr	r2, [r3, #16]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	695a      	ldr	r2, [r3, #20]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800840c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68da      	ldr	r2, [r3, #12]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800841c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2220      	movs	r2, #32
 8008428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2220      	movs	r2, #32
 8008430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b08a      	sub	sp, #40	; 0x28
 8008442:	af02      	add	r7, sp, #8
 8008444:	60f8      	str	r0, [r7, #12]
 8008446:	60b9      	str	r1, [r7, #8]
 8008448:	603b      	str	r3, [r7, #0]
 800844a:	4613      	mov	r3, r2
 800844c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800844e:	2300      	movs	r3, #0
 8008450:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b20      	cmp	r3, #32
 800845c:	d17c      	bne.n	8008558 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d002      	beq.n	800846a <HAL_UART_Transmit+0x2c>
 8008464:	88fb      	ldrh	r3, [r7, #6]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e075      	b.n	800855a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008474:	2b01      	cmp	r3, #1
 8008476:	d101      	bne.n	800847c <HAL_UART_Transmit+0x3e>
 8008478:	2302      	movs	r3, #2
 800847a:	e06e      	b.n	800855a <HAL_UART_Transmit+0x11c>
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2221      	movs	r2, #33	; 0x21
 800848e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008492:	f7fe fa4f 	bl	8006934 <HAL_GetTick>
 8008496:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	88fa      	ldrh	r2, [r7, #6]
 800849c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	88fa      	ldrh	r2, [r7, #6]
 80084a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ac:	d108      	bne.n	80084c0 <HAL_UART_Transmit+0x82>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d104      	bne.n	80084c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80084b6:	2300      	movs	r3, #0
 80084b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	61bb      	str	r3, [r7, #24]
 80084be:	e003      	b.n	80084c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084c4:	2300      	movs	r3, #0
 80084c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80084d0:	e02a      	b.n	8008528 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2200      	movs	r2, #0
 80084da:	2180      	movs	r1, #128	; 0x80
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 f912 	bl	8008706 <UART_WaitOnFlagUntilTimeout>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e036      	b.n	800855a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10b      	bne.n	800850a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	881b      	ldrh	r3, [r3, #0]
 80084f6:	461a      	mov	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008500:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	3302      	adds	r3, #2
 8008506:	61bb      	str	r3, [r7, #24]
 8008508:	e007      	b.n	800851a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	781a      	ldrb	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	3301      	adds	r3, #1
 8008518:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800851e:	b29b      	uxth	r3, r3
 8008520:	3b01      	subs	r3, #1
 8008522:	b29a      	uxth	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800852c:	b29b      	uxth	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1cf      	bne.n	80084d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2200      	movs	r2, #0
 800853a:	2140      	movs	r1, #64	; 0x40
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f000 f8e2 	bl	8008706 <UART_WaitOnFlagUntilTimeout>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008548:	2303      	movs	r3, #3
 800854a:	e006      	b.n	800855a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2220      	movs	r2, #32
 8008550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008554:	2300      	movs	r3, #0
 8008556:	e000      	b.n	800855a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008558:	2302      	movs	r3, #2
  }
}
 800855a:	4618      	mov	r0, r3
 800855c:	3720      	adds	r7, #32
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b08a      	sub	sp, #40	; 0x28
 8008566:	af02      	add	r7, sp, #8
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	603b      	str	r3, [r7, #0]
 800856e:	4613      	mov	r3, r2
 8008570:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008572:	2300      	movs	r3, #0
 8008574:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b20      	cmp	r3, #32
 8008580:	f040 808c 	bne.w	800869c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <HAL_UART_Receive+0x2e>
 800858a:	88fb      	ldrh	r3, [r7, #6]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d101      	bne.n	8008594 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e084      	b.n	800869e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800859a:	2b01      	cmp	r3, #1
 800859c:	d101      	bne.n	80085a2 <HAL_UART_Receive+0x40>
 800859e:	2302      	movs	r3, #2
 80085a0:	e07d      	b.n	800869e <HAL_UART_Receive+0x13c>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2222      	movs	r2, #34	; 0x22
 80085b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085be:	f7fe f9b9 	bl	8006934 <HAL_GetTick>
 80085c2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	88fa      	ldrh	r2, [r7, #6]
 80085c8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	88fa      	ldrh	r2, [r7, #6]
 80085ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d8:	d108      	bne.n	80085ec <HAL_UART_Receive+0x8a>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d104      	bne.n	80085ec <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80085e2:	2300      	movs	r3, #0
 80085e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	61bb      	str	r3, [r7, #24]
 80085ea:	e003      	b.n	80085f4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085f0:	2300      	movs	r3, #0
 80085f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80085fc:	e043      	b.n	8008686 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2200      	movs	r2, #0
 8008606:	2120      	movs	r1, #32
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 f87c 	bl	8008706 <UART_WaitOnFlagUntilTimeout>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008614:	2303      	movs	r3, #3
 8008616:	e042      	b.n	800869e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10c      	bne.n	8008638 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	b29b      	uxth	r3, r3
 8008626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800862a:	b29a      	uxth	r2, r3
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	3302      	adds	r3, #2
 8008634:	61bb      	str	r3, [r7, #24]
 8008636:	e01f      	b.n	8008678 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008640:	d007      	beq.n	8008652 <HAL_UART_Receive+0xf0>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d10a      	bne.n	8008660 <HAL_UART_Receive+0xfe>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d106      	bne.n	8008660 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	b2da      	uxtb	r2, r3
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	701a      	strb	r2, [r3, #0]
 800865e:	e008      	b.n	8008672 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	b2db      	uxtb	r3, r3
 8008668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800866c:	b2da      	uxtb	r2, r3
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	3301      	adds	r3, #1
 8008676:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800867c:	b29b      	uxth	r3, r3
 800867e:	3b01      	subs	r3, #1
 8008680:	b29a      	uxth	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800868a:	b29b      	uxth	r3, r3
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1b6      	bne.n	80085fe <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2220      	movs	r2, #32
 8008694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	e000      	b.n	800869e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800869c:	2302      	movs	r3, #2
  }
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3720      	adds	r7, #32
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b084      	sub	sp, #16
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	60f8      	str	r0, [r7, #12]
 80086ae:	60b9      	str	r1, [r7, #8]
 80086b0:	4613      	mov	r3, r2
 80086b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b20      	cmp	r3, #32
 80086be:	d11d      	bne.n	80086fc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d002      	beq.n	80086cc <HAL_UART_Receive_IT+0x26>
 80086c6:	88fb      	ldrh	r3, [r7, #6]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d101      	bne.n	80086d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e016      	b.n	80086fe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d101      	bne.n	80086de <HAL_UART_Receive_IT+0x38>
 80086da:	2302      	movs	r3, #2
 80086dc:	e00f      	b.n	80086fe <HAL_UART_Receive_IT+0x58>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2201      	movs	r2, #1
 80086e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80086ec:	88fb      	ldrh	r3, [r7, #6]
 80086ee:	461a      	mov	r2, r3
 80086f0:	68b9      	ldr	r1, [r7, #8]
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f000 f875 	bl	80087e2 <UART_Start_Receive_IT>
 80086f8:	4603      	mov	r3, r0
 80086fa:	e000      	b.n	80086fe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80086fc:	2302      	movs	r3, #2
  }
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b090      	sub	sp, #64	; 0x40
 800870a:	af00      	add	r7, sp, #0
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	603b      	str	r3, [r7, #0]
 8008712:	4613      	mov	r3, r2
 8008714:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008716:	e050      	b.n	80087ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800871a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800871e:	d04c      	beq.n	80087ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008722:	2b00      	cmp	r3, #0
 8008724:	d007      	beq.n	8008736 <UART_WaitOnFlagUntilTimeout+0x30>
 8008726:	f7fe f905 	bl	8006934 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008732:	429a      	cmp	r2, r3
 8008734:	d241      	bcs.n	80087ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	330c      	adds	r3, #12
 800873c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008740:	e853 3f00 	ldrex	r3, [r3]
 8008744:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008748:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800874c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	330c      	adds	r3, #12
 8008754:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008756:	637a      	str	r2, [r7, #52]	; 0x34
 8008758:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800875c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800875e:	e841 2300 	strex	r3, r2, [r1]
 8008762:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1e5      	bne.n	8008736 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	3314      	adds	r3, #20
 8008770:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	e853 3f00 	ldrex	r3, [r3]
 8008778:	613b      	str	r3, [r7, #16]
   return(result);
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	f023 0301 	bic.w	r3, r3, #1
 8008780:	63bb      	str	r3, [r7, #56]	; 0x38
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	3314      	adds	r3, #20
 8008788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800878a:	623a      	str	r2, [r7, #32]
 800878c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878e:	69f9      	ldr	r1, [r7, #28]
 8008790:	6a3a      	ldr	r2, [r7, #32]
 8008792:	e841 2300 	strex	r3, r2, [r1]
 8008796:	61bb      	str	r3, [r7, #24]
   return(result);
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1e5      	bne.n	800876a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2220      	movs	r2, #32
 80087a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2220      	movs	r2, #32
 80087aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e00f      	b.n	80087da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	4013      	ands	r3, r2
 80087c4:	68ba      	ldr	r2, [r7, #8]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	bf0c      	ite	eq
 80087ca:	2301      	moveq	r3, #1
 80087cc:	2300      	movne	r3, #0
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	461a      	mov	r2, r3
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d09f      	beq.n	8008718 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3740      	adds	r7, #64	; 0x40
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b085      	sub	sp, #20
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	60f8      	str	r0, [r7, #12]
 80087ea:	60b9      	str	r1, [r7, #8]
 80087ec:	4613      	mov	r3, r2
 80087ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	88fa      	ldrh	r2, [r7, #6]
 80087fa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	88fa      	ldrh	r2, [r7, #6]
 8008800:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2222      	movs	r2, #34	; 0x22
 800880c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d007      	beq.n	8008830 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800882e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	695a      	ldr	r2, [r3, #20]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f042 0201 	orr.w	r2, r2, #1
 800883e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68da      	ldr	r2, [r3, #12]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f042 0220 	orr.w	r2, r2, #32
 800884e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
	...

08008860 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008864:	b0c0      	sub	sp, #256	; 0x100
 8008866:	af00      	add	r7, sp, #0
 8008868:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800886c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800887c:	68d9      	ldr	r1, [r3, #12]
 800887e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	ea40 0301 	orr.w	r3, r0, r1
 8008888:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800888a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800888e:	689a      	ldr	r2, [r3, #8]
 8008890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	431a      	orrs	r2, r3
 8008898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	431a      	orrs	r2, r3
 80088a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80088ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80088b8:	f021 010c 	bic.w	r1, r1, #12
 80088bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80088c6:	430b      	orrs	r3, r1
 80088c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	695b      	ldr	r3, [r3, #20]
 80088d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80088d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088da:	6999      	ldr	r1, [r3, #24]
 80088dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	ea40 0301 	orr.w	r3, r0, r1
 80088e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80088e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	4b8f      	ldr	r3, [pc, #572]	; (8008b2c <UART_SetConfig+0x2cc>)
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d005      	beq.n	8008900 <UART_SetConfig+0xa0>
 80088f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	4b8d      	ldr	r3, [pc, #564]	; (8008b30 <UART_SetConfig+0x2d0>)
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d104      	bne.n	800890a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008900:	f7ff fd3c 	bl	800837c <HAL_RCC_GetPCLK2Freq>
 8008904:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008908:	e003      	b.n	8008912 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800890a:	f7ff fd23 	bl	8008354 <HAL_RCC_GetPCLK1Freq>
 800890e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800891c:	f040 810c 	bne.w	8008b38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008924:	2200      	movs	r2, #0
 8008926:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800892a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800892e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008932:	4622      	mov	r2, r4
 8008934:	462b      	mov	r3, r5
 8008936:	1891      	adds	r1, r2, r2
 8008938:	65b9      	str	r1, [r7, #88]	; 0x58
 800893a:	415b      	adcs	r3, r3
 800893c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800893e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008942:	4621      	mov	r1, r4
 8008944:	eb12 0801 	adds.w	r8, r2, r1
 8008948:	4629      	mov	r1, r5
 800894a:	eb43 0901 	adc.w	r9, r3, r1
 800894e:	f04f 0200 	mov.w	r2, #0
 8008952:	f04f 0300 	mov.w	r3, #0
 8008956:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800895a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800895e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008962:	4690      	mov	r8, r2
 8008964:	4699      	mov	r9, r3
 8008966:	4623      	mov	r3, r4
 8008968:	eb18 0303 	adds.w	r3, r8, r3
 800896c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008970:	462b      	mov	r3, r5
 8008972:	eb49 0303 	adc.w	r3, r9, r3
 8008976:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800897a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008986:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800898a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800898e:	460b      	mov	r3, r1
 8008990:	18db      	adds	r3, r3, r3
 8008992:	653b      	str	r3, [r7, #80]	; 0x50
 8008994:	4613      	mov	r3, r2
 8008996:	eb42 0303 	adc.w	r3, r2, r3
 800899a:	657b      	str	r3, [r7, #84]	; 0x54
 800899c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80089a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80089a4:	f7f8 f950 	bl	8000c48 <__aeabi_uldivmod>
 80089a8:	4602      	mov	r2, r0
 80089aa:	460b      	mov	r3, r1
 80089ac:	4b61      	ldr	r3, [pc, #388]	; (8008b34 <UART_SetConfig+0x2d4>)
 80089ae:	fba3 2302 	umull	r2, r3, r3, r2
 80089b2:	095b      	lsrs	r3, r3, #5
 80089b4:	011c      	lsls	r4, r3, #4
 80089b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089ba:	2200      	movs	r2, #0
 80089bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80089c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80089c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80089c8:	4642      	mov	r2, r8
 80089ca:	464b      	mov	r3, r9
 80089cc:	1891      	adds	r1, r2, r2
 80089ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80089d0:	415b      	adcs	r3, r3
 80089d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80089d8:	4641      	mov	r1, r8
 80089da:	eb12 0a01 	adds.w	sl, r2, r1
 80089de:	4649      	mov	r1, r9
 80089e0:	eb43 0b01 	adc.w	fp, r3, r1
 80089e4:	f04f 0200 	mov.w	r2, #0
 80089e8:	f04f 0300 	mov.w	r3, #0
 80089ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80089f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80089f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089f8:	4692      	mov	sl, r2
 80089fa:	469b      	mov	fp, r3
 80089fc:	4643      	mov	r3, r8
 80089fe:	eb1a 0303 	adds.w	r3, sl, r3
 8008a02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a06:	464b      	mov	r3, r9
 8008a08:	eb4b 0303 	adc.w	r3, fp, r3
 8008a0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a1c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008a20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008a24:	460b      	mov	r3, r1
 8008a26:	18db      	adds	r3, r3, r3
 8008a28:	643b      	str	r3, [r7, #64]	; 0x40
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	eb42 0303 	adc.w	r3, r2, r3
 8008a30:	647b      	str	r3, [r7, #68]	; 0x44
 8008a32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008a3a:	f7f8 f905 	bl	8000c48 <__aeabi_uldivmod>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	4611      	mov	r1, r2
 8008a44:	4b3b      	ldr	r3, [pc, #236]	; (8008b34 <UART_SetConfig+0x2d4>)
 8008a46:	fba3 2301 	umull	r2, r3, r3, r1
 8008a4a:	095b      	lsrs	r3, r3, #5
 8008a4c:	2264      	movs	r2, #100	; 0x64
 8008a4e:	fb02 f303 	mul.w	r3, r2, r3
 8008a52:	1acb      	subs	r3, r1, r3
 8008a54:	00db      	lsls	r3, r3, #3
 8008a56:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008a5a:	4b36      	ldr	r3, [pc, #216]	; (8008b34 <UART_SetConfig+0x2d4>)
 8008a5c:	fba3 2302 	umull	r2, r3, r3, r2
 8008a60:	095b      	lsrs	r3, r3, #5
 8008a62:	005b      	lsls	r3, r3, #1
 8008a64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008a68:	441c      	add	r4, r3
 8008a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a74:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008a78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008a7c:	4642      	mov	r2, r8
 8008a7e:	464b      	mov	r3, r9
 8008a80:	1891      	adds	r1, r2, r2
 8008a82:	63b9      	str	r1, [r7, #56]	; 0x38
 8008a84:	415b      	adcs	r3, r3
 8008a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008a8c:	4641      	mov	r1, r8
 8008a8e:	1851      	adds	r1, r2, r1
 8008a90:	6339      	str	r1, [r7, #48]	; 0x30
 8008a92:	4649      	mov	r1, r9
 8008a94:	414b      	adcs	r3, r1
 8008a96:	637b      	str	r3, [r7, #52]	; 0x34
 8008a98:	f04f 0200 	mov.w	r2, #0
 8008a9c:	f04f 0300 	mov.w	r3, #0
 8008aa0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008aa4:	4659      	mov	r1, fp
 8008aa6:	00cb      	lsls	r3, r1, #3
 8008aa8:	4651      	mov	r1, sl
 8008aaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008aae:	4651      	mov	r1, sl
 8008ab0:	00ca      	lsls	r2, r1, #3
 8008ab2:	4610      	mov	r0, r2
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	4642      	mov	r2, r8
 8008aba:	189b      	adds	r3, r3, r2
 8008abc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ac0:	464b      	mov	r3, r9
 8008ac2:	460a      	mov	r2, r1
 8008ac4:	eb42 0303 	adc.w	r3, r2, r3
 8008ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ad8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008adc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	18db      	adds	r3, r3, r3
 8008ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	eb42 0303 	adc.w	r3, r2, r3
 8008aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008aee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008af2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008af6:	f7f8 f8a7 	bl	8000c48 <__aeabi_uldivmod>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	4b0d      	ldr	r3, [pc, #52]	; (8008b34 <UART_SetConfig+0x2d4>)
 8008b00:	fba3 1302 	umull	r1, r3, r3, r2
 8008b04:	095b      	lsrs	r3, r3, #5
 8008b06:	2164      	movs	r1, #100	; 0x64
 8008b08:	fb01 f303 	mul.w	r3, r1, r3
 8008b0c:	1ad3      	subs	r3, r2, r3
 8008b0e:	00db      	lsls	r3, r3, #3
 8008b10:	3332      	adds	r3, #50	; 0x32
 8008b12:	4a08      	ldr	r2, [pc, #32]	; (8008b34 <UART_SetConfig+0x2d4>)
 8008b14:	fba2 2303 	umull	r2, r3, r2, r3
 8008b18:	095b      	lsrs	r3, r3, #5
 8008b1a:	f003 0207 	and.w	r2, r3, #7
 8008b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4422      	add	r2, r4
 8008b26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b28:	e105      	b.n	8008d36 <UART_SetConfig+0x4d6>
 8008b2a:	bf00      	nop
 8008b2c:	40011000 	.word	0x40011000
 8008b30:	40011400 	.word	0x40011400
 8008b34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008b42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008b46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008b4a:	4642      	mov	r2, r8
 8008b4c:	464b      	mov	r3, r9
 8008b4e:	1891      	adds	r1, r2, r2
 8008b50:	6239      	str	r1, [r7, #32]
 8008b52:	415b      	adcs	r3, r3
 8008b54:	627b      	str	r3, [r7, #36]	; 0x24
 8008b56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b5a:	4641      	mov	r1, r8
 8008b5c:	1854      	adds	r4, r2, r1
 8008b5e:	4649      	mov	r1, r9
 8008b60:	eb43 0501 	adc.w	r5, r3, r1
 8008b64:	f04f 0200 	mov.w	r2, #0
 8008b68:	f04f 0300 	mov.w	r3, #0
 8008b6c:	00eb      	lsls	r3, r5, #3
 8008b6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b72:	00e2      	lsls	r2, r4, #3
 8008b74:	4614      	mov	r4, r2
 8008b76:	461d      	mov	r5, r3
 8008b78:	4643      	mov	r3, r8
 8008b7a:	18e3      	adds	r3, r4, r3
 8008b7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b80:	464b      	mov	r3, r9
 8008b82:	eb45 0303 	adc.w	r3, r5, r3
 8008b86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008b9a:	f04f 0200 	mov.w	r2, #0
 8008b9e:	f04f 0300 	mov.w	r3, #0
 8008ba2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	008b      	lsls	r3, r1, #2
 8008baa:	4621      	mov	r1, r4
 8008bac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	008a      	lsls	r2, r1, #2
 8008bb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008bb8:	f7f8 f846 	bl	8000c48 <__aeabi_uldivmod>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	4b60      	ldr	r3, [pc, #384]	; (8008d44 <UART_SetConfig+0x4e4>)
 8008bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8008bc6:	095b      	lsrs	r3, r3, #5
 8008bc8:	011c      	lsls	r4, r3, #4
 8008bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008bd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008bd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008bdc:	4642      	mov	r2, r8
 8008bde:	464b      	mov	r3, r9
 8008be0:	1891      	adds	r1, r2, r2
 8008be2:	61b9      	str	r1, [r7, #24]
 8008be4:	415b      	adcs	r3, r3
 8008be6:	61fb      	str	r3, [r7, #28]
 8008be8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008bec:	4641      	mov	r1, r8
 8008bee:	1851      	adds	r1, r2, r1
 8008bf0:	6139      	str	r1, [r7, #16]
 8008bf2:	4649      	mov	r1, r9
 8008bf4:	414b      	adcs	r3, r1
 8008bf6:	617b      	str	r3, [r7, #20]
 8008bf8:	f04f 0200 	mov.w	r2, #0
 8008bfc:	f04f 0300 	mov.w	r3, #0
 8008c00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c04:	4659      	mov	r1, fp
 8008c06:	00cb      	lsls	r3, r1, #3
 8008c08:	4651      	mov	r1, sl
 8008c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c0e:	4651      	mov	r1, sl
 8008c10:	00ca      	lsls	r2, r1, #3
 8008c12:	4610      	mov	r0, r2
 8008c14:	4619      	mov	r1, r3
 8008c16:	4603      	mov	r3, r0
 8008c18:	4642      	mov	r2, r8
 8008c1a:	189b      	adds	r3, r3, r2
 8008c1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c20:	464b      	mov	r3, r9
 8008c22:	460a      	mov	r2, r1
 8008c24:	eb42 0303 	adc.w	r3, r2, r3
 8008c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c36:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008c38:	f04f 0200 	mov.w	r2, #0
 8008c3c:	f04f 0300 	mov.w	r3, #0
 8008c40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008c44:	4649      	mov	r1, r9
 8008c46:	008b      	lsls	r3, r1, #2
 8008c48:	4641      	mov	r1, r8
 8008c4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c4e:	4641      	mov	r1, r8
 8008c50:	008a      	lsls	r2, r1, #2
 8008c52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008c56:	f7f7 fff7 	bl	8000c48 <__aeabi_uldivmod>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	4b39      	ldr	r3, [pc, #228]	; (8008d44 <UART_SetConfig+0x4e4>)
 8008c60:	fba3 1302 	umull	r1, r3, r3, r2
 8008c64:	095b      	lsrs	r3, r3, #5
 8008c66:	2164      	movs	r1, #100	; 0x64
 8008c68:	fb01 f303 	mul.w	r3, r1, r3
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	011b      	lsls	r3, r3, #4
 8008c70:	3332      	adds	r3, #50	; 0x32
 8008c72:	4a34      	ldr	r2, [pc, #208]	; (8008d44 <UART_SetConfig+0x4e4>)
 8008c74:	fba2 2303 	umull	r2, r3, r2, r3
 8008c78:	095b      	lsrs	r3, r3, #5
 8008c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c7e:	441c      	add	r4, r3
 8008c80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c84:	2200      	movs	r2, #0
 8008c86:	673b      	str	r3, [r7, #112]	; 0x70
 8008c88:	677a      	str	r2, [r7, #116]	; 0x74
 8008c8a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008c8e:	4642      	mov	r2, r8
 8008c90:	464b      	mov	r3, r9
 8008c92:	1891      	adds	r1, r2, r2
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	415b      	adcs	r3, r3
 8008c98:	60fb      	str	r3, [r7, #12]
 8008c9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c9e:	4641      	mov	r1, r8
 8008ca0:	1851      	adds	r1, r2, r1
 8008ca2:	6039      	str	r1, [r7, #0]
 8008ca4:	4649      	mov	r1, r9
 8008ca6:	414b      	adcs	r3, r1
 8008ca8:	607b      	str	r3, [r7, #4]
 8008caa:	f04f 0200 	mov.w	r2, #0
 8008cae:	f04f 0300 	mov.w	r3, #0
 8008cb2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008cb6:	4659      	mov	r1, fp
 8008cb8:	00cb      	lsls	r3, r1, #3
 8008cba:	4651      	mov	r1, sl
 8008cbc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cc0:	4651      	mov	r1, sl
 8008cc2:	00ca      	lsls	r2, r1, #3
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	4603      	mov	r3, r0
 8008cca:	4642      	mov	r2, r8
 8008ccc:	189b      	adds	r3, r3, r2
 8008cce:	66bb      	str	r3, [r7, #104]	; 0x68
 8008cd0:	464b      	mov	r3, r9
 8008cd2:	460a      	mov	r2, r1
 8008cd4:	eb42 0303 	adc.w	r3, r2, r3
 8008cd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	663b      	str	r3, [r7, #96]	; 0x60
 8008ce4:	667a      	str	r2, [r7, #100]	; 0x64
 8008ce6:	f04f 0200 	mov.w	r2, #0
 8008cea:	f04f 0300 	mov.w	r3, #0
 8008cee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008cf2:	4649      	mov	r1, r9
 8008cf4:	008b      	lsls	r3, r1, #2
 8008cf6:	4641      	mov	r1, r8
 8008cf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008cfc:	4641      	mov	r1, r8
 8008cfe:	008a      	lsls	r2, r1, #2
 8008d00:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008d04:	f7f7 ffa0 	bl	8000c48 <__aeabi_uldivmod>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	4b0d      	ldr	r3, [pc, #52]	; (8008d44 <UART_SetConfig+0x4e4>)
 8008d0e:	fba3 1302 	umull	r1, r3, r3, r2
 8008d12:	095b      	lsrs	r3, r3, #5
 8008d14:	2164      	movs	r1, #100	; 0x64
 8008d16:	fb01 f303 	mul.w	r3, r1, r3
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	011b      	lsls	r3, r3, #4
 8008d1e:	3332      	adds	r3, #50	; 0x32
 8008d20:	4a08      	ldr	r2, [pc, #32]	; (8008d44 <UART_SetConfig+0x4e4>)
 8008d22:	fba2 2303 	umull	r2, r3, r2, r3
 8008d26:	095b      	lsrs	r3, r3, #5
 8008d28:	f003 020f 	and.w	r2, r3, #15
 8008d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4422      	add	r2, r4
 8008d34:	609a      	str	r2, [r3, #8]
}
 8008d36:	bf00      	nop
 8008d38:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d42:	bf00      	nop
 8008d44:	51eb851f 	.word	0x51eb851f

08008d48 <LL_EXTI_EnableIT_0_31>:
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8008d50:	4b05      	ldr	r3, [pc, #20]	; (8008d68 <LL_EXTI_EnableIT_0_31+0x20>)
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	4904      	ldr	r1, [pc, #16]	; (8008d68 <LL_EXTI_EnableIT_0_31+0x20>)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	600b      	str	r3, [r1, #0]
}
 8008d5c:	bf00      	nop
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	40013c00 	.word	0x40013c00

08008d6c <LL_EXTI_DisableIT_0_31>:
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8008d74:	4b06      	ldr	r3, [pc, #24]	; (8008d90 <LL_EXTI_DisableIT_0_31+0x24>)
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	43db      	mvns	r3, r3
 8008d7c:	4904      	ldr	r1, [pc, #16]	; (8008d90 <LL_EXTI_DisableIT_0_31+0x24>)
 8008d7e:	4013      	ands	r3, r2
 8008d80:	600b      	str	r3, [r1, #0]
}
 8008d82:	bf00      	nop
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	40013c00 	.word	0x40013c00

08008d94 <LL_EXTI_EnableEvent_0_31>:
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8008d9c:	4b05      	ldr	r3, [pc, #20]	; (8008db4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8008d9e:	685a      	ldr	r2, [r3, #4]
 8008da0:	4904      	ldr	r1, [pc, #16]	; (8008db4 <LL_EXTI_EnableEvent_0_31+0x20>)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	604b      	str	r3, [r1, #4]
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	40013c00 	.word	0x40013c00

08008db8 <LL_EXTI_DisableEvent_0_31>:
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8008dc0:	4b06      	ldr	r3, [pc, #24]	; (8008ddc <LL_EXTI_DisableEvent_0_31+0x24>)
 8008dc2:	685a      	ldr	r2, [r3, #4]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	43db      	mvns	r3, r3
 8008dc8:	4904      	ldr	r1, [pc, #16]	; (8008ddc <LL_EXTI_DisableEvent_0_31+0x24>)
 8008dca:	4013      	ands	r3, r2
 8008dcc:	604b      	str	r3, [r1, #4]
}
 8008dce:	bf00      	nop
 8008dd0:	370c      	adds	r7, #12
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	40013c00 	.word	0x40013c00

08008de0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8008de8:	4b05      	ldr	r3, [pc, #20]	; (8008e00 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8008dea:	689a      	ldr	r2, [r3, #8]
 8008dec:	4904      	ldr	r1, [pc, #16]	; (8008e00 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	608b      	str	r3, [r1, #8]
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr
 8008e00:	40013c00 	.word	0x40013c00

08008e04 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8008e0c:	4b06      	ldr	r3, [pc, #24]	; (8008e28 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8008e0e:	689a      	ldr	r2, [r3, #8]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	43db      	mvns	r3, r3
 8008e14:	4904      	ldr	r1, [pc, #16]	; (8008e28 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8008e16:	4013      	ands	r3, r2
 8008e18:	608b      	str	r3, [r1, #8]
}
 8008e1a:	bf00      	nop
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	40013c00 	.word	0x40013c00

08008e2c <LL_EXTI_EnableFallingTrig_0_31>:
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8008e34:	4b05      	ldr	r3, [pc, #20]	; (8008e4c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8008e36:	68da      	ldr	r2, [r3, #12]
 8008e38:	4904      	ldr	r1, [pc, #16]	; (8008e4c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	60cb      	str	r3, [r1, #12]
}
 8008e40:	bf00      	nop
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr
 8008e4c:	40013c00 	.word	0x40013c00

08008e50 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8008e58:	4b06      	ldr	r3, [pc, #24]	; (8008e74 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8008e5a:	68da      	ldr	r2, [r3, #12]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	43db      	mvns	r3, r3
 8008e60:	4904      	ldr	r1, [pc, #16]	; (8008e74 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8008e62:	4013      	ands	r3, r2
 8008e64:	60cb      	str	r3, [r1, #12]
}
 8008e66:	bf00      	nop
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	40013c00 	.word	0x40013c00

08008e78 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8008e80:	2300      	movs	r3, #0
 8008e82:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	791b      	ldrb	r3, [r3, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d065      	beq.n	8008f58 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d06c      	beq.n	8008f6e <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	795b      	ldrb	r3, [r3, #5]
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d01c      	beq.n	8008ed6 <LL_EXTI_Init+0x5e>
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	dc25      	bgt.n	8008eec <LL_EXTI_Init+0x74>
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d002      	beq.n	8008eaa <LL_EXTI_Init+0x32>
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d00b      	beq.n	8008ec0 <LL_EXTI_Init+0x48>
 8008ea8:	e020      	b.n	8008eec <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f7ff ff82 	bl	8008db8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f7ff ff45 	bl	8008d48 <LL_EXTI_EnableIT_0_31>
          break;
 8008ebe:	e018      	b.n	8008ef2 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7ff ff51 	bl	8008d6c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7ff ff60 	bl	8008d94 <LL_EXTI_EnableEvent_0_31>
          break;
 8008ed4:	e00d      	b.n	8008ef2 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7ff ff34 	bl	8008d48 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7ff ff55 	bl	8008d94 <LL_EXTI_EnableEvent_0_31>
          break;
 8008eea:	e002      	b.n	8008ef2 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	73fb      	strb	r3, [r7, #15]
          break;
 8008ef0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	799b      	ldrb	r3, [r3, #6]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d039      	beq.n	8008f6e <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	799b      	ldrb	r3, [r3, #6]
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d01c      	beq.n	8008f3c <LL_EXTI_Init+0xc4>
 8008f02:	2b03      	cmp	r3, #3
 8008f04:	dc25      	bgt.n	8008f52 <LL_EXTI_Init+0xda>
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d002      	beq.n	8008f10 <LL_EXTI_Init+0x98>
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d00b      	beq.n	8008f26 <LL_EXTI_Init+0xae>
 8008f0e:	e020      	b.n	8008f52 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7ff ff9b 	bl	8008e50 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7ff ff5e 	bl	8008de0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8008f24:	e024      	b.n	8008f70 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7ff ff6a 	bl	8008e04 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7ff ff79 	bl	8008e2c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8008f3a:	e019      	b.n	8008f70 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7ff ff4d 	bl	8008de0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7ff ff6e 	bl	8008e2c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8008f50:	e00e      	b.n	8008f70 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	73fb      	strb	r3, [r7, #15]
            break;
 8008f56:	e00b      	b.n	8008f70 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7ff ff05 	bl	8008d6c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7ff ff26 	bl	8008db8 <LL_EXTI_DisableEvent_0_31>
 8008f6c:	e000      	b.n	8008f70 <LL_EXTI_Init+0xf8>
      }
 8008f6e:	bf00      	nop
  }
  return status;
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <LL_GPIO_SetPinMode>:
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	b089      	sub	sp, #36	; 0x24
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	60f8      	str	r0, [r7, #12]
 8008f82:	60b9      	str	r1, [r7, #8]
 8008f84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	fa93 f3a3 	rbit	r3, r3
 8008f94:	613b      	str	r3, [r7, #16]
  return result;
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	fab3 f383 	clz	r3, r3
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	005b      	lsls	r3, r3, #1
 8008fa0:	2103      	movs	r1, #3
 8008fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fa6:	43db      	mvns	r3, r3
 8008fa8:	401a      	ands	r2, r3
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	fa93 f3a3 	rbit	r3, r3
 8008fb4:	61bb      	str	r3, [r7, #24]
  return result;
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	fab3 f383 	clz	r3, r3
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	005b      	lsls	r3, r3, #1
 8008fc0:	6879      	ldr	r1, [r7, #4]
 8008fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc6:	431a      	orrs	r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	601a      	str	r2, [r3, #0]
}
 8008fcc:	bf00      	nop
 8008fce:	3724      	adds	r7, #36	; 0x24
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <LL_GPIO_SetPinOutputType>:
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	685a      	ldr	r2, [r3, #4]
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	43db      	mvns	r3, r3
 8008fec:	401a      	ands	r2, r3
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	6879      	ldr	r1, [r7, #4]
 8008ff2:	fb01 f303 	mul.w	r3, r1, r3
 8008ff6:	431a      	orrs	r2, r3
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	605a      	str	r2, [r3, #4]
}
 8008ffc:	bf00      	nop
 8008ffe:	3714      	adds	r7, #20
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <LL_GPIO_SetPinSpeed>:
{
 8009008:	b480      	push	{r7}
 800900a:	b089      	sub	sp, #36	; 0x24
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	689a      	ldr	r2, [r3, #8]
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	fa93 f3a3 	rbit	r3, r3
 8009022:	613b      	str	r3, [r7, #16]
  return result;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	fab3 f383 	clz	r3, r3
 800902a:	b2db      	uxtb	r3, r3
 800902c:	005b      	lsls	r3, r3, #1
 800902e:	2103      	movs	r1, #3
 8009030:	fa01 f303 	lsl.w	r3, r1, r3
 8009034:	43db      	mvns	r3, r3
 8009036:	401a      	ands	r2, r3
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	fa93 f3a3 	rbit	r3, r3
 8009042:	61bb      	str	r3, [r7, #24]
  return result;
 8009044:	69bb      	ldr	r3, [r7, #24]
 8009046:	fab3 f383 	clz	r3, r3
 800904a:	b2db      	uxtb	r3, r3
 800904c:	005b      	lsls	r3, r3, #1
 800904e:	6879      	ldr	r1, [r7, #4]
 8009050:	fa01 f303 	lsl.w	r3, r1, r3
 8009054:	431a      	orrs	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	609a      	str	r2, [r3, #8]
}
 800905a:	bf00      	nop
 800905c:	3724      	adds	r7, #36	; 0x24
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr

08009066 <LL_GPIO_SetPinPull>:
{
 8009066:	b480      	push	{r7}
 8009068:	b089      	sub	sp, #36	; 0x24
 800906a:	af00      	add	r7, sp, #0
 800906c:	60f8      	str	r0, [r7, #12]
 800906e:	60b9      	str	r1, [r7, #8]
 8009070:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	68da      	ldr	r2, [r3, #12]
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	fa93 f3a3 	rbit	r3, r3
 8009080:	613b      	str	r3, [r7, #16]
  return result;
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	fab3 f383 	clz	r3, r3
 8009088:	b2db      	uxtb	r3, r3
 800908a:	005b      	lsls	r3, r3, #1
 800908c:	2103      	movs	r1, #3
 800908e:	fa01 f303 	lsl.w	r3, r1, r3
 8009092:	43db      	mvns	r3, r3
 8009094:	401a      	ands	r2, r3
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	fa93 f3a3 	rbit	r3, r3
 80090a0:	61bb      	str	r3, [r7, #24]
  return result;
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	fab3 f383 	clz	r3, r3
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	005b      	lsls	r3, r3, #1
 80090ac:	6879      	ldr	r1, [r7, #4]
 80090ae:	fa01 f303 	lsl.w	r3, r1, r3
 80090b2:	431a      	orrs	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	60da      	str	r2, [r3, #12]
}
 80090b8:	bf00      	nop
 80090ba:	3724      	adds	r7, #36	; 0x24
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <LL_GPIO_SetAFPin_0_7>:
{
 80090c4:	b480      	push	{r7}
 80090c6:	b089      	sub	sp, #36	; 0x24
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6a1a      	ldr	r2, [r3, #32]
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	fa93 f3a3 	rbit	r3, r3
 80090de:	613b      	str	r3, [r7, #16]
  return result;
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	fab3 f383 	clz	r3, r3
 80090e6:	b2db      	uxtb	r3, r3
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	210f      	movs	r1, #15
 80090ec:	fa01 f303 	lsl.w	r3, r1, r3
 80090f0:	43db      	mvns	r3, r3
 80090f2:	401a      	ands	r2, r3
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	fa93 f3a3 	rbit	r3, r3
 80090fe:	61bb      	str	r3, [r7, #24]
  return result;
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	fab3 f383 	clz	r3, r3
 8009106:	b2db      	uxtb	r3, r3
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	6879      	ldr	r1, [r7, #4]
 800910c:	fa01 f303 	lsl.w	r3, r1, r3
 8009110:	431a      	orrs	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	621a      	str	r2, [r3, #32]
}
 8009116:	bf00      	nop
 8009118:	3724      	adds	r7, #36	; 0x24
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr

08009122 <LL_GPIO_SetAFPin_8_15>:
{
 8009122:	b480      	push	{r7}
 8009124:	b089      	sub	sp, #36	; 0x24
 8009126:	af00      	add	r7, sp, #0
 8009128:	60f8      	str	r0, [r7, #12]
 800912a:	60b9      	str	r1, [r7, #8]
 800912c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	0a1b      	lsrs	r3, r3, #8
 8009136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	fa93 f3a3 	rbit	r3, r3
 800913e:	613b      	str	r3, [r7, #16]
  return result;
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	fab3 f383 	clz	r3, r3
 8009146:	b2db      	uxtb	r3, r3
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	210f      	movs	r1, #15
 800914c:	fa01 f303 	lsl.w	r3, r1, r3
 8009150:	43db      	mvns	r3, r3
 8009152:	401a      	ands	r2, r3
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	0a1b      	lsrs	r3, r3, #8
 8009158:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	fa93 f3a3 	rbit	r3, r3
 8009160:	61bb      	str	r3, [r7, #24]
  return result;
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	fab3 f383 	clz	r3, r3
 8009168:	b2db      	uxtb	r3, r3
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	6879      	ldr	r1, [r7, #4]
 800916e:	fa01 f303 	lsl.w	r3, r1, r3
 8009172:	431a      	orrs	r2, r3
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009178:	bf00      	nop
 800917a:	3724      	adds	r7, #36	; 0x24
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b088      	sub	sp, #32
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800918e:	2300      	movs	r3, #0
 8009190:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8009192:	2300      	movs	r3, #0
 8009194:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	fa93 f3a3 	rbit	r3, r3
 80091a2:	613b      	str	r3, [r7, #16]
  return result;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	fab3 f383 	clz	r3, r3
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80091ae:	e050      	b.n	8009252 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	2101      	movs	r1, #1
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	fa01 f303 	lsl.w	r3, r1, r3
 80091bc:	4013      	ands	r3, r2
 80091be:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d042      	beq.n	800924c <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d003      	beq.n	80091d6 <LL_GPIO_Init+0x52>
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d10d      	bne.n	80091f2 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	461a      	mov	r2, r3
 80091dc:	69b9      	ldr	r1, [r7, #24]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f7ff ff12 	bl	8009008 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	461a      	mov	r2, r3
 80091ea:	69b9      	ldr	r1, [r7, #24]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f7ff fef3 	bl	8008fd8 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	461a      	mov	r2, r3
 80091f8:	69b9      	ldr	r1, [r7, #24]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7ff ff33 	bl	8009066 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	2b02      	cmp	r3, #2
 8009206:	d11a      	bne.n	800923e <LL_GPIO_Init+0xba>
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	fa93 f3a3 	rbit	r3, r3
 8009212:	60bb      	str	r3, [r7, #8]
  return result;
 8009214:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8009216:	fab3 f383 	clz	r3, r3
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b07      	cmp	r3, #7
 800921e:	d807      	bhi.n	8009230 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	695b      	ldr	r3, [r3, #20]
 8009224:	461a      	mov	r2, r3
 8009226:	69b9      	ldr	r1, [r7, #24]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f7ff ff4b 	bl	80090c4 <LL_GPIO_SetAFPin_0_7>
 800922e:	e006      	b.n	800923e <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	695b      	ldr	r3, [r3, #20]
 8009234:	461a      	mov	r2, r3
 8009236:	69b9      	ldr	r1, [r7, #24]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7ff ff72 	bl	8009122 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	461a      	mov	r2, r3
 8009244:	69b9      	ldr	r1, [r7, #24]
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f7ff fe97 	bl	8008f7a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	3301      	adds	r3, #1
 8009250:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	fa22 f303 	lsr.w	r3, r2, r3
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1a7      	bne.n	80091b0 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3720      	adds	r7, #32
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
	...

0800926c <LL_RCC_GetSysClkSource>:
{
 800926c:	b480      	push	{r7}
 800926e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009270:	4b04      	ldr	r3, [pc, #16]	; (8009284 <LL_RCC_GetSysClkSource+0x18>)
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	f003 030c 	and.w	r3, r3, #12
}
 8009278:	4618      	mov	r0, r3
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	40023800 	.word	0x40023800

08009288 <LL_RCC_GetAHBPrescaler>:
{
 8009288:	b480      	push	{r7}
 800928a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800928c:	4b04      	ldr	r3, [pc, #16]	; (80092a0 <LL_RCC_GetAHBPrescaler+0x18>)
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009294:	4618      	mov	r0, r3
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	40023800 	.word	0x40023800

080092a4 <LL_RCC_GetAPB1Prescaler>:
{
 80092a4:	b480      	push	{r7}
 80092a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80092a8:	4b04      	ldr	r3, [pc, #16]	; (80092bc <LL_RCC_GetAPB1Prescaler+0x18>)
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	40023800 	.word	0x40023800

080092c0 <LL_RCC_GetAPB2Prescaler>:
{
 80092c0:	b480      	push	{r7}
 80092c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80092c4:	4b04      	ldr	r3, [pc, #16]	; (80092d8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	40023800 	.word	0x40023800

080092dc <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80092dc:	b480      	push	{r7}
 80092de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80092e0:	4b04      	ldr	r3, [pc, #16]	; (80092f4 <LL_RCC_PLL_GetMainSource+0x18>)
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	40023800 	.word	0x40023800

080092f8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80092f8:	b480      	push	{r7}
 80092fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80092fc:	4b04      	ldr	r3, [pc, #16]	; (8009310 <LL_RCC_PLL_GetN+0x18>)
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	099b      	lsrs	r3, r3, #6
 8009302:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8009306:	4618      	mov	r0, r3
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr
 8009310:	40023800 	.word	0x40023800

08009314 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8009314:	b480      	push	{r7}
 8009316:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8009318:	4b04      	ldr	r3, [pc, #16]	; (800932c <LL_RCC_PLL_GetP+0x18>)
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8009320:	4618      	mov	r0, r3
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	40023800 	.word	0x40023800

08009330 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8009330:	b480      	push	{r7}
 8009332:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009334:	4b04      	ldr	r3, [pc, #16]	; (8009348 <LL_RCC_PLL_GetDivider+0x18>)
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800933c:	4618      	mov	r0, r3
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	40023800 	.word	0x40023800

0800934c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8009354:	f000 f820 	bl	8009398 <RCC_GetSystemClockFreq>
 8009358:	4602      	mov	r2, r0
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4618      	mov	r0, r3
 8009364:	f000 f840 	bl	80093e8 <RCC_GetHCLKClockFreq>
 8009368:	4602      	mov	r2, r0
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	4618      	mov	r0, r3
 8009374:	f000 f84e 	bl	8009414 <RCC_GetPCLK1ClockFreq>
 8009378:	4602      	mov	r2, r0
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	4618      	mov	r0, r3
 8009384:	f000 f85a 	bl	800943c <RCC_GetPCLK2ClockFreq>
 8009388:	4602      	mov	r2, r0
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	60da      	str	r2, [r3, #12]
}
 800938e:	bf00      	nop
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
	...

08009398 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800939e:	2300      	movs	r3, #0
 80093a0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80093a2:	f7ff ff63 	bl	800926c <LL_RCC_GetSysClkSource>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b08      	cmp	r3, #8
 80093aa:	d00c      	beq.n	80093c6 <RCC_GetSystemClockFreq+0x2e>
 80093ac:	2b08      	cmp	r3, #8
 80093ae:	d80f      	bhi.n	80093d0 <RCC_GetSystemClockFreq+0x38>
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d002      	beq.n	80093ba <RCC_GetSystemClockFreq+0x22>
 80093b4:	2b04      	cmp	r3, #4
 80093b6:	d003      	beq.n	80093c0 <RCC_GetSystemClockFreq+0x28>
 80093b8:	e00a      	b.n	80093d0 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80093ba:	4b09      	ldr	r3, [pc, #36]	; (80093e0 <RCC_GetSystemClockFreq+0x48>)
 80093bc:	607b      	str	r3, [r7, #4]
      break;
 80093be:	e00a      	b.n	80093d6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80093c0:	4b08      	ldr	r3, [pc, #32]	; (80093e4 <RCC_GetSystemClockFreq+0x4c>)
 80093c2:	607b      	str	r3, [r7, #4]
      break;
 80093c4:	e007      	b.n	80093d6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80093c6:	2008      	movs	r0, #8
 80093c8:	f000 f84c 	bl	8009464 <RCC_PLL_GetFreqDomain_SYS>
 80093cc:	6078      	str	r0, [r7, #4]
      break;
 80093ce:	e002      	b.n	80093d6 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80093d0:	4b03      	ldr	r3, [pc, #12]	; (80093e0 <RCC_GetSystemClockFreq+0x48>)
 80093d2:	607b      	str	r3, [r7, #4]
      break;
 80093d4:	bf00      	nop
  }

  return frequency;
 80093d6:	687b      	ldr	r3, [r7, #4]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	00f42400 	.word	0x00f42400
 80093e4:	007a1200 	.word	0x007a1200

080093e8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80093f0:	f7ff ff4a 	bl	8009288 <LL_RCC_GetAHBPrescaler>
 80093f4:	4603      	mov	r3, r0
 80093f6:	091b      	lsrs	r3, r3, #4
 80093f8:	f003 030f 	and.w	r3, r3, #15
 80093fc:	4a04      	ldr	r2, [pc, #16]	; (8009410 <RCC_GetHCLKClockFreq+0x28>)
 80093fe:	5cd3      	ldrb	r3, [r2, r3]
 8009400:	461a      	mov	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	40d3      	lsrs	r3, r2
}
 8009406:	4618      	mov	r0, r3
 8009408:	3708      	adds	r7, #8
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	0800eda4 	.word	0x0800eda4

08009414 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b082      	sub	sp, #8
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800941c:	f7ff ff42 	bl	80092a4 <LL_RCC_GetAPB1Prescaler>
 8009420:	4603      	mov	r3, r0
 8009422:	0a9b      	lsrs	r3, r3, #10
 8009424:	4a04      	ldr	r2, [pc, #16]	; (8009438 <RCC_GetPCLK1ClockFreq+0x24>)
 8009426:	5cd3      	ldrb	r3, [r2, r3]
 8009428:	461a      	mov	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	40d3      	lsrs	r3, r2
}
 800942e:	4618      	mov	r0, r3
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	0800edb4 	.word	0x0800edb4

0800943c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8009444:	f7ff ff3c 	bl	80092c0 <LL_RCC_GetAPB2Prescaler>
 8009448:	4603      	mov	r3, r0
 800944a:	0b5b      	lsrs	r3, r3, #13
 800944c:	4a04      	ldr	r2, [pc, #16]	; (8009460 <RCC_GetPCLK2ClockFreq+0x24>)
 800944e:	5cd3      	ldrb	r3, [r2, r3]
 8009450:	461a      	mov	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	40d3      	lsrs	r3, r2
}
 8009456:	4618      	mov	r0, r3
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	0800edb4 	.word	0x0800edb4

08009464 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8009464:	b590      	push	{r4, r7, lr}
 8009466:	b087      	sub	sp, #28
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800946c:	2300      	movs	r3, #0
 800946e:	617b      	str	r3, [r7, #20]
 8009470:	2300      	movs	r3, #0
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	2300      	movs	r3, #0
 8009476:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8009478:	f7ff ff30 	bl	80092dc <LL_RCC_PLL_GetMainSource>
 800947c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d004      	beq.n	800948e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800948a:	d003      	beq.n	8009494 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800948c:	e005      	b.n	800949a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800948e:	4b12      	ldr	r3, [pc, #72]	; (80094d8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8009490:	617b      	str	r3, [r7, #20]
      break;
 8009492:	e005      	b.n	80094a0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8009494:	4b11      	ldr	r3, [pc, #68]	; (80094dc <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8009496:	617b      	str	r3, [r7, #20]
      break;
 8009498:	e002      	b.n	80094a0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800949a:	4b0f      	ldr	r3, [pc, #60]	; (80094d8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800949c:	617b      	str	r3, [r7, #20]
      break;
 800949e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b08      	cmp	r3, #8
 80094a4:	d113      	bne.n	80094ce <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80094a6:	f7ff ff43 	bl	8009330 <LL_RCC_PLL_GetDivider>
 80094aa:	4602      	mov	r2, r0
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	fbb3 f4f2 	udiv	r4, r3, r2
 80094b2:	f7ff ff21 	bl	80092f8 <LL_RCC_PLL_GetN>
 80094b6:	4603      	mov	r3, r0
 80094b8:	fb03 f404 	mul.w	r4, r3, r4
 80094bc:	f7ff ff2a 	bl	8009314 <LL_RCC_PLL_GetP>
 80094c0:	4603      	mov	r3, r0
 80094c2:	0c1b      	lsrs	r3, r3, #16
 80094c4:	3301      	adds	r3, #1
 80094c6:	005b      	lsls	r3, r3, #1
 80094c8:	fbb4 f3f3 	udiv	r3, r4, r3
 80094cc:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80094ce:	693b      	ldr	r3, [r7, #16]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	371c      	adds	r7, #28
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd90      	pop	{r4, r7, pc}
 80094d8:	00f42400 	.word	0x00f42400
 80094dc:	007a1200 	.word	0x007a1200

080094e0 <LL_SPI_IsEnabled>:
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f0:	2b40      	cmp	r3, #64	; 0x40
 80094f2:	d101      	bne.n	80094f8 <LL_SPI_IsEnabled+0x18>
 80094f4:	2301      	movs	r3, #1
 80094f6:	e000      	b.n	80094fa <LL_SPI_IsEnabled+0x1a>
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	370c      	adds	r7, #12
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <LL_SPI_SetCRCPolynomial>:
{
 8009506:	b480      	push	{r7}
 8009508:	b083      	sub	sp, #12
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	b29b      	uxth	r3, r3
 8009514:	461a      	mov	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	611a      	str	r2, [r3, #16]
}
 800951a:	bf00      	nop
 800951c:	370c      	adds	r7, #12
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f7ff ffd3 	bl	80094e0 <LL_SPI_IsEnabled>
 800953a:	4603      	mov	r3, r0
 800953c:	2b00      	cmp	r3, #0
 800953e:	d139      	bne.n	80095b4 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009548:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 800954c:	683a      	ldr	r2, [r7, #0]
 800954e:	6811      	ldr	r1, [r2, #0]
 8009550:	683a      	ldr	r2, [r7, #0]
 8009552:	6852      	ldr	r2, [r2, #4]
 8009554:	4311      	orrs	r1, r2
 8009556:	683a      	ldr	r2, [r7, #0]
 8009558:	6892      	ldr	r2, [r2, #8]
 800955a:	4311      	orrs	r1, r2
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	68d2      	ldr	r2, [r2, #12]
 8009560:	4311      	orrs	r1, r2
 8009562:	683a      	ldr	r2, [r7, #0]
 8009564:	6912      	ldr	r2, [r2, #16]
 8009566:	4311      	orrs	r1, r2
 8009568:	683a      	ldr	r2, [r7, #0]
 800956a:	6952      	ldr	r2, [r2, #20]
 800956c:	4311      	orrs	r1, r2
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	6992      	ldr	r2, [r2, #24]
 8009572:	4311      	orrs	r1, r2
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	69d2      	ldr	r2, [r2, #28]
 8009578:	4311      	orrs	r1, r2
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	6a12      	ldr	r2, [r2, #32]
 800957e:	430a      	orrs	r2, r1
 8009580:	431a      	orrs	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	f023 0204 	bic.w	r2, r3, #4
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	0c1b      	lsrs	r3, r3, #16
 8009594:	431a      	orrs	r2, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	6a1b      	ldr	r3, [r3, #32]
 800959e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095a2:	d105      	bne.n	80095b0 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7ff ffab 	bl	8009506 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80095b0:	2300      	movs	r3, #0
 80095b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	69db      	ldr	r3, [r3, #28]
 80095b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	61da      	str	r2, [r3, #28]
  return status;
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <LL_TIM_SetPrescaler>:
{
 80095ca:	b480      	push	{r7}
 80095cc:	b083      	sub	sp, #12
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80095da:	bf00      	nop
 80095dc:	370c      	adds	r7, #12
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <LL_TIM_SetAutoReload>:
{
 80095e6:	b480      	push	{r7}
 80095e8:	b083      	sub	sp, #12
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
 80095ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	683a      	ldr	r2, [r7, #0]
 80095f4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80095f6:	bf00      	nop
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <LL_TIM_SetRepetitionCounter>:
{
 8009602:	b480      	push	{r7}
 8009604:	b083      	sub	sp, #12
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	683a      	ldr	r2, [r7, #0]
 8009610:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009612:	bf00      	nop
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <LL_TIM_OC_SetCompareCH1>:
{
 800961e:	b480      	push	{r7}
 8009620:	b083      	sub	sp, #12
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
 8009626:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	683a      	ldr	r2, [r7, #0]
 800962c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800962e:	bf00      	nop
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <LL_TIM_OC_SetCompareCH2>:
{
 800963a:	b480      	push	{r7}
 800963c:	b083      	sub	sp, #12
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	683a      	ldr	r2, [r7, #0]
 8009648:	639a      	str	r2, [r3, #56]	; 0x38
}
 800964a:	bf00      	nop
 800964c:	370c      	adds	r7, #12
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <LL_TIM_OC_SetCompareCH3>:
{
 8009656:	b480      	push	{r7}
 8009658:	b083      	sub	sp, #12
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009666:	bf00      	nop
 8009668:	370c      	adds	r7, #12
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr

08009672 <LL_TIM_OC_SetCompareCH4>:
{
 8009672:	b480      	push	{r7}
 8009674:	b083      	sub	sp, #12
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	641a      	str	r2, [r3, #64]	; 0x40
}
 8009682:	bf00      	nop
 8009684:	370c      	adds	r7, #12
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr

0800968e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800968e:	b480      	push	{r7}
 8009690:	b083      	sub	sp, #12
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	f043 0201 	orr.w	r2, r3, #1
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	615a      	str	r2, [r3, #20]
}
 80096a2:	bf00      	nop
 80096a4:	370c      	adds	r7, #12
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
	...

080096b0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a3d      	ldr	r2, [pc, #244]	; (80097b8 <LL_TIM_Init+0x108>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d013      	beq.n	80096f0 <LL_TIM_Init+0x40>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ce:	d00f      	beq.n	80096f0 <LL_TIM_Init+0x40>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a3a      	ldr	r2, [pc, #232]	; (80097bc <LL_TIM_Init+0x10c>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d00b      	beq.n	80096f0 <LL_TIM_Init+0x40>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a39      	ldr	r2, [pc, #228]	; (80097c0 <LL_TIM_Init+0x110>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d007      	beq.n	80096f0 <LL_TIM_Init+0x40>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a38      	ldr	r2, [pc, #224]	; (80097c4 <LL_TIM_Init+0x114>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d003      	beq.n	80096f0 <LL_TIM_Init+0x40>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a37      	ldr	r2, [pc, #220]	; (80097c8 <LL_TIM_Init+0x118>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d106      	bne.n	80096fe <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	4313      	orrs	r3, r2
 80096fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a2d      	ldr	r2, [pc, #180]	; (80097b8 <LL_TIM_Init+0x108>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d02b      	beq.n	800975e <LL_TIM_Init+0xae>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800970c:	d027      	beq.n	800975e <LL_TIM_Init+0xae>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	4a2a      	ldr	r2, [pc, #168]	; (80097bc <LL_TIM_Init+0x10c>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d023      	beq.n	800975e <LL_TIM_Init+0xae>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a29      	ldr	r2, [pc, #164]	; (80097c0 <LL_TIM_Init+0x110>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d01f      	beq.n	800975e <LL_TIM_Init+0xae>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	4a28      	ldr	r2, [pc, #160]	; (80097c4 <LL_TIM_Init+0x114>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d01b      	beq.n	800975e <LL_TIM_Init+0xae>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a27      	ldr	r2, [pc, #156]	; (80097c8 <LL_TIM_Init+0x118>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d017      	beq.n	800975e <LL_TIM_Init+0xae>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a26      	ldr	r2, [pc, #152]	; (80097cc <LL_TIM_Init+0x11c>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d013      	beq.n	800975e <LL_TIM_Init+0xae>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a25      	ldr	r2, [pc, #148]	; (80097d0 <LL_TIM_Init+0x120>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d00f      	beq.n	800975e <LL_TIM_Init+0xae>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a24      	ldr	r2, [pc, #144]	; (80097d4 <LL_TIM_Init+0x124>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d00b      	beq.n	800975e <LL_TIM_Init+0xae>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a23      	ldr	r2, [pc, #140]	; (80097d8 <LL_TIM_Init+0x128>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d007      	beq.n	800975e <LL_TIM_Init+0xae>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4a22      	ldr	r2, [pc, #136]	; (80097dc <LL_TIM_Init+0x12c>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d003      	beq.n	800975e <LL_TIM_Init+0xae>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4a21      	ldr	r2, [pc, #132]	; (80097e0 <LL_TIM_Init+0x130>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d106      	bne.n	800976c <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	4313      	orrs	r3, r2
 800976a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	4619      	mov	r1, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7ff ff34 	bl	80095e6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	881b      	ldrh	r3, [r3, #0]
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7ff ff20 	bl	80095ca <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4a0a      	ldr	r2, [pc, #40]	; (80097b8 <LL_TIM_Init+0x108>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d003      	beq.n	800979a <LL_TIM_Init+0xea>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a0c      	ldr	r2, [pc, #48]	; (80097c8 <LL_TIM_Init+0x118>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d105      	bne.n	80097a6 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	4619      	mov	r1, r3
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7ff ff2e 	bl	8009602 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff ff71 	bl	800968e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	40010000 	.word	0x40010000
 80097bc:	40000400 	.word	0x40000400
 80097c0:	40000800 	.word	0x40000800
 80097c4:	40000c00 	.word	0x40000c00
 80097c8:	40010400 	.word	0x40010400
 80097cc:	40014000 	.word	0x40014000
 80097d0:	40014400 	.word	0x40014400
 80097d4:	40014800 	.word	0x40014800
 80097d8:	40001800 	.word	0x40001800
 80097dc:	40001c00 	.word	0x40001c00
 80097e0:	40002000 	.word	0x40002000

080097e4 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097fa:	d027      	beq.n	800984c <LL_TIM_OC_Init+0x68>
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009802:	d82a      	bhi.n	800985a <LL_TIM_OC_Init+0x76>
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800980a:	d018      	beq.n	800983e <LL_TIM_OC_Init+0x5a>
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009812:	d822      	bhi.n	800985a <LL_TIM_OC_Init+0x76>
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d003      	beq.n	8009822 <LL_TIM_OC_Init+0x3e>
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	2b10      	cmp	r3, #16
 800981e:	d007      	beq.n	8009830 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8009820:	e01b      	b.n	800985a <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8009822:	6879      	ldr	r1, [r7, #4]
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f000 f81f 	bl	8009868 <OC1Config>
 800982a:	4603      	mov	r3, r0
 800982c:	75fb      	strb	r3, [r7, #23]
      break;
 800982e:	e015      	b.n	800985c <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8009830:	6879      	ldr	r1, [r7, #4]
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f000 f884 	bl	8009940 <OC2Config>
 8009838:	4603      	mov	r3, r0
 800983a:	75fb      	strb	r3, [r7, #23]
      break;
 800983c:	e00e      	b.n	800985c <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800983e:	6879      	ldr	r1, [r7, #4]
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f000 f8ed 	bl	8009a20 <OC3Config>
 8009846:	4603      	mov	r3, r0
 8009848:	75fb      	strb	r3, [r7, #23]
      break;
 800984a:	e007      	b.n	800985c <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800984c:	6879      	ldr	r1, [r7, #4]
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f000 f956 	bl	8009b00 <OC4Config>
 8009854:	4603      	mov	r3, r0
 8009856:	75fb      	strb	r3, [r7, #23]
      break;
 8009858:	e000      	b.n	800985c <LL_TIM_OC_Init+0x78>
      break;
 800985a:	bf00      	nop
  }

  return result;
 800985c:	7dfb      	ldrb	r3, [r7, #23]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3718      	adds	r7, #24
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
	...

08009868 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b086      	sub	sp, #24
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a1b      	ldr	r3, [r3, #32]
 8009876:	f023 0201 	bic.w	r2, r3, #1
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a1b      	ldr	r3, [r3, #32]
 8009882:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f023 0303 	bic.w	r3, r3, #3
 8009896:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f023 0202 	bic.w	r2, r3, #2
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	f023 0201 	bic.w	r2, r3, #1
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	4313      	orrs	r3, r2
 80098c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a1c      	ldr	r2, [pc, #112]	; (8009938 <OC1Config+0xd0>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d003      	beq.n	80098d2 <OC1Config+0x6a>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a1b      	ldr	r2, [pc, #108]	; (800993c <OC1Config+0xd4>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d11e      	bne.n	8009910 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	f023 0208 	bic.w	r2, r3, #8
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	695b      	ldr	r3, [r3, #20]
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4313      	orrs	r3, r2
 80098e0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	f023 0204 	bic.w	r2, r3, #4
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4313      	orrs	r3, r2
 80098f0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	69db      	ldr	r3, [r3, #28]
 800990a:	005b      	lsls	r3, r3, #1
 800990c:	4313      	orrs	r3, r2
 800990e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	693a      	ldr	r2, [r7, #16]
 8009914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	4619      	mov	r1, r3
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7ff fe7b 	bl	800961e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800992e:	2300      	movs	r3, #0
}
 8009930:	4618      	mov	r0, r3
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	40010000 	.word	0x40010000
 800993c:	40010400 	.word	0x40010400

08009940 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	f023 0210 	bic.w	r2, r3, #16
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a1b      	ldr	r3, [r3, #32]
 800995a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800996e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	021b      	lsls	r3, r3, #8
 800997c:	4313      	orrs	r3, r2
 800997e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	f023 0220 	bic.w	r2, r3, #32
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	011b      	lsls	r3, r3, #4
 800998c:	4313      	orrs	r3, r2
 800998e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	f023 0210 	bic.w	r2, r3, #16
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	011b      	lsls	r3, r3, #4
 800999c:	4313      	orrs	r3, r2
 800999e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a1d      	ldr	r2, [pc, #116]	; (8009a18 <OC2Config+0xd8>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d003      	beq.n	80099b0 <OC2Config+0x70>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a1c      	ldr	r2, [pc, #112]	; (8009a1c <OC2Config+0xdc>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d11f      	bne.n	80099f0 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	019b      	lsls	r3, r3, #6
 80099bc:	4313      	orrs	r3, r2
 80099be:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	019b      	lsls	r3, r3, #6
 80099cc:	4313      	orrs	r3, r2
 80099ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	699b      	ldr	r3, [r3, #24]
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	4313      	orrs	r3, r2
 80099de:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	69db      	ldr	r3, [r3, #28]
 80099ea:	00db      	lsls	r3, r3, #3
 80099ec:	4313      	orrs	r3, r2
 80099ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	693a      	ldr	r2, [r7, #16]
 80099f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7ff fe19 	bl	800963a <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3718      	adds	r7, #24
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	40010000 	.word	0x40010000
 8009a1c:	40010400 	.word	0x40010400

08009a20 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a1b      	ldr	r3, [r3, #32]
 8009a2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a1b      	ldr	r3, [r3, #32]
 8009a3a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	69db      	ldr	r3, [r3, #28]
 8009a46:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f023 0303 	bic.w	r3, r3, #3
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	021b      	lsls	r3, r3, #8
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	021b      	lsls	r3, r3, #8
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a1d      	ldr	r2, [pc, #116]	; (8009af8 <OC3Config+0xd8>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d003      	beq.n	8009a8e <OC3Config+0x6e>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4a1c      	ldr	r2, [pc, #112]	; (8009afc <OC3Config+0xdc>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d11f      	bne.n	8009ace <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	029b      	lsls	r3, r3, #10
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	029b      	lsls	r3, r3, #10
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	011b      	lsls	r3, r3, #4
 8009aba:	4313      	orrs	r3, r2
 8009abc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	69db      	ldr	r3, [r3, #28]
 8009ac8:	015b      	lsls	r3, r3, #5
 8009aca:	4313      	orrs	r3, r2
 8009acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f7ff fdb8 	bl	8009656 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	697a      	ldr	r2, [r7, #20]
 8009aea:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3718      	adds	r7, #24
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	40010000 	.word	0x40010000
 8009afc:	40010400 	.word	0x40010400

08009b00 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b086      	sub	sp, #24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a1b      	ldr	r3, [r3, #32]
 8009b0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	69db      	ldr	r3, [r3, #28]
 8009b26:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	021b      	lsls	r3, r3, #8
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	031b      	lsls	r3, r3, #12
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	031b      	lsls	r3, r3, #12
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a11      	ldr	r2, [pc, #68]	; (8009ba8 <OC4Config+0xa8>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d003      	beq.n	8009b70 <OC4Config+0x70>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a10      	ldr	r2, [pc, #64]	; (8009bac <OC4Config+0xac>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d107      	bne.n	8009b80 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	019b      	lsls	r3, r3, #6
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	697a      	ldr	r2, [r7, #20]
 8009b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	4619      	mov	r1, r3
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7ff fd6d 	bl	8009672 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3718      	adds	r7, #24
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	40010000 	.word	0x40010000
 8009bac:	40010400 	.word	0x40010400

08009bb0 <LL_USART_IsEnabled>:
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bc4:	bf0c      	ite	eq
 8009bc6:	2301      	moveq	r3, #1
 8009bc8:	2300      	movne	r3, #0
 8009bca:	b2db      	uxtb	r3, r3
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <LL_USART_SetStopBitsLength>:
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	431a      	orrs	r2, r3
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	611a      	str	r2, [r3, #16]
}
 8009bf2:	bf00      	nop
 8009bf4:	370c      	adds	r7, #12
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <LL_USART_SetHWFlowCtrl>:
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b083      	sub	sp, #12
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	695b      	ldr	r3, [r3, #20]
 8009c0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	431a      	orrs	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	615a      	str	r2, [r3, #20]
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <LL_USART_SetBaudRate>:
{
 8009c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c28:	b0c0      	sub	sp, #256	; 0x100
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009c30:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8009c34:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8009c38:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8009c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c44:	f040 810c 	bne.w	8009e60 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8009c48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009c52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009c56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009c5a:	4622      	mov	r2, r4
 8009c5c:	462b      	mov	r3, r5
 8009c5e:	1891      	adds	r1, r2, r2
 8009c60:	6639      	str	r1, [r7, #96]	; 0x60
 8009c62:	415b      	adcs	r3, r3
 8009c64:	667b      	str	r3, [r7, #100]	; 0x64
 8009c66:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009c6a:	4621      	mov	r1, r4
 8009c6c:	eb12 0801 	adds.w	r8, r2, r1
 8009c70:	4629      	mov	r1, r5
 8009c72:	eb43 0901 	adc.w	r9, r3, r1
 8009c76:	f04f 0200 	mov.w	r2, #0
 8009c7a:	f04f 0300 	mov.w	r3, #0
 8009c7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009c82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009c86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009c8a:	4690      	mov	r8, r2
 8009c8c:	4699      	mov	r9, r3
 8009c8e:	4623      	mov	r3, r4
 8009c90:	eb18 0303 	adds.w	r3, r8, r3
 8009c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c98:	462b      	mov	r3, r5
 8009c9a:	eb49 0303 	adc.w	r3, r9, r3
 8009c9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009ca2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	469a      	mov	sl, r3
 8009caa:	4693      	mov	fp, r2
 8009cac:	eb1a 030a 	adds.w	r3, sl, sl
 8009cb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8009cb2:	eb4b 030b 	adc.w	r3, fp, fp
 8009cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cb8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009cbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009cc0:	f7f6 ffc2 	bl	8000c48 <__aeabi_uldivmod>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4b64      	ldr	r3, [pc, #400]	; (8009e5c <LL_USART_SetBaudRate+0x238>)
 8009cca:	fba3 2302 	umull	r2, r3, r3, r2
 8009cce:	095b      	lsrs	r3, r3, #5
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	011b      	lsls	r3, r3, #4
 8009cd4:	b29c      	uxth	r4, r3
 8009cd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ce0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009ce4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8009ce8:	4642      	mov	r2, r8
 8009cea:	464b      	mov	r3, r9
 8009cec:	1891      	adds	r1, r2, r2
 8009cee:	6539      	str	r1, [r7, #80]	; 0x50
 8009cf0:	415b      	adcs	r3, r3
 8009cf2:	657b      	str	r3, [r7, #84]	; 0x54
 8009cf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009cf8:	4641      	mov	r1, r8
 8009cfa:	1851      	adds	r1, r2, r1
 8009cfc:	64b9      	str	r1, [r7, #72]	; 0x48
 8009cfe:	4649      	mov	r1, r9
 8009d00:	414b      	adcs	r3, r1
 8009d02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d04:	f04f 0200 	mov.w	r2, #0
 8009d08:	f04f 0300 	mov.w	r3, #0
 8009d0c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8009d10:	4659      	mov	r1, fp
 8009d12:	00cb      	lsls	r3, r1, #3
 8009d14:	4651      	mov	r1, sl
 8009d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d1a:	4651      	mov	r1, sl
 8009d1c:	00ca      	lsls	r2, r1, #3
 8009d1e:	4610      	mov	r0, r2
 8009d20:	4619      	mov	r1, r3
 8009d22:	4603      	mov	r3, r0
 8009d24:	4642      	mov	r2, r8
 8009d26:	189b      	adds	r3, r3, r2
 8009d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d2c:	464b      	mov	r3, r9
 8009d2e:	460a      	mov	r2, r1
 8009d30:	eb42 0303 	adc.w	r3, r2, r3
 8009d34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009d38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d42:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8009d46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	18db      	adds	r3, r3, r3
 8009d4e:	643b      	str	r3, [r7, #64]	; 0x40
 8009d50:	4613      	mov	r3, r2
 8009d52:	eb42 0303 	adc.w	r3, r2, r3
 8009d56:	647b      	str	r3, [r7, #68]	; 0x44
 8009d58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009d5c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8009d60:	f7f6 ff72 	bl	8000c48 <__aeabi_uldivmod>
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	4611      	mov	r1, r2
 8009d6a:	4b3c      	ldr	r3, [pc, #240]	; (8009e5c <LL_USART_SetBaudRate+0x238>)
 8009d6c:	fba3 2301 	umull	r2, r3, r3, r1
 8009d70:	095b      	lsrs	r3, r3, #5
 8009d72:	2264      	movs	r2, #100	; 0x64
 8009d74:	fb02 f303 	mul.w	r3, r2, r3
 8009d78:	1acb      	subs	r3, r1, r3
 8009d7a:	00db      	lsls	r3, r3, #3
 8009d7c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009d80:	4b36      	ldr	r3, [pc, #216]	; (8009e5c <LL_USART_SetBaudRate+0x238>)
 8009d82:	fba3 2302 	umull	r2, r3, r3, r2
 8009d86:	095b      	lsrs	r3, r3, #5
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	005b      	lsls	r3, r3, #1
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	4423      	add	r3, r4
 8009d96:	b29c      	uxth	r4, r3
 8009d98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009da2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009da6:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8009daa:	4642      	mov	r2, r8
 8009dac:	464b      	mov	r3, r9
 8009dae:	1891      	adds	r1, r2, r2
 8009db0:	63b9      	str	r1, [r7, #56]	; 0x38
 8009db2:	415b      	adcs	r3, r3
 8009db4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009db6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009dba:	4641      	mov	r1, r8
 8009dbc:	1851      	adds	r1, r2, r1
 8009dbe:	6339      	str	r1, [r7, #48]	; 0x30
 8009dc0:	4649      	mov	r1, r9
 8009dc2:	414b      	adcs	r3, r1
 8009dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8009dc6:	f04f 0200 	mov.w	r2, #0
 8009dca:	f04f 0300 	mov.w	r3, #0
 8009dce:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009dd2:	4659      	mov	r1, fp
 8009dd4:	00cb      	lsls	r3, r1, #3
 8009dd6:	4651      	mov	r1, sl
 8009dd8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ddc:	4651      	mov	r1, sl
 8009dde:	00ca      	lsls	r2, r1, #3
 8009de0:	4610      	mov	r0, r2
 8009de2:	4619      	mov	r1, r3
 8009de4:	4603      	mov	r3, r0
 8009de6:	4642      	mov	r2, r8
 8009de8:	189b      	adds	r3, r3, r2
 8009dea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009dee:	464b      	mov	r3, r9
 8009df0:	460a      	mov	r2, r1
 8009df2:	eb42 0303 	adc.w	r3, r2, r3
 8009df6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009dfa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e04:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8009e08:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	18db      	adds	r3, r3, r3
 8009e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e12:	4613      	mov	r3, r2
 8009e14:	eb42 0303 	adc.w	r3, r2, r3
 8009e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e1e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009e22:	f7f6 ff11 	bl	8000c48 <__aeabi_uldivmod>
 8009e26:	4602      	mov	r2, r0
 8009e28:	460b      	mov	r3, r1
 8009e2a:	4b0c      	ldr	r3, [pc, #48]	; (8009e5c <LL_USART_SetBaudRate+0x238>)
 8009e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8009e30:	095b      	lsrs	r3, r3, #5
 8009e32:	2164      	movs	r1, #100	; 0x64
 8009e34:	fb01 f303 	mul.w	r3, r1, r3
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	00db      	lsls	r3, r3, #3
 8009e3c:	3332      	adds	r3, #50	; 0x32
 8009e3e:	4a07      	ldr	r2, [pc, #28]	; (8009e5c <LL_USART_SetBaudRate+0x238>)
 8009e40:	fba2 2303 	umull	r2, r3, r2, r3
 8009e44:	095b      	lsrs	r3, r3, #5
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	f003 0307 	and.w	r3, r3, #7
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	4423      	add	r3, r4
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	461a      	mov	r2, r3
 8009e54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e58:	609a      	str	r2, [r3, #8]
}
 8009e5a:	e107      	b.n	800a06c <LL_USART_SetBaudRate+0x448>
 8009e5c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8009e60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009e64:	2200      	movs	r2, #0
 8009e66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009e6a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009e6e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8009e72:	4642      	mov	r2, r8
 8009e74:	464b      	mov	r3, r9
 8009e76:	1891      	adds	r1, r2, r2
 8009e78:	6239      	str	r1, [r7, #32]
 8009e7a:	415b      	adcs	r3, r3
 8009e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009e82:	4641      	mov	r1, r8
 8009e84:	1854      	adds	r4, r2, r1
 8009e86:	4649      	mov	r1, r9
 8009e88:	eb43 0501 	adc.w	r5, r3, r1
 8009e8c:	f04f 0200 	mov.w	r2, #0
 8009e90:	f04f 0300 	mov.w	r3, #0
 8009e94:	00eb      	lsls	r3, r5, #3
 8009e96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e9a:	00e2      	lsls	r2, r4, #3
 8009e9c:	4614      	mov	r4, r2
 8009e9e:	461d      	mov	r5, r3
 8009ea0:	4643      	mov	r3, r8
 8009ea2:	18e3      	adds	r3, r4, r3
 8009ea4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009ea8:	464b      	mov	r3, r9
 8009eaa:	eb45 0303 	adc.w	r3, r5, r3
 8009eae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009eb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ebc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8009ec0:	f04f 0200 	mov.w	r2, #0
 8009ec4:	f04f 0300 	mov.w	r3, #0
 8009ec8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8009ecc:	4629      	mov	r1, r5
 8009ece:	008b      	lsls	r3, r1, #2
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	008a      	lsls	r2, r1, #2
 8009eda:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8009ede:	f7f6 feb3 	bl	8000c48 <__aeabi_uldivmod>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	4b64      	ldr	r3, [pc, #400]	; (800a078 <LL_USART_SetBaudRate+0x454>)
 8009ee8:	fba3 2302 	umull	r2, r3, r3, r2
 8009eec:	095b      	lsrs	r3, r3, #5
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	011b      	lsls	r3, r3, #4
 8009ef2:	b29c      	uxth	r4, r3
 8009ef4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ef8:	2200      	movs	r2, #0
 8009efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009efe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009f02:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8009f06:	4642      	mov	r2, r8
 8009f08:	464b      	mov	r3, r9
 8009f0a:	1891      	adds	r1, r2, r2
 8009f0c:	61b9      	str	r1, [r7, #24]
 8009f0e:	415b      	adcs	r3, r3
 8009f10:	61fb      	str	r3, [r7, #28]
 8009f12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f16:	4641      	mov	r1, r8
 8009f18:	1851      	adds	r1, r2, r1
 8009f1a:	6139      	str	r1, [r7, #16]
 8009f1c:	4649      	mov	r1, r9
 8009f1e:	414b      	adcs	r3, r1
 8009f20:	617b      	str	r3, [r7, #20]
 8009f22:	f04f 0200 	mov.w	r2, #0
 8009f26:	f04f 0300 	mov.w	r3, #0
 8009f2a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f2e:	4659      	mov	r1, fp
 8009f30:	00cb      	lsls	r3, r1, #3
 8009f32:	4651      	mov	r1, sl
 8009f34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f38:	4651      	mov	r1, sl
 8009f3a:	00ca      	lsls	r2, r1, #3
 8009f3c:	4610      	mov	r0, r2
 8009f3e:	4619      	mov	r1, r3
 8009f40:	4603      	mov	r3, r0
 8009f42:	4642      	mov	r2, r8
 8009f44:	189b      	adds	r3, r3, r2
 8009f46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009f4a:	464b      	mov	r3, r9
 8009f4c:	460a      	mov	r2, r1
 8009f4e:	eb42 0303 	adc.w	r3, r2, r3
 8009f52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009f56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f60:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8009f64:	f04f 0200 	mov.w	r2, #0
 8009f68:	f04f 0300 	mov.w	r3, #0
 8009f6c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8009f70:	4649      	mov	r1, r9
 8009f72:	008b      	lsls	r3, r1, #2
 8009f74:	4641      	mov	r1, r8
 8009f76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f7a:	4641      	mov	r1, r8
 8009f7c:	008a      	lsls	r2, r1, #2
 8009f7e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8009f82:	f7f6 fe61 	bl	8000c48 <__aeabi_uldivmod>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	4b3b      	ldr	r3, [pc, #236]	; (800a078 <LL_USART_SetBaudRate+0x454>)
 8009f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8009f90:	095b      	lsrs	r3, r3, #5
 8009f92:	2164      	movs	r1, #100	; 0x64
 8009f94:	fb01 f303 	mul.w	r3, r1, r3
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	011b      	lsls	r3, r3, #4
 8009f9c:	3332      	adds	r3, #50	; 0x32
 8009f9e:	4a36      	ldr	r2, [pc, #216]	; (800a078 <LL_USART_SetBaudRate+0x454>)
 8009fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa4:	095b      	lsrs	r3, r3, #5
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	4423      	add	r3, r4
 8009fb0:	b29c      	uxth	r4, r3
 8009fb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8009fba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009fbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009fc0:	4642      	mov	r2, r8
 8009fc2:	464b      	mov	r3, r9
 8009fc4:	1891      	adds	r1, r2, r2
 8009fc6:	60b9      	str	r1, [r7, #8]
 8009fc8:	415b      	adcs	r3, r3
 8009fca:	60fb      	str	r3, [r7, #12]
 8009fcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009fd0:	4641      	mov	r1, r8
 8009fd2:	1851      	adds	r1, r2, r1
 8009fd4:	6039      	str	r1, [r7, #0]
 8009fd6:	4649      	mov	r1, r9
 8009fd8:	414b      	adcs	r3, r1
 8009fda:	607b      	str	r3, [r7, #4]
 8009fdc:	f04f 0200 	mov.w	r2, #0
 8009fe0:	f04f 0300 	mov.w	r3, #0
 8009fe4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009fe8:	4659      	mov	r1, fp
 8009fea:	00cb      	lsls	r3, r1, #3
 8009fec:	4651      	mov	r1, sl
 8009fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ff2:	4651      	mov	r1, sl
 8009ff4:	00ca      	lsls	r2, r1, #3
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	4642      	mov	r2, r8
 8009ffe:	189b      	adds	r3, r3, r2
 800a000:	673b      	str	r3, [r7, #112]	; 0x70
 800a002:	464b      	mov	r3, r9
 800a004:	460a      	mov	r2, r1
 800a006:	eb42 0303 	adc.w	r3, r2, r3
 800a00a:	677b      	str	r3, [r7, #116]	; 0x74
 800a00c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a010:	2200      	movs	r2, #0
 800a012:	66bb      	str	r3, [r7, #104]	; 0x68
 800a014:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a016:	f04f 0200 	mov.w	r2, #0
 800a01a:	f04f 0300 	mov.w	r3, #0
 800a01e:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800a022:	4649      	mov	r1, r9
 800a024:	008b      	lsls	r3, r1, #2
 800a026:	4641      	mov	r1, r8
 800a028:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a02c:	4641      	mov	r1, r8
 800a02e:	008a      	lsls	r2, r1, #2
 800a030:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800a034:	f7f6 fe08 	bl	8000c48 <__aeabi_uldivmod>
 800a038:	4602      	mov	r2, r0
 800a03a:	460b      	mov	r3, r1
 800a03c:	4b0e      	ldr	r3, [pc, #56]	; (800a078 <LL_USART_SetBaudRate+0x454>)
 800a03e:	fba3 1302 	umull	r1, r3, r3, r2
 800a042:	095b      	lsrs	r3, r3, #5
 800a044:	2164      	movs	r1, #100	; 0x64
 800a046:	fb01 f303 	mul.w	r3, r1, r3
 800a04a:	1ad3      	subs	r3, r2, r3
 800a04c:	011b      	lsls	r3, r3, #4
 800a04e:	3332      	adds	r3, #50	; 0x32
 800a050:	4a09      	ldr	r2, [pc, #36]	; (800a078 <LL_USART_SetBaudRate+0x454>)
 800a052:	fba2 2303 	umull	r2, r3, r2, r3
 800a056:	095b      	lsrs	r3, r3, #5
 800a058:	b29b      	uxth	r3, r3
 800a05a:	f003 030f 	and.w	r3, r3, #15
 800a05e:	b29b      	uxth	r3, r3
 800a060:	4423      	add	r3, r4
 800a062:	b29b      	uxth	r3, r3
 800a064:	461a      	mov	r2, r3
 800a066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a06a:	609a      	str	r2, [r3, #8]
}
 800a06c:	bf00      	nop
 800a06e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a072:	46bd      	mov	sp, r7
 800a074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a078:	51eb851f 	.word	0x51eb851f

0800a07c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b088      	sub	sp, #32
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800a08a:	2300      	movs	r3, #0
 800a08c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f7ff fd8e 	bl	8009bb0 <LL_USART_IsEnabled>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d15e      	bne.n	800a158 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a0a2:	f023 030c 	bic.w	r3, r3, #12
 800a0a6:	683a      	ldr	r2, [r7, #0]
 800a0a8:	6851      	ldr	r1, [r2, #4]
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	68d2      	ldr	r2, [r2, #12]
 800a0ae:	4311      	orrs	r1, r2
 800a0b0:	683a      	ldr	r2, [r7, #0]
 800a0b2:	6912      	ldr	r2, [r2, #16]
 800a0b4:	4311      	orrs	r1, r2
 800a0b6:	683a      	ldr	r2, [r7, #0]
 800a0b8:	6992      	ldr	r2, [r2, #24]
 800a0ba:	430a      	orrs	r2, r1
 800a0bc:	431a      	orrs	r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f7ff fd85 	bl	8009bd8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	695b      	ldr	r3, [r3, #20]
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f7ff fd92 	bl	8009bfe <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800a0da:	f107 0308 	add.w	r3, r7, #8
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7ff f934 	bl	800934c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a1f      	ldr	r2, [pc, #124]	; (800a164 <LL_USART_Init+0xe8>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d102      	bne.n	800a0f2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	61bb      	str	r3, [r7, #24]
 800a0f0:	e021      	b.n	800a136 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	4a1c      	ldr	r2, [pc, #112]	; (800a168 <LL_USART_Init+0xec>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d102      	bne.n	800a100 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	61bb      	str	r3, [r7, #24]
 800a0fe:	e01a      	b.n	800a136 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a1a      	ldr	r2, [pc, #104]	; (800a16c <LL_USART_Init+0xf0>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d102      	bne.n	800a10e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	61bb      	str	r3, [r7, #24]
 800a10c:	e013      	b.n	800a136 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a17      	ldr	r2, [pc, #92]	; (800a170 <LL_USART_Init+0xf4>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d102      	bne.n	800a11c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	61bb      	str	r3, [r7, #24]
 800a11a:	e00c      	b.n	800a136 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	4a15      	ldr	r2, [pc, #84]	; (800a174 <LL_USART_Init+0xf8>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d102      	bne.n	800a12a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	61bb      	str	r3, [r7, #24]
 800a128:	e005      	b.n	800a136 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a12      	ldr	r2, [pc, #72]	; (800a178 <LL_USART_Init+0xfc>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d101      	bne.n	800a136 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d00d      	beq.n	800a158 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d009      	beq.n	800a158 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800a144:	2300      	movs	r3, #0
 800a146:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	699a      	ldr	r2, [r3, #24]
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	69b9      	ldr	r1, [r7, #24]
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f7ff fd66 	bl	8009c24 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800a158:	7ffb      	ldrb	r3, [r7, #31]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3720      	adds	r7, #32
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	40011000 	.word	0x40011000
 800a168:	40004400 	.word	0x40004400
 800a16c:	40004800 	.word	0x40004800
 800a170:	40011400 	.word	0x40011400
 800a174:	40004c00 	.word	0x40004c00
 800a178:	40005000 	.word	0x40005000

0800a17c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800a184:	4a04      	ldr	r2, [pc, #16]	; (800a198 <LL_SetSystemCoreClock+0x1c>)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6013      	str	r3, [r2, #0]
}
 800a18a:	bf00      	nop
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	200009dc 	.word	0x200009dc

0800a19c <atoi>:
 800a19c:	220a      	movs	r2, #10
 800a19e:	2100      	movs	r1, #0
 800a1a0:	f000 bf58 	b.w	800b054 <strtol>

0800a1a4 <__errno>:
 800a1a4:	4b01      	ldr	r3, [pc, #4]	; (800a1ac <__errno+0x8>)
 800a1a6:	6818      	ldr	r0, [r3, #0]
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	200009e8 	.word	0x200009e8

0800a1b0 <__libc_init_array>:
 800a1b0:	b570      	push	{r4, r5, r6, lr}
 800a1b2:	4d0d      	ldr	r5, [pc, #52]	; (800a1e8 <__libc_init_array+0x38>)
 800a1b4:	4c0d      	ldr	r4, [pc, #52]	; (800a1ec <__libc_init_array+0x3c>)
 800a1b6:	1b64      	subs	r4, r4, r5
 800a1b8:	10a4      	asrs	r4, r4, #2
 800a1ba:	2600      	movs	r6, #0
 800a1bc:	42a6      	cmp	r6, r4
 800a1be:	d109      	bne.n	800a1d4 <__libc_init_array+0x24>
 800a1c0:	4d0b      	ldr	r5, [pc, #44]	; (800a1f0 <__libc_init_array+0x40>)
 800a1c2:	4c0c      	ldr	r4, [pc, #48]	; (800a1f4 <__libc_init_array+0x44>)
 800a1c4:	f003 fcde 	bl	800db84 <_init>
 800a1c8:	1b64      	subs	r4, r4, r5
 800a1ca:	10a4      	asrs	r4, r4, #2
 800a1cc:	2600      	movs	r6, #0
 800a1ce:	42a6      	cmp	r6, r4
 800a1d0:	d105      	bne.n	800a1de <__libc_init_array+0x2e>
 800a1d2:	bd70      	pop	{r4, r5, r6, pc}
 800a1d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1d8:	4798      	blx	r3
 800a1da:	3601      	adds	r6, #1
 800a1dc:	e7ee      	b.n	800a1bc <__libc_init_array+0xc>
 800a1de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1e2:	4798      	blx	r3
 800a1e4:	3601      	adds	r6, #1
 800a1e6:	e7f2      	b.n	800a1ce <__libc_init_array+0x1e>
 800a1e8:	0800f1fc 	.word	0x0800f1fc
 800a1ec:	0800f1fc 	.word	0x0800f1fc
 800a1f0:	0800f1fc 	.word	0x0800f1fc
 800a1f4:	0800f200 	.word	0x0800f200

0800a1f8 <malloc>:
 800a1f8:	4b02      	ldr	r3, [pc, #8]	; (800a204 <malloc+0xc>)
 800a1fa:	4601      	mov	r1, r0
 800a1fc:	6818      	ldr	r0, [r3, #0]
 800a1fe:	f000 b88d 	b.w	800a31c <_malloc_r>
 800a202:	bf00      	nop
 800a204:	200009e8 	.word	0x200009e8

0800a208 <free>:
 800a208:	4b02      	ldr	r3, [pc, #8]	; (800a214 <free+0xc>)
 800a20a:	4601      	mov	r1, r0
 800a20c:	6818      	ldr	r0, [r3, #0]
 800a20e:	f000 b819 	b.w	800a244 <_free_r>
 800a212:	bf00      	nop
 800a214:	200009e8 	.word	0x200009e8

0800a218 <memcpy>:
 800a218:	440a      	add	r2, r1
 800a21a:	4291      	cmp	r1, r2
 800a21c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a220:	d100      	bne.n	800a224 <memcpy+0xc>
 800a222:	4770      	bx	lr
 800a224:	b510      	push	{r4, lr}
 800a226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a22a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a22e:	4291      	cmp	r1, r2
 800a230:	d1f9      	bne.n	800a226 <memcpy+0xe>
 800a232:	bd10      	pop	{r4, pc}

0800a234 <memset>:
 800a234:	4402      	add	r2, r0
 800a236:	4603      	mov	r3, r0
 800a238:	4293      	cmp	r3, r2
 800a23a:	d100      	bne.n	800a23e <memset+0xa>
 800a23c:	4770      	bx	lr
 800a23e:	f803 1b01 	strb.w	r1, [r3], #1
 800a242:	e7f9      	b.n	800a238 <memset+0x4>

0800a244 <_free_r>:
 800a244:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a246:	2900      	cmp	r1, #0
 800a248:	d044      	beq.n	800a2d4 <_free_r+0x90>
 800a24a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a24e:	9001      	str	r0, [sp, #4]
 800a250:	2b00      	cmp	r3, #0
 800a252:	f1a1 0404 	sub.w	r4, r1, #4
 800a256:	bfb8      	it	lt
 800a258:	18e4      	addlt	r4, r4, r3
 800a25a:	f002 f8df 	bl	800c41c <__malloc_lock>
 800a25e:	4a1e      	ldr	r2, [pc, #120]	; (800a2d8 <_free_r+0x94>)
 800a260:	9801      	ldr	r0, [sp, #4]
 800a262:	6813      	ldr	r3, [r2, #0]
 800a264:	b933      	cbnz	r3, 800a274 <_free_r+0x30>
 800a266:	6063      	str	r3, [r4, #4]
 800a268:	6014      	str	r4, [r2, #0]
 800a26a:	b003      	add	sp, #12
 800a26c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a270:	f002 b8da 	b.w	800c428 <__malloc_unlock>
 800a274:	42a3      	cmp	r3, r4
 800a276:	d908      	bls.n	800a28a <_free_r+0x46>
 800a278:	6825      	ldr	r5, [r4, #0]
 800a27a:	1961      	adds	r1, r4, r5
 800a27c:	428b      	cmp	r3, r1
 800a27e:	bf01      	itttt	eq
 800a280:	6819      	ldreq	r1, [r3, #0]
 800a282:	685b      	ldreq	r3, [r3, #4]
 800a284:	1949      	addeq	r1, r1, r5
 800a286:	6021      	streq	r1, [r4, #0]
 800a288:	e7ed      	b.n	800a266 <_free_r+0x22>
 800a28a:	461a      	mov	r2, r3
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	b10b      	cbz	r3, 800a294 <_free_r+0x50>
 800a290:	42a3      	cmp	r3, r4
 800a292:	d9fa      	bls.n	800a28a <_free_r+0x46>
 800a294:	6811      	ldr	r1, [r2, #0]
 800a296:	1855      	adds	r5, r2, r1
 800a298:	42a5      	cmp	r5, r4
 800a29a:	d10b      	bne.n	800a2b4 <_free_r+0x70>
 800a29c:	6824      	ldr	r4, [r4, #0]
 800a29e:	4421      	add	r1, r4
 800a2a0:	1854      	adds	r4, r2, r1
 800a2a2:	42a3      	cmp	r3, r4
 800a2a4:	6011      	str	r1, [r2, #0]
 800a2a6:	d1e0      	bne.n	800a26a <_free_r+0x26>
 800a2a8:	681c      	ldr	r4, [r3, #0]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	6053      	str	r3, [r2, #4]
 800a2ae:	4421      	add	r1, r4
 800a2b0:	6011      	str	r1, [r2, #0]
 800a2b2:	e7da      	b.n	800a26a <_free_r+0x26>
 800a2b4:	d902      	bls.n	800a2bc <_free_r+0x78>
 800a2b6:	230c      	movs	r3, #12
 800a2b8:	6003      	str	r3, [r0, #0]
 800a2ba:	e7d6      	b.n	800a26a <_free_r+0x26>
 800a2bc:	6825      	ldr	r5, [r4, #0]
 800a2be:	1961      	adds	r1, r4, r5
 800a2c0:	428b      	cmp	r3, r1
 800a2c2:	bf04      	itt	eq
 800a2c4:	6819      	ldreq	r1, [r3, #0]
 800a2c6:	685b      	ldreq	r3, [r3, #4]
 800a2c8:	6063      	str	r3, [r4, #4]
 800a2ca:	bf04      	itt	eq
 800a2cc:	1949      	addeq	r1, r1, r5
 800a2ce:	6021      	streq	r1, [r4, #0]
 800a2d0:	6054      	str	r4, [r2, #4]
 800a2d2:	e7ca      	b.n	800a26a <_free_r+0x26>
 800a2d4:	b003      	add	sp, #12
 800a2d6:	bd30      	pop	{r4, r5, pc}
 800a2d8:	20000c34 	.word	0x20000c34

0800a2dc <sbrk_aligned>:
 800a2dc:	b570      	push	{r4, r5, r6, lr}
 800a2de:	4e0e      	ldr	r6, [pc, #56]	; (800a318 <sbrk_aligned+0x3c>)
 800a2e0:	460c      	mov	r4, r1
 800a2e2:	6831      	ldr	r1, [r6, #0]
 800a2e4:	4605      	mov	r5, r0
 800a2e6:	b911      	cbnz	r1, 800a2ee <sbrk_aligned+0x12>
 800a2e8:	f000 fd9a 	bl	800ae20 <_sbrk_r>
 800a2ec:	6030      	str	r0, [r6, #0]
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	f000 fd95 	bl	800ae20 <_sbrk_r>
 800a2f6:	1c43      	adds	r3, r0, #1
 800a2f8:	d00a      	beq.n	800a310 <sbrk_aligned+0x34>
 800a2fa:	1cc4      	adds	r4, r0, #3
 800a2fc:	f024 0403 	bic.w	r4, r4, #3
 800a300:	42a0      	cmp	r0, r4
 800a302:	d007      	beq.n	800a314 <sbrk_aligned+0x38>
 800a304:	1a21      	subs	r1, r4, r0
 800a306:	4628      	mov	r0, r5
 800a308:	f000 fd8a 	bl	800ae20 <_sbrk_r>
 800a30c:	3001      	adds	r0, #1
 800a30e:	d101      	bne.n	800a314 <sbrk_aligned+0x38>
 800a310:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a314:	4620      	mov	r0, r4
 800a316:	bd70      	pop	{r4, r5, r6, pc}
 800a318:	20000c38 	.word	0x20000c38

0800a31c <_malloc_r>:
 800a31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a320:	1ccd      	adds	r5, r1, #3
 800a322:	f025 0503 	bic.w	r5, r5, #3
 800a326:	3508      	adds	r5, #8
 800a328:	2d0c      	cmp	r5, #12
 800a32a:	bf38      	it	cc
 800a32c:	250c      	movcc	r5, #12
 800a32e:	2d00      	cmp	r5, #0
 800a330:	4607      	mov	r7, r0
 800a332:	db01      	blt.n	800a338 <_malloc_r+0x1c>
 800a334:	42a9      	cmp	r1, r5
 800a336:	d905      	bls.n	800a344 <_malloc_r+0x28>
 800a338:	230c      	movs	r3, #12
 800a33a:	603b      	str	r3, [r7, #0]
 800a33c:	2600      	movs	r6, #0
 800a33e:	4630      	mov	r0, r6
 800a340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a344:	4e2e      	ldr	r6, [pc, #184]	; (800a400 <_malloc_r+0xe4>)
 800a346:	f002 f869 	bl	800c41c <__malloc_lock>
 800a34a:	6833      	ldr	r3, [r6, #0]
 800a34c:	461c      	mov	r4, r3
 800a34e:	bb34      	cbnz	r4, 800a39e <_malloc_r+0x82>
 800a350:	4629      	mov	r1, r5
 800a352:	4638      	mov	r0, r7
 800a354:	f7ff ffc2 	bl	800a2dc <sbrk_aligned>
 800a358:	1c43      	adds	r3, r0, #1
 800a35a:	4604      	mov	r4, r0
 800a35c:	d14d      	bne.n	800a3fa <_malloc_r+0xde>
 800a35e:	6834      	ldr	r4, [r6, #0]
 800a360:	4626      	mov	r6, r4
 800a362:	2e00      	cmp	r6, #0
 800a364:	d140      	bne.n	800a3e8 <_malloc_r+0xcc>
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	4631      	mov	r1, r6
 800a36a:	4638      	mov	r0, r7
 800a36c:	eb04 0803 	add.w	r8, r4, r3
 800a370:	f000 fd56 	bl	800ae20 <_sbrk_r>
 800a374:	4580      	cmp	r8, r0
 800a376:	d13a      	bne.n	800a3ee <_malloc_r+0xd2>
 800a378:	6821      	ldr	r1, [r4, #0]
 800a37a:	3503      	adds	r5, #3
 800a37c:	1a6d      	subs	r5, r5, r1
 800a37e:	f025 0503 	bic.w	r5, r5, #3
 800a382:	3508      	adds	r5, #8
 800a384:	2d0c      	cmp	r5, #12
 800a386:	bf38      	it	cc
 800a388:	250c      	movcc	r5, #12
 800a38a:	4629      	mov	r1, r5
 800a38c:	4638      	mov	r0, r7
 800a38e:	f7ff ffa5 	bl	800a2dc <sbrk_aligned>
 800a392:	3001      	adds	r0, #1
 800a394:	d02b      	beq.n	800a3ee <_malloc_r+0xd2>
 800a396:	6823      	ldr	r3, [r4, #0]
 800a398:	442b      	add	r3, r5
 800a39a:	6023      	str	r3, [r4, #0]
 800a39c:	e00e      	b.n	800a3bc <_malloc_r+0xa0>
 800a39e:	6822      	ldr	r2, [r4, #0]
 800a3a0:	1b52      	subs	r2, r2, r5
 800a3a2:	d41e      	bmi.n	800a3e2 <_malloc_r+0xc6>
 800a3a4:	2a0b      	cmp	r2, #11
 800a3a6:	d916      	bls.n	800a3d6 <_malloc_r+0xba>
 800a3a8:	1961      	adds	r1, r4, r5
 800a3aa:	42a3      	cmp	r3, r4
 800a3ac:	6025      	str	r5, [r4, #0]
 800a3ae:	bf18      	it	ne
 800a3b0:	6059      	strne	r1, [r3, #4]
 800a3b2:	6863      	ldr	r3, [r4, #4]
 800a3b4:	bf08      	it	eq
 800a3b6:	6031      	streq	r1, [r6, #0]
 800a3b8:	5162      	str	r2, [r4, r5]
 800a3ba:	604b      	str	r3, [r1, #4]
 800a3bc:	4638      	mov	r0, r7
 800a3be:	f104 060b 	add.w	r6, r4, #11
 800a3c2:	f002 f831 	bl	800c428 <__malloc_unlock>
 800a3c6:	f026 0607 	bic.w	r6, r6, #7
 800a3ca:	1d23      	adds	r3, r4, #4
 800a3cc:	1af2      	subs	r2, r6, r3
 800a3ce:	d0b6      	beq.n	800a33e <_malloc_r+0x22>
 800a3d0:	1b9b      	subs	r3, r3, r6
 800a3d2:	50a3      	str	r3, [r4, r2]
 800a3d4:	e7b3      	b.n	800a33e <_malloc_r+0x22>
 800a3d6:	6862      	ldr	r2, [r4, #4]
 800a3d8:	42a3      	cmp	r3, r4
 800a3da:	bf0c      	ite	eq
 800a3dc:	6032      	streq	r2, [r6, #0]
 800a3de:	605a      	strne	r2, [r3, #4]
 800a3e0:	e7ec      	b.n	800a3bc <_malloc_r+0xa0>
 800a3e2:	4623      	mov	r3, r4
 800a3e4:	6864      	ldr	r4, [r4, #4]
 800a3e6:	e7b2      	b.n	800a34e <_malloc_r+0x32>
 800a3e8:	4634      	mov	r4, r6
 800a3ea:	6876      	ldr	r6, [r6, #4]
 800a3ec:	e7b9      	b.n	800a362 <_malloc_r+0x46>
 800a3ee:	230c      	movs	r3, #12
 800a3f0:	603b      	str	r3, [r7, #0]
 800a3f2:	4638      	mov	r0, r7
 800a3f4:	f002 f818 	bl	800c428 <__malloc_unlock>
 800a3f8:	e7a1      	b.n	800a33e <_malloc_r+0x22>
 800a3fa:	6025      	str	r5, [r4, #0]
 800a3fc:	e7de      	b.n	800a3bc <_malloc_r+0xa0>
 800a3fe:	bf00      	nop
 800a400:	20000c34 	.word	0x20000c34

0800a404 <__cvt>:
 800a404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a408:	ec55 4b10 	vmov	r4, r5, d0
 800a40c:	2d00      	cmp	r5, #0
 800a40e:	460e      	mov	r6, r1
 800a410:	4619      	mov	r1, r3
 800a412:	462b      	mov	r3, r5
 800a414:	bfbb      	ittet	lt
 800a416:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a41a:	461d      	movlt	r5, r3
 800a41c:	2300      	movge	r3, #0
 800a41e:	232d      	movlt	r3, #45	; 0x2d
 800a420:	700b      	strb	r3, [r1, #0]
 800a422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a424:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a428:	4691      	mov	r9, r2
 800a42a:	f023 0820 	bic.w	r8, r3, #32
 800a42e:	bfbc      	itt	lt
 800a430:	4622      	movlt	r2, r4
 800a432:	4614      	movlt	r4, r2
 800a434:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a438:	d005      	beq.n	800a446 <__cvt+0x42>
 800a43a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a43e:	d100      	bne.n	800a442 <__cvt+0x3e>
 800a440:	3601      	adds	r6, #1
 800a442:	2102      	movs	r1, #2
 800a444:	e000      	b.n	800a448 <__cvt+0x44>
 800a446:	2103      	movs	r1, #3
 800a448:	ab03      	add	r3, sp, #12
 800a44a:	9301      	str	r3, [sp, #4]
 800a44c:	ab02      	add	r3, sp, #8
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	ec45 4b10 	vmov	d0, r4, r5
 800a454:	4653      	mov	r3, sl
 800a456:	4632      	mov	r2, r6
 800a458:	f000 ffce 	bl	800b3f8 <_dtoa_r>
 800a45c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a460:	4607      	mov	r7, r0
 800a462:	d102      	bne.n	800a46a <__cvt+0x66>
 800a464:	f019 0f01 	tst.w	r9, #1
 800a468:	d022      	beq.n	800a4b0 <__cvt+0xac>
 800a46a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a46e:	eb07 0906 	add.w	r9, r7, r6
 800a472:	d110      	bne.n	800a496 <__cvt+0x92>
 800a474:	783b      	ldrb	r3, [r7, #0]
 800a476:	2b30      	cmp	r3, #48	; 0x30
 800a478:	d10a      	bne.n	800a490 <__cvt+0x8c>
 800a47a:	2200      	movs	r2, #0
 800a47c:	2300      	movs	r3, #0
 800a47e:	4620      	mov	r0, r4
 800a480:	4629      	mov	r1, r5
 800a482:	f7f6 fb21 	bl	8000ac8 <__aeabi_dcmpeq>
 800a486:	b918      	cbnz	r0, 800a490 <__cvt+0x8c>
 800a488:	f1c6 0601 	rsb	r6, r6, #1
 800a48c:	f8ca 6000 	str.w	r6, [sl]
 800a490:	f8da 3000 	ldr.w	r3, [sl]
 800a494:	4499      	add	r9, r3
 800a496:	2200      	movs	r2, #0
 800a498:	2300      	movs	r3, #0
 800a49a:	4620      	mov	r0, r4
 800a49c:	4629      	mov	r1, r5
 800a49e:	f7f6 fb13 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4a2:	b108      	cbz	r0, 800a4a8 <__cvt+0xa4>
 800a4a4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a4a8:	2230      	movs	r2, #48	; 0x30
 800a4aa:	9b03      	ldr	r3, [sp, #12]
 800a4ac:	454b      	cmp	r3, r9
 800a4ae:	d307      	bcc.n	800a4c0 <__cvt+0xbc>
 800a4b0:	9b03      	ldr	r3, [sp, #12]
 800a4b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4b4:	1bdb      	subs	r3, r3, r7
 800a4b6:	4638      	mov	r0, r7
 800a4b8:	6013      	str	r3, [r2, #0]
 800a4ba:	b004      	add	sp, #16
 800a4bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4c0:	1c59      	adds	r1, r3, #1
 800a4c2:	9103      	str	r1, [sp, #12]
 800a4c4:	701a      	strb	r2, [r3, #0]
 800a4c6:	e7f0      	b.n	800a4aa <__cvt+0xa6>

0800a4c8 <__exponent>:
 800a4c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2900      	cmp	r1, #0
 800a4ce:	bfb8      	it	lt
 800a4d0:	4249      	neglt	r1, r1
 800a4d2:	f803 2b02 	strb.w	r2, [r3], #2
 800a4d6:	bfb4      	ite	lt
 800a4d8:	222d      	movlt	r2, #45	; 0x2d
 800a4da:	222b      	movge	r2, #43	; 0x2b
 800a4dc:	2909      	cmp	r1, #9
 800a4de:	7042      	strb	r2, [r0, #1]
 800a4e0:	dd2a      	ble.n	800a538 <__exponent+0x70>
 800a4e2:	f10d 0407 	add.w	r4, sp, #7
 800a4e6:	46a4      	mov	ip, r4
 800a4e8:	270a      	movs	r7, #10
 800a4ea:	46a6      	mov	lr, r4
 800a4ec:	460a      	mov	r2, r1
 800a4ee:	fb91 f6f7 	sdiv	r6, r1, r7
 800a4f2:	fb07 1516 	mls	r5, r7, r6, r1
 800a4f6:	3530      	adds	r5, #48	; 0x30
 800a4f8:	2a63      	cmp	r2, #99	; 0x63
 800a4fa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a4fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a502:	4631      	mov	r1, r6
 800a504:	dcf1      	bgt.n	800a4ea <__exponent+0x22>
 800a506:	3130      	adds	r1, #48	; 0x30
 800a508:	f1ae 0502 	sub.w	r5, lr, #2
 800a50c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a510:	1c44      	adds	r4, r0, #1
 800a512:	4629      	mov	r1, r5
 800a514:	4561      	cmp	r1, ip
 800a516:	d30a      	bcc.n	800a52e <__exponent+0x66>
 800a518:	f10d 0209 	add.w	r2, sp, #9
 800a51c:	eba2 020e 	sub.w	r2, r2, lr
 800a520:	4565      	cmp	r5, ip
 800a522:	bf88      	it	hi
 800a524:	2200      	movhi	r2, #0
 800a526:	4413      	add	r3, r2
 800a528:	1a18      	subs	r0, r3, r0
 800a52a:	b003      	add	sp, #12
 800a52c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a52e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a532:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a536:	e7ed      	b.n	800a514 <__exponent+0x4c>
 800a538:	2330      	movs	r3, #48	; 0x30
 800a53a:	3130      	adds	r1, #48	; 0x30
 800a53c:	7083      	strb	r3, [r0, #2]
 800a53e:	70c1      	strb	r1, [r0, #3]
 800a540:	1d03      	adds	r3, r0, #4
 800a542:	e7f1      	b.n	800a528 <__exponent+0x60>

0800a544 <_printf_float>:
 800a544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a548:	ed2d 8b02 	vpush	{d8}
 800a54c:	b08d      	sub	sp, #52	; 0x34
 800a54e:	460c      	mov	r4, r1
 800a550:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a554:	4616      	mov	r6, r2
 800a556:	461f      	mov	r7, r3
 800a558:	4605      	mov	r5, r0
 800a55a:	f001 fef3 	bl	800c344 <_localeconv_r>
 800a55e:	f8d0 a000 	ldr.w	sl, [r0]
 800a562:	4650      	mov	r0, sl
 800a564:	f7f5 fe34 	bl	80001d0 <strlen>
 800a568:	2300      	movs	r3, #0
 800a56a:	930a      	str	r3, [sp, #40]	; 0x28
 800a56c:	6823      	ldr	r3, [r4, #0]
 800a56e:	9305      	str	r3, [sp, #20]
 800a570:	f8d8 3000 	ldr.w	r3, [r8]
 800a574:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a578:	3307      	adds	r3, #7
 800a57a:	f023 0307 	bic.w	r3, r3, #7
 800a57e:	f103 0208 	add.w	r2, r3, #8
 800a582:	f8c8 2000 	str.w	r2, [r8]
 800a586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a58e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a592:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a596:	9307      	str	r3, [sp, #28]
 800a598:	f8cd 8018 	str.w	r8, [sp, #24]
 800a59c:	ee08 0a10 	vmov	s16, r0
 800a5a0:	4b9f      	ldr	r3, [pc, #636]	; (800a820 <_printf_float+0x2dc>)
 800a5a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5aa:	f7f6 fabf 	bl	8000b2c <__aeabi_dcmpun>
 800a5ae:	bb88      	cbnz	r0, 800a614 <_printf_float+0xd0>
 800a5b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5b4:	4b9a      	ldr	r3, [pc, #616]	; (800a820 <_printf_float+0x2dc>)
 800a5b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5ba:	f7f6 fa99 	bl	8000af0 <__aeabi_dcmple>
 800a5be:	bb48      	cbnz	r0, 800a614 <_printf_float+0xd0>
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	4640      	mov	r0, r8
 800a5c6:	4649      	mov	r1, r9
 800a5c8:	f7f6 fa88 	bl	8000adc <__aeabi_dcmplt>
 800a5cc:	b110      	cbz	r0, 800a5d4 <_printf_float+0x90>
 800a5ce:	232d      	movs	r3, #45	; 0x2d
 800a5d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5d4:	4b93      	ldr	r3, [pc, #588]	; (800a824 <_printf_float+0x2e0>)
 800a5d6:	4894      	ldr	r0, [pc, #592]	; (800a828 <_printf_float+0x2e4>)
 800a5d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a5dc:	bf94      	ite	ls
 800a5de:	4698      	movls	r8, r3
 800a5e0:	4680      	movhi	r8, r0
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	6123      	str	r3, [r4, #16]
 800a5e6:	9b05      	ldr	r3, [sp, #20]
 800a5e8:	f023 0204 	bic.w	r2, r3, #4
 800a5ec:	6022      	str	r2, [r4, #0]
 800a5ee:	f04f 0900 	mov.w	r9, #0
 800a5f2:	9700      	str	r7, [sp, #0]
 800a5f4:	4633      	mov	r3, r6
 800a5f6:	aa0b      	add	r2, sp, #44	; 0x2c
 800a5f8:	4621      	mov	r1, r4
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	f000 f9d8 	bl	800a9b0 <_printf_common>
 800a600:	3001      	adds	r0, #1
 800a602:	f040 8090 	bne.w	800a726 <_printf_float+0x1e2>
 800a606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a60a:	b00d      	add	sp, #52	; 0x34
 800a60c:	ecbd 8b02 	vpop	{d8}
 800a610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a614:	4642      	mov	r2, r8
 800a616:	464b      	mov	r3, r9
 800a618:	4640      	mov	r0, r8
 800a61a:	4649      	mov	r1, r9
 800a61c:	f7f6 fa86 	bl	8000b2c <__aeabi_dcmpun>
 800a620:	b140      	cbz	r0, 800a634 <_printf_float+0xf0>
 800a622:	464b      	mov	r3, r9
 800a624:	2b00      	cmp	r3, #0
 800a626:	bfbc      	itt	lt
 800a628:	232d      	movlt	r3, #45	; 0x2d
 800a62a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a62e:	487f      	ldr	r0, [pc, #508]	; (800a82c <_printf_float+0x2e8>)
 800a630:	4b7f      	ldr	r3, [pc, #508]	; (800a830 <_printf_float+0x2ec>)
 800a632:	e7d1      	b.n	800a5d8 <_printf_float+0x94>
 800a634:	6863      	ldr	r3, [r4, #4]
 800a636:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a63a:	9206      	str	r2, [sp, #24]
 800a63c:	1c5a      	adds	r2, r3, #1
 800a63e:	d13f      	bne.n	800a6c0 <_printf_float+0x17c>
 800a640:	2306      	movs	r3, #6
 800a642:	6063      	str	r3, [r4, #4]
 800a644:	9b05      	ldr	r3, [sp, #20]
 800a646:	6861      	ldr	r1, [r4, #4]
 800a648:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a64c:	2300      	movs	r3, #0
 800a64e:	9303      	str	r3, [sp, #12]
 800a650:	ab0a      	add	r3, sp, #40	; 0x28
 800a652:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a656:	ab09      	add	r3, sp, #36	; 0x24
 800a658:	ec49 8b10 	vmov	d0, r8, r9
 800a65c:	9300      	str	r3, [sp, #0]
 800a65e:	6022      	str	r2, [r4, #0]
 800a660:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a664:	4628      	mov	r0, r5
 800a666:	f7ff fecd 	bl	800a404 <__cvt>
 800a66a:	9b06      	ldr	r3, [sp, #24]
 800a66c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a66e:	2b47      	cmp	r3, #71	; 0x47
 800a670:	4680      	mov	r8, r0
 800a672:	d108      	bne.n	800a686 <_printf_float+0x142>
 800a674:	1cc8      	adds	r0, r1, #3
 800a676:	db02      	blt.n	800a67e <_printf_float+0x13a>
 800a678:	6863      	ldr	r3, [r4, #4]
 800a67a:	4299      	cmp	r1, r3
 800a67c:	dd41      	ble.n	800a702 <_printf_float+0x1be>
 800a67e:	f1ab 0b02 	sub.w	fp, fp, #2
 800a682:	fa5f fb8b 	uxtb.w	fp, fp
 800a686:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a68a:	d820      	bhi.n	800a6ce <_printf_float+0x18a>
 800a68c:	3901      	subs	r1, #1
 800a68e:	465a      	mov	r2, fp
 800a690:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a694:	9109      	str	r1, [sp, #36]	; 0x24
 800a696:	f7ff ff17 	bl	800a4c8 <__exponent>
 800a69a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a69c:	1813      	adds	r3, r2, r0
 800a69e:	2a01      	cmp	r2, #1
 800a6a0:	4681      	mov	r9, r0
 800a6a2:	6123      	str	r3, [r4, #16]
 800a6a4:	dc02      	bgt.n	800a6ac <_printf_float+0x168>
 800a6a6:	6822      	ldr	r2, [r4, #0]
 800a6a8:	07d2      	lsls	r2, r2, #31
 800a6aa:	d501      	bpl.n	800a6b0 <_printf_float+0x16c>
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	6123      	str	r3, [r4, #16]
 800a6b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d09c      	beq.n	800a5f2 <_printf_float+0xae>
 800a6b8:	232d      	movs	r3, #45	; 0x2d
 800a6ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6be:	e798      	b.n	800a5f2 <_printf_float+0xae>
 800a6c0:	9a06      	ldr	r2, [sp, #24]
 800a6c2:	2a47      	cmp	r2, #71	; 0x47
 800a6c4:	d1be      	bne.n	800a644 <_printf_float+0x100>
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1bc      	bne.n	800a644 <_printf_float+0x100>
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	e7b9      	b.n	800a642 <_printf_float+0xfe>
 800a6ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a6d2:	d118      	bne.n	800a706 <_printf_float+0x1c2>
 800a6d4:	2900      	cmp	r1, #0
 800a6d6:	6863      	ldr	r3, [r4, #4]
 800a6d8:	dd0b      	ble.n	800a6f2 <_printf_float+0x1ae>
 800a6da:	6121      	str	r1, [r4, #16]
 800a6dc:	b913      	cbnz	r3, 800a6e4 <_printf_float+0x1a0>
 800a6de:	6822      	ldr	r2, [r4, #0]
 800a6e0:	07d0      	lsls	r0, r2, #31
 800a6e2:	d502      	bpl.n	800a6ea <_printf_float+0x1a6>
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	440b      	add	r3, r1
 800a6e8:	6123      	str	r3, [r4, #16]
 800a6ea:	65a1      	str	r1, [r4, #88]	; 0x58
 800a6ec:	f04f 0900 	mov.w	r9, #0
 800a6f0:	e7de      	b.n	800a6b0 <_printf_float+0x16c>
 800a6f2:	b913      	cbnz	r3, 800a6fa <_printf_float+0x1b6>
 800a6f4:	6822      	ldr	r2, [r4, #0]
 800a6f6:	07d2      	lsls	r2, r2, #31
 800a6f8:	d501      	bpl.n	800a6fe <_printf_float+0x1ba>
 800a6fa:	3302      	adds	r3, #2
 800a6fc:	e7f4      	b.n	800a6e8 <_printf_float+0x1a4>
 800a6fe:	2301      	movs	r3, #1
 800a700:	e7f2      	b.n	800a6e8 <_printf_float+0x1a4>
 800a702:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a708:	4299      	cmp	r1, r3
 800a70a:	db05      	blt.n	800a718 <_printf_float+0x1d4>
 800a70c:	6823      	ldr	r3, [r4, #0]
 800a70e:	6121      	str	r1, [r4, #16]
 800a710:	07d8      	lsls	r0, r3, #31
 800a712:	d5ea      	bpl.n	800a6ea <_printf_float+0x1a6>
 800a714:	1c4b      	adds	r3, r1, #1
 800a716:	e7e7      	b.n	800a6e8 <_printf_float+0x1a4>
 800a718:	2900      	cmp	r1, #0
 800a71a:	bfd4      	ite	le
 800a71c:	f1c1 0202 	rsble	r2, r1, #2
 800a720:	2201      	movgt	r2, #1
 800a722:	4413      	add	r3, r2
 800a724:	e7e0      	b.n	800a6e8 <_printf_float+0x1a4>
 800a726:	6823      	ldr	r3, [r4, #0]
 800a728:	055a      	lsls	r2, r3, #21
 800a72a:	d407      	bmi.n	800a73c <_printf_float+0x1f8>
 800a72c:	6923      	ldr	r3, [r4, #16]
 800a72e:	4642      	mov	r2, r8
 800a730:	4631      	mov	r1, r6
 800a732:	4628      	mov	r0, r5
 800a734:	47b8      	blx	r7
 800a736:	3001      	adds	r0, #1
 800a738:	d12c      	bne.n	800a794 <_printf_float+0x250>
 800a73a:	e764      	b.n	800a606 <_printf_float+0xc2>
 800a73c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a740:	f240 80e0 	bls.w	800a904 <_printf_float+0x3c0>
 800a744:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a748:	2200      	movs	r2, #0
 800a74a:	2300      	movs	r3, #0
 800a74c:	f7f6 f9bc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a750:	2800      	cmp	r0, #0
 800a752:	d034      	beq.n	800a7be <_printf_float+0x27a>
 800a754:	4a37      	ldr	r2, [pc, #220]	; (800a834 <_printf_float+0x2f0>)
 800a756:	2301      	movs	r3, #1
 800a758:	4631      	mov	r1, r6
 800a75a:	4628      	mov	r0, r5
 800a75c:	47b8      	blx	r7
 800a75e:	3001      	adds	r0, #1
 800a760:	f43f af51 	beq.w	800a606 <_printf_float+0xc2>
 800a764:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a768:	429a      	cmp	r2, r3
 800a76a:	db02      	blt.n	800a772 <_printf_float+0x22e>
 800a76c:	6823      	ldr	r3, [r4, #0]
 800a76e:	07d8      	lsls	r0, r3, #31
 800a770:	d510      	bpl.n	800a794 <_printf_float+0x250>
 800a772:	ee18 3a10 	vmov	r3, s16
 800a776:	4652      	mov	r2, sl
 800a778:	4631      	mov	r1, r6
 800a77a:	4628      	mov	r0, r5
 800a77c:	47b8      	blx	r7
 800a77e:	3001      	adds	r0, #1
 800a780:	f43f af41 	beq.w	800a606 <_printf_float+0xc2>
 800a784:	f04f 0800 	mov.w	r8, #0
 800a788:	f104 091a 	add.w	r9, r4, #26
 800a78c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a78e:	3b01      	subs	r3, #1
 800a790:	4543      	cmp	r3, r8
 800a792:	dc09      	bgt.n	800a7a8 <_printf_float+0x264>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	079b      	lsls	r3, r3, #30
 800a798:	f100 8105 	bmi.w	800a9a6 <_printf_float+0x462>
 800a79c:	68e0      	ldr	r0, [r4, #12]
 800a79e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7a0:	4298      	cmp	r0, r3
 800a7a2:	bfb8      	it	lt
 800a7a4:	4618      	movlt	r0, r3
 800a7a6:	e730      	b.n	800a60a <_printf_float+0xc6>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	464a      	mov	r2, r9
 800a7ac:	4631      	mov	r1, r6
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	47b8      	blx	r7
 800a7b2:	3001      	adds	r0, #1
 800a7b4:	f43f af27 	beq.w	800a606 <_printf_float+0xc2>
 800a7b8:	f108 0801 	add.w	r8, r8, #1
 800a7bc:	e7e6      	b.n	800a78c <_printf_float+0x248>
 800a7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	dc39      	bgt.n	800a838 <_printf_float+0x2f4>
 800a7c4:	4a1b      	ldr	r2, [pc, #108]	; (800a834 <_printf_float+0x2f0>)
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	4631      	mov	r1, r6
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	47b8      	blx	r7
 800a7ce:	3001      	adds	r0, #1
 800a7d0:	f43f af19 	beq.w	800a606 <_printf_float+0xc2>
 800a7d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	d102      	bne.n	800a7e2 <_printf_float+0x29e>
 800a7dc:	6823      	ldr	r3, [r4, #0]
 800a7de:	07d9      	lsls	r1, r3, #31
 800a7e0:	d5d8      	bpl.n	800a794 <_printf_float+0x250>
 800a7e2:	ee18 3a10 	vmov	r3, s16
 800a7e6:	4652      	mov	r2, sl
 800a7e8:	4631      	mov	r1, r6
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	47b8      	blx	r7
 800a7ee:	3001      	adds	r0, #1
 800a7f0:	f43f af09 	beq.w	800a606 <_printf_float+0xc2>
 800a7f4:	f04f 0900 	mov.w	r9, #0
 800a7f8:	f104 0a1a 	add.w	sl, r4, #26
 800a7fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7fe:	425b      	negs	r3, r3
 800a800:	454b      	cmp	r3, r9
 800a802:	dc01      	bgt.n	800a808 <_printf_float+0x2c4>
 800a804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a806:	e792      	b.n	800a72e <_printf_float+0x1ea>
 800a808:	2301      	movs	r3, #1
 800a80a:	4652      	mov	r2, sl
 800a80c:	4631      	mov	r1, r6
 800a80e:	4628      	mov	r0, r5
 800a810:	47b8      	blx	r7
 800a812:	3001      	adds	r0, #1
 800a814:	f43f aef7 	beq.w	800a606 <_printf_float+0xc2>
 800a818:	f109 0901 	add.w	r9, r9, #1
 800a81c:	e7ee      	b.n	800a7fc <_printf_float+0x2b8>
 800a81e:	bf00      	nop
 800a820:	7fefffff 	.word	0x7fefffff
 800a824:	0800ede0 	.word	0x0800ede0
 800a828:	0800ede4 	.word	0x0800ede4
 800a82c:	0800edec 	.word	0x0800edec
 800a830:	0800ede8 	.word	0x0800ede8
 800a834:	0800edf0 	.word	0x0800edf0
 800a838:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a83a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a83c:	429a      	cmp	r2, r3
 800a83e:	bfa8      	it	ge
 800a840:	461a      	movge	r2, r3
 800a842:	2a00      	cmp	r2, #0
 800a844:	4691      	mov	r9, r2
 800a846:	dc37      	bgt.n	800a8b8 <_printf_float+0x374>
 800a848:	f04f 0b00 	mov.w	fp, #0
 800a84c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a850:	f104 021a 	add.w	r2, r4, #26
 800a854:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a856:	9305      	str	r3, [sp, #20]
 800a858:	eba3 0309 	sub.w	r3, r3, r9
 800a85c:	455b      	cmp	r3, fp
 800a85e:	dc33      	bgt.n	800a8c8 <_printf_float+0x384>
 800a860:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a864:	429a      	cmp	r2, r3
 800a866:	db3b      	blt.n	800a8e0 <_printf_float+0x39c>
 800a868:	6823      	ldr	r3, [r4, #0]
 800a86a:	07da      	lsls	r2, r3, #31
 800a86c:	d438      	bmi.n	800a8e0 <_printf_float+0x39c>
 800a86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a870:	9a05      	ldr	r2, [sp, #20]
 800a872:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a874:	1a9a      	subs	r2, r3, r2
 800a876:	eba3 0901 	sub.w	r9, r3, r1
 800a87a:	4591      	cmp	r9, r2
 800a87c:	bfa8      	it	ge
 800a87e:	4691      	movge	r9, r2
 800a880:	f1b9 0f00 	cmp.w	r9, #0
 800a884:	dc35      	bgt.n	800a8f2 <_printf_float+0x3ae>
 800a886:	f04f 0800 	mov.w	r8, #0
 800a88a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a88e:	f104 0a1a 	add.w	sl, r4, #26
 800a892:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a896:	1a9b      	subs	r3, r3, r2
 800a898:	eba3 0309 	sub.w	r3, r3, r9
 800a89c:	4543      	cmp	r3, r8
 800a89e:	f77f af79 	ble.w	800a794 <_printf_float+0x250>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	4652      	mov	r2, sl
 800a8a6:	4631      	mov	r1, r6
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	47b8      	blx	r7
 800a8ac:	3001      	adds	r0, #1
 800a8ae:	f43f aeaa 	beq.w	800a606 <_printf_float+0xc2>
 800a8b2:	f108 0801 	add.w	r8, r8, #1
 800a8b6:	e7ec      	b.n	800a892 <_printf_float+0x34e>
 800a8b8:	4613      	mov	r3, r2
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	4642      	mov	r2, r8
 800a8be:	4628      	mov	r0, r5
 800a8c0:	47b8      	blx	r7
 800a8c2:	3001      	adds	r0, #1
 800a8c4:	d1c0      	bne.n	800a848 <_printf_float+0x304>
 800a8c6:	e69e      	b.n	800a606 <_printf_float+0xc2>
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	4631      	mov	r1, r6
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	9205      	str	r2, [sp, #20]
 800a8d0:	47b8      	blx	r7
 800a8d2:	3001      	adds	r0, #1
 800a8d4:	f43f ae97 	beq.w	800a606 <_printf_float+0xc2>
 800a8d8:	9a05      	ldr	r2, [sp, #20]
 800a8da:	f10b 0b01 	add.w	fp, fp, #1
 800a8de:	e7b9      	b.n	800a854 <_printf_float+0x310>
 800a8e0:	ee18 3a10 	vmov	r3, s16
 800a8e4:	4652      	mov	r2, sl
 800a8e6:	4631      	mov	r1, r6
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	47b8      	blx	r7
 800a8ec:	3001      	adds	r0, #1
 800a8ee:	d1be      	bne.n	800a86e <_printf_float+0x32a>
 800a8f0:	e689      	b.n	800a606 <_printf_float+0xc2>
 800a8f2:	9a05      	ldr	r2, [sp, #20]
 800a8f4:	464b      	mov	r3, r9
 800a8f6:	4442      	add	r2, r8
 800a8f8:	4631      	mov	r1, r6
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	47b8      	blx	r7
 800a8fe:	3001      	adds	r0, #1
 800a900:	d1c1      	bne.n	800a886 <_printf_float+0x342>
 800a902:	e680      	b.n	800a606 <_printf_float+0xc2>
 800a904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a906:	2a01      	cmp	r2, #1
 800a908:	dc01      	bgt.n	800a90e <_printf_float+0x3ca>
 800a90a:	07db      	lsls	r3, r3, #31
 800a90c:	d538      	bpl.n	800a980 <_printf_float+0x43c>
 800a90e:	2301      	movs	r3, #1
 800a910:	4642      	mov	r2, r8
 800a912:	4631      	mov	r1, r6
 800a914:	4628      	mov	r0, r5
 800a916:	47b8      	blx	r7
 800a918:	3001      	adds	r0, #1
 800a91a:	f43f ae74 	beq.w	800a606 <_printf_float+0xc2>
 800a91e:	ee18 3a10 	vmov	r3, s16
 800a922:	4652      	mov	r2, sl
 800a924:	4631      	mov	r1, r6
 800a926:	4628      	mov	r0, r5
 800a928:	47b8      	blx	r7
 800a92a:	3001      	adds	r0, #1
 800a92c:	f43f ae6b 	beq.w	800a606 <_printf_float+0xc2>
 800a930:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a934:	2200      	movs	r2, #0
 800a936:	2300      	movs	r3, #0
 800a938:	f7f6 f8c6 	bl	8000ac8 <__aeabi_dcmpeq>
 800a93c:	b9d8      	cbnz	r0, 800a976 <_printf_float+0x432>
 800a93e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a940:	f108 0201 	add.w	r2, r8, #1
 800a944:	3b01      	subs	r3, #1
 800a946:	4631      	mov	r1, r6
 800a948:	4628      	mov	r0, r5
 800a94a:	47b8      	blx	r7
 800a94c:	3001      	adds	r0, #1
 800a94e:	d10e      	bne.n	800a96e <_printf_float+0x42a>
 800a950:	e659      	b.n	800a606 <_printf_float+0xc2>
 800a952:	2301      	movs	r3, #1
 800a954:	4652      	mov	r2, sl
 800a956:	4631      	mov	r1, r6
 800a958:	4628      	mov	r0, r5
 800a95a:	47b8      	blx	r7
 800a95c:	3001      	adds	r0, #1
 800a95e:	f43f ae52 	beq.w	800a606 <_printf_float+0xc2>
 800a962:	f108 0801 	add.w	r8, r8, #1
 800a966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a968:	3b01      	subs	r3, #1
 800a96a:	4543      	cmp	r3, r8
 800a96c:	dcf1      	bgt.n	800a952 <_printf_float+0x40e>
 800a96e:	464b      	mov	r3, r9
 800a970:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a974:	e6dc      	b.n	800a730 <_printf_float+0x1ec>
 800a976:	f04f 0800 	mov.w	r8, #0
 800a97a:	f104 0a1a 	add.w	sl, r4, #26
 800a97e:	e7f2      	b.n	800a966 <_printf_float+0x422>
 800a980:	2301      	movs	r3, #1
 800a982:	4642      	mov	r2, r8
 800a984:	e7df      	b.n	800a946 <_printf_float+0x402>
 800a986:	2301      	movs	r3, #1
 800a988:	464a      	mov	r2, r9
 800a98a:	4631      	mov	r1, r6
 800a98c:	4628      	mov	r0, r5
 800a98e:	47b8      	blx	r7
 800a990:	3001      	adds	r0, #1
 800a992:	f43f ae38 	beq.w	800a606 <_printf_float+0xc2>
 800a996:	f108 0801 	add.w	r8, r8, #1
 800a99a:	68e3      	ldr	r3, [r4, #12]
 800a99c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a99e:	1a5b      	subs	r3, r3, r1
 800a9a0:	4543      	cmp	r3, r8
 800a9a2:	dcf0      	bgt.n	800a986 <_printf_float+0x442>
 800a9a4:	e6fa      	b.n	800a79c <_printf_float+0x258>
 800a9a6:	f04f 0800 	mov.w	r8, #0
 800a9aa:	f104 0919 	add.w	r9, r4, #25
 800a9ae:	e7f4      	b.n	800a99a <_printf_float+0x456>

0800a9b0 <_printf_common>:
 800a9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b4:	4616      	mov	r6, r2
 800a9b6:	4699      	mov	r9, r3
 800a9b8:	688a      	ldr	r2, [r1, #8]
 800a9ba:	690b      	ldr	r3, [r1, #16]
 800a9bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	bfb8      	it	lt
 800a9c4:	4613      	movlt	r3, r2
 800a9c6:	6033      	str	r3, [r6, #0]
 800a9c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9cc:	4607      	mov	r7, r0
 800a9ce:	460c      	mov	r4, r1
 800a9d0:	b10a      	cbz	r2, 800a9d6 <_printf_common+0x26>
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	6033      	str	r3, [r6, #0]
 800a9d6:	6823      	ldr	r3, [r4, #0]
 800a9d8:	0699      	lsls	r1, r3, #26
 800a9da:	bf42      	ittt	mi
 800a9dc:	6833      	ldrmi	r3, [r6, #0]
 800a9de:	3302      	addmi	r3, #2
 800a9e0:	6033      	strmi	r3, [r6, #0]
 800a9e2:	6825      	ldr	r5, [r4, #0]
 800a9e4:	f015 0506 	ands.w	r5, r5, #6
 800a9e8:	d106      	bne.n	800a9f8 <_printf_common+0x48>
 800a9ea:	f104 0a19 	add.w	sl, r4, #25
 800a9ee:	68e3      	ldr	r3, [r4, #12]
 800a9f0:	6832      	ldr	r2, [r6, #0]
 800a9f2:	1a9b      	subs	r3, r3, r2
 800a9f4:	42ab      	cmp	r3, r5
 800a9f6:	dc26      	bgt.n	800aa46 <_printf_common+0x96>
 800a9f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9fc:	1e13      	subs	r3, r2, #0
 800a9fe:	6822      	ldr	r2, [r4, #0]
 800aa00:	bf18      	it	ne
 800aa02:	2301      	movne	r3, #1
 800aa04:	0692      	lsls	r2, r2, #26
 800aa06:	d42b      	bmi.n	800aa60 <_printf_common+0xb0>
 800aa08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa0c:	4649      	mov	r1, r9
 800aa0e:	4638      	mov	r0, r7
 800aa10:	47c0      	blx	r8
 800aa12:	3001      	adds	r0, #1
 800aa14:	d01e      	beq.n	800aa54 <_printf_common+0xa4>
 800aa16:	6823      	ldr	r3, [r4, #0]
 800aa18:	68e5      	ldr	r5, [r4, #12]
 800aa1a:	6832      	ldr	r2, [r6, #0]
 800aa1c:	f003 0306 	and.w	r3, r3, #6
 800aa20:	2b04      	cmp	r3, #4
 800aa22:	bf08      	it	eq
 800aa24:	1aad      	subeq	r5, r5, r2
 800aa26:	68a3      	ldr	r3, [r4, #8]
 800aa28:	6922      	ldr	r2, [r4, #16]
 800aa2a:	bf0c      	ite	eq
 800aa2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa30:	2500      	movne	r5, #0
 800aa32:	4293      	cmp	r3, r2
 800aa34:	bfc4      	itt	gt
 800aa36:	1a9b      	subgt	r3, r3, r2
 800aa38:	18ed      	addgt	r5, r5, r3
 800aa3a:	2600      	movs	r6, #0
 800aa3c:	341a      	adds	r4, #26
 800aa3e:	42b5      	cmp	r5, r6
 800aa40:	d11a      	bne.n	800aa78 <_printf_common+0xc8>
 800aa42:	2000      	movs	r0, #0
 800aa44:	e008      	b.n	800aa58 <_printf_common+0xa8>
 800aa46:	2301      	movs	r3, #1
 800aa48:	4652      	mov	r2, sl
 800aa4a:	4649      	mov	r1, r9
 800aa4c:	4638      	mov	r0, r7
 800aa4e:	47c0      	blx	r8
 800aa50:	3001      	adds	r0, #1
 800aa52:	d103      	bne.n	800aa5c <_printf_common+0xac>
 800aa54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa5c:	3501      	adds	r5, #1
 800aa5e:	e7c6      	b.n	800a9ee <_printf_common+0x3e>
 800aa60:	18e1      	adds	r1, r4, r3
 800aa62:	1c5a      	adds	r2, r3, #1
 800aa64:	2030      	movs	r0, #48	; 0x30
 800aa66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa6a:	4422      	add	r2, r4
 800aa6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa74:	3302      	adds	r3, #2
 800aa76:	e7c7      	b.n	800aa08 <_printf_common+0x58>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	4622      	mov	r2, r4
 800aa7c:	4649      	mov	r1, r9
 800aa7e:	4638      	mov	r0, r7
 800aa80:	47c0      	blx	r8
 800aa82:	3001      	adds	r0, #1
 800aa84:	d0e6      	beq.n	800aa54 <_printf_common+0xa4>
 800aa86:	3601      	adds	r6, #1
 800aa88:	e7d9      	b.n	800aa3e <_printf_common+0x8e>
	...

0800aa8c <_printf_i>:
 800aa8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa90:	7e0f      	ldrb	r7, [r1, #24]
 800aa92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa94:	2f78      	cmp	r7, #120	; 0x78
 800aa96:	4691      	mov	r9, r2
 800aa98:	4680      	mov	r8, r0
 800aa9a:	460c      	mov	r4, r1
 800aa9c:	469a      	mov	sl, r3
 800aa9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aaa2:	d807      	bhi.n	800aab4 <_printf_i+0x28>
 800aaa4:	2f62      	cmp	r7, #98	; 0x62
 800aaa6:	d80a      	bhi.n	800aabe <_printf_i+0x32>
 800aaa8:	2f00      	cmp	r7, #0
 800aaaa:	f000 80d8 	beq.w	800ac5e <_printf_i+0x1d2>
 800aaae:	2f58      	cmp	r7, #88	; 0x58
 800aab0:	f000 80a3 	beq.w	800abfa <_printf_i+0x16e>
 800aab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aabc:	e03a      	b.n	800ab34 <_printf_i+0xa8>
 800aabe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aac2:	2b15      	cmp	r3, #21
 800aac4:	d8f6      	bhi.n	800aab4 <_printf_i+0x28>
 800aac6:	a101      	add	r1, pc, #4	; (adr r1, 800aacc <_printf_i+0x40>)
 800aac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aacc:	0800ab25 	.word	0x0800ab25
 800aad0:	0800ab39 	.word	0x0800ab39
 800aad4:	0800aab5 	.word	0x0800aab5
 800aad8:	0800aab5 	.word	0x0800aab5
 800aadc:	0800aab5 	.word	0x0800aab5
 800aae0:	0800aab5 	.word	0x0800aab5
 800aae4:	0800ab39 	.word	0x0800ab39
 800aae8:	0800aab5 	.word	0x0800aab5
 800aaec:	0800aab5 	.word	0x0800aab5
 800aaf0:	0800aab5 	.word	0x0800aab5
 800aaf4:	0800aab5 	.word	0x0800aab5
 800aaf8:	0800ac45 	.word	0x0800ac45
 800aafc:	0800ab69 	.word	0x0800ab69
 800ab00:	0800ac27 	.word	0x0800ac27
 800ab04:	0800aab5 	.word	0x0800aab5
 800ab08:	0800aab5 	.word	0x0800aab5
 800ab0c:	0800ac67 	.word	0x0800ac67
 800ab10:	0800aab5 	.word	0x0800aab5
 800ab14:	0800ab69 	.word	0x0800ab69
 800ab18:	0800aab5 	.word	0x0800aab5
 800ab1c:	0800aab5 	.word	0x0800aab5
 800ab20:	0800ac2f 	.word	0x0800ac2f
 800ab24:	682b      	ldr	r3, [r5, #0]
 800ab26:	1d1a      	adds	r2, r3, #4
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	602a      	str	r2, [r5, #0]
 800ab2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab34:	2301      	movs	r3, #1
 800ab36:	e0a3      	b.n	800ac80 <_printf_i+0x1f4>
 800ab38:	6820      	ldr	r0, [r4, #0]
 800ab3a:	6829      	ldr	r1, [r5, #0]
 800ab3c:	0606      	lsls	r6, r0, #24
 800ab3e:	f101 0304 	add.w	r3, r1, #4
 800ab42:	d50a      	bpl.n	800ab5a <_printf_i+0xce>
 800ab44:	680e      	ldr	r6, [r1, #0]
 800ab46:	602b      	str	r3, [r5, #0]
 800ab48:	2e00      	cmp	r6, #0
 800ab4a:	da03      	bge.n	800ab54 <_printf_i+0xc8>
 800ab4c:	232d      	movs	r3, #45	; 0x2d
 800ab4e:	4276      	negs	r6, r6
 800ab50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab54:	485e      	ldr	r0, [pc, #376]	; (800acd0 <_printf_i+0x244>)
 800ab56:	230a      	movs	r3, #10
 800ab58:	e019      	b.n	800ab8e <_printf_i+0x102>
 800ab5a:	680e      	ldr	r6, [r1, #0]
 800ab5c:	602b      	str	r3, [r5, #0]
 800ab5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab62:	bf18      	it	ne
 800ab64:	b236      	sxthne	r6, r6
 800ab66:	e7ef      	b.n	800ab48 <_printf_i+0xbc>
 800ab68:	682b      	ldr	r3, [r5, #0]
 800ab6a:	6820      	ldr	r0, [r4, #0]
 800ab6c:	1d19      	adds	r1, r3, #4
 800ab6e:	6029      	str	r1, [r5, #0]
 800ab70:	0601      	lsls	r1, r0, #24
 800ab72:	d501      	bpl.n	800ab78 <_printf_i+0xec>
 800ab74:	681e      	ldr	r6, [r3, #0]
 800ab76:	e002      	b.n	800ab7e <_printf_i+0xf2>
 800ab78:	0646      	lsls	r6, r0, #25
 800ab7a:	d5fb      	bpl.n	800ab74 <_printf_i+0xe8>
 800ab7c:	881e      	ldrh	r6, [r3, #0]
 800ab7e:	4854      	ldr	r0, [pc, #336]	; (800acd0 <_printf_i+0x244>)
 800ab80:	2f6f      	cmp	r7, #111	; 0x6f
 800ab82:	bf0c      	ite	eq
 800ab84:	2308      	moveq	r3, #8
 800ab86:	230a      	movne	r3, #10
 800ab88:	2100      	movs	r1, #0
 800ab8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab8e:	6865      	ldr	r5, [r4, #4]
 800ab90:	60a5      	str	r5, [r4, #8]
 800ab92:	2d00      	cmp	r5, #0
 800ab94:	bfa2      	ittt	ge
 800ab96:	6821      	ldrge	r1, [r4, #0]
 800ab98:	f021 0104 	bicge.w	r1, r1, #4
 800ab9c:	6021      	strge	r1, [r4, #0]
 800ab9e:	b90e      	cbnz	r6, 800aba4 <_printf_i+0x118>
 800aba0:	2d00      	cmp	r5, #0
 800aba2:	d04d      	beq.n	800ac40 <_printf_i+0x1b4>
 800aba4:	4615      	mov	r5, r2
 800aba6:	fbb6 f1f3 	udiv	r1, r6, r3
 800abaa:	fb03 6711 	mls	r7, r3, r1, r6
 800abae:	5dc7      	ldrb	r7, [r0, r7]
 800abb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800abb4:	4637      	mov	r7, r6
 800abb6:	42bb      	cmp	r3, r7
 800abb8:	460e      	mov	r6, r1
 800abba:	d9f4      	bls.n	800aba6 <_printf_i+0x11a>
 800abbc:	2b08      	cmp	r3, #8
 800abbe:	d10b      	bne.n	800abd8 <_printf_i+0x14c>
 800abc0:	6823      	ldr	r3, [r4, #0]
 800abc2:	07de      	lsls	r6, r3, #31
 800abc4:	d508      	bpl.n	800abd8 <_printf_i+0x14c>
 800abc6:	6923      	ldr	r3, [r4, #16]
 800abc8:	6861      	ldr	r1, [r4, #4]
 800abca:	4299      	cmp	r1, r3
 800abcc:	bfde      	ittt	le
 800abce:	2330      	movle	r3, #48	; 0x30
 800abd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800abd4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800abd8:	1b52      	subs	r2, r2, r5
 800abda:	6122      	str	r2, [r4, #16]
 800abdc:	f8cd a000 	str.w	sl, [sp]
 800abe0:	464b      	mov	r3, r9
 800abe2:	aa03      	add	r2, sp, #12
 800abe4:	4621      	mov	r1, r4
 800abe6:	4640      	mov	r0, r8
 800abe8:	f7ff fee2 	bl	800a9b0 <_printf_common>
 800abec:	3001      	adds	r0, #1
 800abee:	d14c      	bne.n	800ac8a <_printf_i+0x1fe>
 800abf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abf4:	b004      	add	sp, #16
 800abf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abfa:	4835      	ldr	r0, [pc, #212]	; (800acd0 <_printf_i+0x244>)
 800abfc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac00:	6829      	ldr	r1, [r5, #0]
 800ac02:	6823      	ldr	r3, [r4, #0]
 800ac04:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac08:	6029      	str	r1, [r5, #0]
 800ac0a:	061d      	lsls	r5, r3, #24
 800ac0c:	d514      	bpl.n	800ac38 <_printf_i+0x1ac>
 800ac0e:	07df      	lsls	r7, r3, #31
 800ac10:	bf44      	itt	mi
 800ac12:	f043 0320 	orrmi.w	r3, r3, #32
 800ac16:	6023      	strmi	r3, [r4, #0]
 800ac18:	b91e      	cbnz	r6, 800ac22 <_printf_i+0x196>
 800ac1a:	6823      	ldr	r3, [r4, #0]
 800ac1c:	f023 0320 	bic.w	r3, r3, #32
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	2310      	movs	r3, #16
 800ac24:	e7b0      	b.n	800ab88 <_printf_i+0xfc>
 800ac26:	6823      	ldr	r3, [r4, #0]
 800ac28:	f043 0320 	orr.w	r3, r3, #32
 800ac2c:	6023      	str	r3, [r4, #0]
 800ac2e:	2378      	movs	r3, #120	; 0x78
 800ac30:	4828      	ldr	r0, [pc, #160]	; (800acd4 <_printf_i+0x248>)
 800ac32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac36:	e7e3      	b.n	800ac00 <_printf_i+0x174>
 800ac38:	0659      	lsls	r1, r3, #25
 800ac3a:	bf48      	it	mi
 800ac3c:	b2b6      	uxthmi	r6, r6
 800ac3e:	e7e6      	b.n	800ac0e <_printf_i+0x182>
 800ac40:	4615      	mov	r5, r2
 800ac42:	e7bb      	b.n	800abbc <_printf_i+0x130>
 800ac44:	682b      	ldr	r3, [r5, #0]
 800ac46:	6826      	ldr	r6, [r4, #0]
 800ac48:	6961      	ldr	r1, [r4, #20]
 800ac4a:	1d18      	adds	r0, r3, #4
 800ac4c:	6028      	str	r0, [r5, #0]
 800ac4e:	0635      	lsls	r5, r6, #24
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	d501      	bpl.n	800ac58 <_printf_i+0x1cc>
 800ac54:	6019      	str	r1, [r3, #0]
 800ac56:	e002      	b.n	800ac5e <_printf_i+0x1d2>
 800ac58:	0670      	lsls	r0, r6, #25
 800ac5a:	d5fb      	bpl.n	800ac54 <_printf_i+0x1c8>
 800ac5c:	8019      	strh	r1, [r3, #0]
 800ac5e:	2300      	movs	r3, #0
 800ac60:	6123      	str	r3, [r4, #16]
 800ac62:	4615      	mov	r5, r2
 800ac64:	e7ba      	b.n	800abdc <_printf_i+0x150>
 800ac66:	682b      	ldr	r3, [r5, #0]
 800ac68:	1d1a      	adds	r2, r3, #4
 800ac6a:	602a      	str	r2, [r5, #0]
 800ac6c:	681d      	ldr	r5, [r3, #0]
 800ac6e:	6862      	ldr	r2, [r4, #4]
 800ac70:	2100      	movs	r1, #0
 800ac72:	4628      	mov	r0, r5
 800ac74:	f7f5 fab4 	bl	80001e0 <memchr>
 800ac78:	b108      	cbz	r0, 800ac7e <_printf_i+0x1f2>
 800ac7a:	1b40      	subs	r0, r0, r5
 800ac7c:	6060      	str	r0, [r4, #4]
 800ac7e:	6863      	ldr	r3, [r4, #4]
 800ac80:	6123      	str	r3, [r4, #16]
 800ac82:	2300      	movs	r3, #0
 800ac84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac88:	e7a8      	b.n	800abdc <_printf_i+0x150>
 800ac8a:	6923      	ldr	r3, [r4, #16]
 800ac8c:	462a      	mov	r2, r5
 800ac8e:	4649      	mov	r1, r9
 800ac90:	4640      	mov	r0, r8
 800ac92:	47d0      	blx	sl
 800ac94:	3001      	adds	r0, #1
 800ac96:	d0ab      	beq.n	800abf0 <_printf_i+0x164>
 800ac98:	6823      	ldr	r3, [r4, #0]
 800ac9a:	079b      	lsls	r3, r3, #30
 800ac9c:	d413      	bmi.n	800acc6 <_printf_i+0x23a>
 800ac9e:	68e0      	ldr	r0, [r4, #12]
 800aca0:	9b03      	ldr	r3, [sp, #12]
 800aca2:	4298      	cmp	r0, r3
 800aca4:	bfb8      	it	lt
 800aca6:	4618      	movlt	r0, r3
 800aca8:	e7a4      	b.n	800abf4 <_printf_i+0x168>
 800acaa:	2301      	movs	r3, #1
 800acac:	4632      	mov	r2, r6
 800acae:	4649      	mov	r1, r9
 800acb0:	4640      	mov	r0, r8
 800acb2:	47d0      	blx	sl
 800acb4:	3001      	adds	r0, #1
 800acb6:	d09b      	beq.n	800abf0 <_printf_i+0x164>
 800acb8:	3501      	adds	r5, #1
 800acba:	68e3      	ldr	r3, [r4, #12]
 800acbc:	9903      	ldr	r1, [sp, #12]
 800acbe:	1a5b      	subs	r3, r3, r1
 800acc0:	42ab      	cmp	r3, r5
 800acc2:	dcf2      	bgt.n	800acaa <_printf_i+0x21e>
 800acc4:	e7eb      	b.n	800ac9e <_printf_i+0x212>
 800acc6:	2500      	movs	r5, #0
 800acc8:	f104 0619 	add.w	r6, r4, #25
 800accc:	e7f5      	b.n	800acba <_printf_i+0x22e>
 800acce:	bf00      	nop
 800acd0:	0800edf2 	.word	0x0800edf2
 800acd4:	0800ee03 	.word	0x0800ee03

0800acd8 <iprintf>:
 800acd8:	b40f      	push	{r0, r1, r2, r3}
 800acda:	4b0a      	ldr	r3, [pc, #40]	; (800ad04 <iprintf+0x2c>)
 800acdc:	b513      	push	{r0, r1, r4, lr}
 800acde:	681c      	ldr	r4, [r3, #0]
 800ace0:	b124      	cbz	r4, 800acec <iprintf+0x14>
 800ace2:	69a3      	ldr	r3, [r4, #24]
 800ace4:	b913      	cbnz	r3, 800acec <iprintf+0x14>
 800ace6:	4620      	mov	r0, r4
 800ace8:	f001 fa8e 	bl	800c208 <__sinit>
 800acec:	ab05      	add	r3, sp, #20
 800acee:	9a04      	ldr	r2, [sp, #16]
 800acf0:	68a1      	ldr	r1, [r4, #8]
 800acf2:	9301      	str	r3, [sp, #4]
 800acf4:	4620      	mov	r0, r4
 800acf6:	f002 f8bd 	bl	800ce74 <_vfiprintf_r>
 800acfa:	b002      	add	sp, #8
 800acfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad00:	b004      	add	sp, #16
 800ad02:	4770      	bx	lr
 800ad04:	200009e8 	.word	0x200009e8

0800ad08 <putchar>:
 800ad08:	4b09      	ldr	r3, [pc, #36]	; (800ad30 <putchar+0x28>)
 800ad0a:	b513      	push	{r0, r1, r4, lr}
 800ad0c:	681c      	ldr	r4, [r3, #0]
 800ad0e:	4601      	mov	r1, r0
 800ad10:	b134      	cbz	r4, 800ad20 <putchar+0x18>
 800ad12:	69a3      	ldr	r3, [r4, #24]
 800ad14:	b923      	cbnz	r3, 800ad20 <putchar+0x18>
 800ad16:	9001      	str	r0, [sp, #4]
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f001 fa75 	bl	800c208 <__sinit>
 800ad1e:	9901      	ldr	r1, [sp, #4]
 800ad20:	68a2      	ldr	r2, [r4, #8]
 800ad22:	4620      	mov	r0, r4
 800ad24:	b002      	add	sp, #8
 800ad26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad2a:	f002 b9d3 	b.w	800d0d4 <_putc_r>
 800ad2e:	bf00      	nop
 800ad30:	200009e8 	.word	0x200009e8

0800ad34 <_puts_r>:
 800ad34:	b570      	push	{r4, r5, r6, lr}
 800ad36:	460e      	mov	r6, r1
 800ad38:	4605      	mov	r5, r0
 800ad3a:	b118      	cbz	r0, 800ad44 <_puts_r+0x10>
 800ad3c:	6983      	ldr	r3, [r0, #24]
 800ad3e:	b90b      	cbnz	r3, 800ad44 <_puts_r+0x10>
 800ad40:	f001 fa62 	bl	800c208 <__sinit>
 800ad44:	69ab      	ldr	r3, [r5, #24]
 800ad46:	68ac      	ldr	r4, [r5, #8]
 800ad48:	b913      	cbnz	r3, 800ad50 <_puts_r+0x1c>
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	f001 fa5c 	bl	800c208 <__sinit>
 800ad50:	4b2c      	ldr	r3, [pc, #176]	; (800ae04 <_puts_r+0xd0>)
 800ad52:	429c      	cmp	r4, r3
 800ad54:	d120      	bne.n	800ad98 <_puts_r+0x64>
 800ad56:	686c      	ldr	r4, [r5, #4]
 800ad58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad5a:	07db      	lsls	r3, r3, #31
 800ad5c:	d405      	bmi.n	800ad6a <_puts_r+0x36>
 800ad5e:	89a3      	ldrh	r3, [r4, #12]
 800ad60:	0598      	lsls	r0, r3, #22
 800ad62:	d402      	bmi.n	800ad6a <_puts_r+0x36>
 800ad64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad66:	f001 faf2 	bl	800c34e <__retarget_lock_acquire_recursive>
 800ad6a:	89a3      	ldrh	r3, [r4, #12]
 800ad6c:	0719      	lsls	r1, r3, #28
 800ad6e:	d51d      	bpl.n	800adac <_puts_r+0x78>
 800ad70:	6923      	ldr	r3, [r4, #16]
 800ad72:	b1db      	cbz	r3, 800adac <_puts_r+0x78>
 800ad74:	3e01      	subs	r6, #1
 800ad76:	68a3      	ldr	r3, [r4, #8]
 800ad78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	60a3      	str	r3, [r4, #8]
 800ad80:	bb39      	cbnz	r1, 800add2 <_puts_r+0x9e>
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	da38      	bge.n	800adf8 <_puts_r+0xc4>
 800ad86:	4622      	mov	r2, r4
 800ad88:	210a      	movs	r1, #10
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	f000 f9e8 	bl	800b160 <__swbuf_r>
 800ad90:	3001      	adds	r0, #1
 800ad92:	d011      	beq.n	800adb8 <_puts_r+0x84>
 800ad94:	250a      	movs	r5, #10
 800ad96:	e011      	b.n	800adbc <_puts_r+0x88>
 800ad98:	4b1b      	ldr	r3, [pc, #108]	; (800ae08 <_puts_r+0xd4>)
 800ad9a:	429c      	cmp	r4, r3
 800ad9c:	d101      	bne.n	800ada2 <_puts_r+0x6e>
 800ad9e:	68ac      	ldr	r4, [r5, #8]
 800ada0:	e7da      	b.n	800ad58 <_puts_r+0x24>
 800ada2:	4b1a      	ldr	r3, [pc, #104]	; (800ae0c <_puts_r+0xd8>)
 800ada4:	429c      	cmp	r4, r3
 800ada6:	bf08      	it	eq
 800ada8:	68ec      	ldreq	r4, [r5, #12]
 800adaa:	e7d5      	b.n	800ad58 <_puts_r+0x24>
 800adac:	4621      	mov	r1, r4
 800adae:	4628      	mov	r0, r5
 800adb0:	f000 fa28 	bl	800b204 <__swsetup_r>
 800adb4:	2800      	cmp	r0, #0
 800adb6:	d0dd      	beq.n	800ad74 <_puts_r+0x40>
 800adb8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800adbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adbe:	07da      	lsls	r2, r3, #31
 800adc0:	d405      	bmi.n	800adce <_puts_r+0x9a>
 800adc2:	89a3      	ldrh	r3, [r4, #12]
 800adc4:	059b      	lsls	r3, r3, #22
 800adc6:	d402      	bmi.n	800adce <_puts_r+0x9a>
 800adc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adca:	f001 fac1 	bl	800c350 <__retarget_lock_release_recursive>
 800adce:	4628      	mov	r0, r5
 800add0:	bd70      	pop	{r4, r5, r6, pc}
 800add2:	2b00      	cmp	r3, #0
 800add4:	da04      	bge.n	800ade0 <_puts_r+0xac>
 800add6:	69a2      	ldr	r2, [r4, #24]
 800add8:	429a      	cmp	r2, r3
 800adda:	dc06      	bgt.n	800adea <_puts_r+0xb6>
 800addc:	290a      	cmp	r1, #10
 800adde:	d004      	beq.n	800adea <_puts_r+0xb6>
 800ade0:	6823      	ldr	r3, [r4, #0]
 800ade2:	1c5a      	adds	r2, r3, #1
 800ade4:	6022      	str	r2, [r4, #0]
 800ade6:	7019      	strb	r1, [r3, #0]
 800ade8:	e7c5      	b.n	800ad76 <_puts_r+0x42>
 800adea:	4622      	mov	r2, r4
 800adec:	4628      	mov	r0, r5
 800adee:	f000 f9b7 	bl	800b160 <__swbuf_r>
 800adf2:	3001      	adds	r0, #1
 800adf4:	d1bf      	bne.n	800ad76 <_puts_r+0x42>
 800adf6:	e7df      	b.n	800adb8 <_puts_r+0x84>
 800adf8:	6823      	ldr	r3, [r4, #0]
 800adfa:	250a      	movs	r5, #10
 800adfc:	1c5a      	adds	r2, r3, #1
 800adfe:	6022      	str	r2, [r4, #0]
 800ae00:	701d      	strb	r5, [r3, #0]
 800ae02:	e7db      	b.n	800adbc <_puts_r+0x88>
 800ae04:	0800efc8 	.word	0x0800efc8
 800ae08:	0800efe8 	.word	0x0800efe8
 800ae0c:	0800efa8 	.word	0x0800efa8

0800ae10 <puts>:
 800ae10:	4b02      	ldr	r3, [pc, #8]	; (800ae1c <puts+0xc>)
 800ae12:	4601      	mov	r1, r0
 800ae14:	6818      	ldr	r0, [r3, #0]
 800ae16:	f7ff bf8d 	b.w	800ad34 <_puts_r>
 800ae1a:	bf00      	nop
 800ae1c:	200009e8 	.word	0x200009e8

0800ae20 <_sbrk_r>:
 800ae20:	b538      	push	{r3, r4, r5, lr}
 800ae22:	4d06      	ldr	r5, [pc, #24]	; (800ae3c <_sbrk_r+0x1c>)
 800ae24:	2300      	movs	r3, #0
 800ae26:	4604      	mov	r4, r0
 800ae28:	4608      	mov	r0, r1
 800ae2a:	602b      	str	r3, [r5, #0]
 800ae2c:	f7fa fbce 	bl	80055cc <_sbrk>
 800ae30:	1c43      	adds	r3, r0, #1
 800ae32:	d102      	bne.n	800ae3a <_sbrk_r+0x1a>
 800ae34:	682b      	ldr	r3, [r5, #0]
 800ae36:	b103      	cbz	r3, 800ae3a <_sbrk_r+0x1a>
 800ae38:	6023      	str	r3, [r4, #0]
 800ae3a:	bd38      	pop	{r3, r4, r5, pc}
 800ae3c:	20000c40 	.word	0x20000c40

0800ae40 <siprintf>:
 800ae40:	b40e      	push	{r1, r2, r3}
 800ae42:	b500      	push	{lr}
 800ae44:	b09c      	sub	sp, #112	; 0x70
 800ae46:	ab1d      	add	r3, sp, #116	; 0x74
 800ae48:	9002      	str	r0, [sp, #8]
 800ae4a:	9006      	str	r0, [sp, #24]
 800ae4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae50:	4809      	ldr	r0, [pc, #36]	; (800ae78 <siprintf+0x38>)
 800ae52:	9107      	str	r1, [sp, #28]
 800ae54:	9104      	str	r1, [sp, #16]
 800ae56:	4909      	ldr	r1, [pc, #36]	; (800ae7c <siprintf+0x3c>)
 800ae58:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae5c:	9105      	str	r1, [sp, #20]
 800ae5e:	6800      	ldr	r0, [r0, #0]
 800ae60:	9301      	str	r3, [sp, #4]
 800ae62:	a902      	add	r1, sp, #8
 800ae64:	f001 fedc 	bl	800cc20 <_svfiprintf_r>
 800ae68:	9b02      	ldr	r3, [sp, #8]
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	701a      	strb	r2, [r3, #0]
 800ae6e:	b01c      	add	sp, #112	; 0x70
 800ae70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae74:	b003      	add	sp, #12
 800ae76:	4770      	bx	lr
 800ae78:	200009e8 	.word	0x200009e8
 800ae7c:	ffff0208 	.word	0xffff0208

0800ae80 <strcasecmp>:
 800ae80:	b530      	push	{r4, r5, lr}
 800ae82:	4d0b      	ldr	r5, [pc, #44]	; (800aeb0 <strcasecmp+0x30>)
 800ae84:	4604      	mov	r4, r0
 800ae86:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae8a:	5d5a      	ldrb	r2, [r3, r5]
 800ae8c:	f002 0203 	and.w	r2, r2, #3
 800ae90:	2a01      	cmp	r2, #1
 800ae92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae96:	5ca8      	ldrb	r0, [r5, r2]
 800ae98:	f000 0003 	and.w	r0, r0, #3
 800ae9c:	bf08      	it	eq
 800ae9e:	3320      	addeq	r3, #32
 800aea0:	2801      	cmp	r0, #1
 800aea2:	bf08      	it	eq
 800aea4:	3220      	addeq	r2, #32
 800aea6:	1a98      	subs	r0, r3, r2
 800aea8:	d101      	bne.n	800aeae <strcasecmp+0x2e>
 800aeaa:	2a00      	cmp	r2, #0
 800aeac:	d1eb      	bne.n	800ae86 <strcasecmp+0x6>
 800aeae:	bd30      	pop	{r4, r5, pc}
 800aeb0:	0800ee15 	.word	0x0800ee15

0800aeb4 <strncasecmp>:
 800aeb4:	b570      	push	{r4, r5, r6, lr}
 800aeb6:	4e0f      	ldr	r6, [pc, #60]	; (800aef4 <strncasecmp+0x40>)
 800aeb8:	4604      	mov	r4, r0
 800aeba:	440a      	add	r2, r1
 800aebc:	428a      	cmp	r2, r1
 800aebe:	d101      	bne.n	800aec4 <strncasecmp+0x10>
 800aec0:	2000      	movs	r0, #0
 800aec2:	e013      	b.n	800aeec <strncasecmp+0x38>
 800aec4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aec8:	5d98      	ldrb	r0, [r3, r6]
 800aeca:	f000 0003 	and.w	r0, r0, #3
 800aece:	2801      	cmp	r0, #1
 800aed0:	f811 0b01 	ldrb.w	r0, [r1], #1
 800aed4:	5c35      	ldrb	r5, [r6, r0]
 800aed6:	f005 0503 	and.w	r5, r5, #3
 800aeda:	bf08      	it	eq
 800aedc:	3320      	addeq	r3, #32
 800aede:	2d01      	cmp	r5, #1
 800aee0:	bf08      	it	eq
 800aee2:	3020      	addeq	r0, #32
 800aee4:	1a1b      	subs	r3, r3, r0
 800aee6:	d102      	bne.n	800aeee <strncasecmp+0x3a>
 800aee8:	2800      	cmp	r0, #0
 800aeea:	d1e7      	bne.n	800aebc <strncasecmp+0x8>
 800aeec:	bd70      	pop	{r4, r5, r6, pc}
 800aeee:	4618      	mov	r0, r3
 800aef0:	e7fc      	b.n	800aeec <strncasecmp+0x38>
 800aef2:	bf00      	nop
 800aef4:	0800ee15 	.word	0x0800ee15

0800aef8 <__strtok_r>:
 800aef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aefa:	b908      	cbnz	r0, 800af00 <__strtok_r+0x8>
 800aefc:	6810      	ldr	r0, [r2, #0]
 800aefe:	b188      	cbz	r0, 800af24 <__strtok_r+0x2c>
 800af00:	4604      	mov	r4, r0
 800af02:	4620      	mov	r0, r4
 800af04:	f814 5b01 	ldrb.w	r5, [r4], #1
 800af08:	460f      	mov	r7, r1
 800af0a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800af0e:	b91e      	cbnz	r6, 800af18 <__strtok_r+0x20>
 800af10:	b965      	cbnz	r5, 800af2c <__strtok_r+0x34>
 800af12:	6015      	str	r5, [r2, #0]
 800af14:	4628      	mov	r0, r5
 800af16:	e005      	b.n	800af24 <__strtok_r+0x2c>
 800af18:	42b5      	cmp	r5, r6
 800af1a:	d1f6      	bne.n	800af0a <__strtok_r+0x12>
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d1f0      	bne.n	800af02 <__strtok_r+0xa>
 800af20:	6014      	str	r4, [r2, #0]
 800af22:	7003      	strb	r3, [r0, #0]
 800af24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af26:	461c      	mov	r4, r3
 800af28:	e00c      	b.n	800af44 <__strtok_r+0x4c>
 800af2a:	b915      	cbnz	r5, 800af32 <__strtok_r+0x3a>
 800af2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af30:	460e      	mov	r6, r1
 800af32:	f816 5b01 	ldrb.w	r5, [r6], #1
 800af36:	42ab      	cmp	r3, r5
 800af38:	d1f7      	bne.n	800af2a <__strtok_r+0x32>
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d0f3      	beq.n	800af26 <__strtok_r+0x2e>
 800af3e:	2300      	movs	r3, #0
 800af40:	f804 3c01 	strb.w	r3, [r4, #-1]
 800af44:	6014      	str	r4, [r2, #0]
 800af46:	e7ed      	b.n	800af24 <__strtok_r+0x2c>

0800af48 <strtok_r>:
 800af48:	2301      	movs	r3, #1
 800af4a:	f7ff bfd5 	b.w	800aef8 <__strtok_r>
	...

0800af50 <_strtol_l.constprop.0>:
 800af50:	2b01      	cmp	r3, #1
 800af52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af56:	d001      	beq.n	800af5c <_strtol_l.constprop.0+0xc>
 800af58:	2b24      	cmp	r3, #36	; 0x24
 800af5a:	d906      	bls.n	800af6a <_strtol_l.constprop.0+0x1a>
 800af5c:	f7ff f922 	bl	800a1a4 <__errno>
 800af60:	2316      	movs	r3, #22
 800af62:	6003      	str	r3, [r0, #0]
 800af64:	2000      	movs	r0, #0
 800af66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af6a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b050 <_strtol_l.constprop.0+0x100>
 800af6e:	460d      	mov	r5, r1
 800af70:	462e      	mov	r6, r5
 800af72:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af76:	f814 700c 	ldrb.w	r7, [r4, ip]
 800af7a:	f017 0708 	ands.w	r7, r7, #8
 800af7e:	d1f7      	bne.n	800af70 <_strtol_l.constprop.0+0x20>
 800af80:	2c2d      	cmp	r4, #45	; 0x2d
 800af82:	d132      	bne.n	800afea <_strtol_l.constprop.0+0x9a>
 800af84:	782c      	ldrb	r4, [r5, #0]
 800af86:	2701      	movs	r7, #1
 800af88:	1cb5      	adds	r5, r6, #2
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d05b      	beq.n	800b046 <_strtol_l.constprop.0+0xf6>
 800af8e:	2b10      	cmp	r3, #16
 800af90:	d109      	bne.n	800afa6 <_strtol_l.constprop.0+0x56>
 800af92:	2c30      	cmp	r4, #48	; 0x30
 800af94:	d107      	bne.n	800afa6 <_strtol_l.constprop.0+0x56>
 800af96:	782c      	ldrb	r4, [r5, #0]
 800af98:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800af9c:	2c58      	cmp	r4, #88	; 0x58
 800af9e:	d14d      	bne.n	800b03c <_strtol_l.constprop.0+0xec>
 800afa0:	786c      	ldrb	r4, [r5, #1]
 800afa2:	2310      	movs	r3, #16
 800afa4:	3502      	adds	r5, #2
 800afa6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800afaa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800afae:	f04f 0c00 	mov.w	ip, #0
 800afb2:	fbb8 f9f3 	udiv	r9, r8, r3
 800afb6:	4666      	mov	r6, ip
 800afb8:	fb03 8a19 	mls	sl, r3, r9, r8
 800afbc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800afc0:	f1be 0f09 	cmp.w	lr, #9
 800afc4:	d816      	bhi.n	800aff4 <_strtol_l.constprop.0+0xa4>
 800afc6:	4674      	mov	r4, lr
 800afc8:	42a3      	cmp	r3, r4
 800afca:	dd24      	ble.n	800b016 <_strtol_l.constprop.0+0xc6>
 800afcc:	f1bc 0f00 	cmp.w	ip, #0
 800afd0:	db1e      	blt.n	800b010 <_strtol_l.constprop.0+0xc0>
 800afd2:	45b1      	cmp	r9, r6
 800afd4:	d31c      	bcc.n	800b010 <_strtol_l.constprop.0+0xc0>
 800afd6:	d101      	bne.n	800afdc <_strtol_l.constprop.0+0x8c>
 800afd8:	45a2      	cmp	sl, r4
 800afda:	db19      	blt.n	800b010 <_strtol_l.constprop.0+0xc0>
 800afdc:	fb06 4603 	mla	r6, r6, r3, r4
 800afe0:	f04f 0c01 	mov.w	ip, #1
 800afe4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afe8:	e7e8      	b.n	800afbc <_strtol_l.constprop.0+0x6c>
 800afea:	2c2b      	cmp	r4, #43	; 0x2b
 800afec:	bf04      	itt	eq
 800afee:	782c      	ldrbeq	r4, [r5, #0]
 800aff0:	1cb5      	addeq	r5, r6, #2
 800aff2:	e7ca      	b.n	800af8a <_strtol_l.constprop.0+0x3a>
 800aff4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800aff8:	f1be 0f19 	cmp.w	lr, #25
 800affc:	d801      	bhi.n	800b002 <_strtol_l.constprop.0+0xb2>
 800affe:	3c37      	subs	r4, #55	; 0x37
 800b000:	e7e2      	b.n	800afc8 <_strtol_l.constprop.0+0x78>
 800b002:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b006:	f1be 0f19 	cmp.w	lr, #25
 800b00a:	d804      	bhi.n	800b016 <_strtol_l.constprop.0+0xc6>
 800b00c:	3c57      	subs	r4, #87	; 0x57
 800b00e:	e7db      	b.n	800afc8 <_strtol_l.constprop.0+0x78>
 800b010:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b014:	e7e6      	b.n	800afe4 <_strtol_l.constprop.0+0x94>
 800b016:	f1bc 0f00 	cmp.w	ip, #0
 800b01a:	da05      	bge.n	800b028 <_strtol_l.constprop.0+0xd8>
 800b01c:	2322      	movs	r3, #34	; 0x22
 800b01e:	6003      	str	r3, [r0, #0]
 800b020:	4646      	mov	r6, r8
 800b022:	b942      	cbnz	r2, 800b036 <_strtol_l.constprop.0+0xe6>
 800b024:	4630      	mov	r0, r6
 800b026:	e79e      	b.n	800af66 <_strtol_l.constprop.0+0x16>
 800b028:	b107      	cbz	r7, 800b02c <_strtol_l.constprop.0+0xdc>
 800b02a:	4276      	negs	r6, r6
 800b02c:	2a00      	cmp	r2, #0
 800b02e:	d0f9      	beq.n	800b024 <_strtol_l.constprop.0+0xd4>
 800b030:	f1bc 0f00 	cmp.w	ip, #0
 800b034:	d000      	beq.n	800b038 <_strtol_l.constprop.0+0xe8>
 800b036:	1e69      	subs	r1, r5, #1
 800b038:	6011      	str	r1, [r2, #0]
 800b03a:	e7f3      	b.n	800b024 <_strtol_l.constprop.0+0xd4>
 800b03c:	2430      	movs	r4, #48	; 0x30
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d1b1      	bne.n	800afa6 <_strtol_l.constprop.0+0x56>
 800b042:	2308      	movs	r3, #8
 800b044:	e7af      	b.n	800afa6 <_strtol_l.constprop.0+0x56>
 800b046:	2c30      	cmp	r4, #48	; 0x30
 800b048:	d0a5      	beq.n	800af96 <_strtol_l.constprop.0+0x46>
 800b04a:	230a      	movs	r3, #10
 800b04c:	e7ab      	b.n	800afa6 <_strtol_l.constprop.0+0x56>
 800b04e:	bf00      	nop
 800b050:	0800ee15 	.word	0x0800ee15

0800b054 <strtol>:
 800b054:	4613      	mov	r3, r2
 800b056:	460a      	mov	r2, r1
 800b058:	4601      	mov	r1, r0
 800b05a:	4802      	ldr	r0, [pc, #8]	; (800b064 <strtol+0x10>)
 800b05c:	6800      	ldr	r0, [r0, #0]
 800b05e:	f7ff bf77 	b.w	800af50 <_strtol_l.constprop.0>
 800b062:	bf00      	nop
 800b064:	200009e8 	.word	0x200009e8

0800b068 <_strtoul_l.constprop.0>:
 800b068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b06c:	4f36      	ldr	r7, [pc, #216]	; (800b148 <_strtoul_l.constprop.0+0xe0>)
 800b06e:	4686      	mov	lr, r0
 800b070:	460d      	mov	r5, r1
 800b072:	4628      	mov	r0, r5
 800b074:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b078:	5de6      	ldrb	r6, [r4, r7]
 800b07a:	f016 0608 	ands.w	r6, r6, #8
 800b07e:	d1f8      	bne.n	800b072 <_strtoul_l.constprop.0+0xa>
 800b080:	2c2d      	cmp	r4, #45	; 0x2d
 800b082:	d12f      	bne.n	800b0e4 <_strtoul_l.constprop.0+0x7c>
 800b084:	782c      	ldrb	r4, [r5, #0]
 800b086:	2601      	movs	r6, #1
 800b088:	1c85      	adds	r5, r0, #2
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d057      	beq.n	800b13e <_strtoul_l.constprop.0+0xd6>
 800b08e:	2b10      	cmp	r3, #16
 800b090:	d109      	bne.n	800b0a6 <_strtoul_l.constprop.0+0x3e>
 800b092:	2c30      	cmp	r4, #48	; 0x30
 800b094:	d107      	bne.n	800b0a6 <_strtoul_l.constprop.0+0x3e>
 800b096:	7828      	ldrb	r0, [r5, #0]
 800b098:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b09c:	2858      	cmp	r0, #88	; 0x58
 800b09e:	d149      	bne.n	800b134 <_strtoul_l.constprop.0+0xcc>
 800b0a0:	786c      	ldrb	r4, [r5, #1]
 800b0a2:	2310      	movs	r3, #16
 800b0a4:	3502      	adds	r5, #2
 800b0a6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b0aa:	2700      	movs	r7, #0
 800b0ac:	fbb8 f8f3 	udiv	r8, r8, r3
 800b0b0:	fb03 f908 	mul.w	r9, r3, r8
 800b0b4:	ea6f 0909 	mvn.w	r9, r9
 800b0b8:	4638      	mov	r0, r7
 800b0ba:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b0be:	f1bc 0f09 	cmp.w	ip, #9
 800b0c2:	d814      	bhi.n	800b0ee <_strtoul_l.constprop.0+0x86>
 800b0c4:	4664      	mov	r4, ip
 800b0c6:	42a3      	cmp	r3, r4
 800b0c8:	dd22      	ble.n	800b110 <_strtoul_l.constprop.0+0xa8>
 800b0ca:	2f00      	cmp	r7, #0
 800b0cc:	db1d      	blt.n	800b10a <_strtoul_l.constprop.0+0xa2>
 800b0ce:	4580      	cmp	r8, r0
 800b0d0:	d31b      	bcc.n	800b10a <_strtoul_l.constprop.0+0xa2>
 800b0d2:	d101      	bne.n	800b0d8 <_strtoul_l.constprop.0+0x70>
 800b0d4:	45a1      	cmp	r9, r4
 800b0d6:	db18      	blt.n	800b10a <_strtoul_l.constprop.0+0xa2>
 800b0d8:	fb00 4003 	mla	r0, r0, r3, r4
 800b0dc:	2701      	movs	r7, #1
 800b0de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0e2:	e7ea      	b.n	800b0ba <_strtoul_l.constprop.0+0x52>
 800b0e4:	2c2b      	cmp	r4, #43	; 0x2b
 800b0e6:	bf04      	itt	eq
 800b0e8:	782c      	ldrbeq	r4, [r5, #0]
 800b0ea:	1c85      	addeq	r5, r0, #2
 800b0ec:	e7cd      	b.n	800b08a <_strtoul_l.constprop.0+0x22>
 800b0ee:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b0f2:	f1bc 0f19 	cmp.w	ip, #25
 800b0f6:	d801      	bhi.n	800b0fc <_strtoul_l.constprop.0+0x94>
 800b0f8:	3c37      	subs	r4, #55	; 0x37
 800b0fa:	e7e4      	b.n	800b0c6 <_strtoul_l.constprop.0+0x5e>
 800b0fc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b100:	f1bc 0f19 	cmp.w	ip, #25
 800b104:	d804      	bhi.n	800b110 <_strtoul_l.constprop.0+0xa8>
 800b106:	3c57      	subs	r4, #87	; 0x57
 800b108:	e7dd      	b.n	800b0c6 <_strtoul_l.constprop.0+0x5e>
 800b10a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b10e:	e7e6      	b.n	800b0de <_strtoul_l.constprop.0+0x76>
 800b110:	2f00      	cmp	r7, #0
 800b112:	da07      	bge.n	800b124 <_strtoul_l.constprop.0+0xbc>
 800b114:	2322      	movs	r3, #34	; 0x22
 800b116:	f8ce 3000 	str.w	r3, [lr]
 800b11a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b11e:	b932      	cbnz	r2, 800b12e <_strtoul_l.constprop.0+0xc6>
 800b120:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b124:	b106      	cbz	r6, 800b128 <_strtoul_l.constprop.0+0xc0>
 800b126:	4240      	negs	r0, r0
 800b128:	2a00      	cmp	r2, #0
 800b12a:	d0f9      	beq.n	800b120 <_strtoul_l.constprop.0+0xb8>
 800b12c:	b107      	cbz	r7, 800b130 <_strtoul_l.constprop.0+0xc8>
 800b12e:	1e69      	subs	r1, r5, #1
 800b130:	6011      	str	r1, [r2, #0]
 800b132:	e7f5      	b.n	800b120 <_strtoul_l.constprop.0+0xb8>
 800b134:	2430      	movs	r4, #48	; 0x30
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1b5      	bne.n	800b0a6 <_strtoul_l.constprop.0+0x3e>
 800b13a:	2308      	movs	r3, #8
 800b13c:	e7b3      	b.n	800b0a6 <_strtoul_l.constprop.0+0x3e>
 800b13e:	2c30      	cmp	r4, #48	; 0x30
 800b140:	d0a9      	beq.n	800b096 <_strtoul_l.constprop.0+0x2e>
 800b142:	230a      	movs	r3, #10
 800b144:	e7af      	b.n	800b0a6 <_strtoul_l.constprop.0+0x3e>
 800b146:	bf00      	nop
 800b148:	0800ee15 	.word	0x0800ee15

0800b14c <strtoul>:
 800b14c:	4613      	mov	r3, r2
 800b14e:	460a      	mov	r2, r1
 800b150:	4601      	mov	r1, r0
 800b152:	4802      	ldr	r0, [pc, #8]	; (800b15c <strtoul+0x10>)
 800b154:	6800      	ldr	r0, [r0, #0]
 800b156:	f7ff bf87 	b.w	800b068 <_strtoul_l.constprop.0>
 800b15a:	bf00      	nop
 800b15c:	200009e8 	.word	0x200009e8

0800b160 <__swbuf_r>:
 800b160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b162:	460e      	mov	r6, r1
 800b164:	4614      	mov	r4, r2
 800b166:	4605      	mov	r5, r0
 800b168:	b118      	cbz	r0, 800b172 <__swbuf_r+0x12>
 800b16a:	6983      	ldr	r3, [r0, #24]
 800b16c:	b90b      	cbnz	r3, 800b172 <__swbuf_r+0x12>
 800b16e:	f001 f84b 	bl	800c208 <__sinit>
 800b172:	4b21      	ldr	r3, [pc, #132]	; (800b1f8 <__swbuf_r+0x98>)
 800b174:	429c      	cmp	r4, r3
 800b176:	d12b      	bne.n	800b1d0 <__swbuf_r+0x70>
 800b178:	686c      	ldr	r4, [r5, #4]
 800b17a:	69a3      	ldr	r3, [r4, #24]
 800b17c:	60a3      	str	r3, [r4, #8]
 800b17e:	89a3      	ldrh	r3, [r4, #12]
 800b180:	071a      	lsls	r2, r3, #28
 800b182:	d52f      	bpl.n	800b1e4 <__swbuf_r+0x84>
 800b184:	6923      	ldr	r3, [r4, #16]
 800b186:	b36b      	cbz	r3, 800b1e4 <__swbuf_r+0x84>
 800b188:	6923      	ldr	r3, [r4, #16]
 800b18a:	6820      	ldr	r0, [r4, #0]
 800b18c:	1ac0      	subs	r0, r0, r3
 800b18e:	6963      	ldr	r3, [r4, #20]
 800b190:	b2f6      	uxtb	r6, r6
 800b192:	4283      	cmp	r3, r0
 800b194:	4637      	mov	r7, r6
 800b196:	dc04      	bgt.n	800b1a2 <__swbuf_r+0x42>
 800b198:	4621      	mov	r1, r4
 800b19a:	4628      	mov	r0, r5
 800b19c:	f000 ffa0 	bl	800c0e0 <_fflush_r>
 800b1a0:	bb30      	cbnz	r0, 800b1f0 <__swbuf_r+0x90>
 800b1a2:	68a3      	ldr	r3, [r4, #8]
 800b1a4:	3b01      	subs	r3, #1
 800b1a6:	60a3      	str	r3, [r4, #8]
 800b1a8:	6823      	ldr	r3, [r4, #0]
 800b1aa:	1c5a      	adds	r2, r3, #1
 800b1ac:	6022      	str	r2, [r4, #0]
 800b1ae:	701e      	strb	r6, [r3, #0]
 800b1b0:	6963      	ldr	r3, [r4, #20]
 800b1b2:	3001      	adds	r0, #1
 800b1b4:	4283      	cmp	r3, r0
 800b1b6:	d004      	beq.n	800b1c2 <__swbuf_r+0x62>
 800b1b8:	89a3      	ldrh	r3, [r4, #12]
 800b1ba:	07db      	lsls	r3, r3, #31
 800b1bc:	d506      	bpl.n	800b1cc <__swbuf_r+0x6c>
 800b1be:	2e0a      	cmp	r6, #10
 800b1c0:	d104      	bne.n	800b1cc <__swbuf_r+0x6c>
 800b1c2:	4621      	mov	r1, r4
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	f000 ff8b 	bl	800c0e0 <_fflush_r>
 800b1ca:	b988      	cbnz	r0, 800b1f0 <__swbuf_r+0x90>
 800b1cc:	4638      	mov	r0, r7
 800b1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1d0:	4b0a      	ldr	r3, [pc, #40]	; (800b1fc <__swbuf_r+0x9c>)
 800b1d2:	429c      	cmp	r4, r3
 800b1d4:	d101      	bne.n	800b1da <__swbuf_r+0x7a>
 800b1d6:	68ac      	ldr	r4, [r5, #8]
 800b1d8:	e7cf      	b.n	800b17a <__swbuf_r+0x1a>
 800b1da:	4b09      	ldr	r3, [pc, #36]	; (800b200 <__swbuf_r+0xa0>)
 800b1dc:	429c      	cmp	r4, r3
 800b1de:	bf08      	it	eq
 800b1e0:	68ec      	ldreq	r4, [r5, #12]
 800b1e2:	e7ca      	b.n	800b17a <__swbuf_r+0x1a>
 800b1e4:	4621      	mov	r1, r4
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f000 f80c 	bl	800b204 <__swsetup_r>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	d0cb      	beq.n	800b188 <__swbuf_r+0x28>
 800b1f0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b1f4:	e7ea      	b.n	800b1cc <__swbuf_r+0x6c>
 800b1f6:	bf00      	nop
 800b1f8:	0800efc8 	.word	0x0800efc8
 800b1fc:	0800efe8 	.word	0x0800efe8
 800b200:	0800efa8 	.word	0x0800efa8

0800b204 <__swsetup_r>:
 800b204:	4b32      	ldr	r3, [pc, #200]	; (800b2d0 <__swsetup_r+0xcc>)
 800b206:	b570      	push	{r4, r5, r6, lr}
 800b208:	681d      	ldr	r5, [r3, #0]
 800b20a:	4606      	mov	r6, r0
 800b20c:	460c      	mov	r4, r1
 800b20e:	b125      	cbz	r5, 800b21a <__swsetup_r+0x16>
 800b210:	69ab      	ldr	r3, [r5, #24]
 800b212:	b913      	cbnz	r3, 800b21a <__swsetup_r+0x16>
 800b214:	4628      	mov	r0, r5
 800b216:	f000 fff7 	bl	800c208 <__sinit>
 800b21a:	4b2e      	ldr	r3, [pc, #184]	; (800b2d4 <__swsetup_r+0xd0>)
 800b21c:	429c      	cmp	r4, r3
 800b21e:	d10f      	bne.n	800b240 <__swsetup_r+0x3c>
 800b220:	686c      	ldr	r4, [r5, #4]
 800b222:	89a3      	ldrh	r3, [r4, #12]
 800b224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b228:	0719      	lsls	r1, r3, #28
 800b22a:	d42c      	bmi.n	800b286 <__swsetup_r+0x82>
 800b22c:	06dd      	lsls	r5, r3, #27
 800b22e:	d411      	bmi.n	800b254 <__swsetup_r+0x50>
 800b230:	2309      	movs	r3, #9
 800b232:	6033      	str	r3, [r6, #0]
 800b234:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b238:	81a3      	strh	r3, [r4, #12]
 800b23a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b23e:	e03e      	b.n	800b2be <__swsetup_r+0xba>
 800b240:	4b25      	ldr	r3, [pc, #148]	; (800b2d8 <__swsetup_r+0xd4>)
 800b242:	429c      	cmp	r4, r3
 800b244:	d101      	bne.n	800b24a <__swsetup_r+0x46>
 800b246:	68ac      	ldr	r4, [r5, #8]
 800b248:	e7eb      	b.n	800b222 <__swsetup_r+0x1e>
 800b24a:	4b24      	ldr	r3, [pc, #144]	; (800b2dc <__swsetup_r+0xd8>)
 800b24c:	429c      	cmp	r4, r3
 800b24e:	bf08      	it	eq
 800b250:	68ec      	ldreq	r4, [r5, #12]
 800b252:	e7e6      	b.n	800b222 <__swsetup_r+0x1e>
 800b254:	0758      	lsls	r0, r3, #29
 800b256:	d512      	bpl.n	800b27e <__swsetup_r+0x7a>
 800b258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b25a:	b141      	cbz	r1, 800b26e <__swsetup_r+0x6a>
 800b25c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b260:	4299      	cmp	r1, r3
 800b262:	d002      	beq.n	800b26a <__swsetup_r+0x66>
 800b264:	4630      	mov	r0, r6
 800b266:	f7fe ffed 	bl	800a244 <_free_r>
 800b26a:	2300      	movs	r3, #0
 800b26c:	6363      	str	r3, [r4, #52]	; 0x34
 800b26e:	89a3      	ldrh	r3, [r4, #12]
 800b270:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b274:	81a3      	strh	r3, [r4, #12]
 800b276:	2300      	movs	r3, #0
 800b278:	6063      	str	r3, [r4, #4]
 800b27a:	6923      	ldr	r3, [r4, #16]
 800b27c:	6023      	str	r3, [r4, #0]
 800b27e:	89a3      	ldrh	r3, [r4, #12]
 800b280:	f043 0308 	orr.w	r3, r3, #8
 800b284:	81a3      	strh	r3, [r4, #12]
 800b286:	6923      	ldr	r3, [r4, #16]
 800b288:	b94b      	cbnz	r3, 800b29e <__swsetup_r+0x9a>
 800b28a:	89a3      	ldrh	r3, [r4, #12]
 800b28c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b294:	d003      	beq.n	800b29e <__swsetup_r+0x9a>
 800b296:	4621      	mov	r1, r4
 800b298:	4630      	mov	r0, r6
 800b29a:	f001 f87f 	bl	800c39c <__smakebuf_r>
 800b29e:	89a0      	ldrh	r0, [r4, #12]
 800b2a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2a4:	f010 0301 	ands.w	r3, r0, #1
 800b2a8:	d00a      	beq.n	800b2c0 <__swsetup_r+0xbc>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	60a3      	str	r3, [r4, #8]
 800b2ae:	6963      	ldr	r3, [r4, #20]
 800b2b0:	425b      	negs	r3, r3
 800b2b2:	61a3      	str	r3, [r4, #24]
 800b2b4:	6923      	ldr	r3, [r4, #16]
 800b2b6:	b943      	cbnz	r3, 800b2ca <__swsetup_r+0xc6>
 800b2b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b2bc:	d1ba      	bne.n	800b234 <__swsetup_r+0x30>
 800b2be:	bd70      	pop	{r4, r5, r6, pc}
 800b2c0:	0781      	lsls	r1, r0, #30
 800b2c2:	bf58      	it	pl
 800b2c4:	6963      	ldrpl	r3, [r4, #20]
 800b2c6:	60a3      	str	r3, [r4, #8]
 800b2c8:	e7f4      	b.n	800b2b4 <__swsetup_r+0xb0>
 800b2ca:	2000      	movs	r0, #0
 800b2cc:	e7f7      	b.n	800b2be <__swsetup_r+0xba>
 800b2ce:	bf00      	nop
 800b2d0:	200009e8 	.word	0x200009e8
 800b2d4:	0800efc8 	.word	0x0800efc8
 800b2d8:	0800efe8 	.word	0x0800efe8
 800b2dc:	0800efa8 	.word	0x0800efa8

0800b2e0 <quorem>:
 800b2e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e4:	6903      	ldr	r3, [r0, #16]
 800b2e6:	690c      	ldr	r4, [r1, #16]
 800b2e8:	42a3      	cmp	r3, r4
 800b2ea:	4607      	mov	r7, r0
 800b2ec:	f2c0 8081 	blt.w	800b3f2 <quorem+0x112>
 800b2f0:	3c01      	subs	r4, #1
 800b2f2:	f101 0814 	add.w	r8, r1, #20
 800b2f6:	f100 0514 	add.w	r5, r0, #20
 800b2fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2fe:	9301      	str	r3, [sp, #4]
 800b300:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b304:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b308:	3301      	adds	r3, #1
 800b30a:	429a      	cmp	r2, r3
 800b30c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b310:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b314:	fbb2 f6f3 	udiv	r6, r2, r3
 800b318:	d331      	bcc.n	800b37e <quorem+0x9e>
 800b31a:	f04f 0e00 	mov.w	lr, #0
 800b31e:	4640      	mov	r0, r8
 800b320:	46ac      	mov	ip, r5
 800b322:	46f2      	mov	sl, lr
 800b324:	f850 2b04 	ldr.w	r2, [r0], #4
 800b328:	b293      	uxth	r3, r2
 800b32a:	fb06 e303 	mla	r3, r6, r3, lr
 800b32e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b332:	b29b      	uxth	r3, r3
 800b334:	ebaa 0303 	sub.w	r3, sl, r3
 800b338:	f8dc a000 	ldr.w	sl, [ip]
 800b33c:	0c12      	lsrs	r2, r2, #16
 800b33e:	fa13 f38a 	uxtah	r3, r3, sl
 800b342:	fb06 e202 	mla	r2, r6, r2, lr
 800b346:	9300      	str	r3, [sp, #0]
 800b348:	9b00      	ldr	r3, [sp, #0]
 800b34a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b34e:	b292      	uxth	r2, r2
 800b350:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b354:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b358:	f8bd 3000 	ldrh.w	r3, [sp]
 800b35c:	4581      	cmp	r9, r0
 800b35e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b362:	f84c 3b04 	str.w	r3, [ip], #4
 800b366:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b36a:	d2db      	bcs.n	800b324 <quorem+0x44>
 800b36c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b370:	b92b      	cbnz	r3, 800b37e <quorem+0x9e>
 800b372:	9b01      	ldr	r3, [sp, #4]
 800b374:	3b04      	subs	r3, #4
 800b376:	429d      	cmp	r5, r3
 800b378:	461a      	mov	r2, r3
 800b37a:	d32e      	bcc.n	800b3da <quorem+0xfa>
 800b37c:	613c      	str	r4, [r7, #16]
 800b37e:	4638      	mov	r0, r7
 800b380:	f001 fada 	bl	800c938 <__mcmp>
 800b384:	2800      	cmp	r0, #0
 800b386:	db24      	blt.n	800b3d2 <quorem+0xf2>
 800b388:	3601      	adds	r6, #1
 800b38a:	4628      	mov	r0, r5
 800b38c:	f04f 0c00 	mov.w	ip, #0
 800b390:	f858 2b04 	ldr.w	r2, [r8], #4
 800b394:	f8d0 e000 	ldr.w	lr, [r0]
 800b398:	b293      	uxth	r3, r2
 800b39a:	ebac 0303 	sub.w	r3, ip, r3
 800b39e:	0c12      	lsrs	r2, r2, #16
 800b3a0:	fa13 f38e 	uxtah	r3, r3, lr
 800b3a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b3a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3b2:	45c1      	cmp	r9, r8
 800b3b4:	f840 3b04 	str.w	r3, [r0], #4
 800b3b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b3bc:	d2e8      	bcs.n	800b390 <quorem+0xb0>
 800b3be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3c6:	b922      	cbnz	r2, 800b3d2 <quorem+0xf2>
 800b3c8:	3b04      	subs	r3, #4
 800b3ca:	429d      	cmp	r5, r3
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	d30a      	bcc.n	800b3e6 <quorem+0x106>
 800b3d0:	613c      	str	r4, [r7, #16]
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	b003      	add	sp, #12
 800b3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3da:	6812      	ldr	r2, [r2, #0]
 800b3dc:	3b04      	subs	r3, #4
 800b3de:	2a00      	cmp	r2, #0
 800b3e0:	d1cc      	bne.n	800b37c <quorem+0x9c>
 800b3e2:	3c01      	subs	r4, #1
 800b3e4:	e7c7      	b.n	800b376 <quorem+0x96>
 800b3e6:	6812      	ldr	r2, [r2, #0]
 800b3e8:	3b04      	subs	r3, #4
 800b3ea:	2a00      	cmp	r2, #0
 800b3ec:	d1f0      	bne.n	800b3d0 <quorem+0xf0>
 800b3ee:	3c01      	subs	r4, #1
 800b3f0:	e7eb      	b.n	800b3ca <quorem+0xea>
 800b3f2:	2000      	movs	r0, #0
 800b3f4:	e7ee      	b.n	800b3d4 <quorem+0xf4>
	...

0800b3f8 <_dtoa_r>:
 800b3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fc:	ed2d 8b04 	vpush	{d8-d9}
 800b400:	ec57 6b10 	vmov	r6, r7, d0
 800b404:	b093      	sub	sp, #76	; 0x4c
 800b406:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b408:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b40c:	9106      	str	r1, [sp, #24]
 800b40e:	ee10 aa10 	vmov	sl, s0
 800b412:	4604      	mov	r4, r0
 800b414:	9209      	str	r2, [sp, #36]	; 0x24
 800b416:	930c      	str	r3, [sp, #48]	; 0x30
 800b418:	46bb      	mov	fp, r7
 800b41a:	b975      	cbnz	r5, 800b43a <_dtoa_r+0x42>
 800b41c:	2010      	movs	r0, #16
 800b41e:	f7fe feeb 	bl	800a1f8 <malloc>
 800b422:	4602      	mov	r2, r0
 800b424:	6260      	str	r0, [r4, #36]	; 0x24
 800b426:	b920      	cbnz	r0, 800b432 <_dtoa_r+0x3a>
 800b428:	4ba7      	ldr	r3, [pc, #668]	; (800b6c8 <_dtoa_r+0x2d0>)
 800b42a:	21ea      	movs	r1, #234	; 0xea
 800b42c:	48a7      	ldr	r0, [pc, #668]	; (800b6cc <_dtoa_r+0x2d4>)
 800b42e:	f001 feef 	bl	800d210 <__assert_func>
 800b432:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b436:	6005      	str	r5, [r0, #0]
 800b438:	60c5      	str	r5, [r0, #12]
 800b43a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b43c:	6819      	ldr	r1, [r3, #0]
 800b43e:	b151      	cbz	r1, 800b456 <_dtoa_r+0x5e>
 800b440:	685a      	ldr	r2, [r3, #4]
 800b442:	604a      	str	r2, [r1, #4]
 800b444:	2301      	movs	r3, #1
 800b446:	4093      	lsls	r3, r2
 800b448:	608b      	str	r3, [r1, #8]
 800b44a:	4620      	mov	r0, r4
 800b44c:	f001 f832 	bl	800c4b4 <_Bfree>
 800b450:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b452:	2200      	movs	r2, #0
 800b454:	601a      	str	r2, [r3, #0]
 800b456:	1e3b      	subs	r3, r7, #0
 800b458:	bfaa      	itet	ge
 800b45a:	2300      	movge	r3, #0
 800b45c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b460:	f8c8 3000 	strge.w	r3, [r8]
 800b464:	4b9a      	ldr	r3, [pc, #616]	; (800b6d0 <_dtoa_r+0x2d8>)
 800b466:	bfbc      	itt	lt
 800b468:	2201      	movlt	r2, #1
 800b46a:	f8c8 2000 	strlt.w	r2, [r8]
 800b46e:	ea33 030b 	bics.w	r3, r3, fp
 800b472:	d11b      	bne.n	800b4ac <_dtoa_r+0xb4>
 800b474:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b476:	f242 730f 	movw	r3, #9999	; 0x270f
 800b47a:	6013      	str	r3, [r2, #0]
 800b47c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b480:	4333      	orrs	r3, r6
 800b482:	f000 8592 	beq.w	800bfaa <_dtoa_r+0xbb2>
 800b486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b488:	b963      	cbnz	r3, 800b4a4 <_dtoa_r+0xac>
 800b48a:	4b92      	ldr	r3, [pc, #584]	; (800b6d4 <_dtoa_r+0x2dc>)
 800b48c:	e022      	b.n	800b4d4 <_dtoa_r+0xdc>
 800b48e:	4b92      	ldr	r3, [pc, #584]	; (800b6d8 <_dtoa_r+0x2e0>)
 800b490:	9301      	str	r3, [sp, #4]
 800b492:	3308      	adds	r3, #8
 800b494:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b496:	6013      	str	r3, [r2, #0]
 800b498:	9801      	ldr	r0, [sp, #4]
 800b49a:	b013      	add	sp, #76	; 0x4c
 800b49c:	ecbd 8b04 	vpop	{d8-d9}
 800b4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a4:	4b8b      	ldr	r3, [pc, #556]	; (800b6d4 <_dtoa_r+0x2dc>)
 800b4a6:	9301      	str	r3, [sp, #4]
 800b4a8:	3303      	adds	r3, #3
 800b4aa:	e7f3      	b.n	800b494 <_dtoa_r+0x9c>
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	4650      	mov	r0, sl
 800b4b2:	4659      	mov	r1, fp
 800b4b4:	f7f5 fb08 	bl	8000ac8 <__aeabi_dcmpeq>
 800b4b8:	ec4b ab19 	vmov	d9, sl, fp
 800b4bc:	4680      	mov	r8, r0
 800b4be:	b158      	cbz	r0, 800b4d8 <_dtoa_r+0xe0>
 800b4c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	6013      	str	r3, [r2, #0]
 800b4c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	f000 856b 	beq.w	800bfa4 <_dtoa_r+0xbac>
 800b4ce:	4883      	ldr	r0, [pc, #524]	; (800b6dc <_dtoa_r+0x2e4>)
 800b4d0:	6018      	str	r0, [r3, #0]
 800b4d2:	1e43      	subs	r3, r0, #1
 800b4d4:	9301      	str	r3, [sp, #4]
 800b4d6:	e7df      	b.n	800b498 <_dtoa_r+0xa0>
 800b4d8:	ec4b ab10 	vmov	d0, sl, fp
 800b4dc:	aa10      	add	r2, sp, #64	; 0x40
 800b4de:	a911      	add	r1, sp, #68	; 0x44
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f001 facf 	bl	800ca84 <__d2b>
 800b4e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b4ea:	ee08 0a10 	vmov	s16, r0
 800b4ee:	2d00      	cmp	r5, #0
 800b4f0:	f000 8084 	beq.w	800b5fc <_dtoa_r+0x204>
 800b4f4:	ee19 3a90 	vmov	r3, s19
 800b4f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b500:	4656      	mov	r6, sl
 800b502:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b506:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b50a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b50e:	4b74      	ldr	r3, [pc, #464]	; (800b6e0 <_dtoa_r+0x2e8>)
 800b510:	2200      	movs	r2, #0
 800b512:	4630      	mov	r0, r6
 800b514:	4639      	mov	r1, r7
 800b516:	f7f4 feb7 	bl	8000288 <__aeabi_dsub>
 800b51a:	a365      	add	r3, pc, #404	; (adr r3, 800b6b0 <_dtoa_r+0x2b8>)
 800b51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b520:	f7f5 f86a 	bl	80005f8 <__aeabi_dmul>
 800b524:	a364      	add	r3, pc, #400	; (adr r3, 800b6b8 <_dtoa_r+0x2c0>)
 800b526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52a:	f7f4 feaf 	bl	800028c <__adddf3>
 800b52e:	4606      	mov	r6, r0
 800b530:	4628      	mov	r0, r5
 800b532:	460f      	mov	r7, r1
 800b534:	f7f4 fff6 	bl	8000524 <__aeabi_i2d>
 800b538:	a361      	add	r3, pc, #388	; (adr r3, 800b6c0 <_dtoa_r+0x2c8>)
 800b53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53e:	f7f5 f85b 	bl	80005f8 <__aeabi_dmul>
 800b542:	4602      	mov	r2, r0
 800b544:	460b      	mov	r3, r1
 800b546:	4630      	mov	r0, r6
 800b548:	4639      	mov	r1, r7
 800b54a:	f7f4 fe9f 	bl	800028c <__adddf3>
 800b54e:	4606      	mov	r6, r0
 800b550:	460f      	mov	r7, r1
 800b552:	f7f5 fb01 	bl	8000b58 <__aeabi_d2iz>
 800b556:	2200      	movs	r2, #0
 800b558:	9000      	str	r0, [sp, #0]
 800b55a:	2300      	movs	r3, #0
 800b55c:	4630      	mov	r0, r6
 800b55e:	4639      	mov	r1, r7
 800b560:	f7f5 fabc 	bl	8000adc <__aeabi_dcmplt>
 800b564:	b150      	cbz	r0, 800b57c <_dtoa_r+0x184>
 800b566:	9800      	ldr	r0, [sp, #0]
 800b568:	f7f4 ffdc 	bl	8000524 <__aeabi_i2d>
 800b56c:	4632      	mov	r2, r6
 800b56e:	463b      	mov	r3, r7
 800b570:	f7f5 faaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800b574:	b910      	cbnz	r0, 800b57c <_dtoa_r+0x184>
 800b576:	9b00      	ldr	r3, [sp, #0]
 800b578:	3b01      	subs	r3, #1
 800b57a:	9300      	str	r3, [sp, #0]
 800b57c:	9b00      	ldr	r3, [sp, #0]
 800b57e:	2b16      	cmp	r3, #22
 800b580:	d85a      	bhi.n	800b638 <_dtoa_r+0x240>
 800b582:	9a00      	ldr	r2, [sp, #0]
 800b584:	4b57      	ldr	r3, [pc, #348]	; (800b6e4 <_dtoa_r+0x2ec>)
 800b586:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58e:	ec51 0b19 	vmov	r0, r1, d9
 800b592:	f7f5 faa3 	bl	8000adc <__aeabi_dcmplt>
 800b596:	2800      	cmp	r0, #0
 800b598:	d050      	beq.n	800b63c <_dtoa_r+0x244>
 800b59a:	9b00      	ldr	r3, [sp, #0]
 800b59c:	3b01      	subs	r3, #1
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5a6:	1b5d      	subs	r5, r3, r5
 800b5a8:	1e6b      	subs	r3, r5, #1
 800b5aa:	9305      	str	r3, [sp, #20]
 800b5ac:	bf45      	ittet	mi
 800b5ae:	f1c5 0301 	rsbmi	r3, r5, #1
 800b5b2:	9304      	strmi	r3, [sp, #16]
 800b5b4:	2300      	movpl	r3, #0
 800b5b6:	2300      	movmi	r3, #0
 800b5b8:	bf4c      	ite	mi
 800b5ba:	9305      	strmi	r3, [sp, #20]
 800b5bc:	9304      	strpl	r3, [sp, #16]
 800b5be:	9b00      	ldr	r3, [sp, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	db3d      	blt.n	800b640 <_dtoa_r+0x248>
 800b5c4:	9b05      	ldr	r3, [sp, #20]
 800b5c6:	9a00      	ldr	r2, [sp, #0]
 800b5c8:	920a      	str	r2, [sp, #40]	; 0x28
 800b5ca:	4413      	add	r3, r2
 800b5cc:	9305      	str	r3, [sp, #20]
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	9307      	str	r3, [sp, #28]
 800b5d2:	9b06      	ldr	r3, [sp, #24]
 800b5d4:	2b09      	cmp	r3, #9
 800b5d6:	f200 8089 	bhi.w	800b6ec <_dtoa_r+0x2f4>
 800b5da:	2b05      	cmp	r3, #5
 800b5dc:	bfc4      	itt	gt
 800b5de:	3b04      	subgt	r3, #4
 800b5e0:	9306      	strgt	r3, [sp, #24]
 800b5e2:	9b06      	ldr	r3, [sp, #24]
 800b5e4:	f1a3 0302 	sub.w	r3, r3, #2
 800b5e8:	bfcc      	ite	gt
 800b5ea:	2500      	movgt	r5, #0
 800b5ec:	2501      	movle	r5, #1
 800b5ee:	2b03      	cmp	r3, #3
 800b5f0:	f200 8087 	bhi.w	800b702 <_dtoa_r+0x30a>
 800b5f4:	e8df f003 	tbb	[pc, r3]
 800b5f8:	59383a2d 	.word	0x59383a2d
 800b5fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b600:	441d      	add	r5, r3
 800b602:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b606:	2b20      	cmp	r3, #32
 800b608:	bfc1      	itttt	gt
 800b60a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b60e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b612:	fa0b f303 	lslgt.w	r3, fp, r3
 800b616:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b61a:	bfda      	itte	le
 800b61c:	f1c3 0320 	rsble	r3, r3, #32
 800b620:	fa06 f003 	lslle.w	r0, r6, r3
 800b624:	4318      	orrgt	r0, r3
 800b626:	f7f4 ff6d 	bl	8000504 <__aeabi_ui2d>
 800b62a:	2301      	movs	r3, #1
 800b62c:	4606      	mov	r6, r0
 800b62e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b632:	3d01      	subs	r5, #1
 800b634:	930e      	str	r3, [sp, #56]	; 0x38
 800b636:	e76a      	b.n	800b50e <_dtoa_r+0x116>
 800b638:	2301      	movs	r3, #1
 800b63a:	e7b2      	b.n	800b5a2 <_dtoa_r+0x1aa>
 800b63c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b63e:	e7b1      	b.n	800b5a4 <_dtoa_r+0x1ac>
 800b640:	9b04      	ldr	r3, [sp, #16]
 800b642:	9a00      	ldr	r2, [sp, #0]
 800b644:	1a9b      	subs	r3, r3, r2
 800b646:	9304      	str	r3, [sp, #16]
 800b648:	4253      	negs	r3, r2
 800b64a:	9307      	str	r3, [sp, #28]
 800b64c:	2300      	movs	r3, #0
 800b64e:	930a      	str	r3, [sp, #40]	; 0x28
 800b650:	e7bf      	b.n	800b5d2 <_dtoa_r+0x1da>
 800b652:	2300      	movs	r3, #0
 800b654:	9308      	str	r3, [sp, #32]
 800b656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b658:	2b00      	cmp	r3, #0
 800b65a:	dc55      	bgt.n	800b708 <_dtoa_r+0x310>
 800b65c:	2301      	movs	r3, #1
 800b65e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b662:	461a      	mov	r2, r3
 800b664:	9209      	str	r2, [sp, #36]	; 0x24
 800b666:	e00c      	b.n	800b682 <_dtoa_r+0x28a>
 800b668:	2301      	movs	r3, #1
 800b66a:	e7f3      	b.n	800b654 <_dtoa_r+0x25c>
 800b66c:	2300      	movs	r3, #0
 800b66e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b670:	9308      	str	r3, [sp, #32]
 800b672:	9b00      	ldr	r3, [sp, #0]
 800b674:	4413      	add	r3, r2
 800b676:	9302      	str	r3, [sp, #8]
 800b678:	3301      	adds	r3, #1
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	9303      	str	r3, [sp, #12]
 800b67e:	bfb8      	it	lt
 800b680:	2301      	movlt	r3, #1
 800b682:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b684:	2200      	movs	r2, #0
 800b686:	6042      	str	r2, [r0, #4]
 800b688:	2204      	movs	r2, #4
 800b68a:	f102 0614 	add.w	r6, r2, #20
 800b68e:	429e      	cmp	r6, r3
 800b690:	6841      	ldr	r1, [r0, #4]
 800b692:	d93d      	bls.n	800b710 <_dtoa_r+0x318>
 800b694:	4620      	mov	r0, r4
 800b696:	f000 fecd 	bl	800c434 <_Balloc>
 800b69a:	9001      	str	r0, [sp, #4]
 800b69c:	2800      	cmp	r0, #0
 800b69e:	d13b      	bne.n	800b718 <_dtoa_r+0x320>
 800b6a0:	4b11      	ldr	r3, [pc, #68]	; (800b6e8 <_dtoa_r+0x2f0>)
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b6a8:	e6c0      	b.n	800b42c <_dtoa_r+0x34>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e7df      	b.n	800b66e <_dtoa_r+0x276>
 800b6ae:	bf00      	nop
 800b6b0:	636f4361 	.word	0x636f4361
 800b6b4:	3fd287a7 	.word	0x3fd287a7
 800b6b8:	8b60c8b3 	.word	0x8b60c8b3
 800b6bc:	3fc68a28 	.word	0x3fc68a28
 800b6c0:	509f79fb 	.word	0x509f79fb
 800b6c4:	3fd34413 	.word	0x3fd34413
 800b6c8:	0800ef22 	.word	0x0800ef22
 800b6cc:	0800ef39 	.word	0x0800ef39
 800b6d0:	7ff00000 	.word	0x7ff00000
 800b6d4:	0800ef1e 	.word	0x0800ef1e
 800b6d8:	0800ef15 	.word	0x0800ef15
 800b6dc:	0800edf1 	.word	0x0800edf1
 800b6e0:	3ff80000 	.word	0x3ff80000
 800b6e4:	0800f090 	.word	0x0800f090
 800b6e8:	0800ef94 	.word	0x0800ef94
 800b6ec:	2501      	movs	r5, #1
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	9306      	str	r3, [sp, #24]
 800b6f2:	9508      	str	r5, [sp, #32]
 800b6f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b6f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	2312      	movs	r3, #18
 800b700:	e7b0      	b.n	800b664 <_dtoa_r+0x26c>
 800b702:	2301      	movs	r3, #1
 800b704:	9308      	str	r3, [sp, #32]
 800b706:	e7f5      	b.n	800b6f4 <_dtoa_r+0x2fc>
 800b708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b70a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b70e:	e7b8      	b.n	800b682 <_dtoa_r+0x28a>
 800b710:	3101      	adds	r1, #1
 800b712:	6041      	str	r1, [r0, #4]
 800b714:	0052      	lsls	r2, r2, #1
 800b716:	e7b8      	b.n	800b68a <_dtoa_r+0x292>
 800b718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b71a:	9a01      	ldr	r2, [sp, #4]
 800b71c:	601a      	str	r2, [r3, #0]
 800b71e:	9b03      	ldr	r3, [sp, #12]
 800b720:	2b0e      	cmp	r3, #14
 800b722:	f200 809d 	bhi.w	800b860 <_dtoa_r+0x468>
 800b726:	2d00      	cmp	r5, #0
 800b728:	f000 809a 	beq.w	800b860 <_dtoa_r+0x468>
 800b72c:	9b00      	ldr	r3, [sp, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	dd32      	ble.n	800b798 <_dtoa_r+0x3a0>
 800b732:	4ab7      	ldr	r2, [pc, #732]	; (800ba10 <_dtoa_r+0x618>)
 800b734:	f003 030f 	and.w	r3, r3, #15
 800b738:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b73c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b740:	9b00      	ldr	r3, [sp, #0]
 800b742:	05d8      	lsls	r0, r3, #23
 800b744:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b748:	d516      	bpl.n	800b778 <_dtoa_r+0x380>
 800b74a:	4bb2      	ldr	r3, [pc, #712]	; (800ba14 <_dtoa_r+0x61c>)
 800b74c:	ec51 0b19 	vmov	r0, r1, d9
 800b750:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b754:	f7f5 f87a 	bl	800084c <__aeabi_ddiv>
 800b758:	f007 070f 	and.w	r7, r7, #15
 800b75c:	4682      	mov	sl, r0
 800b75e:	468b      	mov	fp, r1
 800b760:	2503      	movs	r5, #3
 800b762:	4eac      	ldr	r6, [pc, #688]	; (800ba14 <_dtoa_r+0x61c>)
 800b764:	b957      	cbnz	r7, 800b77c <_dtoa_r+0x384>
 800b766:	4642      	mov	r2, r8
 800b768:	464b      	mov	r3, r9
 800b76a:	4650      	mov	r0, sl
 800b76c:	4659      	mov	r1, fp
 800b76e:	f7f5 f86d 	bl	800084c <__aeabi_ddiv>
 800b772:	4682      	mov	sl, r0
 800b774:	468b      	mov	fp, r1
 800b776:	e028      	b.n	800b7ca <_dtoa_r+0x3d2>
 800b778:	2502      	movs	r5, #2
 800b77a:	e7f2      	b.n	800b762 <_dtoa_r+0x36a>
 800b77c:	07f9      	lsls	r1, r7, #31
 800b77e:	d508      	bpl.n	800b792 <_dtoa_r+0x39a>
 800b780:	4640      	mov	r0, r8
 800b782:	4649      	mov	r1, r9
 800b784:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b788:	f7f4 ff36 	bl	80005f8 <__aeabi_dmul>
 800b78c:	3501      	adds	r5, #1
 800b78e:	4680      	mov	r8, r0
 800b790:	4689      	mov	r9, r1
 800b792:	107f      	asrs	r7, r7, #1
 800b794:	3608      	adds	r6, #8
 800b796:	e7e5      	b.n	800b764 <_dtoa_r+0x36c>
 800b798:	f000 809b 	beq.w	800b8d2 <_dtoa_r+0x4da>
 800b79c:	9b00      	ldr	r3, [sp, #0]
 800b79e:	4f9d      	ldr	r7, [pc, #628]	; (800ba14 <_dtoa_r+0x61c>)
 800b7a0:	425e      	negs	r6, r3
 800b7a2:	4b9b      	ldr	r3, [pc, #620]	; (800ba10 <_dtoa_r+0x618>)
 800b7a4:	f006 020f 	and.w	r2, r6, #15
 800b7a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b0:	ec51 0b19 	vmov	r0, r1, d9
 800b7b4:	f7f4 ff20 	bl	80005f8 <__aeabi_dmul>
 800b7b8:	1136      	asrs	r6, r6, #4
 800b7ba:	4682      	mov	sl, r0
 800b7bc:	468b      	mov	fp, r1
 800b7be:	2300      	movs	r3, #0
 800b7c0:	2502      	movs	r5, #2
 800b7c2:	2e00      	cmp	r6, #0
 800b7c4:	d17a      	bne.n	800b8bc <_dtoa_r+0x4c4>
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1d3      	bne.n	800b772 <_dtoa_r+0x37a>
 800b7ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	f000 8082 	beq.w	800b8d6 <_dtoa_r+0x4de>
 800b7d2:	4b91      	ldr	r3, [pc, #580]	; (800ba18 <_dtoa_r+0x620>)
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	4650      	mov	r0, sl
 800b7d8:	4659      	mov	r1, fp
 800b7da:	f7f5 f97f 	bl	8000adc <__aeabi_dcmplt>
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	d079      	beq.n	800b8d6 <_dtoa_r+0x4de>
 800b7e2:	9b03      	ldr	r3, [sp, #12]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d076      	beq.n	800b8d6 <_dtoa_r+0x4de>
 800b7e8:	9b02      	ldr	r3, [sp, #8]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	dd36      	ble.n	800b85c <_dtoa_r+0x464>
 800b7ee:	9b00      	ldr	r3, [sp, #0]
 800b7f0:	4650      	mov	r0, sl
 800b7f2:	4659      	mov	r1, fp
 800b7f4:	1e5f      	subs	r7, r3, #1
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	4b88      	ldr	r3, [pc, #544]	; (800ba1c <_dtoa_r+0x624>)
 800b7fa:	f7f4 fefd 	bl	80005f8 <__aeabi_dmul>
 800b7fe:	9e02      	ldr	r6, [sp, #8]
 800b800:	4682      	mov	sl, r0
 800b802:	468b      	mov	fp, r1
 800b804:	3501      	adds	r5, #1
 800b806:	4628      	mov	r0, r5
 800b808:	f7f4 fe8c 	bl	8000524 <__aeabi_i2d>
 800b80c:	4652      	mov	r2, sl
 800b80e:	465b      	mov	r3, fp
 800b810:	f7f4 fef2 	bl	80005f8 <__aeabi_dmul>
 800b814:	4b82      	ldr	r3, [pc, #520]	; (800ba20 <_dtoa_r+0x628>)
 800b816:	2200      	movs	r2, #0
 800b818:	f7f4 fd38 	bl	800028c <__adddf3>
 800b81c:	46d0      	mov	r8, sl
 800b81e:	46d9      	mov	r9, fp
 800b820:	4682      	mov	sl, r0
 800b822:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b826:	2e00      	cmp	r6, #0
 800b828:	d158      	bne.n	800b8dc <_dtoa_r+0x4e4>
 800b82a:	4b7e      	ldr	r3, [pc, #504]	; (800ba24 <_dtoa_r+0x62c>)
 800b82c:	2200      	movs	r2, #0
 800b82e:	4640      	mov	r0, r8
 800b830:	4649      	mov	r1, r9
 800b832:	f7f4 fd29 	bl	8000288 <__aeabi_dsub>
 800b836:	4652      	mov	r2, sl
 800b838:	465b      	mov	r3, fp
 800b83a:	4680      	mov	r8, r0
 800b83c:	4689      	mov	r9, r1
 800b83e:	f7f5 f96b 	bl	8000b18 <__aeabi_dcmpgt>
 800b842:	2800      	cmp	r0, #0
 800b844:	f040 8295 	bne.w	800bd72 <_dtoa_r+0x97a>
 800b848:	4652      	mov	r2, sl
 800b84a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b84e:	4640      	mov	r0, r8
 800b850:	4649      	mov	r1, r9
 800b852:	f7f5 f943 	bl	8000adc <__aeabi_dcmplt>
 800b856:	2800      	cmp	r0, #0
 800b858:	f040 8289 	bne.w	800bd6e <_dtoa_r+0x976>
 800b85c:	ec5b ab19 	vmov	sl, fp, d9
 800b860:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b862:	2b00      	cmp	r3, #0
 800b864:	f2c0 8148 	blt.w	800baf8 <_dtoa_r+0x700>
 800b868:	9a00      	ldr	r2, [sp, #0]
 800b86a:	2a0e      	cmp	r2, #14
 800b86c:	f300 8144 	bgt.w	800baf8 <_dtoa_r+0x700>
 800b870:	4b67      	ldr	r3, [pc, #412]	; (800ba10 <_dtoa_r+0x618>)
 800b872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b876:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f280 80d5 	bge.w	800ba2c <_dtoa_r+0x634>
 800b882:	9b03      	ldr	r3, [sp, #12]
 800b884:	2b00      	cmp	r3, #0
 800b886:	f300 80d1 	bgt.w	800ba2c <_dtoa_r+0x634>
 800b88a:	f040 826f 	bne.w	800bd6c <_dtoa_r+0x974>
 800b88e:	4b65      	ldr	r3, [pc, #404]	; (800ba24 <_dtoa_r+0x62c>)
 800b890:	2200      	movs	r2, #0
 800b892:	4640      	mov	r0, r8
 800b894:	4649      	mov	r1, r9
 800b896:	f7f4 feaf 	bl	80005f8 <__aeabi_dmul>
 800b89a:	4652      	mov	r2, sl
 800b89c:	465b      	mov	r3, fp
 800b89e:	f7f5 f931 	bl	8000b04 <__aeabi_dcmpge>
 800b8a2:	9e03      	ldr	r6, [sp, #12]
 800b8a4:	4637      	mov	r7, r6
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	f040 8245 	bne.w	800bd36 <_dtoa_r+0x93e>
 800b8ac:	9d01      	ldr	r5, [sp, #4]
 800b8ae:	2331      	movs	r3, #49	; 0x31
 800b8b0:	f805 3b01 	strb.w	r3, [r5], #1
 800b8b4:	9b00      	ldr	r3, [sp, #0]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	9300      	str	r3, [sp, #0]
 800b8ba:	e240      	b.n	800bd3e <_dtoa_r+0x946>
 800b8bc:	07f2      	lsls	r2, r6, #31
 800b8be:	d505      	bpl.n	800b8cc <_dtoa_r+0x4d4>
 800b8c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8c4:	f7f4 fe98 	bl	80005f8 <__aeabi_dmul>
 800b8c8:	3501      	adds	r5, #1
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	1076      	asrs	r6, r6, #1
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	e777      	b.n	800b7c2 <_dtoa_r+0x3ca>
 800b8d2:	2502      	movs	r5, #2
 800b8d4:	e779      	b.n	800b7ca <_dtoa_r+0x3d2>
 800b8d6:	9f00      	ldr	r7, [sp, #0]
 800b8d8:	9e03      	ldr	r6, [sp, #12]
 800b8da:	e794      	b.n	800b806 <_dtoa_r+0x40e>
 800b8dc:	9901      	ldr	r1, [sp, #4]
 800b8de:	4b4c      	ldr	r3, [pc, #304]	; (800ba10 <_dtoa_r+0x618>)
 800b8e0:	4431      	add	r1, r6
 800b8e2:	910d      	str	r1, [sp, #52]	; 0x34
 800b8e4:	9908      	ldr	r1, [sp, #32]
 800b8e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b8ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b8ee:	2900      	cmp	r1, #0
 800b8f0:	d043      	beq.n	800b97a <_dtoa_r+0x582>
 800b8f2:	494d      	ldr	r1, [pc, #308]	; (800ba28 <_dtoa_r+0x630>)
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	f7f4 ffa9 	bl	800084c <__aeabi_ddiv>
 800b8fa:	4652      	mov	r2, sl
 800b8fc:	465b      	mov	r3, fp
 800b8fe:	f7f4 fcc3 	bl	8000288 <__aeabi_dsub>
 800b902:	9d01      	ldr	r5, [sp, #4]
 800b904:	4682      	mov	sl, r0
 800b906:	468b      	mov	fp, r1
 800b908:	4649      	mov	r1, r9
 800b90a:	4640      	mov	r0, r8
 800b90c:	f7f5 f924 	bl	8000b58 <__aeabi_d2iz>
 800b910:	4606      	mov	r6, r0
 800b912:	f7f4 fe07 	bl	8000524 <__aeabi_i2d>
 800b916:	4602      	mov	r2, r0
 800b918:	460b      	mov	r3, r1
 800b91a:	4640      	mov	r0, r8
 800b91c:	4649      	mov	r1, r9
 800b91e:	f7f4 fcb3 	bl	8000288 <__aeabi_dsub>
 800b922:	3630      	adds	r6, #48	; 0x30
 800b924:	f805 6b01 	strb.w	r6, [r5], #1
 800b928:	4652      	mov	r2, sl
 800b92a:	465b      	mov	r3, fp
 800b92c:	4680      	mov	r8, r0
 800b92e:	4689      	mov	r9, r1
 800b930:	f7f5 f8d4 	bl	8000adc <__aeabi_dcmplt>
 800b934:	2800      	cmp	r0, #0
 800b936:	d163      	bne.n	800ba00 <_dtoa_r+0x608>
 800b938:	4642      	mov	r2, r8
 800b93a:	464b      	mov	r3, r9
 800b93c:	4936      	ldr	r1, [pc, #216]	; (800ba18 <_dtoa_r+0x620>)
 800b93e:	2000      	movs	r0, #0
 800b940:	f7f4 fca2 	bl	8000288 <__aeabi_dsub>
 800b944:	4652      	mov	r2, sl
 800b946:	465b      	mov	r3, fp
 800b948:	f7f5 f8c8 	bl	8000adc <__aeabi_dcmplt>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	f040 80b5 	bne.w	800babc <_dtoa_r+0x6c4>
 800b952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b954:	429d      	cmp	r5, r3
 800b956:	d081      	beq.n	800b85c <_dtoa_r+0x464>
 800b958:	4b30      	ldr	r3, [pc, #192]	; (800ba1c <_dtoa_r+0x624>)
 800b95a:	2200      	movs	r2, #0
 800b95c:	4650      	mov	r0, sl
 800b95e:	4659      	mov	r1, fp
 800b960:	f7f4 fe4a 	bl	80005f8 <__aeabi_dmul>
 800b964:	4b2d      	ldr	r3, [pc, #180]	; (800ba1c <_dtoa_r+0x624>)
 800b966:	4682      	mov	sl, r0
 800b968:	468b      	mov	fp, r1
 800b96a:	4640      	mov	r0, r8
 800b96c:	4649      	mov	r1, r9
 800b96e:	2200      	movs	r2, #0
 800b970:	f7f4 fe42 	bl	80005f8 <__aeabi_dmul>
 800b974:	4680      	mov	r8, r0
 800b976:	4689      	mov	r9, r1
 800b978:	e7c6      	b.n	800b908 <_dtoa_r+0x510>
 800b97a:	4650      	mov	r0, sl
 800b97c:	4659      	mov	r1, fp
 800b97e:	f7f4 fe3b 	bl	80005f8 <__aeabi_dmul>
 800b982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b984:	9d01      	ldr	r5, [sp, #4]
 800b986:	930f      	str	r3, [sp, #60]	; 0x3c
 800b988:	4682      	mov	sl, r0
 800b98a:	468b      	mov	fp, r1
 800b98c:	4649      	mov	r1, r9
 800b98e:	4640      	mov	r0, r8
 800b990:	f7f5 f8e2 	bl	8000b58 <__aeabi_d2iz>
 800b994:	4606      	mov	r6, r0
 800b996:	f7f4 fdc5 	bl	8000524 <__aeabi_i2d>
 800b99a:	3630      	adds	r6, #48	; 0x30
 800b99c:	4602      	mov	r2, r0
 800b99e:	460b      	mov	r3, r1
 800b9a0:	4640      	mov	r0, r8
 800b9a2:	4649      	mov	r1, r9
 800b9a4:	f7f4 fc70 	bl	8000288 <__aeabi_dsub>
 800b9a8:	f805 6b01 	strb.w	r6, [r5], #1
 800b9ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b9ae:	429d      	cmp	r5, r3
 800b9b0:	4680      	mov	r8, r0
 800b9b2:	4689      	mov	r9, r1
 800b9b4:	f04f 0200 	mov.w	r2, #0
 800b9b8:	d124      	bne.n	800ba04 <_dtoa_r+0x60c>
 800b9ba:	4b1b      	ldr	r3, [pc, #108]	; (800ba28 <_dtoa_r+0x630>)
 800b9bc:	4650      	mov	r0, sl
 800b9be:	4659      	mov	r1, fp
 800b9c0:	f7f4 fc64 	bl	800028c <__adddf3>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	4640      	mov	r0, r8
 800b9ca:	4649      	mov	r1, r9
 800b9cc:	f7f5 f8a4 	bl	8000b18 <__aeabi_dcmpgt>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	d173      	bne.n	800babc <_dtoa_r+0x6c4>
 800b9d4:	4652      	mov	r2, sl
 800b9d6:	465b      	mov	r3, fp
 800b9d8:	4913      	ldr	r1, [pc, #76]	; (800ba28 <_dtoa_r+0x630>)
 800b9da:	2000      	movs	r0, #0
 800b9dc:	f7f4 fc54 	bl	8000288 <__aeabi_dsub>
 800b9e0:	4602      	mov	r2, r0
 800b9e2:	460b      	mov	r3, r1
 800b9e4:	4640      	mov	r0, r8
 800b9e6:	4649      	mov	r1, r9
 800b9e8:	f7f5 f878 	bl	8000adc <__aeabi_dcmplt>
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	f43f af35 	beq.w	800b85c <_dtoa_r+0x464>
 800b9f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b9f4:	1e6b      	subs	r3, r5, #1
 800b9f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b9fc:	2b30      	cmp	r3, #48	; 0x30
 800b9fe:	d0f8      	beq.n	800b9f2 <_dtoa_r+0x5fa>
 800ba00:	9700      	str	r7, [sp, #0]
 800ba02:	e049      	b.n	800ba98 <_dtoa_r+0x6a0>
 800ba04:	4b05      	ldr	r3, [pc, #20]	; (800ba1c <_dtoa_r+0x624>)
 800ba06:	f7f4 fdf7 	bl	80005f8 <__aeabi_dmul>
 800ba0a:	4680      	mov	r8, r0
 800ba0c:	4689      	mov	r9, r1
 800ba0e:	e7bd      	b.n	800b98c <_dtoa_r+0x594>
 800ba10:	0800f090 	.word	0x0800f090
 800ba14:	0800f068 	.word	0x0800f068
 800ba18:	3ff00000 	.word	0x3ff00000
 800ba1c:	40240000 	.word	0x40240000
 800ba20:	401c0000 	.word	0x401c0000
 800ba24:	40140000 	.word	0x40140000
 800ba28:	3fe00000 	.word	0x3fe00000
 800ba2c:	9d01      	ldr	r5, [sp, #4]
 800ba2e:	4656      	mov	r6, sl
 800ba30:	465f      	mov	r7, fp
 800ba32:	4642      	mov	r2, r8
 800ba34:	464b      	mov	r3, r9
 800ba36:	4630      	mov	r0, r6
 800ba38:	4639      	mov	r1, r7
 800ba3a:	f7f4 ff07 	bl	800084c <__aeabi_ddiv>
 800ba3e:	f7f5 f88b 	bl	8000b58 <__aeabi_d2iz>
 800ba42:	4682      	mov	sl, r0
 800ba44:	f7f4 fd6e 	bl	8000524 <__aeabi_i2d>
 800ba48:	4642      	mov	r2, r8
 800ba4a:	464b      	mov	r3, r9
 800ba4c:	f7f4 fdd4 	bl	80005f8 <__aeabi_dmul>
 800ba50:	4602      	mov	r2, r0
 800ba52:	460b      	mov	r3, r1
 800ba54:	4630      	mov	r0, r6
 800ba56:	4639      	mov	r1, r7
 800ba58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ba5c:	f7f4 fc14 	bl	8000288 <__aeabi_dsub>
 800ba60:	f805 6b01 	strb.w	r6, [r5], #1
 800ba64:	9e01      	ldr	r6, [sp, #4]
 800ba66:	9f03      	ldr	r7, [sp, #12]
 800ba68:	1bae      	subs	r6, r5, r6
 800ba6a:	42b7      	cmp	r7, r6
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	460b      	mov	r3, r1
 800ba70:	d135      	bne.n	800bade <_dtoa_r+0x6e6>
 800ba72:	f7f4 fc0b 	bl	800028c <__adddf3>
 800ba76:	4642      	mov	r2, r8
 800ba78:	464b      	mov	r3, r9
 800ba7a:	4606      	mov	r6, r0
 800ba7c:	460f      	mov	r7, r1
 800ba7e:	f7f5 f84b 	bl	8000b18 <__aeabi_dcmpgt>
 800ba82:	b9d0      	cbnz	r0, 800baba <_dtoa_r+0x6c2>
 800ba84:	4642      	mov	r2, r8
 800ba86:	464b      	mov	r3, r9
 800ba88:	4630      	mov	r0, r6
 800ba8a:	4639      	mov	r1, r7
 800ba8c:	f7f5 f81c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba90:	b110      	cbz	r0, 800ba98 <_dtoa_r+0x6a0>
 800ba92:	f01a 0f01 	tst.w	sl, #1
 800ba96:	d110      	bne.n	800baba <_dtoa_r+0x6c2>
 800ba98:	4620      	mov	r0, r4
 800ba9a:	ee18 1a10 	vmov	r1, s16
 800ba9e:	f000 fd09 	bl	800c4b4 <_Bfree>
 800baa2:	2300      	movs	r3, #0
 800baa4:	9800      	ldr	r0, [sp, #0]
 800baa6:	702b      	strb	r3, [r5, #0]
 800baa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800baaa:	3001      	adds	r0, #1
 800baac:	6018      	str	r0, [r3, #0]
 800baae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	f43f acf1 	beq.w	800b498 <_dtoa_r+0xa0>
 800bab6:	601d      	str	r5, [r3, #0]
 800bab8:	e4ee      	b.n	800b498 <_dtoa_r+0xa0>
 800baba:	9f00      	ldr	r7, [sp, #0]
 800babc:	462b      	mov	r3, r5
 800babe:	461d      	mov	r5, r3
 800bac0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bac4:	2a39      	cmp	r2, #57	; 0x39
 800bac6:	d106      	bne.n	800bad6 <_dtoa_r+0x6de>
 800bac8:	9a01      	ldr	r2, [sp, #4]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d1f7      	bne.n	800babe <_dtoa_r+0x6c6>
 800bace:	9901      	ldr	r1, [sp, #4]
 800bad0:	2230      	movs	r2, #48	; 0x30
 800bad2:	3701      	adds	r7, #1
 800bad4:	700a      	strb	r2, [r1, #0]
 800bad6:	781a      	ldrb	r2, [r3, #0]
 800bad8:	3201      	adds	r2, #1
 800bada:	701a      	strb	r2, [r3, #0]
 800badc:	e790      	b.n	800ba00 <_dtoa_r+0x608>
 800bade:	4ba6      	ldr	r3, [pc, #664]	; (800bd78 <_dtoa_r+0x980>)
 800bae0:	2200      	movs	r2, #0
 800bae2:	f7f4 fd89 	bl	80005f8 <__aeabi_dmul>
 800bae6:	2200      	movs	r2, #0
 800bae8:	2300      	movs	r3, #0
 800baea:	4606      	mov	r6, r0
 800baec:	460f      	mov	r7, r1
 800baee:	f7f4 ffeb 	bl	8000ac8 <__aeabi_dcmpeq>
 800baf2:	2800      	cmp	r0, #0
 800baf4:	d09d      	beq.n	800ba32 <_dtoa_r+0x63a>
 800baf6:	e7cf      	b.n	800ba98 <_dtoa_r+0x6a0>
 800baf8:	9a08      	ldr	r2, [sp, #32]
 800bafa:	2a00      	cmp	r2, #0
 800bafc:	f000 80d7 	beq.w	800bcae <_dtoa_r+0x8b6>
 800bb00:	9a06      	ldr	r2, [sp, #24]
 800bb02:	2a01      	cmp	r2, #1
 800bb04:	f300 80ba 	bgt.w	800bc7c <_dtoa_r+0x884>
 800bb08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb0a:	2a00      	cmp	r2, #0
 800bb0c:	f000 80b2 	beq.w	800bc74 <_dtoa_r+0x87c>
 800bb10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bb14:	9e07      	ldr	r6, [sp, #28]
 800bb16:	9d04      	ldr	r5, [sp, #16]
 800bb18:	9a04      	ldr	r2, [sp, #16]
 800bb1a:	441a      	add	r2, r3
 800bb1c:	9204      	str	r2, [sp, #16]
 800bb1e:	9a05      	ldr	r2, [sp, #20]
 800bb20:	2101      	movs	r1, #1
 800bb22:	441a      	add	r2, r3
 800bb24:	4620      	mov	r0, r4
 800bb26:	9205      	str	r2, [sp, #20]
 800bb28:	f000 fd7c 	bl	800c624 <__i2b>
 800bb2c:	4607      	mov	r7, r0
 800bb2e:	2d00      	cmp	r5, #0
 800bb30:	dd0c      	ble.n	800bb4c <_dtoa_r+0x754>
 800bb32:	9b05      	ldr	r3, [sp, #20]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	dd09      	ble.n	800bb4c <_dtoa_r+0x754>
 800bb38:	42ab      	cmp	r3, r5
 800bb3a:	9a04      	ldr	r2, [sp, #16]
 800bb3c:	bfa8      	it	ge
 800bb3e:	462b      	movge	r3, r5
 800bb40:	1ad2      	subs	r2, r2, r3
 800bb42:	9204      	str	r2, [sp, #16]
 800bb44:	9a05      	ldr	r2, [sp, #20]
 800bb46:	1aed      	subs	r5, r5, r3
 800bb48:	1ad3      	subs	r3, r2, r3
 800bb4a:	9305      	str	r3, [sp, #20]
 800bb4c:	9b07      	ldr	r3, [sp, #28]
 800bb4e:	b31b      	cbz	r3, 800bb98 <_dtoa_r+0x7a0>
 800bb50:	9b08      	ldr	r3, [sp, #32]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f000 80af 	beq.w	800bcb6 <_dtoa_r+0x8be>
 800bb58:	2e00      	cmp	r6, #0
 800bb5a:	dd13      	ble.n	800bb84 <_dtoa_r+0x78c>
 800bb5c:	4639      	mov	r1, r7
 800bb5e:	4632      	mov	r2, r6
 800bb60:	4620      	mov	r0, r4
 800bb62:	f000 fe1f 	bl	800c7a4 <__pow5mult>
 800bb66:	ee18 2a10 	vmov	r2, s16
 800bb6a:	4601      	mov	r1, r0
 800bb6c:	4607      	mov	r7, r0
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f000 fd6e 	bl	800c650 <__multiply>
 800bb74:	ee18 1a10 	vmov	r1, s16
 800bb78:	4680      	mov	r8, r0
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	f000 fc9a 	bl	800c4b4 <_Bfree>
 800bb80:	ee08 8a10 	vmov	s16, r8
 800bb84:	9b07      	ldr	r3, [sp, #28]
 800bb86:	1b9a      	subs	r2, r3, r6
 800bb88:	d006      	beq.n	800bb98 <_dtoa_r+0x7a0>
 800bb8a:	ee18 1a10 	vmov	r1, s16
 800bb8e:	4620      	mov	r0, r4
 800bb90:	f000 fe08 	bl	800c7a4 <__pow5mult>
 800bb94:	ee08 0a10 	vmov	s16, r0
 800bb98:	2101      	movs	r1, #1
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f000 fd42 	bl	800c624 <__i2b>
 800bba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	4606      	mov	r6, r0
 800bba6:	f340 8088 	ble.w	800bcba <_dtoa_r+0x8c2>
 800bbaa:	461a      	mov	r2, r3
 800bbac:	4601      	mov	r1, r0
 800bbae:	4620      	mov	r0, r4
 800bbb0:	f000 fdf8 	bl	800c7a4 <__pow5mult>
 800bbb4:	9b06      	ldr	r3, [sp, #24]
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	4606      	mov	r6, r0
 800bbba:	f340 8081 	ble.w	800bcc0 <_dtoa_r+0x8c8>
 800bbbe:	f04f 0800 	mov.w	r8, #0
 800bbc2:	6933      	ldr	r3, [r6, #16]
 800bbc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bbc8:	6918      	ldr	r0, [r3, #16]
 800bbca:	f000 fcdb 	bl	800c584 <__hi0bits>
 800bbce:	f1c0 0020 	rsb	r0, r0, #32
 800bbd2:	9b05      	ldr	r3, [sp, #20]
 800bbd4:	4418      	add	r0, r3
 800bbd6:	f010 001f 	ands.w	r0, r0, #31
 800bbda:	f000 8092 	beq.w	800bd02 <_dtoa_r+0x90a>
 800bbde:	f1c0 0320 	rsb	r3, r0, #32
 800bbe2:	2b04      	cmp	r3, #4
 800bbe4:	f340 808a 	ble.w	800bcfc <_dtoa_r+0x904>
 800bbe8:	f1c0 001c 	rsb	r0, r0, #28
 800bbec:	9b04      	ldr	r3, [sp, #16]
 800bbee:	4403      	add	r3, r0
 800bbf0:	9304      	str	r3, [sp, #16]
 800bbf2:	9b05      	ldr	r3, [sp, #20]
 800bbf4:	4403      	add	r3, r0
 800bbf6:	4405      	add	r5, r0
 800bbf8:	9305      	str	r3, [sp, #20]
 800bbfa:	9b04      	ldr	r3, [sp, #16]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	dd07      	ble.n	800bc10 <_dtoa_r+0x818>
 800bc00:	ee18 1a10 	vmov	r1, s16
 800bc04:	461a      	mov	r2, r3
 800bc06:	4620      	mov	r0, r4
 800bc08:	f000 fe26 	bl	800c858 <__lshift>
 800bc0c:	ee08 0a10 	vmov	s16, r0
 800bc10:	9b05      	ldr	r3, [sp, #20]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	dd05      	ble.n	800bc22 <_dtoa_r+0x82a>
 800bc16:	4631      	mov	r1, r6
 800bc18:	461a      	mov	r2, r3
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f000 fe1c 	bl	800c858 <__lshift>
 800bc20:	4606      	mov	r6, r0
 800bc22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d06e      	beq.n	800bd06 <_dtoa_r+0x90e>
 800bc28:	ee18 0a10 	vmov	r0, s16
 800bc2c:	4631      	mov	r1, r6
 800bc2e:	f000 fe83 	bl	800c938 <__mcmp>
 800bc32:	2800      	cmp	r0, #0
 800bc34:	da67      	bge.n	800bd06 <_dtoa_r+0x90e>
 800bc36:	9b00      	ldr	r3, [sp, #0]
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	ee18 1a10 	vmov	r1, s16
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	220a      	movs	r2, #10
 800bc42:	2300      	movs	r3, #0
 800bc44:	4620      	mov	r0, r4
 800bc46:	f000 fc57 	bl	800c4f8 <__multadd>
 800bc4a:	9b08      	ldr	r3, [sp, #32]
 800bc4c:	ee08 0a10 	vmov	s16, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f000 81b1 	beq.w	800bfb8 <_dtoa_r+0xbc0>
 800bc56:	2300      	movs	r3, #0
 800bc58:	4639      	mov	r1, r7
 800bc5a:	220a      	movs	r2, #10
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f000 fc4b 	bl	800c4f8 <__multadd>
 800bc62:	9b02      	ldr	r3, [sp, #8]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	4607      	mov	r7, r0
 800bc68:	f300 808e 	bgt.w	800bd88 <_dtoa_r+0x990>
 800bc6c:	9b06      	ldr	r3, [sp, #24]
 800bc6e:	2b02      	cmp	r3, #2
 800bc70:	dc51      	bgt.n	800bd16 <_dtoa_r+0x91e>
 800bc72:	e089      	b.n	800bd88 <_dtoa_r+0x990>
 800bc74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bc7a:	e74b      	b.n	800bb14 <_dtoa_r+0x71c>
 800bc7c:	9b03      	ldr	r3, [sp, #12]
 800bc7e:	1e5e      	subs	r6, r3, #1
 800bc80:	9b07      	ldr	r3, [sp, #28]
 800bc82:	42b3      	cmp	r3, r6
 800bc84:	bfbf      	itttt	lt
 800bc86:	9b07      	ldrlt	r3, [sp, #28]
 800bc88:	9607      	strlt	r6, [sp, #28]
 800bc8a:	1af2      	sublt	r2, r6, r3
 800bc8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bc8e:	bfb6      	itet	lt
 800bc90:	189b      	addlt	r3, r3, r2
 800bc92:	1b9e      	subge	r6, r3, r6
 800bc94:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bc96:	9b03      	ldr	r3, [sp, #12]
 800bc98:	bfb8      	it	lt
 800bc9a:	2600      	movlt	r6, #0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	bfb7      	itett	lt
 800bca0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bca4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bca8:	1a9d      	sublt	r5, r3, r2
 800bcaa:	2300      	movlt	r3, #0
 800bcac:	e734      	b.n	800bb18 <_dtoa_r+0x720>
 800bcae:	9e07      	ldr	r6, [sp, #28]
 800bcb0:	9d04      	ldr	r5, [sp, #16]
 800bcb2:	9f08      	ldr	r7, [sp, #32]
 800bcb4:	e73b      	b.n	800bb2e <_dtoa_r+0x736>
 800bcb6:	9a07      	ldr	r2, [sp, #28]
 800bcb8:	e767      	b.n	800bb8a <_dtoa_r+0x792>
 800bcba:	9b06      	ldr	r3, [sp, #24]
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	dc18      	bgt.n	800bcf2 <_dtoa_r+0x8fa>
 800bcc0:	f1ba 0f00 	cmp.w	sl, #0
 800bcc4:	d115      	bne.n	800bcf2 <_dtoa_r+0x8fa>
 800bcc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcca:	b993      	cbnz	r3, 800bcf2 <_dtoa_r+0x8fa>
 800bccc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bcd0:	0d1b      	lsrs	r3, r3, #20
 800bcd2:	051b      	lsls	r3, r3, #20
 800bcd4:	b183      	cbz	r3, 800bcf8 <_dtoa_r+0x900>
 800bcd6:	9b04      	ldr	r3, [sp, #16]
 800bcd8:	3301      	adds	r3, #1
 800bcda:	9304      	str	r3, [sp, #16]
 800bcdc:	9b05      	ldr	r3, [sp, #20]
 800bcde:	3301      	adds	r3, #1
 800bce0:	9305      	str	r3, [sp, #20]
 800bce2:	f04f 0801 	mov.w	r8, #1
 800bce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f47f af6a 	bne.w	800bbc2 <_dtoa_r+0x7ca>
 800bcee:	2001      	movs	r0, #1
 800bcf0:	e76f      	b.n	800bbd2 <_dtoa_r+0x7da>
 800bcf2:	f04f 0800 	mov.w	r8, #0
 800bcf6:	e7f6      	b.n	800bce6 <_dtoa_r+0x8ee>
 800bcf8:	4698      	mov	r8, r3
 800bcfa:	e7f4      	b.n	800bce6 <_dtoa_r+0x8ee>
 800bcfc:	f43f af7d 	beq.w	800bbfa <_dtoa_r+0x802>
 800bd00:	4618      	mov	r0, r3
 800bd02:	301c      	adds	r0, #28
 800bd04:	e772      	b.n	800bbec <_dtoa_r+0x7f4>
 800bd06:	9b03      	ldr	r3, [sp, #12]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	dc37      	bgt.n	800bd7c <_dtoa_r+0x984>
 800bd0c:	9b06      	ldr	r3, [sp, #24]
 800bd0e:	2b02      	cmp	r3, #2
 800bd10:	dd34      	ble.n	800bd7c <_dtoa_r+0x984>
 800bd12:	9b03      	ldr	r3, [sp, #12]
 800bd14:	9302      	str	r3, [sp, #8]
 800bd16:	9b02      	ldr	r3, [sp, #8]
 800bd18:	b96b      	cbnz	r3, 800bd36 <_dtoa_r+0x93e>
 800bd1a:	4631      	mov	r1, r6
 800bd1c:	2205      	movs	r2, #5
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f000 fbea 	bl	800c4f8 <__multadd>
 800bd24:	4601      	mov	r1, r0
 800bd26:	4606      	mov	r6, r0
 800bd28:	ee18 0a10 	vmov	r0, s16
 800bd2c:	f000 fe04 	bl	800c938 <__mcmp>
 800bd30:	2800      	cmp	r0, #0
 800bd32:	f73f adbb 	bgt.w	800b8ac <_dtoa_r+0x4b4>
 800bd36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd38:	9d01      	ldr	r5, [sp, #4]
 800bd3a:	43db      	mvns	r3, r3
 800bd3c:	9300      	str	r3, [sp, #0]
 800bd3e:	f04f 0800 	mov.w	r8, #0
 800bd42:	4631      	mov	r1, r6
 800bd44:	4620      	mov	r0, r4
 800bd46:	f000 fbb5 	bl	800c4b4 <_Bfree>
 800bd4a:	2f00      	cmp	r7, #0
 800bd4c:	f43f aea4 	beq.w	800ba98 <_dtoa_r+0x6a0>
 800bd50:	f1b8 0f00 	cmp.w	r8, #0
 800bd54:	d005      	beq.n	800bd62 <_dtoa_r+0x96a>
 800bd56:	45b8      	cmp	r8, r7
 800bd58:	d003      	beq.n	800bd62 <_dtoa_r+0x96a>
 800bd5a:	4641      	mov	r1, r8
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f000 fba9 	bl	800c4b4 <_Bfree>
 800bd62:	4639      	mov	r1, r7
 800bd64:	4620      	mov	r0, r4
 800bd66:	f000 fba5 	bl	800c4b4 <_Bfree>
 800bd6a:	e695      	b.n	800ba98 <_dtoa_r+0x6a0>
 800bd6c:	2600      	movs	r6, #0
 800bd6e:	4637      	mov	r7, r6
 800bd70:	e7e1      	b.n	800bd36 <_dtoa_r+0x93e>
 800bd72:	9700      	str	r7, [sp, #0]
 800bd74:	4637      	mov	r7, r6
 800bd76:	e599      	b.n	800b8ac <_dtoa_r+0x4b4>
 800bd78:	40240000 	.word	0x40240000
 800bd7c:	9b08      	ldr	r3, [sp, #32]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f000 80ca 	beq.w	800bf18 <_dtoa_r+0xb20>
 800bd84:	9b03      	ldr	r3, [sp, #12]
 800bd86:	9302      	str	r3, [sp, #8]
 800bd88:	2d00      	cmp	r5, #0
 800bd8a:	dd05      	ble.n	800bd98 <_dtoa_r+0x9a0>
 800bd8c:	4639      	mov	r1, r7
 800bd8e:	462a      	mov	r2, r5
 800bd90:	4620      	mov	r0, r4
 800bd92:	f000 fd61 	bl	800c858 <__lshift>
 800bd96:	4607      	mov	r7, r0
 800bd98:	f1b8 0f00 	cmp.w	r8, #0
 800bd9c:	d05b      	beq.n	800be56 <_dtoa_r+0xa5e>
 800bd9e:	6879      	ldr	r1, [r7, #4]
 800bda0:	4620      	mov	r0, r4
 800bda2:	f000 fb47 	bl	800c434 <_Balloc>
 800bda6:	4605      	mov	r5, r0
 800bda8:	b928      	cbnz	r0, 800bdb6 <_dtoa_r+0x9be>
 800bdaa:	4b87      	ldr	r3, [pc, #540]	; (800bfc8 <_dtoa_r+0xbd0>)
 800bdac:	4602      	mov	r2, r0
 800bdae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bdb2:	f7ff bb3b 	b.w	800b42c <_dtoa_r+0x34>
 800bdb6:	693a      	ldr	r2, [r7, #16]
 800bdb8:	3202      	adds	r2, #2
 800bdba:	0092      	lsls	r2, r2, #2
 800bdbc:	f107 010c 	add.w	r1, r7, #12
 800bdc0:	300c      	adds	r0, #12
 800bdc2:	f7fe fa29 	bl	800a218 <memcpy>
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	4629      	mov	r1, r5
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f000 fd44 	bl	800c858 <__lshift>
 800bdd0:	9b01      	ldr	r3, [sp, #4]
 800bdd2:	f103 0901 	add.w	r9, r3, #1
 800bdd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bdda:	4413      	add	r3, r2
 800bddc:	9305      	str	r3, [sp, #20]
 800bdde:	f00a 0301 	and.w	r3, sl, #1
 800bde2:	46b8      	mov	r8, r7
 800bde4:	9304      	str	r3, [sp, #16]
 800bde6:	4607      	mov	r7, r0
 800bde8:	4631      	mov	r1, r6
 800bdea:	ee18 0a10 	vmov	r0, s16
 800bdee:	f7ff fa77 	bl	800b2e0 <quorem>
 800bdf2:	4641      	mov	r1, r8
 800bdf4:	9002      	str	r0, [sp, #8]
 800bdf6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bdfa:	ee18 0a10 	vmov	r0, s16
 800bdfe:	f000 fd9b 	bl	800c938 <__mcmp>
 800be02:	463a      	mov	r2, r7
 800be04:	9003      	str	r0, [sp, #12]
 800be06:	4631      	mov	r1, r6
 800be08:	4620      	mov	r0, r4
 800be0a:	f000 fdb1 	bl	800c970 <__mdiff>
 800be0e:	68c2      	ldr	r2, [r0, #12]
 800be10:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800be14:	4605      	mov	r5, r0
 800be16:	bb02      	cbnz	r2, 800be5a <_dtoa_r+0xa62>
 800be18:	4601      	mov	r1, r0
 800be1a:	ee18 0a10 	vmov	r0, s16
 800be1e:	f000 fd8b 	bl	800c938 <__mcmp>
 800be22:	4602      	mov	r2, r0
 800be24:	4629      	mov	r1, r5
 800be26:	4620      	mov	r0, r4
 800be28:	9207      	str	r2, [sp, #28]
 800be2a:	f000 fb43 	bl	800c4b4 <_Bfree>
 800be2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800be32:	ea43 0102 	orr.w	r1, r3, r2
 800be36:	9b04      	ldr	r3, [sp, #16]
 800be38:	430b      	orrs	r3, r1
 800be3a:	464d      	mov	r5, r9
 800be3c:	d10f      	bne.n	800be5e <_dtoa_r+0xa66>
 800be3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800be42:	d02a      	beq.n	800be9a <_dtoa_r+0xaa2>
 800be44:	9b03      	ldr	r3, [sp, #12]
 800be46:	2b00      	cmp	r3, #0
 800be48:	dd02      	ble.n	800be50 <_dtoa_r+0xa58>
 800be4a:	9b02      	ldr	r3, [sp, #8]
 800be4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800be50:	f88b a000 	strb.w	sl, [fp]
 800be54:	e775      	b.n	800bd42 <_dtoa_r+0x94a>
 800be56:	4638      	mov	r0, r7
 800be58:	e7ba      	b.n	800bdd0 <_dtoa_r+0x9d8>
 800be5a:	2201      	movs	r2, #1
 800be5c:	e7e2      	b.n	800be24 <_dtoa_r+0xa2c>
 800be5e:	9b03      	ldr	r3, [sp, #12]
 800be60:	2b00      	cmp	r3, #0
 800be62:	db04      	blt.n	800be6e <_dtoa_r+0xa76>
 800be64:	9906      	ldr	r1, [sp, #24]
 800be66:	430b      	orrs	r3, r1
 800be68:	9904      	ldr	r1, [sp, #16]
 800be6a:	430b      	orrs	r3, r1
 800be6c:	d122      	bne.n	800beb4 <_dtoa_r+0xabc>
 800be6e:	2a00      	cmp	r2, #0
 800be70:	ddee      	ble.n	800be50 <_dtoa_r+0xa58>
 800be72:	ee18 1a10 	vmov	r1, s16
 800be76:	2201      	movs	r2, #1
 800be78:	4620      	mov	r0, r4
 800be7a:	f000 fced 	bl	800c858 <__lshift>
 800be7e:	4631      	mov	r1, r6
 800be80:	ee08 0a10 	vmov	s16, r0
 800be84:	f000 fd58 	bl	800c938 <__mcmp>
 800be88:	2800      	cmp	r0, #0
 800be8a:	dc03      	bgt.n	800be94 <_dtoa_r+0xa9c>
 800be8c:	d1e0      	bne.n	800be50 <_dtoa_r+0xa58>
 800be8e:	f01a 0f01 	tst.w	sl, #1
 800be92:	d0dd      	beq.n	800be50 <_dtoa_r+0xa58>
 800be94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800be98:	d1d7      	bne.n	800be4a <_dtoa_r+0xa52>
 800be9a:	2339      	movs	r3, #57	; 0x39
 800be9c:	f88b 3000 	strb.w	r3, [fp]
 800bea0:	462b      	mov	r3, r5
 800bea2:	461d      	mov	r5, r3
 800bea4:	3b01      	subs	r3, #1
 800bea6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800beaa:	2a39      	cmp	r2, #57	; 0x39
 800beac:	d071      	beq.n	800bf92 <_dtoa_r+0xb9a>
 800beae:	3201      	adds	r2, #1
 800beb0:	701a      	strb	r2, [r3, #0]
 800beb2:	e746      	b.n	800bd42 <_dtoa_r+0x94a>
 800beb4:	2a00      	cmp	r2, #0
 800beb6:	dd07      	ble.n	800bec8 <_dtoa_r+0xad0>
 800beb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bebc:	d0ed      	beq.n	800be9a <_dtoa_r+0xaa2>
 800bebe:	f10a 0301 	add.w	r3, sl, #1
 800bec2:	f88b 3000 	strb.w	r3, [fp]
 800bec6:	e73c      	b.n	800bd42 <_dtoa_r+0x94a>
 800bec8:	9b05      	ldr	r3, [sp, #20]
 800beca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bece:	4599      	cmp	r9, r3
 800bed0:	d047      	beq.n	800bf62 <_dtoa_r+0xb6a>
 800bed2:	ee18 1a10 	vmov	r1, s16
 800bed6:	2300      	movs	r3, #0
 800bed8:	220a      	movs	r2, #10
 800beda:	4620      	mov	r0, r4
 800bedc:	f000 fb0c 	bl	800c4f8 <__multadd>
 800bee0:	45b8      	cmp	r8, r7
 800bee2:	ee08 0a10 	vmov	s16, r0
 800bee6:	f04f 0300 	mov.w	r3, #0
 800beea:	f04f 020a 	mov.w	r2, #10
 800beee:	4641      	mov	r1, r8
 800bef0:	4620      	mov	r0, r4
 800bef2:	d106      	bne.n	800bf02 <_dtoa_r+0xb0a>
 800bef4:	f000 fb00 	bl	800c4f8 <__multadd>
 800bef8:	4680      	mov	r8, r0
 800befa:	4607      	mov	r7, r0
 800befc:	f109 0901 	add.w	r9, r9, #1
 800bf00:	e772      	b.n	800bde8 <_dtoa_r+0x9f0>
 800bf02:	f000 faf9 	bl	800c4f8 <__multadd>
 800bf06:	4639      	mov	r1, r7
 800bf08:	4680      	mov	r8, r0
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	220a      	movs	r2, #10
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f000 faf2 	bl	800c4f8 <__multadd>
 800bf14:	4607      	mov	r7, r0
 800bf16:	e7f1      	b.n	800befc <_dtoa_r+0xb04>
 800bf18:	9b03      	ldr	r3, [sp, #12]
 800bf1a:	9302      	str	r3, [sp, #8]
 800bf1c:	9d01      	ldr	r5, [sp, #4]
 800bf1e:	ee18 0a10 	vmov	r0, s16
 800bf22:	4631      	mov	r1, r6
 800bf24:	f7ff f9dc 	bl	800b2e0 <quorem>
 800bf28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bf2c:	9b01      	ldr	r3, [sp, #4]
 800bf2e:	f805 ab01 	strb.w	sl, [r5], #1
 800bf32:	1aea      	subs	r2, r5, r3
 800bf34:	9b02      	ldr	r3, [sp, #8]
 800bf36:	4293      	cmp	r3, r2
 800bf38:	dd09      	ble.n	800bf4e <_dtoa_r+0xb56>
 800bf3a:	ee18 1a10 	vmov	r1, s16
 800bf3e:	2300      	movs	r3, #0
 800bf40:	220a      	movs	r2, #10
 800bf42:	4620      	mov	r0, r4
 800bf44:	f000 fad8 	bl	800c4f8 <__multadd>
 800bf48:	ee08 0a10 	vmov	s16, r0
 800bf4c:	e7e7      	b.n	800bf1e <_dtoa_r+0xb26>
 800bf4e:	9b02      	ldr	r3, [sp, #8]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	bfc8      	it	gt
 800bf54:	461d      	movgt	r5, r3
 800bf56:	9b01      	ldr	r3, [sp, #4]
 800bf58:	bfd8      	it	le
 800bf5a:	2501      	movle	r5, #1
 800bf5c:	441d      	add	r5, r3
 800bf5e:	f04f 0800 	mov.w	r8, #0
 800bf62:	ee18 1a10 	vmov	r1, s16
 800bf66:	2201      	movs	r2, #1
 800bf68:	4620      	mov	r0, r4
 800bf6a:	f000 fc75 	bl	800c858 <__lshift>
 800bf6e:	4631      	mov	r1, r6
 800bf70:	ee08 0a10 	vmov	s16, r0
 800bf74:	f000 fce0 	bl	800c938 <__mcmp>
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	dc91      	bgt.n	800bea0 <_dtoa_r+0xaa8>
 800bf7c:	d102      	bne.n	800bf84 <_dtoa_r+0xb8c>
 800bf7e:	f01a 0f01 	tst.w	sl, #1
 800bf82:	d18d      	bne.n	800bea0 <_dtoa_r+0xaa8>
 800bf84:	462b      	mov	r3, r5
 800bf86:	461d      	mov	r5, r3
 800bf88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf8c:	2a30      	cmp	r2, #48	; 0x30
 800bf8e:	d0fa      	beq.n	800bf86 <_dtoa_r+0xb8e>
 800bf90:	e6d7      	b.n	800bd42 <_dtoa_r+0x94a>
 800bf92:	9a01      	ldr	r2, [sp, #4]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d184      	bne.n	800bea2 <_dtoa_r+0xaaa>
 800bf98:	9b00      	ldr	r3, [sp, #0]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	9300      	str	r3, [sp, #0]
 800bf9e:	2331      	movs	r3, #49	; 0x31
 800bfa0:	7013      	strb	r3, [r2, #0]
 800bfa2:	e6ce      	b.n	800bd42 <_dtoa_r+0x94a>
 800bfa4:	4b09      	ldr	r3, [pc, #36]	; (800bfcc <_dtoa_r+0xbd4>)
 800bfa6:	f7ff ba95 	b.w	800b4d4 <_dtoa_r+0xdc>
 800bfaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	f47f aa6e 	bne.w	800b48e <_dtoa_r+0x96>
 800bfb2:	4b07      	ldr	r3, [pc, #28]	; (800bfd0 <_dtoa_r+0xbd8>)
 800bfb4:	f7ff ba8e 	b.w	800b4d4 <_dtoa_r+0xdc>
 800bfb8:	9b02      	ldr	r3, [sp, #8]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	dcae      	bgt.n	800bf1c <_dtoa_r+0xb24>
 800bfbe:	9b06      	ldr	r3, [sp, #24]
 800bfc0:	2b02      	cmp	r3, #2
 800bfc2:	f73f aea8 	bgt.w	800bd16 <_dtoa_r+0x91e>
 800bfc6:	e7a9      	b.n	800bf1c <_dtoa_r+0xb24>
 800bfc8:	0800ef94 	.word	0x0800ef94
 800bfcc:	0800edf0 	.word	0x0800edf0
 800bfd0:	0800ef15 	.word	0x0800ef15

0800bfd4 <__sflush_r>:
 800bfd4:	898a      	ldrh	r2, [r1, #12]
 800bfd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfda:	4605      	mov	r5, r0
 800bfdc:	0710      	lsls	r0, r2, #28
 800bfde:	460c      	mov	r4, r1
 800bfe0:	d458      	bmi.n	800c094 <__sflush_r+0xc0>
 800bfe2:	684b      	ldr	r3, [r1, #4]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	dc05      	bgt.n	800bff4 <__sflush_r+0x20>
 800bfe8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	dc02      	bgt.n	800bff4 <__sflush_r+0x20>
 800bfee:	2000      	movs	r0, #0
 800bff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bff6:	2e00      	cmp	r6, #0
 800bff8:	d0f9      	beq.n	800bfee <__sflush_r+0x1a>
 800bffa:	2300      	movs	r3, #0
 800bffc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c000:	682f      	ldr	r7, [r5, #0]
 800c002:	602b      	str	r3, [r5, #0]
 800c004:	d032      	beq.n	800c06c <__sflush_r+0x98>
 800c006:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c008:	89a3      	ldrh	r3, [r4, #12]
 800c00a:	075a      	lsls	r2, r3, #29
 800c00c:	d505      	bpl.n	800c01a <__sflush_r+0x46>
 800c00e:	6863      	ldr	r3, [r4, #4]
 800c010:	1ac0      	subs	r0, r0, r3
 800c012:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c014:	b10b      	cbz	r3, 800c01a <__sflush_r+0x46>
 800c016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c018:	1ac0      	subs	r0, r0, r3
 800c01a:	2300      	movs	r3, #0
 800c01c:	4602      	mov	r2, r0
 800c01e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c020:	6a21      	ldr	r1, [r4, #32]
 800c022:	4628      	mov	r0, r5
 800c024:	47b0      	blx	r6
 800c026:	1c43      	adds	r3, r0, #1
 800c028:	89a3      	ldrh	r3, [r4, #12]
 800c02a:	d106      	bne.n	800c03a <__sflush_r+0x66>
 800c02c:	6829      	ldr	r1, [r5, #0]
 800c02e:	291d      	cmp	r1, #29
 800c030:	d82c      	bhi.n	800c08c <__sflush_r+0xb8>
 800c032:	4a2a      	ldr	r2, [pc, #168]	; (800c0dc <__sflush_r+0x108>)
 800c034:	40ca      	lsrs	r2, r1
 800c036:	07d6      	lsls	r6, r2, #31
 800c038:	d528      	bpl.n	800c08c <__sflush_r+0xb8>
 800c03a:	2200      	movs	r2, #0
 800c03c:	6062      	str	r2, [r4, #4]
 800c03e:	04d9      	lsls	r1, r3, #19
 800c040:	6922      	ldr	r2, [r4, #16]
 800c042:	6022      	str	r2, [r4, #0]
 800c044:	d504      	bpl.n	800c050 <__sflush_r+0x7c>
 800c046:	1c42      	adds	r2, r0, #1
 800c048:	d101      	bne.n	800c04e <__sflush_r+0x7a>
 800c04a:	682b      	ldr	r3, [r5, #0]
 800c04c:	b903      	cbnz	r3, 800c050 <__sflush_r+0x7c>
 800c04e:	6560      	str	r0, [r4, #84]	; 0x54
 800c050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c052:	602f      	str	r7, [r5, #0]
 800c054:	2900      	cmp	r1, #0
 800c056:	d0ca      	beq.n	800bfee <__sflush_r+0x1a>
 800c058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c05c:	4299      	cmp	r1, r3
 800c05e:	d002      	beq.n	800c066 <__sflush_r+0x92>
 800c060:	4628      	mov	r0, r5
 800c062:	f7fe f8ef 	bl	800a244 <_free_r>
 800c066:	2000      	movs	r0, #0
 800c068:	6360      	str	r0, [r4, #52]	; 0x34
 800c06a:	e7c1      	b.n	800bff0 <__sflush_r+0x1c>
 800c06c:	6a21      	ldr	r1, [r4, #32]
 800c06e:	2301      	movs	r3, #1
 800c070:	4628      	mov	r0, r5
 800c072:	47b0      	blx	r6
 800c074:	1c41      	adds	r1, r0, #1
 800c076:	d1c7      	bne.n	800c008 <__sflush_r+0x34>
 800c078:	682b      	ldr	r3, [r5, #0]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d0c4      	beq.n	800c008 <__sflush_r+0x34>
 800c07e:	2b1d      	cmp	r3, #29
 800c080:	d001      	beq.n	800c086 <__sflush_r+0xb2>
 800c082:	2b16      	cmp	r3, #22
 800c084:	d101      	bne.n	800c08a <__sflush_r+0xb6>
 800c086:	602f      	str	r7, [r5, #0]
 800c088:	e7b1      	b.n	800bfee <__sflush_r+0x1a>
 800c08a:	89a3      	ldrh	r3, [r4, #12]
 800c08c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c090:	81a3      	strh	r3, [r4, #12]
 800c092:	e7ad      	b.n	800bff0 <__sflush_r+0x1c>
 800c094:	690f      	ldr	r7, [r1, #16]
 800c096:	2f00      	cmp	r7, #0
 800c098:	d0a9      	beq.n	800bfee <__sflush_r+0x1a>
 800c09a:	0793      	lsls	r3, r2, #30
 800c09c:	680e      	ldr	r6, [r1, #0]
 800c09e:	bf08      	it	eq
 800c0a0:	694b      	ldreq	r3, [r1, #20]
 800c0a2:	600f      	str	r7, [r1, #0]
 800c0a4:	bf18      	it	ne
 800c0a6:	2300      	movne	r3, #0
 800c0a8:	eba6 0807 	sub.w	r8, r6, r7
 800c0ac:	608b      	str	r3, [r1, #8]
 800c0ae:	f1b8 0f00 	cmp.w	r8, #0
 800c0b2:	dd9c      	ble.n	800bfee <__sflush_r+0x1a>
 800c0b4:	6a21      	ldr	r1, [r4, #32]
 800c0b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c0b8:	4643      	mov	r3, r8
 800c0ba:	463a      	mov	r2, r7
 800c0bc:	4628      	mov	r0, r5
 800c0be:	47b0      	blx	r6
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	dc06      	bgt.n	800c0d2 <__sflush_r+0xfe>
 800c0c4:	89a3      	ldrh	r3, [r4, #12]
 800c0c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0ca:	81a3      	strh	r3, [r4, #12]
 800c0cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0d0:	e78e      	b.n	800bff0 <__sflush_r+0x1c>
 800c0d2:	4407      	add	r7, r0
 800c0d4:	eba8 0800 	sub.w	r8, r8, r0
 800c0d8:	e7e9      	b.n	800c0ae <__sflush_r+0xda>
 800c0da:	bf00      	nop
 800c0dc:	20400001 	.word	0x20400001

0800c0e0 <_fflush_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	690b      	ldr	r3, [r1, #16]
 800c0e4:	4605      	mov	r5, r0
 800c0e6:	460c      	mov	r4, r1
 800c0e8:	b913      	cbnz	r3, 800c0f0 <_fflush_r+0x10>
 800c0ea:	2500      	movs	r5, #0
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	bd38      	pop	{r3, r4, r5, pc}
 800c0f0:	b118      	cbz	r0, 800c0fa <_fflush_r+0x1a>
 800c0f2:	6983      	ldr	r3, [r0, #24]
 800c0f4:	b90b      	cbnz	r3, 800c0fa <_fflush_r+0x1a>
 800c0f6:	f000 f887 	bl	800c208 <__sinit>
 800c0fa:	4b14      	ldr	r3, [pc, #80]	; (800c14c <_fflush_r+0x6c>)
 800c0fc:	429c      	cmp	r4, r3
 800c0fe:	d11b      	bne.n	800c138 <_fflush_r+0x58>
 800c100:	686c      	ldr	r4, [r5, #4]
 800c102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d0ef      	beq.n	800c0ea <_fflush_r+0xa>
 800c10a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c10c:	07d0      	lsls	r0, r2, #31
 800c10e:	d404      	bmi.n	800c11a <_fflush_r+0x3a>
 800c110:	0599      	lsls	r1, r3, #22
 800c112:	d402      	bmi.n	800c11a <_fflush_r+0x3a>
 800c114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c116:	f000 f91a 	bl	800c34e <__retarget_lock_acquire_recursive>
 800c11a:	4628      	mov	r0, r5
 800c11c:	4621      	mov	r1, r4
 800c11e:	f7ff ff59 	bl	800bfd4 <__sflush_r>
 800c122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c124:	07da      	lsls	r2, r3, #31
 800c126:	4605      	mov	r5, r0
 800c128:	d4e0      	bmi.n	800c0ec <_fflush_r+0xc>
 800c12a:	89a3      	ldrh	r3, [r4, #12]
 800c12c:	059b      	lsls	r3, r3, #22
 800c12e:	d4dd      	bmi.n	800c0ec <_fflush_r+0xc>
 800c130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c132:	f000 f90d 	bl	800c350 <__retarget_lock_release_recursive>
 800c136:	e7d9      	b.n	800c0ec <_fflush_r+0xc>
 800c138:	4b05      	ldr	r3, [pc, #20]	; (800c150 <_fflush_r+0x70>)
 800c13a:	429c      	cmp	r4, r3
 800c13c:	d101      	bne.n	800c142 <_fflush_r+0x62>
 800c13e:	68ac      	ldr	r4, [r5, #8]
 800c140:	e7df      	b.n	800c102 <_fflush_r+0x22>
 800c142:	4b04      	ldr	r3, [pc, #16]	; (800c154 <_fflush_r+0x74>)
 800c144:	429c      	cmp	r4, r3
 800c146:	bf08      	it	eq
 800c148:	68ec      	ldreq	r4, [r5, #12]
 800c14a:	e7da      	b.n	800c102 <_fflush_r+0x22>
 800c14c:	0800efc8 	.word	0x0800efc8
 800c150:	0800efe8 	.word	0x0800efe8
 800c154:	0800efa8 	.word	0x0800efa8

0800c158 <std>:
 800c158:	2300      	movs	r3, #0
 800c15a:	b510      	push	{r4, lr}
 800c15c:	4604      	mov	r4, r0
 800c15e:	e9c0 3300 	strd	r3, r3, [r0]
 800c162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c166:	6083      	str	r3, [r0, #8]
 800c168:	8181      	strh	r1, [r0, #12]
 800c16a:	6643      	str	r3, [r0, #100]	; 0x64
 800c16c:	81c2      	strh	r2, [r0, #14]
 800c16e:	6183      	str	r3, [r0, #24]
 800c170:	4619      	mov	r1, r3
 800c172:	2208      	movs	r2, #8
 800c174:	305c      	adds	r0, #92	; 0x5c
 800c176:	f7fe f85d 	bl	800a234 <memset>
 800c17a:	4b05      	ldr	r3, [pc, #20]	; (800c190 <std+0x38>)
 800c17c:	6263      	str	r3, [r4, #36]	; 0x24
 800c17e:	4b05      	ldr	r3, [pc, #20]	; (800c194 <std+0x3c>)
 800c180:	62a3      	str	r3, [r4, #40]	; 0x28
 800c182:	4b05      	ldr	r3, [pc, #20]	; (800c198 <std+0x40>)
 800c184:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c186:	4b05      	ldr	r3, [pc, #20]	; (800c19c <std+0x44>)
 800c188:	6224      	str	r4, [r4, #32]
 800c18a:	6323      	str	r3, [r4, #48]	; 0x30
 800c18c:	bd10      	pop	{r4, pc}
 800c18e:	bf00      	nop
 800c190:	0800d165 	.word	0x0800d165
 800c194:	0800d187 	.word	0x0800d187
 800c198:	0800d1bf 	.word	0x0800d1bf
 800c19c:	0800d1e3 	.word	0x0800d1e3

0800c1a0 <_cleanup_r>:
 800c1a0:	4901      	ldr	r1, [pc, #4]	; (800c1a8 <_cleanup_r+0x8>)
 800c1a2:	f000 b8af 	b.w	800c304 <_fwalk_reent>
 800c1a6:	bf00      	nop
 800c1a8:	0800c0e1 	.word	0x0800c0e1

0800c1ac <__sfmoreglue>:
 800c1ac:	b570      	push	{r4, r5, r6, lr}
 800c1ae:	2268      	movs	r2, #104	; 0x68
 800c1b0:	1e4d      	subs	r5, r1, #1
 800c1b2:	4355      	muls	r5, r2
 800c1b4:	460e      	mov	r6, r1
 800c1b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c1ba:	f7fe f8af 	bl	800a31c <_malloc_r>
 800c1be:	4604      	mov	r4, r0
 800c1c0:	b140      	cbz	r0, 800c1d4 <__sfmoreglue+0x28>
 800c1c2:	2100      	movs	r1, #0
 800c1c4:	e9c0 1600 	strd	r1, r6, [r0]
 800c1c8:	300c      	adds	r0, #12
 800c1ca:	60a0      	str	r0, [r4, #8]
 800c1cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c1d0:	f7fe f830 	bl	800a234 <memset>
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	bd70      	pop	{r4, r5, r6, pc}

0800c1d8 <__sfp_lock_acquire>:
 800c1d8:	4801      	ldr	r0, [pc, #4]	; (800c1e0 <__sfp_lock_acquire+0x8>)
 800c1da:	f000 b8b8 	b.w	800c34e <__retarget_lock_acquire_recursive>
 800c1de:	bf00      	nop
 800c1e0:	20000c3d 	.word	0x20000c3d

0800c1e4 <__sfp_lock_release>:
 800c1e4:	4801      	ldr	r0, [pc, #4]	; (800c1ec <__sfp_lock_release+0x8>)
 800c1e6:	f000 b8b3 	b.w	800c350 <__retarget_lock_release_recursive>
 800c1ea:	bf00      	nop
 800c1ec:	20000c3d 	.word	0x20000c3d

0800c1f0 <__sinit_lock_acquire>:
 800c1f0:	4801      	ldr	r0, [pc, #4]	; (800c1f8 <__sinit_lock_acquire+0x8>)
 800c1f2:	f000 b8ac 	b.w	800c34e <__retarget_lock_acquire_recursive>
 800c1f6:	bf00      	nop
 800c1f8:	20000c3e 	.word	0x20000c3e

0800c1fc <__sinit_lock_release>:
 800c1fc:	4801      	ldr	r0, [pc, #4]	; (800c204 <__sinit_lock_release+0x8>)
 800c1fe:	f000 b8a7 	b.w	800c350 <__retarget_lock_release_recursive>
 800c202:	bf00      	nop
 800c204:	20000c3e 	.word	0x20000c3e

0800c208 <__sinit>:
 800c208:	b510      	push	{r4, lr}
 800c20a:	4604      	mov	r4, r0
 800c20c:	f7ff fff0 	bl	800c1f0 <__sinit_lock_acquire>
 800c210:	69a3      	ldr	r3, [r4, #24]
 800c212:	b11b      	cbz	r3, 800c21c <__sinit+0x14>
 800c214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c218:	f7ff bff0 	b.w	800c1fc <__sinit_lock_release>
 800c21c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c220:	6523      	str	r3, [r4, #80]	; 0x50
 800c222:	4b13      	ldr	r3, [pc, #76]	; (800c270 <__sinit+0x68>)
 800c224:	4a13      	ldr	r2, [pc, #76]	; (800c274 <__sinit+0x6c>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	62a2      	str	r2, [r4, #40]	; 0x28
 800c22a:	42a3      	cmp	r3, r4
 800c22c:	bf04      	itt	eq
 800c22e:	2301      	moveq	r3, #1
 800c230:	61a3      	streq	r3, [r4, #24]
 800c232:	4620      	mov	r0, r4
 800c234:	f000 f820 	bl	800c278 <__sfp>
 800c238:	6060      	str	r0, [r4, #4]
 800c23a:	4620      	mov	r0, r4
 800c23c:	f000 f81c 	bl	800c278 <__sfp>
 800c240:	60a0      	str	r0, [r4, #8]
 800c242:	4620      	mov	r0, r4
 800c244:	f000 f818 	bl	800c278 <__sfp>
 800c248:	2200      	movs	r2, #0
 800c24a:	60e0      	str	r0, [r4, #12]
 800c24c:	2104      	movs	r1, #4
 800c24e:	6860      	ldr	r0, [r4, #4]
 800c250:	f7ff ff82 	bl	800c158 <std>
 800c254:	68a0      	ldr	r0, [r4, #8]
 800c256:	2201      	movs	r2, #1
 800c258:	2109      	movs	r1, #9
 800c25a:	f7ff ff7d 	bl	800c158 <std>
 800c25e:	68e0      	ldr	r0, [r4, #12]
 800c260:	2202      	movs	r2, #2
 800c262:	2112      	movs	r1, #18
 800c264:	f7ff ff78 	bl	800c158 <std>
 800c268:	2301      	movs	r3, #1
 800c26a:	61a3      	str	r3, [r4, #24]
 800c26c:	e7d2      	b.n	800c214 <__sinit+0xc>
 800c26e:	bf00      	nop
 800c270:	0800eddc 	.word	0x0800eddc
 800c274:	0800c1a1 	.word	0x0800c1a1

0800c278 <__sfp>:
 800c278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c27a:	4607      	mov	r7, r0
 800c27c:	f7ff ffac 	bl	800c1d8 <__sfp_lock_acquire>
 800c280:	4b1e      	ldr	r3, [pc, #120]	; (800c2fc <__sfp+0x84>)
 800c282:	681e      	ldr	r6, [r3, #0]
 800c284:	69b3      	ldr	r3, [r6, #24]
 800c286:	b913      	cbnz	r3, 800c28e <__sfp+0x16>
 800c288:	4630      	mov	r0, r6
 800c28a:	f7ff ffbd 	bl	800c208 <__sinit>
 800c28e:	3648      	adds	r6, #72	; 0x48
 800c290:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c294:	3b01      	subs	r3, #1
 800c296:	d503      	bpl.n	800c2a0 <__sfp+0x28>
 800c298:	6833      	ldr	r3, [r6, #0]
 800c29a:	b30b      	cbz	r3, 800c2e0 <__sfp+0x68>
 800c29c:	6836      	ldr	r6, [r6, #0]
 800c29e:	e7f7      	b.n	800c290 <__sfp+0x18>
 800c2a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c2a4:	b9d5      	cbnz	r5, 800c2dc <__sfp+0x64>
 800c2a6:	4b16      	ldr	r3, [pc, #88]	; (800c300 <__sfp+0x88>)
 800c2a8:	60e3      	str	r3, [r4, #12]
 800c2aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c2ae:	6665      	str	r5, [r4, #100]	; 0x64
 800c2b0:	f000 f84c 	bl	800c34c <__retarget_lock_init_recursive>
 800c2b4:	f7ff ff96 	bl	800c1e4 <__sfp_lock_release>
 800c2b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c2bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c2c0:	6025      	str	r5, [r4, #0]
 800c2c2:	61a5      	str	r5, [r4, #24]
 800c2c4:	2208      	movs	r2, #8
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c2cc:	f7fd ffb2 	bl	800a234 <memset>
 800c2d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c2d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c2d8:	4620      	mov	r0, r4
 800c2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2dc:	3468      	adds	r4, #104	; 0x68
 800c2de:	e7d9      	b.n	800c294 <__sfp+0x1c>
 800c2e0:	2104      	movs	r1, #4
 800c2e2:	4638      	mov	r0, r7
 800c2e4:	f7ff ff62 	bl	800c1ac <__sfmoreglue>
 800c2e8:	4604      	mov	r4, r0
 800c2ea:	6030      	str	r0, [r6, #0]
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	d1d5      	bne.n	800c29c <__sfp+0x24>
 800c2f0:	f7ff ff78 	bl	800c1e4 <__sfp_lock_release>
 800c2f4:	230c      	movs	r3, #12
 800c2f6:	603b      	str	r3, [r7, #0]
 800c2f8:	e7ee      	b.n	800c2d8 <__sfp+0x60>
 800c2fa:	bf00      	nop
 800c2fc:	0800eddc 	.word	0x0800eddc
 800c300:	ffff0001 	.word	0xffff0001

0800c304 <_fwalk_reent>:
 800c304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c308:	4606      	mov	r6, r0
 800c30a:	4688      	mov	r8, r1
 800c30c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c310:	2700      	movs	r7, #0
 800c312:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c316:	f1b9 0901 	subs.w	r9, r9, #1
 800c31a:	d505      	bpl.n	800c328 <_fwalk_reent+0x24>
 800c31c:	6824      	ldr	r4, [r4, #0]
 800c31e:	2c00      	cmp	r4, #0
 800c320:	d1f7      	bne.n	800c312 <_fwalk_reent+0xe>
 800c322:	4638      	mov	r0, r7
 800c324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c328:	89ab      	ldrh	r3, [r5, #12]
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d907      	bls.n	800c33e <_fwalk_reent+0x3a>
 800c32e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c332:	3301      	adds	r3, #1
 800c334:	d003      	beq.n	800c33e <_fwalk_reent+0x3a>
 800c336:	4629      	mov	r1, r5
 800c338:	4630      	mov	r0, r6
 800c33a:	47c0      	blx	r8
 800c33c:	4307      	orrs	r7, r0
 800c33e:	3568      	adds	r5, #104	; 0x68
 800c340:	e7e9      	b.n	800c316 <_fwalk_reent+0x12>
	...

0800c344 <_localeconv_r>:
 800c344:	4800      	ldr	r0, [pc, #0]	; (800c348 <_localeconv_r+0x4>)
 800c346:	4770      	bx	lr
 800c348:	20000b3c 	.word	0x20000b3c

0800c34c <__retarget_lock_init_recursive>:
 800c34c:	4770      	bx	lr

0800c34e <__retarget_lock_acquire_recursive>:
 800c34e:	4770      	bx	lr

0800c350 <__retarget_lock_release_recursive>:
 800c350:	4770      	bx	lr

0800c352 <__swhatbuf_r>:
 800c352:	b570      	push	{r4, r5, r6, lr}
 800c354:	460e      	mov	r6, r1
 800c356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c35a:	2900      	cmp	r1, #0
 800c35c:	b096      	sub	sp, #88	; 0x58
 800c35e:	4614      	mov	r4, r2
 800c360:	461d      	mov	r5, r3
 800c362:	da08      	bge.n	800c376 <__swhatbuf_r+0x24>
 800c364:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c368:	2200      	movs	r2, #0
 800c36a:	602a      	str	r2, [r5, #0]
 800c36c:	061a      	lsls	r2, r3, #24
 800c36e:	d410      	bmi.n	800c392 <__swhatbuf_r+0x40>
 800c370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c374:	e00e      	b.n	800c394 <__swhatbuf_r+0x42>
 800c376:	466a      	mov	r2, sp
 800c378:	f000 ff8a 	bl	800d290 <_fstat_r>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	dbf1      	blt.n	800c364 <__swhatbuf_r+0x12>
 800c380:	9a01      	ldr	r2, [sp, #4]
 800c382:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c386:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c38a:	425a      	negs	r2, r3
 800c38c:	415a      	adcs	r2, r3
 800c38e:	602a      	str	r2, [r5, #0]
 800c390:	e7ee      	b.n	800c370 <__swhatbuf_r+0x1e>
 800c392:	2340      	movs	r3, #64	; 0x40
 800c394:	2000      	movs	r0, #0
 800c396:	6023      	str	r3, [r4, #0]
 800c398:	b016      	add	sp, #88	; 0x58
 800c39a:	bd70      	pop	{r4, r5, r6, pc}

0800c39c <__smakebuf_r>:
 800c39c:	898b      	ldrh	r3, [r1, #12]
 800c39e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3a0:	079d      	lsls	r5, r3, #30
 800c3a2:	4606      	mov	r6, r0
 800c3a4:	460c      	mov	r4, r1
 800c3a6:	d507      	bpl.n	800c3b8 <__smakebuf_r+0x1c>
 800c3a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c3ac:	6023      	str	r3, [r4, #0]
 800c3ae:	6123      	str	r3, [r4, #16]
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	6163      	str	r3, [r4, #20]
 800c3b4:	b002      	add	sp, #8
 800c3b6:	bd70      	pop	{r4, r5, r6, pc}
 800c3b8:	ab01      	add	r3, sp, #4
 800c3ba:	466a      	mov	r2, sp
 800c3bc:	f7ff ffc9 	bl	800c352 <__swhatbuf_r>
 800c3c0:	9900      	ldr	r1, [sp, #0]
 800c3c2:	4605      	mov	r5, r0
 800c3c4:	4630      	mov	r0, r6
 800c3c6:	f7fd ffa9 	bl	800a31c <_malloc_r>
 800c3ca:	b948      	cbnz	r0, 800c3e0 <__smakebuf_r+0x44>
 800c3cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3d0:	059a      	lsls	r2, r3, #22
 800c3d2:	d4ef      	bmi.n	800c3b4 <__smakebuf_r+0x18>
 800c3d4:	f023 0303 	bic.w	r3, r3, #3
 800c3d8:	f043 0302 	orr.w	r3, r3, #2
 800c3dc:	81a3      	strh	r3, [r4, #12]
 800c3de:	e7e3      	b.n	800c3a8 <__smakebuf_r+0xc>
 800c3e0:	4b0d      	ldr	r3, [pc, #52]	; (800c418 <__smakebuf_r+0x7c>)
 800c3e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c3e4:	89a3      	ldrh	r3, [r4, #12]
 800c3e6:	6020      	str	r0, [r4, #0]
 800c3e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3ec:	81a3      	strh	r3, [r4, #12]
 800c3ee:	9b00      	ldr	r3, [sp, #0]
 800c3f0:	6163      	str	r3, [r4, #20]
 800c3f2:	9b01      	ldr	r3, [sp, #4]
 800c3f4:	6120      	str	r0, [r4, #16]
 800c3f6:	b15b      	cbz	r3, 800c410 <__smakebuf_r+0x74>
 800c3f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	f000 ff59 	bl	800d2b4 <_isatty_r>
 800c402:	b128      	cbz	r0, 800c410 <__smakebuf_r+0x74>
 800c404:	89a3      	ldrh	r3, [r4, #12]
 800c406:	f023 0303 	bic.w	r3, r3, #3
 800c40a:	f043 0301 	orr.w	r3, r3, #1
 800c40e:	81a3      	strh	r3, [r4, #12]
 800c410:	89a0      	ldrh	r0, [r4, #12]
 800c412:	4305      	orrs	r5, r0
 800c414:	81a5      	strh	r5, [r4, #12]
 800c416:	e7cd      	b.n	800c3b4 <__smakebuf_r+0x18>
 800c418:	0800c1a1 	.word	0x0800c1a1

0800c41c <__malloc_lock>:
 800c41c:	4801      	ldr	r0, [pc, #4]	; (800c424 <__malloc_lock+0x8>)
 800c41e:	f7ff bf96 	b.w	800c34e <__retarget_lock_acquire_recursive>
 800c422:	bf00      	nop
 800c424:	20000c3c 	.word	0x20000c3c

0800c428 <__malloc_unlock>:
 800c428:	4801      	ldr	r0, [pc, #4]	; (800c430 <__malloc_unlock+0x8>)
 800c42a:	f7ff bf91 	b.w	800c350 <__retarget_lock_release_recursive>
 800c42e:	bf00      	nop
 800c430:	20000c3c 	.word	0x20000c3c

0800c434 <_Balloc>:
 800c434:	b570      	push	{r4, r5, r6, lr}
 800c436:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c438:	4604      	mov	r4, r0
 800c43a:	460d      	mov	r5, r1
 800c43c:	b976      	cbnz	r6, 800c45c <_Balloc+0x28>
 800c43e:	2010      	movs	r0, #16
 800c440:	f7fd feda 	bl	800a1f8 <malloc>
 800c444:	4602      	mov	r2, r0
 800c446:	6260      	str	r0, [r4, #36]	; 0x24
 800c448:	b920      	cbnz	r0, 800c454 <_Balloc+0x20>
 800c44a:	4b18      	ldr	r3, [pc, #96]	; (800c4ac <_Balloc+0x78>)
 800c44c:	4818      	ldr	r0, [pc, #96]	; (800c4b0 <_Balloc+0x7c>)
 800c44e:	2166      	movs	r1, #102	; 0x66
 800c450:	f000 fede 	bl	800d210 <__assert_func>
 800c454:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c458:	6006      	str	r6, [r0, #0]
 800c45a:	60c6      	str	r6, [r0, #12]
 800c45c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c45e:	68f3      	ldr	r3, [r6, #12]
 800c460:	b183      	cbz	r3, 800c484 <_Balloc+0x50>
 800c462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c46a:	b9b8      	cbnz	r0, 800c49c <_Balloc+0x68>
 800c46c:	2101      	movs	r1, #1
 800c46e:	fa01 f605 	lsl.w	r6, r1, r5
 800c472:	1d72      	adds	r2, r6, #5
 800c474:	0092      	lsls	r2, r2, #2
 800c476:	4620      	mov	r0, r4
 800c478:	f000 fb60 	bl	800cb3c <_calloc_r>
 800c47c:	b160      	cbz	r0, 800c498 <_Balloc+0x64>
 800c47e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c482:	e00e      	b.n	800c4a2 <_Balloc+0x6e>
 800c484:	2221      	movs	r2, #33	; 0x21
 800c486:	2104      	movs	r1, #4
 800c488:	4620      	mov	r0, r4
 800c48a:	f000 fb57 	bl	800cb3c <_calloc_r>
 800c48e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c490:	60f0      	str	r0, [r6, #12]
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1e4      	bne.n	800c462 <_Balloc+0x2e>
 800c498:	2000      	movs	r0, #0
 800c49a:	bd70      	pop	{r4, r5, r6, pc}
 800c49c:	6802      	ldr	r2, [r0, #0]
 800c49e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4a8:	e7f7      	b.n	800c49a <_Balloc+0x66>
 800c4aa:	bf00      	nop
 800c4ac:	0800ef22 	.word	0x0800ef22
 800c4b0:	0800f008 	.word	0x0800f008

0800c4b4 <_Bfree>:
 800c4b4:	b570      	push	{r4, r5, r6, lr}
 800c4b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4b8:	4605      	mov	r5, r0
 800c4ba:	460c      	mov	r4, r1
 800c4bc:	b976      	cbnz	r6, 800c4dc <_Bfree+0x28>
 800c4be:	2010      	movs	r0, #16
 800c4c0:	f7fd fe9a 	bl	800a1f8 <malloc>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	6268      	str	r0, [r5, #36]	; 0x24
 800c4c8:	b920      	cbnz	r0, 800c4d4 <_Bfree+0x20>
 800c4ca:	4b09      	ldr	r3, [pc, #36]	; (800c4f0 <_Bfree+0x3c>)
 800c4cc:	4809      	ldr	r0, [pc, #36]	; (800c4f4 <_Bfree+0x40>)
 800c4ce:	218a      	movs	r1, #138	; 0x8a
 800c4d0:	f000 fe9e 	bl	800d210 <__assert_func>
 800c4d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4d8:	6006      	str	r6, [r0, #0]
 800c4da:	60c6      	str	r6, [r0, #12]
 800c4dc:	b13c      	cbz	r4, 800c4ee <_Bfree+0x3a>
 800c4de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c4e0:	6862      	ldr	r2, [r4, #4]
 800c4e2:	68db      	ldr	r3, [r3, #12]
 800c4e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c4e8:	6021      	str	r1, [r4, #0]
 800c4ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c4ee:	bd70      	pop	{r4, r5, r6, pc}
 800c4f0:	0800ef22 	.word	0x0800ef22
 800c4f4:	0800f008 	.word	0x0800f008

0800c4f8 <__multadd>:
 800c4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4fc:	690d      	ldr	r5, [r1, #16]
 800c4fe:	4607      	mov	r7, r0
 800c500:	460c      	mov	r4, r1
 800c502:	461e      	mov	r6, r3
 800c504:	f101 0c14 	add.w	ip, r1, #20
 800c508:	2000      	movs	r0, #0
 800c50a:	f8dc 3000 	ldr.w	r3, [ip]
 800c50e:	b299      	uxth	r1, r3
 800c510:	fb02 6101 	mla	r1, r2, r1, r6
 800c514:	0c1e      	lsrs	r6, r3, #16
 800c516:	0c0b      	lsrs	r3, r1, #16
 800c518:	fb02 3306 	mla	r3, r2, r6, r3
 800c51c:	b289      	uxth	r1, r1
 800c51e:	3001      	adds	r0, #1
 800c520:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c524:	4285      	cmp	r5, r0
 800c526:	f84c 1b04 	str.w	r1, [ip], #4
 800c52a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c52e:	dcec      	bgt.n	800c50a <__multadd+0x12>
 800c530:	b30e      	cbz	r6, 800c576 <__multadd+0x7e>
 800c532:	68a3      	ldr	r3, [r4, #8]
 800c534:	42ab      	cmp	r3, r5
 800c536:	dc19      	bgt.n	800c56c <__multadd+0x74>
 800c538:	6861      	ldr	r1, [r4, #4]
 800c53a:	4638      	mov	r0, r7
 800c53c:	3101      	adds	r1, #1
 800c53e:	f7ff ff79 	bl	800c434 <_Balloc>
 800c542:	4680      	mov	r8, r0
 800c544:	b928      	cbnz	r0, 800c552 <__multadd+0x5a>
 800c546:	4602      	mov	r2, r0
 800c548:	4b0c      	ldr	r3, [pc, #48]	; (800c57c <__multadd+0x84>)
 800c54a:	480d      	ldr	r0, [pc, #52]	; (800c580 <__multadd+0x88>)
 800c54c:	21b5      	movs	r1, #181	; 0xb5
 800c54e:	f000 fe5f 	bl	800d210 <__assert_func>
 800c552:	6922      	ldr	r2, [r4, #16]
 800c554:	3202      	adds	r2, #2
 800c556:	f104 010c 	add.w	r1, r4, #12
 800c55a:	0092      	lsls	r2, r2, #2
 800c55c:	300c      	adds	r0, #12
 800c55e:	f7fd fe5b 	bl	800a218 <memcpy>
 800c562:	4621      	mov	r1, r4
 800c564:	4638      	mov	r0, r7
 800c566:	f7ff ffa5 	bl	800c4b4 <_Bfree>
 800c56a:	4644      	mov	r4, r8
 800c56c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c570:	3501      	adds	r5, #1
 800c572:	615e      	str	r6, [r3, #20]
 800c574:	6125      	str	r5, [r4, #16]
 800c576:	4620      	mov	r0, r4
 800c578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c57c:	0800ef94 	.word	0x0800ef94
 800c580:	0800f008 	.word	0x0800f008

0800c584 <__hi0bits>:
 800c584:	0c03      	lsrs	r3, r0, #16
 800c586:	041b      	lsls	r3, r3, #16
 800c588:	b9d3      	cbnz	r3, 800c5c0 <__hi0bits+0x3c>
 800c58a:	0400      	lsls	r0, r0, #16
 800c58c:	2310      	movs	r3, #16
 800c58e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c592:	bf04      	itt	eq
 800c594:	0200      	lsleq	r0, r0, #8
 800c596:	3308      	addeq	r3, #8
 800c598:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c59c:	bf04      	itt	eq
 800c59e:	0100      	lsleq	r0, r0, #4
 800c5a0:	3304      	addeq	r3, #4
 800c5a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c5a6:	bf04      	itt	eq
 800c5a8:	0080      	lsleq	r0, r0, #2
 800c5aa:	3302      	addeq	r3, #2
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	db05      	blt.n	800c5bc <__hi0bits+0x38>
 800c5b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c5b4:	f103 0301 	add.w	r3, r3, #1
 800c5b8:	bf08      	it	eq
 800c5ba:	2320      	moveq	r3, #32
 800c5bc:	4618      	mov	r0, r3
 800c5be:	4770      	bx	lr
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	e7e4      	b.n	800c58e <__hi0bits+0xa>

0800c5c4 <__lo0bits>:
 800c5c4:	6803      	ldr	r3, [r0, #0]
 800c5c6:	f013 0207 	ands.w	r2, r3, #7
 800c5ca:	4601      	mov	r1, r0
 800c5cc:	d00b      	beq.n	800c5e6 <__lo0bits+0x22>
 800c5ce:	07da      	lsls	r2, r3, #31
 800c5d0:	d423      	bmi.n	800c61a <__lo0bits+0x56>
 800c5d2:	0798      	lsls	r0, r3, #30
 800c5d4:	bf49      	itett	mi
 800c5d6:	085b      	lsrmi	r3, r3, #1
 800c5d8:	089b      	lsrpl	r3, r3, #2
 800c5da:	2001      	movmi	r0, #1
 800c5dc:	600b      	strmi	r3, [r1, #0]
 800c5de:	bf5c      	itt	pl
 800c5e0:	600b      	strpl	r3, [r1, #0]
 800c5e2:	2002      	movpl	r0, #2
 800c5e4:	4770      	bx	lr
 800c5e6:	b298      	uxth	r0, r3
 800c5e8:	b9a8      	cbnz	r0, 800c616 <__lo0bits+0x52>
 800c5ea:	0c1b      	lsrs	r3, r3, #16
 800c5ec:	2010      	movs	r0, #16
 800c5ee:	b2da      	uxtb	r2, r3
 800c5f0:	b90a      	cbnz	r2, 800c5f6 <__lo0bits+0x32>
 800c5f2:	3008      	adds	r0, #8
 800c5f4:	0a1b      	lsrs	r3, r3, #8
 800c5f6:	071a      	lsls	r2, r3, #28
 800c5f8:	bf04      	itt	eq
 800c5fa:	091b      	lsreq	r3, r3, #4
 800c5fc:	3004      	addeq	r0, #4
 800c5fe:	079a      	lsls	r2, r3, #30
 800c600:	bf04      	itt	eq
 800c602:	089b      	lsreq	r3, r3, #2
 800c604:	3002      	addeq	r0, #2
 800c606:	07da      	lsls	r2, r3, #31
 800c608:	d403      	bmi.n	800c612 <__lo0bits+0x4e>
 800c60a:	085b      	lsrs	r3, r3, #1
 800c60c:	f100 0001 	add.w	r0, r0, #1
 800c610:	d005      	beq.n	800c61e <__lo0bits+0x5a>
 800c612:	600b      	str	r3, [r1, #0]
 800c614:	4770      	bx	lr
 800c616:	4610      	mov	r0, r2
 800c618:	e7e9      	b.n	800c5ee <__lo0bits+0x2a>
 800c61a:	2000      	movs	r0, #0
 800c61c:	4770      	bx	lr
 800c61e:	2020      	movs	r0, #32
 800c620:	4770      	bx	lr
	...

0800c624 <__i2b>:
 800c624:	b510      	push	{r4, lr}
 800c626:	460c      	mov	r4, r1
 800c628:	2101      	movs	r1, #1
 800c62a:	f7ff ff03 	bl	800c434 <_Balloc>
 800c62e:	4602      	mov	r2, r0
 800c630:	b928      	cbnz	r0, 800c63e <__i2b+0x1a>
 800c632:	4b05      	ldr	r3, [pc, #20]	; (800c648 <__i2b+0x24>)
 800c634:	4805      	ldr	r0, [pc, #20]	; (800c64c <__i2b+0x28>)
 800c636:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c63a:	f000 fde9 	bl	800d210 <__assert_func>
 800c63e:	2301      	movs	r3, #1
 800c640:	6144      	str	r4, [r0, #20]
 800c642:	6103      	str	r3, [r0, #16]
 800c644:	bd10      	pop	{r4, pc}
 800c646:	bf00      	nop
 800c648:	0800ef94 	.word	0x0800ef94
 800c64c:	0800f008 	.word	0x0800f008

0800c650 <__multiply>:
 800c650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c654:	4691      	mov	r9, r2
 800c656:	690a      	ldr	r2, [r1, #16]
 800c658:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	bfb8      	it	lt
 800c660:	460b      	movlt	r3, r1
 800c662:	460c      	mov	r4, r1
 800c664:	bfbc      	itt	lt
 800c666:	464c      	movlt	r4, r9
 800c668:	4699      	movlt	r9, r3
 800c66a:	6927      	ldr	r7, [r4, #16]
 800c66c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c670:	68a3      	ldr	r3, [r4, #8]
 800c672:	6861      	ldr	r1, [r4, #4]
 800c674:	eb07 060a 	add.w	r6, r7, sl
 800c678:	42b3      	cmp	r3, r6
 800c67a:	b085      	sub	sp, #20
 800c67c:	bfb8      	it	lt
 800c67e:	3101      	addlt	r1, #1
 800c680:	f7ff fed8 	bl	800c434 <_Balloc>
 800c684:	b930      	cbnz	r0, 800c694 <__multiply+0x44>
 800c686:	4602      	mov	r2, r0
 800c688:	4b44      	ldr	r3, [pc, #272]	; (800c79c <__multiply+0x14c>)
 800c68a:	4845      	ldr	r0, [pc, #276]	; (800c7a0 <__multiply+0x150>)
 800c68c:	f240 115d 	movw	r1, #349	; 0x15d
 800c690:	f000 fdbe 	bl	800d210 <__assert_func>
 800c694:	f100 0514 	add.w	r5, r0, #20
 800c698:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c69c:	462b      	mov	r3, r5
 800c69e:	2200      	movs	r2, #0
 800c6a0:	4543      	cmp	r3, r8
 800c6a2:	d321      	bcc.n	800c6e8 <__multiply+0x98>
 800c6a4:	f104 0314 	add.w	r3, r4, #20
 800c6a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c6ac:	f109 0314 	add.w	r3, r9, #20
 800c6b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c6b4:	9202      	str	r2, [sp, #8]
 800c6b6:	1b3a      	subs	r2, r7, r4
 800c6b8:	3a15      	subs	r2, #21
 800c6ba:	f022 0203 	bic.w	r2, r2, #3
 800c6be:	3204      	adds	r2, #4
 800c6c0:	f104 0115 	add.w	r1, r4, #21
 800c6c4:	428f      	cmp	r7, r1
 800c6c6:	bf38      	it	cc
 800c6c8:	2204      	movcc	r2, #4
 800c6ca:	9201      	str	r2, [sp, #4]
 800c6cc:	9a02      	ldr	r2, [sp, #8]
 800c6ce:	9303      	str	r3, [sp, #12]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d80c      	bhi.n	800c6ee <__multiply+0x9e>
 800c6d4:	2e00      	cmp	r6, #0
 800c6d6:	dd03      	ble.n	800c6e0 <__multiply+0x90>
 800c6d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d05a      	beq.n	800c796 <__multiply+0x146>
 800c6e0:	6106      	str	r6, [r0, #16]
 800c6e2:	b005      	add	sp, #20
 800c6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e8:	f843 2b04 	str.w	r2, [r3], #4
 800c6ec:	e7d8      	b.n	800c6a0 <__multiply+0x50>
 800c6ee:	f8b3 a000 	ldrh.w	sl, [r3]
 800c6f2:	f1ba 0f00 	cmp.w	sl, #0
 800c6f6:	d024      	beq.n	800c742 <__multiply+0xf2>
 800c6f8:	f104 0e14 	add.w	lr, r4, #20
 800c6fc:	46a9      	mov	r9, r5
 800c6fe:	f04f 0c00 	mov.w	ip, #0
 800c702:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c706:	f8d9 1000 	ldr.w	r1, [r9]
 800c70a:	fa1f fb82 	uxth.w	fp, r2
 800c70e:	b289      	uxth	r1, r1
 800c710:	fb0a 110b 	mla	r1, sl, fp, r1
 800c714:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c718:	f8d9 2000 	ldr.w	r2, [r9]
 800c71c:	4461      	add	r1, ip
 800c71e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c722:	fb0a c20b 	mla	r2, sl, fp, ip
 800c726:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c72a:	b289      	uxth	r1, r1
 800c72c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c730:	4577      	cmp	r7, lr
 800c732:	f849 1b04 	str.w	r1, [r9], #4
 800c736:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c73a:	d8e2      	bhi.n	800c702 <__multiply+0xb2>
 800c73c:	9a01      	ldr	r2, [sp, #4]
 800c73e:	f845 c002 	str.w	ip, [r5, r2]
 800c742:	9a03      	ldr	r2, [sp, #12]
 800c744:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c748:	3304      	adds	r3, #4
 800c74a:	f1b9 0f00 	cmp.w	r9, #0
 800c74e:	d020      	beq.n	800c792 <__multiply+0x142>
 800c750:	6829      	ldr	r1, [r5, #0]
 800c752:	f104 0c14 	add.w	ip, r4, #20
 800c756:	46ae      	mov	lr, r5
 800c758:	f04f 0a00 	mov.w	sl, #0
 800c75c:	f8bc b000 	ldrh.w	fp, [ip]
 800c760:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c764:	fb09 220b 	mla	r2, r9, fp, r2
 800c768:	4492      	add	sl, r2
 800c76a:	b289      	uxth	r1, r1
 800c76c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c770:	f84e 1b04 	str.w	r1, [lr], #4
 800c774:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c778:	f8be 1000 	ldrh.w	r1, [lr]
 800c77c:	0c12      	lsrs	r2, r2, #16
 800c77e:	fb09 1102 	mla	r1, r9, r2, r1
 800c782:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c786:	4567      	cmp	r7, ip
 800c788:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c78c:	d8e6      	bhi.n	800c75c <__multiply+0x10c>
 800c78e:	9a01      	ldr	r2, [sp, #4]
 800c790:	50a9      	str	r1, [r5, r2]
 800c792:	3504      	adds	r5, #4
 800c794:	e79a      	b.n	800c6cc <__multiply+0x7c>
 800c796:	3e01      	subs	r6, #1
 800c798:	e79c      	b.n	800c6d4 <__multiply+0x84>
 800c79a:	bf00      	nop
 800c79c:	0800ef94 	.word	0x0800ef94
 800c7a0:	0800f008 	.word	0x0800f008

0800c7a4 <__pow5mult>:
 800c7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7a8:	4615      	mov	r5, r2
 800c7aa:	f012 0203 	ands.w	r2, r2, #3
 800c7ae:	4606      	mov	r6, r0
 800c7b0:	460f      	mov	r7, r1
 800c7b2:	d007      	beq.n	800c7c4 <__pow5mult+0x20>
 800c7b4:	4c25      	ldr	r4, [pc, #148]	; (800c84c <__pow5mult+0xa8>)
 800c7b6:	3a01      	subs	r2, #1
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7be:	f7ff fe9b 	bl	800c4f8 <__multadd>
 800c7c2:	4607      	mov	r7, r0
 800c7c4:	10ad      	asrs	r5, r5, #2
 800c7c6:	d03d      	beq.n	800c844 <__pow5mult+0xa0>
 800c7c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c7ca:	b97c      	cbnz	r4, 800c7ec <__pow5mult+0x48>
 800c7cc:	2010      	movs	r0, #16
 800c7ce:	f7fd fd13 	bl	800a1f8 <malloc>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	6270      	str	r0, [r6, #36]	; 0x24
 800c7d6:	b928      	cbnz	r0, 800c7e4 <__pow5mult+0x40>
 800c7d8:	4b1d      	ldr	r3, [pc, #116]	; (800c850 <__pow5mult+0xac>)
 800c7da:	481e      	ldr	r0, [pc, #120]	; (800c854 <__pow5mult+0xb0>)
 800c7dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c7e0:	f000 fd16 	bl	800d210 <__assert_func>
 800c7e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7e8:	6004      	str	r4, [r0, #0]
 800c7ea:	60c4      	str	r4, [r0, #12]
 800c7ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c7f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c7f4:	b94c      	cbnz	r4, 800c80a <__pow5mult+0x66>
 800c7f6:	f240 2171 	movw	r1, #625	; 0x271
 800c7fa:	4630      	mov	r0, r6
 800c7fc:	f7ff ff12 	bl	800c624 <__i2b>
 800c800:	2300      	movs	r3, #0
 800c802:	f8c8 0008 	str.w	r0, [r8, #8]
 800c806:	4604      	mov	r4, r0
 800c808:	6003      	str	r3, [r0, #0]
 800c80a:	f04f 0900 	mov.w	r9, #0
 800c80e:	07eb      	lsls	r3, r5, #31
 800c810:	d50a      	bpl.n	800c828 <__pow5mult+0x84>
 800c812:	4639      	mov	r1, r7
 800c814:	4622      	mov	r2, r4
 800c816:	4630      	mov	r0, r6
 800c818:	f7ff ff1a 	bl	800c650 <__multiply>
 800c81c:	4639      	mov	r1, r7
 800c81e:	4680      	mov	r8, r0
 800c820:	4630      	mov	r0, r6
 800c822:	f7ff fe47 	bl	800c4b4 <_Bfree>
 800c826:	4647      	mov	r7, r8
 800c828:	106d      	asrs	r5, r5, #1
 800c82a:	d00b      	beq.n	800c844 <__pow5mult+0xa0>
 800c82c:	6820      	ldr	r0, [r4, #0]
 800c82e:	b938      	cbnz	r0, 800c840 <__pow5mult+0x9c>
 800c830:	4622      	mov	r2, r4
 800c832:	4621      	mov	r1, r4
 800c834:	4630      	mov	r0, r6
 800c836:	f7ff ff0b 	bl	800c650 <__multiply>
 800c83a:	6020      	str	r0, [r4, #0]
 800c83c:	f8c0 9000 	str.w	r9, [r0]
 800c840:	4604      	mov	r4, r0
 800c842:	e7e4      	b.n	800c80e <__pow5mult+0x6a>
 800c844:	4638      	mov	r0, r7
 800c846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c84a:	bf00      	nop
 800c84c:	0800f158 	.word	0x0800f158
 800c850:	0800ef22 	.word	0x0800ef22
 800c854:	0800f008 	.word	0x0800f008

0800c858 <__lshift>:
 800c858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c85c:	460c      	mov	r4, r1
 800c85e:	6849      	ldr	r1, [r1, #4]
 800c860:	6923      	ldr	r3, [r4, #16]
 800c862:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c866:	68a3      	ldr	r3, [r4, #8]
 800c868:	4607      	mov	r7, r0
 800c86a:	4691      	mov	r9, r2
 800c86c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c870:	f108 0601 	add.w	r6, r8, #1
 800c874:	42b3      	cmp	r3, r6
 800c876:	db0b      	blt.n	800c890 <__lshift+0x38>
 800c878:	4638      	mov	r0, r7
 800c87a:	f7ff fddb 	bl	800c434 <_Balloc>
 800c87e:	4605      	mov	r5, r0
 800c880:	b948      	cbnz	r0, 800c896 <__lshift+0x3e>
 800c882:	4602      	mov	r2, r0
 800c884:	4b2a      	ldr	r3, [pc, #168]	; (800c930 <__lshift+0xd8>)
 800c886:	482b      	ldr	r0, [pc, #172]	; (800c934 <__lshift+0xdc>)
 800c888:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c88c:	f000 fcc0 	bl	800d210 <__assert_func>
 800c890:	3101      	adds	r1, #1
 800c892:	005b      	lsls	r3, r3, #1
 800c894:	e7ee      	b.n	800c874 <__lshift+0x1c>
 800c896:	2300      	movs	r3, #0
 800c898:	f100 0114 	add.w	r1, r0, #20
 800c89c:	f100 0210 	add.w	r2, r0, #16
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	4553      	cmp	r3, sl
 800c8a4:	db37      	blt.n	800c916 <__lshift+0xbe>
 800c8a6:	6920      	ldr	r0, [r4, #16]
 800c8a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c8ac:	f104 0314 	add.w	r3, r4, #20
 800c8b0:	f019 091f 	ands.w	r9, r9, #31
 800c8b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c8b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c8bc:	d02f      	beq.n	800c91e <__lshift+0xc6>
 800c8be:	f1c9 0e20 	rsb	lr, r9, #32
 800c8c2:	468a      	mov	sl, r1
 800c8c4:	f04f 0c00 	mov.w	ip, #0
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	fa02 f209 	lsl.w	r2, r2, r9
 800c8ce:	ea42 020c 	orr.w	r2, r2, ip
 800c8d2:	f84a 2b04 	str.w	r2, [sl], #4
 800c8d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8da:	4298      	cmp	r0, r3
 800c8dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c8e0:	d8f2      	bhi.n	800c8c8 <__lshift+0x70>
 800c8e2:	1b03      	subs	r3, r0, r4
 800c8e4:	3b15      	subs	r3, #21
 800c8e6:	f023 0303 	bic.w	r3, r3, #3
 800c8ea:	3304      	adds	r3, #4
 800c8ec:	f104 0215 	add.w	r2, r4, #21
 800c8f0:	4290      	cmp	r0, r2
 800c8f2:	bf38      	it	cc
 800c8f4:	2304      	movcc	r3, #4
 800c8f6:	f841 c003 	str.w	ip, [r1, r3]
 800c8fa:	f1bc 0f00 	cmp.w	ip, #0
 800c8fe:	d001      	beq.n	800c904 <__lshift+0xac>
 800c900:	f108 0602 	add.w	r6, r8, #2
 800c904:	3e01      	subs	r6, #1
 800c906:	4638      	mov	r0, r7
 800c908:	612e      	str	r6, [r5, #16]
 800c90a:	4621      	mov	r1, r4
 800c90c:	f7ff fdd2 	bl	800c4b4 <_Bfree>
 800c910:	4628      	mov	r0, r5
 800c912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c916:	f842 0f04 	str.w	r0, [r2, #4]!
 800c91a:	3301      	adds	r3, #1
 800c91c:	e7c1      	b.n	800c8a2 <__lshift+0x4a>
 800c91e:	3904      	subs	r1, #4
 800c920:	f853 2b04 	ldr.w	r2, [r3], #4
 800c924:	f841 2f04 	str.w	r2, [r1, #4]!
 800c928:	4298      	cmp	r0, r3
 800c92a:	d8f9      	bhi.n	800c920 <__lshift+0xc8>
 800c92c:	e7ea      	b.n	800c904 <__lshift+0xac>
 800c92e:	bf00      	nop
 800c930:	0800ef94 	.word	0x0800ef94
 800c934:	0800f008 	.word	0x0800f008

0800c938 <__mcmp>:
 800c938:	b530      	push	{r4, r5, lr}
 800c93a:	6902      	ldr	r2, [r0, #16]
 800c93c:	690c      	ldr	r4, [r1, #16]
 800c93e:	1b12      	subs	r2, r2, r4
 800c940:	d10e      	bne.n	800c960 <__mcmp+0x28>
 800c942:	f100 0314 	add.w	r3, r0, #20
 800c946:	3114      	adds	r1, #20
 800c948:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c94c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c950:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c954:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c958:	42a5      	cmp	r5, r4
 800c95a:	d003      	beq.n	800c964 <__mcmp+0x2c>
 800c95c:	d305      	bcc.n	800c96a <__mcmp+0x32>
 800c95e:	2201      	movs	r2, #1
 800c960:	4610      	mov	r0, r2
 800c962:	bd30      	pop	{r4, r5, pc}
 800c964:	4283      	cmp	r3, r0
 800c966:	d3f3      	bcc.n	800c950 <__mcmp+0x18>
 800c968:	e7fa      	b.n	800c960 <__mcmp+0x28>
 800c96a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c96e:	e7f7      	b.n	800c960 <__mcmp+0x28>

0800c970 <__mdiff>:
 800c970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c974:	460c      	mov	r4, r1
 800c976:	4606      	mov	r6, r0
 800c978:	4611      	mov	r1, r2
 800c97a:	4620      	mov	r0, r4
 800c97c:	4690      	mov	r8, r2
 800c97e:	f7ff ffdb 	bl	800c938 <__mcmp>
 800c982:	1e05      	subs	r5, r0, #0
 800c984:	d110      	bne.n	800c9a8 <__mdiff+0x38>
 800c986:	4629      	mov	r1, r5
 800c988:	4630      	mov	r0, r6
 800c98a:	f7ff fd53 	bl	800c434 <_Balloc>
 800c98e:	b930      	cbnz	r0, 800c99e <__mdiff+0x2e>
 800c990:	4b3a      	ldr	r3, [pc, #232]	; (800ca7c <__mdiff+0x10c>)
 800c992:	4602      	mov	r2, r0
 800c994:	f240 2132 	movw	r1, #562	; 0x232
 800c998:	4839      	ldr	r0, [pc, #228]	; (800ca80 <__mdiff+0x110>)
 800c99a:	f000 fc39 	bl	800d210 <__assert_func>
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c9a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9a8:	bfa4      	itt	ge
 800c9aa:	4643      	movge	r3, r8
 800c9ac:	46a0      	movge	r8, r4
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c9b4:	bfa6      	itte	ge
 800c9b6:	461c      	movge	r4, r3
 800c9b8:	2500      	movge	r5, #0
 800c9ba:	2501      	movlt	r5, #1
 800c9bc:	f7ff fd3a 	bl	800c434 <_Balloc>
 800c9c0:	b920      	cbnz	r0, 800c9cc <__mdiff+0x5c>
 800c9c2:	4b2e      	ldr	r3, [pc, #184]	; (800ca7c <__mdiff+0x10c>)
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c9ca:	e7e5      	b.n	800c998 <__mdiff+0x28>
 800c9cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c9d0:	6926      	ldr	r6, [r4, #16]
 800c9d2:	60c5      	str	r5, [r0, #12]
 800c9d4:	f104 0914 	add.w	r9, r4, #20
 800c9d8:	f108 0514 	add.w	r5, r8, #20
 800c9dc:	f100 0e14 	add.w	lr, r0, #20
 800c9e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c9e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c9e8:	f108 0210 	add.w	r2, r8, #16
 800c9ec:	46f2      	mov	sl, lr
 800c9ee:	2100      	movs	r1, #0
 800c9f0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c9f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c9f8:	fa1f f883 	uxth.w	r8, r3
 800c9fc:	fa11 f18b 	uxtah	r1, r1, fp
 800ca00:	0c1b      	lsrs	r3, r3, #16
 800ca02:	eba1 0808 	sub.w	r8, r1, r8
 800ca06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca0a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ca0e:	fa1f f888 	uxth.w	r8, r8
 800ca12:	1419      	asrs	r1, r3, #16
 800ca14:	454e      	cmp	r6, r9
 800ca16:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ca1a:	f84a 3b04 	str.w	r3, [sl], #4
 800ca1e:	d8e7      	bhi.n	800c9f0 <__mdiff+0x80>
 800ca20:	1b33      	subs	r3, r6, r4
 800ca22:	3b15      	subs	r3, #21
 800ca24:	f023 0303 	bic.w	r3, r3, #3
 800ca28:	3304      	adds	r3, #4
 800ca2a:	3415      	adds	r4, #21
 800ca2c:	42a6      	cmp	r6, r4
 800ca2e:	bf38      	it	cc
 800ca30:	2304      	movcc	r3, #4
 800ca32:	441d      	add	r5, r3
 800ca34:	4473      	add	r3, lr
 800ca36:	469e      	mov	lr, r3
 800ca38:	462e      	mov	r6, r5
 800ca3a:	4566      	cmp	r6, ip
 800ca3c:	d30e      	bcc.n	800ca5c <__mdiff+0xec>
 800ca3e:	f10c 0203 	add.w	r2, ip, #3
 800ca42:	1b52      	subs	r2, r2, r5
 800ca44:	f022 0203 	bic.w	r2, r2, #3
 800ca48:	3d03      	subs	r5, #3
 800ca4a:	45ac      	cmp	ip, r5
 800ca4c:	bf38      	it	cc
 800ca4e:	2200      	movcc	r2, #0
 800ca50:	441a      	add	r2, r3
 800ca52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ca56:	b17b      	cbz	r3, 800ca78 <__mdiff+0x108>
 800ca58:	6107      	str	r7, [r0, #16]
 800ca5a:	e7a3      	b.n	800c9a4 <__mdiff+0x34>
 800ca5c:	f856 8b04 	ldr.w	r8, [r6], #4
 800ca60:	fa11 f288 	uxtah	r2, r1, r8
 800ca64:	1414      	asrs	r4, r2, #16
 800ca66:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ca6a:	b292      	uxth	r2, r2
 800ca6c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ca70:	f84e 2b04 	str.w	r2, [lr], #4
 800ca74:	1421      	asrs	r1, r4, #16
 800ca76:	e7e0      	b.n	800ca3a <__mdiff+0xca>
 800ca78:	3f01      	subs	r7, #1
 800ca7a:	e7ea      	b.n	800ca52 <__mdiff+0xe2>
 800ca7c:	0800ef94 	.word	0x0800ef94
 800ca80:	0800f008 	.word	0x0800f008

0800ca84 <__d2b>:
 800ca84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca88:	4689      	mov	r9, r1
 800ca8a:	2101      	movs	r1, #1
 800ca8c:	ec57 6b10 	vmov	r6, r7, d0
 800ca90:	4690      	mov	r8, r2
 800ca92:	f7ff fccf 	bl	800c434 <_Balloc>
 800ca96:	4604      	mov	r4, r0
 800ca98:	b930      	cbnz	r0, 800caa8 <__d2b+0x24>
 800ca9a:	4602      	mov	r2, r0
 800ca9c:	4b25      	ldr	r3, [pc, #148]	; (800cb34 <__d2b+0xb0>)
 800ca9e:	4826      	ldr	r0, [pc, #152]	; (800cb38 <__d2b+0xb4>)
 800caa0:	f240 310a 	movw	r1, #778	; 0x30a
 800caa4:	f000 fbb4 	bl	800d210 <__assert_func>
 800caa8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800caac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cab0:	bb35      	cbnz	r5, 800cb00 <__d2b+0x7c>
 800cab2:	2e00      	cmp	r6, #0
 800cab4:	9301      	str	r3, [sp, #4]
 800cab6:	d028      	beq.n	800cb0a <__d2b+0x86>
 800cab8:	4668      	mov	r0, sp
 800caba:	9600      	str	r6, [sp, #0]
 800cabc:	f7ff fd82 	bl	800c5c4 <__lo0bits>
 800cac0:	9900      	ldr	r1, [sp, #0]
 800cac2:	b300      	cbz	r0, 800cb06 <__d2b+0x82>
 800cac4:	9a01      	ldr	r2, [sp, #4]
 800cac6:	f1c0 0320 	rsb	r3, r0, #32
 800caca:	fa02 f303 	lsl.w	r3, r2, r3
 800cace:	430b      	orrs	r3, r1
 800cad0:	40c2      	lsrs	r2, r0
 800cad2:	6163      	str	r3, [r4, #20]
 800cad4:	9201      	str	r2, [sp, #4]
 800cad6:	9b01      	ldr	r3, [sp, #4]
 800cad8:	61a3      	str	r3, [r4, #24]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	bf14      	ite	ne
 800cade:	2202      	movne	r2, #2
 800cae0:	2201      	moveq	r2, #1
 800cae2:	6122      	str	r2, [r4, #16]
 800cae4:	b1d5      	cbz	r5, 800cb1c <__d2b+0x98>
 800cae6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800caea:	4405      	add	r5, r0
 800caec:	f8c9 5000 	str.w	r5, [r9]
 800caf0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800caf4:	f8c8 0000 	str.w	r0, [r8]
 800caf8:	4620      	mov	r0, r4
 800cafa:	b003      	add	sp, #12
 800cafc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb04:	e7d5      	b.n	800cab2 <__d2b+0x2e>
 800cb06:	6161      	str	r1, [r4, #20]
 800cb08:	e7e5      	b.n	800cad6 <__d2b+0x52>
 800cb0a:	a801      	add	r0, sp, #4
 800cb0c:	f7ff fd5a 	bl	800c5c4 <__lo0bits>
 800cb10:	9b01      	ldr	r3, [sp, #4]
 800cb12:	6163      	str	r3, [r4, #20]
 800cb14:	2201      	movs	r2, #1
 800cb16:	6122      	str	r2, [r4, #16]
 800cb18:	3020      	adds	r0, #32
 800cb1a:	e7e3      	b.n	800cae4 <__d2b+0x60>
 800cb1c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb24:	f8c9 0000 	str.w	r0, [r9]
 800cb28:	6918      	ldr	r0, [r3, #16]
 800cb2a:	f7ff fd2b 	bl	800c584 <__hi0bits>
 800cb2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb32:	e7df      	b.n	800caf4 <__d2b+0x70>
 800cb34:	0800ef94 	.word	0x0800ef94
 800cb38:	0800f008 	.word	0x0800f008

0800cb3c <_calloc_r>:
 800cb3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb3e:	fba1 2402 	umull	r2, r4, r1, r2
 800cb42:	b94c      	cbnz	r4, 800cb58 <_calloc_r+0x1c>
 800cb44:	4611      	mov	r1, r2
 800cb46:	9201      	str	r2, [sp, #4]
 800cb48:	f7fd fbe8 	bl	800a31c <_malloc_r>
 800cb4c:	9a01      	ldr	r2, [sp, #4]
 800cb4e:	4605      	mov	r5, r0
 800cb50:	b930      	cbnz	r0, 800cb60 <_calloc_r+0x24>
 800cb52:	4628      	mov	r0, r5
 800cb54:	b003      	add	sp, #12
 800cb56:	bd30      	pop	{r4, r5, pc}
 800cb58:	220c      	movs	r2, #12
 800cb5a:	6002      	str	r2, [r0, #0]
 800cb5c:	2500      	movs	r5, #0
 800cb5e:	e7f8      	b.n	800cb52 <_calloc_r+0x16>
 800cb60:	4621      	mov	r1, r4
 800cb62:	f7fd fb67 	bl	800a234 <memset>
 800cb66:	e7f4      	b.n	800cb52 <_calloc_r+0x16>

0800cb68 <__ssputs_r>:
 800cb68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb6c:	688e      	ldr	r6, [r1, #8]
 800cb6e:	429e      	cmp	r6, r3
 800cb70:	4682      	mov	sl, r0
 800cb72:	460c      	mov	r4, r1
 800cb74:	4690      	mov	r8, r2
 800cb76:	461f      	mov	r7, r3
 800cb78:	d838      	bhi.n	800cbec <__ssputs_r+0x84>
 800cb7a:	898a      	ldrh	r2, [r1, #12]
 800cb7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb80:	d032      	beq.n	800cbe8 <__ssputs_r+0x80>
 800cb82:	6825      	ldr	r5, [r4, #0]
 800cb84:	6909      	ldr	r1, [r1, #16]
 800cb86:	eba5 0901 	sub.w	r9, r5, r1
 800cb8a:	6965      	ldr	r5, [r4, #20]
 800cb8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb94:	3301      	adds	r3, #1
 800cb96:	444b      	add	r3, r9
 800cb98:	106d      	asrs	r5, r5, #1
 800cb9a:	429d      	cmp	r5, r3
 800cb9c:	bf38      	it	cc
 800cb9e:	461d      	movcc	r5, r3
 800cba0:	0553      	lsls	r3, r2, #21
 800cba2:	d531      	bpl.n	800cc08 <__ssputs_r+0xa0>
 800cba4:	4629      	mov	r1, r5
 800cba6:	f7fd fbb9 	bl	800a31c <_malloc_r>
 800cbaa:	4606      	mov	r6, r0
 800cbac:	b950      	cbnz	r0, 800cbc4 <__ssputs_r+0x5c>
 800cbae:	230c      	movs	r3, #12
 800cbb0:	f8ca 3000 	str.w	r3, [sl]
 800cbb4:	89a3      	ldrh	r3, [r4, #12]
 800cbb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbba:	81a3      	strh	r3, [r4, #12]
 800cbbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbc4:	6921      	ldr	r1, [r4, #16]
 800cbc6:	464a      	mov	r2, r9
 800cbc8:	f7fd fb26 	bl	800a218 <memcpy>
 800cbcc:	89a3      	ldrh	r3, [r4, #12]
 800cbce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cbd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbd6:	81a3      	strh	r3, [r4, #12]
 800cbd8:	6126      	str	r6, [r4, #16]
 800cbda:	6165      	str	r5, [r4, #20]
 800cbdc:	444e      	add	r6, r9
 800cbde:	eba5 0509 	sub.w	r5, r5, r9
 800cbe2:	6026      	str	r6, [r4, #0]
 800cbe4:	60a5      	str	r5, [r4, #8]
 800cbe6:	463e      	mov	r6, r7
 800cbe8:	42be      	cmp	r6, r7
 800cbea:	d900      	bls.n	800cbee <__ssputs_r+0x86>
 800cbec:	463e      	mov	r6, r7
 800cbee:	6820      	ldr	r0, [r4, #0]
 800cbf0:	4632      	mov	r2, r6
 800cbf2:	4641      	mov	r1, r8
 800cbf4:	f000 fb92 	bl	800d31c <memmove>
 800cbf8:	68a3      	ldr	r3, [r4, #8]
 800cbfa:	1b9b      	subs	r3, r3, r6
 800cbfc:	60a3      	str	r3, [r4, #8]
 800cbfe:	6823      	ldr	r3, [r4, #0]
 800cc00:	4433      	add	r3, r6
 800cc02:	6023      	str	r3, [r4, #0]
 800cc04:	2000      	movs	r0, #0
 800cc06:	e7db      	b.n	800cbc0 <__ssputs_r+0x58>
 800cc08:	462a      	mov	r2, r5
 800cc0a:	f000 fba1 	bl	800d350 <_realloc_r>
 800cc0e:	4606      	mov	r6, r0
 800cc10:	2800      	cmp	r0, #0
 800cc12:	d1e1      	bne.n	800cbd8 <__ssputs_r+0x70>
 800cc14:	6921      	ldr	r1, [r4, #16]
 800cc16:	4650      	mov	r0, sl
 800cc18:	f7fd fb14 	bl	800a244 <_free_r>
 800cc1c:	e7c7      	b.n	800cbae <__ssputs_r+0x46>
	...

0800cc20 <_svfiprintf_r>:
 800cc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc24:	4698      	mov	r8, r3
 800cc26:	898b      	ldrh	r3, [r1, #12]
 800cc28:	061b      	lsls	r3, r3, #24
 800cc2a:	b09d      	sub	sp, #116	; 0x74
 800cc2c:	4607      	mov	r7, r0
 800cc2e:	460d      	mov	r5, r1
 800cc30:	4614      	mov	r4, r2
 800cc32:	d50e      	bpl.n	800cc52 <_svfiprintf_r+0x32>
 800cc34:	690b      	ldr	r3, [r1, #16]
 800cc36:	b963      	cbnz	r3, 800cc52 <_svfiprintf_r+0x32>
 800cc38:	2140      	movs	r1, #64	; 0x40
 800cc3a:	f7fd fb6f 	bl	800a31c <_malloc_r>
 800cc3e:	6028      	str	r0, [r5, #0]
 800cc40:	6128      	str	r0, [r5, #16]
 800cc42:	b920      	cbnz	r0, 800cc4e <_svfiprintf_r+0x2e>
 800cc44:	230c      	movs	r3, #12
 800cc46:	603b      	str	r3, [r7, #0]
 800cc48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc4c:	e0d1      	b.n	800cdf2 <_svfiprintf_r+0x1d2>
 800cc4e:	2340      	movs	r3, #64	; 0x40
 800cc50:	616b      	str	r3, [r5, #20]
 800cc52:	2300      	movs	r3, #0
 800cc54:	9309      	str	r3, [sp, #36]	; 0x24
 800cc56:	2320      	movs	r3, #32
 800cc58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc60:	2330      	movs	r3, #48	; 0x30
 800cc62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ce0c <_svfiprintf_r+0x1ec>
 800cc66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc6a:	f04f 0901 	mov.w	r9, #1
 800cc6e:	4623      	mov	r3, r4
 800cc70:	469a      	mov	sl, r3
 800cc72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc76:	b10a      	cbz	r2, 800cc7c <_svfiprintf_r+0x5c>
 800cc78:	2a25      	cmp	r2, #37	; 0x25
 800cc7a:	d1f9      	bne.n	800cc70 <_svfiprintf_r+0x50>
 800cc7c:	ebba 0b04 	subs.w	fp, sl, r4
 800cc80:	d00b      	beq.n	800cc9a <_svfiprintf_r+0x7a>
 800cc82:	465b      	mov	r3, fp
 800cc84:	4622      	mov	r2, r4
 800cc86:	4629      	mov	r1, r5
 800cc88:	4638      	mov	r0, r7
 800cc8a:	f7ff ff6d 	bl	800cb68 <__ssputs_r>
 800cc8e:	3001      	adds	r0, #1
 800cc90:	f000 80aa 	beq.w	800cde8 <_svfiprintf_r+0x1c8>
 800cc94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc96:	445a      	add	r2, fp
 800cc98:	9209      	str	r2, [sp, #36]	; 0x24
 800cc9a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	f000 80a2 	beq.w	800cde8 <_svfiprintf_r+0x1c8>
 800cca4:	2300      	movs	r3, #0
 800cca6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccae:	f10a 0a01 	add.w	sl, sl, #1
 800ccb2:	9304      	str	r3, [sp, #16]
 800ccb4:	9307      	str	r3, [sp, #28]
 800ccb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccba:	931a      	str	r3, [sp, #104]	; 0x68
 800ccbc:	4654      	mov	r4, sl
 800ccbe:	2205      	movs	r2, #5
 800ccc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccc4:	4851      	ldr	r0, [pc, #324]	; (800ce0c <_svfiprintf_r+0x1ec>)
 800ccc6:	f7f3 fa8b 	bl	80001e0 <memchr>
 800ccca:	9a04      	ldr	r2, [sp, #16]
 800cccc:	b9d8      	cbnz	r0, 800cd06 <_svfiprintf_r+0xe6>
 800ccce:	06d0      	lsls	r0, r2, #27
 800ccd0:	bf44      	itt	mi
 800ccd2:	2320      	movmi	r3, #32
 800ccd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccd8:	0711      	lsls	r1, r2, #28
 800ccda:	bf44      	itt	mi
 800ccdc:	232b      	movmi	r3, #43	; 0x2b
 800ccde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cce2:	f89a 3000 	ldrb.w	r3, [sl]
 800cce6:	2b2a      	cmp	r3, #42	; 0x2a
 800cce8:	d015      	beq.n	800cd16 <_svfiprintf_r+0xf6>
 800ccea:	9a07      	ldr	r2, [sp, #28]
 800ccec:	4654      	mov	r4, sl
 800ccee:	2000      	movs	r0, #0
 800ccf0:	f04f 0c0a 	mov.w	ip, #10
 800ccf4:	4621      	mov	r1, r4
 800ccf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccfa:	3b30      	subs	r3, #48	; 0x30
 800ccfc:	2b09      	cmp	r3, #9
 800ccfe:	d94e      	bls.n	800cd9e <_svfiprintf_r+0x17e>
 800cd00:	b1b0      	cbz	r0, 800cd30 <_svfiprintf_r+0x110>
 800cd02:	9207      	str	r2, [sp, #28]
 800cd04:	e014      	b.n	800cd30 <_svfiprintf_r+0x110>
 800cd06:	eba0 0308 	sub.w	r3, r0, r8
 800cd0a:	fa09 f303 	lsl.w	r3, r9, r3
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	9304      	str	r3, [sp, #16]
 800cd12:	46a2      	mov	sl, r4
 800cd14:	e7d2      	b.n	800ccbc <_svfiprintf_r+0x9c>
 800cd16:	9b03      	ldr	r3, [sp, #12]
 800cd18:	1d19      	adds	r1, r3, #4
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	9103      	str	r1, [sp, #12]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	bfbb      	ittet	lt
 800cd22:	425b      	neglt	r3, r3
 800cd24:	f042 0202 	orrlt.w	r2, r2, #2
 800cd28:	9307      	strge	r3, [sp, #28]
 800cd2a:	9307      	strlt	r3, [sp, #28]
 800cd2c:	bfb8      	it	lt
 800cd2e:	9204      	strlt	r2, [sp, #16]
 800cd30:	7823      	ldrb	r3, [r4, #0]
 800cd32:	2b2e      	cmp	r3, #46	; 0x2e
 800cd34:	d10c      	bne.n	800cd50 <_svfiprintf_r+0x130>
 800cd36:	7863      	ldrb	r3, [r4, #1]
 800cd38:	2b2a      	cmp	r3, #42	; 0x2a
 800cd3a:	d135      	bne.n	800cda8 <_svfiprintf_r+0x188>
 800cd3c:	9b03      	ldr	r3, [sp, #12]
 800cd3e:	1d1a      	adds	r2, r3, #4
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	9203      	str	r2, [sp, #12]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	bfb8      	it	lt
 800cd48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cd4c:	3402      	adds	r4, #2
 800cd4e:	9305      	str	r3, [sp, #20]
 800cd50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ce1c <_svfiprintf_r+0x1fc>
 800cd54:	7821      	ldrb	r1, [r4, #0]
 800cd56:	2203      	movs	r2, #3
 800cd58:	4650      	mov	r0, sl
 800cd5a:	f7f3 fa41 	bl	80001e0 <memchr>
 800cd5e:	b140      	cbz	r0, 800cd72 <_svfiprintf_r+0x152>
 800cd60:	2340      	movs	r3, #64	; 0x40
 800cd62:	eba0 000a 	sub.w	r0, r0, sl
 800cd66:	fa03 f000 	lsl.w	r0, r3, r0
 800cd6a:	9b04      	ldr	r3, [sp, #16]
 800cd6c:	4303      	orrs	r3, r0
 800cd6e:	3401      	adds	r4, #1
 800cd70:	9304      	str	r3, [sp, #16]
 800cd72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd76:	4826      	ldr	r0, [pc, #152]	; (800ce10 <_svfiprintf_r+0x1f0>)
 800cd78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd7c:	2206      	movs	r2, #6
 800cd7e:	f7f3 fa2f 	bl	80001e0 <memchr>
 800cd82:	2800      	cmp	r0, #0
 800cd84:	d038      	beq.n	800cdf8 <_svfiprintf_r+0x1d8>
 800cd86:	4b23      	ldr	r3, [pc, #140]	; (800ce14 <_svfiprintf_r+0x1f4>)
 800cd88:	bb1b      	cbnz	r3, 800cdd2 <_svfiprintf_r+0x1b2>
 800cd8a:	9b03      	ldr	r3, [sp, #12]
 800cd8c:	3307      	adds	r3, #7
 800cd8e:	f023 0307 	bic.w	r3, r3, #7
 800cd92:	3308      	adds	r3, #8
 800cd94:	9303      	str	r3, [sp, #12]
 800cd96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd98:	4433      	add	r3, r6
 800cd9a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd9c:	e767      	b.n	800cc6e <_svfiprintf_r+0x4e>
 800cd9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cda2:	460c      	mov	r4, r1
 800cda4:	2001      	movs	r0, #1
 800cda6:	e7a5      	b.n	800ccf4 <_svfiprintf_r+0xd4>
 800cda8:	2300      	movs	r3, #0
 800cdaa:	3401      	adds	r4, #1
 800cdac:	9305      	str	r3, [sp, #20]
 800cdae:	4619      	mov	r1, r3
 800cdb0:	f04f 0c0a 	mov.w	ip, #10
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdba:	3a30      	subs	r2, #48	; 0x30
 800cdbc:	2a09      	cmp	r2, #9
 800cdbe:	d903      	bls.n	800cdc8 <_svfiprintf_r+0x1a8>
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d0c5      	beq.n	800cd50 <_svfiprintf_r+0x130>
 800cdc4:	9105      	str	r1, [sp, #20]
 800cdc6:	e7c3      	b.n	800cd50 <_svfiprintf_r+0x130>
 800cdc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdcc:	4604      	mov	r4, r0
 800cdce:	2301      	movs	r3, #1
 800cdd0:	e7f0      	b.n	800cdb4 <_svfiprintf_r+0x194>
 800cdd2:	ab03      	add	r3, sp, #12
 800cdd4:	9300      	str	r3, [sp, #0]
 800cdd6:	462a      	mov	r2, r5
 800cdd8:	4b0f      	ldr	r3, [pc, #60]	; (800ce18 <_svfiprintf_r+0x1f8>)
 800cdda:	a904      	add	r1, sp, #16
 800cddc:	4638      	mov	r0, r7
 800cdde:	f7fd fbb1 	bl	800a544 <_printf_float>
 800cde2:	1c42      	adds	r2, r0, #1
 800cde4:	4606      	mov	r6, r0
 800cde6:	d1d6      	bne.n	800cd96 <_svfiprintf_r+0x176>
 800cde8:	89ab      	ldrh	r3, [r5, #12]
 800cdea:	065b      	lsls	r3, r3, #25
 800cdec:	f53f af2c 	bmi.w	800cc48 <_svfiprintf_r+0x28>
 800cdf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdf2:	b01d      	add	sp, #116	; 0x74
 800cdf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf8:	ab03      	add	r3, sp, #12
 800cdfa:	9300      	str	r3, [sp, #0]
 800cdfc:	462a      	mov	r2, r5
 800cdfe:	4b06      	ldr	r3, [pc, #24]	; (800ce18 <_svfiprintf_r+0x1f8>)
 800ce00:	a904      	add	r1, sp, #16
 800ce02:	4638      	mov	r0, r7
 800ce04:	f7fd fe42 	bl	800aa8c <_printf_i>
 800ce08:	e7eb      	b.n	800cde2 <_svfiprintf_r+0x1c2>
 800ce0a:	bf00      	nop
 800ce0c:	0800f164 	.word	0x0800f164
 800ce10:	0800f16e 	.word	0x0800f16e
 800ce14:	0800a545 	.word	0x0800a545
 800ce18:	0800cb69 	.word	0x0800cb69
 800ce1c:	0800f16a 	.word	0x0800f16a

0800ce20 <__sfputc_r>:
 800ce20:	6893      	ldr	r3, [r2, #8]
 800ce22:	3b01      	subs	r3, #1
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	b410      	push	{r4}
 800ce28:	6093      	str	r3, [r2, #8]
 800ce2a:	da08      	bge.n	800ce3e <__sfputc_r+0x1e>
 800ce2c:	6994      	ldr	r4, [r2, #24]
 800ce2e:	42a3      	cmp	r3, r4
 800ce30:	db01      	blt.n	800ce36 <__sfputc_r+0x16>
 800ce32:	290a      	cmp	r1, #10
 800ce34:	d103      	bne.n	800ce3e <__sfputc_r+0x1e>
 800ce36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce3a:	f7fe b991 	b.w	800b160 <__swbuf_r>
 800ce3e:	6813      	ldr	r3, [r2, #0]
 800ce40:	1c58      	adds	r0, r3, #1
 800ce42:	6010      	str	r0, [r2, #0]
 800ce44:	7019      	strb	r1, [r3, #0]
 800ce46:	4608      	mov	r0, r1
 800ce48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce4c:	4770      	bx	lr

0800ce4e <__sfputs_r>:
 800ce4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce50:	4606      	mov	r6, r0
 800ce52:	460f      	mov	r7, r1
 800ce54:	4614      	mov	r4, r2
 800ce56:	18d5      	adds	r5, r2, r3
 800ce58:	42ac      	cmp	r4, r5
 800ce5a:	d101      	bne.n	800ce60 <__sfputs_r+0x12>
 800ce5c:	2000      	movs	r0, #0
 800ce5e:	e007      	b.n	800ce70 <__sfputs_r+0x22>
 800ce60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce64:	463a      	mov	r2, r7
 800ce66:	4630      	mov	r0, r6
 800ce68:	f7ff ffda 	bl	800ce20 <__sfputc_r>
 800ce6c:	1c43      	adds	r3, r0, #1
 800ce6e:	d1f3      	bne.n	800ce58 <__sfputs_r+0xa>
 800ce70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce74 <_vfiprintf_r>:
 800ce74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce78:	460d      	mov	r5, r1
 800ce7a:	b09d      	sub	sp, #116	; 0x74
 800ce7c:	4614      	mov	r4, r2
 800ce7e:	4698      	mov	r8, r3
 800ce80:	4606      	mov	r6, r0
 800ce82:	b118      	cbz	r0, 800ce8c <_vfiprintf_r+0x18>
 800ce84:	6983      	ldr	r3, [r0, #24]
 800ce86:	b90b      	cbnz	r3, 800ce8c <_vfiprintf_r+0x18>
 800ce88:	f7ff f9be 	bl	800c208 <__sinit>
 800ce8c:	4b89      	ldr	r3, [pc, #548]	; (800d0b4 <_vfiprintf_r+0x240>)
 800ce8e:	429d      	cmp	r5, r3
 800ce90:	d11b      	bne.n	800ceca <_vfiprintf_r+0x56>
 800ce92:	6875      	ldr	r5, [r6, #4]
 800ce94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce96:	07d9      	lsls	r1, r3, #31
 800ce98:	d405      	bmi.n	800cea6 <_vfiprintf_r+0x32>
 800ce9a:	89ab      	ldrh	r3, [r5, #12]
 800ce9c:	059a      	lsls	r2, r3, #22
 800ce9e:	d402      	bmi.n	800cea6 <_vfiprintf_r+0x32>
 800cea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cea2:	f7ff fa54 	bl	800c34e <__retarget_lock_acquire_recursive>
 800cea6:	89ab      	ldrh	r3, [r5, #12]
 800cea8:	071b      	lsls	r3, r3, #28
 800ceaa:	d501      	bpl.n	800ceb0 <_vfiprintf_r+0x3c>
 800ceac:	692b      	ldr	r3, [r5, #16]
 800ceae:	b9eb      	cbnz	r3, 800ceec <_vfiprintf_r+0x78>
 800ceb0:	4629      	mov	r1, r5
 800ceb2:	4630      	mov	r0, r6
 800ceb4:	f7fe f9a6 	bl	800b204 <__swsetup_r>
 800ceb8:	b1c0      	cbz	r0, 800ceec <_vfiprintf_r+0x78>
 800ceba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cebc:	07dc      	lsls	r4, r3, #31
 800cebe:	d50e      	bpl.n	800cede <_vfiprintf_r+0x6a>
 800cec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cec4:	b01d      	add	sp, #116	; 0x74
 800cec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceca:	4b7b      	ldr	r3, [pc, #492]	; (800d0b8 <_vfiprintf_r+0x244>)
 800cecc:	429d      	cmp	r5, r3
 800cece:	d101      	bne.n	800ced4 <_vfiprintf_r+0x60>
 800ced0:	68b5      	ldr	r5, [r6, #8]
 800ced2:	e7df      	b.n	800ce94 <_vfiprintf_r+0x20>
 800ced4:	4b79      	ldr	r3, [pc, #484]	; (800d0bc <_vfiprintf_r+0x248>)
 800ced6:	429d      	cmp	r5, r3
 800ced8:	bf08      	it	eq
 800ceda:	68f5      	ldreq	r5, [r6, #12]
 800cedc:	e7da      	b.n	800ce94 <_vfiprintf_r+0x20>
 800cede:	89ab      	ldrh	r3, [r5, #12]
 800cee0:	0598      	lsls	r0, r3, #22
 800cee2:	d4ed      	bmi.n	800cec0 <_vfiprintf_r+0x4c>
 800cee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cee6:	f7ff fa33 	bl	800c350 <__retarget_lock_release_recursive>
 800ceea:	e7e9      	b.n	800cec0 <_vfiprintf_r+0x4c>
 800ceec:	2300      	movs	r3, #0
 800ceee:	9309      	str	r3, [sp, #36]	; 0x24
 800cef0:	2320      	movs	r3, #32
 800cef2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cef6:	f8cd 800c 	str.w	r8, [sp, #12]
 800cefa:	2330      	movs	r3, #48	; 0x30
 800cefc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d0c0 <_vfiprintf_r+0x24c>
 800cf00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf04:	f04f 0901 	mov.w	r9, #1
 800cf08:	4623      	mov	r3, r4
 800cf0a:	469a      	mov	sl, r3
 800cf0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf10:	b10a      	cbz	r2, 800cf16 <_vfiprintf_r+0xa2>
 800cf12:	2a25      	cmp	r2, #37	; 0x25
 800cf14:	d1f9      	bne.n	800cf0a <_vfiprintf_r+0x96>
 800cf16:	ebba 0b04 	subs.w	fp, sl, r4
 800cf1a:	d00b      	beq.n	800cf34 <_vfiprintf_r+0xc0>
 800cf1c:	465b      	mov	r3, fp
 800cf1e:	4622      	mov	r2, r4
 800cf20:	4629      	mov	r1, r5
 800cf22:	4630      	mov	r0, r6
 800cf24:	f7ff ff93 	bl	800ce4e <__sfputs_r>
 800cf28:	3001      	adds	r0, #1
 800cf2a:	f000 80aa 	beq.w	800d082 <_vfiprintf_r+0x20e>
 800cf2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf30:	445a      	add	r2, fp
 800cf32:	9209      	str	r2, [sp, #36]	; 0x24
 800cf34:	f89a 3000 	ldrb.w	r3, [sl]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f000 80a2 	beq.w	800d082 <_vfiprintf_r+0x20e>
 800cf3e:	2300      	movs	r3, #0
 800cf40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf48:	f10a 0a01 	add.w	sl, sl, #1
 800cf4c:	9304      	str	r3, [sp, #16]
 800cf4e:	9307      	str	r3, [sp, #28]
 800cf50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf54:	931a      	str	r3, [sp, #104]	; 0x68
 800cf56:	4654      	mov	r4, sl
 800cf58:	2205      	movs	r2, #5
 800cf5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf5e:	4858      	ldr	r0, [pc, #352]	; (800d0c0 <_vfiprintf_r+0x24c>)
 800cf60:	f7f3 f93e 	bl	80001e0 <memchr>
 800cf64:	9a04      	ldr	r2, [sp, #16]
 800cf66:	b9d8      	cbnz	r0, 800cfa0 <_vfiprintf_r+0x12c>
 800cf68:	06d1      	lsls	r1, r2, #27
 800cf6a:	bf44      	itt	mi
 800cf6c:	2320      	movmi	r3, #32
 800cf6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf72:	0713      	lsls	r3, r2, #28
 800cf74:	bf44      	itt	mi
 800cf76:	232b      	movmi	r3, #43	; 0x2b
 800cf78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf7c:	f89a 3000 	ldrb.w	r3, [sl]
 800cf80:	2b2a      	cmp	r3, #42	; 0x2a
 800cf82:	d015      	beq.n	800cfb0 <_vfiprintf_r+0x13c>
 800cf84:	9a07      	ldr	r2, [sp, #28]
 800cf86:	4654      	mov	r4, sl
 800cf88:	2000      	movs	r0, #0
 800cf8a:	f04f 0c0a 	mov.w	ip, #10
 800cf8e:	4621      	mov	r1, r4
 800cf90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf94:	3b30      	subs	r3, #48	; 0x30
 800cf96:	2b09      	cmp	r3, #9
 800cf98:	d94e      	bls.n	800d038 <_vfiprintf_r+0x1c4>
 800cf9a:	b1b0      	cbz	r0, 800cfca <_vfiprintf_r+0x156>
 800cf9c:	9207      	str	r2, [sp, #28]
 800cf9e:	e014      	b.n	800cfca <_vfiprintf_r+0x156>
 800cfa0:	eba0 0308 	sub.w	r3, r0, r8
 800cfa4:	fa09 f303 	lsl.w	r3, r9, r3
 800cfa8:	4313      	orrs	r3, r2
 800cfaa:	9304      	str	r3, [sp, #16]
 800cfac:	46a2      	mov	sl, r4
 800cfae:	e7d2      	b.n	800cf56 <_vfiprintf_r+0xe2>
 800cfb0:	9b03      	ldr	r3, [sp, #12]
 800cfb2:	1d19      	adds	r1, r3, #4
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	9103      	str	r1, [sp, #12]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	bfbb      	ittet	lt
 800cfbc:	425b      	neglt	r3, r3
 800cfbe:	f042 0202 	orrlt.w	r2, r2, #2
 800cfc2:	9307      	strge	r3, [sp, #28]
 800cfc4:	9307      	strlt	r3, [sp, #28]
 800cfc6:	bfb8      	it	lt
 800cfc8:	9204      	strlt	r2, [sp, #16]
 800cfca:	7823      	ldrb	r3, [r4, #0]
 800cfcc:	2b2e      	cmp	r3, #46	; 0x2e
 800cfce:	d10c      	bne.n	800cfea <_vfiprintf_r+0x176>
 800cfd0:	7863      	ldrb	r3, [r4, #1]
 800cfd2:	2b2a      	cmp	r3, #42	; 0x2a
 800cfd4:	d135      	bne.n	800d042 <_vfiprintf_r+0x1ce>
 800cfd6:	9b03      	ldr	r3, [sp, #12]
 800cfd8:	1d1a      	adds	r2, r3, #4
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	9203      	str	r2, [sp, #12]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	bfb8      	it	lt
 800cfe2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cfe6:	3402      	adds	r4, #2
 800cfe8:	9305      	str	r3, [sp, #20]
 800cfea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d0d0 <_vfiprintf_r+0x25c>
 800cfee:	7821      	ldrb	r1, [r4, #0]
 800cff0:	2203      	movs	r2, #3
 800cff2:	4650      	mov	r0, sl
 800cff4:	f7f3 f8f4 	bl	80001e0 <memchr>
 800cff8:	b140      	cbz	r0, 800d00c <_vfiprintf_r+0x198>
 800cffa:	2340      	movs	r3, #64	; 0x40
 800cffc:	eba0 000a 	sub.w	r0, r0, sl
 800d000:	fa03 f000 	lsl.w	r0, r3, r0
 800d004:	9b04      	ldr	r3, [sp, #16]
 800d006:	4303      	orrs	r3, r0
 800d008:	3401      	adds	r4, #1
 800d00a:	9304      	str	r3, [sp, #16]
 800d00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d010:	482c      	ldr	r0, [pc, #176]	; (800d0c4 <_vfiprintf_r+0x250>)
 800d012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d016:	2206      	movs	r2, #6
 800d018:	f7f3 f8e2 	bl	80001e0 <memchr>
 800d01c:	2800      	cmp	r0, #0
 800d01e:	d03f      	beq.n	800d0a0 <_vfiprintf_r+0x22c>
 800d020:	4b29      	ldr	r3, [pc, #164]	; (800d0c8 <_vfiprintf_r+0x254>)
 800d022:	bb1b      	cbnz	r3, 800d06c <_vfiprintf_r+0x1f8>
 800d024:	9b03      	ldr	r3, [sp, #12]
 800d026:	3307      	adds	r3, #7
 800d028:	f023 0307 	bic.w	r3, r3, #7
 800d02c:	3308      	adds	r3, #8
 800d02e:	9303      	str	r3, [sp, #12]
 800d030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d032:	443b      	add	r3, r7
 800d034:	9309      	str	r3, [sp, #36]	; 0x24
 800d036:	e767      	b.n	800cf08 <_vfiprintf_r+0x94>
 800d038:	fb0c 3202 	mla	r2, ip, r2, r3
 800d03c:	460c      	mov	r4, r1
 800d03e:	2001      	movs	r0, #1
 800d040:	e7a5      	b.n	800cf8e <_vfiprintf_r+0x11a>
 800d042:	2300      	movs	r3, #0
 800d044:	3401      	adds	r4, #1
 800d046:	9305      	str	r3, [sp, #20]
 800d048:	4619      	mov	r1, r3
 800d04a:	f04f 0c0a 	mov.w	ip, #10
 800d04e:	4620      	mov	r0, r4
 800d050:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d054:	3a30      	subs	r2, #48	; 0x30
 800d056:	2a09      	cmp	r2, #9
 800d058:	d903      	bls.n	800d062 <_vfiprintf_r+0x1ee>
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d0c5      	beq.n	800cfea <_vfiprintf_r+0x176>
 800d05e:	9105      	str	r1, [sp, #20]
 800d060:	e7c3      	b.n	800cfea <_vfiprintf_r+0x176>
 800d062:	fb0c 2101 	mla	r1, ip, r1, r2
 800d066:	4604      	mov	r4, r0
 800d068:	2301      	movs	r3, #1
 800d06a:	e7f0      	b.n	800d04e <_vfiprintf_r+0x1da>
 800d06c:	ab03      	add	r3, sp, #12
 800d06e:	9300      	str	r3, [sp, #0]
 800d070:	462a      	mov	r2, r5
 800d072:	4b16      	ldr	r3, [pc, #88]	; (800d0cc <_vfiprintf_r+0x258>)
 800d074:	a904      	add	r1, sp, #16
 800d076:	4630      	mov	r0, r6
 800d078:	f7fd fa64 	bl	800a544 <_printf_float>
 800d07c:	4607      	mov	r7, r0
 800d07e:	1c78      	adds	r0, r7, #1
 800d080:	d1d6      	bne.n	800d030 <_vfiprintf_r+0x1bc>
 800d082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d084:	07d9      	lsls	r1, r3, #31
 800d086:	d405      	bmi.n	800d094 <_vfiprintf_r+0x220>
 800d088:	89ab      	ldrh	r3, [r5, #12]
 800d08a:	059a      	lsls	r2, r3, #22
 800d08c:	d402      	bmi.n	800d094 <_vfiprintf_r+0x220>
 800d08e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d090:	f7ff f95e 	bl	800c350 <__retarget_lock_release_recursive>
 800d094:	89ab      	ldrh	r3, [r5, #12]
 800d096:	065b      	lsls	r3, r3, #25
 800d098:	f53f af12 	bmi.w	800cec0 <_vfiprintf_r+0x4c>
 800d09c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d09e:	e711      	b.n	800cec4 <_vfiprintf_r+0x50>
 800d0a0:	ab03      	add	r3, sp, #12
 800d0a2:	9300      	str	r3, [sp, #0]
 800d0a4:	462a      	mov	r2, r5
 800d0a6:	4b09      	ldr	r3, [pc, #36]	; (800d0cc <_vfiprintf_r+0x258>)
 800d0a8:	a904      	add	r1, sp, #16
 800d0aa:	4630      	mov	r0, r6
 800d0ac:	f7fd fcee 	bl	800aa8c <_printf_i>
 800d0b0:	e7e4      	b.n	800d07c <_vfiprintf_r+0x208>
 800d0b2:	bf00      	nop
 800d0b4:	0800efc8 	.word	0x0800efc8
 800d0b8:	0800efe8 	.word	0x0800efe8
 800d0bc:	0800efa8 	.word	0x0800efa8
 800d0c0:	0800f164 	.word	0x0800f164
 800d0c4:	0800f16e 	.word	0x0800f16e
 800d0c8:	0800a545 	.word	0x0800a545
 800d0cc:	0800ce4f 	.word	0x0800ce4f
 800d0d0:	0800f16a 	.word	0x0800f16a

0800d0d4 <_putc_r>:
 800d0d4:	b570      	push	{r4, r5, r6, lr}
 800d0d6:	460d      	mov	r5, r1
 800d0d8:	4614      	mov	r4, r2
 800d0da:	4606      	mov	r6, r0
 800d0dc:	b118      	cbz	r0, 800d0e6 <_putc_r+0x12>
 800d0de:	6983      	ldr	r3, [r0, #24]
 800d0e0:	b90b      	cbnz	r3, 800d0e6 <_putc_r+0x12>
 800d0e2:	f7ff f891 	bl	800c208 <__sinit>
 800d0e6:	4b1c      	ldr	r3, [pc, #112]	; (800d158 <_putc_r+0x84>)
 800d0e8:	429c      	cmp	r4, r3
 800d0ea:	d124      	bne.n	800d136 <_putc_r+0x62>
 800d0ec:	6874      	ldr	r4, [r6, #4]
 800d0ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0f0:	07d8      	lsls	r0, r3, #31
 800d0f2:	d405      	bmi.n	800d100 <_putc_r+0x2c>
 800d0f4:	89a3      	ldrh	r3, [r4, #12]
 800d0f6:	0599      	lsls	r1, r3, #22
 800d0f8:	d402      	bmi.n	800d100 <_putc_r+0x2c>
 800d0fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0fc:	f7ff f927 	bl	800c34e <__retarget_lock_acquire_recursive>
 800d100:	68a3      	ldr	r3, [r4, #8]
 800d102:	3b01      	subs	r3, #1
 800d104:	2b00      	cmp	r3, #0
 800d106:	60a3      	str	r3, [r4, #8]
 800d108:	da05      	bge.n	800d116 <_putc_r+0x42>
 800d10a:	69a2      	ldr	r2, [r4, #24]
 800d10c:	4293      	cmp	r3, r2
 800d10e:	db1c      	blt.n	800d14a <_putc_r+0x76>
 800d110:	b2eb      	uxtb	r3, r5
 800d112:	2b0a      	cmp	r3, #10
 800d114:	d019      	beq.n	800d14a <_putc_r+0x76>
 800d116:	6823      	ldr	r3, [r4, #0]
 800d118:	1c5a      	adds	r2, r3, #1
 800d11a:	6022      	str	r2, [r4, #0]
 800d11c:	701d      	strb	r5, [r3, #0]
 800d11e:	b2ed      	uxtb	r5, r5
 800d120:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d122:	07da      	lsls	r2, r3, #31
 800d124:	d405      	bmi.n	800d132 <_putc_r+0x5e>
 800d126:	89a3      	ldrh	r3, [r4, #12]
 800d128:	059b      	lsls	r3, r3, #22
 800d12a:	d402      	bmi.n	800d132 <_putc_r+0x5e>
 800d12c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d12e:	f7ff f90f 	bl	800c350 <__retarget_lock_release_recursive>
 800d132:	4628      	mov	r0, r5
 800d134:	bd70      	pop	{r4, r5, r6, pc}
 800d136:	4b09      	ldr	r3, [pc, #36]	; (800d15c <_putc_r+0x88>)
 800d138:	429c      	cmp	r4, r3
 800d13a:	d101      	bne.n	800d140 <_putc_r+0x6c>
 800d13c:	68b4      	ldr	r4, [r6, #8]
 800d13e:	e7d6      	b.n	800d0ee <_putc_r+0x1a>
 800d140:	4b07      	ldr	r3, [pc, #28]	; (800d160 <_putc_r+0x8c>)
 800d142:	429c      	cmp	r4, r3
 800d144:	bf08      	it	eq
 800d146:	68f4      	ldreq	r4, [r6, #12]
 800d148:	e7d1      	b.n	800d0ee <_putc_r+0x1a>
 800d14a:	4629      	mov	r1, r5
 800d14c:	4622      	mov	r2, r4
 800d14e:	4630      	mov	r0, r6
 800d150:	f7fe f806 	bl	800b160 <__swbuf_r>
 800d154:	4605      	mov	r5, r0
 800d156:	e7e3      	b.n	800d120 <_putc_r+0x4c>
 800d158:	0800efc8 	.word	0x0800efc8
 800d15c:	0800efe8 	.word	0x0800efe8
 800d160:	0800efa8 	.word	0x0800efa8

0800d164 <__sread>:
 800d164:	b510      	push	{r4, lr}
 800d166:	460c      	mov	r4, r1
 800d168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d16c:	f000 f920 	bl	800d3b0 <_read_r>
 800d170:	2800      	cmp	r0, #0
 800d172:	bfab      	itete	ge
 800d174:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d176:	89a3      	ldrhlt	r3, [r4, #12]
 800d178:	181b      	addge	r3, r3, r0
 800d17a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d17e:	bfac      	ite	ge
 800d180:	6563      	strge	r3, [r4, #84]	; 0x54
 800d182:	81a3      	strhlt	r3, [r4, #12]
 800d184:	bd10      	pop	{r4, pc}

0800d186 <__swrite>:
 800d186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d18a:	461f      	mov	r7, r3
 800d18c:	898b      	ldrh	r3, [r1, #12]
 800d18e:	05db      	lsls	r3, r3, #23
 800d190:	4605      	mov	r5, r0
 800d192:	460c      	mov	r4, r1
 800d194:	4616      	mov	r6, r2
 800d196:	d505      	bpl.n	800d1a4 <__swrite+0x1e>
 800d198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d19c:	2302      	movs	r3, #2
 800d19e:	2200      	movs	r2, #0
 800d1a0:	f000 f898 	bl	800d2d4 <_lseek_r>
 800d1a4:	89a3      	ldrh	r3, [r4, #12]
 800d1a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d1ae:	81a3      	strh	r3, [r4, #12]
 800d1b0:	4632      	mov	r2, r6
 800d1b2:	463b      	mov	r3, r7
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ba:	f000 b817 	b.w	800d1ec <_write_r>

0800d1be <__sseek>:
 800d1be:	b510      	push	{r4, lr}
 800d1c0:	460c      	mov	r4, r1
 800d1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1c6:	f000 f885 	bl	800d2d4 <_lseek_r>
 800d1ca:	1c43      	adds	r3, r0, #1
 800d1cc:	89a3      	ldrh	r3, [r4, #12]
 800d1ce:	bf15      	itete	ne
 800d1d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800d1d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d1d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d1da:	81a3      	strheq	r3, [r4, #12]
 800d1dc:	bf18      	it	ne
 800d1de:	81a3      	strhne	r3, [r4, #12]
 800d1e0:	bd10      	pop	{r4, pc}

0800d1e2 <__sclose>:
 800d1e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1e6:	f000 b831 	b.w	800d24c <_close_r>
	...

0800d1ec <_write_r>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	4d07      	ldr	r5, [pc, #28]	; (800d20c <_write_r+0x20>)
 800d1f0:	4604      	mov	r4, r0
 800d1f2:	4608      	mov	r0, r1
 800d1f4:	4611      	mov	r1, r2
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	602a      	str	r2, [r5, #0]
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	f7f9 f828 	bl	8006250 <_write>
 800d200:	1c43      	adds	r3, r0, #1
 800d202:	d102      	bne.n	800d20a <_write_r+0x1e>
 800d204:	682b      	ldr	r3, [r5, #0]
 800d206:	b103      	cbz	r3, 800d20a <_write_r+0x1e>
 800d208:	6023      	str	r3, [r4, #0]
 800d20a:	bd38      	pop	{r3, r4, r5, pc}
 800d20c:	20000c40 	.word	0x20000c40

0800d210 <__assert_func>:
 800d210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d212:	4614      	mov	r4, r2
 800d214:	461a      	mov	r2, r3
 800d216:	4b09      	ldr	r3, [pc, #36]	; (800d23c <__assert_func+0x2c>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4605      	mov	r5, r0
 800d21c:	68d8      	ldr	r0, [r3, #12]
 800d21e:	b14c      	cbz	r4, 800d234 <__assert_func+0x24>
 800d220:	4b07      	ldr	r3, [pc, #28]	; (800d240 <__assert_func+0x30>)
 800d222:	9100      	str	r1, [sp, #0]
 800d224:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d228:	4906      	ldr	r1, [pc, #24]	; (800d244 <__assert_func+0x34>)
 800d22a:	462b      	mov	r3, r5
 800d22c:	f000 f81e 	bl	800d26c <fiprintf>
 800d230:	f000 f8dd 	bl	800d3ee <abort>
 800d234:	4b04      	ldr	r3, [pc, #16]	; (800d248 <__assert_func+0x38>)
 800d236:	461c      	mov	r4, r3
 800d238:	e7f3      	b.n	800d222 <__assert_func+0x12>
 800d23a:	bf00      	nop
 800d23c:	200009e8 	.word	0x200009e8
 800d240:	0800f175 	.word	0x0800f175
 800d244:	0800f182 	.word	0x0800f182
 800d248:	0800f1b0 	.word	0x0800f1b0

0800d24c <_close_r>:
 800d24c:	b538      	push	{r3, r4, r5, lr}
 800d24e:	4d06      	ldr	r5, [pc, #24]	; (800d268 <_close_r+0x1c>)
 800d250:	2300      	movs	r3, #0
 800d252:	4604      	mov	r4, r0
 800d254:	4608      	mov	r0, r1
 800d256:	602b      	str	r3, [r5, #0]
 800d258:	f7f8 f983 	bl	8005562 <_close>
 800d25c:	1c43      	adds	r3, r0, #1
 800d25e:	d102      	bne.n	800d266 <_close_r+0x1a>
 800d260:	682b      	ldr	r3, [r5, #0]
 800d262:	b103      	cbz	r3, 800d266 <_close_r+0x1a>
 800d264:	6023      	str	r3, [r4, #0]
 800d266:	bd38      	pop	{r3, r4, r5, pc}
 800d268:	20000c40 	.word	0x20000c40

0800d26c <fiprintf>:
 800d26c:	b40e      	push	{r1, r2, r3}
 800d26e:	b503      	push	{r0, r1, lr}
 800d270:	4601      	mov	r1, r0
 800d272:	ab03      	add	r3, sp, #12
 800d274:	4805      	ldr	r0, [pc, #20]	; (800d28c <fiprintf+0x20>)
 800d276:	f853 2b04 	ldr.w	r2, [r3], #4
 800d27a:	6800      	ldr	r0, [r0, #0]
 800d27c:	9301      	str	r3, [sp, #4]
 800d27e:	f7ff fdf9 	bl	800ce74 <_vfiprintf_r>
 800d282:	b002      	add	sp, #8
 800d284:	f85d eb04 	ldr.w	lr, [sp], #4
 800d288:	b003      	add	sp, #12
 800d28a:	4770      	bx	lr
 800d28c:	200009e8 	.word	0x200009e8

0800d290 <_fstat_r>:
 800d290:	b538      	push	{r3, r4, r5, lr}
 800d292:	4d07      	ldr	r5, [pc, #28]	; (800d2b0 <_fstat_r+0x20>)
 800d294:	2300      	movs	r3, #0
 800d296:	4604      	mov	r4, r0
 800d298:	4608      	mov	r0, r1
 800d29a:	4611      	mov	r1, r2
 800d29c:	602b      	str	r3, [r5, #0]
 800d29e:	f7f8 f96c 	bl	800557a <_fstat>
 800d2a2:	1c43      	adds	r3, r0, #1
 800d2a4:	d102      	bne.n	800d2ac <_fstat_r+0x1c>
 800d2a6:	682b      	ldr	r3, [r5, #0]
 800d2a8:	b103      	cbz	r3, 800d2ac <_fstat_r+0x1c>
 800d2aa:	6023      	str	r3, [r4, #0]
 800d2ac:	bd38      	pop	{r3, r4, r5, pc}
 800d2ae:	bf00      	nop
 800d2b0:	20000c40 	.word	0x20000c40

0800d2b4 <_isatty_r>:
 800d2b4:	b538      	push	{r3, r4, r5, lr}
 800d2b6:	4d06      	ldr	r5, [pc, #24]	; (800d2d0 <_isatty_r+0x1c>)
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	4608      	mov	r0, r1
 800d2be:	602b      	str	r3, [r5, #0]
 800d2c0:	f7f8 f96b 	bl	800559a <_isatty>
 800d2c4:	1c43      	adds	r3, r0, #1
 800d2c6:	d102      	bne.n	800d2ce <_isatty_r+0x1a>
 800d2c8:	682b      	ldr	r3, [r5, #0]
 800d2ca:	b103      	cbz	r3, 800d2ce <_isatty_r+0x1a>
 800d2cc:	6023      	str	r3, [r4, #0]
 800d2ce:	bd38      	pop	{r3, r4, r5, pc}
 800d2d0:	20000c40 	.word	0x20000c40

0800d2d4 <_lseek_r>:
 800d2d4:	b538      	push	{r3, r4, r5, lr}
 800d2d6:	4d07      	ldr	r5, [pc, #28]	; (800d2f4 <_lseek_r+0x20>)
 800d2d8:	4604      	mov	r4, r0
 800d2da:	4608      	mov	r0, r1
 800d2dc:	4611      	mov	r1, r2
 800d2de:	2200      	movs	r2, #0
 800d2e0:	602a      	str	r2, [r5, #0]
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	f7f8 f964 	bl	80055b0 <_lseek>
 800d2e8:	1c43      	adds	r3, r0, #1
 800d2ea:	d102      	bne.n	800d2f2 <_lseek_r+0x1e>
 800d2ec:	682b      	ldr	r3, [r5, #0]
 800d2ee:	b103      	cbz	r3, 800d2f2 <_lseek_r+0x1e>
 800d2f0:	6023      	str	r3, [r4, #0]
 800d2f2:	bd38      	pop	{r3, r4, r5, pc}
 800d2f4:	20000c40 	.word	0x20000c40

0800d2f8 <__ascii_mbtowc>:
 800d2f8:	b082      	sub	sp, #8
 800d2fa:	b901      	cbnz	r1, 800d2fe <__ascii_mbtowc+0x6>
 800d2fc:	a901      	add	r1, sp, #4
 800d2fe:	b142      	cbz	r2, 800d312 <__ascii_mbtowc+0x1a>
 800d300:	b14b      	cbz	r3, 800d316 <__ascii_mbtowc+0x1e>
 800d302:	7813      	ldrb	r3, [r2, #0]
 800d304:	600b      	str	r3, [r1, #0]
 800d306:	7812      	ldrb	r2, [r2, #0]
 800d308:	1e10      	subs	r0, r2, #0
 800d30a:	bf18      	it	ne
 800d30c:	2001      	movne	r0, #1
 800d30e:	b002      	add	sp, #8
 800d310:	4770      	bx	lr
 800d312:	4610      	mov	r0, r2
 800d314:	e7fb      	b.n	800d30e <__ascii_mbtowc+0x16>
 800d316:	f06f 0001 	mvn.w	r0, #1
 800d31a:	e7f8      	b.n	800d30e <__ascii_mbtowc+0x16>

0800d31c <memmove>:
 800d31c:	4288      	cmp	r0, r1
 800d31e:	b510      	push	{r4, lr}
 800d320:	eb01 0402 	add.w	r4, r1, r2
 800d324:	d902      	bls.n	800d32c <memmove+0x10>
 800d326:	4284      	cmp	r4, r0
 800d328:	4623      	mov	r3, r4
 800d32a:	d807      	bhi.n	800d33c <memmove+0x20>
 800d32c:	1e43      	subs	r3, r0, #1
 800d32e:	42a1      	cmp	r1, r4
 800d330:	d008      	beq.n	800d344 <memmove+0x28>
 800d332:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d336:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d33a:	e7f8      	b.n	800d32e <memmove+0x12>
 800d33c:	4402      	add	r2, r0
 800d33e:	4601      	mov	r1, r0
 800d340:	428a      	cmp	r2, r1
 800d342:	d100      	bne.n	800d346 <memmove+0x2a>
 800d344:	bd10      	pop	{r4, pc}
 800d346:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d34a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d34e:	e7f7      	b.n	800d340 <memmove+0x24>

0800d350 <_realloc_r>:
 800d350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d354:	4680      	mov	r8, r0
 800d356:	4614      	mov	r4, r2
 800d358:	460e      	mov	r6, r1
 800d35a:	b921      	cbnz	r1, 800d366 <_realloc_r+0x16>
 800d35c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d360:	4611      	mov	r1, r2
 800d362:	f7fc bfdb 	b.w	800a31c <_malloc_r>
 800d366:	b92a      	cbnz	r2, 800d374 <_realloc_r+0x24>
 800d368:	f7fc ff6c 	bl	800a244 <_free_r>
 800d36c:	4625      	mov	r5, r4
 800d36e:	4628      	mov	r0, r5
 800d370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d374:	f000 f842 	bl	800d3fc <_malloc_usable_size_r>
 800d378:	4284      	cmp	r4, r0
 800d37a:	4607      	mov	r7, r0
 800d37c:	d802      	bhi.n	800d384 <_realloc_r+0x34>
 800d37e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d382:	d812      	bhi.n	800d3aa <_realloc_r+0x5a>
 800d384:	4621      	mov	r1, r4
 800d386:	4640      	mov	r0, r8
 800d388:	f7fc ffc8 	bl	800a31c <_malloc_r>
 800d38c:	4605      	mov	r5, r0
 800d38e:	2800      	cmp	r0, #0
 800d390:	d0ed      	beq.n	800d36e <_realloc_r+0x1e>
 800d392:	42bc      	cmp	r4, r7
 800d394:	4622      	mov	r2, r4
 800d396:	4631      	mov	r1, r6
 800d398:	bf28      	it	cs
 800d39a:	463a      	movcs	r2, r7
 800d39c:	f7fc ff3c 	bl	800a218 <memcpy>
 800d3a0:	4631      	mov	r1, r6
 800d3a2:	4640      	mov	r0, r8
 800d3a4:	f7fc ff4e 	bl	800a244 <_free_r>
 800d3a8:	e7e1      	b.n	800d36e <_realloc_r+0x1e>
 800d3aa:	4635      	mov	r5, r6
 800d3ac:	e7df      	b.n	800d36e <_realloc_r+0x1e>
	...

0800d3b0 <_read_r>:
 800d3b0:	b538      	push	{r3, r4, r5, lr}
 800d3b2:	4d07      	ldr	r5, [pc, #28]	; (800d3d0 <_read_r+0x20>)
 800d3b4:	4604      	mov	r4, r0
 800d3b6:	4608      	mov	r0, r1
 800d3b8:	4611      	mov	r1, r2
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	602a      	str	r2, [r5, #0]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	f7f8 f8b2 	bl	8005528 <_read>
 800d3c4:	1c43      	adds	r3, r0, #1
 800d3c6:	d102      	bne.n	800d3ce <_read_r+0x1e>
 800d3c8:	682b      	ldr	r3, [r5, #0]
 800d3ca:	b103      	cbz	r3, 800d3ce <_read_r+0x1e>
 800d3cc:	6023      	str	r3, [r4, #0]
 800d3ce:	bd38      	pop	{r3, r4, r5, pc}
 800d3d0:	20000c40 	.word	0x20000c40

0800d3d4 <__ascii_wctomb>:
 800d3d4:	b149      	cbz	r1, 800d3ea <__ascii_wctomb+0x16>
 800d3d6:	2aff      	cmp	r2, #255	; 0xff
 800d3d8:	bf85      	ittet	hi
 800d3da:	238a      	movhi	r3, #138	; 0x8a
 800d3dc:	6003      	strhi	r3, [r0, #0]
 800d3de:	700a      	strbls	r2, [r1, #0]
 800d3e0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d3e4:	bf98      	it	ls
 800d3e6:	2001      	movls	r0, #1
 800d3e8:	4770      	bx	lr
 800d3ea:	4608      	mov	r0, r1
 800d3ec:	4770      	bx	lr

0800d3ee <abort>:
 800d3ee:	b508      	push	{r3, lr}
 800d3f0:	2006      	movs	r0, #6
 800d3f2:	f000 f833 	bl	800d45c <raise>
 800d3f6:	2001      	movs	r0, #1
 800d3f8:	f7f8 f88c 	bl	8005514 <_exit>

0800d3fc <_malloc_usable_size_r>:
 800d3fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d400:	1f18      	subs	r0, r3, #4
 800d402:	2b00      	cmp	r3, #0
 800d404:	bfbc      	itt	lt
 800d406:	580b      	ldrlt	r3, [r1, r0]
 800d408:	18c0      	addlt	r0, r0, r3
 800d40a:	4770      	bx	lr

0800d40c <_raise_r>:
 800d40c:	291f      	cmp	r1, #31
 800d40e:	b538      	push	{r3, r4, r5, lr}
 800d410:	4604      	mov	r4, r0
 800d412:	460d      	mov	r5, r1
 800d414:	d904      	bls.n	800d420 <_raise_r+0x14>
 800d416:	2316      	movs	r3, #22
 800d418:	6003      	str	r3, [r0, #0]
 800d41a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d41e:	bd38      	pop	{r3, r4, r5, pc}
 800d420:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d422:	b112      	cbz	r2, 800d42a <_raise_r+0x1e>
 800d424:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d428:	b94b      	cbnz	r3, 800d43e <_raise_r+0x32>
 800d42a:	4620      	mov	r0, r4
 800d42c:	f000 f830 	bl	800d490 <_getpid_r>
 800d430:	462a      	mov	r2, r5
 800d432:	4601      	mov	r1, r0
 800d434:	4620      	mov	r0, r4
 800d436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d43a:	f000 b817 	b.w	800d46c <_kill_r>
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d00a      	beq.n	800d458 <_raise_r+0x4c>
 800d442:	1c59      	adds	r1, r3, #1
 800d444:	d103      	bne.n	800d44e <_raise_r+0x42>
 800d446:	2316      	movs	r3, #22
 800d448:	6003      	str	r3, [r0, #0]
 800d44a:	2001      	movs	r0, #1
 800d44c:	e7e7      	b.n	800d41e <_raise_r+0x12>
 800d44e:	2400      	movs	r4, #0
 800d450:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d454:	4628      	mov	r0, r5
 800d456:	4798      	blx	r3
 800d458:	2000      	movs	r0, #0
 800d45a:	e7e0      	b.n	800d41e <_raise_r+0x12>

0800d45c <raise>:
 800d45c:	4b02      	ldr	r3, [pc, #8]	; (800d468 <raise+0xc>)
 800d45e:	4601      	mov	r1, r0
 800d460:	6818      	ldr	r0, [r3, #0]
 800d462:	f7ff bfd3 	b.w	800d40c <_raise_r>
 800d466:	bf00      	nop
 800d468:	200009e8 	.word	0x200009e8

0800d46c <_kill_r>:
 800d46c:	b538      	push	{r3, r4, r5, lr}
 800d46e:	4d07      	ldr	r5, [pc, #28]	; (800d48c <_kill_r+0x20>)
 800d470:	2300      	movs	r3, #0
 800d472:	4604      	mov	r4, r0
 800d474:	4608      	mov	r0, r1
 800d476:	4611      	mov	r1, r2
 800d478:	602b      	str	r3, [r5, #0]
 800d47a:	f7f8 f83b 	bl	80054f4 <_kill>
 800d47e:	1c43      	adds	r3, r0, #1
 800d480:	d102      	bne.n	800d488 <_kill_r+0x1c>
 800d482:	682b      	ldr	r3, [r5, #0]
 800d484:	b103      	cbz	r3, 800d488 <_kill_r+0x1c>
 800d486:	6023      	str	r3, [r4, #0]
 800d488:	bd38      	pop	{r3, r4, r5, pc}
 800d48a:	bf00      	nop
 800d48c:	20000c40 	.word	0x20000c40

0800d490 <_getpid_r>:
 800d490:	f7f8 b828 	b.w	80054e4 <_getpid>

0800d494 <sqrt>:
 800d494:	b538      	push	{r3, r4, r5, lr}
 800d496:	ed2d 8b02 	vpush	{d8}
 800d49a:	ec55 4b10 	vmov	r4, r5, d0
 800d49e:	f000 f853 	bl	800d548 <__ieee754_sqrt>
 800d4a2:	4622      	mov	r2, r4
 800d4a4:	462b      	mov	r3, r5
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	4629      	mov	r1, r5
 800d4aa:	eeb0 8a40 	vmov.f32	s16, s0
 800d4ae:	eef0 8a60 	vmov.f32	s17, s1
 800d4b2:	f7f3 fb3b 	bl	8000b2c <__aeabi_dcmpun>
 800d4b6:	b990      	cbnz	r0, 800d4de <sqrt+0x4a>
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	4620      	mov	r0, r4
 800d4be:	4629      	mov	r1, r5
 800d4c0:	f7f3 fb0c 	bl	8000adc <__aeabi_dcmplt>
 800d4c4:	b158      	cbz	r0, 800d4de <sqrt+0x4a>
 800d4c6:	f7fc fe6d 	bl	800a1a4 <__errno>
 800d4ca:	2321      	movs	r3, #33	; 0x21
 800d4cc:	6003      	str	r3, [r0, #0]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	4610      	mov	r0, r2
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	f7f3 f9b9 	bl	800084c <__aeabi_ddiv>
 800d4da:	ec41 0b18 	vmov	d8, r0, r1
 800d4de:	eeb0 0a48 	vmov.f32	s0, s16
 800d4e2:	eef0 0a68 	vmov.f32	s1, s17
 800d4e6:	ecbd 8b02 	vpop	{d8}
 800d4ea:	bd38      	pop	{r3, r4, r5, pc}

0800d4ec <asinf>:
 800d4ec:	b508      	push	{r3, lr}
 800d4ee:	ed2d 8b02 	vpush	{d8}
 800d4f2:	eeb0 8a40 	vmov.f32	s16, s0
 800d4f6:	f000 f8d9 	bl	800d6ac <__ieee754_asinf>
 800d4fa:	eeb4 8a48 	vcmp.f32	s16, s16
 800d4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d502:	eef0 8a40 	vmov.f32	s17, s0
 800d506:	d615      	bvs.n	800d534 <asinf+0x48>
 800d508:	eeb0 0a48 	vmov.f32	s0, s16
 800d50c:	f000 fb2c 	bl	800db68 <fabsf>
 800d510:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d514:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800d518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d51c:	dd0a      	ble.n	800d534 <asinf+0x48>
 800d51e:	f7fc fe41 	bl	800a1a4 <__errno>
 800d522:	ecbd 8b02 	vpop	{d8}
 800d526:	2321      	movs	r3, #33	; 0x21
 800d528:	6003      	str	r3, [r0, #0]
 800d52a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d52e:	4804      	ldr	r0, [pc, #16]	; (800d540 <asinf+0x54>)
 800d530:	f000 bb22 	b.w	800db78 <nanf>
 800d534:	eeb0 0a68 	vmov.f32	s0, s17
 800d538:	ecbd 8b02 	vpop	{d8}
 800d53c:	bd08      	pop	{r3, pc}
 800d53e:	bf00      	nop
 800d540:	0800f1b0 	.word	0x0800f1b0

0800d544 <atan2f>:
 800d544:	f000 b998 	b.w	800d878 <__ieee754_atan2f>

0800d548 <__ieee754_sqrt>:
 800d548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d54c:	ec55 4b10 	vmov	r4, r5, d0
 800d550:	4e55      	ldr	r6, [pc, #340]	; (800d6a8 <__ieee754_sqrt+0x160>)
 800d552:	43ae      	bics	r6, r5
 800d554:	ee10 0a10 	vmov	r0, s0
 800d558:	ee10 3a10 	vmov	r3, s0
 800d55c:	462a      	mov	r2, r5
 800d55e:	4629      	mov	r1, r5
 800d560:	d110      	bne.n	800d584 <__ieee754_sqrt+0x3c>
 800d562:	ee10 2a10 	vmov	r2, s0
 800d566:	462b      	mov	r3, r5
 800d568:	f7f3 f846 	bl	80005f8 <__aeabi_dmul>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	4620      	mov	r0, r4
 800d572:	4629      	mov	r1, r5
 800d574:	f7f2 fe8a 	bl	800028c <__adddf3>
 800d578:	4604      	mov	r4, r0
 800d57a:	460d      	mov	r5, r1
 800d57c:	ec45 4b10 	vmov	d0, r4, r5
 800d580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d584:	2d00      	cmp	r5, #0
 800d586:	dc10      	bgt.n	800d5aa <__ieee754_sqrt+0x62>
 800d588:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d58c:	4330      	orrs	r0, r6
 800d58e:	d0f5      	beq.n	800d57c <__ieee754_sqrt+0x34>
 800d590:	b15d      	cbz	r5, 800d5aa <__ieee754_sqrt+0x62>
 800d592:	ee10 2a10 	vmov	r2, s0
 800d596:	462b      	mov	r3, r5
 800d598:	ee10 0a10 	vmov	r0, s0
 800d59c:	f7f2 fe74 	bl	8000288 <__aeabi_dsub>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	f7f3 f952 	bl	800084c <__aeabi_ddiv>
 800d5a8:	e7e6      	b.n	800d578 <__ieee754_sqrt+0x30>
 800d5aa:	1512      	asrs	r2, r2, #20
 800d5ac:	d074      	beq.n	800d698 <__ieee754_sqrt+0x150>
 800d5ae:	07d4      	lsls	r4, r2, #31
 800d5b0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d5b4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d5b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d5bc:	bf5e      	ittt	pl
 800d5be:	0fda      	lsrpl	r2, r3, #31
 800d5c0:	005b      	lslpl	r3, r3, #1
 800d5c2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d5c6:	2400      	movs	r4, #0
 800d5c8:	0fda      	lsrs	r2, r3, #31
 800d5ca:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d5ce:	107f      	asrs	r7, r7, #1
 800d5d0:	005b      	lsls	r3, r3, #1
 800d5d2:	2516      	movs	r5, #22
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d5da:	1886      	adds	r6, r0, r2
 800d5dc:	428e      	cmp	r6, r1
 800d5de:	bfde      	ittt	le
 800d5e0:	1b89      	suble	r1, r1, r6
 800d5e2:	18b0      	addle	r0, r6, r2
 800d5e4:	18a4      	addle	r4, r4, r2
 800d5e6:	0049      	lsls	r1, r1, #1
 800d5e8:	3d01      	subs	r5, #1
 800d5ea:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d5ee:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d5f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d5f6:	d1f0      	bne.n	800d5da <__ieee754_sqrt+0x92>
 800d5f8:	462a      	mov	r2, r5
 800d5fa:	f04f 0e20 	mov.w	lr, #32
 800d5fe:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d602:	4281      	cmp	r1, r0
 800d604:	eb06 0c05 	add.w	ip, r6, r5
 800d608:	dc02      	bgt.n	800d610 <__ieee754_sqrt+0xc8>
 800d60a:	d113      	bne.n	800d634 <__ieee754_sqrt+0xec>
 800d60c:	459c      	cmp	ip, r3
 800d60e:	d811      	bhi.n	800d634 <__ieee754_sqrt+0xec>
 800d610:	f1bc 0f00 	cmp.w	ip, #0
 800d614:	eb0c 0506 	add.w	r5, ip, r6
 800d618:	da43      	bge.n	800d6a2 <__ieee754_sqrt+0x15a>
 800d61a:	2d00      	cmp	r5, #0
 800d61c:	db41      	blt.n	800d6a2 <__ieee754_sqrt+0x15a>
 800d61e:	f100 0801 	add.w	r8, r0, #1
 800d622:	1a09      	subs	r1, r1, r0
 800d624:	459c      	cmp	ip, r3
 800d626:	bf88      	it	hi
 800d628:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800d62c:	eba3 030c 	sub.w	r3, r3, ip
 800d630:	4432      	add	r2, r6
 800d632:	4640      	mov	r0, r8
 800d634:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d638:	f1be 0e01 	subs.w	lr, lr, #1
 800d63c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d640:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d644:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d648:	d1db      	bne.n	800d602 <__ieee754_sqrt+0xba>
 800d64a:	430b      	orrs	r3, r1
 800d64c:	d006      	beq.n	800d65c <__ieee754_sqrt+0x114>
 800d64e:	1c50      	adds	r0, r2, #1
 800d650:	bf13      	iteet	ne
 800d652:	3201      	addne	r2, #1
 800d654:	3401      	addeq	r4, #1
 800d656:	4672      	moveq	r2, lr
 800d658:	f022 0201 	bicne.w	r2, r2, #1
 800d65c:	1063      	asrs	r3, r4, #1
 800d65e:	0852      	lsrs	r2, r2, #1
 800d660:	07e1      	lsls	r1, r4, #31
 800d662:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d666:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d66a:	bf48      	it	mi
 800d66c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d670:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d674:	4614      	mov	r4, r2
 800d676:	e781      	b.n	800d57c <__ieee754_sqrt+0x34>
 800d678:	0ad9      	lsrs	r1, r3, #11
 800d67a:	3815      	subs	r0, #21
 800d67c:	055b      	lsls	r3, r3, #21
 800d67e:	2900      	cmp	r1, #0
 800d680:	d0fa      	beq.n	800d678 <__ieee754_sqrt+0x130>
 800d682:	02cd      	lsls	r5, r1, #11
 800d684:	d50a      	bpl.n	800d69c <__ieee754_sqrt+0x154>
 800d686:	f1c2 0420 	rsb	r4, r2, #32
 800d68a:	fa23 f404 	lsr.w	r4, r3, r4
 800d68e:	1e55      	subs	r5, r2, #1
 800d690:	4093      	lsls	r3, r2
 800d692:	4321      	orrs	r1, r4
 800d694:	1b42      	subs	r2, r0, r5
 800d696:	e78a      	b.n	800d5ae <__ieee754_sqrt+0x66>
 800d698:	4610      	mov	r0, r2
 800d69a:	e7f0      	b.n	800d67e <__ieee754_sqrt+0x136>
 800d69c:	0049      	lsls	r1, r1, #1
 800d69e:	3201      	adds	r2, #1
 800d6a0:	e7ef      	b.n	800d682 <__ieee754_sqrt+0x13a>
 800d6a2:	4680      	mov	r8, r0
 800d6a4:	e7bd      	b.n	800d622 <__ieee754_sqrt+0xda>
 800d6a6:	bf00      	nop
 800d6a8:	7ff00000 	.word	0x7ff00000

0800d6ac <__ieee754_asinf>:
 800d6ac:	b538      	push	{r3, r4, r5, lr}
 800d6ae:	ee10 5a10 	vmov	r5, s0
 800d6b2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800d6b6:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d6ba:	ed2d 8b04 	vpush	{d8-d9}
 800d6be:	d10c      	bne.n	800d6da <__ieee754_asinf+0x2e>
 800d6c0:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800d838 <__ieee754_asinf+0x18c>
 800d6c4:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800d83c <__ieee754_asinf+0x190>
 800d6c8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d6cc:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d6d0:	eeb0 0a67 	vmov.f32	s0, s15
 800d6d4:	ecbd 8b04 	vpop	{d8-d9}
 800d6d8:	bd38      	pop	{r3, r4, r5, pc}
 800d6da:	dd04      	ble.n	800d6e6 <__ieee754_asinf+0x3a>
 800d6dc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d6e0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d6e4:	e7f6      	b.n	800d6d4 <__ieee754_asinf+0x28>
 800d6e6:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800d6ea:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800d6ee:	da0b      	bge.n	800d708 <__ieee754_asinf+0x5c>
 800d6f0:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800d6f4:	da52      	bge.n	800d79c <__ieee754_asinf+0xf0>
 800d6f6:	eddf 7a52 	vldr	s15, [pc, #328]	; 800d840 <__ieee754_asinf+0x194>
 800d6fa:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d6fe:	eef4 7ae8 	vcmpe.f32	s15, s17
 800d702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d706:	dce5      	bgt.n	800d6d4 <__ieee754_asinf+0x28>
 800d708:	f000 fa2e 	bl	800db68 <fabsf>
 800d70c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800d710:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800d714:	ee20 8a08 	vmul.f32	s16, s0, s16
 800d718:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800d844 <__ieee754_asinf+0x198>
 800d71c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800d848 <__ieee754_asinf+0x19c>
 800d720:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800d84c <__ieee754_asinf+0x1a0>
 800d724:	eea8 7a27 	vfma.f32	s14, s16, s15
 800d728:	eddf 7a49 	vldr	s15, [pc, #292]	; 800d850 <__ieee754_asinf+0x1a4>
 800d72c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d730:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800d854 <__ieee754_asinf+0x1a8>
 800d734:	eea7 7a88 	vfma.f32	s14, s15, s16
 800d738:	eddf 7a47 	vldr	s15, [pc, #284]	; 800d858 <__ieee754_asinf+0x1ac>
 800d73c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d740:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800d85c <__ieee754_asinf+0x1b0>
 800d744:	eea7 9a88 	vfma.f32	s18, s15, s16
 800d748:	eddf 7a45 	vldr	s15, [pc, #276]	; 800d860 <__ieee754_asinf+0x1b4>
 800d74c:	eee8 7a07 	vfma.f32	s15, s16, s14
 800d750:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800d864 <__ieee754_asinf+0x1b8>
 800d754:	eea7 7a88 	vfma.f32	s14, s15, s16
 800d758:	eddf 7a43 	vldr	s15, [pc, #268]	; 800d868 <__ieee754_asinf+0x1bc>
 800d75c:	eee7 7a08 	vfma.f32	s15, s14, s16
 800d760:	eeb0 0a48 	vmov.f32	s0, s16
 800d764:	eee7 8a88 	vfma.f32	s17, s15, s16
 800d768:	f000 f926 	bl	800d9b8 <__ieee754_sqrtf>
 800d76c:	4b3f      	ldr	r3, [pc, #252]	; (800d86c <__ieee754_asinf+0x1c0>)
 800d76e:	ee29 9a08 	vmul.f32	s18, s18, s16
 800d772:	429c      	cmp	r4, r3
 800d774:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800d778:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d77c:	dd3d      	ble.n	800d7fa <__ieee754_asinf+0x14e>
 800d77e:	eea0 0a06 	vfma.f32	s0, s0, s12
 800d782:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800d870 <__ieee754_asinf+0x1c4>
 800d786:	eee0 7a26 	vfma.f32	s15, s0, s13
 800d78a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800d83c <__ieee754_asinf+0x190>
 800d78e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d792:	2d00      	cmp	r5, #0
 800d794:	bfd8      	it	le
 800d796:	eeb1 0a40 	vnegle.f32	s0, s0
 800d79a:	e79b      	b.n	800d6d4 <__ieee754_asinf+0x28>
 800d79c:	ee60 7a00 	vmul.f32	s15, s0, s0
 800d7a0:	eddf 6a28 	vldr	s13, [pc, #160]	; 800d844 <__ieee754_asinf+0x198>
 800d7a4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800d848 <__ieee754_asinf+0x19c>
 800d7a8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800d85c <__ieee754_asinf+0x1b0>
 800d7ac:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800d7b0:	eddf 6a27 	vldr	s13, [pc, #156]	; 800d850 <__ieee754_asinf+0x1a4>
 800d7b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d7b8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800d854 <__ieee754_asinf+0x1a8>
 800d7bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d7c0:	eddf 6a25 	vldr	s13, [pc, #148]	; 800d858 <__ieee754_asinf+0x1ac>
 800d7c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d7c8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800d84c <__ieee754_asinf+0x1a0>
 800d7cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d7d0:	eddf 6a23 	vldr	s13, [pc, #140]	; 800d860 <__ieee754_asinf+0x1b4>
 800d7d4:	eee7 6a86 	vfma.f32	s13, s15, s12
 800d7d8:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800d864 <__ieee754_asinf+0x1b8>
 800d7dc:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800d7e0:	eddf 6a21 	vldr	s13, [pc, #132]	; 800d868 <__ieee754_asinf+0x1bc>
 800d7e4:	eee6 6a27 	vfma.f32	s13, s12, s15
 800d7e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7ec:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800d7f0:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800d7f4:	eea0 0a27 	vfma.f32	s0, s0, s15
 800d7f8:	e76c      	b.n	800d6d4 <__ieee754_asinf+0x28>
 800d7fa:	ee10 3a10 	vmov	r3, s0
 800d7fe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d802:	f023 030f 	bic.w	r3, r3, #15
 800d806:	ee07 3a10 	vmov	s14, r3
 800d80a:	eea7 8a47 	vfms.f32	s16, s14, s14
 800d80e:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d812:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d816:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800d81a:	eddf 7a07 	vldr	s15, [pc, #28]	; 800d838 <__ieee754_asinf+0x18c>
 800d81e:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800d822:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800d826:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800d874 <__ieee754_asinf+0x1c8>
 800d82a:	eeb0 6a40 	vmov.f32	s12, s0
 800d82e:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d832:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d836:	e7aa      	b.n	800d78e <__ieee754_asinf+0xe2>
 800d838:	b33bbd2e 	.word	0xb33bbd2e
 800d83c:	3fc90fdb 	.word	0x3fc90fdb
 800d840:	7149f2ca 	.word	0x7149f2ca
 800d844:	3811ef08 	.word	0x3811ef08
 800d848:	3a4f7f04 	.word	0x3a4f7f04
 800d84c:	3e2aaaab 	.word	0x3e2aaaab
 800d850:	bd241146 	.word	0xbd241146
 800d854:	3e4e0aa8 	.word	0x3e4e0aa8
 800d858:	bea6b090 	.word	0xbea6b090
 800d85c:	3d9dc62e 	.word	0x3d9dc62e
 800d860:	bf303361 	.word	0xbf303361
 800d864:	4001572d 	.word	0x4001572d
 800d868:	c019d139 	.word	0xc019d139
 800d86c:	3f799999 	.word	0x3f799999
 800d870:	333bbd2e 	.word	0x333bbd2e
 800d874:	3f490fdb 	.word	0x3f490fdb

0800d878 <__ieee754_atan2f>:
 800d878:	ee10 2a90 	vmov	r2, s1
 800d87c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800d880:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d884:	b510      	push	{r4, lr}
 800d886:	eef0 7a40 	vmov.f32	s15, s0
 800d88a:	dc06      	bgt.n	800d89a <__ieee754_atan2f+0x22>
 800d88c:	ee10 0a10 	vmov	r0, s0
 800d890:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d894:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d898:	dd04      	ble.n	800d8a4 <__ieee754_atan2f+0x2c>
 800d89a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800d89e:	eeb0 0a67 	vmov.f32	s0, s15
 800d8a2:	bd10      	pop	{r4, pc}
 800d8a4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800d8a8:	d103      	bne.n	800d8b2 <__ieee754_atan2f+0x3a>
 800d8aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8ae:	f000 b887 	b.w	800d9c0 <atanf>
 800d8b2:	1794      	asrs	r4, r2, #30
 800d8b4:	f004 0402 	and.w	r4, r4, #2
 800d8b8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800d8bc:	b943      	cbnz	r3, 800d8d0 <__ieee754_atan2f+0x58>
 800d8be:	2c02      	cmp	r4, #2
 800d8c0:	d05e      	beq.n	800d980 <__ieee754_atan2f+0x108>
 800d8c2:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800d994 <__ieee754_atan2f+0x11c>
 800d8c6:	2c03      	cmp	r4, #3
 800d8c8:	bf08      	it	eq
 800d8ca:	eef0 7a47 	vmoveq.f32	s15, s14
 800d8ce:	e7e6      	b.n	800d89e <__ieee754_atan2f+0x26>
 800d8d0:	b941      	cbnz	r1, 800d8e4 <__ieee754_atan2f+0x6c>
 800d8d2:	eddf 7a31 	vldr	s15, [pc, #196]	; 800d998 <__ieee754_atan2f+0x120>
 800d8d6:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800d99c <__ieee754_atan2f+0x124>
 800d8da:	2800      	cmp	r0, #0
 800d8dc:	bfb8      	it	lt
 800d8de:	eef0 7a40 	vmovlt.f32	s15, s0
 800d8e2:	e7dc      	b.n	800d89e <__ieee754_atan2f+0x26>
 800d8e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d8e8:	d110      	bne.n	800d90c <__ieee754_atan2f+0x94>
 800d8ea:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d8ee:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d8f2:	d107      	bne.n	800d904 <__ieee754_atan2f+0x8c>
 800d8f4:	2c02      	cmp	r4, #2
 800d8f6:	d846      	bhi.n	800d986 <__ieee754_atan2f+0x10e>
 800d8f8:	4b29      	ldr	r3, [pc, #164]	; (800d9a0 <__ieee754_atan2f+0x128>)
 800d8fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d8fe:	edd4 7a00 	vldr	s15, [r4]
 800d902:	e7cc      	b.n	800d89e <__ieee754_atan2f+0x26>
 800d904:	2c02      	cmp	r4, #2
 800d906:	d841      	bhi.n	800d98c <__ieee754_atan2f+0x114>
 800d908:	4b26      	ldr	r3, [pc, #152]	; (800d9a4 <__ieee754_atan2f+0x12c>)
 800d90a:	e7f6      	b.n	800d8fa <__ieee754_atan2f+0x82>
 800d90c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d910:	d0df      	beq.n	800d8d2 <__ieee754_atan2f+0x5a>
 800d912:	1a5b      	subs	r3, r3, r1
 800d914:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800d918:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800d91c:	da1a      	bge.n	800d954 <__ieee754_atan2f+0xdc>
 800d91e:	2a00      	cmp	r2, #0
 800d920:	da01      	bge.n	800d926 <__ieee754_atan2f+0xae>
 800d922:	313c      	adds	r1, #60	; 0x3c
 800d924:	db19      	blt.n	800d95a <__ieee754_atan2f+0xe2>
 800d926:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800d92a:	f000 f91d 	bl	800db68 <fabsf>
 800d92e:	f000 f847 	bl	800d9c0 <atanf>
 800d932:	eef0 7a40 	vmov.f32	s15, s0
 800d936:	2c01      	cmp	r4, #1
 800d938:	d012      	beq.n	800d960 <__ieee754_atan2f+0xe8>
 800d93a:	2c02      	cmp	r4, #2
 800d93c:	d017      	beq.n	800d96e <__ieee754_atan2f+0xf6>
 800d93e:	2c00      	cmp	r4, #0
 800d940:	d0ad      	beq.n	800d89e <__ieee754_atan2f+0x26>
 800d942:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800d9a8 <__ieee754_atan2f+0x130>
 800d946:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d94a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800d9ac <__ieee754_atan2f+0x134>
 800d94e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d952:	e7a4      	b.n	800d89e <__ieee754_atan2f+0x26>
 800d954:	eddf 7a10 	vldr	s15, [pc, #64]	; 800d998 <__ieee754_atan2f+0x120>
 800d958:	e7ed      	b.n	800d936 <__ieee754_atan2f+0xbe>
 800d95a:	eddf 7a15 	vldr	s15, [pc, #84]	; 800d9b0 <__ieee754_atan2f+0x138>
 800d95e:	e7ea      	b.n	800d936 <__ieee754_atan2f+0xbe>
 800d960:	ee17 3a90 	vmov	r3, s15
 800d964:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d968:	ee07 3a90 	vmov	s15, r3
 800d96c:	e797      	b.n	800d89e <__ieee754_atan2f+0x26>
 800d96e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800d9a8 <__ieee754_atan2f+0x130>
 800d972:	ee77 7a80 	vadd.f32	s15, s15, s0
 800d976:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800d9ac <__ieee754_atan2f+0x134>
 800d97a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d97e:	e78e      	b.n	800d89e <__ieee754_atan2f+0x26>
 800d980:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800d9ac <__ieee754_atan2f+0x134>
 800d984:	e78b      	b.n	800d89e <__ieee754_atan2f+0x26>
 800d986:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800d9b4 <__ieee754_atan2f+0x13c>
 800d98a:	e788      	b.n	800d89e <__ieee754_atan2f+0x26>
 800d98c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d9b0 <__ieee754_atan2f+0x138>
 800d990:	e785      	b.n	800d89e <__ieee754_atan2f+0x26>
 800d992:	bf00      	nop
 800d994:	c0490fdb 	.word	0xc0490fdb
 800d998:	3fc90fdb 	.word	0x3fc90fdb
 800d99c:	bfc90fdb 	.word	0xbfc90fdb
 800d9a0:	0800f1bc 	.word	0x0800f1bc
 800d9a4:	0800f1c8 	.word	0x0800f1c8
 800d9a8:	33bbbd2e 	.word	0x33bbbd2e
 800d9ac:	40490fdb 	.word	0x40490fdb
 800d9b0:	00000000 	.word	0x00000000
 800d9b4:	3f490fdb 	.word	0x3f490fdb

0800d9b8 <__ieee754_sqrtf>:
 800d9b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d9bc:	4770      	bx	lr
	...

0800d9c0 <atanf>:
 800d9c0:	b538      	push	{r3, r4, r5, lr}
 800d9c2:	ee10 5a10 	vmov	r5, s0
 800d9c6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800d9ca:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800d9ce:	eef0 7a40 	vmov.f32	s15, s0
 800d9d2:	db10      	blt.n	800d9f6 <atanf+0x36>
 800d9d4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d9d8:	dd04      	ble.n	800d9e4 <atanf+0x24>
 800d9da:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d9de:	eeb0 0a67 	vmov.f32	s0, s15
 800d9e2:	bd38      	pop	{r3, r4, r5, pc}
 800d9e4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800db1c <atanf+0x15c>
 800d9e8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800db20 <atanf+0x160>
 800d9ec:	2d00      	cmp	r5, #0
 800d9ee:	bfd8      	it	le
 800d9f0:	eef0 7a40 	vmovle.f32	s15, s0
 800d9f4:	e7f3      	b.n	800d9de <atanf+0x1e>
 800d9f6:	4b4b      	ldr	r3, [pc, #300]	; (800db24 <atanf+0x164>)
 800d9f8:	429c      	cmp	r4, r3
 800d9fa:	dc10      	bgt.n	800da1e <atanf+0x5e>
 800d9fc:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800da00:	da0a      	bge.n	800da18 <atanf+0x58>
 800da02:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800db28 <atanf+0x168>
 800da06:	ee30 7a07 	vadd.f32	s14, s0, s14
 800da0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da0e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800da12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da16:	dce2      	bgt.n	800d9de <atanf+0x1e>
 800da18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da1c:	e013      	b.n	800da46 <atanf+0x86>
 800da1e:	f000 f8a3 	bl	800db68 <fabsf>
 800da22:	4b42      	ldr	r3, [pc, #264]	; (800db2c <atanf+0x16c>)
 800da24:	429c      	cmp	r4, r3
 800da26:	dc4f      	bgt.n	800dac8 <atanf+0x108>
 800da28:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800da2c:	429c      	cmp	r4, r3
 800da2e:	dc41      	bgt.n	800dab4 <atanf+0xf4>
 800da30:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800da34:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800da38:	eea0 7a27 	vfma.f32	s14, s0, s15
 800da3c:	2300      	movs	r3, #0
 800da3e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800da42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800da46:	1c5a      	adds	r2, r3, #1
 800da48:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800da4c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800db30 <atanf+0x170>
 800da50:	eddf 5a38 	vldr	s11, [pc, #224]	; 800db34 <atanf+0x174>
 800da54:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800db38 <atanf+0x178>
 800da58:	ee66 6a06 	vmul.f32	s13, s12, s12
 800da5c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800da60:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800db3c <atanf+0x17c>
 800da64:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800da68:	eddf 5a35 	vldr	s11, [pc, #212]	; 800db40 <atanf+0x180>
 800da6c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800da70:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800db44 <atanf+0x184>
 800da74:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800da78:	eddf 5a33 	vldr	s11, [pc, #204]	; 800db48 <atanf+0x188>
 800da7c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800da80:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800db4c <atanf+0x18c>
 800da84:	eea6 5a87 	vfma.f32	s10, s13, s14
 800da88:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800db50 <atanf+0x190>
 800da8c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800da90:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800db54 <atanf+0x194>
 800da94:	eea7 5a26 	vfma.f32	s10, s14, s13
 800da98:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800db58 <atanf+0x198>
 800da9c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800daa0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800daa4:	eea5 7a86 	vfma.f32	s14, s11, s12
 800daa8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800daac:	d121      	bne.n	800daf2 <atanf+0x132>
 800daae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dab2:	e794      	b.n	800d9de <atanf+0x1e>
 800dab4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dab8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800dabc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dac0:	2301      	movs	r3, #1
 800dac2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dac6:	e7be      	b.n	800da46 <atanf+0x86>
 800dac8:	4b24      	ldr	r3, [pc, #144]	; (800db5c <atanf+0x19c>)
 800daca:	429c      	cmp	r4, r3
 800dacc:	dc0b      	bgt.n	800dae6 <atanf+0x126>
 800dace:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800dad2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dad6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800dada:	2302      	movs	r3, #2
 800dadc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800dae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dae4:	e7af      	b.n	800da46 <atanf+0x86>
 800dae6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800daea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800daee:	2303      	movs	r3, #3
 800daf0:	e7a9      	b.n	800da46 <atanf+0x86>
 800daf2:	4a1b      	ldr	r2, [pc, #108]	; (800db60 <atanf+0x1a0>)
 800daf4:	491b      	ldr	r1, [pc, #108]	; (800db64 <atanf+0x1a4>)
 800daf6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800dafa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800dafe:	ed93 0a00 	vldr	s0, [r3]
 800db02:	ee37 7a40 	vsub.f32	s14, s14, s0
 800db06:	ed92 0a00 	vldr	s0, [r2]
 800db0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db0e:	2d00      	cmp	r5, #0
 800db10:	ee70 7a67 	vsub.f32	s15, s0, s15
 800db14:	bfb8      	it	lt
 800db16:	eef1 7a67 	vneglt.f32	s15, s15
 800db1a:	e760      	b.n	800d9de <atanf+0x1e>
 800db1c:	3fc90fdb 	.word	0x3fc90fdb
 800db20:	bfc90fdb 	.word	0xbfc90fdb
 800db24:	3edfffff 	.word	0x3edfffff
 800db28:	7149f2ca 	.word	0x7149f2ca
 800db2c:	3f97ffff 	.word	0x3f97ffff
 800db30:	3c8569d7 	.word	0x3c8569d7
 800db34:	3d4bda59 	.word	0x3d4bda59
 800db38:	bd6ef16b 	.word	0xbd6ef16b
 800db3c:	3d886b35 	.word	0x3d886b35
 800db40:	3dba2e6e 	.word	0x3dba2e6e
 800db44:	3e124925 	.word	0x3e124925
 800db48:	3eaaaaab 	.word	0x3eaaaaab
 800db4c:	bd15a221 	.word	0xbd15a221
 800db50:	bd9d8795 	.word	0xbd9d8795
 800db54:	bde38e38 	.word	0xbde38e38
 800db58:	be4ccccd 	.word	0xbe4ccccd
 800db5c:	401bffff 	.word	0x401bffff
 800db60:	0800f1d4 	.word	0x0800f1d4
 800db64:	0800f1e4 	.word	0x0800f1e4

0800db68 <fabsf>:
 800db68:	ee10 3a10 	vmov	r3, s0
 800db6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db70:	ee00 3a10 	vmov	s0, r3
 800db74:	4770      	bx	lr
	...

0800db78 <nanf>:
 800db78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800db80 <nanf+0x8>
 800db7c:	4770      	bx	lr
 800db7e:	bf00      	nop
 800db80:	7fc00000 	.word	0x7fc00000

0800db84 <_init>:
 800db84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db86:	bf00      	nop
 800db88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db8a:	bc08      	pop	{r3}
 800db8c:	469e      	mov	lr, r3
 800db8e:	4770      	bx	lr

0800db90 <_fini>:
 800db90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db92:	bf00      	nop
 800db94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db96:	bc08      	pop	{r3}
 800db98:	469e      	mov	lr, r3
 800db9a:	4770      	bx	lr
