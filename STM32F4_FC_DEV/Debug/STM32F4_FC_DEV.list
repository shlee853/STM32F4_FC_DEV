
STM32F4_FC_DEV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08008c28  08008c28  00018c28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090ec  080090ec  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080090ec  080090ec  000190ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090f4  080090f4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090f4  080090f4  000190f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090f8  080090f8  000190f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080090fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          0000025c  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000444  20000444  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d06c  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029f9  00000000  00000000  0002d284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c90  00000000  00000000  0002fc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b38  00000000  00000000  00030910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d04b  00000000  00000000  00031448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ae47  00000000  00000000  0004e493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009933e  00000000  00000000  000592da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f2618  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004598  00000000  00000000  000f2668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c0c 	.word	0x08008c0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08008c0c 	.word	0x08008c0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t NbData)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <LL_DMA_SetDataLength+0x44>)
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4413      	add	r3, r2
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	0c1b      	lsrs	r3, r3, #16
 8000f6a:	041b      	lsls	r3, r3, #16
 8000f6c:	4908      	ldr	r1, [pc, #32]	; (8000f90 <LL_DMA_SetDataLength+0x44>)
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	440a      	add	r2, r1
 8000f72:	7812      	ldrb	r2, [r2, #0]
 8000f74:	4611      	mov	r1, r2
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	440a      	add	r2, r1
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	604b      	str	r3, [r1, #4]
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	08008c90 	.word	0x08008c90

08000f94 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <LL_DMA_SetMemoryAddress+0x2c>)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4413      	add	r3, r2
 8000fae:	461a      	mov	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	08008c90 	.word	0x08008c90

08000fc4 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <LL_DMA_SetPeriphAddress+0x2c>)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4413      	add	r3, r2
 8000fde:	461a      	mov	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6093      	str	r3, [r2, #8]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	08008c90 	.word	0x08008c90

08000ff4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8000ffe:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <LL_DMA_EnableIT_TC+0x3c>)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	4413      	add	r3, r2
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4908      	ldr	r1, [pc, #32]	; (8001030 <LL_DMA_EnableIT_TC+0x3c>)
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	440a      	add	r2, r1
 8001014:	7812      	ldrb	r2, [r2, #0]
 8001016:	4611      	mov	r1, r2
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	440a      	add	r2, r1
 800101c:	f043 0310 	orr.w	r3, r3, #16
 8001020:	6013      	str	r3, [r2, #0]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	08008c90 	.word	0x08008c90

08001034 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3314      	adds	r3, #20
 8001040:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	e853 3f00 	ldrex	r3, [r3]
 8001048:	60bb      	str	r3, [r7, #8]
   return(result);
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001050:	61fb      	str	r3, [r7, #28]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3314      	adds	r3, #20
 8001056:	69fa      	ldr	r2, [r7, #28]
 8001058:	61ba      	str	r2, [r7, #24]
 800105a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800105c:	6979      	ldr	r1, [r7, #20]
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	e841 2300 	strex	r3, r2, [r1]
 8001064:	613b      	str	r3, [r7, #16]
   return(result);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1e7      	bne.n	800103c <LL_USART_EnableDMAReq_RX+0x8>
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) &(USARTx->DR));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3304      	adds	r3, #4
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <GPS_DMA_init>:

int recv_cnt;
int err_cnt;

void GPS_DMA_init(GPS_RAW_MESSAGE* gps_raw_message, USART_TypeDef* UART,DMA_TypeDef* DMA,uint32_t DMA_STREAM)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	603b      	str	r3, [r7, #0]


	//DMA, INTERRUPT SETTINGS
	LL_DMA_SetMemoryAddress(DMA,DMA_STREAM,(uint32_t)(gps_raw_message->gps_raw_buf));
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3308      	adds	r3, #8
 80010a4:	461a      	mov	r2, r3
 80010a6:	6839      	ldr	r1, [r7, #0]
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff73 	bl	8000f94 <LL_DMA_SetMemoryAddress>
	LL_DMA_SetPeriphAddress(DMA,DMA_STREAM,LL_USART_DMA_GetRegAddr(UART));
 80010ae:	68b8      	ldr	r0, [r7, #8]
 80010b0:	f7ff ffe3 	bl	800107a <LL_USART_DMA_GetRegAddr>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	6839      	ldr	r1, [r7, #0]
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff82 	bl	8000fc4 <LL_DMA_SetPeriphAddress>
	LL_DMA_SetDataLength(DMA,DMA_STREAM,MSG_LENGTH_NAV_SOL);
 80010c0:	223c      	movs	r2, #60	; 0x3c
 80010c2:	6839      	ldr	r1, [r7, #0]
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff41 	bl	8000f4c <LL_DMA_SetDataLength>

	//  LL_DMA_EnableIT_HT(DMA1, LL_DMA_STREAM_1);
    LL_DMA_EnableIT_TC(DMA, DMA_STREAM);
 80010ca:	6839      	ldr	r1, [r7, #0]
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff91 	bl	8000ff4 <LL_DMA_EnableIT_TC>
	LL_USART_EnableDMAReq_RX(UART);
 80010d2:	68b8      	ldr	r0, [r7, #8]
 80010d4:	f7ff ffae 	bl	8001034 <LL_USART_EnableDMAReq_RX>

}
 80010d8:	bf00      	nop
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <GPS_Parsing>:



void GPS_Parsing(GPS_RAW_MESSAGE* message, MSG_NAV* msg_nav, int* recv_cnt, int* err_cnt)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	603b      	str	r3, [r7, #0]
	uint8_t* ptr,*gps_ptr = message->gps_raw_buf;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	3308      	adds	r3, #8
 80010f2:	61fb      	str	r3, [r7, #28]
	int32_t temp;
	unsigned short msg_length = 0, checksum = 0;
 80010f4:	2300      	movs	r3, #0
 80010f6:	837b      	strh	r3, [r7, #26]
 80010f8:	2300      	movs	r3, #0
 80010fa:	833b      	strh	r3, [r7, #24]
	unsigned char classID = 0, messageID = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	75fb      	strb	r3, [r7, #23]
 8001100:	2300      	movs	r3, #0
 8001102:	75bb      	strb	r3, [r7, #22]
	if(gps_ptr[0]==MSG_UBX_SOF1 && gps_ptr[1]==MSG_UBX_SOF2){
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2bb5      	cmp	r3, #181	; 0xb5
 800110a:	d14a      	bne.n	80011a2 <GPS_Parsing+0xc2>
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	3301      	adds	r3, #1
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b62      	cmp	r3, #98	; 0x62
 8001114:	d145      	bne.n	80011a2 <GPS_Parsing+0xc2>

		ptr 		= gps_ptr + 2;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3302      	adds	r3, #2
 800111a:	613b      	str	r3, [r7, #16]
		classID 	= *ptr++;
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	613a      	str	r2, [r7, #16]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	75fb      	strb	r3, [r7, #23]
		messageID 	= *ptr++;
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	613a      	str	r2, [r7, #16]
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	75bb      	strb	r3, [r7, #22]

		if(messageID==MSG_ID_UBX_NAV_POSLLH) {
 8001130:	7dbb      	ldrb	r3, [r7, #22]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d114      	bne.n	8001160 <GPS_Parsing+0x80>
			msg_length 	= (ptr[1] << 8) + (ptr[0]);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	3301      	adds	r3, #1
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b29b      	uxth	r3, r3
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	b29a      	uxth	r2, r3
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	4413      	add	r3, r2
 800114a:	837b      	strh	r3, [r7, #26]
			ptr = ptr +2;
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	3302      	adds	r3, #2
 8001150:	613b      	str	r3, [r7, #16]
			memcpy(msg_nav, ptr, msg_length);
 8001152:	8b7b      	ldrh	r3, [r7, #26]
 8001154:	461a      	mov	r2, r3
 8001156:	6939      	ldr	r1, [r7, #16]
 8001158:	68b8      	ldr	r0, [r7, #8]
 800115a:	f004 fca7 	bl	8005aac <memcpy>
 800115e:	e01a      	b.n	8001196 <GPS_Parsing+0xb6>

//			printf("time:[%d]ms\t lon: [%d]deg\t lat: [%d]deg\t h: [%d]mm\t hMSL: [%d]mm\t hAcc: [%d]mm\t vAcc: [%d]mm\n",msg_nav->iTOW, msg_nav->lon,msg_nav->lat, msg_nav->h, msg_nav->hMSL, msg_nav->hAcc, msg_nav->vAcc);

		}
		else if(messageID==MSG_ID_UBX_NAV_SOL) {
 8001160:	7dbb      	ldrb	r3, [r7, #22]
 8001162:	2b06      	cmp	r3, #6
 8001164:	d117      	bne.n	8001196 <GPS_Parsing+0xb6>
			msg_length 	= (ptr[1] << 8) + (ptr[0]);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	3301      	adds	r3, #1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b29b      	uxth	r3, r3
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b29a      	uxth	r2, r3
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b29b      	uxth	r3, r3
 8001178:	4413      	add	r3, r2
 800117a:	837b      	strh	r3, [r7, #26]
			ptr = ptr +2;
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	3302      	adds	r3, #2
 8001180:	613b      	str	r3, [r7, #16]
			msg_nav = msg_nav + MSG_LENGTH_NAV_POSLLH - 8;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	f503 7344 	add.w	r3, r3, #784	; 0x310
 8001188:	60bb      	str	r3, [r7, #8]
			memcpy(msg_nav, ptr, msg_length);
 800118a:	8b7b      	ldrh	r3, [r7, #26]
 800118c:	461a      	mov	r2, r3
 800118e:	6939      	ldr	r1, [r7, #16]
 8001190:	68b8      	ldr	r0, [r7, #8]
 8001192:	f004 fc8b 	bl	8005aac <memcpy>
		}

		recv_cnt[0]++;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	e005      	b.n	80011ae <GPS_Parsing+0xce>

	}

	else
	{
		err_cnt[0]++;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	601a      	str	r2, [r3, #0]
	}
//	printf("recv: %d\t err: %d\n", recv_cnt[0], err_cnt[0]);

}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3720      	adds	r7, #32
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011c4:	4907      	ldr	r1, [pc, #28]	; (80011e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4013      	ands	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011d6:	68fb      	ldr	r3, [r7, #12]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	40023800 	.word	0x40023800

080011e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011f4:	4907      	ldr	r1, [pc, #28]	; (8001214 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4013      	ands	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40023800 	.word	0x40023800

08001218 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	601a      	str	r2, [r3, #0]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f023 0210 	bic.w	r2, r3, #16
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	431a      	orrs	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	605a      	str	r2, [r3, #4]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b01      	cmp	r3, #1
 8001270:	d101      	bne.n	8001276 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b02      	cmp	r3, #2
 8001296:	d101      	bne.n	800129c <LL_SPI_IsActiveFlag_TXE+0x18>
 8001298:	2301      	movs	r3, #1
 800129a:	e000      	b.n	800129e <LL_SPI_IsActiveFlag_TXE+0x1a>
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	330c      	adds	r3, #12
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b085      	sub	sp, #20
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	330c      	adds	r3, #12
 80012d6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	78fa      	ldrb	r2, [r7, #3]
 80012dc:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691a      	ldr	r2, [r3, #16]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	4013      	ands	r3, r2
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	bf0c      	ite	eq
 8001302:	2301      	moveq	r3, #1
 8001304:	2300      	movne	r3, #0
 8001306:	b2db      	uxtb	r3, r3
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	619a      	str	r2, [r3, #24]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	041a      	lsls	r2, r3, #16
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	619a      	str	r2, [r3, #24]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b090      	sub	sp, #64	; 0x40
 8001354:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	2228      	movs	r2, #40	; 0x28
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f004 fbb2 	bl	8005ac8 <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
 8001372:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001374:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001378:	f7ff ff36 	bl	80011e8 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff ff1b 	bl	80011b8 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001382:	2004      	movs	r0, #4
 8001384:	f7ff ff18 	bl	80011b8 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001388:	23e0      	movs	r3, #224	; 0xe0
 800138a:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800138c:	2302      	movs	r3, #2
 800138e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800139c:	2305      	movs	r3, #5
 800139e:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	463b      	mov	r3, r7
 80013a2:	4619      	mov	r1, r3
 80013a4:	4825      	ldr	r0, [pc, #148]	; (800143c <ICM20602_GPIO_SPI_Initialization+0xec>)
 80013a6:	f003 fb23 	bl	80049f0 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80013ae:	f44f 7382 	mov.w	r3, #260	; 0x104
 80013b2:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80013b8:	2302      	movs	r3, #2
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80013bc:	2301      	movs	r3, #1
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80013c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 80013c6:	2310      	movs	r3, #16
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80013ca:	2300      	movs	r3, #0
 80013cc:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 10;
 80013d2:	230a      	movs	r3, #10
 80013d4:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 80013d6:	f107 0318 	add.w	r3, r7, #24
 80013da:	4619      	mov	r1, r3
 80013dc:	4818      	ldr	r0, [pc, #96]	; (8001440 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80013de:	f003 fcd8 	bl	8004d92 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80013e2:	2100      	movs	r1, #0
 80013e4:	4816      	ldr	r0, [pc, #88]	; (8001440 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80013e6:	f7ff ff27 	bl	8001238 <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 80013ea:	2110      	movs	r1, #16
 80013ec:	4813      	ldr	r0, [pc, #76]	; (800143c <ICM20602_GPIO_SPI_Initialization+0xec>)
 80013ee:	f7ff ff9f 	bl	8001330 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80013f2:	2310      	movs	r3, #16
 80013f4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013f6:	2301      	movs	r3, #1
 80013f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 8001406:	463b      	mov	r3, r7
 8001408:	4619      	mov	r1, r3
 800140a:	480c      	ldr	r0, [pc, #48]	; (800143c <ICM20602_GPIO_SPI_Initialization+0xec>)
 800140c:	f003 faf0 	bl	80049f0 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 8001410:	2310      	movs	r3, #16
 8001412:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001418:	2301      	movs	r3, #1
 800141a:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 800141c:	463b      	mov	r3, r7
 800141e:	4619      	mov	r1, r3
 8001420:	4808      	ldr	r0, [pc, #32]	; (8001444 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 8001422:	f003 fae5 	bl	80049f0 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8001428:	f7ff fef6 	bl	8001218 <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 800142c:	2110      	movs	r1, #16
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <ICM20602_GPIO_SPI_Initialization+0xec>)
 8001430:	f7ff ff70 	bl	8001314 <LL_GPIO_SetOutputPin>
}
 8001434:	bf00      	nop
 8001436:	3740      	adds	r7, #64	; 0x40
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40020000 	.word	0x40020000
 8001440:	40013000 	.word	0x40013000
 8001444:	40020800 	.word	0x40020800

08001448 <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8001452:	bf00      	nop
 8001454:	480c      	ldr	r0, [pc, #48]	; (8001488 <SPI1_SendByte+0x40>)
 8001456:	f7ff ff15 	bl	8001284 <LL_SPI_IsActiveFlag_TXE>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f9      	beq.n	8001454 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	4619      	mov	r1, r3
 8001464:	4808      	ldr	r0, [pc, #32]	; (8001488 <SPI1_SendByte+0x40>)
 8001466:	f7ff ff2e 	bl	80012c6 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 800146a:	bf00      	nop
 800146c:	4806      	ldr	r0, [pc, #24]	; (8001488 <SPI1_SendByte+0x40>)
 800146e:	f7ff fef6 	bl	800125e <LL_SPI_IsActiveFlag_RXNE>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f9      	beq.n	800146c <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 8001478:	4803      	ldr	r0, [pc, #12]	; (8001488 <SPI1_SendByte+0x40>)
 800147a:	f7ff ff16 	bl	80012aa <LL_SPI_ReceiveData8>
 800147e:	4603      	mov	r3, r0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40013000 	.word	0x40013000

0800148c <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 8001496:	2110      	movs	r1, #16
 8001498:	480b      	ldr	r0, [pc, #44]	; (80014c8 <ICM20602_Readbyte+0x3c>)
 800149a:	f7ff ff49 	bl	8001330 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff ffce 	bl	8001448 <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 80014ac:	2000      	movs	r0, #0
 80014ae:	f7ff ffcb 	bl	8001448 <SPI1_SendByte>
 80014b2:	4603      	mov	r3, r0
 80014b4:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 80014b6:	2110      	movs	r1, #16
 80014b8:	4803      	ldr	r0, [pc, #12]	; (80014c8 <ICM20602_Readbyte+0x3c>)
 80014ba:	f7ff ff2b 	bl	8001314 <LL_GPIO_SetOutputPin>
	
	return val;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40020000 	.word	0x40020000

080014cc <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	603a      	str	r2, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
 80014d8:	460b      	mov	r3, r1
 80014da:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 80014e0:	2110      	movs	r1, #16
 80014e2:	4810      	ldr	r0, [pc, #64]	; (8001524 <ICM20602_Readbytes+0x58>)
 80014e4:	f7ff ff24 	bl	8001330 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ffa9 	bl	8001448 <SPI1_SendByte>
	while(i < len)
 80014f6:	e009      	b.n	800150c <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	60fa      	str	r2, [r7, #12]
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	18d4      	adds	r4, r2, r3
 8001502:	2000      	movs	r0, #0
 8001504:	f7ff ffa0 	bl	8001448 <SPI1_SendByte>
 8001508:	4603      	mov	r3, r0
 800150a:	7023      	strb	r3, [r4, #0]
	while(i < len)
 800150c:	79bb      	ldrb	r3, [r7, #6]
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d3f1      	bcc.n	80014f8 <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 8001514:	2110      	movs	r1, #16
 8001516:	4803      	ldr	r0, [pc, #12]	; (8001524 <ICM20602_Readbytes+0x58>)
 8001518:	f7ff fefc 	bl	8001314 <LL_GPIO_SetOutputPin>
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bd90      	pop	{r4, r7, pc}
 8001524:	40020000 	.word	0x40020000

08001528 <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	460a      	mov	r2, r1
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	4613      	mov	r3, r2
 8001536:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 8001538:	2110      	movs	r1, #16
 800153a:	480b      	ldr	r0, [pc, #44]	; (8001568 <ICM20602_Writebyte+0x40>)
 800153c:	f7ff fef8 	bl	8001330 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001546:	b2db      	uxtb	r3, r3
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff7d 	bl	8001448 <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 800154e:	79bb      	ldrb	r3, [r7, #6]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff79 	bl	8001448 <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 8001556:	2110      	movs	r1, #16
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <ICM20602_Writebyte+0x40>)
 800155a:	f7ff fedb 	bl	8001314 <LL_GPIO_SetOutputPin>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40020000 	.word	0x40020000

0800156c <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 8001588:	f7ff fee2 	bl	8001350 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 800158c:	4838      	ldr	r0, [pc, #224]	; (8001670 <ICM20602_Initialization+0x104>)
 800158e:	f004 ff0d 	bl	80063ac <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8001592:	2075      	movs	r0, #117	; 0x75
 8001594:	f7ff ff7a 	bl	800148c <ICM20602_Readbyte>
 8001598:	4603      	mov	r3, r0
 800159a:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	2b12      	cmp	r3, #18
 80015a0:	d105      	bne.n	80015ae <ICM20602_Initialization+0x42>
	{
		printf("\r\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4833      	ldr	r0, [pc, #204]	; (8001674 <ICM20602_Initialization+0x108>)
 80015a8:	f004 ff00 	bl	80063ac <iprintf>
 80015ac:	e012      	b.n	80015d4 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	2b12      	cmp	r3, #18
 80015b2:	d00f      	beq.n	80015d4 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 80015b4:	2075      	movs	r0, #117	; 0x75
 80015b6:	f7ff ff69 	bl	800148c <ICM20602_Readbyte>
 80015ba:	4603      	mov	r3, r0
 80015bc:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	2b12      	cmp	r3, #18
 80015c2:	d007      	beq.n	80015d4 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	2212      	movs	r2, #18
 80015c8:	4619      	mov	r1, r3
 80015ca:	482b      	ldr	r0, [pc, #172]	; (8001678 <ICM20602_Initialization+0x10c>)
 80015cc:	f004 feee 	bl	80063ac <iprintf>
			return 1; //ERROR
 80015d0:	2301      	movs	r3, #1
 80015d2:	e048      	b.n	8001666 <ICM20602_Initialization+0xfa>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	206b      	movs	r0, #107	; 0x6b
 80015d8:	f7ff ffa6 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 80015dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015e0:	f001 fdde 	bl	80031a0 <usDelay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); // Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 80015e4:	2101      	movs	r1, #1
 80015e6:	206b      	movs	r0, #107	; 0x6b
 80015e8:	f7ff ff9e 	bl	8001528 <ICM20602_Writebyte>
									// 온도센서 끄면 자이로 값 이상하게 출력됨
	usDelay(50000);
 80015ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015f0:	f001 fdd6 	bl	80031a0 <usDelay>

	// PWR_MGMT_2 0x6C
	//ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
	ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
 80015f4:	2100      	movs	r1, #0
 80015f6:	206c      	movs	r0, #108	; 0x6c
 80015f8:	f7ff ff96 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 80015fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001600:	f001 fdce 	bl	80031a0 <usDelay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 8001604:	2100      	movs	r1, #0
 8001606:	2019      	movs	r0, #25
 8001608:	f7ff ff8e 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800160c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001610:	f001 fdc6 	bl	80031a0 <usDelay>
	
	// Gyro DLPF Config
//	ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 8001614:	2105      	movs	r1, #5
 8001616:	201a      	movs	r0, #26
 8001618:	f7ff ff86 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800161c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001620:	f001 fdbe 	bl	80031a0 <usDelay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 8001624:	2118      	movs	r1, #24
 8001626:	201b      	movs	r0, #27
 8001628:	f7ff ff7e 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800162c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001630:	f001 fdb6 	bl	80031a0 <usDelay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 8001634:	2118      	movs	r1, #24
 8001636:	201c      	movs	r0, #28
 8001638:	f7ff ff76 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800163c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001640:	f001 fdae 	bl	80031a0 <usDelay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 8001644:	2103      	movs	r1, #3
 8001646:	201d      	movs	r0, #29
 8001648:	f7ff ff6e 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800164c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001650:	f001 fda6 	bl	80031a0 <usDelay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 8001654:	2101      	movs	r1, #1
 8001656:	2038      	movs	r0, #56	; 0x38
 8001658:	f7ff ff66 	bl	8001528 <ICM20602_Writebyte>
	usDelay(50000);
 800165c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001660:	f001 fd9e 	bl	80031a0 <usDelay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	08008c28 	.word	0x08008c28
 8001674:	08008c40 	.word	0x08008c40
 8001678:	08008c64 	.word	0x08008c64

0800167c <ICM20602_Get6AxisRawData>:

void ICM20602_Get6AxisRawData(short* accel, short* gyro)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
	unsigned char data[14];
	ICM20602_Readbytes(ACCEL_XOUT_H, 14, data);
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	461a      	mov	r2, r3
 800168c:	210e      	movs	r1, #14
 800168e:	203b      	movs	r0, #59	; 0x3b
 8001690:	f7ff ff1c 	bl	80014cc <ICM20602_Readbytes>
	
	accel[0] = (data[0] << 8) | data[1];
 8001694:	7a3b      	ldrb	r3, [r7, #8]
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	b21a      	sxth	r2, r3
 800169a:	7a7b      	ldrb	r3, [r7, #9]
 800169c:	b21b      	sxth	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	801a      	strh	r2, [r3, #0]
	accel[1] = (data[2] << 8) | data[3];
 80016a6:	7abb      	ldrb	r3, [r7, #10]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	b219      	sxth	r1, r3
 80016ac:	7afb      	ldrb	r3, [r7, #11]
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3302      	adds	r3, #2
 80016b4:	430a      	orrs	r2, r1
 80016b6:	b212      	sxth	r2, r2
 80016b8:	801a      	strh	r2, [r3, #0]
	accel[2] = (data[4] << 8) | data[5];
 80016ba:	7b3b      	ldrb	r3, [r7, #12]
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b219      	sxth	r1, r3
 80016c0:	7b7b      	ldrb	r3, [r7, #13]
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3304      	adds	r3, #4
 80016c8:	430a      	orrs	r2, r1
 80016ca:	b212      	sxth	r2, r2
 80016cc:	801a      	strh	r2, [r3, #0]

	gyro[0] = ((data[8] << 8) | data[9]);
 80016ce:	7c3b      	ldrb	r3, [r7, #16]
 80016d0:	021b      	lsls	r3, r3, #8
 80016d2:	b21a      	sxth	r2, r3
 80016d4:	7c7b      	ldrb	r3, [r7, #17]
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	4313      	orrs	r3, r2
 80016da:	b21a      	sxth	r2, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[10] << 8) | data[11]);
 80016e0:	7cbb      	ldrb	r3, [r7, #18]
 80016e2:	021b      	lsls	r3, r3, #8
 80016e4:	b219      	sxth	r1, r3
 80016e6:	7cfb      	ldrb	r3, [r7, #19]
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	3302      	adds	r3, #2
 80016ee:	430a      	orrs	r2, r1
 80016f0:	b212      	sxth	r2, r2
 80016f2:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[12] << 8) | data[13]);
 80016f4:	7d3b      	ldrb	r3, [r7, #20]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b219      	sxth	r1, r3
 80016fa:	7d7b      	ldrb	r3, [r7, #21]
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	3304      	adds	r3, #4
 8001702:	430a      	orrs	r2, r1
 8001704:	b212      	sxth	r2, r2
 8001706:	801a      	strh	r2, [r3, #0]
}
 8001708:	bf00      	nop
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8001714:	2110      	movs	r1, #16
 8001716:	4803      	ldr	r0, [pc, #12]	; (8001724 <ICM20602_DataReady+0x14>)
 8001718:	f7ff fde7 	bl	80012ea <LL_GPIO_IsInputPinSet>
 800171c:	4603      	mov	r3, r0
}
 800171e:	4618      	mov	r0, r3
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40020800 	.word	0x40020800

08001728 <GetRPY>:
float twoKi = 0.0f;                      // 2 * integral gain (Ki)
float integralFBx = 0.0f,  integralFBy = 0.0f, integralFBz = 0.0f; // integral error terms scaled by Ki


void GetRPY(float* sampleFreq)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af02      	add	r7, sp, #8
 800172e:	6078      	str	r0, [r7, #4]


	  ICM20602_Get6AxisRawData(&ICM20602.acc_x_raw, &ICM20602.gyro_x_raw);	//	39.11us
 8001730:	4967      	ldr	r1, [pc, #412]	; (80018d0 <GetRPY+0x1a8>)
 8001732:	4868      	ldr	r0, [pc, #416]	; (80018d4 <GetRPY+0x1ac>)
 8001734:	f7ff ffa2 	bl	800167c <ICM20602_Get6AxisRawData>
	  GYROX_RATE = (ICM20602.gyro_x_raw - gx_cal) * 0.06103515625 * 0.017453289;
 8001738:	4b66      	ldr	r3, [pc, #408]	; (80018d4 <GetRPY+0x1ac>)
 800173a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800173e:	ee07 3a90 	vmov	s15, r3
 8001742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001746:	4b64      	ldr	r3, [pc, #400]	; (80018d8 <GetRPY+0x1b0>)
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001750:	ee17 0a90 	vmov	r0, s15
 8001754:	f7fe fef8 	bl	8000548 <__aeabi_f2d>
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	4b5f      	ldr	r3, [pc, #380]	; (80018dc <GetRPY+0x1b4>)
 800175e:	f7fe ff4b 	bl	80005f8 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	a357      	add	r3, pc, #348	; (adr r3, 80018c8 <GetRPY+0x1a0>)
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	f7fe ff42 	bl	80005f8 <__aeabi_dmul>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f7ff fa14 	bl	8000ba8 <__aeabi_d2f>
 8001780:	4603      	mov	r3, r0
 8001782:	4a57      	ldr	r2, [pc, #348]	; (80018e0 <GetRPY+0x1b8>)
 8001784:	6013      	str	r3, [r2, #0]
	  GYROY_RATE = (ICM20602.gyro_y_raw - gy_cal) * 0.06103515625 * 0.017453289;
 8001786:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <GetRPY+0x1ac>)
 8001788:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001794:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <GetRPY+0x1bc>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179e:	ee17 0a90 	vmov	r0, s15
 80017a2:	f7fe fed1 	bl	8000548 <__aeabi_f2d>
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	4b4c      	ldr	r3, [pc, #304]	; (80018dc <GetRPY+0x1b4>)
 80017ac:	f7fe ff24 	bl	80005f8 <__aeabi_dmul>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	a343      	add	r3, pc, #268	; (adr r3, 80018c8 <GetRPY+0x1a0>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7fe ff1b 	bl	80005f8 <__aeabi_dmul>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f9ed 	bl	8000ba8 <__aeabi_d2f>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4a45      	ldr	r2, [pc, #276]	; (80018e8 <GetRPY+0x1c0>)
 80017d2:	6013      	str	r3, [r2, #0]
	  GYROZ_RATE = (ICM20602.gyro_z_raw - gz_cal) * 0.06103515625 * 0.017453289;
 80017d4:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <GetRPY+0x1ac>)
 80017d6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e2:	4b42      	ldr	r3, [pc, #264]	; (80018ec <GetRPY+0x1c4>)
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ec:	ee17 0a90 	vmov	r0, s15
 80017f0:	f7fe feaa 	bl	8000548 <__aeabi_f2d>
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4b38      	ldr	r3, [pc, #224]	; (80018dc <GetRPY+0x1b4>)
 80017fa:	f7fe fefd 	bl	80005f8 <__aeabi_dmul>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	a330      	add	r3, pc, #192	; (adr r3, 80018c8 <GetRPY+0x1a0>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe fef4 	bl	80005f8 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f9c6 	bl	8000ba8 <__aeabi_d2f>
 800181c:	4603      	mov	r3, r0
 800181e:	4a34      	ldr	r2, [pc, #208]	; (80018f0 <GetRPY+0x1c8>)
 8001820:	6013      	str	r3, [r2, #0]

	  ACCX_RATE = (ICM20602.acc_x_raw - ax_cal) * 0.00048828125;
 8001822:	4b2c      	ldr	r3, [pc, #176]	; (80018d4 <GetRPY+0x1ac>)
 8001824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001828:	ee07 3a90 	vmov	s15, r3
 800182c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001830:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <GetRPY+0x1cc>)
 8001832:	edd3 7a00 	vldr	s15, [r3]
 8001836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800183a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80018f8 <GetRPY+0x1d0>
 800183e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <GetRPY+0x1d4>)
 8001844:	edc3 7a00 	vstr	s15, [r3]
	  ACCY_RATE = (ICM20602.acc_y_raw - ay_cal) * 0.00048828125;
 8001848:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <GetRPY+0x1ac>)
 800184a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001856:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <GetRPY+0x1d8>)
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001860:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80018f8 <GetRPY+0x1d0>
 8001864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001868:	4b26      	ldr	r3, [pc, #152]	; (8001904 <GetRPY+0x1dc>)
 800186a:	edc3 7a00 	vstr	s15, [r3]
	  ACCZ_RATE = (ICM20602.acc_z_raw) * 0.00048828125;
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <GetRPY+0x1ac>)
 8001870:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe55 	bl	8000524 <__aeabi_i2d>
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8001882:	f7fe feb9 	bl	80005f8 <__aeabi_dmul>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff f98b 	bl	8000ba8 <__aeabi_d2f>
 8001892:	4603      	mov	r3, r0
 8001894:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <GetRPY+0x1e0>)
 8001896:	6013      	str	r3, [r2, #0]

//		  MadgwickQuaternionUpdate(&ACCX_RATE,&ACCY_RATE,&ACCZ_RATE,&GYROX_RATE,&GYROY_RATE,&GYROZ_RATE);	//57us
	  MahonyAHRSupdateIMU(&GYROX_RATE,&GYROY_RATE,&GYROZ_RATE, &ACCX_RATE,&ACCY_RATE,&ACCZ_RATE, *sampleFreq);		//42us
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	edd3 7a00 	vldr	s15, [r3]
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <GetRPY+0x1e0>)
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <GetRPY+0x1dc>)
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	eeb0 0a67 	vmov.f32	s0, s15
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <GetRPY+0x1d4>)
 80018ac:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <GetRPY+0x1c8>)
 80018ae:	490e      	ldr	r1, [pc, #56]	; (80018e8 <GetRPY+0x1c0>)
 80018b0:	480b      	ldr	r0, [pc, #44]	; (80018e0 <GetRPY+0x1b8>)
 80018b2:	f000 f903 	bl	8001abc <MahonyAHRSupdateIMU>
	  Quaternion_Update(&q);	//10us
 80018b6:	4815      	ldr	r0, [pc, #84]	; (800190c <GetRPY+0x1e4>)
 80018b8:	f000 f82a 	bl	8001910 <Quaternion_Update>

//		  printf("%.2f\n",(sampleFreq[0]));
//		  printf("%.d %.d %.d\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
//		  printf("%.1f %.1f %.1f\n", GYROX_RATE, GYROY_RATE, GYROZ_RATE);
//		  printf("%.1f %.1f %.1f\n", ACCX_RATE, ACCY_RATE, ACCZ_RATE);
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	f3af 8000 	nop.w
 80018c8:	65d9bd65 	.word	0x65d9bd65
 80018cc:	3f91df46 	.word	0x3f91df46
 80018d0:	20000284 	.word	0x20000284
 80018d4:	2000027c 	.word	0x2000027c
 80018d8:	2000021c 	.word	0x2000021c
 80018dc:	3faf4000 	.word	0x3faf4000
 80018e0:	20000204 	.word	0x20000204
 80018e4:	20000220 	.word	0x20000220
 80018e8:	20000208 	.word	0x20000208
 80018ec:	20000224 	.word	0x20000224
 80018f0:	2000020c 	.word	0x2000020c
 80018f4:	20000228 	.word	0x20000228
 80018f8:	3a000000 	.word	0x3a000000
 80018fc:	20000210 	.word	0x20000210
 8001900:	2000022c 	.word	0x2000022c
 8001904:	20000214 	.word	0x20000214
 8001908:	20000218 	.word	0x20000218
 800190c:	20000000 	.word	0x20000000

08001910 <Quaternion_Update>:

void Quaternion_Update(float* q)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;

	q1 = q[0]; //x
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	617b      	str	r3, [r7, #20]
	q2 = q[1]; //y
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	613b      	str	r3, [r7, #16]
	q3 = q[2]; //z
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	60fb      	str	r3, [r7, #12]
	q4 = q[3]; //w
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	60bb      	str	r3, [r7, #8]


	Yaw 	= -atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 8001930:	ed97 7a04 	vldr	s14, [r7, #16]
 8001934:	edd7 7a03 	vldr	s15, [r7, #12]
 8001938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800193c:	edd7 6a05 	vldr	s13, [r7, #20]
 8001940:	edd7 7a02 	vldr	s15, [r7, #8]
 8001944:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800194c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001950:	edd7 7a05 	vldr	s15, [r7, #20]
 8001954:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001958:	edd7 7a04 	vldr	s15, [r7, #16]
 800195c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001960:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001964:	edd7 7a03 	vldr	s15, [r7, #12]
 8001968:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800196c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001970:	edd7 7a02 	vldr	s15, [r7, #8]
 8001974:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197c:	eef0 0a67 	vmov.f32	s1, s15
 8001980:	eeb0 0a66 	vmov.f32	s0, s13
 8001984:	f006 fe22 	bl	80085cc <atan2f>
 8001988:	eef0 7a40 	vmov.f32	s15, s0
 800198c:	eef1 7a67 	vneg.f32	s15, s15
 8001990:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <Quaternion_Update+0x198>)
 8001992:	edc3 7a00 	vstr	s15, [r3]
	Pitch  	= -asinf(2.0f * (q2*q4 - q1*q3));
 8001996:	ed97 7a04 	vldr	s14, [r7, #16]
 800199a:	edd7 7a02 	vldr	s15, [r7, #8]
 800199e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a2:	edd7 6a05 	vldr	s13, [r7, #20]
 80019a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80019aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019b6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ba:	f006 fddb 	bl	8008574 <asinf>
 80019be:	eef0 7a40 	vmov.f32	s15, s0
 80019c2:	eef1 7a67 	vneg.f32	s15, s15
 80019c6:	4b39      	ldr	r3, [pc, #228]	; (8001aac <Quaternion_Update+0x19c>)
 80019c8:	edc3 7a00 	vstr	s15, [r3]
	Roll   	= atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 80019cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80019d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80019d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d8:	edd7 6a03 	vldr	s13, [r7, #12]
 80019dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80019e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80019ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80019f0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80019f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a00:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a04:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a18:	eef0 0a67 	vmov.f32	s1, s15
 8001a1c:	eeb0 0a66 	vmov.f32	s0, s13
 8001a20:	f006 fdd4 	bl	80085cc <atan2f>
 8001a24:	eef0 7a40 	vmov.f32	s15, s0
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <Quaternion_Update+0x1a0>)
 8001a2a:	edc3 7a00 	vstr	s15, [r3]

	Pitch *= RAD2DEG;
 8001a2e:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <Quaternion_Update+0x19c>)
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001ab4 <Quaternion_Update+0x1a4>
 8001a38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <Quaternion_Update+0x19c>)
 8001a3e:	edc3 7a00 	vstr	s15, [r3]
	Roll  *= RAD2DEG;
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <Quaternion_Update+0x1a0>)
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001ab4 <Quaternion_Update+0x1a4>
 8001a4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <Quaternion_Update+0x1a0>)
 8001a52:	edc3 7a00 	vstr	s15, [r3]
	Yaw   *= RAD2DEG;
 8001a56:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001ab4 <Quaternion_Update+0x1a4>
 8001a60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a64:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a66:	edc3 7a00 	vstr	s15, [r3]
	
	if(Yaw>=0)
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a6c:	edd3 7a00 	vldr	s15, [r3]
 8001a70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a78:	db0a      	blt.n	8001a90 <Quaternion_Update+0x180>
		Yaw = 360.f - Yaw;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001ab8 <Quaternion_Update+0x1a8>
 8001a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a8a:	edc3 7a00 	vstr	s15, [r3]
	
//	 printf("%d %d %d\n", (int)(Roll), (int)(Pitch), (int)(Yaw));
//	 printf("%d %d %d\n", (int)(q[0]*100), (int)(q[1]*100),(int)(q[2]*100));


}
 8001a8e:	e007      	b.n	8001aa0 <Quaternion_Update+0x190>
		Yaw = -Yaw;
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	eef1 7a67 	vneg.f32	s15, s15
 8001a9a:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <Quaternion_Update+0x198>)
 8001a9c:	edc3 7a00 	vstr	s15, [r3]
}
 8001aa0:	bf00      	nop
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	200002a4 	.word	0x200002a4
 8001aac:	200002ac 	.word	0x200002ac
 8001ab0:	200002a8 	.word	0x200002a8
 8001ab4:	42652ee1 	.word	0x42652ee1
 8001ab8:	43b40000 	.word	0x43b40000

08001abc <MahonyAHRSupdateIMU>:
    q[2] = q3 * norm;
    q[3] = q4 * norm;
}


void MahonyAHRSupdateIMU(float* gx, float* gy, float* gz, float* ax, float* ay, float* az, float sampleFreq) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b090      	sub	sp, #64	; 0x40
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6178      	str	r0, [r7, #20]
 8001ac4:	6139      	str	r1, [r7, #16]
 8001ac6:	60fa      	str	r2, [r7, #12]
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	ed87 0a01 	vstr	s0, [r7, #4]
  float halfvx, halfvy, halfvz;
  float halfex, halfey, halfez;
  float qa, qb, qc;

  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if(!((ax[0] == 0.0f) && (ay[0] == 0.0f) && (az[0] == 0.0f))) {
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001adc:	d110      	bne.n	8001b00 <MahonyAHRSupdateIMU+0x44>
 8001ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aec:	d108      	bne.n	8001b00 <MahonyAHRSupdateIMU+0x44>
 8001aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afc:	f000 8175 	beq.w	8001dea <MahonyAHRSupdateIMU+0x32e>

    // Normalise accelerometer measurement
    norm = sqrt(ax[0] * ax[0] + ay[0] * ay[0] + az[0] * az[0]);
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	ed93 7a00 	vldr	s14, [r3]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b12:	edd3 6a00 	vldr	s13, [r3]
 8001b16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b26:	edd3 6a00 	vldr	s13, [r3]
 8001b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b38:	ee17 0a90 	vmov	r0, s15
 8001b3c:	f7fe fd04 	bl	8000548 <__aeabi_f2d>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	ec43 2b10 	vmov	d0, r2, r3
 8001b48:	f006 fce8 	bl	800851c <sqrt>
 8001b4c:	ec53 2b10 	vmov	r2, r3, d0
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	f7ff f828 	bl	8000ba8 <__aeabi_d2f>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    ax[0] /= norm;
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	edd3 6a00 	vldr	s13, [r3]
 8001b62:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	edc3 7a00 	vstr	s15, [r3]
    ay[0] /= norm;
 8001b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b72:	edd3 6a00 	vldr	s13, [r3]
 8001b76:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b80:	edc3 7a00 	vstr	s15, [r3]
    az[0] /= norm;
 8001b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b86:	edd3 6a00 	vldr	s13, [r3]
 8001b8a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b94:	edc3 7a00 	vstr	s15, [r3]

    // Estimated direction of gravity and vector perpendicular to magnetic flux
    halfvx = q[1] * q[3] - q[0] * q[2];
 8001b98:	4b72      	ldr	r3, [pc, #456]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001b9a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b9e:	4b71      	ldr	r3, [pc, #452]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001ba0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba8:	4b6e      	ldr	r3, [pc, #440]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001baa:	edd3 6a00 	vldr	s13, [r3]
 8001bae:	4b6d      	ldr	r3, [pc, #436]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bb0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bbc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    halfvy = q[0] * q[1] + q[2] * q[3];
 8001bc0:	4b68      	ldr	r3, [pc, #416]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bc2:	ed93 7a00 	vldr	s14, [r3]
 8001bc6:	4b67      	ldr	r3, [pc, #412]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd0:	4b64      	ldr	r3, [pc, #400]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bd2:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bd6:	4b63      	ldr	r3, [pc, #396]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bd8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8001be8:	4b5e      	ldr	r3, [pc, #376]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bea:	ed93 7a00 	vldr	s14, [r3]
 8001bee:	4b5d      	ldr	r3, [pc, #372]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001bf0:	edd3 7a00 	vldr	s15, [r3]
 8001bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001bfc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c00:	4b58      	ldr	r3, [pc, #352]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001c02:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c06:	4b57      	ldr	r3, [pc, #348]	; (8001d64 <MahonyAHRSupdateIMU+0x2a8>)
 8001c08:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c14:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    // Error is sum of cross product between estimated and measured direction of gravity
    halfex = (ay[0] * halfvz - az[0] * halfvy);
 8001c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c1a:	ed93 7a00 	vldr	s14, [r3]
 8001c1e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001c22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c28:	edd3 6a00 	vldr	s13, [r3]
 8001c2c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c38:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    halfey = (az[0] * halfvx - ax[0] * halfvz);
 8001c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c3e:	ed93 7a00 	vldr	s14, [r3]
 8001c42:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	edd3 6a00 	vldr	s13, [r3]
 8001c50:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001c54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c5c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    halfez = (ax[0] * halfvy - ay[0] * halfvx);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	ed93 7a00 	vldr	s14, [r3]
 8001c66:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c70:	edd3 6a00 	vldr	s13, [r3]
 8001c74:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // Compute and apply integral feedback if enabled
    if(twoKi > 0.0f) {
 8001c84:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <MahonyAHRSupdateIMU+0x2ac>)
 8001c86:	edd3 7a00 	vldr	s15, [r3]
 8001c8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	dd71      	ble.n	8001d78 <MahonyAHRSupdateIMU+0x2bc>
      integralFBx += twoKi * halfex * (1.0f / sampleFreq);  // integral error scaled by Ki
 8001c94:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <MahonyAHRSupdateIMU+0x2ac>)
 8001c96:	ed93 7a00 	vldr	s14, [r3]
 8001c9a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001c9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ca2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001ca6:	edd7 6a01 	vldr	s13, [r7, #4]
 8001caa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001cae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cb2:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <MahonyAHRSupdateIMU+0x2b0>)
 8001cb4:	edd3 7a00 	vldr	s15, [r3]
 8001cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <MahonyAHRSupdateIMU+0x2b0>)
 8001cbe:	edc3 7a00 	vstr	s15, [r3]
      integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 8001cc2:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <MahonyAHRSupdateIMU+0x2ac>)
 8001cc4:	ed93 7a00 	vldr	s14, [r3]
 8001cc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ccc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001cd4:	edd7 6a01 	vldr	s13, [r7, #4]
 8001cd8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce0:	4b23      	ldr	r3, [pc, #140]	; (8001d70 <MahonyAHRSupdateIMU+0x2b4>)
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cea:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <MahonyAHRSupdateIMU+0x2b4>)
 8001cec:	edc3 7a00 	vstr	s15, [r3]
      integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <MahonyAHRSupdateIMU+0x2ac>)
 8001cf2:	ed93 7a00 	vldr	s14, [r3]
 8001cf6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cfe:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001d02:	edd7 6a01 	vldr	s13, [r7, #4]
 8001d06:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001d0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d0e:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <MahonyAHRSupdateIMU+0x2b8>)
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d18:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <MahonyAHRSupdateIMU+0x2b8>)
 8001d1a:	edc3 7a00 	vstr	s15, [r3]
      gx[0] += integralFBx;  // apply integral feedback
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	ed93 7a00 	vldr	s14, [r3]
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MahonyAHRSupdateIMU+0x2b0>)
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	edc3 7a00 	vstr	s15, [r3]
      gy[0] += integralFBy;
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	ed93 7a00 	vldr	s14, [r3]
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <MahonyAHRSupdateIMU+0x2b4>)
 8001d3c:	edd3 7a00 	vldr	s15, [r3]
 8001d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	edc3 7a00 	vstr	s15, [r3]
      gz[0] += integralFBz;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	ed93 7a00 	vldr	s14, [r3]
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <MahonyAHRSupdateIMU+0x2b8>)
 8001d52:	edd3 7a00 	vldr	s15, [r3]
 8001d56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	edc3 7a00 	vstr	s15, [r3]
 8001d60:	e016      	b.n	8001d90 <MahonyAHRSupdateIMU+0x2d4>
 8001d62:	bf00      	nop
 8001d64:	20000000 	.word	0x20000000
 8001d68:	20000230 	.word	0x20000230
 8001d6c:	20000234 	.word	0x20000234
 8001d70:	20000238 	.word	0x20000238
 8001d74:	2000023c 	.word	0x2000023c
    }
    else {
      integralFBx = 0.0f; // prevent integral windup
 8001d78:	4bb2      	ldr	r3, [pc, #712]	; (8002044 <MahonyAHRSupdateIMU+0x588>)
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
      integralFBy = 0.0f;
 8001d80:	4bb1      	ldr	r3, [pc, #708]	; (8002048 <MahonyAHRSupdateIMU+0x58c>)
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
      integralFBz = 0.0f;
 8001d88:	4bb0      	ldr	r3, [pc, #704]	; (800204c <MahonyAHRSupdateIMU+0x590>)
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
    }

    // Apply proportional feedback
    gx[0] += twoKp * halfex;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	ed93 7a00 	vldr	s14, [r3]
 8001d96:	4bae      	ldr	r3, [pc, #696]	; (8002050 <MahonyAHRSupdateIMU+0x594>)
 8001d98:	edd3 6a00 	vldr	s13, [r3]
 8001d9c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001da0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	edc3 7a00 	vstr	s15, [r3]
    gy[0] += twoKp * halfey;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	ed93 7a00 	vldr	s14, [r3]
 8001db4:	4ba6      	ldr	r3, [pc, #664]	; (8002050 <MahonyAHRSupdateIMU+0x594>)
 8001db6:	edd3 6a00 	vldr	s13, [r3]
 8001dba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001dbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	edc3 7a00 	vstr	s15, [r3]
    gz[0] += twoKp * halfez;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	ed93 7a00 	vldr	s14, [r3]
 8001dd2:	4b9f      	ldr	r3, [pc, #636]	; (8002050 <MahonyAHRSupdateIMU+0x594>)
 8001dd4:	edd3 6a00 	vldr	s13, [r3]
 8001dd8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ddc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	edc3 7a00 	vstr	s15, [r3]
  }

  // Integrate rate of change of quaternion
  gx[0] *= (0.5f * (1.0f / sampleFreq));   // pre-multiply common factors
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	ed93 7a00 	vldr	s14, [r3]
 8001df0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001df4:	edd7 6a01 	vldr	s13, [r7, #4]
 8001df8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001dfc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001e00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	edc3 7a00 	vstr	s15, [r3]
  gy[0] *= (0.5f * (1.0f / sampleFreq));
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	ed93 7a00 	vldr	s14, [r3]
 8001e14:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001e18:	edd7 6a01 	vldr	s13, [r7, #4]
 8001e1c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e20:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001e24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	edc3 7a00 	vstr	s15, [r3]
  gz[0] *= (0.5f * (1.0f / sampleFreq));
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	ed93 7a00 	vldr	s14, [r3]
 8001e38:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001e3c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001e40:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001e44:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001e48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	edc3 7a00 	vstr	s15, [r3]
  qa = q[0];
 8001e56:	4b7f      	ldr	r3, [pc, #508]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	623b      	str	r3, [r7, #32]
  qb = q[1];
 8001e5c:	4b7d      	ldr	r3, [pc, #500]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	61fb      	str	r3, [r7, #28]
  qc = q[2];
 8001e62:	4b7c      	ldr	r3, [pc, #496]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	61bb      	str	r3, [r7, #24]
  q[0] += (-qb * gx[0] - qc * gy[0] - q[3] * gz[0]);
 8001e68:	4b7a      	ldr	r3, [pc, #488]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001e6a:	ed93 7a00 	vldr	s14, [r3]
 8001e6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e72:	eef1 6a67 	vneg.f32	s13, s15
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	ed93 6a00 	vldr	s12, [r3]
 8001e86:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e8e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e92:	4b70      	ldr	r3, [pc, #448]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001e94:	ed93 6a03 	vldr	s12, [r3, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ea2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eaa:	4b6a      	ldr	r3, [pc, #424]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001eac:	edc3 7a00 	vstr	s15, [r3]
  q[1] += (qa * gx[0] + qc * gz[0] - q[3] * gy[0]);
 8001eb0:	4b68      	ldr	r3, [pc, #416]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001eb2:	ed93 7a01 	vldr	s14, [r3, #4]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	edd3 6a00 	vldr	s13, [r3]
 8001ebc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ec0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	ed93 6a00 	vldr	s12, [r3]
 8001eca:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ece:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ed2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001ed6:	4b5f      	ldr	r3, [pc, #380]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001ed8:	ed93 6a03 	vldr	s12, [r3, #12]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	edd3 7a00 	vldr	s15, [r3]
 8001ee2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ee6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eee:	4b59      	ldr	r3, [pc, #356]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001ef0:	edc3 7a01 	vstr	s15, [r3, #4]
  q[2] += (qa * gy[0] - qb * gz[0] + q[3] * gx[0]);
 8001ef4:	4b57      	ldr	r3, [pc, #348]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001ef6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	edd3 6a00 	vldr	s13, [r3]
 8001f00:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	ed93 6a00 	vldr	s12, [r3]
 8001f0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f16:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f1a:	4b4e      	ldr	r3, [pc, #312]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f1c:	ed93 6a03 	vldr	s12, [r3, #12]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f32:	4b48      	ldr	r3, [pc, #288]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f34:	edc3 7a02 	vstr	s15, [r3, #8]
  q[3] += (qa * gz[0] + qb * gy[0] - qc * gx[0]);
 8001f38:	4b46      	ldr	r3, [pc, #280]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f3a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	edd3 6a00 	vldr	s13, [r3]
 8001f44:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	ed93 6a00 	vldr	s12, [r3]
 8001f52:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f5a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	ed93 6a00 	vldr	s12, [r3]
 8001f64:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f6c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f74:	4b37      	ldr	r3, [pc, #220]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f76:	edc3 7a03 	vstr	s15, [r3, #12]

  // Normalise quaternion
  norm = sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8001f7a:	4b36      	ldr	r3, [pc, #216]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f7c:	ed93 7a00 	vldr	s14, [r3]
 8001f80:	4b34      	ldr	r3, [pc, #208]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f82:	edd3 7a00 	vldr	s15, [r3]
 8001f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f8a:	4b32      	ldr	r3, [pc, #200]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f8c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001f90:	4b30      	ldr	r3, [pc, #192]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001f92:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f9e:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001fa0:	edd3 6a02 	vldr	s13, [r3, #8]
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001fa6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001faa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fb2:	4b28      	ldr	r3, [pc, #160]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001fb4:	edd3 6a03 	vldr	s13, [r3, #12]
 8001fb8:	4b26      	ldr	r3, [pc, #152]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001fba:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc6:	ee17 0a90 	vmov	r0, s15
 8001fca:	f7fe fabd 	bl	8000548 <__aeabi_f2d>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	ec43 2b10 	vmov	d0, r2, r3
 8001fd6:	f006 faa1 	bl	800851c <sqrt>
 8001fda:	ec53 2b10 	vmov	r2, r3, d0
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f7fe fde1 	bl	8000ba8 <__aeabi_d2f>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  q[0] /= norm;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001fec:	edd3 6a00 	vldr	s13, [r3]
 8001ff0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8001ffa:	edc3 7a00 	vstr	s15, [r3]
  q[1] /= norm;
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8002000:	edd3 6a01 	vldr	s13, [r3, #4]
 8002004:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 800200e:	edc3 7a01 	vstr	s15, [r3, #4]
  q[2] /= norm;
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8002014:	edd3 6a02 	vldr	s13, [r3, #8]
 8002018:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800201c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8002022:	edc3 7a02 	vstr	s15, [r3, #8]
  q[3] /= norm;
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8002028:	edd3 6a03 	vldr	s13, [r3, #12]
 800202c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <MahonyAHRSupdateIMU+0x598>)
 8002036:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800203a:	bf00      	nop
 800203c:	3740      	adds	r7, #64	; 0x40
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000234 	.word	0x20000234
 8002048:	20000238 	.word	0x20000238
 800204c:	2000023c 	.word	0x2000023c
 8002050:	20000010 	.word	0x20000010
 8002054:	20000000 	.word	0x20000000

08002058 <SBUS_Parsing>:

}


void SBUS_Parsing(SBUS_RAW_MESSAGE* raw, MSG_SBUS* msg_sbus, int* rx_recv_cnt, int* rx_err_cnt)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
	uint8_t* ptr = raw->rx_buf;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	3308      	adds	r3, #8
 800206a:	61fb      	str	r3, [r7, #28]
	int32_t temp;
	unsigned short msg_length = 0, checksum = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	837b      	strh	r3, [r7, #26]
 8002070:	2300      	movs	r3, #0
 8002072:	833b      	strh	r3, [r7, #24]
	unsigned char classID = 0, messageID = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	75fb      	strb	r3, [r7, #23]
 8002078:	2300      	movs	r3, #0
 800207a:	75bb      	strb	r3, [r7, #22]
	if(ptr[0]==MSG_SBUS_SOF ){
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b0f      	cmp	r3, #15
 8002082:	f040 8166 	bne.w	8002352 <SBUS_Parsing+0x2fa>
		msg_sbus->header = ptr[0];
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	701a      	strb	r2, [r3, #0]
	       msg_sbus->rx_channel[0]   = (int16_t)(ptr[1] | ((ptr[2] << 8) & 0x07FF));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3301      	adds	r3, #1
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b21a      	sxth	r2, r3
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3302      	adds	r3, #2
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	b21b      	sxth	r3, r3
 80020a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b21a      	sxth	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	805a      	strh	r2, [r3, #2]
	        msg_sbus->rx_channel[1]  = (int16_t)((ptr[2] >> 3) | ((ptr[3] << 5) & 0x07FF));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3302      	adds	r3, #2
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	b21a      	sxth	r2, r3
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3303      	adds	r3, #3
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	015b      	lsls	r3, r3, #5
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	4313      	orrs	r3, r2
 80020cc:	b21a      	sxth	r2, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	809a      	strh	r2, [r3, #4]
	        msg_sbus->rx_channel[2]  = (int16_t)((ptr[3] >> 6) | (ptr[4] << 2) | ((ptr[5] << 10) & 0x07FF));
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3303      	adds	r3, #3
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	099b      	lsrs	r3, r3, #6
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	b21a      	sxth	r2, r3
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3304      	adds	r3, #4
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	4313      	orrs	r3, r2
 80020ea:	b21a      	sxth	r2, r3
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	3305      	adds	r3, #5
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	029b      	lsls	r3, r3, #10
 80020f4:	b21b      	sxth	r3, r3
 80020f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020fa:	b21b      	sxth	r3, r3
 80020fc:	4313      	orrs	r3, r2
 80020fe:	b21a      	sxth	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	80da      	strh	r2, [r3, #6]
	        msg_sbus->rx_channel[3]  = (int16_t)((ptr[5] >> 1) | ((ptr[6] << 7) & 0x07FF));
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	3305      	adds	r3, #5
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	085b      	lsrs	r3, r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	b21a      	sxth	r2, r3
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	3306      	adds	r3, #6
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	01db      	lsls	r3, r3, #7
 8002118:	b21b      	sxth	r3, r3
 800211a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800211e:	b21b      	sxth	r3, r3
 8002120:	4313      	orrs	r3, r2
 8002122:	b21a      	sxth	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	811a      	strh	r2, [r3, #8]
	        msg_sbus->rx_channel[4]  = (int16_t)((ptr[6] >> 4) | ((ptr[7] << 4) & 0x07FF));
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	3306      	adds	r3, #6
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	b2db      	uxtb	r3, r3
 8002132:	b21a      	sxth	r2, r3
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	3307      	adds	r3, #7
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	b21b      	sxth	r3, r3
 800213e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002142:	b21b      	sxth	r3, r3
 8002144:	4313      	orrs	r3, r2
 8002146:	b21a      	sxth	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	815a      	strh	r2, [r3, #10]
	        msg_sbus->rx_channel[5]  = (int16_t)((ptr[7] >> 7) | (ptr[8] << 1) | ((ptr[9] << 9) & 0x07FF));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	3307      	adds	r3, #7
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	09db      	lsrs	r3, r3, #7
 8002154:	b2db      	uxtb	r3, r3
 8002156:	b21a      	sxth	r2, r3
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	3308      	adds	r3, #8
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	b21b      	sxth	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b21a      	sxth	r2, r3
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3309      	adds	r3, #9
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	025b      	lsls	r3, r3, #9
 800216e:	b21b      	sxth	r3, r3
 8002170:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002174:	b21b      	sxth	r3, r3
 8002176:	4313      	orrs	r3, r2
 8002178:	b21a      	sxth	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	819a      	strh	r2, [r3, #12]
	        msg_sbus->rx_channel[6]  = (int16_t)((ptr[9] >> 2) | ((ptr[10] << 6) & 0x07FF));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3309      	adds	r3, #9
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	b2db      	uxtb	r3, r3
 8002188:	b21a      	sxth	r2, r3
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	330a      	adds	r3, #10
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	019b      	lsls	r3, r3, #6
 8002192:	b21b      	sxth	r3, r3
 8002194:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002198:	b21b      	sxth	r3, r3
 800219a:	4313      	orrs	r3, r2
 800219c:	b21a      	sxth	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	81da      	strh	r2, [r3, #14]
	        msg_sbus->rx_channel[7]  = (int16_t)((ptr[10] >> 5) | ((ptr[11] << 3) & 0x07FF));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	330a      	adds	r3, #10
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	095b      	lsrs	r3, r3, #5
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	b21a      	sxth	r2, r3
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	330b      	adds	r3, #11
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021bc:	b21b      	sxth	r3, r3
 80021be:	4313      	orrs	r3, r2
 80021c0:	b21a      	sxth	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	821a      	strh	r2, [r3, #16]
	        msg_sbus->rx_channel[8]  = (int16_t)(ptr[12] | ((ptr[13] << 8) & 0x07FF));
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	330c      	adds	r3, #12
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b21a      	sxth	r2, r3
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	330d      	adds	r3, #13
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021dc:	b21b      	sxth	r3, r3
 80021de:	4313      	orrs	r3, r2
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	825a      	strh	r2, [r3, #18]
	        msg_sbus->rx_channel[9]  = (int16_t)((ptr[13] >> 3) | ((ptr[14] << 5) & 0x07FF));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	330d      	adds	r3, #13
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	08db      	lsrs	r3, r3, #3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	b21a      	sxth	r2, r3
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	330e      	adds	r3, #14
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	015b      	lsls	r3, r3, #5
 80021fa:	b21b      	sxth	r3, r3
 80021fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002200:	b21b      	sxth	r3, r3
 8002202:	4313      	orrs	r3, r2
 8002204:	b21a      	sxth	r2, r3
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	829a      	strh	r2, [r3, #20]
	        msg_sbus->rx_channel[10] = (int16_t)((ptr[14] >> 6) | (ptr[15] << 2) |((ptr[16] << 10) & 0x07FF));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	330e      	adds	r3, #14
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	099b      	lsrs	r3, r3, #6
 8002212:	b2db      	uxtb	r3, r3
 8002214:	b21a      	sxth	r2, r3
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	330f      	adds	r3, #15
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	b21b      	sxth	r3, r3
 8002220:	4313      	orrs	r3, r2
 8002222:	b21a      	sxth	r2, r3
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	3310      	adds	r3, #16
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	029b      	lsls	r3, r3, #10
 800222c:	b21b      	sxth	r3, r3
 800222e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002232:	b21b      	sxth	r3, r3
 8002234:	4313      	orrs	r3, r2
 8002236:	b21a      	sxth	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	82da      	strh	r2, [r3, #22]
	        msg_sbus->rx_channel[11] = (int16_t)((ptr[16] >> 1) | ((ptr[17] << 7) & 0x07FF));
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	3310      	adds	r3, #16
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	085b      	lsrs	r3, r3, #1
 8002244:	b2db      	uxtb	r3, r3
 8002246:	b21a      	sxth	r2, r3
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	3311      	adds	r3, #17
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	01db      	lsls	r3, r3, #7
 8002250:	b21b      	sxth	r3, r3
 8002252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002256:	b21b      	sxth	r3, r3
 8002258:	4313      	orrs	r3, r2
 800225a:	b21a      	sxth	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	831a      	strh	r2, [r3, #24]
	        msg_sbus->rx_channel[12] = (int16_t)((ptr[17] >> 4) | ((ptr[18] << 4) & 0x07FF));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	3311      	adds	r3, #17
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	b2db      	uxtb	r3, r3
 800226a:	b21a      	sxth	r2, r3
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	3312      	adds	r3, #18
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	b21b      	sxth	r3, r3
 8002276:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800227a:	b21b      	sxth	r3, r3
 800227c:	4313      	orrs	r3, r2
 800227e:	b21a      	sxth	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	835a      	strh	r2, [r3, #26]
	        msg_sbus->rx_channel[13] = (int16_t)((ptr[18] >> 7) | (ptr[19] << 1) | ((ptr[20] << 9) & 0x07FF));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	3312      	adds	r3, #18
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	09db      	lsrs	r3, r3, #7
 800228c:	b2db      	uxtb	r3, r3
 800228e:	b21a      	sxth	r2, r3
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	3313      	adds	r3, #19
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	b21b      	sxth	r3, r3
 800229a:	4313      	orrs	r3, r2
 800229c:	b21a      	sxth	r2, r3
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3314      	adds	r3, #20
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	025b      	lsls	r3, r3, #9
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ac:	b21b      	sxth	r3, r3
 80022ae:	4313      	orrs	r3, r2
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	839a      	strh	r2, [r3, #28]
	        msg_sbus->rx_channel[14] = (int16_t)((ptr[20] >> 2) | ((ptr[21] << 6) & 0x07FF));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3314      	adds	r3, #20
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	089b      	lsrs	r3, r3, #2
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	b21a      	sxth	r2, r3
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3315      	adds	r3, #21
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	019b      	lsls	r3, r3, #6
 80022ca:	b21b      	sxth	r3, r3
 80022cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	4313      	orrs	r3, r2
 80022d4:	b21a      	sxth	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	83da      	strh	r2, [r3, #30]
	        msg_sbus->rx_channel[15] = (int16_t)((ptr[21] >> 5) | ((ptr[22] << 3) & 0x07FF));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3315      	adds	r3, #21
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	b21a      	sxth	r2, r3
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3316      	adds	r3, #22
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	b21b      	sxth	r3, r3
 80022f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022f4:	b21b      	sxth	r3, r3
 80022f6:	4313      	orrs	r3, r2
 80022f8:	b21a      	sxth	r2, r3
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	841a      	strh	r2, [r3, #32]
	        msg_sbus->rx_channel17 	= ptr[23] & MSG_SBUS_CH17_BIT_MASK;
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3317      	adds	r3, #23
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	b2da      	uxtb	r2, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	        msg_sbus->rx_channel18 	= ptr[23] & MSG_SBUS_CH18_BIT_MASK;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	3317      	adds	r3, #23
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	b2da      	uxtb	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	        msg_sbus->frame_lost 	= ptr[23] & MSG_SBUS_FL_BIT_MASK;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3317      	adds	r3, #23
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	b2da      	uxtb	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	        msg_sbus->failsafe 		= ptr[23] & MSG_SBUS_FS_BIT_MASK;
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	3317      	adds	r3, #23
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	b2da      	uxtb	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25


		rx_recv_cnt[0]++;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	1c5a      	adds	r2, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	601a      	str	r2, [r3, #0]
	{
		rx_err_cnt[0]++;
	}
//	printf("recv: %d\t err: %d\n", rx_recv_cnt[0], rx_err_cnt[0]);

}
 8002350:	e004      	b.n	800235c <SBUS_Parsing+0x304>
		rx_err_cnt[0]++;
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	601a      	str	r2, [r3, #0]
}
 800235c:	bf00      	nop
 800235e:	3724      	adds	r7, #36	; 0x24
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <__NVIC_GetPriorityGrouping+0x18>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	f003 0307 	and.w	r3, r3, #7
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	2b00      	cmp	r3, #0
 8002394:	db0b      	blt.n	80023ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	f003 021f 	and.w	r2, r3, #31
 800239c:	4907      	ldr	r1, [pc, #28]	; (80023bc <__NVIC_EnableIRQ+0x38>)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	2001      	movs	r0, #1
 80023a6:	fa00 f202 	lsl.w	r2, r0, r2
 80023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000e100 	.word	0xe000e100

080023c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	6039      	str	r1, [r7, #0]
 80023ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	db0a      	blt.n	80023ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	490c      	ldr	r1, [pc, #48]	; (800240c <__NVIC_SetPriority+0x4c>)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	0112      	lsls	r2, r2, #4
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	440b      	add	r3, r1
 80023e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e8:	e00a      	b.n	8002400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	4908      	ldr	r1, [pc, #32]	; (8002410 <__NVIC_SetPriority+0x50>)
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	3b04      	subs	r3, #4
 80023f8:	0112      	lsls	r2, r2, #4
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	440b      	add	r3, r1
 80023fe:	761a      	strb	r2, [r3, #24]
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000e100 	.word	0xe000e100
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	; 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 0307 	and.w	r3, r3, #7
 8002426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f1c3 0307 	rsb	r3, r3, #7
 800242e:	2b04      	cmp	r3, #4
 8002430:	bf28      	it	cs
 8002432:	2304      	movcs	r3, #4
 8002434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3304      	adds	r3, #4
 800243a:	2b06      	cmp	r3, #6
 800243c:	d902      	bls.n	8002444 <NVIC_EncodePriority+0x30>
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	3b03      	subs	r3, #3
 8002442:	e000      	b.n	8002446 <NVIC_EncodePriority+0x32>
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43da      	mvns	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	401a      	ands	r2, r3
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800245c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	fa01 f303 	lsl.w	r3, r1, r3
 8002466:	43d9      	mvns	r1, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800246c:	4313      	orrs	r3, r2
         );
}
 800246e:	4618      	mov	r0, r3
 8002470:	3724      	adds	r7, #36	; 0x24
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
	...

0800247c <LL_AHB1_GRP1_EnableClock>:
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002488:	4907      	ldr	r1, [pc, #28]	; (80024a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4313      	orrs	r3, r2
 800248e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4013      	ands	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800249a:	68fb      	ldr	r3, [r7, #12]
}
 800249c:	bf00      	nop
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	40023800 	.word	0x40023800

080024ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80024b0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80024b4:	f7ff ffe2 	bl	800247c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80024b8:	f7ff ff56 	bl	8002368 <__NVIC_GetPriorityGrouping>
 80024bc:	4603      	mov	r3, r0
 80024be:	2200      	movs	r2, #0
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff ffa6 	bl	8002414 <NVIC_EncodePriority>
 80024c8:	4603      	mov	r3, r0
 80024ca:	4619      	mov	r1, r3
 80024cc:	200c      	movs	r0, #12
 80024ce:	f7ff ff77 	bl	80023c0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80024d2:	200c      	movs	r0, #12
 80024d4:	f7ff ff56 	bl	8002384 <__NVIC_EnableIRQ>

}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}

080024dc <__NVIC_GetPriorityGrouping>:
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <__NVIC_GetPriorityGrouping+0x18>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	f003 0307 	and.w	r3, r3, #7
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_EnableIRQ>:
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	2b00      	cmp	r3, #0
 8002508:	db0b      	blt.n	8002522 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	4907      	ldr	r1, [pc, #28]	; (8002530 <__NVIC_EnableIRQ+0x38>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	2001      	movs	r0, #1
 800251a:	fa00 f202 	lsl.w	r2, r0, r2
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000e100 	.word	0xe000e100

08002534 <__NVIC_SetPriority>:
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	6039      	str	r1, [r7, #0]
 800253e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	2b00      	cmp	r3, #0
 8002546:	db0a      	blt.n	800255e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	490c      	ldr	r1, [pc, #48]	; (8002580 <__NVIC_SetPriority+0x4c>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	0112      	lsls	r2, r2, #4
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	440b      	add	r3, r1
 8002558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800255c:	e00a      	b.n	8002574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4908      	ldr	r1, [pc, #32]	; (8002584 <__NVIC_SetPriority+0x50>)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	3b04      	subs	r3, #4
 800256c:	0112      	lsls	r2, r2, #4
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	440b      	add	r3, r1
 8002572:	761a      	strb	r2, [r3, #24]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000e100 	.word	0xe000e100
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <NVIC_EncodePriority>:
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f1c3 0307 	rsb	r3, r3, #7
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	bf28      	it	cs
 80025a6:	2304      	movcs	r3, #4
 80025a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d902      	bls.n	80025b8 <NVIC_EncodePriority+0x30>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3b03      	subs	r3, #3
 80025b6:	e000      	b.n	80025ba <NVIC_EncodePriority+0x32>
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	401a      	ands	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	43d9      	mvns	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	4313      	orrs	r3, r2
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	; 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <LL_AHB1_GRP1_EnableClock>:
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025fc:	4907      	ldr	r1, [pc, #28]	; (800261c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4313      	orrs	r3, r2
 8002602:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4013      	ands	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800260e:	68fb      	ldr	r3, [r7, #12]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	40023800 	.word	0x40023800

08002620 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800262a:	4a13      	ldr	r2, [pc, #76]	; (8002678 <LL_SYSCFG_SetEXTISource+0x58>)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	3302      	adds	r3, #2
 8002632:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	0c1b      	lsrs	r3, r3, #16
 800263a:	43db      	mvns	r3, r3
 800263c:	ea02 0103 	and.w	r1, r2, r3
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	0c1b      	lsrs	r3, r3, #16
 8002644:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	fa93 f3a3 	rbit	r3, r3
 800264c:	60bb      	str	r3, [r7, #8]
  return result;
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	fab3 f383 	clz	r3, r3
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	fa03 f202 	lsl.w	r2, r3, r2
 800265e:	4806      	ldr	r0, [pc, #24]	; (8002678 <LL_SYSCFG_SetEXTISource+0x58>)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	430a      	orrs	r2, r1
 8002666:	3302      	adds	r3, #2
 8002668:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	40013800 	.word	0x40013800

0800267c <LL_GPIO_SetPinMode>:
{
 800267c:	b480      	push	{r7}
 800267e:	b089      	sub	sp, #36	; 0x24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	613b      	str	r3, [r7, #16]
  return result;
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	fab3 f383 	clz	r3, r3
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2103      	movs	r1, #3
 80026a4:	fa01 f303 	lsl.w	r3, r1, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	401a      	ands	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	61bb      	str	r3, [r7, #24]
  return result;
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	fa01 f303 	lsl.w	r3, r1, r3
 80026c8:	431a      	orrs	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	601a      	str	r2, [r3, #0]
}
 80026ce:	bf00      	nop
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <LL_GPIO_SetPinPull>:
{
 80026da:	b480      	push	{r7}
 80026dc:	b089      	sub	sp, #36	; 0x24
 80026de:	af00      	add	r7, sp, #0
 80026e0:	60f8      	str	r0, [r7, #12]
 80026e2:	60b9      	str	r1, [r7, #8]
 80026e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	fa93 f3a3 	rbit	r3, r3
 80026f4:	613b      	str	r3, [r7, #16]
  return result;
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	fab3 f383 	clz	r3, r3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	2103      	movs	r1, #3
 8002702:	fa01 f303 	lsl.w	r3, r1, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	401a      	ands	r2, r3
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	fa93 f3a3 	rbit	r3, r3
 8002714:	61bb      	str	r3, [r7, #24]
  return result;
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	b2db      	uxtb	r3, r3
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	431a      	orrs	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	60da      	str	r2, [r3, #12]
}
 800272c:	bf00      	nop
 800272e:	3724      	adds	r7, #36	; 0x24
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <LL_GPIO_ResetOutputPin>:
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	041a      	lsls	r2, r3, #16
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	619a      	str	r2, [r3, #24]
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b088      	sub	sp, #32
 800275c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800275e:	f107 0318 	add.w	r3, r7, #24
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	463b      	mov	r3, r7
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	605a      	str	r2, [r3, #4]
 8002770:	609a      	str	r2, [r3, #8]
 8002772:	60da      	str	r2, [r3, #12]
 8002774:	611a      	str	r2, [r3, #16]
 8002776:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8002778:	2080      	movs	r0, #128	; 0x80
 800277a:	f7ff ff39 	bl	80025f0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800277e:	2001      	movs	r0, #1
 8002780:	f7ff ff36 	bl	80025f0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002784:	2004      	movs	r0, #4
 8002786:	f7ff ff33 	bl	80025f0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800278a:	2002      	movs	r0, #2
 800278c:	f7ff ff30 	bl	80025f0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8002790:	2110      	movs	r1, #16
 8002792:	482a      	ldr	r0, [pc, #168]	; (800283c <MX_GPIO_Init+0xe4>)
 8002794:	f7ff ffd0 	bl	8002738 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8002798:	2120      	movs	r1, #32
 800279a:	4829      	ldr	r0, [pc, #164]	; (8002840 <MX_GPIO_Init+0xe8>)
 800279c:	f7ff ffcc 	bl	8002738 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80027a0:	2310      	movs	r3, #16
 80027a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80027a4:	2301      	movs	r3, #1
 80027a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027b0:	2300      	movs	r3, #0
 80027b2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b4:	463b      	mov	r3, r7
 80027b6:	4619      	mov	r1, r3
 80027b8:	4820      	ldr	r0, [pc, #128]	; (800283c <MX_GPIO_Init+0xe4>)
 80027ba:	f002 f919 	bl	80049f0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 80027be:	2320      	movs	r3, #32
 80027c0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80027c2:	2301      	movs	r3, #1
 80027c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80027ce:	2300      	movs	r3, #0
 80027d0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d2:	463b      	mov	r3, r7
 80027d4:	4619      	mov	r1, r3
 80027d6:	481a      	ldr	r0, [pc, #104]	; (8002840 <MX_GPIO_Init+0xe8>)
 80027d8:	f002 f90a 	bl	80049f0 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE4);
 80027dc:	4919      	ldr	r1, [pc, #100]	; (8002844 <MX_GPIO_Init+0xec>)
 80027de:	2002      	movs	r0, #2
 80027e0:	f7ff ff1e 	bl	8002620 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 80027e4:	2310      	movs	r3, #16
 80027e6:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80027e8:	2301      	movs	r3, #1
 80027ea:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80027ec:	2300      	movs	r3, #0
 80027ee:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80027f0:	2301      	movs	r3, #1
 80027f2:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80027f4:	f107 0318 	add.w	r3, r7, #24
 80027f8:	4618      	mov	r0, r3
 80027fa:	f001 ff73 	bl	80046e4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOC, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 80027fe:	2200      	movs	r2, #0
 8002800:	2110      	movs	r1, #16
 8002802:	4811      	ldr	r0, [pc, #68]	; (8002848 <MX_GPIO_Init+0xf0>)
 8002804:	f7ff ff69 	bl	80026da <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOC, LL_GPIO_PIN_4, LL_GPIO_MODE_INPUT);
 8002808:	2200      	movs	r2, #0
 800280a:	2110      	movs	r1, #16
 800280c:	480e      	ldr	r0, [pc, #56]	; (8002848 <MX_GPIO_Init+0xf0>)
 800280e:	f7ff ff35 	bl	800267c <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002812:	f7ff fe63 	bl	80024dc <__NVIC_GetPriorityGrouping>
 8002816:	4603      	mov	r3, r0
 8002818:	2200      	movs	r2, #0
 800281a:	2100      	movs	r1, #0
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff feb3 	bl	8002588 <NVIC_EncodePriority>
 8002822:	4603      	mov	r3, r0
 8002824:	4619      	mov	r1, r3
 8002826:	200a      	movs	r0, #10
 8002828:	f7ff fe84 	bl	8002534 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI4_IRQn);
 800282c:	200a      	movs	r0, #10
 800282e:	f7ff fe63 	bl	80024f8 <__NVIC_EnableIRQ>

}
 8002832:	bf00      	nop
 8002834:	3720      	adds	r7, #32
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40020000 	.word	0x40020000
 8002840:	40020400 	.word	0x40020400
 8002844:	000f0001 	.word	0x000f0001
 8002848:	40020800 	.word	0x40020800

0800284c <__NVIC_SetPriorityGrouping>:
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800287c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287e:	4a04      	ldr	r2, [pc, #16]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	60d3      	str	r3, [r2, #12]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_GetPriorityGrouping>:
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <__NVIC_GetPriorityGrouping+0x18>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0307 	and.w	r3, r3, #7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_SetPriority>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	6039      	str	r1, [r7, #0]
 80028ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	db0a      	blt.n	80028da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	490c      	ldr	r1, [pc, #48]	; (80028fc <__NVIC_SetPriority+0x4c>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	0112      	lsls	r2, r2, #4
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	440b      	add	r3, r1
 80028d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028d8:	e00a      	b.n	80028f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4908      	ldr	r1, [pc, #32]	; (8002900 <__NVIC_SetPriority+0x50>)
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	3b04      	subs	r3, #4
 80028e8:	0112      	lsls	r2, r2, #4
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	440b      	add	r3, r1
 80028ee:	761a      	strb	r2, [r3, #24]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000e100 	.word	0xe000e100
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <NVIC_EncodePriority>:
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	; 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f1c3 0307 	rsb	r3, r3, #7
 800291e:	2b04      	cmp	r3, #4
 8002920:	bf28      	it	cs
 8002922:	2304      	movcs	r3, #4
 8002924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3304      	adds	r3, #4
 800292a:	2b06      	cmp	r3, #6
 800292c:	d902      	bls.n	8002934 <NVIC_EncodePriority+0x30>
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3b03      	subs	r3, #3
 8002932:	e000      	b.n	8002936 <NVIC_EncodePriority+0x32>
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43da      	mvns	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	401a      	ands	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800294c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	43d9      	mvns	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	4313      	orrs	r3, r2
}
 800295e:	4618      	mov	r0, r3
 8002960:	3724      	adds	r7, #36	; 0x24
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <LL_DMA_EnableStream>:
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8002976:	4a0c      	ldr	r2, [pc, #48]	; (80029a8 <LL_DMA_EnableStream+0x3c>)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	4413      	add	r3, r2
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4413      	add	r3, r2
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4908      	ldr	r1, [pc, #32]	; (80029a8 <LL_DMA_EnableStream+0x3c>)
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	440a      	add	r2, r1
 800298c:	7812      	ldrb	r2, [r2, #0]
 800298e:	4611      	mov	r1, r2
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	440a      	add	r2, r1
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	6013      	str	r3, [r2, #0]
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	08008c98 	.word	0x08008c98

080029ac <LL_DMA_DisableStream>:
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80029b6:	4a0c      	ldr	r2, [pc, #48]	; (80029e8 <LL_DMA_DisableStream+0x3c>)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4413      	add	r3, r2
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4908      	ldr	r1, [pc, #32]	; (80029e8 <LL_DMA_DisableStream+0x3c>)
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	440a      	add	r2, r1
 80029cc:	7812      	ldrb	r2, [r2, #0]
 80029ce:	4611      	mov	r1, r2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	440a      	add	r2, r1
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	6013      	str	r3, [r2, #0]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	08008c98 	.word	0x08008c98

080029ec <LL_DMA_ClearFlag_TC1>:
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029fa:	609a      	str	r2, [r3, #8]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002a0c:	4b05      	ldr	r3, [pc, #20]	; (8002a24 <LL_RCC_HSE_Enable+0x1c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <LL_RCC_HSE_Enable+0x1c>)
 8002a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a16:	6013      	str	r3, [r2, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800

08002a28 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8002a2c:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <LL_RCC_HSE_IsReady+0x24>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a38:	bf0c      	ite	eq
 8002a3a:	2301      	moveq	r3, #1
 8002a3c:	2300      	movne	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800

08002a50 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <LL_RCC_SetSysClkSource+0x24>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f023 0203 	bic.w	r2, r3, #3
 8002a60:	4904      	ldr	r1, [pc, #16]	; (8002a74 <LL_RCC_SetSysClkSource+0x24>)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	608b      	str	r3, [r1, #8]
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	40023800 	.word	0x40023800

08002a78 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <LL_RCC_GetSysClkSource+0x18>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 030c 	and.w	r3, r3, #12
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800

08002a94 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <LL_RCC_SetAHBPrescaler+0x24>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa4:	4904      	ldr	r1, [pc, #16]	; (8002ab8 <LL_RCC_SetAHBPrescaler+0x24>)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	608b      	str	r3, [r1, #8]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	40023800 	.word	0x40023800

08002abc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002acc:	4904      	ldr	r1, [pc, #16]	; (8002ae0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	608b      	str	r3, [r1, #8]
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	40023800 	.word	0x40023800

08002ae4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002aec:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002af4:	4904      	ldr	r1, [pc, #16]	; (8002b08 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	608b      	str	r3, [r1, #8]
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	40023800 	.word	0x40023800

08002b0c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <LL_RCC_PLL_Enable+0x1c>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <LL_RCC_PLL_Enable+0x1c>)
 8002b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800

08002b2c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8002b30:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <LL_RCC_PLL_IsReady+0x24>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b3c:	bf0c      	ite	eq
 8002b3e:	2301      	moveq	r3, #1
 8002b40:	2300      	movne	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40023800 	.word	0x40023800

08002b54 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
 8002b60:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8002b62:	4b0d      	ldr	r3, [pc, #52]	; (8002b98 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	68f9      	ldr	r1, [r7, #12]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	4311      	orrs	r1, r2
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	0192      	lsls	r2, r2, #6
 8002b74:	430a      	orrs	r2, r1
 8002b76:	4908      	ldr	r1, [pc, #32]	; (8002b98 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b84:	4904      	ldr	r1, [pc, #16]	; (8002b98 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	ffbf8000 	.word	0xffbf8000

08002ba0 <LL_APB1_GRP1_EnableClock>:
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002ba8:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8002baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bac:	4907      	ldr	r1, [pc, #28]	; (8002bcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <LL_APB1_GRP1_EnableClock+0x2c>)
 8002bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	40023800 	.word	0x40023800

08002bd0 <LL_APB2_GRP1_EnableClock>:
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002bd8:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8002bda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bdc:	4907      	ldr	r1, [pc, #28]	; (8002bfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <LL_APB2_GRP1_EnableClock+0x2c>)
 8002be6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4013      	ands	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bee:	68fb      	ldr	r3, [r7, #12]
}
 8002bf0:	bf00      	nop
 8002bf2:	3714      	adds	r7, #20
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40023800 	.word	0x40023800

08002c00 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8002c08:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <LL_FLASH_SetLatency+0x24>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f023 0207 	bic.w	r2, r3, #7
 8002c10:	4904      	ldr	r1, [pc, #16]	; (8002c24 <LL_FLASH_SetLatency+0x24>)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	40023c00 	.word	0x40023c00

08002c28 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <LL_FLASH_GetLatency+0x18>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0307 	and.w	r3, r3, #7
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	40023c00 	.word	0x40023c00

08002c44 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	4a07      	ldr	r2, [pc, #28]	; (8002c74 <LL_InitTick+0x30>)
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <LL_InitTick+0x30>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c62:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <LL_InitTick+0x30>)
 8002c64:	2205      	movs	r2, #5
 8002c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000e010 	.word	0xe000e010

08002c78 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8002c80:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002c88:	4904      	ldr	r1, [pc, #16]	; (8002c9c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	600b      	str	r3, [r1, #0]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	40007000 	.word	0x40007000

08002ca0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f043 0201 	orr.w	r2, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	601a      	str	r2, [r3, #0]
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1a      	ldr	r2, [r3, #32]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	621a      	str	r2, [r3, #32]
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_USART_EnableIT_IDLE>:
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b089      	sub	sp, #36	; 0x24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	330c      	adds	r3, #12
 8002cee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	e853 3f00 	ldrex	r3, [r3]
 8002cf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f043 0310 	orr.w	r3, r3, #16
 8002cfe:	61fb      	str	r3, [r7, #28]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	330c      	adds	r3, #12
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	61ba      	str	r2, [r7, #24]
 8002d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0a:	6979      	ldr	r1, [r7, #20]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	e841 2300 	strex	r3, r2, [r1]
 8002d12:	613b      	str	r3, [r7, #16]
   return(result);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1e7      	bne.n	8002cea <LL_USART_EnableIT_IDLE+0x8>
}
 8002d1a:	bf00      	nop
 8002d1c:	bf00      	nop
 8002d1e:	3724      	adds	r7, #36	; 0x24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <LL_USART_EnableIT_RXNE>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b089      	sub	sp, #36	; 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	330c      	adds	r3, #12
 8002d34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	e853 3f00 	ldrex	r3, [r3]
 8002d3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f043 0320 	orr.w	r3, r3, #32
 8002d44:	61fb      	str	r3, [r7, #28]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	330c      	adds	r3, #12
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	61ba      	str	r2, [r7, #24]
 8002d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d50:	6979      	ldr	r1, [r7, #20]
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	e841 2300 	strex	r3, r2, [r1]
 8002d58:	613b      	str	r3, [r7, #16]
   return(result);
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d1e7      	bne.n	8002d30 <LL_USART_EnableIT_RXNE+0x8>
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	3724      	adds	r7, #36	; 0x24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	b2db      	uxtb	r3, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	041a      	lsls	r2, r3, #16
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	43d9      	mvns	r1, r3
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	400b      	ands	r3, r1
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	619a      	str	r2, [r3, #24]
}
 8002dae:	bf00      	nop
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002dbc:	b598      	push	{r3, r4, r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002dc0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002dc4:	f7ff ff04 	bl	8002bd0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002dc8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002dcc:	f7ff fee8 	bl	8002ba0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dd0:	2003      	movs	r0, #3
 8002dd2:	f7ff fd3b 	bl	800284c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002dd6:	f7ff fd5d 	bl	8002894 <__NVIC_GetPriorityGrouping>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2200      	movs	r2, #0
 8002dde:	210f      	movs	r1, #15
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fd8f 	bl	8002904 <NVIC_EncodePriority>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4619      	mov	r1, r3
 8002dea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dee:	f7ff fd5f 	bl	80028b0 <__NVIC_SetPriority>

  /* USER CODE BEGIN Init */
  memset(&rx_buf,0,100);
 8002df2:	2264      	movs	r2, #100	; 0x64
 8002df4:	2100      	movs	r1, #0
 8002df6:	48a8      	ldr	r0, [pc, #672]	; (8003098 <main+0x2dc>)
 8002df8:	f002 fe66 	bl	8005ac8 <memset>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dfc:	f000 f98c 	bl	8003118 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LL_InitTick(168000000, 1000000U);		//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음
 8002e00:	49a6      	ldr	r1, [pc, #664]	; (800309c <main+0x2e0>)
 8002e02:	48a7      	ldr	r0, [pc, #668]	; (80030a0 <main+0x2e4>)
 8002e04:	f7ff ff1e 	bl	8002c44 <LL_InitTick>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e08:	f7ff fca6 	bl	8002758 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e0c:	f7ff fb4e 	bl	80024ac <MX_DMA_Init>
  MX_USART6_UART_Init();
 8002e10:	f001 fb20 	bl	8004454 <MX_USART6_UART_Init>
  MX_SPI1_Init();
 8002e14:	f000 faba 	bl	800338c <MX_SPI1_Init>
  MX_TIM3_Init();
 8002e18:	f000 fe9c 	bl	8003b54 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8002e1c:	f001 fa88 	bl	8004330 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8002e20:	f001 fa26 	bl	8004270 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8002e24:	f000 ff2a 	bl	8003c7c <MX_TIM5_Init>
  usDelay(100000);

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH1);
*/
  // ESC PWM
  LL_TIM_EnableCounter(TIM3);
 8002e28:	489e      	ldr	r0, [pc, #632]	; (80030a4 <main+0x2e8>)
 8002e2a:	f7ff ff39 	bl	8002ca0 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH3);	// M1
 8002e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e32:	489c      	ldr	r0, [pc, #624]	; (80030a4 <main+0x2e8>)
 8002e34:	f7ff ff44 	bl	8002cc0 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4); 	// M2
 8002e38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e3c:	4899      	ldr	r0, [pc, #612]	; (80030a4 <main+0x2e8>)
 8002e3e:	f7ff ff3f 	bl	8002cc0 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableCounter(TIM5);
 8002e42:	4899      	ldr	r0, [pc, #612]	; (80030a8 <main+0x2ec>)
 8002e44:	f7ff ff2c 	bl	8002ca0 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);	// M3
 8002e48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e4c:	4896      	ldr	r0, [pc, #600]	; (80030a8 <main+0x2ec>)
 8002e4e:	f7ff ff37 	bl	8002cc0 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);	// M4
 8002e52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e56:	4894      	ldr	r0, [pc, #592]	; (80030a8 <main+0x2ec>)
 8002e58:	f7ff ff32 	bl	8002cc0 <LL_TIM_CC_EnableChannel>
*/




  ICM20602_Initialization();
 8002e5c:	f7fe fb86 	bl	800156c <ICM20602_Initialization>


  // 시간측정을 위한 레지스터 초기화 값
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002e60:	4b92      	ldr	r3, [pc, #584]	; (80030ac <main+0x2f0>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4a91      	ldr	r2, [pc, #580]	; (80030ac <main+0x2f0>)
 8002e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e6a:	60d3      	str	r3, [r2, #12]
  DWT->CYCCNT = 0;
 8002e6c:	4b90      	ldr	r3, [pc, #576]	; (80030b0 <main+0x2f4>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002e72:	4b8f      	ldr	r3, [pc, #572]	; (80030b0 <main+0x2f4>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a8e      	ldr	r2, [pc, #568]	; (80030b0 <main+0x2f4>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	6013      	str	r3, [r2, #0]

  // UART3 GPS 수신기 DMA 및 인터럽트 설정
  GPS_DMA_init(&raw_gps, USART3, DMA1, LL_DMA_STREAM_1);
 8002e7e:	2301      	movs	r3, #1
 8002e80:	4a8c      	ldr	r2, [pc, #560]	; (80030b4 <main+0x2f8>)
 8002e82:	498d      	ldr	r1, [pc, #564]	; (80030b8 <main+0x2fc>)
 8002e84:	488d      	ldr	r0, [pc, #564]	; (80030bc <main+0x300>)
 8002e86:	f7fe f904 	bl	8001092 <GPS_DMA_init>
  LL_DMA_EnableStream(DMA1,LL_DMA_STREAM_1);
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	4889      	ldr	r0, [pc, #548]	; (80030b4 <main+0x2f8>)
 8002e8e:	f7ff fd6d 	bl	800296c <LL_DMA_EnableStream>
  LL_USART_EnableIT_IDLE(USART3);
 8002e92:	4889      	ldr	r0, [pc, #548]	; (80030b8 <main+0x2fc>)
 8002e94:	f7ff ff25 	bl	8002ce2 <LL_USART_EnableIT_IDLE>

  // UART1 SBUS 수신기 인터럽트 설정
  LL_USART_EnableIT_IDLE(USART1);
 8002e98:	4889      	ldr	r0, [pc, #548]	; (80030c0 <main+0x304>)
 8002e9a:	f7ff ff22 	bl	8002ce2 <LL_USART_EnableIT_IDLE>
  LL_USART_EnableIT_RXNE(USART1);
 8002e9e:	4888      	ldr	r0, [pc, #544]	; (80030c0 <main+0x304>)
 8002ea0:	f7ff ff42 	bl	8002d28 <LL_USART_EnableIT_RXNE>

  // UART6 문자열 인터페이스 DMA 및  인터럽트 설정
//  USART_DMA_Transmit_INIT(USART6, DMA2, LL_DMA_STREAM_6);
  LL_USART_EnableIT_RXNE(USART6);	// UART6 인터럽트 활성화
 8002ea4:	4887      	ldr	r0, [pc, #540]	; (80030c4 <main+0x308>)
 8002ea6:	f7ff ff3f 	bl	8002d28 <LL_USART_EnableIT_RXNE>
  LL_USART_EnableIT_IDLE(USART6);
 8002eaa:	4886      	ldr	r0, [pc, #536]	; (80030c4 <main+0x308>)
 8002eac:	f7ff ff19 	bl	8002ce2 <LL_USART_EnableIT_IDLE>
//  LL_USART_EnableIT_TC(USART6);

  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 8002eb0:	2120      	movs	r1, #32
 8002eb2:	4885      	ldr	r0, [pc, #532]	; (80030c8 <main+0x30c>)
 8002eb4:	f7ff ff68 	bl	8002d88 <LL_GPIO_TogglePin>
  //	  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
  //	  usDelay(1000000);
  //	  LL_USART_TransmitData8(USART6,'B');


	  if(flag_INT_UART1_RX==1){
 8002eb8:	4b84      	ldr	r3, [pc, #528]	; (80030cc <main+0x310>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d111      	bne.n	8002ee4 <main+0x128>
		  raw_rx.rx_buf[cnt1++] = LL_USART_ReceiveData8(USART1);
 8002ec0:	4b83      	ldr	r3, [pc, #524]	; (80030d0 <main+0x314>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	b2d1      	uxtb	r1, r2
 8002ec8:	4a81      	ldr	r2, [pc, #516]	; (80030d0 <main+0x314>)
 8002eca:	7011      	strb	r1, [r2, #0]
 8002ecc:	461c      	mov	r4, r3
 8002ece:	487c      	ldr	r0, [pc, #496]	; (80030c0 <main+0x304>)
 8002ed0:	f7ff ff4d 	bl	8002d6e <LL_USART_ReceiveData8>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4b7e      	ldr	r3, [pc, #504]	; (80030d4 <main+0x318>)
 8002eda:	4423      	add	r3, r4
 8002edc:	721a      	strb	r2, [r3, #8]
          flag_INT_UART1_RX =0;
 8002ede:	4b7b      	ldr	r3, [pc, #492]	; (80030cc <main+0x310>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_INT_UART1_RX_DONE == 1)
 8002ee4:	4b7c      	ldr	r3, [pc, #496]	; (80030d8 <main+0x31c>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d10b      	bne.n	8002f04 <main+0x148>
	  {
		  SBUS_Parsing(&raw_rx, &msg_sbus, &rx_recv_cnt, &rx_err_cnt);
 8002eec:	4b7b      	ldr	r3, [pc, #492]	; (80030dc <main+0x320>)
 8002eee:	4a7c      	ldr	r2, [pc, #496]	; (80030e0 <main+0x324>)
 8002ef0:	497c      	ldr	r1, [pc, #496]	; (80030e4 <main+0x328>)
 8002ef2:	4878      	ldr	r0, [pc, #480]	; (80030d4 <main+0x318>)
 8002ef4:	f7ff f8b0 	bl	8002058 <SBUS_Parsing>
          cnt1=0;
 8002ef8:	4b75      	ldr	r3, [pc, #468]	; (80030d0 <main+0x314>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	701a      	strb	r2, [r3, #0]
		  flag_INT_UART1_RX_DONE = 0;
 8002efe:	4b76      	ldr	r3, [pc, #472]	; (80030d8 <main+0x31c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
	  }

	  if(flag_INT_UART4_RX==1){
 8002f04:	4b78      	ldr	r3, [pc, #480]	; (80030e8 <main+0x32c>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d102      	bne.n	8002f12 <main+0x156>
		  flag_INT_UART4_RX = 0;
 8002f0c:	4b76      	ldr	r3, [pc, #472]	; (80030e8 <main+0x32c>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]
	  }


	  if(flag_INT_USART6 == 1){
 8002f12:	4b76      	ldr	r3, [pc, #472]	; (80030ec <main+0x330>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d102      	bne.n	8002f20 <main+0x164>
		  flag_INT_USART6 =0;
 8002f1a:	4b74      	ldr	r3, [pc, #464]	; (80030ec <main+0x330>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
//		  LL_USART_TransmitData8(USART6,rxd); // 호스트로부터 수신한 데이터를 그대로 다시 보냄
//		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
	  }

	  // UART3에서 한 프레임 GPS 데이터 수신완료에 인터럽트 발생, GPS데이터가 수신될 때마다 DMA는 데이터카운트를 하나씩 감소하면서 0이 될 때까지 전송
	  if(flag_INT_UART3_GPS == 1){
 8002f20:	4b73      	ldr	r3, [pc, #460]	; (80030f0 <main+0x334>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d109      	bne.n	8002f3c <main+0x180>
//		  cnt=(uint8_t)(MSG_LENGTH_NAV_SOL-LL_DMA_GetDataLength(DMA1,LL_DMA_STREAM_1));
		  LL_DMA_DisableStream(DMA1,LL_DMA_STREAM_1);
 8002f28:	2101      	movs	r1, #1
 8002f2a:	4862      	ldr	r0, [pc, #392]	; (80030b4 <main+0x2f8>)
 8002f2c:	f7ff fd3e 	bl	80029ac <LL_DMA_DisableStream>
		  LL_DMA_ClearFlag_TC1(DMA1);
 8002f30:	4860      	ldr	r0, [pc, #384]	; (80030b4 <main+0x2f8>)
 8002f32:	f7ff fd5b 	bl	80029ec <LL_DMA_ClearFlag_TC1>
//		  cnt = 0;
		  flag_INT_UART3_GPS =0;
 8002f36:	4b6e      	ldr	r3, [pc, #440]	; (80030f0 <main+0x334>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]

	  }

	  // DMA 데이터카운트가 0이되면 인터럽트 발생, 데이터를 버퍼로 수신 완료
	  if(flag_DMA1_DONE == 1)
 8002f3c:	4b6d      	ldr	r3, [pc, #436]	; (80030f4 <main+0x338>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d10c      	bne.n	8002f5e <main+0x1a2>
	  {
//		  cnt=(uint8_t)(MSG_LENGTH_NAV_SOL-LL_DMA_GetDataLength(DMA1,LL_DMA_STREAM_1));
		  GPS_Parsing(&raw_gps, &msg_nav, &recv_cnt, &err_cnt);
 8002f44:	4b6c      	ldr	r3, [pc, #432]	; (80030f8 <main+0x33c>)
 8002f46:	4a6d      	ldr	r2, [pc, #436]	; (80030fc <main+0x340>)
 8002f48:	496d      	ldr	r1, [pc, #436]	; (8003100 <main+0x344>)
 8002f4a:	485c      	ldr	r0, [pc, #368]	; (80030bc <main+0x300>)
 8002f4c:	f7fe f8c8 	bl	80010e0 <GPS_Parsing>
		  LL_DMA_EnableStream(DMA1,LL_DMA_STREAM_1);
 8002f50:	2101      	movs	r1, #1
 8002f52:	4858      	ldr	r0, [pc, #352]	; (80030b4 <main+0x2f8>)
 8002f54:	f7ff fd0a 	bl	800296c <LL_DMA_EnableStream>
		  flag_DMA1_DONE = 0;
 8002f58:	4b66      	ldr	r3, [pc, #408]	; (80030f4 <main+0x338>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
	  }


	  if(ICM20602_DataReady() == 1)
 8002f5e:	f7fe fbd7 	bl	8001710 <ICM20602_DataReady>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d10a      	bne.n	8002f7e <main+0x1c2>
	  {

		  t2 = DWT->CYCCNT;
 8002f68:	4b51      	ldr	r3, [pc, #324]	; (80030b0 <main+0x2f4>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4a65      	ldr	r2, [pc, #404]	; (8003104 <main+0x348>)
 8002f6e:	6013      	str	r3, [r2, #0]
//		  sampleFreq = (1000000.0f /(((float)(t2-t1))/CLOCK_PER_USEC)); // set integration time by time elapsed since last filter update
		  t1 = t2;
 8002f70:	4b64      	ldr	r3, [pc, #400]	; (8003104 <main+0x348>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a64      	ldr	r2, [pc, #400]	; (8003108 <main+0x34c>)
 8002f76:	6013      	str	r3, [r2, #0]
//		  printf("%.2f\n",(sampleFreq));
		  GetRPY(&sampleFreq);
 8002f78:	4864      	ldr	r0, [pc, #400]	; (800310c <main+0x350>)
 8002f7a:	f7fe fbd5 	bl	8001728 <GetRPY>

	  }


	  // Failsafe
	  if(msg_sbus.failsafe==MSG_SBUS_FS_BIT_MASK) {
 8002f7e:	4b59      	ldr	r3, [pc, #356]	; (80030e4 <main+0x328>)
 8002f80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f84:	2b08      	cmp	r3, #8
 8002f86:	d110      	bne.n	8002faa <main+0x1ee>
		  TIM3->CCR3 = MIN_TIM_PWM;
 8002f88:	4b46      	ldr	r3, [pc, #280]	; (80030a4 <main+0x2e8>)
 8002f8a:	f642 1204 	movw	r2, #10500	; 0x2904
 8002f8e:	63da      	str	r2, [r3, #60]	; 0x3c
		  TIM3->CCR4 = MIN_TIM_PWM;
 8002f90:	4b44      	ldr	r3, [pc, #272]	; (80030a4 <main+0x2e8>)
 8002f92:	f642 1204 	movw	r2, #10500	; 0x2904
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40
		  TIM5->CCR4 = MIN_TIM_PWM;
 8002f98:	4b43      	ldr	r3, [pc, #268]	; (80030a8 <main+0x2ec>)
 8002f9a:	f642 1204 	movw	r2, #10500	; 0x2904
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40
		  TIM5->CCR3 = MIN_TIM_PWM;
 8002fa0:	4b41      	ldr	r3, [pc, #260]	; (80030a8 <main+0x2ec>)
 8002fa2:	f642 1204 	movw	r2, #10500	; 0x2904
 8002fa6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fa8:	e786      	b.n	8002eb8 <main+0xfc>
	  }

	  // Radio Control
	  else	  {

		  if(radio_safe==0) {
 8002faa:	4b59      	ldr	r3, [pc, #356]	; (8003110 <main+0x354>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d139      	bne.n	8003026 <main+0x26a>
			  if((msg_sbus.rx_channel[0] < MIN_RADIO_CH1_PWM + 5)&&(msg_sbus.rx_channel[0] > 0)) {
 8002fb2:	4b4c      	ldr	r3, [pc, #304]	; (80030e4 <main+0x328>)
 8002fb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002fb8:	2bc4      	cmp	r3, #196	; 0xc4
 8002fba:	f73f af7d 	bgt.w	8002eb8 <main+0xfc>
 8002fbe:	4b49      	ldr	r3, [pc, #292]	; (80030e4 <main+0x328>)
 8002fc0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f77f af77 	ble.w	8002eb8 <main+0xfc>
				   LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 8002fca:	2120      	movs	r1, #32
 8002fcc:	483e      	ldr	r0, [pc, #248]	; (80030c8 <main+0x30c>)
 8002fce:	f7ff fedb 	bl	8002d88 <LL_GPIO_TogglePin>
				   usDelay(500000);
 8002fd2:	4850      	ldr	r0, [pc, #320]	; (8003114 <main+0x358>)
 8002fd4:	f000 f8e4 	bl	80031a0 <usDelay>
				   LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 8002fd8:	2120      	movs	r1, #32
 8002fda:	483b      	ldr	r0, [pc, #236]	; (80030c8 <main+0x30c>)
 8002fdc:	f7ff fed4 	bl	8002d88 <LL_GPIO_TogglePin>
				   usDelay(500000);
 8002fe0:	484c      	ldr	r0, [pc, #304]	; (8003114 <main+0x358>)
 8002fe2:	f000 f8dd 	bl	80031a0 <usDelay>
				   LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 8002fe6:	2120      	movs	r1, #32
 8002fe8:	4837      	ldr	r0, [pc, #220]	; (80030c8 <main+0x30c>)
 8002fea:	f7ff fecd 	bl	8002d88 <LL_GPIO_TogglePin>
				   usDelay(500000);
 8002fee:	4849      	ldr	r0, [pc, #292]	; (8003114 <main+0x358>)
 8002ff0:	f000 f8d6 	bl	80031a0 <usDelay>
				   LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 8002ff4:	2120      	movs	r1, #32
 8002ff6:	4834      	ldr	r0, [pc, #208]	; (80030c8 <main+0x30c>)
 8002ff8:	f7ff fec6 	bl	8002d88 <LL_GPIO_TogglePin>
				   usDelay(500000);
 8002ffc:	4845      	ldr	r0, [pc, #276]	; (8003114 <main+0x358>)
 8002ffe:	f000 f8cf 	bl	80031a0 <usDelay>
				   LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 8003002:	2120      	movs	r1, #32
 8003004:	4830      	ldr	r0, [pc, #192]	; (80030c8 <main+0x30c>)
 8003006:	f7ff febf 	bl	8002d88 <LL_GPIO_TogglePin>
				   usDelay(500000);
 800300a:	4842      	ldr	r0, [pc, #264]	; (8003114 <main+0x358>)
 800300c:	f000 f8c8 	bl	80031a0 <usDelay>
				   LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
 8003010:	2120      	movs	r1, #32
 8003012:	482d      	ldr	r0, [pc, #180]	; (80030c8 <main+0x30c>)
 8003014:	f7ff feb8 	bl	8002d88 <LL_GPIO_TogglePin>
				   usDelay(500000);
 8003018:	483e      	ldr	r0, [pc, #248]	; (8003114 <main+0x358>)
 800301a:	f000 f8c1 	bl	80031a0 <usDelay>
				   radio_safe = 1;
 800301e:	4b3c      	ldr	r3, [pc, #240]	; (8003110 <main+0x354>)
 8003020:	2201      	movs	r2, #1
 8003022:	701a      	strb	r2, [r3, #0]
 8003024:	e748      	b.n	8002eb8 <main+0xfc>
			  }
		  }

		  else {
			  TIM3->CCR3 = MIN_TIM_PWM + RANGE_TIM_PWM/RANGE_RADIO_CH1_PWM*(msg_sbus.rx_channel[0]-MIN_RADIO_CH1_PWM);
 8003026:	4b2f      	ldr	r3, [pc, #188]	; (80030e4 <main+0x328>)
 8003028:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800302c:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 8003030:	4613      	mov	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800303c:	3304      	adds	r3, #4
 800303e:	4a19      	ldr	r2, [pc, #100]	; (80030a4 <main+0x2e8>)
 8003040:	63d3      	str	r3, [r2, #60]	; 0x3c
			  TIM3->CCR4 = MIN_TIM_PWM + RANGE_TIM_PWM/RANGE_RADIO_CH1_PWM*(msg_sbus.rx_channel[0]-MIN_RADIO_CH1_PWM);
 8003042:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <main+0x328>)
 8003044:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003048:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 800304c:	4613      	mov	r3, r2
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	4413      	add	r3, r2
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003058:	3304      	adds	r3, #4
 800305a:	4a12      	ldr	r2, [pc, #72]	; (80030a4 <main+0x2e8>)
 800305c:	6413      	str	r3, [r2, #64]	; 0x40
			  TIM5->CCR4 = MIN_TIM_PWM + RANGE_TIM_PWM/RANGE_RADIO_CH1_PWM*(msg_sbus.rx_channel[0]-MIN_RADIO_CH1_PWM);
 800305e:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <main+0x328>)
 8003060:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003064:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 8003068:	4613      	mov	r3, r2
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	4413      	add	r3, r2
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003074:	3304      	adds	r3, #4
 8003076:	4a0c      	ldr	r2, [pc, #48]	; (80030a8 <main+0x2ec>)
 8003078:	6413      	str	r3, [r2, #64]	; 0x40
			  TIM5->CCR3 = MIN_TIM_PWM + RANGE_TIM_PWM/RANGE_RADIO_CH1_PWM*(msg_sbus.rx_channel[0]-MIN_RADIO_CH1_PWM);
 800307a:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <main+0x328>)
 800307c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003080:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 8003084:	4613      	mov	r3, r2
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	4413      	add	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003090:	3304      	adds	r3, #4
 8003092:	4a05      	ldr	r2, [pc, #20]	; (80030a8 <main+0x2ec>)
 8003094:	63d3      	str	r3, [r2, #60]	; 0x3c
	  if(flag_INT_UART1_RX==1){
 8003096:	e70f      	b.n	8002eb8 <main+0xfc>
 8003098:	20000374 	.word	0x20000374
 800309c:	000f4240 	.word	0x000f4240
 80030a0:	0a037a00 	.word	0x0a037a00
 80030a4:	40000400 	.word	0x40000400
 80030a8:	40000c00 	.word	0x40000c00
 80030ac:	e000edf0 	.word	0xe000edf0
 80030b0:	e0001000 	.word	0xe0001000
 80030b4:	40026000 	.word	0x40026000
 80030b8:	40004800 	.word	0x40004800
 80030bc:	200002fc 	.word	0x200002fc
 80030c0:	40011000 	.word	0x40011000
 80030c4:	40011400 	.word	0x40011400
 80030c8:	40020400 	.word	0x40020400
 80030cc:	2000043c 	.word	0x2000043c
 80030d0:	20000248 	.word	0x20000248
 80030d4:	20000340 	.word	0x20000340
 80030d8:	20000371 	.word	0x20000371
 80030dc:	20000244 	.word	0x20000244
 80030e0:	20000240 	.word	0x20000240
 80030e4:	200002b0 	.word	0x200002b0
 80030e8:	20000369 	.word	0x20000369
 80030ec:	2000036a 	.word	0x2000036a
 80030f0:	20000372 	.word	0x20000372
 80030f4:	2000043d 	.word	0x2000043d
 80030f8:	2000026c 	.word	0x2000026c
 80030fc:	20000268 	.word	0x20000268
 8003100:	200002dc 	.word	0x200002dc
 8003104:	20000250 	.word	0x20000250
 8003108:	2000024c 	.word	0x2000024c
 800310c:	20000364 	.word	0x20000364
 8003110:	20000249 	.word	0x20000249
 8003114:	0007a120 	.word	0x0007a120

08003118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 800311c:	2005      	movs	r0, #5
 800311e:	f7ff fd6f 	bl	8002c00 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8003122:	bf00      	nop
 8003124:	f7ff fd80 	bl	8002c28 <LL_FLASH_GetLatency>
 8003128:	4603      	mov	r3, r0
 800312a:	2b05      	cmp	r3, #5
 800312c:	d1fa      	bne.n	8003124 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800312e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003132:	f7ff fda1 	bl	8002c78 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8003136:	f7ff fc67 	bl	8002a08 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800313a:	bf00      	nop
 800313c:	f7ff fc74 	bl	8002a28 <LL_RCC_HSE_IsReady>
 8003140:	4603      	mov	r3, r0
 8003142:	2b01      	cmp	r3, #1
 8003144:	d1fa      	bne.n	800313c <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 8003146:	2300      	movs	r3, #0
 8003148:	22a8      	movs	r2, #168	; 0xa8
 800314a:	2104      	movs	r1, #4
 800314c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8003150:	f7ff fd00 	bl	8002b54 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8003154:	f7ff fcda 	bl	8002b0c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8003158:	bf00      	nop
 800315a:	f7ff fce7 	bl	8002b2c <LL_RCC_PLL_IsReady>
 800315e:	4603      	mov	r3, r0
 8003160:	2b01      	cmp	r3, #1
 8003162:	d1fa      	bne.n	800315a <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003164:	2000      	movs	r0, #0
 8003166:	f7ff fc95 	bl	8002a94 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 800316a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800316e:	f7ff fca5 	bl	8002abc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8003172:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003176:	f7ff fcb5 	bl	8002ae4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800317a:	2002      	movs	r0, #2
 800317c:	f7ff fc68 	bl	8002a50 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003180:	bf00      	nop
 8003182:	f7ff fc79 	bl	8002a78 <LL_RCC_GetSysClkSource>
 8003186:	4603      	mov	r3, r0
 8003188:	2b08      	cmp	r3, #8
 800318a:	d1fa      	bne.n	8003182 <SystemClock_Config+0x6a>
  {

  }
  LL_Init1msTick(168000000);
 800318c:	4803      	ldr	r0, [pc, #12]	; (800319c <SystemClock_Config+0x84>)
 800318e:	f002 fc45 	bl	8005a1c <LL_Init1msTick>
  LL_SetSystemCoreClock(168000000);
 8003192:	4802      	ldr	r0, [pc, #8]	; (800319c <SystemClock_Config+0x84>)
 8003194:	f002 fc50 	bl	8005a38 <LL_SetSystemCoreClock>
}
 8003198:	bf00      	nop
 800319a:	bd80      	pop	{r7, pc}
 800319c:	0a037a00 	.word	0x0a037a00

080031a0 <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(unsigned int nTime)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
	__IO unsigned int  tmp = SysTick->CTRL;
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <usDelay+0x48>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60fb      	str	r3, [r7, #12]
	((void)tmp);
 80031ae:	68fb      	ldr	r3, [r7, #12]

	SysTick->VAL = 0;
 80031b0:	4b0d      	ldr	r3, [pc, #52]	; (80031e8 <usDelay+0x48>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	609a      	str	r2, [r3, #8]

	SysTick->CTRL = SysTick->CTRL | SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk; // clock source
 80031b6:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <usDelay+0x48>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a0b      	ldr	r2, [pc, #44]	; (80031e8 <usDelay+0x48>)
 80031bc:	f043 0307 	orr.w	r3, r3, #7
 80031c0:	6013      	str	r3, [r2, #0]

	TimingDelay = nTime-1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	3b01      	subs	r3, #1
 80031c6:	4a09      	ldr	r2, [pc, #36]	; (80031ec <usDelay+0x4c>)
 80031c8:	6013      	str	r3, [r2, #0]

	while(TimingDelay);
 80031ca:	bf00      	nop
 80031cc:	4b07      	ldr	r3, [pc, #28]	; (80031ec <usDelay+0x4c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1fb      	bne.n	80031cc <usDelay+0x2c>

	SysTick->CTRL = 0;
 80031d4:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <usDelay+0x48>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]

}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	e000e010 	.word	0xe000e010
 80031ec:	2000036c 	.word	0x2000036c

080031f0 <__NVIC_GetPriorityGrouping>:
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <__NVIC_GetPriorityGrouping+0x18>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	0a1b      	lsrs	r3, r3, #8
 80031fa:	f003 0307 	and.w	r3, r3, #7
}
 80031fe:	4618      	mov	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <__NVIC_EnableIRQ>:
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	2b00      	cmp	r3, #0
 800321c:	db0b      	blt.n	8003236 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	f003 021f 	and.w	r2, r3, #31
 8003224:	4907      	ldr	r1, [pc, #28]	; (8003244 <__NVIC_EnableIRQ+0x38>)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	2001      	movs	r0, #1
 800322e:	fa00 f202 	lsl.w	r2, r0, r2
 8003232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	e000e100 	.word	0xe000e100

08003248 <__NVIC_SetPriority>:
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	6039      	str	r1, [r7, #0]
 8003252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003258:	2b00      	cmp	r3, #0
 800325a:	db0a      	blt.n	8003272 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	b2da      	uxtb	r2, r3
 8003260:	490c      	ldr	r1, [pc, #48]	; (8003294 <__NVIC_SetPriority+0x4c>)
 8003262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003266:	0112      	lsls	r2, r2, #4
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	440b      	add	r3, r1
 800326c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003270:	e00a      	b.n	8003288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	b2da      	uxtb	r2, r3
 8003276:	4908      	ldr	r1, [pc, #32]	; (8003298 <__NVIC_SetPriority+0x50>)
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	3b04      	subs	r3, #4
 8003280:	0112      	lsls	r2, r2, #4
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	440b      	add	r3, r1
 8003286:	761a      	strb	r2, [r3, #24]
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	e000e100 	.word	0xe000e100
 8003298:	e000ed00 	.word	0xe000ed00

0800329c <NVIC_EncodePriority>:
{
 800329c:	b480      	push	{r7}
 800329e:	b089      	sub	sp, #36	; 0x24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f1c3 0307 	rsb	r3, r3, #7
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	bf28      	it	cs
 80032ba:	2304      	movcs	r3, #4
 80032bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	3304      	adds	r3, #4
 80032c2:	2b06      	cmp	r3, #6
 80032c4:	d902      	bls.n	80032cc <NVIC_EncodePriority+0x30>
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3b03      	subs	r3, #3
 80032ca:	e000      	b.n	80032ce <NVIC_EncodePriority+0x32>
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43da      	mvns	r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	401a      	ands	r2, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	43d9      	mvns	r1, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f4:	4313      	orrs	r3, r2
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3724      	adds	r7, #36	; 0x24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <LL_AHB1_GRP1_EnableClock>:
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800330c:	4b08      	ldr	r3, [pc, #32]	; (8003330 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800330e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003310:	4907      	ldr	r1, [pc, #28]	; (8003330 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4313      	orrs	r3, r2
 8003316:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800331a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4013      	ands	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003322:	68fb      	ldr	r3, [r7, #12]
}
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	40023800 	.word	0x40023800

08003334 <LL_APB2_GRP1_EnableClock>:
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800333c:	4b08      	ldr	r3, [pc, #32]	; (8003360 <LL_APB2_GRP1_EnableClock+0x2c>)
 800333e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003340:	4907      	ldr	r1, [pc, #28]	; (8003360 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4313      	orrs	r3, r2
 8003346:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <LL_APB2_GRP1_EnableClock+0x2c>)
 800334a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4013      	ands	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003352:	68fb      	ldr	r3, [r7, #12]
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	40023800 	.word	0x40023800

08003364 <LL_SPI_SetStandard>:
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f023 0210 	bic.w	r2, r3, #16
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	605a      	str	r2, [r3, #4]
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b090      	sub	sp, #64	; 0x40
 8003390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8003392:	f107 0318 	add.w	r3, r7, #24
 8003396:	2228      	movs	r2, #40	; 0x28
 8003398:	2100      	movs	r1, #0
 800339a:	4618      	mov	r0, r3
 800339c:	f002 fb94 	bl	8005ac8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a0:	463b      	mov	r3, r7
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	605a      	str	r2, [r3, #4]
 80033a8:	609a      	str	r2, [r3, #8]
 80033aa:	60da      	str	r2, [r3, #12]
 80033ac:	611a      	str	r2, [r3, #16]
 80033ae:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 80033b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80033b4:	f7ff ffbe 	bl	8003334 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80033b8:	2001      	movs	r0, #1
 80033ba:	f7ff ffa3 	bl	8003304 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80033be:	23e0      	movs	r3, #224	; 0xe0
 80033c0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80033c2:	2302      	movs	r3, #2
 80033c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80033c6:	2303      	movs	r3, #3
 80033c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80033d2:	2305      	movs	r3, #5
 80033d4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d6:	463b      	mov	r3, r7
 80033d8:	4619      	mov	r1, r3
 80033da:	481b      	ldr	r0, [pc, #108]	; (8003448 <MX_SPI1_Init+0xbc>)
 80033dc:	f001 fb08 	bl	80049f0 <LL_GPIO_Init>

  /* SPI1 interrupt Init */
  NVIC_SetPriority(SPI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80033e0:	f7ff ff06 	bl	80031f0 <__NVIC_GetPriorityGrouping>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2200      	movs	r2, #0
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff ff56 	bl	800329c <NVIC_EncodePriority>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4619      	mov	r1, r3
 80033f4:	2023      	movs	r0, #35	; 0x23
 80033f6:	f7ff ff27 	bl	8003248 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI1_IRQn);
 80033fa:	2023      	movs	r0, #35	; 0x23
 80033fc:	f7ff ff06 	bl	800320c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003400:	2300      	movs	r3, #0
 8003402:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8003404:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003408:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800340a:	2300      	movs	r3, #0
 800340c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800340e:	2302      	movs	r3, #2
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8003412:	2301      	movs	r3, #1
 8003414:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800341a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 800341c:	2310      	movs	r3, #16
 800341e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003420:	2300      	movs	r3, #0
 8003422:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003424:	2300      	movs	r3, #0
 8003426:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8003428:	230a      	movs	r3, #10
 800342a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 800342c:	f107 0318 	add.w	r3, r7, #24
 8003430:	4619      	mov	r1, r3
 8003432:	4806      	ldr	r0, [pc, #24]	; (800344c <MX_SPI1_Init+0xc0>)
 8003434:	f001 fcad 	bl	8004d92 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8003438:	2100      	movs	r1, #0
 800343a:	4804      	ldr	r0, [pc, #16]	; (800344c <MX_SPI1_Init+0xc0>)
 800343c:	f7ff ff92 	bl	8003364 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003440:	bf00      	nop
 8003442:	3740      	adds	r7, #64	; 0x40
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40020000 	.word	0x40020000
 800344c:	40013000 	.word	0x40013000

08003450 <LL_DMA_IsActiveFlag_TC1>:
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->LISR ,DMA_LISR_TCIF1)==(DMA_LISR_TCIF1));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003464:	bf0c      	ite	eq
 8003466:	2301      	moveq	r3, #1
 8003468:	2300      	movne	r3, #0
 800346a:	b2db      	uxtb	r3, r3
}
 800346c:	4618      	mov	r0, r3
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <LL_DMA_ClearFlag_TC1>:
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF1);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003486:	609a      	str	r2, [r3, #8]
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE) == DMA_SxCR_TCIE);
 800349e:	4a0a      	ldr	r2, [pc, #40]	; (80034c8 <LL_DMA_IsEnabledIT_TC+0x34>)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	4413      	add	r3, r2
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4413      	add	r3, r2
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0310 	and.w	r3, r3, #16
 80034b2:	2b10      	cmp	r3, #16
 80034b4:	bf0c      	ite	eq
 80034b6:	2301      	moveq	r3, #1
 80034b8:	2300      	movne	r3, #0
 80034ba:	b2db      	uxtb	r3, r3
}
 80034bc:	4618      	mov	r0, r3
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	08008ca0 	.word	0x08008ca0

080034cc <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80034d4:	4b07      	ldr	r3, [pc, #28]	; (80034f4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80034d6:	695a      	ldr	r2, [r3, #20]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4013      	ands	r3, r2
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	429a      	cmp	r2, r3
 80034e0:	bf0c      	ite	eq
 80034e2:	2301      	moveq	r3, #1
 80034e4:	2300      	movne	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	40013c00 	.word	0x40013c00

080034f8 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8003500:	4a04      	ldr	r2, [pc, #16]	; (8003514 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6153      	str	r3, [r2, #20]
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40013c00 	.word	0x40013c00

08003518 <LL_USART_IsActiveFlag_IDLE>:
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b10      	cmp	r3, #16
 800352a:	bf0c      	ite	eq
 800352c:	2301      	moveq	r3, #1
 800352e:	2300      	movne	r3, #0
 8003530:	b2db      	uxtb	r3, r3
}
 8003532:	4618      	mov	r0, r3
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <LL_USART_IsActiveFlag_RXNE>:
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0320 	and.w	r3, r3, #32
 800354e:	2b20      	cmp	r3, #32
 8003550:	bf0c      	ite	eq
 8003552:	2301      	moveq	r3, #1
 8003554:	2300      	movne	r3, #0
 8003556:	b2db      	uxtb	r3, r3
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <LL_USART_ClearFlag_IDLE>:
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8003572:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800357a:	68fb      	ldr	r3, [r7, #12]
}
 800357c:	bf00      	nop
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_USART_ClearFlag_RXNE>:
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f06f 0220 	mvn.w	r2, #32
 8003596:	601a      	str	r2, [r3, #0]
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <LL_USART_IsEnabledIT_IDLE>:
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	bf0c      	ite	eq
 80035b8:	2301      	moveq	r3, #1
 80035ba:	2300      	movne	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <LL_USART_IsEnabledIT_RXNE>:
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b20      	cmp	r3, #32
 80035dc:	bf0c      	ite	eq
 80035de:	2301      	moveq	r3, #1
 80035e0:	2300      	movne	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <LL_USART_ReceiveData8>:
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	b2db      	uxtb	r3, r3
}
 80035fe:	4618      	mov	r0, r3
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800360a:	b480      	push	{r7}
 800360c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800360e:	e7fe      	b.n	800360e <NMI_Handler+0x4>

08003610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003614:	e7fe      	b.n	8003614 <HardFault_Handler+0x4>

08003616 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003616:	b480      	push	{r7}
 8003618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800361a:	e7fe      	b.n	800361a <MemManage_Handler+0x4>

0800361c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003620:	e7fe      	b.n	8003620 <BusFault_Handler+0x4>

08003622 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003622:	b480      	push	{r7}
 8003624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003626:	e7fe      	b.n	8003626 <UsageFault_Handler+0x4>

08003628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800362c:	bf00      	nop
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003636:	b480      	push	{r7}
 8003638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800363a:	bf00      	nop
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (TimingDelay != 0x00) {
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <SysTick_Handler+0x20>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d004      	beq.n	800366a <SysTick_Handler+0x16>

		TimingDelay--;
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <SysTick_Handler+0x20>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	3b01      	subs	r3, #1
 8003666:	4a03      	ldr	r2, [pc, #12]	; (8003674 <SysTick_Handler+0x20>)
 8003668:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	2000036c 	.word	0x2000036c

08003678 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	// IMU SPI External interrupt
  /* USER CODE END EXTI4_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_4) != RESET)
 800367c:	2010      	movs	r0, #16
 800367e:	f7ff ff25 	bl	80034cc <LL_EXTI_IsActiveFlag_0_31>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <EXTI4_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_4);
 8003688:	2010      	movs	r0, #16
 800368a:	f7ff ff35 	bl	80034f8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_4 */
  }
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

    /* Check transfer-complete interrupt */
    if (LL_DMA_IsEnabledIT_TC(DMA1, LL_DMA_STREAM_1) && LL_DMA_IsActiveFlag_TC1(DMA1)) {
 8003698:	2101      	movs	r1, #1
 800369a:	480a      	ldr	r0, [pc, #40]	; (80036c4 <DMA1_Stream1_IRQHandler+0x30>)
 800369c:	f7ff fefa 	bl	8003494 <LL_DMA_IsEnabledIT_TC>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <DMA1_Stream1_IRQHandler+0x2a>
 80036a6:	4807      	ldr	r0, [pc, #28]	; (80036c4 <DMA1_Stream1_IRQHandler+0x30>)
 80036a8:	f7ff fed2 	bl	8003450 <LL_DMA_IsActiveFlag_TC1>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <DMA1_Stream1_IRQHandler+0x2a>
		LL_DMA_ClearFlag_TC1(DMA1);
 80036b2:	4804      	ldr	r0, [pc, #16]	; (80036c4 <DMA1_Stream1_IRQHandler+0x30>)
 80036b4:	f7ff fee0 	bl	8003478 <LL_DMA_ClearFlag_TC1>
        flag_DMA1_DONE = 1;
 80036b8:	4b03      	ldr	r3, [pc, #12]	; (80036c8 <DMA1_Stream1_IRQHandler+0x34>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Stream1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40026000 	.word	0x40026000
 80036c8:	2000043d 	.word	0x2000043d

080036cc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0

  /* USER CODE END SPI1_IRQn 0 */
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80036d0:	bf00      	nop
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	if(LL_USART_IsEnabledIT_RXNE(USART1) && LL_USART_IsActiveFlag_RXNE(USART1)) // 인터럽트중 USART6인지 확인
 80036e0:	4812      	ldr	r0, [pc, #72]	; (800372c <USART1_IRQHandler+0x50>)
 80036e2:	f7ff ff72 	bl	80035ca <LL_USART_IsEnabledIT_RXNE>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00b      	beq.n	8003704 <USART1_IRQHandler+0x28>
 80036ec:	480f      	ldr	r0, [pc, #60]	; (800372c <USART1_IRQHandler+0x50>)
 80036ee:	f7ff ff26 	bl	800353e <LL_USART_IsActiveFlag_RXNE>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <USART1_IRQHandler+0x28>
	{
			LL_USART_ClearFlag_RXNE(USART1); // 맞으면 비트 클리어
 80036f8:	480c      	ldr	r0, [pc, #48]	; (800372c <USART1_IRQHandler+0x50>)
 80036fa:	f7ff ff45 	bl	8003588 <LL_USART_ClearFlag_RXNE>
			flag_INT_UART1_RX = 1; // flag 클리어
 80036fe:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <USART1_IRQHandler+0x54>)
 8003700:	2201      	movs	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]

	}


	if(LL_USART_IsEnabledIT_IDLE(USART1) && LL_USART_IsActiveFlag_IDLE(USART1)) {
 8003704:	4809      	ldr	r0, [pc, #36]	; (800372c <USART1_IRQHandler+0x50>)
 8003706:	f7ff ff4d 	bl	80035a4 <LL_USART_IsEnabledIT_IDLE>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00b      	beq.n	8003728 <USART1_IRQHandler+0x4c>
 8003710:	4806      	ldr	r0, [pc, #24]	; (800372c <USART1_IRQHandler+0x50>)
 8003712:	f7ff ff01 	bl	8003518 <LL_USART_IsActiveFlag_IDLE>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d005      	beq.n	8003728 <USART1_IRQHandler+0x4c>
		LL_USART_ClearFlag_IDLE(USART1);
 800371c:	4803      	ldr	r0, [pc, #12]	; (800372c <USART1_IRQHandler+0x50>)
 800371e:	f7ff ff21 	bl	8003564 <LL_USART_ClearFlag_IDLE>
		flag_INT_UART1_RX_DONE = 1; // 수신완료
 8003722:	4b04      	ldr	r3, [pc, #16]	; (8003734 <USART1_IRQHandler+0x58>)
 8003724:	2201      	movs	r2, #1
 8003726:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003728:	bf00      	nop
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40011000 	.word	0x40011000
 8003730:	2000043c 	.word	0x2000043c
 8003734:	20000371 	.word	0x20000371

08003738 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
			rxd_gps = LL_USART_ReceiveData8(USART3); // 데이터 수신
			flag_INT_UART3_GPS = 1; // flag 클리어

	}
*/
	if(LL_USART_IsEnabledIT_IDLE(USART3) && LL_USART_IsActiveFlag_IDLE(USART3)) {
 800373c:	4809      	ldr	r0, [pc, #36]	; (8003764 <USART3_IRQHandler+0x2c>)
 800373e:	f7ff ff31 	bl	80035a4 <LL_USART_IsEnabledIT_IDLE>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00b      	beq.n	8003760 <USART3_IRQHandler+0x28>
 8003748:	4806      	ldr	r0, [pc, #24]	; (8003764 <USART3_IRQHandler+0x2c>)
 800374a:	f7ff fee5 	bl	8003518 <LL_USART_IsActiveFlag_IDLE>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d005      	beq.n	8003760 <USART3_IRQHandler+0x28>
		LL_USART_ClearFlag_IDLE(USART3);
 8003754:	4803      	ldr	r0, [pc, #12]	; (8003764 <USART3_IRQHandler+0x2c>)
 8003756:	f7ff ff05 	bl	8003564 <LL_USART_ClearFlag_IDLE>
		flag_INT_UART3_GPS = 1; // flag 클리어
 800375a:	4b03      	ldr	r3, [pc, #12]	; (8003768 <USART3_IRQHandler+0x30>)
 800375c:	2201      	movs	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003760:	bf00      	nop
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40004800 	.word	0x40004800
 8003768:	20000372 	.word	0x20000372

0800376c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6) && LL_USART_IsActiveFlag_RXNE(USART6))// 인터럽트중 USART6인지 확인
 8003770:	4816      	ldr	r0, [pc, #88]	; (80037cc <USART6_IRQHandler+0x60>)
 8003772:	f7ff fee4 	bl	800353e <LL_USART_IsActiveFlag_RXNE>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d012      	beq.n	80037a2 <USART6_IRQHandler+0x36>
 800377c:	4813      	ldr	r0, [pc, #76]	; (80037cc <USART6_IRQHandler+0x60>)
 800377e:	f7ff fede 	bl	800353e <LL_USART_IsActiveFlag_RXNE>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00c      	beq.n	80037a2 <USART6_IRQHandler+0x36>
	{
			LL_USART_ClearFlag_RXNE(USART6); // 맞으면 비트 클리어
 8003788:	4810      	ldr	r0, [pc, #64]	; (80037cc <USART6_IRQHandler+0x60>)
 800378a:	f7ff fefd 	bl	8003588 <LL_USART_ClearFlag_RXNE>
			rxd = LL_USART_ReceiveData8(USART6); // 데이터 수신
 800378e:	480f      	ldr	r0, [pc, #60]	; (80037cc <USART6_IRQHandler+0x60>)
 8003790:	f7ff ff2e 	bl	80035f0 <LL_USART_ReceiveData8>
 8003794:	4603      	mov	r3, r0
 8003796:	461a      	mov	r2, r3
 8003798:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <USART6_IRQHandler+0x64>)
 800379a:	701a      	strb	r2, [r3, #0]
			flag_INT_USART6 = 1; // flag 클리어
 800379c:	4b0d      	ldr	r3, [pc, #52]	; (80037d4 <USART6_IRQHandler+0x68>)
 800379e:	2201      	movs	r2, #1
 80037a0:	701a      	strb	r2, [r3, #0]

	}
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */
	if(LL_USART_IsEnabledIT_IDLE(USART6) && LL_USART_IsActiveFlag_IDLE(USART6)) {
 80037a2:	480a      	ldr	r0, [pc, #40]	; (80037cc <USART6_IRQHandler+0x60>)
 80037a4:	f7ff fefe 	bl	80035a4 <LL_USART_IsEnabledIT_IDLE>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <USART6_IRQHandler+0x5a>
 80037ae:	4807      	ldr	r0, [pc, #28]	; (80037cc <USART6_IRQHandler+0x60>)
 80037b0:	f7ff feb2 	bl	8003518 <LL_USART_IsActiveFlag_IDLE>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <USART6_IRQHandler+0x5a>
		LL_USART_ClearFlag_IDLE(USART6);
 80037ba:	4804      	ldr	r0, [pc, #16]	; (80037cc <USART6_IRQHandler+0x60>)
 80037bc:	f7ff fed2 	bl	8003564 <LL_USART_ClearFlag_IDLE>
		flag_INT_UART6_RX_DONE = 1; // flag 클리어
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <USART6_IRQHandler+0x6c>)
 80037c2:	2201      	movs	r2, #1
 80037c4:	701a      	strb	r2, [r3, #0]

    }

  /* USER CODE END USART6_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40011400 	.word	0x40011400
 80037d0:	20000440 	.word	0x20000440
 80037d4:	2000036a 	.word	0x2000036a
 80037d8:	2000043f 	.word	0x2000043f

080037dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return 1;
 80037e0:	2301      	movs	r3, #1
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <_kill>:

int _kill(int pid, int sig)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80037f6:	f002 f92f 	bl	8005a58 <__errno>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2216      	movs	r2, #22
 80037fe:	601a      	str	r2, [r3, #0]
  return -1;
 8003800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <_exit>:

void _exit (int status)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff ffe7 	bl	80037ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800381e:	e7fe      	b.n	800381e <_exit+0x12>

08003820 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	e00a      	b.n	8003848 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003832:	f3af 8000 	nop.w
 8003836:	4601      	mov	r1, r0
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	60ba      	str	r2, [r7, #8]
 800383e:	b2ca      	uxtb	r2, r1
 8003840:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	3301      	adds	r3, #1
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	429a      	cmp	r2, r3
 800384e:	dbf0      	blt.n	8003832 <_read+0x12>
  }

  return len;
 8003850:	687b      	ldr	r3, [r7, #4]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <_close>:
  }
  return len;
}

int _close(int file)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003866:	4618      	mov	r0, r3
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003882:	605a      	str	r2, [r3, #4]
  return 0;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <_isatty>:

int _isatty(int file)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800389a:	2301      	movs	r3, #1
}
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038cc:	4a14      	ldr	r2, [pc, #80]	; (8003920 <_sbrk+0x5c>)
 80038ce:	4b15      	ldr	r3, [pc, #84]	; (8003924 <_sbrk+0x60>)
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038d8:	4b13      	ldr	r3, [pc, #76]	; (8003928 <_sbrk+0x64>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d102      	bne.n	80038e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038e0:	4b11      	ldr	r3, [pc, #68]	; (8003928 <_sbrk+0x64>)
 80038e2:	4a12      	ldr	r2, [pc, #72]	; (800392c <_sbrk+0x68>)
 80038e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038e6:	4b10      	ldr	r3, [pc, #64]	; (8003928 <_sbrk+0x64>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4413      	add	r3, r2
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d207      	bcs.n	8003904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038f4:	f002 f8b0 	bl	8005a58 <__errno>
 80038f8:	4603      	mov	r3, r0
 80038fa:	220c      	movs	r2, #12
 80038fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003902:	e009      	b.n	8003918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003904:	4b08      	ldr	r3, [pc, #32]	; (8003928 <_sbrk+0x64>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800390a:	4b07      	ldr	r3, [pc, #28]	; (8003928 <_sbrk+0x64>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4413      	add	r3, r2
 8003912:	4a05      	ldr	r2, [pc, #20]	; (8003928 <_sbrk+0x64>)
 8003914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003916:	68fb      	ldr	r3, [r7, #12]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20020000 	.word	0x20020000
 8003924:	00000400 	.word	0x00000400
 8003928:	20000254 	.word	0x20000254
 800392c:	20000448 	.word	0x20000448

08003930 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003934:	4b06      	ldr	r3, [pc, #24]	; (8003950 <SystemInit+0x20>)
 8003936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800393a:	4a05      	ldr	r2, [pc, #20]	; (8003950 <SystemInit+0x20>)
 800393c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003940:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000ed00 	.word	0xe000ed00

08003954 <LL_AHB1_GRP1_EnableClock>:
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800395c:	4b08      	ldr	r3, [pc, #32]	; (8003980 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800395e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003960:	4907      	ldr	r1, [pc, #28]	; (8003980 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4313      	orrs	r3, r2
 8003966:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800396a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4013      	ands	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003972:	68fb      	ldr	r3, [r7, #12]
}
 8003974:	bf00      	nop
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	40023800 	.word	0x40023800

08003984 <LL_APB1_GRP1_EnableClock>:
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800398c:	4b08      	ldr	r3, [pc, #32]	; (80039b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800398e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003990:	4907      	ldr	r1, [pc, #28]	; (80039b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4313      	orrs	r3, r2
 8003996:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003998:	4b05      	ldr	r3, [pc, #20]	; (80039b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800399a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4013      	ands	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039a2:	68fb      	ldr	r3, [r7, #12]
}
 80039a4:	bf00      	nop
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	40023800 	.word	0x40023800

080039b4 <LL_TIM_EnableARRPreload>:
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	601a      	str	r2, [r3, #0]
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d01c      	beq.n	8003a1e <LL_TIM_OC_EnableFast+0x4a>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d017      	beq.n	8003a1a <LL_TIM_OC_EnableFast+0x46>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b10      	cmp	r3, #16
 80039ee:	d012      	beq.n	8003a16 <LL_TIM_OC_EnableFast+0x42>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2b40      	cmp	r3, #64	; 0x40
 80039f4:	d00d      	beq.n	8003a12 <LL_TIM_OC_EnableFast+0x3e>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039fc:	d007      	beq.n	8003a0e <LL_TIM_OC_EnableFast+0x3a>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a04:	d101      	bne.n	8003a0a <LL_TIM_OC_EnableFast+0x36>
 8003a06:	2305      	movs	r3, #5
 8003a08:	e00a      	b.n	8003a20 <LL_TIM_OC_EnableFast+0x4c>
 8003a0a:	2306      	movs	r3, #6
 8003a0c:	e008      	b.n	8003a20 <LL_TIM_OC_EnableFast+0x4c>
 8003a0e:	2304      	movs	r3, #4
 8003a10:	e006      	b.n	8003a20 <LL_TIM_OC_EnableFast+0x4c>
 8003a12:	2303      	movs	r3, #3
 8003a14:	e004      	b.n	8003a20 <LL_TIM_OC_EnableFast+0x4c>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e002      	b.n	8003a20 <LL_TIM_OC_EnableFast+0x4c>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <LL_TIM_OC_EnableFast+0x4c>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3318      	adds	r3, #24
 8003a26:	4619      	mov	r1, r3
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	; (8003a54 <LL_TIM_OC_EnableFast+0x80>)
 8003a2c:	5cd3      	ldrb	r3, [r2, r3]
 8003a2e:	440b      	add	r3, r1
 8003a30:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	4907      	ldr	r1, [pc, #28]	; (8003a58 <LL_TIM_OC_EnableFast+0x84>)
 8003a3a:	5ccb      	ldrb	r3, [r1, r3]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	2304      	movs	r3, #4
 8003a40:	408b      	lsls	r3, r1
 8003a42:	431a      	orrs	r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	601a      	str	r2, [r3, #0]

}
 8003a48:	bf00      	nop
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	08008cc0 	.word	0x08008cc0
 8003a58:	08008cc8 	.word	0x08008cc8

08003a5c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d01c      	beq.n	8003aa6 <LL_TIM_OC_EnablePreload+0x4a>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d017      	beq.n	8003aa2 <LL_TIM_OC_EnablePreload+0x46>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b10      	cmp	r3, #16
 8003a76:	d012      	beq.n	8003a9e <LL_TIM_OC_EnablePreload+0x42>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b40      	cmp	r3, #64	; 0x40
 8003a7c:	d00d      	beq.n	8003a9a <LL_TIM_OC_EnablePreload+0x3e>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a84:	d007      	beq.n	8003a96 <LL_TIM_OC_EnablePreload+0x3a>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a8c:	d101      	bne.n	8003a92 <LL_TIM_OC_EnablePreload+0x36>
 8003a8e:	2305      	movs	r3, #5
 8003a90:	e00a      	b.n	8003aa8 <LL_TIM_OC_EnablePreload+0x4c>
 8003a92:	2306      	movs	r3, #6
 8003a94:	e008      	b.n	8003aa8 <LL_TIM_OC_EnablePreload+0x4c>
 8003a96:	2304      	movs	r3, #4
 8003a98:	e006      	b.n	8003aa8 <LL_TIM_OC_EnablePreload+0x4c>
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e004      	b.n	8003aa8 <LL_TIM_OC_EnablePreload+0x4c>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e002      	b.n	8003aa8 <LL_TIM_OC_EnablePreload+0x4c>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <LL_TIM_OC_EnablePreload+0x4c>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3318      	adds	r3, #24
 8003aae:	4619      	mov	r1, r3
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <LL_TIM_OC_EnablePreload+0x80>)
 8003ab4:	5cd3      	ldrb	r3, [r2, r3]
 8003ab6:	440b      	add	r3, r1
 8003ab8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	4907      	ldr	r1, [pc, #28]	; (8003ae0 <LL_TIM_OC_EnablePreload+0x84>)
 8003ac2:	5ccb      	ldrb	r3, [r1, r3]
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	408b      	lsls	r3, r1
 8003aca:	431a      	orrs	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	601a      	str	r2, [r3, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	08008cc0 	.word	0x08008cc0
 8003ae0:	08008cc8 	.word	0x08008cc8

08003ae4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003af6:	f023 0307 	bic.w	r3, r3, #7
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	609a      	str	r2, [r3, #8]
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	605a      	str	r2, [r3, #4]
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	609a      	str	r2, [r3, #8]
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b094      	sub	sp, #80	; 0x50
 8003b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003b5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	605a      	str	r2, [r3, #4]
 8003b64:	609a      	str	r2, [r3, #8]
 8003b66:	60da      	str	r2, [r3, #12]
 8003b68:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003b6a:	f107 031c 	add.w	r3, r7, #28
 8003b6e:	2220      	movs	r2, #32
 8003b70:	2100      	movs	r1, #0
 8003b72:	4618      	mov	r0, r3
 8003b74:	f001 ffa8 	bl	8005ac8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b78:	1d3b      	adds	r3, r7, #4
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	605a      	str	r2, [r3, #4]
 8003b80:	609a      	str	r2, [r3, #8]
 8003b82:	60da      	str	r2, [r3, #12]
 8003b84:	611a      	str	r2, [r3, #16]
 8003b86:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8003b88:	2002      	movs	r0, #2
 8003b8a:	f7ff fefb 	bl	8003984 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003b92:	2300      	movs	r3, #0
 8003b94:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 41999;
 8003b96:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8003b9a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003ba0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4833      	ldr	r0, [pc, #204]	; (8003c74 <MX_TIM3_Init+0x120>)
 8003ba8:	f001 f9b8 	bl	8004f1c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8003bac:	4831      	ldr	r0, [pc, #196]	; (8003c74 <MX_TIM3_Init+0x120>)
 8003bae:	f7ff ff01 	bl	80039b4 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	482f      	ldr	r0, [pc, #188]	; (8003c74 <MX_TIM3_Init+0x120>)
 8003bb6:	f7ff ff95 	bl	8003ae4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8003bba:	2101      	movs	r1, #1
 8003bbc:	482d      	ldr	r0, [pc, #180]	; (8003c74 <MX_TIM3_Init+0x120>)
 8003bbe:	f7ff ff4d 	bl	8003a5c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003bc2:	2360      	movs	r3, #96	; 0x60
 8003bc4:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003bd6:	f107 031c 	add.w	r3, r7, #28
 8003bda:	461a      	mov	r2, r3
 8003bdc:	2101      	movs	r1, #1
 8003bde:	4825      	ldr	r0, [pc, #148]	; (8003c74 <MX_TIM3_Init+0x120>)
 8003be0:	f001 fa36 	bl	8005050 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8003be4:	2101      	movs	r1, #1
 8003be6:	4823      	ldr	r0, [pc, #140]	; (8003c74 <MX_TIM3_Init+0x120>)
 8003be8:	f7ff fef4 	bl	80039d4 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 8003bec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bf0:	4820      	ldr	r0, [pc, #128]	; (8003c74 <MX_TIM3_Init+0x120>)
 8003bf2:	f7ff ff33 	bl	8003a5c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003bf6:	f107 031c 	add.w	r3, r7, #28
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c00:	481c      	ldr	r0, [pc, #112]	; (8003c74 <MX_TIM3_Init+0x120>)
 8003c02:	f001 fa25 	bl	8005050 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH3);
 8003c06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c0a:	481a      	ldr	r0, [pc, #104]	; (8003c74 <MX_TIM3_Init+0x120>)
 8003c0c:	f7ff fee2 	bl	80039d4 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8003c10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c14:	4817      	ldr	r0, [pc, #92]	; (8003c74 <MX_TIM3_Init+0x120>)
 8003c16:	f7ff ff21 	bl	8003a5c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003c1a:	f107 031c 	add.w	r3, r7, #28
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c24:	4813      	ldr	r0, [pc, #76]	; (8003c74 <MX_TIM3_Init+0x120>)
 8003c26:	f001 fa13 	bl	8005050 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 8003c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c2e:	4811      	ldr	r0, [pc, #68]	; (8003c74 <MX_TIM3_Init+0x120>)
 8003c30:	f7ff fed0 	bl	80039d4 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8003c34:	2100      	movs	r1, #0
 8003c36:	480f      	ldr	r0, [pc, #60]	; (8003c74 <MX_TIM3_Init+0x120>)
 8003c38:	f7ff ff69 	bl	8003b0e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8003c3c:	480d      	ldr	r0, [pc, #52]	; (8003c74 <MX_TIM3_Init+0x120>)
 8003c3e:	f7ff ff79 	bl	8003b34 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003c42:	2002      	movs	r0, #2
 8003c44:	f7ff fe86 	bl	8003954 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4;
 8003c48:	2313      	movs	r3, #19
 8003c4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003c54:	2300      	movs	r3, #0
 8003c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c60:	1d3b      	adds	r3, r7, #4
 8003c62:	4619      	mov	r1, r3
 8003c64:	4804      	ldr	r0, [pc, #16]	; (8003c78 <MX_TIM3_Init+0x124>)
 8003c66:	f000 fec3 	bl	80049f0 <LL_GPIO_Init>

}
 8003c6a:	bf00      	nop
 8003c6c:	3750      	adds	r7, #80	; 0x50
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40000400 	.word	0x40000400
 8003c78:	40020400 	.word	0x40020400

08003c7c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b094      	sub	sp, #80	; 0x50
 8003c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003c82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	605a      	str	r2, [r3, #4]
 8003c8c:	609a      	str	r2, [r3, #8]
 8003c8e:	60da      	str	r2, [r3, #12]
 8003c90:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003c92:	f107 031c 	add.w	r3, r7, #28
 8003c96:	2220      	movs	r2, #32
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f001 ff14 	bl	8005ac8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca0:	1d3b      	adds	r3, r7, #4
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
 8003ca8:	609a      	str	r2, [r3, #8]
 8003caa:	60da      	str	r2, [r3, #12]
 8003cac:	611a      	str	r2, [r3, #16]
 8003cae:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8003cb0:	2008      	movs	r0, #8
 8003cb2:	f7ff fe67 	bl	8003984 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 41999;
 8003cbe:	f24a 430f 	movw	r3, #41999	; 0xa40f
 8003cc2:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8003cc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ccc:	4619      	mov	r1, r3
 8003cce:	482b      	ldr	r0, [pc, #172]	; (8003d7c <MX_TIM5_Init+0x100>)
 8003cd0:	f001 f924 	bl	8004f1c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 8003cd4:	4829      	ldr	r0, [pc, #164]	; (8003d7c <MX_TIM5_Init+0x100>)
 8003cd6:	f7ff fe6d 	bl	80039b4 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003cda:	2100      	movs	r1, #0
 8003cdc:	4827      	ldr	r0, [pc, #156]	; (8003d7c <MX_TIM5_Init+0x100>)
 8003cde:	f7ff ff01 	bl	8003ae4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 8003ce2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ce6:	4825      	ldr	r0, [pc, #148]	; (8003d7c <MX_TIM5_Init+0x100>)
 8003ce8:	f7ff feb8 	bl	8003a5c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003cec:	2360      	movs	r3, #96	; 0x60
 8003cee:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003d00:	f107 031c 	add.w	r3, r7, #28
 8003d04:	461a      	mov	r2, r3
 8003d06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d0a:	481c      	ldr	r0, [pc, #112]	; (8003d7c <MX_TIM5_Init+0x100>)
 8003d0c:	f001 f9a0 	bl	8005050 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 8003d10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d14:	4819      	ldr	r0, [pc, #100]	; (8003d7c <MX_TIM5_Init+0x100>)
 8003d16:	f7ff fe5d 	bl	80039d4 <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 8003d1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d1e:	4817      	ldr	r0, [pc, #92]	; (8003d7c <MX_TIM5_Init+0x100>)
 8003d20:	f7ff fe9c 	bl	8003a5c <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8003d24:	f107 031c 	add.w	r3, r7, #28
 8003d28:	461a      	mov	r2, r3
 8003d2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d2e:	4813      	ldr	r0, [pc, #76]	; (8003d7c <MX_TIM5_Init+0x100>)
 8003d30:	f001 f98e 	bl	8005050 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 8003d34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d38:	4810      	ldr	r0, [pc, #64]	; (8003d7c <MX_TIM5_Init+0x100>)
 8003d3a:	f7ff fe4b 	bl	80039d4 <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8003d3e:	2100      	movs	r1, #0
 8003d40:	480e      	ldr	r0, [pc, #56]	; (8003d7c <MX_TIM5_Init+0x100>)
 8003d42:	f7ff fee4 	bl	8003b0e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8003d46:	480d      	ldr	r0, [pc, #52]	; (8003d7c <MX_TIM5_Init+0x100>)
 8003d48:	f7ff fef4 	bl	8003b34 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	f7ff fe01 	bl	8003954 <LL_AHB1_GRP1_EnableClock>
    /**TIM5 GPIO Configuration
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8003d52:	230c      	movs	r3, #12
 8003d54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003d56:	2302      	movs	r3, #2
 8003d58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003d66:	2302      	movs	r3, #2
 8003d68:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d6a:	1d3b      	adds	r3, r7, #4
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4804      	ldr	r0, [pc, #16]	; (8003d80 <MX_TIM5_Init+0x104>)
 8003d70:	f000 fe3e 	bl	80049f0 <LL_GPIO_Init>

}
 8003d74:	bf00      	nop
 8003d76:	3750      	adds	r7, #80	; 0x50
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40000c00 	.word	0x40000c00
 8003d80:	40020000 	.word	0x40020000

08003d84 <__NVIC_GetPriorityGrouping>:
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d88:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <__NVIC_GetPriorityGrouping+0x18>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	0a1b      	lsrs	r3, r3, #8
 8003d8e:	f003 0307 	and.w	r3, r3, #7
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	e000ed00 	.word	0xe000ed00

08003da0 <__NVIC_EnableIRQ>:
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	db0b      	blt.n	8003dca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	f003 021f 	and.w	r2, r3, #31
 8003db8:	4907      	ldr	r1, [pc, #28]	; (8003dd8 <__NVIC_EnableIRQ+0x38>)
 8003dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8003dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	e000e100 	.word	0xe000e100

08003ddc <__NVIC_SetPriority>:
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	6039      	str	r1, [r7, #0]
 8003de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	db0a      	blt.n	8003e06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	490c      	ldr	r1, [pc, #48]	; (8003e28 <__NVIC_SetPriority+0x4c>)
 8003df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfa:	0112      	lsls	r2, r2, #4
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	440b      	add	r3, r1
 8003e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e04:	e00a      	b.n	8003e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	4908      	ldr	r1, [pc, #32]	; (8003e2c <__NVIC_SetPriority+0x50>)
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	3b04      	subs	r3, #4
 8003e14:	0112      	lsls	r2, r2, #4
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	440b      	add	r3, r1
 8003e1a:	761a      	strb	r2, [r3, #24]
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	e000e100 	.word	0xe000e100
 8003e2c:	e000ed00 	.word	0xe000ed00

08003e30 <NVIC_EncodePriority>:
{
 8003e30:	b480      	push	{r7}
 8003e32:	b089      	sub	sp, #36	; 0x24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f1c3 0307 	rsb	r3, r3, #7
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	bf28      	it	cs
 8003e4e:	2304      	movcs	r3, #4
 8003e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	3304      	adds	r3, #4
 8003e56:	2b06      	cmp	r3, #6
 8003e58:	d902      	bls.n	8003e60 <NVIC_EncodePriority+0x30>
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	3b03      	subs	r3, #3
 8003e5e:	e000      	b.n	8003e62 <NVIC_EncodePriority+0x32>
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43da      	mvns	r2, r3
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	401a      	ands	r2, r3
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e82:	43d9      	mvns	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e88:	4313      	orrs	r3, r2
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3724      	adds	r7, #36	; 0x24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <LL_DMA_SetDataTransferDirection>:
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8003ea4:	4a0d      	ldr	r2, [pc, #52]	; (8003edc <LL_DMA_SetDataTransferDirection+0x44>)
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	461a      	mov	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003eb8:	4908      	ldr	r1, [pc, #32]	; (8003edc <LL_DMA_SetDataTransferDirection+0x44>)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	440b      	add	r3, r1
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	440b      	add	r3, r1
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]
}
 8003ece:	bf00      	nop
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	08008cd0 	.word	0x08008cd0

08003ee0 <LL_DMA_SetMode>:
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8003eec:	4a0d      	ldr	r2, [pc, #52]	; (8003f24 <LL_DMA_SetMode+0x44>)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4413      	add	r3, r2
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8003f00:	4908      	ldr	r1, [pc, #32]	; (8003f24 <LL_DMA_SetMode+0x44>)
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	440b      	add	r3, r1
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	4619      	mov	r1, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	440b      	add	r3, r1
 8003f0e:	4619      	mov	r1, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]
}
 8003f16:	bf00      	nop
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	08008cd0 	.word	0x08008cd0

08003f28 <LL_DMA_SetPeriphIncMode>:
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8003f34:	4a0d      	ldr	r2, [pc, #52]	; (8003f6c <LL_DMA_SetPeriphIncMode+0x44>)
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	4413      	add	r3, r2
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4413      	add	r3, r2
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f48:	4908      	ldr	r1, [pc, #32]	; (8003f6c <LL_DMA_SetPeriphIncMode+0x44>)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	440b      	add	r3, r1
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	4619      	mov	r1, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	440b      	add	r3, r1
 8003f56:	4619      	mov	r1, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	600b      	str	r3, [r1, #0]
}
 8003f5e:	bf00      	nop
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	08008cd0 	.word	0x08008cd0

08003f70 <LL_DMA_SetMemoryIncMode>:
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8003f7c:	4a0d      	ldr	r2, [pc, #52]	; (8003fb4 <LL_DMA_SetMemoryIncMode+0x44>)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	4413      	add	r3, r2
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4413      	add	r3, r2
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f90:	4908      	ldr	r1, [pc, #32]	; (8003fb4 <LL_DMA_SetMemoryIncMode+0x44>)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	440b      	add	r3, r1
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	440b      	add	r3, r1
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	600b      	str	r3, [r1, #0]
}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	08008cd0 	.word	0x08008cd0

08003fb8 <LL_DMA_SetPeriphSize>:
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8003fc4:	4a0d      	ldr	r2, [pc, #52]	; (8003ffc <LL_DMA_SetPeriphSize+0x44>)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	4413      	add	r3, r2
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8003fd8:	4908      	ldr	r1, [pc, #32]	; (8003ffc <LL_DMA_SetPeriphSize+0x44>)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	440b      	add	r3, r1
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	440b      	add	r3, r1
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]
}
 8003fee:	bf00      	nop
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	08008cd0 	.word	0x08008cd0

08004000 <LL_DMA_SetMemorySize>:
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800400c:	4a0d      	ldr	r2, [pc, #52]	; (8004044 <LL_DMA_SetMemorySize+0x44>)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4413      	add	r3, r2
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4413      	add	r3, r2
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8004020:	4908      	ldr	r1, [pc, #32]	; (8004044 <LL_DMA_SetMemorySize+0x44>)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	440b      	add	r3, r1
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	4619      	mov	r1, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	440b      	add	r3, r1
 800402e:	4619      	mov	r1, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]
}
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	08008cd0 	.word	0x08008cd0

08004048 <LL_DMA_SetStreamPriorityLevel>:
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8004054:	4a0d      	ldr	r2, [pc, #52]	; (800408c <LL_DMA_SetStreamPriorityLevel+0x44>)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4413      	add	r3, r2
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	461a      	mov	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4413      	add	r3, r2
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004068:	4908      	ldr	r1, [pc, #32]	; (800408c <LL_DMA_SetStreamPriorityLevel+0x44>)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	440b      	add	r3, r1
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	4619      	mov	r1, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	440b      	add	r3, r1
 8004076:	4619      	mov	r1, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]
}
 800407e:	bf00      	nop
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	08008cd0 	.word	0x08008cd0

08004090 <LL_DMA_SetChannelSelection>:
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800409c:	4a0d      	ldr	r2, [pc, #52]	; (80040d4 <LL_DMA_SetChannelSelection+0x44>)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	4413      	add	r3, r2
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80040b0:	4908      	ldr	r1, [pc, #32]	; (80040d4 <LL_DMA_SetChannelSelection+0x44>)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	440b      	add	r3, r1
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	4619      	mov	r1, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	440b      	add	r3, r1
 80040be:	4619      	mov	r1, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]
}
 80040c6:	bf00      	nop
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	08008cd0 	.word	0x08008cd0

080040d8 <LL_DMA_DisableFifoMode>:
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80040e2:	4a0c      	ldr	r2, [pc, #48]	; (8004114 <LL_DMA_DisableFifoMode+0x3c>)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	4413      	add	r3, r2
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4413      	add	r3, r2
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	4908      	ldr	r1, [pc, #32]	; (8004114 <LL_DMA_DisableFifoMode+0x3c>)
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	440a      	add	r2, r1
 80040f8:	7812      	ldrb	r2, [r2, #0]
 80040fa:	4611      	mov	r1, r2
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	440a      	add	r2, r1
 8004100:	f023 0304 	bic.w	r3, r3, #4
 8004104:	6153      	str	r3, [r2, #20]
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	08008cd0 	.word	0x08008cd0

08004118 <LL_AHB1_GRP1_EnableClock>:
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004120:	4b08      	ldr	r3, [pc, #32]	; (8004144 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004124:	4907      	ldr	r1, [pc, #28]	; (8004144 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4313      	orrs	r3, r2
 800412a:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800412c:	4b05      	ldr	r3, [pc, #20]	; (8004144 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800412e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4013      	ands	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004136:	68fb      	ldr	r3, [r7, #12]
}
 8004138:	bf00      	nop
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	40023800 	.word	0x40023800

08004148 <LL_APB1_GRP1_EnableClock>:
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8004150:	4b08      	ldr	r3, [pc, #32]	; (8004174 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004152:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004154:	4907      	ldr	r1, [pc, #28]	; (8004174 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4313      	orrs	r3, r2
 800415a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800415c:	4b05      	ldr	r3, [pc, #20]	; (8004174 <LL_APB1_GRP1_EnableClock+0x2c>)
 800415e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4013      	ands	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004166:	68fb      	ldr	r3, [r7, #12]
}
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	40023800 	.word	0x40023800

08004178 <LL_APB2_GRP1_EnableClock>:
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8004180:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004182:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004184:	4907      	ldr	r1, [pc, #28]	; (80041a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4313      	orrs	r3, r2
 800418a:	644b      	str	r3, [r1, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800418c:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <LL_APB2_GRP1_EnableClock+0x2c>)
 800418e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4013      	ands	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004196:	68fb      	ldr	r3, [r7, #12]
}
 8004198:	bf00      	nop
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	40023800 	.word	0x40023800

080041a8 <LL_USART_Enable>:
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	60da      	str	r2, [r3, #12]
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <LL_USART_ConfigAsyncMode>:
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	615a      	str	r2, [r3, #20]
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <LL_USART_ConfigHalfDuplexMode>:
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	f023 0222 	bic.w	r2, r3, #34	; 0x22
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	615a      	str	r2, [r3, #20]
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	f043 0208 	orr.w	r2, r3, #8
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	615a      	str	r2, [r3, #20]
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <LL_USART_IsActiveFlag_TXE>:
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800423c:	2b80      	cmp	r3, #128	; 0x80
 800423e:	bf0c      	ite	eq
 8004240:	2301      	moveq	r3, #1
 8004242:	2300      	movne	r3, #0
 8004244:	b2db      	uxtb	r3, r3
}
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	460b      	mov	r3, r1
 800425c:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800425e:	78fa      	ldrb	r2, [r7, #3]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	605a      	str	r2, [r3, #4]
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08e      	sub	sp, #56	; 0x38
 8004274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004276:	f107 031c 	add.w	r3, r7, #28
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	605a      	str	r2, [r3, #4]
 8004280:	609a      	str	r2, [r3, #8]
 8004282:	60da      	str	r2, [r3, #12]
 8004284:	611a      	str	r2, [r3, #16]
 8004286:	615a      	str	r2, [r3, #20]
 8004288:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800428a:	1d3b      	adds	r3, r7, #4
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	605a      	str	r2, [r3, #4]
 8004292:	609a      	str	r2, [r3, #8]
 8004294:	60da      	str	r2, [r3, #12]
 8004296:	611a      	str	r2, [r3, #16]
 8004298:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800429a:	2010      	movs	r0, #16
 800429c:	f7ff ff6c 	bl	8004178 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80042a0:	2001      	movs	r0, #1
 80042a2:	f7ff ff39 	bl	8004118 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80042a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80042ac:	2302      	movs	r3, #2
 80042ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80042b0:	2303      	movs	r3, #3
 80042b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80042b4:	2301      	movs	r3, #1
 80042b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80042bc:	2307      	movs	r3, #7
 80042be:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c0:	1d3b      	adds	r3, r7, #4
 80042c2:	4619      	mov	r1, r3
 80042c4:	4817      	ldr	r0, [pc, #92]	; (8004324 <MX_USART1_UART_Init+0xb4>)
 80042c6:	f000 fb93 	bl	80049f0 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80042ca:	f7ff fd5b 	bl	8003d84 <__NVIC_GetPriorityGrouping>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2200      	movs	r2, #0
 80042d2:	2100      	movs	r1, #0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff fdab 	bl	8003e30 <NVIC_EncodePriority>
 80042da:	4603      	mov	r3, r0
 80042dc:	4619      	mov	r1, r3
 80042de:	2025      	movs	r0, #37	; 0x25
 80042e0:	f7ff fd7c 	bl	8003ddc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80042e4:	2025      	movs	r0, #37	; 0x25
 80042e6:	f7ff fd5b 	bl	8003da0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 100000;
 80042ea:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <MX_USART1_UART_Init+0xb8>)
 80042ec:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80042ee:	2300      	movs	r3, #0
 80042f0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_2;
 80042f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80042f8:	2300      	movs	r3, #0
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80042fc:	230c      	movs	r3, #12
 80042fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004300:	2300      	movs	r3, #0
 8004302:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8004304:	f107 031c 	add.w	r3, r7, #28
 8004308:	4619      	mov	r1, r3
 800430a:	4808      	ldr	r0, [pc, #32]	; (800432c <MX_USART1_UART_Init+0xbc>)
 800430c:	f001 faec 	bl	80058e8 <LL_USART_Init>
  LL_USART_Enable(USART1);
 8004310:	4806      	ldr	r0, [pc, #24]	; (800432c <MX_USART1_UART_Init+0xbc>)
 8004312:	f7ff ff49 	bl	80041a8 <LL_USART_Enable>
  LL_USART_ConfigHalfDuplexMode(USART1);
 8004316:	4805      	ldr	r0, [pc, #20]	; (800432c <MX_USART1_UART_Init+0xbc>)
 8004318:	f7ff ff6c 	bl	80041f4 <LL_USART_ConfigHalfDuplexMode>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800431c:	bf00      	nop
 800431e:	3738      	adds	r7, #56	; 0x38
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40020000 	.word	0x40020000
 8004328:	000186a0 	.word	0x000186a0
 800432c:	40011000 	.word	0x40011000

08004330 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08e      	sub	sp, #56	; 0x38
 8004334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8004336:	f107 031c 	add.w	r3, r7, #28
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	605a      	str	r2, [r3, #4]
 8004340:	609a      	str	r2, [r3, #8]
 8004342:	60da      	str	r2, [r3, #12]
 8004344:	611a      	str	r2, [r3, #16]
 8004346:	615a      	str	r2, [r3, #20]
 8004348:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800434a:	1d3b      	adds	r3, r7, #4
 800434c:	2200      	movs	r2, #0
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	605a      	str	r2, [r3, #4]
 8004352:	609a      	str	r2, [r3, #8]
 8004354:	60da      	str	r2, [r3, #12]
 8004356:	611a      	str	r2, [r3, #16]
 8004358:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 800435a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800435e:	f7ff fef3 	bl	8004148 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004362:	2002      	movs	r0, #2
 8004364:	f7ff fed8 	bl	8004118 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = UART3_GPS_TX_Pin|UART3_GPS_RX_Pin;
 8004368:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800436c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800436e:	2302      	movs	r3, #2
 8004370:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004372:	2303      	movs	r3, #3
 8004374:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800437e:	2307      	movs	r3, #7
 8004380:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004382:	1d3b      	adds	r3, r7, #4
 8004384:	4619      	mov	r1, r3
 8004386:	4830      	ldr	r0, [pc, #192]	; (8004448 <MX_USART3_UART_Init+0x118>)
 8004388:	f000 fb32 	bl	80049f0 <LL_GPIO_Init>

  /* USART3 DMA Init */

  /* USART3_RX Init */
  LL_DMA_SetChannelSelection(DMA1, LL_DMA_STREAM_1, LL_DMA_CHANNEL_4);
 800438c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004390:	2101      	movs	r1, #1
 8004392:	482e      	ldr	r0, [pc, #184]	; (800444c <MX_USART3_UART_Init+0x11c>)
 8004394:	f7ff fe7c 	bl	8004090 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8004398:	2200      	movs	r2, #0
 800439a:	2101      	movs	r1, #1
 800439c:	482b      	ldr	r0, [pc, #172]	; (800444c <MX_USART3_UART_Init+0x11c>)
 800439e:	f7ff fd7b 	bl	8003e98 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 80043a2:	2200      	movs	r2, #0
 80043a4:	2101      	movs	r1, #1
 80043a6:	4829      	ldr	r0, [pc, #164]	; (800444c <MX_USART3_UART_Init+0x11c>)
 80043a8:	f7ff fe4e 	bl	8004048 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 80043ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043b0:	2101      	movs	r1, #1
 80043b2:	4826      	ldr	r0, [pc, #152]	; (800444c <MX_USART3_UART_Init+0x11c>)
 80043b4:	f7ff fd94 	bl	8003ee0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 80043b8:	2200      	movs	r2, #0
 80043ba:	2101      	movs	r1, #1
 80043bc:	4823      	ldr	r0, [pc, #140]	; (800444c <MX_USART3_UART_Init+0x11c>)
 80043be:	f7ff fdb3 	bl	8003f28 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 80043c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043c6:	2101      	movs	r1, #1
 80043c8:	4820      	ldr	r0, [pc, #128]	; (800444c <MX_USART3_UART_Init+0x11c>)
 80043ca:	f7ff fdd1 	bl	8003f70 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_BYTE);
 80043ce:	2200      	movs	r2, #0
 80043d0:	2101      	movs	r1, #1
 80043d2:	481e      	ldr	r0, [pc, #120]	; (800444c <MX_USART3_UART_Init+0x11c>)
 80043d4:	f7ff fdf0 	bl	8003fb8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_BYTE);
 80043d8:	2200      	movs	r2, #0
 80043da:	2101      	movs	r1, #1
 80043dc:	481b      	ldr	r0, [pc, #108]	; (800444c <MX_USART3_UART_Init+0x11c>)
 80043de:	f7ff fe0f 	bl	8004000 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_1);
 80043e2:	2101      	movs	r1, #1
 80043e4:	4819      	ldr	r0, [pc, #100]	; (800444c <MX_USART3_UART_Init+0x11c>)
 80043e6:	f7ff fe77 	bl	80040d8 <LL_DMA_DisableFifoMode>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80043ea:	f7ff fccb 	bl	8003d84 <__NVIC_GetPriorityGrouping>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2200      	movs	r2, #0
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff fd1b 	bl	8003e30 <NVIC_EncodePriority>
 80043fa:	4603      	mov	r3, r0
 80043fc:	4619      	mov	r1, r3
 80043fe:	2027      	movs	r0, #39	; 0x27
 8004400:	f7ff fcec 	bl	8003ddc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8004404:	2027      	movs	r0, #39	; 0x27
 8004406:	f7ff fccb 	bl	8003da0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */


  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800440a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800440e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004410:	2300      	movs	r3, #0
 8004412:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004414:	2300      	movs	r3, #0
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004418:	2300      	movs	r3, #0
 800441a:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800441c:	230c      	movs	r3, #12
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8004420:	2300      	movs	r3, #0
 8004422:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8004424:	2300      	movs	r3, #0
 8004426:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8004428:	f107 031c 	add.w	r3, r7, #28
 800442c:	4619      	mov	r1, r3
 800442e:	4808      	ldr	r0, [pc, #32]	; (8004450 <MX_USART3_UART_Init+0x120>)
 8004430:	f001 fa5a 	bl	80058e8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8004434:	4806      	ldr	r0, [pc, #24]	; (8004450 <MX_USART3_UART_Init+0x120>)
 8004436:	f7ff fec7 	bl	80041c8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 800443a:	4805      	ldr	r0, [pc, #20]	; (8004450 <MX_USART3_UART_Init+0x120>)
 800443c:	f7ff feb4 	bl	80041a8 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004440:	bf00      	nop
 8004442:	3738      	adds	r7, #56	; 0x38
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40020400 	.word	0x40020400
 800444c:	40026000 	.word	0x40026000
 8004450:	40004800 	.word	0x40004800

08004454 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08e      	sub	sp, #56	; 0x38
 8004458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800445a:	f107 031c 	add.w	r3, r7, #28
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	605a      	str	r2, [r3, #4]
 8004464:	609a      	str	r2, [r3, #8]
 8004466:	60da      	str	r2, [r3, #12]
 8004468:	611a      	str	r2, [r3, #16]
 800446a:	615a      	str	r2, [r3, #20]
 800446c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800446e:	1d3b      	adds	r3, r7, #4
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	609a      	str	r2, [r3, #8]
 8004478:	60da      	str	r2, [r3, #12]
 800447a:	611a      	str	r2, [r3, #16]
 800447c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800447e:	2020      	movs	r0, #32
 8004480:	f7ff fe7a 	bl	8004178 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004484:	2004      	movs	r0, #4
 8004486:	f7ff fe47 	bl	8004118 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800448a:	23c0      	movs	r3, #192	; 0xc0
 800448c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800448e:	2302      	movs	r3, #2
 8004490:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004492:	2303      	movs	r3, #3
 8004494:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004496:	2300      	movs	r3, #0
 8004498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800449a:	2300      	movs	r3, #0
 800449c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800449e:	2308      	movs	r3, #8
 80044a0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044a2:	1d3b      	adds	r3, r7, #4
 80044a4:	4619      	mov	r1, r3
 80044a6:	4819      	ldr	r0, [pc, #100]	; (800450c <MX_USART6_UART_Init+0xb8>)
 80044a8:	f000 faa2 	bl	80049f0 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80044ac:	f7ff fc6a 	bl	8003d84 <__NVIC_GetPriorityGrouping>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2200      	movs	r2, #0
 80044b4:	2100      	movs	r1, #0
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff fcba 	bl	8003e30 <NVIC_EncodePriority>
 80044bc:	4603      	mov	r3, r0
 80044be:	4619      	mov	r1, r3
 80044c0:	2047      	movs	r0, #71	; 0x47
 80044c2:	f7ff fc8b 	bl	8003ddc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80044c6:	2047      	movs	r0, #71	; 0x47
 80044c8:	f7ff fc6a 	bl	8003da0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80044cc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80044d0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80044d2:	2300      	movs	r3, #0
 80044d4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80044d6:	2300      	movs	r3, #0
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80044da:	2300      	movs	r3, #0
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80044de:	230c      	movs	r3, #12
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80044e2:	2300      	movs	r3, #0
 80044e4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80044e6:	2300      	movs	r3, #0
 80044e8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 80044ea:	f107 031c 	add.w	r3, r7, #28
 80044ee:	4619      	mov	r1, r3
 80044f0:	4807      	ldr	r0, [pc, #28]	; (8004510 <MX_USART6_UART_Init+0xbc>)
 80044f2:	f001 f9f9 	bl	80058e8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 80044f6:	4806      	ldr	r0, [pc, #24]	; (8004510 <MX_USART6_UART_Init+0xbc>)
 80044f8:	f7ff fe66 	bl	80041c8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 80044fc:	4804      	ldr	r0, [pc, #16]	; (8004510 <MX_USART6_UART_Init+0xbc>)
 80044fe:	f7ff fe53 	bl	80041a8 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004502:	bf00      	nop
 8004504:	3738      	adds	r7, #56	; 0x38
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40020800 	.word	0x40020800
 8004510:	40011400 	.word	0x40011400

08004514 <_write>:

/* USER CODE BEGIN 1 */
int _write(int file, char* p, int len)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
	for(int i=0;i<len;i++)
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	e011      	b.n	800454a <_write+0x36>
	{
		LL_USART_TransmitData8(USART6, *(p+i));
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	4413      	add	r3, r2
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	4619      	mov	r1, r3
 8004530:	480a      	ldr	r0, [pc, #40]	; (800455c <_write+0x48>)
 8004532:	f7ff fe8e 	bl	8004252 <LL_USART_TransmitData8>
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8004536:	bf00      	nop
 8004538:	4808      	ldr	r0, [pc, #32]	; (800455c <_write+0x48>)
 800453a:	f7ff fe77 	bl	800422c <LL_USART_IsActiveFlag_TXE>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f9      	beq.n	8004538 <_write+0x24>
	for(int i=0;i<len;i++)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	3301      	adds	r3, #1
 8004548:	617b      	str	r3, [r7, #20]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	429a      	cmp	r2, r3
 8004550:	dbe9      	blt.n	8004526 <_write+0x12>
//		usDelay(100);	// 문자 1개 출력당 약 100us 소요, Float, int형 차이 없음
	}
	return len;
 8004552:	687b      	ldr	r3, [r7, #4]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40011400 	.word	0x40011400

08004560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004560:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004598 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004564:	480d      	ldr	r0, [pc, #52]	; (800459c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004566:	490e      	ldr	r1, [pc, #56]	; (80045a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004568:	4a0e      	ldr	r2, [pc, #56]	; (80045a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800456a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800456c:	e002      	b.n	8004574 <LoopCopyDataInit>

0800456e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800456e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004572:	3304      	adds	r3, #4

08004574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004578:	d3f9      	bcc.n	800456e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800457a:	4a0b      	ldr	r2, [pc, #44]	; (80045a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800457c:	4c0b      	ldr	r4, [pc, #44]	; (80045ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800457e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004580:	e001      	b.n	8004586 <LoopFillZerobss>

08004582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004584:	3204      	adds	r2, #4

08004586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004588:	d3fb      	bcc.n	8004582 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800458a:	f7ff f9d1 	bl	8003930 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800458e:	f001 fa69 	bl	8005a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004592:	f7fe fc13 	bl	8002dbc <main>
  bx  lr    
 8004596:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800459c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045a0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80045a4:	080090fc 	.word	0x080090fc
  ldr r2, =_sbss
 80045a8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80045ac:	20000444 	.word	0x20000444

080045b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045b0:	e7fe      	b.n	80045b0 <ADC_IRQHandler>
	...

080045b4 <LL_EXTI_EnableIT_0_31>:
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <LL_EXTI_EnableIT_0_31+0x20>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4904      	ldr	r1, [pc, #16]	; (80045d4 <LL_EXTI_EnableIT_0_31+0x20>)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	600b      	str	r3, [r1, #0]
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	40013c00 	.word	0x40013c00

080045d8 <LL_EXTI_DisableIT_0_31>:
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80045e0:	4b06      	ldr	r3, [pc, #24]	; (80045fc <LL_EXTI_DisableIT_0_31+0x24>)
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	43db      	mvns	r3, r3
 80045e8:	4904      	ldr	r1, [pc, #16]	; (80045fc <LL_EXTI_DisableIT_0_31+0x24>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	600b      	str	r3, [r1, #0]
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40013c00 	.word	0x40013c00

08004600 <LL_EXTI_EnableEvent_0_31>:
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <LL_EXTI_EnableEvent_0_31+0x20>)
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	4904      	ldr	r1, [pc, #16]	; (8004620 <LL_EXTI_EnableEvent_0_31+0x20>)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4313      	orrs	r3, r2
 8004612:	604b      	str	r3, [r1, #4]
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	40013c00 	.word	0x40013c00

08004624 <LL_EXTI_DisableEvent_0_31>:
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <LL_EXTI_DisableEvent_0_31+0x24>)
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	43db      	mvns	r3, r3
 8004634:	4904      	ldr	r1, [pc, #16]	; (8004648 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004636:	4013      	ands	r3, r2
 8004638:	604b      	str	r3, [r1, #4]
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40013c00 	.word	0x40013c00

0800464c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004654:	4b05      	ldr	r3, [pc, #20]	; (800466c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	4904      	ldr	r1, [pc, #16]	; (800466c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4313      	orrs	r3, r2
 800465e:	608b      	str	r3, [r1, #8]
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	40013c00 	.word	0x40013c00

08004670 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8004678:	4b06      	ldr	r3, [pc, #24]	; (8004694 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	43db      	mvns	r3, r3
 8004680:	4904      	ldr	r1, [pc, #16]	; (8004694 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004682:	4013      	ands	r3, r2
 8004684:	608b      	str	r3, [r1, #8]
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40013c00 	.word	0x40013c00

08004698 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80046a0:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	4904      	ldr	r1, [pc, #16]	; (80046b8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60cb      	str	r3, [r1, #12]
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	40013c00 	.word	0x40013c00

080046bc <LL_EXTI_DisableFallingTrig_0_31>:
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80046c4:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	43db      	mvns	r3, r3
 80046cc:	4904      	ldr	r1, [pc, #16]	; (80046e0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80046ce:	4013      	ands	r3, r2
 80046d0:	60cb      	str	r3, [r1, #12]
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40013c00 	.word	0x40013c00

080046e4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80046ec:	2300      	movs	r3, #0
 80046ee:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	791b      	ldrb	r3, [r3, #4]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d065      	beq.n	80047c4 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d06c      	beq.n	80047da <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	795b      	ldrb	r3, [r3, #5]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d01c      	beq.n	8004742 <LL_EXTI_Init+0x5e>
 8004708:	2b02      	cmp	r3, #2
 800470a:	dc25      	bgt.n	8004758 <LL_EXTI_Init+0x74>
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <LL_EXTI_Init+0x32>
 8004710:	2b01      	cmp	r3, #1
 8004712:	d00b      	beq.n	800472c <LL_EXTI_Init+0x48>
 8004714:	e020      	b.n	8004758 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff ff82 	bl	8004624 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff ff45 	bl	80045b4 <LL_EXTI_EnableIT_0_31>
          break;
 800472a:	e018      	b.n	800475e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff ff51 	bl	80045d8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff ff60 	bl	8004600 <LL_EXTI_EnableEvent_0_31>
          break;
 8004740:	e00d      	b.n	800475e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff ff34 	bl	80045b4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff ff55 	bl	8004600 <LL_EXTI_EnableEvent_0_31>
          break;
 8004756:	e002      	b.n	800475e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	73fb      	strb	r3, [r7, #15]
          break;
 800475c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	799b      	ldrb	r3, [r3, #6]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d039      	beq.n	80047da <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	799b      	ldrb	r3, [r3, #6]
 800476a:	2b03      	cmp	r3, #3
 800476c:	d01c      	beq.n	80047a8 <LL_EXTI_Init+0xc4>
 800476e:	2b03      	cmp	r3, #3
 8004770:	dc25      	bgt.n	80047be <LL_EXTI_Init+0xda>
 8004772:	2b01      	cmp	r3, #1
 8004774:	d002      	beq.n	800477c <LL_EXTI_Init+0x98>
 8004776:	2b02      	cmp	r3, #2
 8004778:	d00b      	beq.n	8004792 <LL_EXTI_Init+0xae>
 800477a:	e020      	b.n	80047be <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff ff9b 	bl	80046bc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff ff5e 	bl	800464c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8004790:	e024      	b.n	80047dc <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff ff6a 	bl	8004670 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff ff79 	bl	8004698 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80047a6:	e019      	b.n	80047dc <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff ff4d 	bl	800464c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff ff6e 	bl	8004698 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80047bc:	e00e      	b.n	80047dc <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	73fb      	strb	r3, [r7, #15]
            break;
 80047c2:	e00b      	b.n	80047dc <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff ff05 	bl	80045d8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff ff26 	bl	8004624 <LL_EXTI_DisableEvent_0_31>
 80047d8:	e000      	b.n	80047dc <LL_EXTI_Init+0xf8>
      }
 80047da:	bf00      	nop
  }
  return status;
 80047dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <LL_GPIO_SetPinMode>:
{
 80047e6:	b480      	push	{r7}
 80047e8:	b089      	sub	sp, #36	; 0x24
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	fa93 f3a3 	rbit	r3, r3
 8004800:	613b      	str	r3, [r7, #16]
  return result;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	fab3 f383 	clz	r3, r3
 8004808:	b2db      	uxtb	r3, r3
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	2103      	movs	r1, #3
 800480e:	fa01 f303 	lsl.w	r3, r1, r3
 8004812:	43db      	mvns	r3, r3
 8004814:	401a      	ands	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	fa93 f3a3 	rbit	r3, r3
 8004820:	61bb      	str	r3, [r7, #24]
  return result;
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	fab3 f383 	clz	r3, r3
 8004828:	b2db      	uxtb	r3, r3
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	fa01 f303 	lsl.w	r3, r1, r3
 8004832:	431a      	orrs	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	601a      	str	r2, [r3, #0]
}
 8004838:	bf00      	nop
 800483a:	3724      	adds	r7, #36	; 0x24
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <LL_GPIO_SetPinOutputType>:
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	43db      	mvns	r3, r3
 8004858:	401a      	ands	r2, r3
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	fb01 f303 	mul.w	r3, r1, r3
 8004862:	431a      	orrs	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	605a      	str	r2, [r3, #4]
}
 8004868:	bf00      	nop
 800486a:	3714      	adds	r7, #20
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <LL_GPIO_SetPinSpeed>:
{
 8004874:	b480      	push	{r7}
 8004876:	b089      	sub	sp, #36	; 0x24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	fa93 f3a3 	rbit	r3, r3
 800488e:	613b      	str	r3, [r7, #16]
  return result;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	fab3 f383 	clz	r3, r3
 8004896:	b2db      	uxtb	r3, r3
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	2103      	movs	r1, #3
 800489c:	fa01 f303 	lsl.w	r3, r1, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	401a      	ands	r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	fa93 f3a3 	rbit	r3, r3
 80048ae:	61bb      	str	r3, [r7, #24]
  return result;
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	fab3 f383 	clz	r3, r3
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	005b      	lsls	r3, r3, #1
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	fa01 f303 	lsl.w	r3, r1, r3
 80048c0:	431a      	orrs	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	609a      	str	r2, [r3, #8]
}
 80048c6:	bf00      	nop
 80048c8:	3724      	adds	r7, #36	; 0x24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <LL_GPIO_SetPinPull>:
{
 80048d2:	b480      	push	{r7}
 80048d4:	b089      	sub	sp, #36	; 0x24
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	fa93 f3a3 	rbit	r3, r3
 80048ec:	613b      	str	r3, [r7, #16]
  return result;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	fab3 f383 	clz	r3, r3
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	2103      	movs	r1, #3
 80048fa:	fa01 f303 	lsl.w	r3, r1, r3
 80048fe:	43db      	mvns	r3, r3
 8004900:	401a      	ands	r2, r3
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	fa93 f3a3 	rbit	r3, r3
 800490c:	61bb      	str	r3, [r7, #24]
  return result;
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	fab3 f383 	clz	r3, r3
 8004914:	b2db      	uxtb	r3, r3
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	fa01 f303 	lsl.w	r3, r1, r3
 800491e:	431a      	orrs	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	60da      	str	r2, [r3, #12]
}
 8004924:	bf00      	nop
 8004926:	3724      	adds	r7, #36	; 0x24
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <LL_GPIO_SetAFPin_0_7>:
{
 8004930:	b480      	push	{r7}
 8004932:	b089      	sub	sp, #36	; 0x24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6a1a      	ldr	r2, [r3, #32]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	fa93 f3a3 	rbit	r3, r3
 800494a:	613b      	str	r3, [r7, #16]
  return result;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	fab3 f383 	clz	r3, r3
 8004952:	b2db      	uxtb	r3, r3
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	210f      	movs	r1, #15
 8004958:	fa01 f303 	lsl.w	r3, r1, r3
 800495c:	43db      	mvns	r3, r3
 800495e:	401a      	ands	r2, r3
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	fa93 f3a3 	rbit	r3, r3
 800496a:	61bb      	str	r3, [r7, #24]
  return result;
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	fab3 f383 	clz	r3, r3
 8004972:	b2db      	uxtb	r3, r3
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	fa01 f303 	lsl.w	r3, r1, r3
 800497c:	431a      	orrs	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	621a      	str	r2, [r3, #32]
}
 8004982:	bf00      	nop
 8004984:	3724      	adds	r7, #36	; 0x24
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <LL_GPIO_SetAFPin_8_15>:
{
 800498e:	b480      	push	{r7}
 8004990:	b089      	sub	sp, #36	; 0x24
 8004992:	af00      	add	r7, sp, #0
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	0a1b      	lsrs	r3, r3, #8
 80049a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	fa93 f3a3 	rbit	r3, r3
 80049aa:	613b      	str	r3, [r7, #16]
  return result;
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	fab3 f383 	clz	r3, r3
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	210f      	movs	r1, #15
 80049b8:	fa01 f303 	lsl.w	r3, r1, r3
 80049bc:	43db      	mvns	r3, r3
 80049be:	401a      	ands	r2, r3
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	0a1b      	lsrs	r3, r3, #8
 80049c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	fa93 f3a3 	rbit	r3, r3
 80049cc:	61bb      	str	r3, [r7, #24]
  return result;
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	fab3 f383 	clz	r3, r3
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	fa01 f303 	lsl.w	r3, r1, r3
 80049de:	431a      	orrs	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80049e4:	bf00      	nop
 80049e6:	3724      	adds	r7, #36	; 0x24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b088      	sub	sp, #32
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	fa93 f3a3 	rbit	r3, r3
 8004a0e:	613b      	str	r3, [r7, #16]
  return result;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	fab3 f383 	clz	r3, r3
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004a1a:	e050      	b.n	8004abe <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	2101      	movs	r1, #1
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	fa01 f303 	lsl.w	r3, r1, r3
 8004a28:	4013      	ands	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d042      	beq.n	8004ab8 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d003      	beq.n	8004a42 <LL_GPIO_Init+0x52>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d10d      	bne.n	8004a5e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	461a      	mov	r2, r3
 8004a48:	69b9      	ldr	r1, [r7, #24]
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff ff12 	bl	8004874 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	461a      	mov	r2, r3
 8004a56:	69b9      	ldr	r1, [r7, #24]
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff fef3 	bl	8004844 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	461a      	mov	r2, r3
 8004a64:	69b9      	ldr	r1, [r7, #24]
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff ff33 	bl	80048d2 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d11a      	bne.n	8004aaa <LL_GPIO_Init+0xba>
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	fa93 f3a3 	rbit	r3, r3
 8004a7e:	60bb      	str	r3, [r7, #8]
  return result;
 8004a80:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004a82:	fab3 f383 	clz	r3, r3
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b07      	cmp	r3, #7
 8004a8a:	d807      	bhi.n	8004a9c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	461a      	mov	r2, r3
 8004a92:	69b9      	ldr	r1, [r7, #24]
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff ff4b 	bl	8004930 <LL_GPIO_SetAFPin_0_7>
 8004a9a:	e006      	b.n	8004aaa <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	69b9      	ldr	r1, [r7, #24]
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff ff72 	bl	800498e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	69b9      	ldr	r1, [r7, #24]
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff fe97 	bl	80047e6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	3301      	adds	r3, #1
 8004abc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1a7      	bne.n	8004a1c <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3720      	adds	r7, #32
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <LL_RCC_GetSysClkSource>:
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004adc:	4b04      	ldr	r3, [pc, #16]	; (8004af0 <LL_RCC_GetSysClkSource+0x18>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 030c 	and.w	r3, r3, #12
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40023800 	.word	0x40023800

08004af4 <LL_RCC_GetAHBPrescaler>:
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004af8:	4b04      	ldr	r3, [pc, #16]	; (8004b0c <LL_RCC_GetAHBPrescaler+0x18>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40023800 	.word	0x40023800

08004b10 <LL_RCC_GetAPB1Prescaler>:
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004b14:	4b04      	ldr	r3, [pc, #16]	; (8004b28 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40023800 	.word	0x40023800

08004b2c <LL_RCC_GetAPB2Prescaler>:
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004b30:	4b04      	ldr	r3, [pc, #16]	; (8004b44 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800

08004b48 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004b4c:	4b04      	ldr	r3, [pc, #16]	; (8004b60 <LL_RCC_PLL_GetMainSource+0x18>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	40023800 	.word	0x40023800

08004b64 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004b68:	4b04      	ldr	r3, [pc, #16]	; (8004b7c <LL_RCC_PLL_GetN+0x18>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	099b      	lsrs	r3, r3, #6
 8004b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	40023800 	.word	0x40023800

08004b80 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004b84:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <LL_RCC_PLL_GetP+0x18>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40023800 	.word	0x40023800

08004b9c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004ba0:	4b04      	ldr	r3, [pc, #16]	; (8004bb4 <LL_RCC_PLL_GetDivider+0x18>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	40023800 	.word	0x40023800

08004bb8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004bc0:	f000 f820 	bl	8004c04 <RCC_GetSystemClockFreq>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f840 	bl	8004c54 <RCC_GetHCLKClockFreq>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 f84e 	bl	8004c80 <RCC_GetPCLK1ClockFreq>
 8004be4:	4602      	mov	r2, r0
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 f85a 	bl	8004ca8 <RCC_GetPCLK2ClockFreq>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	60da      	str	r2, [r3, #12]
}
 8004bfa:	bf00      	nop
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004c0e:	f7ff ff63 	bl	8004ad8 <LL_RCC_GetSysClkSource>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d00c      	beq.n	8004c32 <RCC_GetSystemClockFreq+0x2e>
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	d80f      	bhi.n	8004c3c <RCC_GetSystemClockFreq+0x38>
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <RCC_GetSystemClockFreq+0x22>
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d003      	beq.n	8004c2c <RCC_GetSystemClockFreq+0x28>
 8004c24:	e00a      	b.n	8004c3c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004c26:	4b09      	ldr	r3, [pc, #36]	; (8004c4c <RCC_GetSystemClockFreq+0x48>)
 8004c28:	607b      	str	r3, [r7, #4]
      break;
 8004c2a:	e00a      	b.n	8004c42 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004c2c:	4b08      	ldr	r3, [pc, #32]	; (8004c50 <RCC_GetSystemClockFreq+0x4c>)
 8004c2e:	607b      	str	r3, [r7, #4]
      break;
 8004c30:	e007      	b.n	8004c42 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004c32:	2008      	movs	r0, #8
 8004c34:	f000 f84c 	bl	8004cd0 <RCC_PLL_GetFreqDomain_SYS>
 8004c38:	6078      	str	r0, [r7, #4]
      break;
 8004c3a:	e002      	b.n	8004c42 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004c3c:	4b03      	ldr	r3, [pc, #12]	; (8004c4c <RCC_GetSystemClockFreq+0x48>)
 8004c3e:	607b      	str	r3, [r7, #4]
      break;
 8004c40:	bf00      	nop
  }

  return frequency;
 8004c42:	687b      	ldr	r3, [r7, #4]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	00f42400 	.word	0x00f42400
 8004c50:	007a1200 	.word	0x007a1200

08004c54 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004c5c:	f7ff ff4a 	bl	8004af4 <LL_RCC_GetAHBPrescaler>
 8004c60:	4603      	mov	r3, r0
 8004c62:	091b      	lsrs	r3, r3, #4
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	4a04      	ldr	r2, [pc, #16]	; (8004c7c <RCC_GetHCLKClockFreq+0x28>)
 8004c6a:	5cd3      	ldrb	r3, [r2, r3]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	40d3      	lsrs	r3, r2
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	08008ca8 	.word	0x08008ca8

08004c80 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004c88:	f7ff ff42 	bl	8004b10 <LL_RCC_GetAPB1Prescaler>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	0a9b      	lsrs	r3, r3, #10
 8004c90:	4a04      	ldr	r2, [pc, #16]	; (8004ca4 <RCC_GetPCLK1ClockFreq+0x24>)
 8004c92:	5cd3      	ldrb	r3, [r2, r3]
 8004c94:	461a      	mov	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	40d3      	lsrs	r3, r2
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	08008cb8 	.word	0x08008cb8

08004ca8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004cb0:	f7ff ff3c 	bl	8004b2c <LL_RCC_GetAPB2Prescaler>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	0b5b      	lsrs	r3, r3, #13
 8004cb8:	4a04      	ldr	r2, [pc, #16]	; (8004ccc <RCC_GetPCLK2ClockFreq+0x24>)
 8004cba:	5cd3      	ldrb	r3, [r2, r3]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	40d3      	lsrs	r3, r2
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	08008cb8 	.word	0x08008cb8

08004cd0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004cd0:	b590      	push	{r4, r7, lr}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004ce4:	f7ff ff30 	bl	8004b48 <LL_RCC_PLL_GetMainSource>
 8004ce8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d004      	beq.n	8004cfa <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf6:	d003      	beq.n	8004d00 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004cf8:	e005      	b.n	8004d06 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004cfa:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004cfc:	617b      	str	r3, [r7, #20]
      break;
 8004cfe:	e005      	b.n	8004d0c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004d00:	4b11      	ldr	r3, [pc, #68]	; (8004d48 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004d02:	617b      	str	r3, [r7, #20]
      break;
 8004d04:	e002      	b.n	8004d0c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004d06:	4b0f      	ldr	r3, [pc, #60]	; (8004d44 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004d08:	617b      	str	r3, [r7, #20]
      break;
 8004d0a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d113      	bne.n	8004d3a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004d12:	f7ff ff43 	bl	8004b9c <LL_RCC_PLL_GetDivider>
 8004d16:	4602      	mov	r2, r0
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	fbb3 f4f2 	udiv	r4, r3, r2
 8004d1e:	f7ff ff21 	bl	8004b64 <LL_RCC_PLL_GetN>
 8004d22:	4603      	mov	r3, r0
 8004d24:	fb03 f404 	mul.w	r4, r3, r4
 8004d28:	f7ff ff2a 	bl	8004b80 <LL_RCC_PLL_GetP>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	0c1b      	lsrs	r3, r3, #16
 8004d30:	3301      	adds	r3, #1
 8004d32:	005b      	lsls	r3, r3, #1
 8004d34:	fbb4 f3f3 	udiv	r3, r4, r3
 8004d38:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004d3a:	693b      	ldr	r3, [r7, #16]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd90      	pop	{r4, r7, pc}
 8004d44:	00f42400 	.word	0x00f42400
 8004d48:	007a1200 	.word	0x007a1200

08004d4c <LL_SPI_IsEnabled>:
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5c:	2b40      	cmp	r3, #64	; 0x40
 8004d5e:	d101      	bne.n	8004d64 <LL_SPI_IsEnabled+0x18>
 8004d60:	2301      	movs	r3, #1
 8004d62:	e000      	b.n	8004d66 <LL_SPI_IsEnabled+0x1a>
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <LL_SPI_SetCRCPolynomial>:
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	611a      	str	r2, [r3, #16]
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7ff ffd3 	bl	8004d4c <LL_SPI_IsEnabled>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d139      	bne.n	8004e20 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004db4:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	6811      	ldr	r1, [r2, #0]
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	6852      	ldr	r2, [r2, #4]
 8004dc0:	4311      	orrs	r1, r2
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	6892      	ldr	r2, [r2, #8]
 8004dc6:	4311      	orrs	r1, r2
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	68d2      	ldr	r2, [r2, #12]
 8004dcc:	4311      	orrs	r1, r2
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	6912      	ldr	r2, [r2, #16]
 8004dd2:	4311      	orrs	r1, r2
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	6952      	ldr	r2, [r2, #20]
 8004dd8:	4311      	orrs	r1, r2
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	6992      	ldr	r2, [r2, #24]
 8004dde:	4311      	orrs	r1, r2
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	69d2      	ldr	r2, [r2, #28]
 8004de4:	4311      	orrs	r1, r2
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	6a12      	ldr	r2, [r2, #32]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f023 0204 	bic.w	r2, r3, #4
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	0c1b      	lsrs	r3, r3, #16
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e0e:	d105      	bne.n	8004e1c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	4619      	mov	r1, r3
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff ffab 	bl	8004d72 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69db      	ldr	r3, [r3, #28]
 8004e24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	61da      	str	r2, [r3, #28]
  return status;
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <LL_TIM_SetPrescaler>:
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <LL_TIM_SetAutoReload>:
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <LL_TIM_SetRepetitionCounter>:
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <LL_TIM_OC_SetCompareCH1>:
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <LL_TIM_OC_SetCompareCH2>:
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <LL_TIM_OC_SetCompareCH3>:
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <LL_TIM_OC_SetCompareCH4>:
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004eee:	bf00      	nop
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	f043 0201 	orr.w	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	615a      	str	r2, [r3, #20]
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
	...

08004f1c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a3d      	ldr	r2, [pc, #244]	; (8005024 <LL_TIM_Init+0x108>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d013      	beq.n	8004f5c <LL_TIM_Init+0x40>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3a:	d00f      	beq.n	8004f5c <LL_TIM_Init+0x40>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a3a      	ldr	r2, [pc, #232]	; (8005028 <LL_TIM_Init+0x10c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d00b      	beq.n	8004f5c <LL_TIM_Init+0x40>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a39      	ldr	r2, [pc, #228]	; (800502c <LL_TIM_Init+0x110>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d007      	beq.n	8004f5c <LL_TIM_Init+0x40>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a38      	ldr	r2, [pc, #224]	; (8005030 <LL_TIM_Init+0x114>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d003      	beq.n	8004f5c <LL_TIM_Init+0x40>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a37      	ldr	r2, [pc, #220]	; (8005034 <LL_TIM_Init+0x118>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d106      	bne.n	8004f6a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2d      	ldr	r2, [pc, #180]	; (8005024 <LL_TIM_Init+0x108>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d02b      	beq.n	8004fca <LL_TIM_Init+0xae>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f78:	d027      	beq.n	8004fca <LL_TIM_Init+0xae>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2a      	ldr	r2, [pc, #168]	; (8005028 <LL_TIM_Init+0x10c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d023      	beq.n	8004fca <LL_TIM_Init+0xae>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a29      	ldr	r2, [pc, #164]	; (800502c <LL_TIM_Init+0x110>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d01f      	beq.n	8004fca <LL_TIM_Init+0xae>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a28      	ldr	r2, [pc, #160]	; (8005030 <LL_TIM_Init+0x114>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d01b      	beq.n	8004fca <LL_TIM_Init+0xae>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a27      	ldr	r2, [pc, #156]	; (8005034 <LL_TIM_Init+0x118>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d017      	beq.n	8004fca <LL_TIM_Init+0xae>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a26      	ldr	r2, [pc, #152]	; (8005038 <LL_TIM_Init+0x11c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d013      	beq.n	8004fca <LL_TIM_Init+0xae>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a25      	ldr	r2, [pc, #148]	; (800503c <LL_TIM_Init+0x120>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00f      	beq.n	8004fca <LL_TIM_Init+0xae>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a24      	ldr	r2, [pc, #144]	; (8005040 <LL_TIM_Init+0x124>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00b      	beq.n	8004fca <LL_TIM_Init+0xae>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a23      	ldr	r2, [pc, #140]	; (8005044 <LL_TIM_Init+0x128>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d007      	beq.n	8004fca <LL_TIM_Init+0xae>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a22      	ldr	r2, [pc, #136]	; (8005048 <LL_TIM_Init+0x12c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d003      	beq.n	8004fca <LL_TIM_Init+0xae>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a21      	ldr	r2, [pc, #132]	; (800504c <LL_TIM_Init+0x130>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d106      	bne.n	8004fd8 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7ff ff34 	bl	8004e52 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	881b      	ldrh	r3, [r3, #0]
 8004fee:	4619      	mov	r1, r3
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff ff20 	bl	8004e36 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a0a      	ldr	r2, [pc, #40]	; (8005024 <LL_TIM_Init+0x108>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d003      	beq.n	8005006 <LL_TIM_Init+0xea>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a0c      	ldr	r2, [pc, #48]	; (8005034 <LL_TIM_Init+0x118>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d105      	bne.n	8005012 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	4619      	mov	r1, r3
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff ff2e 	bl	8004e6e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f7ff ff71 	bl	8004efa <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	40010000 	.word	0x40010000
 8005028:	40000400 	.word	0x40000400
 800502c:	40000800 	.word	0x40000800
 8005030:	40000c00 	.word	0x40000c00
 8005034:	40010400 	.word	0x40010400
 8005038:	40014000 	.word	0x40014000
 800503c:	40014400 	.word	0x40014400
 8005040:	40014800 	.word	0x40014800
 8005044:	40001800 	.word	0x40001800
 8005048:	40001c00 	.word	0x40001c00
 800504c:	40002000 	.word	0x40002000

08005050 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005066:	d027      	beq.n	80050b8 <LL_TIM_OC_Init+0x68>
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506e:	d82a      	bhi.n	80050c6 <LL_TIM_OC_Init+0x76>
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005076:	d018      	beq.n	80050aa <LL_TIM_OC_Init+0x5a>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800507e:	d822      	bhi.n	80050c6 <LL_TIM_OC_Init+0x76>
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d003      	beq.n	800508e <LL_TIM_OC_Init+0x3e>
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2b10      	cmp	r3, #16
 800508a:	d007      	beq.n	800509c <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800508c:	e01b      	b.n	80050c6 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f81f 	bl	80050d4 <OC1Config>
 8005096:	4603      	mov	r3, r0
 8005098:	75fb      	strb	r3, [r7, #23]
      break;
 800509a:	e015      	b.n	80050c8 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f884 	bl	80051ac <OC2Config>
 80050a4:	4603      	mov	r3, r0
 80050a6:	75fb      	strb	r3, [r7, #23]
      break;
 80050a8:	e00e      	b.n	80050c8 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f8ed 	bl	800528c <OC3Config>
 80050b2:	4603      	mov	r3, r0
 80050b4:	75fb      	strb	r3, [r7, #23]
      break;
 80050b6:	e007      	b.n	80050c8 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 f956 	bl	800536c <OC4Config>
 80050c0:	4603      	mov	r3, r0
 80050c2:	75fb      	strb	r3, [r7, #23]
      break;
 80050c4:	e000      	b.n	80050c8 <LL_TIM_OC_Init+0x78>
      break;
 80050c6:	bf00      	nop
  }

  return result;
 80050c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
	...

080050d4 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	f023 0201 	bic.w	r2, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0303 	bic.w	r3, r3, #3
 8005102:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f023 0202 	bic.w	r2, r3, #2
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f023 0201 	bic.w	r2, r3, #1
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a1c      	ldr	r2, [pc, #112]	; (80051a4 <OC1Config+0xd0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d003      	beq.n	800513e <OC1Config+0x6a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a1b      	ldr	r2, [pc, #108]	; (80051a8 <OC1Config+0xd4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d11e      	bne.n	800517c <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f023 0208 	bic.w	r2, r3, #8
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f023 0204 	bic.w	r2, r3, #4
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4619      	mov	r1, r3
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7ff fe7b 	bl	8004e8a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40010000 	.word	0x40010000
 80051a8:	40010400 	.word	0x40010400

080051ac <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	f023 0210 	bic.w	r2, r3, #16
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	021b      	lsls	r3, r3, #8
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f023 0220 	bic.w	r2, r3, #32
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f023 0210 	bic.w	r2, r3, #16
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a1d      	ldr	r2, [pc, #116]	; (8005284 <OC2Config+0xd8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d003      	beq.n	800521c <OC2Config+0x70>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a1c      	ldr	r2, [pc, #112]	; (8005288 <OC2Config+0xdc>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d11f      	bne.n	800525c <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	019b      	lsls	r3, r3, #6
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	019b      	lsls	r3, r3, #6
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4313      	orrs	r3, r2
 800524a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4619      	mov	r1, r3
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7ff fe19 	bl	8004ea6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40010000 	.word	0x40010000
 8005288:	40010400 	.word	0x40010400

0800528c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 0303 	bic.w	r3, r3, #3
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	021b      	lsls	r3, r3, #8
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a1d      	ldr	r2, [pc, #116]	; (8005364 <OC3Config+0xd8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d003      	beq.n	80052fa <OC3Config+0x6e>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a1c      	ldr	r2, [pc, #112]	; (8005368 <OC3Config+0xdc>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d11f      	bne.n	800533a <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	029b      	lsls	r3, r3, #10
 8005306:	4313      	orrs	r3, r2
 8005308:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	029b      	lsls	r3, r3, #10
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	4313      	orrs	r3, r2
 8005328:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	69db      	ldr	r3, [r3, #28]
 8005334:	015b      	lsls	r3, r3, #5
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	4619      	mov	r1, r3
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff fdb8 	bl	8004ec2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	40010000 	.word	0x40010000
 8005368:	40010400 	.word	0x40010400

0800536c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	021b      	lsls	r3, r3, #8
 80053a8:	4313      	orrs	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	031b      	lsls	r3, r3, #12
 80053b8:	4313      	orrs	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	031b      	lsls	r3, r3, #12
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a11      	ldr	r2, [pc, #68]	; (8005414 <OC4Config+0xa8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d003      	beq.n	80053dc <OC4Config+0x70>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a10      	ldr	r2, [pc, #64]	; (8005418 <OC4Config+0xac>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d107      	bne.n	80053ec <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	019b      	lsls	r3, r3, #6
 80053e8:	4313      	orrs	r3, r2
 80053ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	4619      	mov	r1, r3
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7ff fd6d 	bl	8004ede <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	40010000 	.word	0x40010000
 8005418:	40010400 	.word	0x40010400

0800541c <LL_USART_IsEnabled>:
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800542c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005430:	bf0c      	ite	eq
 8005432:	2301      	moveq	r3, #1
 8005434:	2300      	movne	r3, #0
 8005436:	b2db      	uxtb	r3, r3
}
 8005438:	4618      	mov	r0, r3
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <LL_USART_SetStopBitsLength>:
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	431a      	orrs	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	611a      	str	r2, [r3, #16]
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <LL_USART_SetHWFlowCtrl>:
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	615a      	str	r2, [r3, #20]
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <LL_USART_SetBaudRate>:
{
 8005490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005494:	b0c0      	sub	sp, #256	; 0x100
 8005496:	af00      	add	r7, sp, #0
 8005498:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800549c:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80054a0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80054a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80054a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b0:	f040 810c 	bne.w	80056cc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80054b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054b8:	2200      	movs	r2, #0
 80054ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80054c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80054c6:	4622      	mov	r2, r4
 80054c8:	462b      	mov	r3, r5
 80054ca:	1891      	adds	r1, r2, r2
 80054cc:	6639      	str	r1, [r7, #96]	; 0x60
 80054ce:	415b      	adcs	r3, r3
 80054d0:	667b      	str	r3, [r7, #100]	; 0x64
 80054d2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80054d6:	4621      	mov	r1, r4
 80054d8:	eb12 0801 	adds.w	r8, r2, r1
 80054dc:	4629      	mov	r1, r5
 80054de:	eb43 0901 	adc.w	r9, r3, r1
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054f6:	4690      	mov	r8, r2
 80054f8:	4699      	mov	r9, r3
 80054fa:	4623      	mov	r3, r4
 80054fc:	eb18 0303 	adds.w	r3, r8, r3
 8005500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005504:	462b      	mov	r3, r5
 8005506:	eb49 0303 	adc.w	r3, r9, r3
 800550a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800550e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005512:	2200      	movs	r2, #0
 8005514:	469a      	mov	sl, r3
 8005516:	4693      	mov	fp, r2
 8005518:	eb1a 030a 	adds.w	r3, sl, sl
 800551c:	65bb      	str	r3, [r7, #88]	; 0x58
 800551e:	eb4b 030b 	adc.w	r3, fp, fp
 8005522:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005524:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005528:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800552c:	f7fb fb8c 	bl	8000c48 <__aeabi_uldivmod>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4b64      	ldr	r3, [pc, #400]	; (80056c8 <LL_USART_SetBaudRate+0x238>)
 8005536:	fba3 2302 	umull	r2, r3, r3, r2
 800553a:	095b      	lsrs	r3, r3, #5
 800553c:	b29b      	uxth	r3, r3
 800553e:	011b      	lsls	r3, r3, #4
 8005540:	b29c      	uxth	r4, r3
 8005542:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005546:	2200      	movs	r2, #0
 8005548:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800554c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005550:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8005554:	4642      	mov	r2, r8
 8005556:	464b      	mov	r3, r9
 8005558:	1891      	adds	r1, r2, r2
 800555a:	6539      	str	r1, [r7, #80]	; 0x50
 800555c:	415b      	adcs	r3, r3
 800555e:	657b      	str	r3, [r7, #84]	; 0x54
 8005560:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005564:	4641      	mov	r1, r8
 8005566:	1851      	adds	r1, r2, r1
 8005568:	64b9      	str	r1, [r7, #72]	; 0x48
 800556a:	4649      	mov	r1, r9
 800556c:	414b      	adcs	r3, r1
 800556e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 800557c:	4659      	mov	r1, fp
 800557e:	00cb      	lsls	r3, r1, #3
 8005580:	4651      	mov	r1, sl
 8005582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005586:	4651      	mov	r1, sl
 8005588:	00ca      	lsls	r2, r1, #3
 800558a:	4610      	mov	r0, r2
 800558c:	4619      	mov	r1, r3
 800558e:	4603      	mov	r3, r0
 8005590:	4642      	mov	r2, r8
 8005592:	189b      	adds	r3, r3, r2
 8005594:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005598:	464b      	mov	r3, r9
 800559a:	460a      	mov	r2, r1
 800559c:	eb42 0303 	adc.w	r3, r2, r3
 80055a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80055a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80055a8:	2200      	movs	r2, #0
 80055aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055ae:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80055b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80055b6:	460b      	mov	r3, r1
 80055b8:	18db      	adds	r3, r3, r3
 80055ba:	643b      	str	r3, [r7, #64]	; 0x40
 80055bc:	4613      	mov	r3, r2
 80055be:	eb42 0303 	adc.w	r3, r2, r3
 80055c2:	647b      	str	r3, [r7, #68]	; 0x44
 80055c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80055c8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80055cc:	f7fb fb3c 	bl	8000c48 <__aeabi_uldivmod>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4611      	mov	r1, r2
 80055d6:	4b3c      	ldr	r3, [pc, #240]	; (80056c8 <LL_USART_SetBaudRate+0x238>)
 80055d8:	fba3 2301 	umull	r2, r3, r3, r1
 80055dc:	095b      	lsrs	r3, r3, #5
 80055de:	2264      	movs	r2, #100	; 0x64
 80055e0:	fb02 f303 	mul.w	r3, r2, r3
 80055e4:	1acb      	subs	r3, r1, r3
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80055ec:	4b36      	ldr	r3, [pc, #216]	; (80056c8 <LL_USART_SetBaudRate+0x238>)
 80055ee:	fba3 2302 	umull	r2, r3, r3, r2
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055fe:	b29b      	uxth	r3, r3
 8005600:	4423      	add	r3, r4
 8005602:	b29c      	uxth	r4, r3
 8005604:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005608:	2200      	movs	r2, #0
 800560a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800560e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005612:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8005616:	4642      	mov	r2, r8
 8005618:	464b      	mov	r3, r9
 800561a:	1891      	adds	r1, r2, r2
 800561c:	63b9      	str	r1, [r7, #56]	; 0x38
 800561e:	415b      	adcs	r3, r3
 8005620:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005622:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005626:	4641      	mov	r1, r8
 8005628:	1851      	adds	r1, r2, r1
 800562a:	6339      	str	r1, [r7, #48]	; 0x30
 800562c:	4649      	mov	r1, r9
 800562e:	414b      	adcs	r3, r1
 8005630:	637b      	str	r3, [r7, #52]	; 0x34
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	f04f 0300 	mov.w	r3, #0
 800563a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800563e:	4659      	mov	r1, fp
 8005640:	00cb      	lsls	r3, r1, #3
 8005642:	4651      	mov	r1, sl
 8005644:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005648:	4651      	mov	r1, sl
 800564a:	00ca      	lsls	r2, r1, #3
 800564c:	4610      	mov	r0, r2
 800564e:	4619      	mov	r1, r3
 8005650:	4603      	mov	r3, r0
 8005652:	4642      	mov	r2, r8
 8005654:	189b      	adds	r3, r3, r2
 8005656:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800565a:	464b      	mov	r3, r9
 800565c:	460a      	mov	r2, r1
 800565e:	eb42 0303 	adc.w	r3, r2, r3
 8005662:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005666:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800566a:	2200      	movs	r2, #0
 800566c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005670:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005674:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005678:	460b      	mov	r3, r1
 800567a:	18db      	adds	r3, r3, r3
 800567c:	62bb      	str	r3, [r7, #40]	; 0x28
 800567e:	4613      	mov	r3, r2
 8005680:	eb42 0303 	adc.w	r3, r2, r3
 8005684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005686:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800568a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800568e:	f7fb fadb 	bl	8000c48 <__aeabi_uldivmod>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <LL_USART_SetBaudRate+0x238>)
 8005698:	fba3 1302 	umull	r1, r3, r3, r2
 800569c:	095b      	lsrs	r3, r3, #5
 800569e:	2164      	movs	r1, #100	; 0x64
 80056a0:	fb01 f303 	mul.w	r3, r1, r3
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	3332      	adds	r3, #50	; 0x32
 80056aa:	4a07      	ldr	r2, [pc, #28]	; (80056c8 <LL_USART_SetBaudRate+0x238>)
 80056ac:	fba2 2303 	umull	r2, r3, r2, r3
 80056b0:	095b      	lsrs	r3, r3, #5
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	4423      	add	r3, r4
 80056bc:	b29b      	uxth	r3, r3
 80056be:	461a      	mov	r2, r3
 80056c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056c4:	609a      	str	r2, [r3, #8]
}
 80056c6:	e107      	b.n	80058d8 <LL_USART_SetBaudRate+0x448>
 80056c8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80056cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056d0:	2200      	movs	r2, #0
 80056d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056d6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80056da:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80056de:	4642      	mov	r2, r8
 80056e0:	464b      	mov	r3, r9
 80056e2:	1891      	adds	r1, r2, r2
 80056e4:	6239      	str	r1, [r7, #32]
 80056e6:	415b      	adcs	r3, r3
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056ee:	4641      	mov	r1, r8
 80056f0:	1854      	adds	r4, r2, r1
 80056f2:	4649      	mov	r1, r9
 80056f4:	eb43 0501 	adc.w	r5, r3, r1
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	f04f 0300 	mov.w	r3, #0
 8005700:	00eb      	lsls	r3, r5, #3
 8005702:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005706:	00e2      	lsls	r2, r4, #3
 8005708:	4614      	mov	r4, r2
 800570a:	461d      	mov	r5, r3
 800570c:	4643      	mov	r3, r8
 800570e:	18e3      	adds	r3, r4, r3
 8005710:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005714:	464b      	mov	r3, r9
 8005716:	eb45 0303 	adc.w	r3, r5, r3
 800571a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800571e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005722:	2200      	movs	r2, #0
 8005724:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005728:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	f04f 0300 	mov.w	r3, #0
 8005734:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8005738:	4629      	mov	r1, r5
 800573a:	008b      	lsls	r3, r1, #2
 800573c:	4621      	mov	r1, r4
 800573e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005742:	4621      	mov	r1, r4
 8005744:	008a      	lsls	r2, r1, #2
 8005746:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800574a:	f7fb fa7d 	bl	8000c48 <__aeabi_uldivmod>
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	4b64      	ldr	r3, [pc, #400]	; (80058e4 <LL_USART_SetBaudRate+0x454>)
 8005754:	fba3 2302 	umull	r2, r3, r3, r2
 8005758:	095b      	lsrs	r3, r3, #5
 800575a:	b29b      	uxth	r3, r3
 800575c:	011b      	lsls	r3, r3, #4
 800575e:	b29c      	uxth	r4, r3
 8005760:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005764:	2200      	movs	r2, #0
 8005766:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800576a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800576e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8005772:	4642      	mov	r2, r8
 8005774:	464b      	mov	r3, r9
 8005776:	1891      	adds	r1, r2, r2
 8005778:	61b9      	str	r1, [r7, #24]
 800577a:	415b      	adcs	r3, r3
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005782:	4641      	mov	r1, r8
 8005784:	1851      	adds	r1, r2, r1
 8005786:	6139      	str	r1, [r7, #16]
 8005788:	4649      	mov	r1, r9
 800578a:	414b      	adcs	r3, r1
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	f04f 0200 	mov.w	r2, #0
 8005792:	f04f 0300 	mov.w	r3, #0
 8005796:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800579a:	4659      	mov	r1, fp
 800579c:	00cb      	lsls	r3, r1, #3
 800579e:	4651      	mov	r1, sl
 80057a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057a4:	4651      	mov	r1, sl
 80057a6:	00ca      	lsls	r2, r1, #3
 80057a8:	4610      	mov	r0, r2
 80057aa:	4619      	mov	r1, r3
 80057ac:	4603      	mov	r3, r0
 80057ae:	4642      	mov	r2, r8
 80057b0:	189b      	adds	r3, r3, r2
 80057b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057b6:	464b      	mov	r3, r9
 80057b8:	460a      	mov	r2, r1
 80057ba:	eb42 0303 	adc.w	r3, r2, r3
 80057be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80057c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057cc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80057d0:	f04f 0200 	mov.w	r2, #0
 80057d4:	f04f 0300 	mov.w	r3, #0
 80057d8:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 80057dc:	4649      	mov	r1, r9
 80057de:	008b      	lsls	r3, r1, #2
 80057e0:	4641      	mov	r1, r8
 80057e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057e6:	4641      	mov	r1, r8
 80057e8:	008a      	lsls	r2, r1, #2
 80057ea:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80057ee:	f7fb fa2b 	bl	8000c48 <__aeabi_uldivmod>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	4b3b      	ldr	r3, [pc, #236]	; (80058e4 <LL_USART_SetBaudRate+0x454>)
 80057f8:	fba3 1302 	umull	r1, r3, r3, r2
 80057fc:	095b      	lsrs	r3, r3, #5
 80057fe:	2164      	movs	r1, #100	; 0x64
 8005800:	fb01 f303 	mul.w	r3, r1, r3
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	3332      	adds	r3, #50	; 0x32
 800580a:	4a36      	ldr	r2, [pc, #216]	; (80058e4 <LL_USART_SetBaudRate+0x454>)
 800580c:	fba2 2303 	umull	r2, r3, r2, r3
 8005810:	095b      	lsrs	r3, r3, #5
 8005812:	b29b      	uxth	r3, r3
 8005814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005818:	b29b      	uxth	r3, r3
 800581a:	4423      	add	r3, r4
 800581c:	b29c      	uxth	r4, r3
 800581e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005822:	2200      	movs	r2, #0
 8005824:	67bb      	str	r3, [r7, #120]	; 0x78
 8005826:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005828:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800582c:	4642      	mov	r2, r8
 800582e:	464b      	mov	r3, r9
 8005830:	1891      	adds	r1, r2, r2
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	415b      	adcs	r3, r3
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800583c:	4641      	mov	r1, r8
 800583e:	1851      	adds	r1, r2, r1
 8005840:	6039      	str	r1, [r7, #0]
 8005842:	4649      	mov	r1, r9
 8005844:	414b      	adcs	r3, r1
 8005846:	607b      	str	r3, [r7, #4]
 8005848:	f04f 0200 	mov.w	r2, #0
 800584c:	f04f 0300 	mov.w	r3, #0
 8005850:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005854:	4659      	mov	r1, fp
 8005856:	00cb      	lsls	r3, r1, #3
 8005858:	4651      	mov	r1, sl
 800585a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800585e:	4651      	mov	r1, sl
 8005860:	00ca      	lsls	r2, r1, #3
 8005862:	4610      	mov	r0, r2
 8005864:	4619      	mov	r1, r3
 8005866:	4603      	mov	r3, r0
 8005868:	4642      	mov	r2, r8
 800586a:	189b      	adds	r3, r3, r2
 800586c:	673b      	str	r3, [r7, #112]	; 0x70
 800586e:	464b      	mov	r3, r9
 8005870:	460a      	mov	r2, r1
 8005872:	eb42 0303 	adc.w	r3, r2, r3
 8005876:	677b      	str	r3, [r7, #116]	; 0x74
 8005878:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800587c:	2200      	movs	r2, #0
 800587e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005880:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005882:	f04f 0200 	mov.w	r2, #0
 8005886:	f04f 0300 	mov.w	r3, #0
 800588a:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 800588e:	4649      	mov	r1, r9
 8005890:	008b      	lsls	r3, r1, #2
 8005892:	4641      	mov	r1, r8
 8005894:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005898:	4641      	mov	r1, r8
 800589a:	008a      	lsls	r2, r1, #2
 800589c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80058a0:	f7fb f9d2 	bl	8000c48 <__aeabi_uldivmod>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4b0e      	ldr	r3, [pc, #56]	; (80058e4 <LL_USART_SetBaudRate+0x454>)
 80058aa:	fba3 1302 	umull	r1, r3, r3, r2
 80058ae:	095b      	lsrs	r3, r3, #5
 80058b0:	2164      	movs	r1, #100	; 0x64
 80058b2:	fb01 f303 	mul.w	r3, r1, r3
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	011b      	lsls	r3, r3, #4
 80058ba:	3332      	adds	r3, #50	; 0x32
 80058bc:	4a09      	ldr	r2, [pc, #36]	; (80058e4 <LL_USART_SetBaudRate+0x454>)
 80058be:	fba2 2303 	umull	r2, r3, r2, r3
 80058c2:	095b      	lsrs	r3, r3, #5
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f003 030f 	and.w	r3, r3, #15
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	4423      	add	r3, r4
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	461a      	mov	r2, r3
 80058d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058d6:	609a      	str	r2, [r3, #8]
}
 80058d8:	bf00      	nop
 80058da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80058de:	46bd      	mov	sp, r7
 80058e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058e4:	51eb851f 	.word	0x51eb851f

080058e8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80058f6:	2300      	movs	r3, #0
 80058f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7ff fd8e 	bl	800541c <LL_USART_IsEnabled>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d15e      	bne.n	80059c4 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800590e:	f023 030c 	bic.w	r3, r3, #12
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	6851      	ldr	r1, [r2, #4]
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	68d2      	ldr	r2, [r2, #12]
 800591a:	4311      	orrs	r1, r2
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	6912      	ldr	r2, [r2, #16]
 8005920:	4311      	orrs	r1, r2
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	6992      	ldr	r2, [r2, #24]
 8005926:	430a      	orrs	r2, r1
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	4619      	mov	r1, r3
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f7ff fd85 	bl	8005444 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	4619      	mov	r1, r3
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff fd92 	bl	800546a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005946:	f107 0308 	add.w	r3, r7, #8
 800594a:	4618      	mov	r0, r3
 800594c:	f7ff f934 	bl	8004bb8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a1f      	ldr	r2, [pc, #124]	; (80059d0 <LL_USART_Init+0xe8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d102      	bne.n	800595e <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	e021      	b.n	80059a2 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a1c      	ldr	r2, [pc, #112]	; (80059d4 <LL_USART_Init+0xec>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d102      	bne.n	800596c <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	61bb      	str	r3, [r7, #24]
 800596a:	e01a      	b.n	80059a2 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a1a      	ldr	r2, [pc, #104]	; (80059d8 <LL_USART_Init+0xf0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d102      	bne.n	800597a <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	61bb      	str	r3, [r7, #24]
 8005978:	e013      	b.n	80059a2 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a17      	ldr	r2, [pc, #92]	; (80059dc <LL_USART_Init+0xf4>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d102      	bne.n	8005988 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	61bb      	str	r3, [r7, #24]
 8005986:	e00c      	b.n	80059a2 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <LL_USART_Init+0xf8>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d102      	bne.n	8005996 <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	61bb      	str	r3, [r7, #24]
 8005994:	e005      	b.n	80059a2 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a12      	ldr	r2, [pc, #72]	; (80059e4 <LL_USART_Init+0xfc>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d101      	bne.n	80059a2 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00d      	beq.n	80059c4 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d009      	beq.n	80059c4 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80059b0:	2300      	movs	r3, #0
 80059b2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	699a      	ldr	r2, [r3, #24]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	69b9      	ldr	r1, [r7, #24]
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7ff fd66 	bl	8005490 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80059c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3720      	adds	r7, #32
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	40011000 	.word	0x40011000
 80059d4:	40004400 	.word	0x40004400
 80059d8:	40004800 	.word	0x40004800
 80059dc:	40011400 	.word	0x40011400
 80059e0:	40004c00 	.word	0x40004c00
 80059e4:	40005000 	.word	0x40005000

080059e8 <LL_InitTick>:
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fa:	4a07      	ldr	r2, [pc, #28]	; (8005a18 <LL_InitTick+0x30>)
 80059fc:	3b01      	subs	r3, #1
 80059fe:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8005a00:	4b05      	ldr	r3, [pc, #20]	; (8005a18 <LL_InitTick+0x30>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a06:	4b04      	ldr	r3, [pc, #16]	; (8005a18 <LL_InitTick+0x30>)
 8005a08:	2205      	movs	r2, #5
 8005a0a:	601a      	str	r2, [r3, #0]
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	e000e010 	.word	0xe000e010

08005a1c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8005a24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7ff ffdd 	bl	80059e8 <LL_InitTick>
}
 8005a2e:	bf00      	nop
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005a40:	4a04      	ldr	r2, [pc, #16]	; (8005a54 <LL_SetSystemCoreClock+0x1c>)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6013      	str	r3, [r2, #0]
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	20000014 	.word	0x20000014

08005a58 <__errno>:
 8005a58:	4b01      	ldr	r3, [pc, #4]	; (8005a60 <__errno+0x8>)
 8005a5a:	6818      	ldr	r0, [r3, #0]
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	20000018 	.word	0x20000018

08005a64 <__libc_init_array>:
 8005a64:	b570      	push	{r4, r5, r6, lr}
 8005a66:	4d0d      	ldr	r5, [pc, #52]	; (8005a9c <__libc_init_array+0x38>)
 8005a68:	4c0d      	ldr	r4, [pc, #52]	; (8005aa0 <__libc_init_array+0x3c>)
 8005a6a:	1b64      	subs	r4, r4, r5
 8005a6c:	10a4      	asrs	r4, r4, #2
 8005a6e:	2600      	movs	r6, #0
 8005a70:	42a6      	cmp	r6, r4
 8005a72:	d109      	bne.n	8005a88 <__libc_init_array+0x24>
 8005a74:	4d0b      	ldr	r5, [pc, #44]	; (8005aa4 <__libc_init_array+0x40>)
 8005a76:	4c0c      	ldr	r4, [pc, #48]	; (8005aa8 <__libc_init_array+0x44>)
 8005a78:	f003 f8c8 	bl	8008c0c <_init>
 8005a7c:	1b64      	subs	r4, r4, r5
 8005a7e:	10a4      	asrs	r4, r4, #2
 8005a80:	2600      	movs	r6, #0
 8005a82:	42a6      	cmp	r6, r4
 8005a84:	d105      	bne.n	8005a92 <__libc_init_array+0x2e>
 8005a86:	bd70      	pop	{r4, r5, r6, pc}
 8005a88:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a8c:	4798      	blx	r3
 8005a8e:	3601      	adds	r6, #1
 8005a90:	e7ee      	b.n	8005a70 <__libc_init_array+0xc>
 8005a92:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a96:	4798      	blx	r3
 8005a98:	3601      	adds	r6, #1
 8005a9a:	e7f2      	b.n	8005a82 <__libc_init_array+0x1e>
 8005a9c:	080090f4 	.word	0x080090f4
 8005aa0:	080090f4 	.word	0x080090f4
 8005aa4:	080090f4 	.word	0x080090f4
 8005aa8:	080090f8 	.word	0x080090f8

08005aac <memcpy>:
 8005aac:	440a      	add	r2, r1
 8005aae:	4291      	cmp	r1, r2
 8005ab0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005ab4:	d100      	bne.n	8005ab8 <memcpy+0xc>
 8005ab6:	4770      	bx	lr
 8005ab8:	b510      	push	{r4, lr}
 8005aba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005abe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ac2:	4291      	cmp	r1, r2
 8005ac4:	d1f9      	bne.n	8005aba <memcpy+0xe>
 8005ac6:	bd10      	pop	{r4, pc}

08005ac8 <memset>:
 8005ac8:	4402      	add	r2, r0
 8005aca:	4603      	mov	r3, r0
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d100      	bne.n	8005ad2 <memset+0xa>
 8005ad0:	4770      	bx	lr
 8005ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ad6:	e7f9      	b.n	8005acc <memset+0x4>

08005ad8 <__cvt>:
 8005ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005adc:	ec55 4b10 	vmov	r4, r5, d0
 8005ae0:	2d00      	cmp	r5, #0
 8005ae2:	460e      	mov	r6, r1
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	462b      	mov	r3, r5
 8005ae8:	bfbb      	ittet	lt
 8005aea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005aee:	461d      	movlt	r5, r3
 8005af0:	2300      	movge	r3, #0
 8005af2:	232d      	movlt	r3, #45	; 0x2d
 8005af4:	700b      	strb	r3, [r1, #0]
 8005af6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005af8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005afc:	4691      	mov	r9, r2
 8005afe:	f023 0820 	bic.w	r8, r3, #32
 8005b02:	bfbc      	itt	lt
 8005b04:	4622      	movlt	r2, r4
 8005b06:	4614      	movlt	r4, r2
 8005b08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b0c:	d005      	beq.n	8005b1a <__cvt+0x42>
 8005b0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b12:	d100      	bne.n	8005b16 <__cvt+0x3e>
 8005b14:	3601      	adds	r6, #1
 8005b16:	2102      	movs	r1, #2
 8005b18:	e000      	b.n	8005b1c <__cvt+0x44>
 8005b1a:	2103      	movs	r1, #3
 8005b1c:	ab03      	add	r3, sp, #12
 8005b1e:	9301      	str	r3, [sp, #4]
 8005b20:	ab02      	add	r3, sp, #8
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	ec45 4b10 	vmov	d0, r4, r5
 8005b28:	4653      	mov	r3, sl
 8005b2a:	4632      	mov	r2, r6
 8005b2c:	f000 fce4 	bl	80064f8 <_dtoa_r>
 8005b30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b34:	4607      	mov	r7, r0
 8005b36:	d102      	bne.n	8005b3e <__cvt+0x66>
 8005b38:	f019 0f01 	tst.w	r9, #1
 8005b3c:	d022      	beq.n	8005b84 <__cvt+0xac>
 8005b3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b42:	eb07 0906 	add.w	r9, r7, r6
 8005b46:	d110      	bne.n	8005b6a <__cvt+0x92>
 8005b48:	783b      	ldrb	r3, [r7, #0]
 8005b4a:	2b30      	cmp	r3, #48	; 0x30
 8005b4c:	d10a      	bne.n	8005b64 <__cvt+0x8c>
 8005b4e:	2200      	movs	r2, #0
 8005b50:	2300      	movs	r3, #0
 8005b52:	4620      	mov	r0, r4
 8005b54:	4629      	mov	r1, r5
 8005b56:	f7fa ffb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b5a:	b918      	cbnz	r0, 8005b64 <__cvt+0x8c>
 8005b5c:	f1c6 0601 	rsb	r6, r6, #1
 8005b60:	f8ca 6000 	str.w	r6, [sl]
 8005b64:	f8da 3000 	ldr.w	r3, [sl]
 8005b68:	4499      	add	r9, r3
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	4620      	mov	r0, r4
 8005b70:	4629      	mov	r1, r5
 8005b72:	f7fa ffa9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b76:	b108      	cbz	r0, 8005b7c <__cvt+0xa4>
 8005b78:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b7c:	2230      	movs	r2, #48	; 0x30
 8005b7e:	9b03      	ldr	r3, [sp, #12]
 8005b80:	454b      	cmp	r3, r9
 8005b82:	d307      	bcc.n	8005b94 <__cvt+0xbc>
 8005b84:	9b03      	ldr	r3, [sp, #12]
 8005b86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b88:	1bdb      	subs	r3, r3, r7
 8005b8a:	4638      	mov	r0, r7
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	b004      	add	sp, #16
 8005b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b94:	1c59      	adds	r1, r3, #1
 8005b96:	9103      	str	r1, [sp, #12]
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	e7f0      	b.n	8005b7e <__cvt+0xa6>

08005b9c <__exponent>:
 8005b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2900      	cmp	r1, #0
 8005ba2:	bfb8      	it	lt
 8005ba4:	4249      	neglt	r1, r1
 8005ba6:	f803 2b02 	strb.w	r2, [r3], #2
 8005baa:	bfb4      	ite	lt
 8005bac:	222d      	movlt	r2, #45	; 0x2d
 8005bae:	222b      	movge	r2, #43	; 0x2b
 8005bb0:	2909      	cmp	r1, #9
 8005bb2:	7042      	strb	r2, [r0, #1]
 8005bb4:	dd2a      	ble.n	8005c0c <__exponent+0x70>
 8005bb6:	f10d 0407 	add.w	r4, sp, #7
 8005bba:	46a4      	mov	ip, r4
 8005bbc:	270a      	movs	r7, #10
 8005bbe:	46a6      	mov	lr, r4
 8005bc0:	460a      	mov	r2, r1
 8005bc2:	fb91 f6f7 	sdiv	r6, r1, r7
 8005bc6:	fb07 1516 	mls	r5, r7, r6, r1
 8005bca:	3530      	adds	r5, #48	; 0x30
 8005bcc:	2a63      	cmp	r2, #99	; 0x63
 8005bce:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005bd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	dcf1      	bgt.n	8005bbe <__exponent+0x22>
 8005bda:	3130      	adds	r1, #48	; 0x30
 8005bdc:	f1ae 0502 	sub.w	r5, lr, #2
 8005be0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005be4:	1c44      	adds	r4, r0, #1
 8005be6:	4629      	mov	r1, r5
 8005be8:	4561      	cmp	r1, ip
 8005bea:	d30a      	bcc.n	8005c02 <__exponent+0x66>
 8005bec:	f10d 0209 	add.w	r2, sp, #9
 8005bf0:	eba2 020e 	sub.w	r2, r2, lr
 8005bf4:	4565      	cmp	r5, ip
 8005bf6:	bf88      	it	hi
 8005bf8:	2200      	movhi	r2, #0
 8005bfa:	4413      	add	r3, r2
 8005bfc:	1a18      	subs	r0, r3, r0
 8005bfe:	b003      	add	sp, #12
 8005c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c06:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c0a:	e7ed      	b.n	8005be8 <__exponent+0x4c>
 8005c0c:	2330      	movs	r3, #48	; 0x30
 8005c0e:	3130      	adds	r1, #48	; 0x30
 8005c10:	7083      	strb	r3, [r0, #2]
 8005c12:	70c1      	strb	r1, [r0, #3]
 8005c14:	1d03      	adds	r3, r0, #4
 8005c16:	e7f1      	b.n	8005bfc <__exponent+0x60>

08005c18 <_printf_float>:
 8005c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1c:	ed2d 8b02 	vpush	{d8}
 8005c20:	b08d      	sub	sp, #52	; 0x34
 8005c22:	460c      	mov	r4, r1
 8005c24:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005c28:	4616      	mov	r6, r2
 8005c2a:	461f      	mov	r7, r3
 8005c2c:	4605      	mov	r5, r0
 8005c2e:	f001 fb47 	bl	80072c0 <_localeconv_r>
 8005c32:	f8d0 a000 	ldr.w	sl, [r0]
 8005c36:	4650      	mov	r0, sl
 8005c38:	f7fa faca 	bl	80001d0 <strlen>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	930a      	str	r3, [sp, #40]	; 0x28
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	9305      	str	r3, [sp, #20]
 8005c44:	f8d8 3000 	ldr.w	r3, [r8]
 8005c48:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005c4c:	3307      	adds	r3, #7
 8005c4e:	f023 0307 	bic.w	r3, r3, #7
 8005c52:	f103 0208 	add.w	r2, r3, #8
 8005c56:	f8c8 2000 	str.w	r2, [r8]
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c62:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005c66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c6a:	9307      	str	r3, [sp, #28]
 8005c6c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c70:	ee08 0a10 	vmov	s16, r0
 8005c74:	4b9f      	ldr	r3, [pc, #636]	; (8005ef4 <_printf_float+0x2dc>)
 8005c76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c7e:	f7fa ff55 	bl	8000b2c <__aeabi_dcmpun>
 8005c82:	bb88      	cbnz	r0, 8005ce8 <_printf_float+0xd0>
 8005c84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c88:	4b9a      	ldr	r3, [pc, #616]	; (8005ef4 <_printf_float+0x2dc>)
 8005c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c8e:	f7fa ff2f 	bl	8000af0 <__aeabi_dcmple>
 8005c92:	bb48      	cbnz	r0, 8005ce8 <_printf_float+0xd0>
 8005c94:	2200      	movs	r2, #0
 8005c96:	2300      	movs	r3, #0
 8005c98:	4640      	mov	r0, r8
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	f7fa ff1e 	bl	8000adc <__aeabi_dcmplt>
 8005ca0:	b110      	cbz	r0, 8005ca8 <_printf_float+0x90>
 8005ca2:	232d      	movs	r3, #45	; 0x2d
 8005ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ca8:	4b93      	ldr	r3, [pc, #588]	; (8005ef8 <_printf_float+0x2e0>)
 8005caa:	4894      	ldr	r0, [pc, #592]	; (8005efc <_printf_float+0x2e4>)
 8005cac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005cb0:	bf94      	ite	ls
 8005cb2:	4698      	movls	r8, r3
 8005cb4:	4680      	movhi	r8, r0
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	6123      	str	r3, [r4, #16]
 8005cba:	9b05      	ldr	r3, [sp, #20]
 8005cbc:	f023 0204 	bic.w	r2, r3, #4
 8005cc0:	6022      	str	r2, [r4, #0]
 8005cc2:	f04f 0900 	mov.w	r9, #0
 8005cc6:	9700      	str	r7, [sp, #0]
 8005cc8:	4633      	mov	r3, r6
 8005cca:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ccc:	4621      	mov	r1, r4
 8005cce:	4628      	mov	r0, r5
 8005cd0:	f000 f9d8 	bl	8006084 <_printf_common>
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	f040 8090 	bne.w	8005dfa <_printf_float+0x1e2>
 8005cda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cde:	b00d      	add	sp, #52	; 0x34
 8005ce0:	ecbd 8b02 	vpop	{d8}
 8005ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce8:	4642      	mov	r2, r8
 8005cea:	464b      	mov	r3, r9
 8005cec:	4640      	mov	r0, r8
 8005cee:	4649      	mov	r1, r9
 8005cf0:	f7fa ff1c 	bl	8000b2c <__aeabi_dcmpun>
 8005cf4:	b140      	cbz	r0, 8005d08 <_printf_float+0xf0>
 8005cf6:	464b      	mov	r3, r9
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	bfbc      	itt	lt
 8005cfc:	232d      	movlt	r3, #45	; 0x2d
 8005cfe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d02:	487f      	ldr	r0, [pc, #508]	; (8005f00 <_printf_float+0x2e8>)
 8005d04:	4b7f      	ldr	r3, [pc, #508]	; (8005f04 <_printf_float+0x2ec>)
 8005d06:	e7d1      	b.n	8005cac <_printf_float+0x94>
 8005d08:	6863      	ldr	r3, [r4, #4]
 8005d0a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005d0e:	9206      	str	r2, [sp, #24]
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	d13f      	bne.n	8005d94 <_printf_float+0x17c>
 8005d14:	2306      	movs	r3, #6
 8005d16:	6063      	str	r3, [r4, #4]
 8005d18:	9b05      	ldr	r3, [sp, #20]
 8005d1a:	6861      	ldr	r1, [r4, #4]
 8005d1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005d20:	2300      	movs	r3, #0
 8005d22:	9303      	str	r3, [sp, #12]
 8005d24:	ab0a      	add	r3, sp, #40	; 0x28
 8005d26:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005d2a:	ab09      	add	r3, sp, #36	; 0x24
 8005d2c:	ec49 8b10 	vmov	d0, r8, r9
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	6022      	str	r2, [r4, #0]
 8005d34:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d38:	4628      	mov	r0, r5
 8005d3a:	f7ff fecd 	bl	8005ad8 <__cvt>
 8005d3e:	9b06      	ldr	r3, [sp, #24]
 8005d40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d42:	2b47      	cmp	r3, #71	; 0x47
 8005d44:	4680      	mov	r8, r0
 8005d46:	d108      	bne.n	8005d5a <_printf_float+0x142>
 8005d48:	1cc8      	adds	r0, r1, #3
 8005d4a:	db02      	blt.n	8005d52 <_printf_float+0x13a>
 8005d4c:	6863      	ldr	r3, [r4, #4]
 8005d4e:	4299      	cmp	r1, r3
 8005d50:	dd41      	ble.n	8005dd6 <_printf_float+0x1be>
 8005d52:	f1ab 0b02 	sub.w	fp, fp, #2
 8005d56:	fa5f fb8b 	uxtb.w	fp, fp
 8005d5a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d5e:	d820      	bhi.n	8005da2 <_printf_float+0x18a>
 8005d60:	3901      	subs	r1, #1
 8005d62:	465a      	mov	r2, fp
 8005d64:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d68:	9109      	str	r1, [sp, #36]	; 0x24
 8005d6a:	f7ff ff17 	bl	8005b9c <__exponent>
 8005d6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d70:	1813      	adds	r3, r2, r0
 8005d72:	2a01      	cmp	r2, #1
 8005d74:	4681      	mov	r9, r0
 8005d76:	6123      	str	r3, [r4, #16]
 8005d78:	dc02      	bgt.n	8005d80 <_printf_float+0x168>
 8005d7a:	6822      	ldr	r2, [r4, #0]
 8005d7c:	07d2      	lsls	r2, r2, #31
 8005d7e:	d501      	bpl.n	8005d84 <_printf_float+0x16c>
 8005d80:	3301      	adds	r3, #1
 8005d82:	6123      	str	r3, [r4, #16]
 8005d84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d09c      	beq.n	8005cc6 <_printf_float+0xae>
 8005d8c:	232d      	movs	r3, #45	; 0x2d
 8005d8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d92:	e798      	b.n	8005cc6 <_printf_float+0xae>
 8005d94:	9a06      	ldr	r2, [sp, #24]
 8005d96:	2a47      	cmp	r2, #71	; 0x47
 8005d98:	d1be      	bne.n	8005d18 <_printf_float+0x100>
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1bc      	bne.n	8005d18 <_printf_float+0x100>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e7b9      	b.n	8005d16 <_printf_float+0xfe>
 8005da2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005da6:	d118      	bne.n	8005dda <_printf_float+0x1c2>
 8005da8:	2900      	cmp	r1, #0
 8005daa:	6863      	ldr	r3, [r4, #4]
 8005dac:	dd0b      	ble.n	8005dc6 <_printf_float+0x1ae>
 8005dae:	6121      	str	r1, [r4, #16]
 8005db0:	b913      	cbnz	r3, 8005db8 <_printf_float+0x1a0>
 8005db2:	6822      	ldr	r2, [r4, #0]
 8005db4:	07d0      	lsls	r0, r2, #31
 8005db6:	d502      	bpl.n	8005dbe <_printf_float+0x1a6>
 8005db8:	3301      	adds	r3, #1
 8005dba:	440b      	add	r3, r1
 8005dbc:	6123      	str	r3, [r4, #16]
 8005dbe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005dc0:	f04f 0900 	mov.w	r9, #0
 8005dc4:	e7de      	b.n	8005d84 <_printf_float+0x16c>
 8005dc6:	b913      	cbnz	r3, 8005dce <_printf_float+0x1b6>
 8005dc8:	6822      	ldr	r2, [r4, #0]
 8005dca:	07d2      	lsls	r2, r2, #31
 8005dcc:	d501      	bpl.n	8005dd2 <_printf_float+0x1ba>
 8005dce:	3302      	adds	r3, #2
 8005dd0:	e7f4      	b.n	8005dbc <_printf_float+0x1a4>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e7f2      	b.n	8005dbc <_printf_float+0x1a4>
 8005dd6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ddc:	4299      	cmp	r1, r3
 8005dde:	db05      	blt.n	8005dec <_printf_float+0x1d4>
 8005de0:	6823      	ldr	r3, [r4, #0]
 8005de2:	6121      	str	r1, [r4, #16]
 8005de4:	07d8      	lsls	r0, r3, #31
 8005de6:	d5ea      	bpl.n	8005dbe <_printf_float+0x1a6>
 8005de8:	1c4b      	adds	r3, r1, #1
 8005dea:	e7e7      	b.n	8005dbc <_printf_float+0x1a4>
 8005dec:	2900      	cmp	r1, #0
 8005dee:	bfd4      	ite	le
 8005df0:	f1c1 0202 	rsble	r2, r1, #2
 8005df4:	2201      	movgt	r2, #1
 8005df6:	4413      	add	r3, r2
 8005df8:	e7e0      	b.n	8005dbc <_printf_float+0x1a4>
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	055a      	lsls	r2, r3, #21
 8005dfe:	d407      	bmi.n	8005e10 <_printf_float+0x1f8>
 8005e00:	6923      	ldr	r3, [r4, #16]
 8005e02:	4642      	mov	r2, r8
 8005e04:	4631      	mov	r1, r6
 8005e06:	4628      	mov	r0, r5
 8005e08:	47b8      	blx	r7
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	d12c      	bne.n	8005e68 <_printf_float+0x250>
 8005e0e:	e764      	b.n	8005cda <_printf_float+0xc2>
 8005e10:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e14:	f240 80e0 	bls.w	8005fd8 <_printf_float+0x3c0>
 8005e18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	2300      	movs	r3, #0
 8005e20:	f7fa fe52 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	d034      	beq.n	8005e92 <_printf_float+0x27a>
 8005e28:	4a37      	ldr	r2, [pc, #220]	; (8005f08 <_printf_float+0x2f0>)
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	4631      	mov	r1, r6
 8005e2e:	4628      	mov	r0, r5
 8005e30:	47b8      	blx	r7
 8005e32:	3001      	adds	r0, #1
 8005e34:	f43f af51 	beq.w	8005cda <_printf_float+0xc2>
 8005e38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	db02      	blt.n	8005e46 <_printf_float+0x22e>
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	07d8      	lsls	r0, r3, #31
 8005e44:	d510      	bpl.n	8005e68 <_printf_float+0x250>
 8005e46:	ee18 3a10 	vmov	r3, s16
 8005e4a:	4652      	mov	r2, sl
 8005e4c:	4631      	mov	r1, r6
 8005e4e:	4628      	mov	r0, r5
 8005e50:	47b8      	blx	r7
 8005e52:	3001      	adds	r0, #1
 8005e54:	f43f af41 	beq.w	8005cda <_printf_float+0xc2>
 8005e58:	f04f 0800 	mov.w	r8, #0
 8005e5c:	f104 091a 	add.w	r9, r4, #26
 8005e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e62:	3b01      	subs	r3, #1
 8005e64:	4543      	cmp	r3, r8
 8005e66:	dc09      	bgt.n	8005e7c <_printf_float+0x264>
 8005e68:	6823      	ldr	r3, [r4, #0]
 8005e6a:	079b      	lsls	r3, r3, #30
 8005e6c:	f100 8105 	bmi.w	800607a <_printf_float+0x462>
 8005e70:	68e0      	ldr	r0, [r4, #12]
 8005e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e74:	4298      	cmp	r0, r3
 8005e76:	bfb8      	it	lt
 8005e78:	4618      	movlt	r0, r3
 8005e7a:	e730      	b.n	8005cde <_printf_float+0xc6>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	464a      	mov	r2, r9
 8005e80:	4631      	mov	r1, r6
 8005e82:	4628      	mov	r0, r5
 8005e84:	47b8      	blx	r7
 8005e86:	3001      	adds	r0, #1
 8005e88:	f43f af27 	beq.w	8005cda <_printf_float+0xc2>
 8005e8c:	f108 0801 	add.w	r8, r8, #1
 8005e90:	e7e6      	b.n	8005e60 <_printf_float+0x248>
 8005e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	dc39      	bgt.n	8005f0c <_printf_float+0x2f4>
 8005e98:	4a1b      	ldr	r2, [pc, #108]	; (8005f08 <_printf_float+0x2f0>)
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	47b8      	blx	r7
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	f43f af19 	beq.w	8005cda <_printf_float+0xc2>
 8005ea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005eac:	4313      	orrs	r3, r2
 8005eae:	d102      	bne.n	8005eb6 <_printf_float+0x29e>
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	07d9      	lsls	r1, r3, #31
 8005eb4:	d5d8      	bpl.n	8005e68 <_printf_float+0x250>
 8005eb6:	ee18 3a10 	vmov	r3, s16
 8005eba:	4652      	mov	r2, sl
 8005ebc:	4631      	mov	r1, r6
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	47b8      	blx	r7
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	f43f af09 	beq.w	8005cda <_printf_float+0xc2>
 8005ec8:	f04f 0900 	mov.w	r9, #0
 8005ecc:	f104 0a1a 	add.w	sl, r4, #26
 8005ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed2:	425b      	negs	r3, r3
 8005ed4:	454b      	cmp	r3, r9
 8005ed6:	dc01      	bgt.n	8005edc <_printf_float+0x2c4>
 8005ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eda:	e792      	b.n	8005e02 <_printf_float+0x1ea>
 8005edc:	2301      	movs	r3, #1
 8005ede:	4652      	mov	r2, sl
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	47b8      	blx	r7
 8005ee6:	3001      	adds	r0, #1
 8005ee8:	f43f aef7 	beq.w	8005cda <_printf_float+0xc2>
 8005eec:	f109 0901 	add.w	r9, r9, #1
 8005ef0:	e7ee      	b.n	8005ed0 <_printf_float+0x2b8>
 8005ef2:	bf00      	nop
 8005ef4:	7fefffff 	.word	0x7fefffff
 8005ef8:	08008cdc 	.word	0x08008cdc
 8005efc:	08008ce0 	.word	0x08008ce0
 8005f00:	08008ce8 	.word	0x08008ce8
 8005f04:	08008ce4 	.word	0x08008ce4
 8005f08:	08008cec 	.word	0x08008cec
 8005f0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f10:	429a      	cmp	r2, r3
 8005f12:	bfa8      	it	ge
 8005f14:	461a      	movge	r2, r3
 8005f16:	2a00      	cmp	r2, #0
 8005f18:	4691      	mov	r9, r2
 8005f1a:	dc37      	bgt.n	8005f8c <_printf_float+0x374>
 8005f1c:	f04f 0b00 	mov.w	fp, #0
 8005f20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f24:	f104 021a 	add.w	r2, r4, #26
 8005f28:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f2a:	9305      	str	r3, [sp, #20]
 8005f2c:	eba3 0309 	sub.w	r3, r3, r9
 8005f30:	455b      	cmp	r3, fp
 8005f32:	dc33      	bgt.n	8005f9c <_printf_float+0x384>
 8005f34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	db3b      	blt.n	8005fb4 <_printf_float+0x39c>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	07da      	lsls	r2, r3, #31
 8005f40:	d438      	bmi.n	8005fb4 <_printf_float+0x39c>
 8005f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f44:	9a05      	ldr	r2, [sp, #20]
 8005f46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f48:	1a9a      	subs	r2, r3, r2
 8005f4a:	eba3 0901 	sub.w	r9, r3, r1
 8005f4e:	4591      	cmp	r9, r2
 8005f50:	bfa8      	it	ge
 8005f52:	4691      	movge	r9, r2
 8005f54:	f1b9 0f00 	cmp.w	r9, #0
 8005f58:	dc35      	bgt.n	8005fc6 <_printf_float+0x3ae>
 8005f5a:	f04f 0800 	mov.w	r8, #0
 8005f5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f62:	f104 0a1a 	add.w	sl, r4, #26
 8005f66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f6a:	1a9b      	subs	r3, r3, r2
 8005f6c:	eba3 0309 	sub.w	r3, r3, r9
 8005f70:	4543      	cmp	r3, r8
 8005f72:	f77f af79 	ble.w	8005e68 <_printf_float+0x250>
 8005f76:	2301      	movs	r3, #1
 8005f78:	4652      	mov	r2, sl
 8005f7a:	4631      	mov	r1, r6
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	47b8      	blx	r7
 8005f80:	3001      	adds	r0, #1
 8005f82:	f43f aeaa 	beq.w	8005cda <_printf_float+0xc2>
 8005f86:	f108 0801 	add.w	r8, r8, #1
 8005f8a:	e7ec      	b.n	8005f66 <_printf_float+0x34e>
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	4631      	mov	r1, r6
 8005f90:	4642      	mov	r2, r8
 8005f92:	4628      	mov	r0, r5
 8005f94:	47b8      	blx	r7
 8005f96:	3001      	adds	r0, #1
 8005f98:	d1c0      	bne.n	8005f1c <_printf_float+0x304>
 8005f9a:	e69e      	b.n	8005cda <_printf_float+0xc2>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	4631      	mov	r1, r6
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	9205      	str	r2, [sp, #20]
 8005fa4:	47b8      	blx	r7
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	f43f ae97 	beq.w	8005cda <_printf_float+0xc2>
 8005fac:	9a05      	ldr	r2, [sp, #20]
 8005fae:	f10b 0b01 	add.w	fp, fp, #1
 8005fb2:	e7b9      	b.n	8005f28 <_printf_float+0x310>
 8005fb4:	ee18 3a10 	vmov	r3, s16
 8005fb8:	4652      	mov	r2, sl
 8005fba:	4631      	mov	r1, r6
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	47b8      	blx	r7
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	d1be      	bne.n	8005f42 <_printf_float+0x32a>
 8005fc4:	e689      	b.n	8005cda <_printf_float+0xc2>
 8005fc6:	9a05      	ldr	r2, [sp, #20]
 8005fc8:	464b      	mov	r3, r9
 8005fca:	4442      	add	r2, r8
 8005fcc:	4631      	mov	r1, r6
 8005fce:	4628      	mov	r0, r5
 8005fd0:	47b8      	blx	r7
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	d1c1      	bne.n	8005f5a <_printf_float+0x342>
 8005fd6:	e680      	b.n	8005cda <_printf_float+0xc2>
 8005fd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fda:	2a01      	cmp	r2, #1
 8005fdc:	dc01      	bgt.n	8005fe2 <_printf_float+0x3ca>
 8005fde:	07db      	lsls	r3, r3, #31
 8005fe0:	d538      	bpl.n	8006054 <_printf_float+0x43c>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	4642      	mov	r2, r8
 8005fe6:	4631      	mov	r1, r6
 8005fe8:	4628      	mov	r0, r5
 8005fea:	47b8      	blx	r7
 8005fec:	3001      	adds	r0, #1
 8005fee:	f43f ae74 	beq.w	8005cda <_printf_float+0xc2>
 8005ff2:	ee18 3a10 	vmov	r3, s16
 8005ff6:	4652      	mov	r2, sl
 8005ff8:	4631      	mov	r1, r6
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	47b8      	blx	r7
 8005ffe:	3001      	adds	r0, #1
 8006000:	f43f ae6b 	beq.w	8005cda <_printf_float+0xc2>
 8006004:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006008:	2200      	movs	r2, #0
 800600a:	2300      	movs	r3, #0
 800600c:	f7fa fd5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006010:	b9d8      	cbnz	r0, 800604a <_printf_float+0x432>
 8006012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006014:	f108 0201 	add.w	r2, r8, #1
 8006018:	3b01      	subs	r3, #1
 800601a:	4631      	mov	r1, r6
 800601c:	4628      	mov	r0, r5
 800601e:	47b8      	blx	r7
 8006020:	3001      	adds	r0, #1
 8006022:	d10e      	bne.n	8006042 <_printf_float+0x42a>
 8006024:	e659      	b.n	8005cda <_printf_float+0xc2>
 8006026:	2301      	movs	r3, #1
 8006028:	4652      	mov	r2, sl
 800602a:	4631      	mov	r1, r6
 800602c:	4628      	mov	r0, r5
 800602e:	47b8      	blx	r7
 8006030:	3001      	adds	r0, #1
 8006032:	f43f ae52 	beq.w	8005cda <_printf_float+0xc2>
 8006036:	f108 0801 	add.w	r8, r8, #1
 800603a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800603c:	3b01      	subs	r3, #1
 800603e:	4543      	cmp	r3, r8
 8006040:	dcf1      	bgt.n	8006026 <_printf_float+0x40e>
 8006042:	464b      	mov	r3, r9
 8006044:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006048:	e6dc      	b.n	8005e04 <_printf_float+0x1ec>
 800604a:	f04f 0800 	mov.w	r8, #0
 800604e:	f104 0a1a 	add.w	sl, r4, #26
 8006052:	e7f2      	b.n	800603a <_printf_float+0x422>
 8006054:	2301      	movs	r3, #1
 8006056:	4642      	mov	r2, r8
 8006058:	e7df      	b.n	800601a <_printf_float+0x402>
 800605a:	2301      	movs	r3, #1
 800605c:	464a      	mov	r2, r9
 800605e:	4631      	mov	r1, r6
 8006060:	4628      	mov	r0, r5
 8006062:	47b8      	blx	r7
 8006064:	3001      	adds	r0, #1
 8006066:	f43f ae38 	beq.w	8005cda <_printf_float+0xc2>
 800606a:	f108 0801 	add.w	r8, r8, #1
 800606e:	68e3      	ldr	r3, [r4, #12]
 8006070:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006072:	1a5b      	subs	r3, r3, r1
 8006074:	4543      	cmp	r3, r8
 8006076:	dcf0      	bgt.n	800605a <_printf_float+0x442>
 8006078:	e6fa      	b.n	8005e70 <_printf_float+0x258>
 800607a:	f04f 0800 	mov.w	r8, #0
 800607e:	f104 0919 	add.w	r9, r4, #25
 8006082:	e7f4      	b.n	800606e <_printf_float+0x456>

08006084 <_printf_common>:
 8006084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006088:	4616      	mov	r6, r2
 800608a:	4699      	mov	r9, r3
 800608c:	688a      	ldr	r2, [r1, #8]
 800608e:	690b      	ldr	r3, [r1, #16]
 8006090:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006094:	4293      	cmp	r3, r2
 8006096:	bfb8      	it	lt
 8006098:	4613      	movlt	r3, r2
 800609a:	6033      	str	r3, [r6, #0]
 800609c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060a0:	4607      	mov	r7, r0
 80060a2:	460c      	mov	r4, r1
 80060a4:	b10a      	cbz	r2, 80060aa <_printf_common+0x26>
 80060a6:	3301      	adds	r3, #1
 80060a8:	6033      	str	r3, [r6, #0]
 80060aa:	6823      	ldr	r3, [r4, #0]
 80060ac:	0699      	lsls	r1, r3, #26
 80060ae:	bf42      	ittt	mi
 80060b0:	6833      	ldrmi	r3, [r6, #0]
 80060b2:	3302      	addmi	r3, #2
 80060b4:	6033      	strmi	r3, [r6, #0]
 80060b6:	6825      	ldr	r5, [r4, #0]
 80060b8:	f015 0506 	ands.w	r5, r5, #6
 80060bc:	d106      	bne.n	80060cc <_printf_common+0x48>
 80060be:	f104 0a19 	add.w	sl, r4, #25
 80060c2:	68e3      	ldr	r3, [r4, #12]
 80060c4:	6832      	ldr	r2, [r6, #0]
 80060c6:	1a9b      	subs	r3, r3, r2
 80060c8:	42ab      	cmp	r3, r5
 80060ca:	dc26      	bgt.n	800611a <_printf_common+0x96>
 80060cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060d0:	1e13      	subs	r3, r2, #0
 80060d2:	6822      	ldr	r2, [r4, #0]
 80060d4:	bf18      	it	ne
 80060d6:	2301      	movne	r3, #1
 80060d8:	0692      	lsls	r2, r2, #26
 80060da:	d42b      	bmi.n	8006134 <_printf_common+0xb0>
 80060dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060e0:	4649      	mov	r1, r9
 80060e2:	4638      	mov	r0, r7
 80060e4:	47c0      	blx	r8
 80060e6:	3001      	adds	r0, #1
 80060e8:	d01e      	beq.n	8006128 <_printf_common+0xa4>
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	68e5      	ldr	r5, [r4, #12]
 80060ee:	6832      	ldr	r2, [r6, #0]
 80060f0:	f003 0306 	and.w	r3, r3, #6
 80060f4:	2b04      	cmp	r3, #4
 80060f6:	bf08      	it	eq
 80060f8:	1aad      	subeq	r5, r5, r2
 80060fa:	68a3      	ldr	r3, [r4, #8]
 80060fc:	6922      	ldr	r2, [r4, #16]
 80060fe:	bf0c      	ite	eq
 8006100:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006104:	2500      	movne	r5, #0
 8006106:	4293      	cmp	r3, r2
 8006108:	bfc4      	itt	gt
 800610a:	1a9b      	subgt	r3, r3, r2
 800610c:	18ed      	addgt	r5, r5, r3
 800610e:	2600      	movs	r6, #0
 8006110:	341a      	adds	r4, #26
 8006112:	42b5      	cmp	r5, r6
 8006114:	d11a      	bne.n	800614c <_printf_common+0xc8>
 8006116:	2000      	movs	r0, #0
 8006118:	e008      	b.n	800612c <_printf_common+0xa8>
 800611a:	2301      	movs	r3, #1
 800611c:	4652      	mov	r2, sl
 800611e:	4649      	mov	r1, r9
 8006120:	4638      	mov	r0, r7
 8006122:	47c0      	blx	r8
 8006124:	3001      	adds	r0, #1
 8006126:	d103      	bne.n	8006130 <_printf_common+0xac>
 8006128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800612c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006130:	3501      	adds	r5, #1
 8006132:	e7c6      	b.n	80060c2 <_printf_common+0x3e>
 8006134:	18e1      	adds	r1, r4, r3
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	2030      	movs	r0, #48	; 0x30
 800613a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800613e:	4422      	add	r2, r4
 8006140:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006144:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006148:	3302      	adds	r3, #2
 800614a:	e7c7      	b.n	80060dc <_printf_common+0x58>
 800614c:	2301      	movs	r3, #1
 800614e:	4622      	mov	r2, r4
 8006150:	4649      	mov	r1, r9
 8006152:	4638      	mov	r0, r7
 8006154:	47c0      	blx	r8
 8006156:	3001      	adds	r0, #1
 8006158:	d0e6      	beq.n	8006128 <_printf_common+0xa4>
 800615a:	3601      	adds	r6, #1
 800615c:	e7d9      	b.n	8006112 <_printf_common+0x8e>
	...

08006160 <_printf_i>:
 8006160:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006164:	7e0f      	ldrb	r7, [r1, #24]
 8006166:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006168:	2f78      	cmp	r7, #120	; 0x78
 800616a:	4691      	mov	r9, r2
 800616c:	4680      	mov	r8, r0
 800616e:	460c      	mov	r4, r1
 8006170:	469a      	mov	sl, r3
 8006172:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006176:	d807      	bhi.n	8006188 <_printf_i+0x28>
 8006178:	2f62      	cmp	r7, #98	; 0x62
 800617a:	d80a      	bhi.n	8006192 <_printf_i+0x32>
 800617c:	2f00      	cmp	r7, #0
 800617e:	f000 80d8 	beq.w	8006332 <_printf_i+0x1d2>
 8006182:	2f58      	cmp	r7, #88	; 0x58
 8006184:	f000 80a3 	beq.w	80062ce <_printf_i+0x16e>
 8006188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800618c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006190:	e03a      	b.n	8006208 <_printf_i+0xa8>
 8006192:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006196:	2b15      	cmp	r3, #21
 8006198:	d8f6      	bhi.n	8006188 <_printf_i+0x28>
 800619a:	a101      	add	r1, pc, #4	; (adr r1, 80061a0 <_printf_i+0x40>)
 800619c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061a0:	080061f9 	.word	0x080061f9
 80061a4:	0800620d 	.word	0x0800620d
 80061a8:	08006189 	.word	0x08006189
 80061ac:	08006189 	.word	0x08006189
 80061b0:	08006189 	.word	0x08006189
 80061b4:	08006189 	.word	0x08006189
 80061b8:	0800620d 	.word	0x0800620d
 80061bc:	08006189 	.word	0x08006189
 80061c0:	08006189 	.word	0x08006189
 80061c4:	08006189 	.word	0x08006189
 80061c8:	08006189 	.word	0x08006189
 80061cc:	08006319 	.word	0x08006319
 80061d0:	0800623d 	.word	0x0800623d
 80061d4:	080062fb 	.word	0x080062fb
 80061d8:	08006189 	.word	0x08006189
 80061dc:	08006189 	.word	0x08006189
 80061e0:	0800633b 	.word	0x0800633b
 80061e4:	08006189 	.word	0x08006189
 80061e8:	0800623d 	.word	0x0800623d
 80061ec:	08006189 	.word	0x08006189
 80061f0:	08006189 	.word	0x08006189
 80061f4:	08006303 	.word	0x08006303
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	1d1a      	adds	r2, r3, #4
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	602a      	str	r2, [r5, #0]
 8006200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006204:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006208:	2301      	movs	r3, #1
 800620a:	e0a3      	b.n	8006354 <_printf_i+0x1f4>
 800620c:	6820      	ldr	r0, [r4, #0]
 800620e:	6829      	ldr	r1, [r5, #0]
 8006210:	0606      	lsls	r6, r0, #24
 8006212:	f101 0304 	add.w	r3, r1, #4
 8006216:	d50a      	bpl.n	800622e <_printf_i+0xce>
 8006218:	680e      	ldr	r6, [r1, #0]
 800621a:	602b      	str	r3, [r5, #0]
 800621c:	2e00      	cmp	r6, #0
 800621e:	da03      	bge.n	8006228 <_printf_i+0xc8>
 8006220:	232d      	movs	r3, #45	; 0x2d
 8006222:	4276      	negs	r6, r6
 8006224:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006228:	485e      	ldr	r0, [pc, #376]	; (80063a4 <_printf_i+0x244>)
 800622a:	230a      	movs	r3, #10
 800622c:	e019      	b.n	8006262 <_printf_i+0x102>
 800622e:	680e      	ldr	r6, [r1, #0]
 8006230:	602b      	str	r3, [r5, #0]
 8006232:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006236:	bf18      	it	ne
 8006238:	b236      	sxthne	r6, r6
 800623a:	e7ef      	b.n	800621c <_printf_i+0xbc>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	6820      	ldr	r0, [r4, #0]
 8006240:	1d19      	adds	r1, r3, #4
 8006242:	6029      	str	r1, [r5, #0]
 8006244:	0601      	lsls	r1, r0, #24
 8006246:	d501      	bpl.n	800624c <_printf_i+0xec>
 8006248:	681e      	ldr	r6, [r3, #0]
 800624a:	e002      	b.n	8006252 <_printf_i+0xf2>
 800624c:	0646      	lsls	r6, r0, #25
 800624e:	d5fb      	bpl.n	8006248 <_printf_i+0xe8>
 8006250:	881e      	ldrh	r6, [r3, #0]
 8006252:	4854      	ldr	r0, [pc, #336]	; (80063a4 <_printf_i+0x244>)
 8006254:	2f6f      	cmp	r7, #111	; 0x6f
 8006256:	bf0c      	ite	eq
 8006258:	2308      	moveq	r3, #8
 800625a:	230a      	movne	r3, #10
 800625c:	2100      	movs	r1, #0
 800625e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006262:	6865      	ldr	r5, [r4, #4]
 8006264:	60a5      	str	r5, [r4, #8]
 8006266:	2d00      	cmp	r5, #0
 8006268:	bfa2      	ittt	ge
 800626a:	6821      	ldrge	r1, [r4, #0]
 800626c:	f021 0104 	bicge.w	r1, r1, #4
 8006270:	6021      	strge	r1, [r4, #0]
 8006272:	b90e      	cbnz	r6, 8006278 <_printf_i+0x118>
 8006274:	2d00      	cmp	r5, #0
 8006276:	d04d      	beq.n	8006314 <_printf_i+0x1b4>
 8006278:	4615      	mov	r5, r2
 800627a:	fbb6 f1f3 	udiv	r1, r6, r3
 800627e:	fb03 6711 	mls	r7, r3, r1, r6
 8006282:	5dc7      	ldrb	r7, [r0, r7]
 8006284:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006288:	4637      	mov	r7, r6
 800628a:	42bb      	cmp	r3, r7
 800628c:	460e      	mov	r6, r1
 800628e:	d9f4      	bls.n	800627a <_printf_i+0x11a>
 8006290:	2b08      	cmp	r3, #8
 8006292:	d10b      	bne.n	80062ac <_printf_i+0x14c>
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	07de      	lsls	r6, r3, #31
 8006298:	d508      	bpl.n	80062ac <_printf_i+0x14c>
 800629a:	6923      	ldr	r3, [r4, #16]
 800629c:	6861      	ldr	r1, [r4, #4]
 800629e:	4299      	cmp	r1, r3
 80062a0:	bfde      	ittt	le
 80062a2:	2330      	movle	r3, #48	; 0x30
 80062a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062a8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80062ac:	1b52      	subs	r2, r2, r5
 80062ae:	6122      	str	r2, [r4, #16]
 80062b0:	f8cd a000 	str.w	sl, [sp]
 80062b4:	464b      	mov	r3, r9
 80062b6:	aa03      	add	r2, sp, #12
 80062b8:	4621      	mov	r1, r4
 80062ba:	4640      	mov	r0, r8
 80062bc:	f7ff fee2 	bl	8006084 <_printf_common>
 80062c0:	3001      	adds	r0, #1
 80062c2:	d14c      	bne.n	800635e <_printf_i+0x1fe>
 80062c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062c8:	b004      	add	sp, #16
 80062ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ce:	4835      	ldr	r0, [pc, #212]	; (80063a4 <_printf_i+0x244>)
 80062d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062d4:	6829      	ldr	r1, [r5, #0]
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80062dc:	6029      	str	r1, [r5, #0]
 80062de:	061d      	lsls	r5, r3, #24
 80062e0:	d514      	bpl.n	800630c <_printf_i+0x1ac>
 80062e2:	07df      	lsls	r7, r3, #31
 80062e4:	bf44      	itt	mi
 80062e6:	f043 0320 	orrmi.w	r3, r3, #32
 80062ea:	6023      	strmi	r3, [r4, #0]
 80062ec:	b91e      	cbnz	r6, 80062f6 <_printf_i+0x196>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	f023 0320 	bic.w	r3, r3, #32
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	2310      	movs	r3, #16
 80062f8:	e7b0      	b.n	800625c <_printf_i+0xfc>
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	f043 0320 	orr.w	r3, r3, #32
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	2378      	movs	r3, #120	; 0x78
 8006304:	4828      	ldr	r0, [pc, #160]	; (80063a8 <_printf_i+0x248>)
 8006306:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800630a:	e7e3      	b.n	80062d4 <_printf_i+0x174>
 800630c:	0659      	lsls	r1, r3, #25
 800630e:	bf48      	it	mi
 8006310:	b2b6      	uxthmi	r6, r6
 8006312:	e7e6      	b.n	80062e2 <_printf_i+0x182>
 8006314:	4615      	mov	r5, r2
 8006316:	e7bb      	b.n	8006290 <_printf_i+0x130>
 8006318:	682b      	ldr	r3, [r5, #0]
 800631a:	6826      	ldr	r6, [r4, #0]
 800631c:	6961      	ldr	r1, [r4, #20]
 800631e:	1d18      	adds	r0, r3, #4
 8006320:	6028      	str	r0, [r5, #0]
 8006322:	0635      	lsls	r5, r6, #24
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	d501      	bpl.n	800632c <_printf_i+0x1cc>
 8006328:	6019      	str	r1, [r3, #0]
 800632a:	e002      	b.n	8006332 <_printf_i+0x1d2>
 800632c:	0670      	lsls	r0, r6, #25
 800632e:	d5fb      	bpl.n	8006328 <_printf_i+0x1c8>
 8006330:	8019      	strh	r1, [r3, #0]
 8006332:	2300      	movs	r3, #0
 8006334:	6123      	str	r3, [r4, #16]
 8006336:	4615      	mov	r5, r2
 8006338:	e7ba      	b.n	80062b0 <_printf_i+0x150>
 800633a:	682b      	ldr	r3, [r5, #0]
 800633c:	1d1a      	adds	r2, r3, #4
 800633e:	602a      	str	r2, [r5, #0]
 8006340:	681d      	ldr	r5, [r3, #0]
 8006342:	6862      	ldr	r2, [r4, #4]
 8006344:	2100      	movs	r1, #0
 8006346:	4628      	mov	r0, r5
 8006348:	f7f9 ff4a 	bl	80001e0 <memchr>
 800634c:	b108      	cbz	r0, 8006352 <_printf_i+0x1f2>
 800634e:	1b40      	subs	r0, r0, r5
 8006350:	6060      	str	r0, [r4, #4]
 8006352:	6863      	ldr	r3, [r4, #4]
 8006354:	6123      	str	r3, [r4, #16]
 8006356:	2300      	movs	r3, #0
 8006358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800635c:	e7a8      	b.n	80062b0 <_printf_i+0x150>
 800635e:	6923      	ldr	r3, [r4, #16]
 8006360:	462a      	mov	r2, r5
 8006362:	4649      	mov	r1, r9
 8006364:	4640      	mov	r0, r8
 8006366:	47d0      	blx	sl
 8006368:	3001      	adds	r0, #1
 800636a:	d0ab      	beq.n	80062c4 <_printf_i+0x164>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	079b      	lsls	r3, r3, #30
 8006370:	d413      	bmi.n	800639a <_printf_i+0x23a>
 8006372:	68e0      	ldr	r0, [r4, #12]
 8006374:	9b03      	ldr	r3, [sp, #12]
 8006376:	4298      	cmp	r0, r3
 8006378:	bfb8      	it	lt
 800637a:	4618      	movlt	r0, r3
 800637c:	e7a4      	b.n	80062c8 <_printf_i+0x168>
 800637e:	2301      	movs	r3, #1
 8006380:	4632      	mov	r2, r6
 8006382:	4649      	mov	r1, r9
 8006384:	4640      	mov	r0, r8
 8006386:	47d0      	blx	sl
 8006388:	3001      	adds	r0, #1
 800638a:	d09b      	beq.n	80062c4 <_printf_i+0x164>
 800638c:	3501      	adds	r5, #1
 800638e:	68e3      	ldr	r3, [r4, #12]
 8006390:	9903      	ldr	r1, [sp, #12]
 8006392:	1a5b      	subs	r3, r3, r1
 8006394:	42ab      	cmp	r3, r5
 8006396:	dcf2      	bgt.n	800637e <_printf_i+0x21e>
 8006398:	e7eb      	b.n	8006372 <_printf_i+0x212>
 800639a:	2500      	movs	r5, #0
 800639c:	f104 0619 	add.w	r6, r4, #25
 80063a0:	e7f5      	b.n	800638e <_printf_i+0x22e>
 80063a2:	bf00      	nop
 80063a4:	08008cee 	.word	0x08008cee
 80063a8:	08008cff 	.word	0x08008cff

080063ac <iprintf>:
 80063ac:	b40f      	push	{r0, r1, r2, r3}
 80063ae:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <iprintf+0x2c>)
 80063b0:	b513      	push	{r0, r1, r4, lr}
 80063b2:	681c      	ldr	r4, [r3, #0]
 80063b4:	b124      	cbz	r4, 80063c0 <iprintf+0x14>
 80063b6:	69a3      	ldr	r3, [r4, #24]
 80063b8:	b913      	cbnz	r3, 80063c0 <iprintf+0x14>
 80063ba:	4620      	mov	r0, r4
 80063bc:	f000 fee2 	bl	8007184 <__sinit>
 80063c0:	ab05      	add	r3, sp, #20
 80063c2:	9a04      	ldr	r2, [sp, #16]
 80063c4:	68a1      	ldr	r1, [r4, #8]
 80063c6:	9301      	str	r3, [sp, #4]
 80063c8:	4620      	mov	r0, r4
 80063ca:	f001 fc2d 	bl	8007c28 <_vfiprintf_r>
 80063ce:	b002      	add	sp, #8
 80063d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063d4:	b004      	add	sp, #16
 80063d6:	4770      	bx	lr
 80063d8:	20000018 	.word	0x20000018

080063dc <quorem>:
 80063dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e0:	6903      	ldr	r3, [r0, #16]
 80063e2:	690c      	ldr	r4, [r1, #16]
 80063e4:	42a3      	cmp	r3, r4
 80063e6:	4607      	mov	r7, r0
 80063e8:	f2c0 8081 	blt.w	80064ee <quorem+0x112>
 80063ec:	3c01      	subs	r4, #1
 80063ee:	f101 0814 	add.w	r8, r1, #20
 80063f2:	f100 0514 	add.w	r5, r0, #20
 80063f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063fa:	9301      	str	r3, [sp, #4]
 80063fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006400:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006404:	3301      	adds	r3, #1
 8006406:	429a      	cmp	r2, r3
 8006408:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800640c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006410:	fbb2 f6f3 	udiv	r6, r2, r3
 8006414:	d331      	bcc.n	800647a <quorem+0x9e>
 8006416:	f04f 0e00 	mov.w	lr, #0
 800641a:	4640      	mov	r0, r8
 800641c:	46ac      	mov	ip, r5
 800641e:	46f2      	mov	sl, lr
 8006420:	f850 2b04 	ldr.w	r2, [r0], #4
 8006424:	b293      	uxth	r3, r2
 8006426:	fb06 e303 	mla	r3, r6, r3, lr
 800642a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800642e:	b29b      	uxth	r3, r3
 8006430:	ebaa 0303 	sub.w	r3, sl, r3
 8006434:	f8dc a000 	ldr.w	sl, [ip]
 8006438:	0c12      	lsrs	r2, r2, #16
 800643a:	fa13 f38a 	uxtah	r3, r3, sl
 800643e:	fb06 e202 	mla	r2, r6, r2, lr
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	9b00      	ldr	r3, [sp, #0]
 8006446:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800644a:	b292      	uxth	r2, r2
 800644c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006450:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006454:	f8bd 3000 	ldrh.w	r3, [sp]
 8006458:	4581      	cmp	r9, r0
 800645a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800645e:	f84c 3b04 	str.w	r3, [ip], #4
 8006462:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006466:	d2db      	bcs.n	8006420 <quorem+0x44>
 8006468:	f855 300b 	ldr.w	r3, [r5, fp]
 800646c:	b92b      	cbnz	r3, 800647a <quorem+0x9e>
 800646e:	9b01      	ldr	r3, [sp, #4]
 8006470:	3b04      	subs	r3, #4
 8006472:	429d      	cmp	r5, r3
 8006474:	461a      	mov	r2, r3
 8006476:	d32e      	bcc.n	80064d6 <quorem+0xfa>
 8006478:	613c      	str	r4, [r7, #16]
 800647a:	4638      	mov	r0, r7
 800647c:	f001 f9b2 	bl	80077e4 <__mcmp>
 8006480:	2800      	cmp	r0, #0
 8006482:	db24      	blt.n	80064ce <quorem+0xf2>
 8006484:	3601      	adds	r6, #1
 8006486:	4628      	mov	r0, r5
 8006488:	f04f 0c00 	mov.w	ip, #0
 800648c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006490:	f8d0 e000 	ldr.w	lr, [r0]
 8006494:	b293      	uxth	r3, r2
 8006496:	ebac 0303 	sub.w	r3, ip, r3
 800649a:	0c12      	lsrs	r2, r2, #16
 800649c:	fa13 f38e 	uxtah	r3, r3, lr
 80064a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80064a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064ae:	45c1      	cmp	r9, r8
 80064b0:	f840 3b04 	str.w	r3, [r0], #4
 80064b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80064b8:	d2e8      	bcs.n	800648c <quorem+0xb0>
 80064ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064c2:	b922      	cbnz	r2, 80064ce <quorem+0xf2>
 80064c4:	3b04      	subs	r3, #4
 80064c6:	429d      	cmp	r5, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	d30a      	bcc.n	80064e2 <quorem+0x106>
 80064cc:	613c      	str	r4, [r7, #16]
 80064ce:	4630      	mov	r0, r6
 80064d0:	b003      	add	sp, #12
 80064d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d6:	6812      	ldr	r2, [r2, #0]
 80064d8:	3b04      	subs	r3, #4
 80064da:	2a00      	cmp	r2, #0
 80064dc:	d1cc      	bne.n	8006478 <quorem+0x9c>
 80064de:	3c01      	subs	r4, #1
 80064e0:	e7c7      	b.n	8006472 <quorem+0x96>
 80064e2:	6812      	ldr	r2, [r2, #0]
 80064e4:	3b04      	subs	r3, #4
 80064e6:	2a00      	cmp	r2, #0
 80064e8:	d1f0      	bne.n	80064cc <quorem+0xf0>
 80064ea:	3c01      	subs	r4, #1
 80064ec:	e7eb      	b.n	80064c6 <quorem+0xea>
 80064ee:	2000      	movs	r0, #0
 80064f0:	e7ee      	b.n	80064d0 <quorem+0xf4>
 80064f2:	0000      	movs	r0, r0
 80064f4:	0000      	movs	r0, r0
	...

080064f8 <_dtoa_r>:
 80064f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fc:	ed2d 8b04 	vpush	{d8-d9}
 8006500:	ec57 6b10 	vmov	r6, r7, d0
 8006504:	b093      	sub	sp, #76	; 0x4c
 8006506:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006508:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800650c:	9106      	str	r1, [sp, #24]
 800650e:	ee10 aa10 	vmov	sl, s0
 8006512:	4604      	mov	r4, r0
 8006514:	9209      	str	r2, [sp, #36]	; 0x24
 8006516:	930c      	str	r3, [sp, #48]	; 0x30
 8006518:	46bb      	mov	fp, r7
 800651a:	b975      	cbnz	r5, 800653a <_dtoa_r+0x42>
 800651c:	2010      	movs	r0, #16
 800651e:	f000 fed7 	bl	80072d0 <malloc>
 8006522:	4602      	mov	r2, r0
 8006524:	6260      	str	r0, [r4, #36]	; 0x24
 8006526:	b920      	cbnz	r0, 8006532 <_dtoa_r+0x3a>
 8006528:	4ba7      	ldr	r3, [pc, #668]	; (80067c8 <_dtoa_r+0x2d0>)
 800652a:	21ea      	movs	r1, #234	; 0xea
 800652c:	48a7      	ldr	r0, [pc, #668]	; (80067cc <_dtoa_r+0x2d4>)
 800652e:	f001 fdd1 	bl	80080d4 <__assert_func>
 8006532:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006536:	6005      	str	r5, [r0, #0]
 8006538:	60c5      	str	r5, [r0, #12]
 800653a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800653c:	6819      	ldr	r1, [r3, #0]
 800653e:	b151      	cbz	r1, 8006556 <_dtoa_r+0x5e>
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	604a      	str	r2, [r1, #4]
 8006544:	2301      	movs	r3, #1
 8006546:	4093      	lsls	r3, r2
 8006548:	608b      	str	r3, [r1, #8]
 800654a:	4620      	mov	r0, r4
 800654c:	f000 ff08 	bl	8007360 <_Bfree>
 8006550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	1e3b      	subs	r3, r7, #0
 8006558:	bfaa      	itet	ge
 800655a:	2300      	movge	r3, #0
 800655c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006560:	f8c8 3000 	strge.w	r3, [r8]
 8006564:	4b9a      	ldr	r3, [pc, #616]	; (80067d0 <_dtoa_r+0x2d8>)
 8006566:	bfbc      	itt	lt
 8006568:	2201      	movlt	r2, #1
 800656a:	f8c8 2000 	strlt.w	r2, [r8]
 800656e:	ea33 030b 	bics.w	r3, r3, fp
 8006572:	d11b      	bne.n	80065ac <_dtoa_r+0xb4>
 8006574:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006576:	f242 730f 	movw	r3, #9999	; 0x270f
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006580:	4333      	orrs	r3, r6
 8006582:	f000 8592 	beq.w	80070aa <_dtoa_r+0xbb2>
 8006586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006588:	b963      	cbnz	r3, 80065a4 <_dtoa_r+0xac>
 800658a:	4b92      	ldr	r3, [pc, #584]	; (80067d4 <_dtoa_r+0x2dc>)
 800658c:	e022      	b.n	80065d4 <_dtoa_r+0xdc>
 800658e:	4b92      	ldr	r3, [pc, #584]	; (80067d8 <_dtoa_r+0x2e0>)
 8006590:	9301      	str	r3, [sp, #4]
 8006592:	3308      	adds	r3, #8
 8006594:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	9801      	ldr	r0, [sp, #4]
 800659a:	b013      	add	sp, #76	; 0x4c
 800659c:	ecbd 8b04 	vpop	{d8-d9}
 80065a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065a4:	4b8b      	ldr	r3, [pc, #556]	; (80067d4 <_dtoa_r+0x2dc>)
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	3303      	adds	r3, #3
 80065aa:	e7f3      	b.n	8006594 <_dtoa_r+0x9c>
 80065ac:	2200      	movs	r2, #0
 80065ae:	2300      	movs	r3, #0
 80065b0:	4650      	mov	r0, sl
 80065b2:	4659      	mov	r1, fp
 80065b4:	f7fa fa88 	bl	8000ac8 <__aeabi_dcmpeq>
 80065b8:	ec4b ab19 	vmov	d9, sl, fp
 80065bc:	4680      	mov	r8, r0
 80065be:	b158      	cbz	r0, 80065d8 <_dtoa_r+0xe0>
 80065c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80065c2:	2301      	movs	r3, #1
 80065c4:	6013      	str	r3, [r2, #0]
 80065c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 856b 	beq.w	80070a4 <_dtoa_r+0xbac>
 80065ce:	4883      	ldr	r0, [pc, #524]	; (80067dc <_dtoa_r+0x2e4>)
 80065d0:	6018      	str	r0, [r3, #0]
 80065d2:	1e43      	subs	r3, r0, #1
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	e7df      	b.n	8006598 <_dtoa_r+0xa0>
 80065d8:	ec4b ab10 	vmov	d0, sl, fp
 80065dc:	aa10      	add	r2, sp, #64	; 0x40
 80065de:	a911      	add	r1, sp, #68	; 0x44
 80065e0:	4620      	mov	r0, r4
 80065e2:	f001 f9a5 	bl	8007930 <__d2b>
 80065e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80065ea:	ee08 0a10 	vmov	s16, r0
 80065ee:	2d00      	cmp	r5, #0
 80065f0:	f000 8084 	beq.w	80066fc <_dtoa_r+0x204>
 80065f4:	ee19 3a90 	vmov	r3, s19
 80065f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006600:	4656      	mov	r6, sl
 8006602:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006606:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800660a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800660e:	4b74      	ldr	r3, [pc, #464]	; (80067e0 <_dtoa_r+0x2e8>)
 8006610:	2200      	movs	r2, #0
 8006612:	4630      	mov	r0, r6
 8006614:	4639      	mov	r1, r7
 8006616:	f7f9 fe37 	bl	8000288 <__aeabi_dsub>
 800661a:	a365      	add	r3, pc, #404	; (adr r3, 80067b0 <_dtoa_r+0x2b8>)
 800661c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006620:	f7f9 ffea 	bl	80005f8 <__aeabi_dmul>
 8006624:	a364      	add	r3, pc, #400	; (adr r3, 80067b8 <_dtoa_r+0x2c0>)
 8006626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662a:	f7f9 fe2f 	bl	800028c <__adddf3>
 800662e:	4606      	mov	r6, r0
 8006630:	4628      	mov	r0, r5
 8006632:	460f      	mov	r7, r1
 8006634:	f7f9 ff76 	bl	8000524 <__aeabi_i2d>
 8006638:	a361      	add	r3, pc, #388	; (adr r3, 80067c0 <_dtoa_r+0x2c8>)
 800663a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663e:	f7f9 ffdb 	bl	80005f8 <__aeabi_dmul>
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	4630      	mov	r0, r6
 8006648:	4639      	mov	r1, r7
 800664a:	f7f9 fe1f 	bl	800028c <__adddf3>
 800664e:	4606      	mov	r6, r0
 8006650:	460f      	mov	r7, r1
 8006652:	f7fa fa81 	bl	8000b58 <__aeabi_d2iz>
 8006656:	2200      	movs	r2, #0
 8006658:	9000      	str	r0, [sp, #0]
 800665a:	2300      	movs	r3, #0
 800665c:	4630      	mov	r0, r6
 800665e:	4639      	mov	r1, r7
 8006660:	f7fa fa3c 	bl	8000adc <__aeabi_dcmplt>
 8006664:	b150      	cbz	r0, 800667c <_dtoa_r+0x184>
 8006666:	9800      	ldr	r0, [sp, #0]
 8006668:	f7f9 ff5c 	bl	8000524 <__aeabi_i2d>
 800666c:	4632      	mov	r2, r6
 800666e:	463b      	mov	r3, r7
 8006670:	f7fa fa2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006674:	b910      	cbnz	r0, 800667c <_dtoa_r+0x184>
 8006676:	9b00      	ldr	r3, [sp, #0]
 8006678:	3b01      	subs	r3, #1
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	9b00      	ldr	r3, [sp, #0]
 800667e:	2b16      	cmp	r3, #22
 8006680:	d85a      	bhi.n	8006738 <_dtoa_r+0x240>
 8006682:	9a00      	ldr	r2, [sp, #0]
 8006684:	4b57      	ldr	r3, [pc, #348]	; (80067e4 <_dtoa_r+0x2ec>)
 8006686:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	ec51 0b19 	vmov	r0, r1, d9
 8006692:	f7fa fa23 	bl	8000adc <__aeabi_dcmplt>
 8006696:	2800      	cmp	r0, #0
 8006698:	d050      	beq.n	800673c <_dtoa_r+0x244>
 800669a:	9b00      	ldr	r3, [sp, #0]
 800669c:	3b01      	subs	r3, #1
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	2300      	movs	r3, #0
 80066a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80066a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066a6:	1b5d      	subs	r5, r3, r5
 80066a8:	1e6b      	subs	r3, r5, #1
 80066aa:	9305      	str	r3, [sp, #20]
 80066ac:	bf45      	ittet	mi
 80066ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80066b2:	9304      	strmi	r3, [sp, #16]
 80066b4:	2300      	movpl	r3, #0
 80066b6:	2300      	movmi	r3, #0
 80066b8:	bf4c      	ite	mi
 80066ba:	9305      	strmi	r3, [sp, #20]
 80066bc:	9304      	strpl	r3, [sp, #16]
 80066be:	9b00      	ldr	r3, [sp, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	db3d      	blt.n	8006740 <_dtoa_r+0x248>
 80066c4:	9b05      	ldr	r3, [sp, #20]
 80066c6:	9a00      	ldr	r2, [sp, #0]
 80066c8:	920a      	str	r2, [sp, #40]	; 0x28
 80066ca:	4413      	add	r3, r2
 80066cc:	9305      	str	r3, [sp, #20]
 80066ce:	2300      	movs	r3, #0
 80066d0:	9307      	str	r3, [sp, #28]
 80066d2:	9b06      	ldr	r3, [sp, #24]
 80066d4:	2b09      	cmp	r3, #9
 80066d6:	f200 8089 	bhi.w	80067ec <_dtoa_r+0x2f4>
 80066da:	2b05      	cmp	r3, #5
 80066dc:	bfc4      	itt	gt
 80066de:	3b04      	subgt	r3, #4
 80066e0:	9306      	strgt	r3, [sp, #24]
 80066e2:	9b06      	ldr	r3, [sp, #24]
 80066e4:	f1a3 0302 	sub.w	r3, r3, #2
 80066e8:	bfcc      	ite	gt
 80066ea:	2500      	movgt	r5, #0
 80066ec:	2501      	movle	r5, #1
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	f200 8087 	bhi.w	8006802 <_dtoa_r+0x30a>
 80066f4:	e8df f003 	tbb	[pc, r3]
 80066f8:	59383a2d 	.word	0x59383a2d
 80066fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006700:	441d      	add	r5, r3
 8006702:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006706:	2b20      	cmp	r3, #32
 8006708:	bfc1      	itttt	gt
 800670a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800670e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006712:	fa0b f303 	lslgt.w	r3, fp, r3
 8006716:	fa26 f000 	lsrgt.w	r0, r6, r0
 800671a:	bfda      	itte	le
 800671c:	f1c3 0320 	rsble	r3, r3, #32
 8006720:	fa06 f003 	lslle.w	r0, r6, r3
 8006724:	4318      	orrgt	r0, r3
 8006726:	f7f9 feed 	bl	8000504 <__aeabi_ui2d>
 800672a:	2301      	movs	r3, #1
 800672c:	4606      	mov	r6, r0
 800672e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006732:	3d01      	subs	r5, #1
 8006734:	930e      	str	r3, [sp, #56]	; 0x38
 8006736:	e76a      	b.n	800660e <_dtoa_r+0x116>
 8006738:	2301      	movs	r3, #1
 800673a:	e7b2      	b.n	80066a2 <_dtoa_r+0x1aa>
 800673c:	900b      	str	r0, [sp, #44]	; 0x2c
 800673e:	e7b1      	b.n	80066a4 <_dtoa_r+0x1ac>
 8006740:	9b04      	ldr	r3, [sp, #16]
 8006742:	9a00      	ldr	r2, [sp, #0]
 8006744:	1a9b      	subs	r3, r3, r2
 8006746:	9304      	str	r3, [sp, #16]
 8006748:	4253      	negs	r3, r2
 800674a:	9307      	str	r3, [sp, #28]
 800674c:	2300      	movs	r3, #0
 800674e:	930a      	str	r3, [sp, #40]	; 0x28
 8006750:	e7bf      	b.n	80066d2 <_dtoa_r+0x1da>
 8006752:	2300      	movs	r3, #0
 8006754:	9308      	str	r3, [sp, #32]
 8006756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006758:	2b00      	cmp	r3, #0
 800675a:	dc55      	bgt.n	8006808 <_dtoa_r+0x310>
 800675c:	2301      	movs	r3, #1
 800675e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006762:	461a      	mov	r2, r3
 8006764:	9209      	str	r2, [sp, #36]	; 0x24
 8006766:	e00c      	b.n	8006782 <_dtoa_r+0x28a>
 8006768:	2301      	movs	r3, #1
 800676a:	e7f3      	b.n	8006754 <_dtoa_r+0x25c>
 800676c:	2300      	movs	r3, #0
 800676e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006770:	9308      	str	r3, [sp, #32]
 8006772:	9b00      	ldr	r3, [sp, #0]
 8006774:	4413      	add	r3, r2
 8006776:	9302      	str	r3, [sp, #8]
 8006778:	3301      	adds	r3, #1
 800677a:	2b01      	cmp	r3, #1
 800677c:	9303      	str	r3, [sp, #12]
 800677e:	bfb8      	it	lt
 8006780:	2301      	movlt	r3, #1
 8006782:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006784:	2200      	movs	r2, #0
 8006786:	6042      	str	r2, [r0, #4]
 8006788:	2204      	movs	r2, #4
 800678a:	f102 0614 	add.w	r6, r2, #20
 800678e:	429e      	cmp	r6, r3
 8006790:	6841      	ldr	r1, [r0, #4]
 8006792:	d93d      	bls.n	8006810 <_dtoa_r+0x318>
 8006794:	4620      	mov	r0, r4
 8006796:	f000 fda3 	bl	80072e0 <_Balloc>
 800679a:	9001      	str	r0, [sp, #4]
 800679c:	2800      	cmp	r0, #0
 800679e:	d13b      	bne.n	8006818 <_dtoa_r+0x320>
 80067a0:	4b11      	ldr	r3, [pc, #68]	; (80067e8 <_dtoa_r+0x2f0>)
 80067a2:	4602      	mov	r2, r0
 80067a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80067a8:	e6c0      	b.n	800652c <_dtoa_r+0x34>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e7df      	b.n	800676e <_dtoa_r+0x276>
 80067ae:	bf00      	nop
 80067b0:	636f4361 	.word	0x636f4361
 80067b4:	3fd287a7 	.word	0x3fd287a7
 80067b8:	8b60c8b3 	.word	0x8b60c8b3
 80067bc:	3fc68a28 	.word	0x3fc68a28
 80067c0:	509f79fb 	.word	0x509f79fb
 80067c4:	3fd34413 	.word	0x3fd34413
 80067c8:	08008d1d 	.word	0x08008d1d
 80067cc:	08008d34 	.word	0x08008d34
 80067d0:	7ff00000 	.word	0x7ff00000
 80067d4:	08008d19 	.word	0x08008d19
 80067d8:	08008d10 	.word	0x08008d10
 80067dc:	08008ced 	.word	0x08008ced
 80067e0:	3ff80000 	.word	0x3ff80000
 80067e4:	08008e88 	.word	0x08008e88
 80067e8:	08008d8f 	.word	0x08008d8f
 80067ec:	2501      	movs	r5, #1
 80067ee:	2300      	movs	r3, #0
 80067f0:	9306      	str	r3, [sp, #24]
 80067f2:	9508      	str	r5, [sp, #32]
 80067f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067fc:	2200      	movs	r2, #0
 80067fe:	2312      	movs	r3, #18
 8006800:	e7b0      	b.n	8006764 <_dtoa_r+0x26c>
 8006802:	2301      	movs	r3, #1
 8006804:	9308      	str	r3, [sp, #32]
 8006806:	e7f5      	b.n	80067f4 <_dtoa_r+0x2fc>
 8006808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800680a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800680e:	e7b8      	b.n	8006782 <_dtoa_r+0x28a>
 8006810:	3101      	adds	r1, #1
 8006812:	6041      	str	r1, [r0, #4]
 8006814:	0052      	lsls	r2, r2, #1
 8006816:	e7b8      	b.n	800678a <_dtoa_r+0x292>
 8006818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800681a:	9a01      	ldr	r2, [sp, #4]
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	9b03      	ldr	r3, [sp, #12]
 8006820:	2b0e      	cmp	r3, #14
 8006822:	f200 809d 	bhi.w	8006960 <_dtoa_r+0x468>
 8006826:	2d00      	cmp	r5, #0
 8006828:	f000 809a 	beq.w	8006960 <_dtoa_r+0x468>
 800682c:	9b00      	ldr	r3, [sp, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	dd32      	ble.n	8006898 <_dtoa_r+0x3a0>
 8006832:	4ab7      	ldr	r2, [pc, #732]	; (8006b10 <_dtoa_r+0x618>)
 8006834:	f003 030f 	and.w	r3, r3, #15
 8006838:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800683c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006840:	9b00      	ldr	r3, [sp, #0]
 8006842:	05d8      	lsls	r0, r3, #23
 8006844:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006848:	d516      	bpl.n	8006878 <_dtoa_r+0x380>
 800684a:	4bb2      	ldr	r3, [pc, #712]	; (8006b14 <_dtoa_r+0x61c>)
 800684c:	ec51 0b19 	vmov	r0, r1, d9
 8006850:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006854:	f7f9 fffa 	bl	800084c <__aeabi_ddiv>
 8006858:	f007 070f 	and.w	r7, r7, #15
 800685c:	4682      	mov	sl, r0
 800685e:	468b      	mov	fp, r1
 8006860:	2503      	movs	r5, #3
 8006862:	4eac      	ldr	r6, [pc, #688]	; (8006b14 <_dtoa_r+0x61c>)
 8006864:	b957      	cbnz	r7, 800687c <_dtoa_r+0x384>
 8006866:	4642      	mov	r2, r8
 8006868:	464b      	mov	r3, r9
 800686a:	4650      	mov	r0, sl
 800686c:	4659      	mov	r1, fp
 800686e:	f7f9 ffed 	bl	800084c <__aeabi_ddiv>
 8006872:	4682      	mov	sl, r0
 8006874:	468b      	mov	fp, r1
 8006876:	e028      	b.n	80068ca <_dtoa_r+0x3d2>
 8006878:	2502      	movs	r5, #2
 800687a:	e7f2      	b.n	8006862 <_dtoa_r+0x36a>
 800687c:	07f9      	lsls	r1, r7, #31
 800687e:	d508      	bpl.n	8006892 <_dtoa_r+0x39a>
 8006880:	4640      	mov	r0, r8
 8006882:	4649      	mov	r1, r9
 8006884:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006888:	f7f9 feb6 	bl	80005f8 <__aeabi_dmul>
 800688c:	3501      	adds	r5, #1
 800688e:	4680      	mov	r8, r0
 8006890:	4689      	mov	r9, r1
 8006892:	107f      	asrs	r7, r7, #1
 8006894:	3608      	adds	r6, #8
 8006896:	e7e5      	b.n	8006864 <_dtoa_r+0x36c>
 8006898:	f000 809b 	beq.w	80069d2 <_dtoa_r+0x4da>
 800689c:	9b00      	ldr	r3, [sp, #0]
 800689e:	4f9d      	ldr	r7, [pc, #628]	; (8006b14 <_dtoa_r+0x61c>)
 80068a0:	425e      	negs	r6, r3
 80068a2:	4b9b      	ldr	r3, [pc, #620]	; (8006b10 <_dtoa_r+0x618>)
 80068a4:	f006 020f 	and.w	r2, r6, #15
 80068a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	ec51 0b19 	vmov	r0, r1, d9
 80068b4:	f7f9 fea0 	bl	80005f8 <__aeabi_dmul>
 80068b8:	1136      	asrs	r6, r6, #4
 80068ba:	4682      	mov	sl, r0
 80068bc:	468b      	mov	fp, r1
 80068be:	2300      	movs	r3, #0
 80068c0:	2502      	movs	r5, #2
 80068c2:	2e00      	cmp	r6, #0
 80068c4:	d17a      	bne.n	80069bc <_dtoa_r+0x4c4>
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1d3      	bne.n	8006872 <_dtoa_r+0x37a>
 80068ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 8082 	beq.w	80069d6 <_dtoa_r+0x4de>
 80068d2:	4b91      	ldr	r3, [pc, #580]	; (8006b18 <_dtoa_r+0x620>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	4650      	mov	r0, sl
 80068d8:	4659      	mov	r1, fp
 80068da:	f7fa f8ff 	bl	8000adc <__aeabi_dcmplt>
 80068de:	2800      	cmp	r0, #0
 80068e0:	d079      	beq.n	80069d6 <_dtoa_r+0x4de>
 80068e2:	9b03      	ldr	r3, [sp, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d076      	beq.n	80069d6 <_dtoa_r+0x4de>
 80068e8:	9b02      	ldr	r3, [sp, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	dd36      	ble.n	800695c <_dtoa_r+0x464>
 80068ee:	9b00      	ldr	r3, [sp, #0]
 80068f0:	4650      	mov	r0, sl
 80068f2:	4659      	mov	r1, fp
 80068f4:	1e5f      	subs	r7, r3, #1
 80068f6:	2200      	movs	r2, #0
 80068f8:	4b88      	ldr	r3, [pc, #544]	; (8006b1c <_dtoa_r+0x624>)
 80068fa:	f7f9 fe7d 	bl	80005f8 <__aeabi_dmul>
 80068fe:	9e02      	ldr	r6, [sp, #8]
 8006900:	4682      	mov	sl, r0
 8006902:	468b      	mov	fp, r1
 8006904:	3501      	adds	r5, #1
 8006906:	4628      	mov	r0, r5
 8006908:	f7f9 fe0c 	bl	8000524 <__aeabi_i2d>
 800690c:	4652      	mov	r2, sl
 800690e:	465b      	mov	r3, fp
 8006910:	f7f9 fe72 	bl	80005f8 <__aeabi_dmul>
 8006914:	4b82      	ldr	r3, [pc, #520]	; (8006b20 <_dtoa_r+0x628>)
 8006916:	2200      	movs	r2, #0
 8006918:	f7f9 fcb8 	bl	800028c <__adddf3>
 800691c:	46d0      	mov	r8, sl
 800691e:	46d9      	mov	r9, fp
 8006920:	4682      	mov	sl, r0
 8006922:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006926:	2e00      	cmp	r6, #0
 8006928:	d158      	bne.n	80069dc <_dtoa_r+0x4e4>
 800692a:	4b7e      	ldr	r3, [pc, #504]	; (8006b24 <_dtoa_r+0x62c>)
 800692c:	2200      	movs	r2, #0
 800692e:	4640      	mov	r0, r8
 8006930:	4649      	mov	r1, r9
 8006932:	f7f9 fca9 	bl	8000288 <__aeabi_dsub>
 8006936:	4652      	mov	r2, sl
 8006938:	465b      	mov	r3, fp
 800693a:	4680      	mov	r8, r0
 800693c:	4689      	mov	r9, r1
 800693e:	f7fa f8eb 	bl	8000b18 <__aeabi_dcmpgt>
 8006942:	2800      	cmp	r0, #0
 8006944:	f040 8295 	bne.w	8006e72 <_dtoa_r+0x97a>
 8006948:	4652      	mov	r2, sl
 800694a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800694e:	4640      	mov	r0, r8
 8006950:	4649      	mov	r1, r9
 8006952:	f7fa f8c3 	bl	8000adc <__aeabi_dcmplt>
 8006956:	2800      	cmp	r0, #0
 8006958:	f040 8289 	bne.w	8006e6e <_dtoa_r+0x976>
 800695c:	ec5b ab19 	vmov	sl, fp, d9
 8006960:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006962:	2b00      	cmp	r3, #0
 8006964:	f2c0 8148 	blt.w	8006bf8 <_dtoa_r+0x700>
 8006968:	9a00      	ldr	r2, [sp, #0]
 800696a:	2a0e      	cmp	r2, #14
 800696c:	f300 8144 	bgt.w	8006bf8 <_dtoa_r+0x700>
 8006970:	4b67      	ldr	r3, [pc, #412]	; (8006b10 <_dtoa_r+0x618>)
 8006972:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006976:	e9d3 8900 	ldrd	r8, r9, [r3]
 800697a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800697c:	2b00      	cmp	r3, #0
 800697e:	f280 80d5 	bge.w	8006b2c <_dtoa_r+0x634>
 8006982:	9b03      	ldr	r3, [sp, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	f300 80d1 	bgt.w	8006b2c <_dtoa_r+0x634>
 800698a:	f040 826f 	bne.w	8006e6c <_dtoa_r+0x974>
 800698e:	4b65      	ldr	r3, [pc, #404]	; (8006b24 <_dtoa_r+0x62c>)
 8006990:	2200      	movs	r2, #0
 8006992:	4640      	mov	r0, r8
 8006994:	4649      	mov	r1, r9
 8006996:	f7f9 fe2f 	bl	80005f8 <__aeabi_dmul>
 800699a:	4652      	mov	r2, sl
 800699c:	465b      	mov	r3, fp
 800699e:	f7fa f8b1 	bl	8000b04 <__aeabi_dcmpge>
 80069a2:	9e03      	ldr	r6, [sp, #12]
 80069a4:	4637      	mov	r7, r6
 80069a6:	2800      	cmp	r0, #0
 80069a8:	f040 8245 	bne.w	8006e36 <_dtoa_r+0x93e>
 80069ac:	9d01      	ldr	r5, [sp, #4]
 80069ae:	2331      	movs	r3, #49	; 0x31
 80069b0:	f805 3b01 	strb.w	r3, [r5], #1
 80069b4:	9b00      	ldr	r3, [sp, #0]
 80069b6:	3301      	adds	r3, #1
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	e240      	b.n	8006e3e <_dtoa_r+0x946>
 80069bc:	07f2      	lsls	r2, r6, #31
 80069be:	d505      	bpl.n	80069cc <_dtoa_r+0x4d4>
 80069c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c4:	f7f9 fe18 	bl	80005f8 <__aeabi_dmul>
 80069c8:	3501      	adds	r5, #1
 80069ca:	2301      	movs	r3, #1
 80069cc:	1076      	asrs	r6, r6, #1
 80069ce:	3708      	adds	r7, #8
 80069d0:	e777      	b.n	80068c2 <_dtoa_r+0x3ca>
 80069d2:	2502      	movs	r5, #2
 80069d4:	e779      	b.n	80068ca <_dtoa_r+0x3d2>
 80069d6:	9f00      	ldr	r7, [sp, #0]
 80069d8:	9e03      	ldr	r6, [sp, #12]
 80069da:	e794      	b.n	8006906 <_dtoa_r+0x40e>
 80069dc:	9901      	ldr	r1, [sp, #4]
 80069de:	4b4c      	ldr	r3, [pc, #304]	; (8006b10 <_dtoa_r+0x618>)
 80069e0:	4431      	add	r1, r6
 80069e2:	910d      	str	r1, [sp, #52]	; 0x34
 80069e4:	9908      	ldr	r1, [sp, #32]
 80069e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80069ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069ee:	2900      	cmp	r1, #0
 80069f0:	d043      	beq.n	8006a7a <_dtoa_r+0x582>
 80069f2:	494d      	ldr	r1, [pc, #308]	; (8006b28 <_dtoa_r+0x630>)
 80069f4:	2000      	movs	r0, #0
 80069f6:	f7f9 ff29 	bl	800084c <__aeabi_ddiv>
 80069fa:	4652      	mov	r2, sl
 80069fc:	465b      	mov	r3, fp
 80069fe:	f7f9 fc43 	bl	8000288 <__aeabi_dsub>
 8006a02:	9d01      	ldr	r5, [sp, #4]
 8006a04:	4682      	mov	sl, r0
 8006a06:	468b      	mov	fp, r1
 8006a08:	4649      	mov	r1, r9
 8006a0a:	4640      	mov	r0, r8
 8006a0c:	f7fa f8a4 	bl	8000b58 <__aeabi_d2iz>
 8006a10:	4606      	mov	r6, r0
 8006a12:	f7f9 fd87 	bl	8000524 <__aeabi_i2d>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	4649      	mov	r1, r9
 8006a1e:	f7f9 fc33 	bl	8000288 <__aeabi_dsub>
 8006a22:	3630      	adds	r6, #48	; 0x30
 8006a24:	f805 6b01 	strb.w	r6, [r5], #1
 8006a28:	4652      	mov	r2, sl
 8006a2a:	465b      	mov	r3, fp
 8006a2c:	4680      	mov	r8, r0
 8006a2e:	4689      	mov	r9, r1
 8006a30:	f7fa f854 	bl	8000adc <__aeabi_dcmplt>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	d163      	bne.n	8006b00 <_dtoa_r+0x608>
 8006a38:	4642      	mov	r2, r8
 8006a3a:	464b      	mov	r3, r9
 8006a3c:	4936      	ldr	r1, [pc, #216]	; (8006b18 <_dtoa_r+0x620>)
 8006a3e:	2000      	movs	r0, #0
 8006a40:	f7f9 fc22 	bl	8000288 <__aeabi_dsub>
 8006a44:	4652      	mov	r2, sl
 8006a46:	465b      	mov	r3, fp
 8006a48:	f7fa f848 	bl	8000adc <__aeabi_dcmplt>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	f040 80b5 	bne.w	8006bbc <_dtoa_r+0x6c4>
 8006a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a54:	429d      	cmp	r5, r3
 8006a56:	d081      	beq.n	800695c <_dtoa_r+0x464>
 8006a58:	4b30      	ldr	r3, [pc, #192]	; (8006b1c <_dtoa_r+0x624>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	4650      	mov	r0, sl
 8006a5e:	4659      	mov	r1, fp
 8006a60:	f7f9 fdca 	bl	80005f8 <__aeabi_dmul>
 8006a64:	4b2d      	ldr	r3, [pc, #180]	; (8006b1c <_dtoa_r+0x624>)
 8006a66:	4682      	mov	sl, r0
 8006a68:	468b      	mov	fp, r1
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	4649      	mov	r1, r9
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f7f9 fdc2 	bl	80005f8 <__aeabi_dmul>
 8006a74:	4680      	mov	r8, r0
 8006a76:	4689      	mov	r9, r1
 8006a78:	e7c6      	b.n	8006a08 <_dtoa_r+0x510>
 8006a7a:	4650      	mov	r0, sl
 8006a7c:	4659      	mov	r1, fp
 8006a7e:	f7f9 fdbb 	bl	80005f8 <__aeabi_dmul>
 8006a82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a84:	9d01      	ldr	r5, [sp, #4]
 8006a86:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a88:	4682      	mov	sl, r0
 8006a8a:	468b      	mov	fp, r1
 8006a8c:	4649      	mov	r1, r9
 8006a8e:	4640      	mov	r0, r8
 8006a90:	f7fa f862 	bl	8000b58 <__aeabi_d2iz>
 8006a94:	4606      	mov	r6, r0
 8006a96:	f7f9 fd45 	bl	8000524 <__aeabi_i2d>
 8006a9a:	3630      	adds	r6, #48	; 0x30
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4640      	mov	r0, r8
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	f7f9 fbf0 	bl	8000288 <__aeabi_dsub>
 8006aa8:	f805 6b01 	strb.w	r6, [r5], #1
 8006aac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006aae:	429d      	cmp	r5, r3
 8006ab0:	4680      	mov	r8, r0
 8006ab2:	4689      	mov	r9, r1
 8006ab4:	f04f 0200 	mov.w	r2, #0
 8006ab8:	d124      	bne.n	8006b04 <_dtoa_r+0x60c>
 8006aba:	4b1b      	ldr	r3, [pc, #108]	; (8006b28 <_dtoa_r+0x630>)
 8006abc:	4650      	mov	r0, sl
 8006abe:	4659      	mov	r1, fp
 8006ac0:	f7f9 fbe4 	bl	800028c <__adddf3>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4640      	mov	r0, r8
 8006aca:	4649      	mov	r1, r9
 8006acc:	f7fa f824 	bl	8000b18 <__aeabi_dcmpgt>
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	d173      	bne.n	8006bbc <_dtoa_r+0x6c4>
 8006ad4:	4652      	mov	r2, sl
 8006ad6:	465b      	mov	r3, fp
 8006ad8:	4913      	ldr	r1, [pc, #76]	; (8006b28 <_dtoa_r+0x630>)
 8006ada:	2000      	movs	r0, #0
 8006adc:	f7f9 fbd4 	bl	8000288 <__aeabi_dsub>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4640      	mov	r0, r8
 8006ae6:	4649      	mov	r1, r9
 8006ae8:	f7f9 fff8 	bl	8000adc <__aeabi_dcmplt>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	f43f af35 	beq.w	800695c <_dtoa_r+0x464>
 8006af2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006af4:	1e6b      	subs	r3, r5, #1
 8006af6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006af8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006afc:	2b30      	cmp	r3, #48	; 0x30
 8006afe:	d0f8      	beq.n	8006af2 <_dtoa_r+0x5fa>
 8006b00:	9700      	str	r7, [sp, #0]
 8006b02:	e049      	b.n	8006b98 <_dtoa_r+0x6a0>
 8006b04:	4b05      	ldr	r3, [pc, #20]	; (8006b1c <_dtoa_r+0x624>)
 8006b06:	f7f9 fd77 	bl	80005f8 <__aeabi_dmul>
 8006b0a:	4680      	mov	r8, r0
 8006b0c:	4689      	mov	r9, r1
 8006b0e:	e7bd      	b.n	8006a8c <_dtoa_r+0x594>
 8006b10:	08008e88 	.word	0x08008e88
 8006b14:	08008e60 	.word	0x08008e60
 8006b18:	3ff00000 	.word	0x3ff00000
 8006b1c:	40240000 	.word	0x40240000
 8006b20:	401c0000 	.word	0x401c0000
 8006b24:	40140000 	.word	0x40140000
 8006b28:	3fe00000 	.word	0x3fe00000
 8006b2c:	9d01      	ldr	r5, [sp, #4]
 8006b2e:	4656      	mov	r6, sl
 8006b30:	465f      	mov	r7, fp
 8006b32:	4642      	mov	r2, r8
 8006b34:	464b      	mov	r3, r9
 8006b36:	4630      	mov	r0, r6
 8006b38:	4639      	mov	r1, r7
 8006b3a:	f7f9 fe87 	bl	800084c <__aeabi_ddiv>
 8006b3e:	f7fa f80b 	bl	8000b58 <__aeabi_d2iz>
 8006b42:	4682      	mov	sl, r0
 8006b44:	f7f9 fcee 	bl	8000524 <__aeabi_i2d>
 8006b48:	4642      	mov	r2, r8
 8006b4a:	464b      	mov	r3, r9
 8006b4c:	f7f9 fd54 	bl	80005f8 <__aeabi_dmul>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	4630      	mov	r0, r6
 8006b56:	4639      	mov	r1, r7
 8006b58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006b5c:	f7f9 fb94 	bl	8000288 <__aeabi_dsub>
 8006b60:	f805 6b01 	strb.w	r6, [r5], #1
 8006b64:	9e01      	ldr	r6, [sp, #4]
 8006b66:	9f03      	ldr	r7, [sp, #12]
 8006b68:	1bae      	subs	r6, r5, r6
 8006b6a:	42b7      	cmp	r7, r6
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	d135      	bne.n	8006bde <_dtoa_r+0x6e6>
 8006b72:	f7f9 fb8b 	bl	800028c <__adddf3>
 8006b76:	4642      	mov	r2, r8
 8006b78:	464b      	mov	r3, r9
 8006b7a:	4606      	mov	r6, r0
 8006b7c:	460f      	mov	r7, r1
 8006b7e:	f7f9 ffcb 	bl	8000b18 <__aeabi_dcmpgt>
 8006b82:	b9d0      	cbnz	r0, 8006bba <_dtoa_r+0x6c2>
 8006b84:	4642      	mov	r2, r8
 8006b86:	464b      	mov	r3, r9
 8006b88:	4630      	mov	r0, r6
 8006b8a:	4639      	mov	r1, r7
 8006b8c:	f7f9 ff9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b90:	b110      	cbz	r0, 8006b98 <_dtoa_r+0x6a0>
 8006b92:	f01a 0f01 	tst.w	sl, #1
 8006b96:	d110      	bne.n	8006bba <_dtoa_r+0x6c2>
 8006b98:	4620      	mov	r0, r4
 8006b9a:	ee18 1a10 	vmov	r1, s16
 8006b9e:	f000 fbdf 	bl	8007360 <_Bfree>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	9800      	ldr	r0, [sp, #0]
 8006ba6:	702b      	strb	r3, [r5, #0]
 8006ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006baa:	3001      	adds	r0, #1
 8006bac:	6018      	str	r0, [r3, #0]
 8006bae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f43f acf1 	beq.w	8006598 <_dtoa_r+0xa0>
 8006bb6:	601d      	str	r5, [r3, #0]
 8006bb8:	e4ee      	b.n	8006598 <_dtoa_r+0xa0>
 8006bba:	9f00      	ldr	r7, [sp, #0]
 8006bbc:	462b      	mov	r3, r5
 8006bbe:	461d      	mov	r5, r3
 8006bc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bc4:	2a39      	cmp	r2, #57	; 0x39
 8006bc6:	d106      	bne.n	8006bd6 <_dtoa_r+0x6de>
 8006bc8:	9a01      	ldr	r2, [sp, #4]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d1f7      	bne.n	8006bbe <_dtoa_r+0x6c6>
 8006bce:	9901      	ldr	r1, [sp, #4]
 8006bd0:	2230      	movs	r2, #48	; 0x30
 8006bd2:	3701      	adds	r7, #1
 8006bd4:	700a      	strb	r2, [r1, #0]
 8006bd6:	781a      	ldrb	r2, [r3, #0]
 8006bd8:	3201      	adds	r2, #1
 8006bda:	701a      	strb	r2, [r3, #0]
 8006bdc:	e790      	b.n	8006b00 <_dtoa_r+0x608>
 8006bde:	4ba6      	ldr	r3, [pc, #664]	; (8006e78 <_dtoa_r+0x980>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	f7f9 fd09 	bl	80005f8 <__aeabi_dmul>
 8006be6:	2200      	movs	r2, #0
 8006be8:	2300      	movs	r3, #0
 8006bea:	4606      	mov	r6, r0
 8006bec:	460f      	mov	r7, r1
 8006bee:	f7f9 ff6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d09d      	beq.n	8006b32 <_dtoa_r+0x63a>
 8006bf6:	e7cf      	b.n	8006b98 <_dtoa_r+0x6a0>
 8006bf8:	9a08      	ldr	r2, [sp, #32]
 8006bfa:	2a00      	cmp	r2, #0
 8006bfc:	f000 80d7 	beq.w	8006dae <_dtoa_r+0x8b6>
 8006c00:	9a06      	ldr	r2, [sp, #24]
 8006c02:	2a01      	cmp	r2, #1
 8006c04:	f300 80ba 	bgt.w	8006d7c <_dtoa_r+0x884>
 8006c08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c0a:	2a00      	cmp	r2, #0
 8006c0c:	f000 80b2 	beq.w	8006d74 <_dtoa_r+0x87c>
 8006c10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c14:	9e07      	ldr	r6, [sp, #28]
 8006c16:	9d04      	ldr	r5, [sp, #16]
 8006c18:	9a04      	ldr	r2, [sp, #16]
 8006c1a:	441a      	add	r2, r3
 8006c1c:	9204      	str	r2, [sp, #16]
 8006c1e:	9a05      	ldr	r2, [sp, #20]
 8006c20:	2101      	movs	r1, #1
 8006c22:	441a      	add	r2, r3
 8006c24:	4620      	mov	r0, r4
 8006c26:	9205      	str	r2, [sp, #20]
 8006c28:	f000 fc52 	bl	80074d0 <__i2b>
 8006c2c:	4607      	mov	r7, r0
 8006c2e:	2d00      	cmp	r5, #0
 8006c30:	dd0c      	ble.n	8006c4c <_dtoa_r+0x754>
 8006c32:	9b05      	ldr	r3, [sp, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	dd09      	ble.n	8006c4c <_dtoa_r+0x754>
 8006c38:	42ab      	cmp	r3, r5
 8006c3a:	9a04      	ldr	r2, [sp, #16]
 8006c3c:	bfa8      	it	ge
 8006c3e:	462b      	movge	r3, r5
 8006c40:	1ad2      	subs	r2, r2, r3
 8006c42:	9204      	str	r2, [sp, #16]
 8006c44:	9a05      	ldr	r2, [sp, #20]
 8006c46:	1aed      	subs	r5, r5, r3
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	9305      	str	r3, [sp, #20]
 8006c4c:	9b07      	ldr	r3, [sp, #28]
 8006c4e:	b31b      	cbz	r3, 8006c98 <_dtoa_r+0x7a0>
 8006c50:	9b08      	ldr	r3, [sp, #32]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 80af 	beq.w	8006db6 <_dtoa_r+0x8be>
 8006c58:	2e00      	cmp	r6, #0
 8006c5a:	dd13      	ble.n	8006c84 <_dtoa_r+0x78c>
 8006c5c:	4639      	mov	r1, r7
 8006c5e:	4632      	mov	r2, r6
 8006c60:	4620      	mov	r0, r4
 8006c62:	f000 fcf5 	bl	8007650 <__pow5mult>
 8006c66:	ee18 2a10 	vmov	r2, s16
 8006c6a:	4601      	mov	r1, r0
 8006c6c:	4607      	mov	r7, r0
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f000 fc44 	bl	80074fc <__multiply>
 8006c74:	ee18 1a10 	vmov	r1, s16
 8006c78:	4680      	mov	r8, r0
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f000 fb70 	bl	8007360 <_Bfree>
 8006c80:	ee08 8a10 	vmov	s16, r8
 8006c84:	9b07      	ldr	r3, [sp, #28]
 8006c86:	1b9a      	subs	r2, r3, r6
 8006c88:	d006      	beq.n	8006c98 <_dtoa_r+0x7a0>
 8006c8a:	ee18 1a10 	vmov	r1, s16
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f000 fcde 	bl	8007650 <__pow5mult>
 8006c94:	ee08 0a10 	vmov	s16, r0
 8006c98:	2101      	movs	r1, #1
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f000 fc18 	bl	80074d0 <__i2b>
 8006ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	f340 8088 	ble.w	8006dba <_dtoa_r+0x8c2>
 8006caa:	461a      	mov	r2, r3
 8006cac:	4601      	mov	r1, r0
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f000 fcce 	bl	8007650 <__pow5mult>
 8006cb4:	9b06      	ldr	r3, [sp, #24]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	4606      	mov	r6, r0
 8006cba:	f340 8081 	ble.w	8006dc0 <_dtoa_r+0x8c8>
 8006cbe:	f04f 0800 	mov.w	r8, #0
 8006cc2:	6933      	ldr	r3, [r6, #16]
 8006cc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006cc8:	6918      	ldr	r0, [r3, #16]
 8006cca:	f000 fbb1 	bl	8007430 <__hi0bits>
 8006cce:	f1c0 0020 	rsb	r0, r0, #32
 8006cd2:	9b05      	ldr	r3, [sp, #20]
 8006cd4:	4418      	add	r0, r3
 8006cd6:	f010 001f 	ands.w	r0, r0, #31
 8006cda:	f000 8092 	beq.w	8006e02 <_dtoa_r+0x90a>
 8006cde:	f1c0 0320 	rsb	r3, r0, #32
 8006ce2:	2b04      	cmp	r3, #4
 8006ce4:	f340 808a 	ble.w	8006dfc <_dtoa_r+0x904>
 8006ce8:	f1c0 001c 	rsb	r0, r0, #28
 8006cec:	9b04      	ldr	r3, [sp, #16]
 8006cee:	4403      	add	r3, r0
 8006cf0:	9304      	str	r3, [sp, #16]
 8006cf2:	9b05      	ldr	r3, [sp, #20]
 8006cf4:	4403      	add	r3, r0
 8006cf6:	4405      	add	r5, r0
 8006cf8:	9305      	str	r3, [sp, #20]
 8006cfa:	9b04      	ldr	r3, [sp, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	dd07      	ble.n	8006d10 <_dtoa_r+0x818>
 8006d00:	ee18 1a10 	vmov	r1, s16
 8006d04:	461a      	mov	r2, r3
 8006d06:	4620      	mov	r0, r4
 8006d08:	f000 fcfc 	bl	8007704 <__lshift>
 8006d0c:	ee08 0a10 	vmov	s16, r0
 8006d10:	9b05      	ldr	r3, [sp, #20]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	dd05      	ble.n	8006d22 <_dtoa_r+0x82a>
 8006d16:	4631      	mov	r1, r6
 8006d18:	461a      	mov	r2, r3
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f000 fcf2 	bl	8007704 <__lshift>
 8006d20:	4606      	mov	r6, r0
 8006d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d06e      	beq.n	8006e06 <_dtoa_r+0x90e>
 8006d28:	ee18 0a10 	vmov	r0, s16
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	f000 fd59 	bl	80077e4 <__mcmp>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	da67      	bge.n	8006e06 <_dtoa_r+0x90e>
 8006d36:	9b00      	ldr	r3, [sp, #0]
 8006d38:	3b01      	subs	r3, #1
 8006d3a:	ee18 1a10 	vmov	r1, s16
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	220a      	movs	r2, #10
 8006d42:	2300      	movs	r3, #0
 8006d44:	4620      	mov	r0, r4
 8006d46:	f000 fb2d 	bl	80073a4 <__multadd>
 8006d4a:	9b08      	ldr	r3, [sp, #32]
 8006d4c:	ee08 0a10 	vmov	s16, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f000 81b1 	beq.w	80070b8 <_dtoa_r+0xbc0>
 8006d56:	2300      	movs	r3, #0
 8006d58:	4639      	mov	r1, r7
 8006d5a:	220a      	movs	r2, #10
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f000 fb21 	bl	80073a4 <__multadd>
 8006d62:	9b02      	ldr	r3, [sp, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	4607      	mov	r7, r0
 8006d68:	f300 808e 	bgt.w	8006e88 <_dtoa_r+0x990>
 8006d6c:	9b06      	ldr	r3, [sp, #24]
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	dc51      	bgt.n	8006e16 <_dtoa_r+0x91e>
 8006d72:	e089      	b.n	8006e88 <_dtoa_r+0x990>
 8006d74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006d76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d7a:	e74b      	b.n	8006c14 <_dtoa_r+0x71c>
 8006d7c:	9b03      	ldr	r3, [sp, #12]
 8006d7e:	1e5e      	subs	r6, r3, #1
 8006d80:	9b07      	ldr	r3, [sp, #28]
 8006d82:	42b3      	cmp	r3, r6
 8006d84:	bfbf      	itttt	lt
 8006d86:	9b07      	ldrlt	r3, [sp, #28]
 8006d88:	9607      	strlt	r6, [sp, #28]
 8006d8a:	1af2      	sublt	r2, r6, r3
 8006d8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d8e:	bfb6      	itet	lt
 8006d90:	189b      	addlt	r3, r3, r2
 8006d92:	1b9e      	subge	r6, r3, r6
 8006d94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006d96:	9b03      	ldr	r3, [sp, #12]
 8006d98:	bfb8      	it	lt
 8006d9a:	2600      	movlt	r6, #0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	bfb7      	itett	lt
 8006da0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006da4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006da8:	1a9d      	sublt	r5, r3, r2
 8006daa:	2300      	movlt	r3, #0
 8006dac:	e734      	b.n	8006c18 <_dtoa_r+0x720>
 8006dae:	9e07      	ldr	r6, [sp, #28]
 8006db0:	9d04      	ldr	r5, [sp, #16]
 8006db2:	9f08      	ldr	r7, [sp, #32]
 8006db4:	e73b      	b.n	8006c2e <_dtoa_r+0x736>
 8006db6:	9a07      	ldr	r2, [sp, #28]
 8006db8:	e767      	b.n	8006c8a <_dtoa_r+0x792>
 8006dba:	9b06      	ldr	r3, [sp, #24]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	dc18      	bgt.n	8006df2 <_dtoa_r+0x8fa>
 8006dc0:	f1ba 0f00 	cmp.w	sl, #0
 8006dc4:	d115      	bne.n	8006df2 <_dtoa_r+0x8fa>
 8006dc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006dca:	b993      	cbnz	r3, 8006df2 <_dtoa_r+0x8fa>
 8006dcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006dd0:	0d1b      	lsrs	r3, r3, #20
 8006dd2:	051b      	lsls	r3, r3, #20
 8006dd4:	b183      	cbz	r3, 8006df8 <_dtoa_r+0x900>
 8006dd6:	9b04      	ldr	r3, [sp, #16]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	9304      	str	r3, [sp, #16]
 8006ddc:	9b05      	ldr	r3, [sp, #20]
 8006dde:	3301      	adds	r3, #1
 8006de0:	9305      	str	r3, [sp, #20]
 8006de2:	f04f 0801 	mov.w	r8, #1
 8006de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f47f af6a 	bne.w	8006cc2 <_dtoa_r+0x7ca>
 8006dee:	2001      	movs	r0, #1
 8006df0:	e76f      	b.n	8006cd2 <_dtoa_r+0x7da>
 8006df2:	f04f 0800 	mov.w	r8, #0
 8006df6:	e7f6      	b.n	8006de6 <_dtoa_r+0x8ee>
 8006df8:	4698      	mov	r8, r3
 8006dfa:	e7f4      	b.n	8006de6 <_dtoa_r+0x8ee>
 8006dfc:	f43f af7d 	beq.w	8006cfa <_dtoa_r+0x802>
 8006e00:	4618      	mov	r0, r3
 8006e02:	301c      	adds	r0, #28
 8006e04:	e772      	b.n	8006cec <_dtoa_r+0x7f4>
 8006e06:	9b03      	ldr	r3, [sp, #12]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	dc37      	bgt.n	8006e7c <_dtoa_r+0x984>
 8006e0c:	9b06      	ldr	r3, [sp, #24]
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	dd34      	ble.n	8006e7c <_dtoa_r+0x984>
 8006e12:	9b03      	ldr	r3, [sp, #12]
 8006e14:	9302      	str	r3, [sp, #8]
 8006e16:	9b02      	ldr	r3, [sp, #8]
 8006e18:	b96b      	cbnz	r3, 8006e36 <_dtoa_r+0x93e>
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	2205      	movs	r2, #5
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f000 fac0 	bl	80073a4 <__multadd>
 8006e24:	4601      	mov	r1, r0
 8006e26:	4606      	mov	r6, r0
 8006e28:	ee18 0a10 	vmov	r0, s16
 8006e2c:	f000 fcda 	bl	80077e4 <__mcmp>
 8006e30:	2800      	cmp	r0, #0
 8006e32:	f73f adbb 	bgt.w	80069ac <_dtoa_r+0x4b4>
 8006e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e38:	9d01      	ldr	r5, [sp, #4]
 8006e3a:	43db      	mvns	r3, r3
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	f04f 0800 	mov.w	r8, #0
 8006e42:	4631      	mov	r1, r6
 8006e44:	4620      	mov	r0, r4
 8006e46:	f000 fa8b 	bl	8007360 <_Bfree>
 8006e4a:	2f00      	cmp	r7, #0
 8006e4c:	f43f aea4 	beq.w	8006b98 <_dtoa_r+0x6a0>
 8006e50:	f1b8 0f00 	cmp.w	r8, #0
 8006e54:	d005      	beq.n	8006e62 <_dtoa_r+0x96a>
 8006e56:	45b8      	cmp	r8, r7
 8006e58:	d003      	beq.n	8006e62 <_dtoa_r+0x96a>
 8006e5a:	4641      	mov	r1, r8
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	f000 fa7f 	bl	8007360 <_Bfree>
 8006e62:	4639      	mov	r1, r7
 8006e64:	4620      	mov	r0, r4
 8006e66:	f000 fa7b 	bl	8007360 <_Bfree>
 8006e6a:	e695      	b.n	8006b98 <_dtoa_r+0x6a0>
 8006e6c:	2600      	movs	r6, #0
 8006e6e:	4637      	mov	r7, r6
 8006e70:	e7e1      	b.n	8006e36 <_dtoa_r+0x93e>
 8006e72:	9700      	str	r7, [sp, #0]
 8006e74:	4637      	mov	r7, r6
 8006e76:	e599      	b.n	80069ac <_dtoa_r+0x4b4>
 8006e78:	40240000 	.word	0x40240000
 8006e7c:	9b08      	ldr	r3, [sp, #32]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 80ca 	beq.w	8007018 <_dtoa_r+0xb20>
 8006e84:	9b03      	ldr	r3, [sp, #12]
 8006e86:	9302      	str	r3, [sp, #8]
 8006e88:	2d00      	cmp	r5, #0
 8006e8a:	dd05      	ble.n	8006e98 <_dtoa_r+0x9a0>
 8006e8c:	4639      	mov	r1, r7
 8006e8e:	462a      	mov	r2, r5
 8006e90:	4620      	mov	r0, r4
 8006e92:	f000 fc37 	bl	8007704 <__lshift>
 8006e96:	4607      	mov	r7, r0
 8006e98:	f1b8 0f00 	cmp.w	r8, #0
 8006e9c:	d05b      	beq.n	8006f56 <_dtoa_r+0xa5e>
 8006e9e:	6879      	ldr	r1, [r7, #4]
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	f000 fa1d 	bl	80072e0 <_Balloc>
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	b928      	cbnz	r0, 8006eb6 <_dtoa_r+0x9be>
 8006eaa:	4b87      	ldr	r3, [pc, #540]	; (80070c8 <_dtoa_r+0xbd0>)
 8006eac:	4602      	mov	r2, r0
 8006eae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006eb2:	f7ff bb3b 	b.w	800652c <_dtoa_r+0x34>
 8006eb6:	693a      	ldr	r2, [r7, #16]
 8006eb8:	3202      	adds	r2, #2
 8006eba:	0092      	lsls	r2, r2, #2
 8006ebc:	f107 010c 	add.w	r1, r7, #12
 8006ec0:	300c      	adds	r0, #12
 8006ec2:	f7fe fdf3 	bl	8005aac <memcpy>
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	4629      	mov	r1, r5
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f000 fc1a 	bl	8007704 <__lshift>
 8006ed0:	9b01      	ldr	r3, [sp, #4]
 8006ed2:	f103 0901 	add.w	r9, r3, #1
 8006ed6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006eda:	4413      	add	r3, r2
 8006edc:	9305      	str	r3, [sp, #20]
 8006ede:	f00a 0301 	and.w	r3, sl, #1
 8006ee2:	46b8      	mov	r8, r7
 8006ee4:	9304      	str	r3, [sp, #16]
 8006ee6:	4607      	mov	r7, r0
 8006ee8:	4631      	mov	r1, r6
 8006eea:	ee18 0a10 	vmov	r0, s16
 8006eee:	f7ff fa75 	bl	80063dc <quorem>
 8006ef2:	4641      	mov	r1, r8
 8006ef4:	9002      	str	r0, [sp, #8]
 8006ef6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006efa:	ee18 0a10 	vmov	r0, s16
 8006efe:	f000 fc71 	bl	80077e4 <__mcmp>
 8006f02:	463a      	mov	r2, r7
 8006f04:	9003      	str	r0, [sp, #12]
 8006f06:	4631      	mov	r1, r6
 8006f08:	4620      	mov	r0, r4
 8006f0a:	f000 fc87 	bl	800781c <__mdiff>
 8006f0e:	68c2      	ldr	r2, [r0, #12]
 8006f10:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006f14:	4605      	mov	r5, r0
 8006f16:	bb02      	cbnz	r2, 8006f5a <_dtoa_r+0xa62>
 8006f18:	4601      	mov	r1, r0
 8006f1a:	ee18 0a10 	vmov	r0, s16
 8006f1e:	f000 fc61 	bl	80077e4 <__mcmp>
 8006f22:	4602      	mov	r2, r0
 8006f24:	4629      	mov	r1, r5
 8006f26:	4620      	mov	r0, r4
 8006f28:	9207      	str	r2, [sp, #28]
 8006f2a:	f000 fa19 	bl	8007360 <_Bfree>
 8006f2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006f32:	ea43 0102 	orr.w	r1, r3, r2
 8006f36:	9b04      	ldr	r3, [sp, #16]
 8006f38:	430b      	orrs	r3, r1
 8006f3a:	464d      	mov	r5, r9
 8006f3c:	d10f      	bne.n	8006f5e <_dtoa_r+0xa66>
 8006f3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f42:	d02a      	beq.n	8006f9a <_dtoa_r+0xaa2>
 8006f44:	9b03      	ldr	r3, [sp, #12]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	dd02      	ble.n	8006f50 <_dtoa_r+0xa58>
 8006f4a:	9b02      	ldr	r3, [sp, #8]
 8006f4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006f50:	f88b a000 	strb.w	sl, [fp]
 8006f54:	e775      	b.n	8006e42 <_dtoa_r+0x94a>
 8006f56:	4638      	mov	r0, r7
 8006f58:	e7ba      	b.n	8006ed0 <_dtoa_r+0x9d8>
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	e7e2      	b.n	8006f24 <_dtoa_r+0xa2c>
 8006f5e:	9b03      	ldr	r3, [sp, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	db04      	blt.n	8006f6e <_dtoa_r+0xa76>
 8006f64:	9906      	ldr	r1, [sp, #24]
 8006f66:	430b      	orrs	r3, r1
 8006f68:	9904      	ldr	r1, [sp, #16]
 8006f6a:	430b      	orrs	r3, r1
 8006f6c:	d122      	bne.n	8006fb4 <_dtoa_r+0xabc>
 8006f6e:	2a00      	cmp	r2, #0
 8006f70:	ddee      	ble.n	8006f50 <_dtoa_r+0xa58>
 8006f72:	ee18 1a10 	vmov	r1, s16
 8006f76:	2201      	movs	r2, #1
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 fbc3 	bl	8007704 <__lshift>
 8006f7e:	4631      	mov	r1, r6
 8006f80:	ee08 0a10 	vmov	s16, r0
 8006f84:	f000 fc2e 	bl	80077e4 <__mcmp>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	dc03      	bgt.n	8006f94 <_dtoa_r+0xa9c>
 8006f8c:	d1e0      	bne.n	8006f50 <_dtoa_r+0xa58>
 8006f8e:	f01a 0f01 	tst.w	sl, #1
 8006f92:	d0dd      	beq.n	8006f50 <_dtoa_r+0xa58>
 8006f94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006f98:	d1d7      	bne.n	8006f4a <_dtoa_r+0xa52>
 8006f9a:	2339      	movs	r3, #57	; 0x39
 8006f9c:	f88b 3000 	strb.w	r3, [fp]
 8006fa0:	462b      	mov	r3, r5
 8006fa2:	461d      	mov	r5, r3
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006faa:	2a39      	cmp	r2, #57	; 0x39
 8006fac:	d071      	beq.n	8007092 <_dtoa_r+0xb9a>
 8006fae:	3201      	adds	r2, #1
 8006fb0:	701a      	strb	r2, [r3, #0]
 8006fb2:	e746      	b.n	8006e42 <_dtoa_r+0x94a>
 8006fb4:	2a00      	cmp	r2, #0
 8006fb6:	dd07      	ble.n	8006fc8 <_dtoa_r+0xad0>
 8006fb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006fbc:	d0ed      	beq.n	8006f9a <_dtoa_r+0xaa2>
 8006fbe:	f10a 0301 	add.w	r3, sl, #1
 8006fc2:	f88b 3000 	strb.w	r3, [fp]
 8006fc6:	e73c      	b.n	8006e42 <_dtoa_r+0x94a>
 8006fc8:	9b05      	ldr	r3, [sp, #20]
 8006fca:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006fce:	4599      	cmp	r9, r3
 8006fd0:	d047      	beq.n	8007062 <_dtoa_r+0xb6a>
 8006fd2:	ee18 1a10 	vmov	r1, s16
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	220a      	movs	r2, #10
 8006fda:	4620      	mov	r0, r4
 8006fdc:	f000 f9e2 	bl	80073a4 <__multadd>
 8006fe0:	45b8      	cmp	r8, r7
 8006fe2:	ee08 0a10 	vmov	s16, r0
 8006fe6:	f04f 0300 	mov.w	r3, #0
 8006fea:	f04f 020a 	mov.w	r2, #10
 8006fee:	4641      	mov	r1, r8
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	d106      	bne.n	8007002 <_dtoa_r+0xb0a>
 8006ff4:	f000 f9d6 	bl	80073a4 <__multadd>
 8006ff8:	4680      	mov	r8, r0
 8006ffa:	4607      	mov	r7, r0
 8006ffc:	f109 0901 	add.w	r9, r9, #1
 8007000:	e772      	b.n	8006ee8 <_dtoa_r+0x9f0>
 8007002:	f000 f9cf 	bl	80073a4 <__multadd>
 8007006:	4639      	mov	r1, r7
 8007008:	4680      	mov	r8, r0
 800700a:	2300      	movs	r3, #0
 800700c:	220a      	movs	r2, #10
 800700e:	4620      	mov	r0, r4
 8007010:	f000 f9c8 	bl	80073a4 <__multadd>
 8007014:	4607      	mov	r7, r0
 8007016:	e7f1      	b.n	8006ffc <_dtoa_r+0xb04>
 8007018:	9b03      	ldr	r3, [sp, #12]
 800701a:	9302      	str	r3, [sp, #8]
 800701c:	9d01      	ldr	r5, [sp, #4]
 800701e:	ee18 0a10 	vmov	r0, s16
 8007022:	4631      	mov	r1, r6
 8007024:	f7ff f9da 	bl	80063dc <quorem>
 8007028:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800702c:	9b01      	ldr	r3, [sp, #4]
 800702e:	f805 ab01 	strb.w	sl, [r5], #1
 8007032:	1aea      	subs	r2, r5, r3
 8007034:	9b02      	ldr	r3, [sp, #8]
 8007036:	4293      	cmp	r3, r2
 8007038:	dd09      	ble.n	800704e <_dtoa_r+0xb56>
 800703a:	ee18 1a10 	vmov	r1, s16
 800703e:	2300      	movs	r3, #0
 8007040:	220a      	movs	r2, #10
 8007042:	4620      	mov	r0, r4
 8007044:	f000 f9ae 	bl	80073a4 <__multadd>
 8007048:	ee08 0a10 	vmov	s16, r0
 800704c:	e7e7      	b.n	800701e <_dtoa_r+0xb26>
 800704e:	9b02      	ldr	r3, [sp, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	bfc8      	it	gt
 8007054:	461d      	movgt	r5, r3
 8007056:	9b01      	ldr	r3, [sp, #4]
 8007058:	bfd8      	it	le
 800705a:	2501      	movle	r5, #1
 800705c:	441d      	add	r5, r3
 800705e:	f04f 0800 	mov.w	r8, #0
 8007062:	ee18 1a10 	vmov	r1, s16
 8007066:	2201      	movs	r2, #1
 8007068:	4620      	mov	r0, r4
 800706a:	f000 fb4b 	bl	8007704 <__lshift>
 800706e:	4631      	mov	r1, r6
 8007070:	ee08 0a10 	vmov	s16, r0
 8007074:	f000 fbb6 	bl	80077e4 <__mcmp>
 8007078:	2800      	cmp	r0, #0
 800707a:	dc91      	bgt.n	8006fa0 <_dtoa_r+0xaa8>
 800707c:	d102      	bne.n	8007084 <_dtoa_r+0xb8c>
 800707e:	f01a 0f01 	tst.w	sl, #1
 8007082:	d18d      	bne.n	8006fa0 <_dtoa_r+0xaa8>
 8007084:	462b      	mov	r3, r5
 8007086:	461d      	mov	r5, r3
 8007088:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800708c:	2a30      	cmp	r2, #48	; 0x30
 800708e:	d0fa      	beq.n	8007086 <_dtoa_r+0xb8e>
 8007090:	e6d7      	b.n	8006e42 <_dtoa_r+0x94a>
 8007092:	9a01      	ldr	r2, [sp, #4]
 8007094:	429a      	cmp	r2, r3
 8007096:	d184      	bne.n	8006fa2 <_dtoa_r+0xaaa>
 8007098:	9b00      	ldr	r3, [sp, #0]
 800709a:	3301      	adds	r3, #1
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	2331      	movs	r3, #49	; 0x31
 80070a0:	7013      	strb	r3, [r2, #0]
 80070a2:	e6ce      	b.n	8006e42 <_dtoa_r+0x94a>
 80070a4:	4b09      	ldr	r3, [pc, #36]	; (80070cc <_dtoa_r+0xbd4>)
 80070a6:	f7ff ba95 	b.w	80065d4 <_dtoa_r+0xdc>
 80070aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f47f aa6e 	bne.w	800658e <_dtoa_r+0x96>
 80070b2:	4b07      	ldr	r3, [pc, #28]	; (80070d0 <_dtoa_r+0xbd8>)
 80070b4:	f7ff ba8e 	b.w	80065d4 <_dtoa_r+0xdc>
 80070b8:	9b02      	ldr	r3, [sp, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	dcae      	bgt.n	800701c <_dtoa_r+0xb24>
 80070be:	9b06      	ldr	r3, [sp, #24]
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	f73f aea8 	bgt.w	8006e16 <_dtoa_r+0x91e>
 80070c6:	e7a9      	b.n	800701c <_dtoa_r+0xb24>
 80070c8:	08008d8f 	.word	0x08008d8f
 80070cc:	08008cec 	.word	0x08008cec
 80070d0:	08008d10 	.word	0x08008d10

080070d4 <std>:
 80070d4:	2300      	movs	r3, #0
 80070d6:	b510      	push	{r4, lr}
 80070d8:	4604      	mov	r4, r0
 80070da:	e9c0 3300 	strd	r3, r3, [r0]
 80070de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070e2:	6083      	str	r3, [r0, #8]
 80070e4:	8181      	strh	r1, [r0, #12]
 80070e6:	6643      	str	r3, [r0, #100]	; 0x64
 80070e8:	81c2      	strh	r2, [r0, #14]
 80070ea:	6183      	str	r3, [r0, #24]
 80070ec:	4619      	mov	r1, r3
 80070ee:	2208      	movs	r2, #8
 80070f0:	305c      	adds	r0, #92	; 0x5c
 80070f2:	f7fe fce9 	bl	8005ac8 <memset>
 80070f6:	4b05      	ldr	r3, [pc, #20]	; (800710c <std+0x38>)
 80070f8:	6263      	str	r3, [r4, #36]	; 0x24
 80070fa:	4b05      	ldr	r3, [pc, #20]	; (8007110 <std+0x3c>)
 80070fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80070fe:	4b05      	ldr	r3, [pc, #20]	; (8007114 <std+0x40>)
 8007100:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007102:	4b05      	ldr	r3, [pc, #20]	; (8007118 <std+0x44>)
 8007104:	6224      	str	r4, [r4, #32]
 8007106:	6323      	str	r3, [r4, #48]	; 0x30
 8007108:	bd10      	pop	{r4, pc}
 800710a:	bf00      	nop
 800710c:	08007ea9 	.word	0x08007ea9
 8007110:	08007ecb 	.word	0x08007ecb
 8007114:	08007f03 	.word	0x08007f03
 8007118:	08007f27 	.word	0x08007f27

0800711c <_cleanup_r>:
 800711c:	4901      	ldr	r1, [pc, #4]	; (8007124 <_cleanup_r+0x8>)
 800711e:	f000 b8af 	b.w	8007280 <_fwalk_reent>
 8007122:	bf00      	nop
 8007124:	0800823d 	.word	0x0800823d

08007128 <__sfmoreglue>:
 8007128:	b570      	push	{r4, r5, r6, lr}
 800712a:	2268      	movs	r2, #104	; 0x68
 800712c:	1e4d      	subs	r5, r1, #1
 800712e:	4355      	muls	r5, r2
 8007130:	460e      	mov	r6, r1
 8007132:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007136:	f000 fcd9 	bl	8007aec <_malloc_r>
 800713a:	4604      	mov	r4, r0
 800713c:	b140      	cbz	r0, 8007150 <__sfmoreglue+0x28>
 800713e:	2100      	movs	r1, #0
 8007140:	e9c0 1600 	strd	r1, r6, [r0]
 8007144:	300c      	adds	r0, #12
 8007146:	60a0      	str	r0, [r4, #8]
 8007148:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800714c:	f7fe fcbc 	bl	8005ac8 <memset>
 8007150:	4620      	mov	r0, r4
 8007152:	bd70      	pop	{r4, r5, r6, pc}

08007154 <__sfp_lock_acquire>:
 8007154:	4801      	ldr	r0, [pc, #4]	; (800715c <__sfp_lock_acquire+0x8>)
 8007156:	f000 b8b8 	b.w	80072ca <__retarget_lock_acquire_recursive>
 800715a:	bf00      	nop
 800715c:	20000259 	.word	0x20000259

08007160 <__sfp_lock_release>:
 8007160:	4801      	ldr	r0, [pc, #4]	; (8007168 <__sfp_lock_release+0x8>)
 8007162:	f000 b8b3 	b.w	80072cc <__retarget_lock_release_recursive>
 8007166:	bf00      	nop
 8007168:	20000259 	.word	0x20000259

0800716c <__sinit_lock_acquire>:
 800716c:	4801      	ldr	r0, [pc, #4]	; (8007174 <__sinit_lock_acquire+0x8>)
 800716e:	f000 b8ac 	b.w	80072ca <__retarget_lock_acquire_recursive>
 8007172:	bf00      	nop
 8007174:	2000025a 	.word	0x2000025a

08007178 <__sinit_lock_release>:
 8007178:	4801      	ldr	r0, [pc, #4]	; (8007180 <__sinit_lock_release+0x8>)
 800717a:	f000 b8a7 	b.w	80072cc <__retarget_lock_release_recursive>
 800717e:	bf00      	nop
 8007180:	2000025a 	.word	0x2000025a

08007184 <__sinit>:
 8007184:	b510      	push	{r4, lr}
 8007186:	4604      	mov	r4, r0
 8007188:	f7ff fff0 	bl	800716c <__sinit_lock_acquire>
 800718c:	69a3      	ldr	r3, [r4, #24]
 800718e:	b11b      	cbz	r3, 8007198 <__sinit+0x14>
 8007190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007194:	f7ff bff0 	b.w	8007178 <__sinit_lock_release>
 8007198:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800719c:	6523      	str	r3, [r4, #80]	; 0x50
 800719e:	4b13      	ldr	r3, [pc, #76]	; (80071ec <__sinit+0x68>)
 80071a0:	4a13      	ldr	r2, [pc, #76]	; (80071f0 <__sinit+0x6c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80071a6:	42a3      	cmp	r3, r4
 80071a8:	bf04      	itt	eq
 80071aa:	2301      	moveq	r3, #1
 80071ac:	61a3      	streq	r3, [r4, #24]
 80071ae:	4620      	mov	r0, r4
 80071b0:	f000 f820 	bl	80071f4 <__sfp>
 80071b4:	6060      	str	r0, [r4, #4]
 80071b6:	4620      	mov	r0, r4
 80071b8:	f000 f81c 	bl	80071f4 <__sfp>
 80071bc:	60a0      	str	r0, [r4, #8]
 80071be:	4620      	mov	r0, r4
 80071c0:	f000 f818 	bl	80071f4 <__sfp>
 80071c4:	2200      	movs	r2, #0
 80071c6:	60e0      	str	r0, [r4, #12]
 80071c8:	2104      	movs	r1, #4
 80071ca:	6860      	ldr	r0, [r4, #4]
 80071cc:	f7ff ff82 	bl	80070d4 <std>
 80071d0:	68a0      	ldr	r0, [r4, #8]
 80071d2:	2201      	movs	r2, #1
 80071d4:	2109      	movs	r1, #9
 80071d6:	f7ff ff7d 	bl	80070d4 <std>
 80071da:	68e0      	ldr	r0, [r4, #12]
 80071dc:	2202      	movs	r2, #2
 80071de:	2112      	movs	r1, #18
 80071e0:	f7ff ff78 	bl	80070d4 <std>
 80071e4:	2301      	movs	r3, #1
 80071e6:	61a3      	str	r3, [r4, #24]
 80071e8:	e7d2      	b.n	8007190 <__sinit+0xc>
 80071ea:	bf00      	nop
 80071ec:	08008cd8 	.word	0x08008cd8
 80071f0:	0800711d 	.word	0x0800711d

080071f4 <__sfp>:
 80071f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f6:	4607      	mov	r7, r0
 80071f8:	f7ff ffac 	bl	8007154 <__sfp_lock_acquire>
 80071fc:	4b1e      	ldr	r3, [pc, #120]	; (8007278 <__sfp+0x84>)
 80071fe:	681e      	ldr	r6, [r3, #0]
 8007200:	69b3      	ldr	r3, [r6, #24]
 8007202:	b913      	cbnz	r3, 800720a <__sfp+0x16>
 8007204:	4630      	mov	r0, r6
 8007206:	f7ff ffbd 	bl	8007184 <__sinit>
 800720a:	3648      	adds	r6, #72	; 0x48
 800720c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007210:	3b01      	subs	r3, #1
 8007212:	d503      	bpl.n	800721c <__sfp+0x28>
 8007214:	6833      	ldr	r3, [r6, #0]
 8007216:	b30b      	cbz	r3, 800725c <__sfp+0x68>
 8007218:	6836      	ldr	r6, [r6, #0]
 800721a:	e7f7      	b.n	800720c <__sfp+0x18>
 800721c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007220:	b9d5      	cbnz	r5, 8007258 <__sfp+0x64>
 8007222:	4b16      	ldr	r3, [pc, #88]	; (800727c <__sfp+0x88>)
 8007224:	60e3      	str	r3, [r4, #12]
 8007226:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800722a:	6665      	str	r5, [r4, #100]	; 0x64
 800722c:	f000 f84c 	bl	80072c8 <__retarget_lock_init_recursive>
 8007230:	f7ff ff96 	bl	8007160 <__sfp_lock_release>
 8007234:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007238:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800723c:	6025      	str	r5, [r4, #0]
 800723e:	61a5      	str	r5, [r4, #24]
 8007240:	2208      	movs	r2, #8
 8007242:	4629      	mov	r1, r5
 8007244:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007248:	f7fe fc3e 	bl	8005ac8 <memset>
 800724c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007250:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007254:	4620      	mov	r0, r4
 8007256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007258:	3468      	adds	r4, #104	; 0x68
 800725a:	e7d9      	b.n	8007210 <__sfp+0x1c>
 800725c:	2104      	movs	r1, #4
 800725e:	4638      	mov	r0, r7
 8007260:	f7ff ff62 	bl	8007128 <__sfmoreglue>
 8007264:	4604      	mov	r4, r0
 8007266:	6030      	str	r0, [r6, #0]
 8007268:	2800      	cmp	r0, #0
 800726a:	d1d5      	bne.n	8007218 <__sfp+0x24>
 800726c:	f7ff ff78 	bl	8007160 <__sfp_lock_release>
 8007270:	230c      	movs	r3, #12
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	e7ee      	b.n	8007254 <__sfp+0x60>
 8007276:	bf00      	nop
 8007278:	08008cd8 	.word	0x08008cd8
 800727c:	ffff0001 	.word	0xffff0001

08007280 <_fwalk_reent>:
 8007280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007284:	4606      	mov	r6, r0
 8007286:	4688      	mov	r8, r1
 8007288:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800728c:	2700      	movs	r7, #0
 800728e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007292:	f1b9 0901 	subs.w	r9, r9, #1
 8007296:	d505      	bpl.n	80072a4 <_fwalk_reent+0x24>
 8007298:	6824      	ldr	r4, [r4, #0]
 800729a:	2c00      	cmp	r4, #0
 800729c:	d1f7      	bne.n	800728e <_fwalk_reent+0xe>
 800729e:	4638      	mov	r0, r7
 80072a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072a4:	89ab      	ldrh	r3, [r5, #12]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d907      	bls.n	80072ba <_fwalk_reent+0x3a>
 80072aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072ae:	3301      	adds	r3, #1
 80072b0:	d003      	beq.n	80072ba <_fwalk_reent+0x3a>
 80072b2:	4629      	mov	r1, r5
 80072b4:	4630      	mov	r0, r6
 80072b6:	47c0      	blx	r8
 80072b8:	4307      	orrs	r7, r0
 80072ba:	3568      	adds	r5, #104	; 0x68
 80072bc:	e7e9      	b.n	8007292 <_fwalk_reent+0x12>
	...

080072c0 <_localeconv_r>:
 80072c0:	4800      	ldr	r0, [pc, #0]	; (80072c4 <_localeconv_r+0x4>)
 80072c2:	4770      	bx	lr
 80072c4:	2000016c 	.word	0x2000016c

080072c8 <__retarget_lock_init_recursive>:
 80072c8:	4770      	bx	lr

080072ca <__retarget_lock_acquire_recursive>:
 80072ca:	4770      	bx	lr

080072cc <__retarget_lock_release_recursive>:
 80072cc:	4770      	bx	lr
	...

080072d0 <malloc>:
 80072d0:	4b02      	ldr	r3, [pc, #8]	; (80072dc <malloc+0xc>)
 80072d2:	4601      	mov	r1, r0
 80072d4:	6818      	ldr	r0, [r3, #0]
 80072d6:	f000 bc09 	b.w	8007aec <_malloc_r>
 80072da:	bf00      	nop
 80072dc:	20000018 	.word	0x20000018

080072e0 <_Balloc>:
 80072e0:	b570      	push	{r4, r5, r6, lr}
 80072e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072e4:	4604      	mov	r4, r0
 80072e6:	460d      	mov	r5, r1
 80072e8:	b976      	cbnz	r6, 8007308 <_Balloc+0x28>
 80072ea:	2010      	movs	r0, #16
 80072ec:	f7ff fff0 	bl	80072d0 <malloc>
 80072f0:	4602      	mov	r2, r0
 80072f2:	6260      	str	r0, [r4, #36]	; 0x24
 80072f4:	b920      	cbnz	r0, 8007300 <_Balloc+0x20>
 80072f6:	4b18      	ldr	r3, [pc, #96]	; (8007358 <_Balloc+0x78>)
 80072f8:	4818      	ldr	r0, [pc, #96]	; (800735c <_Balloc+0x7c>)
 80072fa:	2166      	movs	r1, #102	; 0x66
 80072fc:	f000 feea 	bl	80080d4 <__assert_func>
 8007300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007304:	6006      	str	r6, [r0, #0]
 8007306:	60c6      	str	r6, [r0, #12]
 8007308:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800730a:	68f3      	ldr	r3, [r6, #12]
 800730c:	b183      	cbz	r3, 8007330 <_Balloc+0x50>
 800730e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007316:	b9b8      	cbnz	r0, 8007348 <_Balloc+0x68>
 8007318:	2101      	movs	r1, #1
 800731a:	fa01 f605 	lsl.w	r6, r1, r5
 800731e:	1d72      	adds	r2, r6, #5
 8007320:	0092      	lsls	r2, r2, #2
 8007322:	4620      	mov	r0, r4
 8007324:	f000 fb60 	bl	80079e8 <_calloc_r>
 8007328:	b160      	cbz	r0, 8007344 <_Balloc+0x64>
 800732a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800732e:	e00e      	b.n	800734e <_Balloc+0x6e>
 8007330:	2221      	movs	r2, #33	; 0x21
 8007332:	2104      	movs	r1, #4
 8007334:	4620      	mov	r0, r4
 8007336:	f000 fb57 	bl	80079e8 <_calloc_r>
 800733a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800733c:	60f0      	str	r0, [r6, #12]
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1e4      	bne.n	800730e <_Balloc+0x2e>
 8007344:	2000      	movs	r0, #0
 8007346:	bd70      	pop	{r4, r5, r6, pc}
 8007348:	6802      	ldr	r2, [r0, #0]
 800734a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800734e:	2300      	movs	r3, #0
 8007350:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007354:	e7f7      	b.n	8007346 <_Balloc+0x66>
 8007356:	bf00      	nop
 8007358:	08008d1d 	.word	0x08008d1d
 800735c:	08008e00 	.word	0x08008e00

08007360 <_Bfree>:
 8007360:	b570      	push	{r4, r5, r6, lr}
 8007362:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007364:	4605      	mov	r5, r0
 8007366:	460c      	mov	r4, r1
 8007368:	b976      	cbnz	r6, 8007388 <_Bfree+0x28>
 800736a:	2010      	movs	r0, #16
 800736c:	f7ff ffb0 	bl	80072d0 <malloc>
 8007370:	4602      	mov	r2, r0
 8007372:	6268      	str	r0, [r5, #36]	; 0x24
 8007374:	b920      	cbnz	r0, 8007380 <_Bfree+0x20>
 8007376:	4b09      	ldr	r3, [pc, #36]	; (800739c <_Bfree+0x3c>)
 8007378:	4809      	ldr	r0, [pc, #36]	; (80073a0 <_Bfree+0x40>)
 800737a:	218a      	movs	r1, #138	; 0x8a
 800737c:	f000 feaa 	bl	80080d4 <__assert_func>
 8007380:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007384:	6006      	str	r6, [r0, #0]
 8007386:	60c6      	str	r6, [r0, #12]
 8007388:	b13c      	cbz	r4, 800739a <_Bfree+0x3a>
 800738a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800738c:	6862      	ldr	r2, [r4, #4]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007394:	6021      	str	r1, [r4, #0]
 8007396:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800739a:	bd70      	pop	{r4, r5, r6, pc}
 800739c:	08008d1d 	.word	0x08008d1d
 80073a0:	08008e00 	.word	0x08008e00

080073a4 <__multadd>:
 80073a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073a8:	690d      	ldr	r5, [r1, #16]
 80073aa:	4607      	mov	r7, r0
 80073ac:	460c      	mov	r4, r1
 80073ae:	461e      	mov	r6, r3
 80073b0:	f101 0c14 	add.w	ip, r1, #20
 80073b4:	2000      	movs	r0, #0
 80073b6:	f8dc 3000 	ldr.w	r3, [ip]
 80073ba:	b299      	uxth	r1, r3
 80073bc:	fb02 6101 	mla	r1, r2, r1, r6
 80073c0:	0c1e      	lsrs	r6, r3, #16
 80073c2:	0c0b      	lsrs	r3, r1, #16
 80073c4:	fb02 3306 	mla	r3, r2, r6, r3
 80073c8:	b289      	uxth	r1, r1
 80073ca:	3001      	adds	r0, #1
 80073cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80073d0:	4285      	cmp	r5, r0
 80073d2:	f84c 1b04 	str.w	r1, [ip], #4
 80073d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80073da:	dcec      	bgt.n	80073b6 <__multadd+0x12>
 80073dc:	b30e      	cbz	r6, 8007422 <__multadd+0x7e>
 80073de:	68a3      	ldr	r3, [r4, #8]
 80073e0:	42ab      	cmp	r3, r5
 80073e2:	dc19      	bgt.n	8007418 <__multadd+0x74>
 80073e4:	6861      	ldr	r1, [r4, #4]
 80073e6:	4638      	mov	r0, r7
 80073e8:	3101      	adds	r1, #1
 80073ea:	f7ff ff79 	bl	80072e0 <_Balloc>
 80073ee:	4680      	mov	r8, r0
 80073f0:	b928      	cbnz	r0, 80073fe <__multadd+0x5a>
 80073f2:	4602      	mov	r2, r0
 80073f4:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <__multadd+0x84>)
 80073f6:	480d      	ldr	r0, [pc, #52]	; (800742c <__multadd+0x88>)
 80073f8:	21b5      	movs	r1, #181	; 0xb5
 80073fa:	f000 fe6b 	bl	80080d4 <__assert_func>
 80073fe:	6922      	ldr	r2, [r4, #16]
 8007400:	3202      	adds	r2, #2
 8007402:	f104 010c 	add.w	r1, r4, #12
 8007406:	0092      	lsls	r2, r2, #2
 8007408:	300c      	adds	r0, #12
 800740a:	f7fe fb4f 	bl	8005aac <memcpy>
 800740e:	4621      	mov	r1, r4
 8007410:	4638      	mov	r0, r7
 8007412:	f7ff ffa5 	bl	8007360 <_Bfree>
 8007416:	4644      	mov	r4, r8
 8007418:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800741c:	3501      	adds	r5, #1
 800741e:	615e      	str	r6, [r3, #20]
 8007420:	6125      	str	r5, [r4, #16]
 8007422:	4620      	mov	r0, r4
 8007424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007428:	08008d8f 	.word	0x08008d8f
 800742c:	08008e00 	.word	0x08008e00

08007430 <__hi0bits>:
 8007430:	0c03      	lsrs	r3, r0, #16
 8007432:	041b      	lsls	r3, r3, #16
 8007434:	b9d3      	cbnz	r3, 800746c <__hi0bits+0x3c>
 8007436:	0400      	lsls	r0, r0, #16
 8007438:	2310      	movs	r3, #16
 800743a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800743e:	bf04      	itt	eq
 8007440:	0200      	lsleq	r0, r0, #8
 8007442:	3308      	addeq	r3, #8
 8007444:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007448:	bf04      	itt	eq
 800744a:	0100      	lsleq	r0, r0, #4
 800744c:	3304      	addeq	r3, #4
 800744e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007452:	bf04      	itt	eq
 8007454:	0080      	lsleq	r0, r0, #2
 8007456:	3302      	addeq	r3, #2
 8007458:	2800      	cmp	r0, #0
 800745a:	db05      	blt.n	8007468 <__hi0bits+0x38>
 800745c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007460:	f103 0301 	add.w	r3, r3, #1
 8007464:	bf08      	it	eq
 8007466:	2320      	moveq	r3, #32
 8007468:	4618      	mov	r0, r3
 800746a:	4770      	bx	lr
 800746c:	2300      	movs	r3, #0
 800746e:	e7e4      	b.n	800743a <__hi0bits+0xa>

08007470 <__lo0bits>:
 8007470:	6803      	ldr	r3, [r0, #0]
 8007472:	f013 0207 	ands.w	r2, r3, #7
 8007476:	4601      	mov	r1, r0
 8007478:	d00b      	beq.n	8007492 <__lo0bits+0x22>
 800747a:	07da      	lsls	r2, r3, #31
 800747c:	d423      	bmi.n	80074c6 <__lo0bits+0x56>
 800747e:	0798      	lsls	r0, r3, #30
 8007480:	bf49      	itett	mi
 8007482:	085b      	lsrmi	r3, r3, #1
 8007484:	089b      	lsrpl	r3, r3, #2
 8007486:	2001      	movmi	r0, #1
 8007488:	600b      	strmi	r3, [r1, #0]
 800748a:	bf5c      	itt	pl
 800748c:	600b      	strpl	r3, [r1, #0]
 800748e:	2002      	movpl	r0, #2
 8007490:	4770      	bx	lr
 8007492:	b298      	uxth	r0, r3
 8007494:	b9a8      	cbnz	r0, 80074c2 <__lo0bits+0x52>
 8007496:	0c1b      	lsrs	r3, r3, #16
 8007498:	2010      	movs	r0, #16
 800749a:	b2da      	uxtb	r2, r3
 800749c:	b90a      	cbnz	r2, 80074a2 <__lo0bits+0x32>
 800749e:	3008      	adds	r0, #8
 80074a0:	0a1b      	lsrs	r3, r3, #8
 80074a2:	071a      	lsls	r2, r3, #28
 80074a4:	bf04      	itt	eq
 80074a6:	091b      	lsreq	r3, r3, #4
 80074a8:	3004      	addeq	r0, #4
 80074aa:	079a      	lsls	r2, r3, #30
 80074ac:	bf04      	itt	eq
 80074ae:	089b      	lsreq	r3, r3, #2
 80074b0:	3002      	addeq	r0, #2
 80074b2:	07da      	lsls	r2, r3, #31
 80074b4:	d403      	bmi.n	80074be <__lo0bits+0x4e>
 80074b6:	085b      	lsrs	r3, r3, #1
 80074b8:	f100 0001 	add.w	r0, r0, #1
 80074bc:	d005      	beq.n	80074ca <__lo0bits+0x5a>
 80074be:	600b      	str	r3, [r1, #0]
 80074c0:	4770      	bx	lr
 80074c2:	4610      	mov	r0, r2
 80074c4:	e7e9      	b.n	800749a <__lo0bits+0x2a>
 80074c6:	2000      	movs	r0, #0
 80074c8:	4770      	bx	lr
 80074ca:	2020      	movs	r0, #32
 80074cc:	4770      	bx	lr
	...

080074d0 <__i2b>:
 80074d0:	b510      	push	{r4, lr}
 80074d2:	460c      	mov	r4, r1
 80074d4:	2101      	movs	r1, #1
 80074d6:	f7ff ff03 	bl	80072e0 <_Balloc>
 80074da:	4602      	mov	r2, r0
 80074dc:	b928      	cbnz	r0, 80074ea <__i2b+0x1a>
 80074de:	4b05      	ldr	r3, [pc, #20]	; (80074f4 <__i2b+0x24>)
 80074e0:	4805      	ldr	r0, [pc, #20]	; (80074f8 <__i2b+0x28>)
 80074e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80074e6:	f000 fdf5 	bl	80080d4 <__assert_func>
 80074ea:	2301      	movs	r3, #1
 80074ec:	6144      	str	r4, [r0, #20]
 80074ee:	6103      	str	r3, [r0, #16]
 80074f0:	bd10      	pop	{r4, pc}
 80074f2:	bf00      	nop
 80074f4:	08008d8f 	.word	0x08008d8f
 80074f8:	08008e00 	.word	0x08008e00

080074fc <__multiply>:
 80074fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007500:	4691      	mov	r9, r2
 8007502:	690a      	ldr	r2, [r1, #16]
 8007504:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007508:	429a      	cmp	r2, r3
 800750a:	bfb8      	it	lt
 800750c:	460b      	movlt	r3, r1
 800750e:	460c      	mov	r4, r1
 8007510:	bfbc      	itt	lt
 8007512:	464c      	movlt	r4, r9
 8007514:	4699      	movlt	r9, r3
 8007516:	6927      	ldr	r7, [r4, #16]
 8007518:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800751c:	68a3      	ldr	r3, [r4, #8]
 800751e:	6861      	ldr	r1, [r4, #4]
 8007520:	eb07 060a 	add.w	r6, r7, sl
 8007524:	42b3      	cmp	r3, r6
 8007526:	b085      	sub	sp, #20
 8007528:	bfb8      	it	lt
 800752a:	3101      	addlt	r1, #1
 800752c:	f7ff fed8 	bl	80072e0 <_Balloc>
 8007530:	b930      	cbnz	r0, 8007540 <__multiply+0x44>
 8007532:	4602      	mov	r2, r0
 8007534:	4b44      	ldr	r3, [pc, #272]	; (8007648 <__multiply+0x14c>)
 8007536:	4845      	ldr	r0, [pc, #276]	; (800764c <__multiply+0x150>)
 8007538:	f240 115d 	movw	r1, #349	; 0x15d
 800753c:	f000 fdca 	bl	80080d4 <__assert_func>
 8007540:	f100 0514 	add.w	r5, r0, #20
 8007544:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007548:	462b      	mov	r3, r5
 800754a:	2200      	movs	r2, #0
 800754c:	4543      	cmp	r3, r8
 800754e:	d321      	bcc.n	8007594 <__multiply+0x98>
 8007550:	f104 0314 	add.w	r3, r4, #20
 8007554:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007558:	f109 0314 	add.w	r3, r9, #20
 800755c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007560:	9202      	str	r2, [sp, #8]
 8007562:	1b3a      	subs	r2, r7, r4
 8007564:	3a15      	subs	r2, #21
 8007566:	f022 0203 	bic.w	r2, r2, #3
 800756a:	3204      	adds	r2, #4
 800756c:	f104 0115 	add.w	r1, r4, #21
 8007570:	428f      	cmp	r7, r1
 8007572:	bf38      	it	cc
 8007574:	2204      	movcc	r2, #4
 8007576:	9201      	str	r2, [sp, #4]
 8007578:	9a02      	ldr	r2, [sp, #8]
 800757a:	9303      	str	r3, [sp, #12]
 800757c:	429a      	cmp	r2, r3
 800757e:	d80c      	bhi.n	800759a <__multiply+0x9e>
 8007580:	2e00      	cmp	r6, #0
 8007582:	dd03      	ble.n	800758c <__multiply+0x90>
 8007584:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007588:	2b00      	cmp	r3, #0
 800758a:	d05a      	beq.n	8007642 <__multiply+0x146>
 800758c:	6106      	str	r6, [r0, #16]
 800758e:	b005      	add	sp, #20
 8007590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007594:	f843 2b04 	str.w	r2, [r3], #4
 8007598:	e7d8      	b.n	800754c <__multiply+0x50>
 800759a:	f8b3 a000 	ldrh.w	sl, [r3]
 800759e:	f1ba 0f00 	cmp.w	sl, #0
 80075a2:	d024      	beq.n	80075ee <__multiply+0xf2>
 80075a4:	f104 0e14 	add.w	lr, r4, #20
 80075a8:	46a9      	mov	r9, r5
 80075aa:	f04f 0c00 	mov.w	ip, #0
 80075ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80075b2:	f8d9 1000 	ldr.w	r1, [r9]
 80075b6:	fa1f fb82 	uxth.w	fp, r2
 80075ba:	b289      	uxth	r1, r1
 80075bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80075c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80075c4:	f8d9 2000 	ldr.w	r2, [r9]
 80075c8:	4461      	add	r1, ip
 80075ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80075d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80075d6:	b289      	uxth	r1, r1
 80075d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80075dc:	4577      	cmp	r7, lr
 80075de:	f849 1b04 	str.w	r1, [r9], #4
 80075e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075e6:	d8e2      	bhi.n	80075ae <__multiply+0xb2>
 80075e8:	9a01      	ldr	r2, [sp, #4]
 80075ea:	f845 c002 	str.w	ip, [r5, r2]
 80075ee:	9a03      	ldr	r2, [sp, #12]
 80075f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80075f4:	3304      	adds	r3, #4
 80075f6:	f1b9 0f00 	cmp.w	r9, #0
 80075fa:	d020      	beq.n	800763e <__multiply+0x142>
 80075fc:	6829      	ldr	r1, [r5, #0]
 80075fe:	f104 0c14 	add.w	ip, r4, #20
 8007602:	46ae      	mov	lr, r5
 8007604:	f04f 0a00 	mov.w	sl, #0
 8007608:	f8bc b000 	ldrh.w	fp, [ip]
 800760c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007610:	fb09 220b 	mla	r2, r9, fp, r2
 8007614:	4492      	add	sl, r2
 8007616:	b289      	uxth	r1, r1
 8007618:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800761c:	f84e 1b04 	str.w	r1, [lr], #4
 8007620:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007624:	f8be 1000 	ldrh.w	r1, [lr]
 8007628:	0c12      	lsrs	r2, r2, #16
 800762a:	fb09 1102 	mla	r1, r9, r2, r1
 800762e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007632:	4567      	cmp	r7, ip
 8007634:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007638:	d8e6      	bhi.n	8007608 <__multiply+0x10c>
 800763a:	9a01      	ldr	r2, [sp, #4]
 800763c:	50a9      	str	r1, [r5, r2]
 800763e:	3504      	adds	r5, #4
 8007640:	e79a      	b.n	8007578 <__multiply+0x7c>
 8007642:	3e01      	subs	r6, #1
 8007644:	e79c      	b.n	8007580 <__multiply+0x84>
 8007646:	bf00      	nop
 8007648:	08008d8f 	.word	0x08008d8f
 800764c:	08008e00 	.word	0x08008e00

08007650 <__pow5mult>:
 8007650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007654:	4615      	mov	r5, r2
 8007656:	f012 0203 	ands.w	r2, r2, #3
 800765a:	4606      	mov	r6, r0
 800765c:	460f      	mov	r7, r1
 800765e:	d007      	beq.n	8007670 <__pow5mult+0x20>
 8007660:	4c25      	ldr	r4, [pc, #148]	; (80076f8 <__pow5mult+0xa8>)
 8007662:	3a01      	subs	r2, #1
 8007664:	2300      	movs	r3, #0
 8007666:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800766a:	f7ff fe9b 	bl	80073a4 <__multadd>
 800766e:	4607      	mov	r7, r0
 8007670:	10ad      	asrs	r5, r5, #2
 8007672:	d03d      	beq.n	80076f0 <__pow5mult+0xa0>
 8007674:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007676:	b97c      	cbnz	r4, 8007698 <__pow5mult+0x48>
 8007678:	2010      	movs	r0, #16
 800767a:	f7ff fe29 	bl	80072d0 <malloc>
 800767e:	4602      	mov	r2, r0
 8007680:	6270      	str	r0, [r6, #36]	; 0x24
 8007682:	b928      	cbnz	r0, 8007690 <__pow5mult+0x40>
 8007684:	4b1d      	ldr	r3, [pc, #116]	; (80076fc <__pow5mult+0xac>)
 8007686:	481e      	ldr	r0, [pc, #120]	; (8007700 <__pow5mult+0xb0>)
 8007688:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800768c:	f000 fd22 	bl	80080d4 <__assert_func>
 8007690:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007694:	6004      	str	r4, [r0, #0]
 8007696:	60c4      	str	r4, [r0, #12]
 8007698:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800769c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80076a0:	b94c      	cbnz	r4, 80076b6 <__pow5mult+0x66>
 80076a2:	f240 2171 	movw	r1, #625	; 0x271
 80076a6:	4630      	mov	r0, r6
 80076a8:	f7ff ff12 	bl	80074d0 <__i2b>
 80076ac:	2300      	movs	r3, #0
 80076ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80076b2:	4604      	mov	r4, r0
 80076b4:	6003      	str	r3, [r0, #0]
 80076b6:	f04f 0900 	mov.w	r9, #0
 80076ba:	07eb      	lsls	r3, r5, #31
 80076bc:	d50a      	bpl.n	80076d4 <__pow5mult+0x84>
 80076be:	4639      	mov	r1, r7
 80076c0:	4622      	mov	r2, r4
 80076c2:	4630      	mov	r0, r6
 80076c4:	f7ff ff1a 	bl	80074fc <__multiply>
 80076c8:	4639      	mov	r1, r7
 80076ca:	4680      	mov	r8, r0
 80076cc:	4630      	mov	r0, r6
 80076ce:	f7ff fe47 	bl	8007360 <_Bfree>
 80076d2:	4647      	mov	r7, r8
 80076d4:	106d      	asrs	r5, r5, #1
 80076d6:	d00b      	beq.n	80076f0 <__pow5mult+0xa0>
 80076d8:	6820      	ldr	r0, [r4, #0]
 80076da:	b938      	cbnz	r0, 80076ec <__pow5mult+0x9c>
 80076dc:	4622      	mov	r2, r4
 80076de:	4621      	mov	r1, r4
 80076e0:	4630      	mov	r0, r6
 80076e2:	f7ff ff0b 	bl	80074fc <__multiply>
 80076e6:	6020      	str	r0, [r4, #0]
 80076e8:	f8c0 9000 	str.w	r9, [r0]
 80076ec:	4604      	mov	r4, r0
 80076ee:	e7e4      	b.n	80076ba <__pow5mult+0x6a>
 80076f0:	4638      	mov	r0, r7
 80076f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076f6:	bf00      	nop
 80076f8:	08008f50 	.word	0x08008f50
 80076fc:	08008d1d 	.word	0x08008d1d
 8007700:	08008e00 	.word	0x08008e00

08007704 <__lshift>:
 8007704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007708:	460c      	mov	r4, r1
 800770a:	6849      	ldr	r1, [r1, #4]
 800770c:	6923      	ldr	r3, [r4, #16]
 800770e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007712:	68a3      	ldr	r3, [r4, #8]
 8007714:	4607      	mov	r7, r0
 8007716:	4691      	mov	r9, r2
 8007718:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800771c:	f108 0601 	add.w	r6, r8, #1
 8007720:	42b3      	cmp	r3, r6
 8007722:	db0b      	blt.n	800773c <__lshift+0x38>
 8007724:	4638      	mov	r0, r7
 8007726:	f7ff fddb 	bl	80072e0 <_Balloc>
 800772a:	4605      	mov	r5, r0
 800772c:	b948      	cbnz	r0, 8007742 <__lshift+0x3e>
 800772e:	4602      	mov	r2, r0
 8007730:	4b2a      	ldr	r3, [pc, #168]	; (80077dc <__lshift+0xd8>)
 8007732:	482b      	ldr	r0, [pc, #172]	; (80077e0 <__lshift+0xdc>)
 8007734:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007738:	f000 fccc 	bl	80080d4 <__assert_func>
 800773c:	3101      	adds	r1, #1
 800773e:	005b      	lsls	r3, r3, #1
 8007740:	e7ee      	b.n	8007720 <__lshift+0x1c>
 8007742:	2300      	movs	r3, #0
 8007744:	f100 0114 	add.w	r1, r0, #20
 8007748:	f100 0210 	add.w	r2, r0, #16
 800774c:	4618      	mov	r0, r3
 800774e:	4553      	cmp	r3, sl
 8007750:	db37      	blt.n	80077c2 <__lshift+0xbe>
 8007752:	6920      	ldr	r0, [r4, #16]
 8007754:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007758:	f104 0314 	add.w	r3, r4, #20
 800775c:	f019 091f 	ands.w	r9, r9, #31
 8007760:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007764:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007768:	d02f      	beq.n	80077ca <__lshift+0xc6>
 800776a:	f1c9 0e20 	rsb	lr, r9, #32
 800776e:	468a      	mov	sl, r1
 8007770:	f04f 0c00 	mov.w	ip, #0
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	fa02 f209 	lsl.w	r2, r2, r9
 800777a:	ea42 020c 	orr.w	r2, r2, ip
 800777e:	f84a 2b04 	str.w	r2, [sl], #4
 8007782:	f853 2b04 	ldr.w	r2, [r3], #4
 8007786:	4298      	cmp	r0, r3
 8007788:	fa22 fc0e 	lsr.w	ip, r2, lr
 800778c:	d8f2      	bhi.n	8007774 <__lshift+0x70>
 800778e:	1b03      	subs	r3, r0, r4
 8007790:	3b15      	subs	r3, #21
 8007792:	f023 0303 	bic.w	r3, r3, #3
 8007796:	3304      	adds	r3, #4
 8007798:	f104 0215 	add.w	r2, r4, #21
 800779c:	4290      	cmp	r0, r2
 800779e:	bf38      	it	cc
 80077a0:	2304      	movcc	r3, #4
 80077a2:	f841 c003 	str.w	ip, [r1, r3]
 80077a6:	f1bc 0f00 	cmp.w	ip, #0
 80077aa:	d001      	beq.n	80077b0 <__lshift+0xac>
 80077ac:	f108 0602 	add.w	r6, r8, #2
 80077b0:	3e01      	subs	r6, #1
 80077b2:	4638      	mov	r0, r7
 80077b4:	612e      	str	r6, [r5, #16]
 80077b6:	4621      	mov	r1, r4
 80077b8:	f7ff fdd2 	bl	8007360 <_Bfree>
 80077bc:	4628      	mov	r0, r5
 80077be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80077c6:	3301      	adds	r3, #1
 80077c8:	e7c1      	b.n	800774e <__lshift+0x4a>
 80077ca:	3904      	subs	r1, #4
 80077cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80077d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80077d4:	4298      	cmp	r0, r3
 80077d6:	d8f9      	bhi.n	80077cc <__lshift+0xc8>
 80077d8:	e7ea      	b.n	80077b0 <__lshift+0xac>
 80077da:	bf00      	nop
 80077dc:	08008d8f 	.word	0x08008d8f
 80077e0:	08008e00 	.word	0x08008e00

080077e4 <__mcmp>:
 80077e4:	b530      	push	{r4, r5, lr}
 80077e6:	6902      	ldr	r2, [r0, #16]
 80077e8:	690c      	ldr	r4, [r1, #16]
 80077ea:	1b12      	subs	r2, r2, r4
 80077ec:	d10e      	bne.n	800780c <__mcmp+0x28>
 80077ee:	f100 0314 	add.w	r3, r0, #20
 80077f2:	3114      	adds	r1, #20
 80077f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80077f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80077fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007800:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007804:	42a5      	cmp	r5, r4
 8007806:	d003      	beq.n	8007810 <__mcmp+0x2c>
 8007808:	d305      	bcc.n	8007816 <__mcmp+0x32>
 800780a:	2201      	movs	r2, #1
 800780c:	4610      	mov	r0, r2
 800780e:	bd30      	pop	{r4, r5, pc}
 8007810:	4283      	cmp	r3, r0
 8007812:	d3f3      	bcc.n	80077fc <__mcmp+0x18>
 8007814:	e7fa      	b.n	800780c <__mcmp+0x28>
 8007816:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800781a:	e7f7      	b.n	800780c <__mcmp+0x28>

0800781c <__mdiff>:
 800781c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007820:	460c      	mov	r4, r1
 8007822:	4606      	mov	r6, r0
 8007824:	4611      	mov	r1, r2
 8007826:	4620      	mov	r0, r4
 8007828:	4690      	mov	r8, r2
 800782a:	f7ff ffdb 	bl	80077e4 <__mcmp>
 800782e:	1e05      	subs	r5, r0, #0
 8007830:	d110      	bne.n	8007854 <__mdiff+0x38>
 8007832:	4629      	mov	r1, r5
 8007834:	4630      	mov	r0, r6
 8007836:	f7ff fd53 	bl	80072e0 <_Balloc>
 800783a:	b930      	cbnz	r0, 800784a <__mdiff+0x2e>
 800783c:	4b3a      	ldr	r3, [pc, #232]	; (8007928 <__mdiff+0x10c>)
 800783e:	4602      	mov	r2, r0
 8007840:	f240 2132 	movw	r1, #562	; 0x232
 8007844:	4839      	ldr	r0, [pc, #228]	; (800792c <__mdiff+0x110>)
 8007846:	f000 fc45 	bl	80080d4 <__assert_func>
 800784a:	2301      	movs	r3, #1
 800784c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007850:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007854:	bfa4      	itt	ge
 8007856:	4643      	movge	r3, r8
 8007858:	46a0      	movge	r8, r4
 800785a:	4630      	mov	r0, r6
 800785c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007860:	bfa6      	itte	ge
 8007862:	461c      	movge	r4, r3
 8007864:	2500      	movge	r5, #0
 8007866:	2501      	movlt	r5, #1
 8007868:	f7ff fd3a 	bl	80072e0 <_Balloc>
 800786c:	b920      	cbnz	r0, 8007878 <__mdiff+0x5c>
 800786e:	4b2e      	ldr	r3, [pc, #184]	; (8007928 <__mdiff+0x10c>)
 8007870:	4602      	mov	r2, r0
 8007872:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007876:	e7e5      	b.n	8007844 <__mdiff+0x28>
 8007878:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800787c:	6926      	ldr	r6, [r4, #16]
 800787e:	60c5      	str	r5, [r0, #12]
 8007880:	f104 0914 	add.w	r9, r4, #20
 8007884:	f108 0514 	add.w	r5, r8, #20
 8007888:	f100 0e14 	add.w	lr, r0, #20
 800788c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007890:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007894:	f108 0210 	add.w	r2, r8, #16
 8007898:	46f2      	mov	sl, lr
 800789a:	2100      	movs	r1, #0
 800789c:	f859 3b04 	ldr.w	r3, [r9], #4
 80078a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80078a4:	fa1f f883 	uxth.w	r8, r3
 80078a8:	fa11 f18b 	uxtah	r1, r1, fp
 80078ac:	0c1b      	lsrs	r3, r3, #16
 80078ae:	eba1 0808 	sub.w	r8, r1, r8
 80078b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80078b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80078ba:	fa1f f888 	uxth.w	r8, r8
 80078be:	1419      	asrs	r1, r3, #16
 80078c0:	454e      	cmp	r6, r9
 80078c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80078c6:	f84a 3b04 	str.w	r3, [sl], #4
 80078ca:	d8e7      	bhi.n	800789c <__mdiff+0x80>
 80078cc:	1b33      	subs	r3, r6, r4
 80078ce:	3b15      	subs	r3, #21
 80078d0:	f023 0303 	bic.w	r3, r3, #3
 80078d4:	3304      	adds	r3, #4
 80078d6:	3415      	adds	r4, #21
 80078d8:	42a6      	cmp	r6, r4
 80078da:	bf38      	it	cc
 80078dc:	2304      	movcc	r3, #4
 80078de:	441d      	add	r5, r3
 80078e0:	4473      	add	r3, lr
 80078e2:	469e      	mov	lr, r3
 80078e4:	462e      	mov	r6, r5
 80078e6:	4566      	cmp	r6, ip
 80078e8:	d30e      	bcc.n	8007908 <__mdiff+0xec>
 80078ea:	f10c 0203 	add.w	r2, ip, #3
 80078ee:	1b52      	subs	r2, r2, r5
 80078f0:	f022 0203 	bic.w	r2, r2, #3
 80078f4:	3d03      	subs	r5, #3
 80078f6:	45ac      	cmp	ip, r5
 80078f8:	bf38      	it	cc
 80078fa:	2200      	movcc	r2, #0
 80078fc:	441a      	add	r2, r3
 80078fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007902:	b17b      	cbz	r3, 8007924 <__mdiff+0x108>
 8007904:	6107      	str	r7, [r0, #16]
 8007906:	e7a3      	b.n	8007850 <__mdiff+0x34>
 8007908:	f856 8b04 	ldr.w	r8, [r6], #4
 800790c:	fa11 f288 	uxtah	r2, r1, r8
 8007910:	1414      	asrs	r4, r2, #16
 8007912:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007916:	b292      	uxth	r2, r2
 8007918:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800791c:	f84e 2b04 	str.w	r2, [lr], #4
 8007920:	1421      	asrs	r1, r4, #16
 8007922:	e7e0      	b.n	80078e6 <__mdiff+0xca>
 8007924:	3f01      	subs	r7, #1
 8007926:	e7ea      	b.n	80078fe <__mdiff+0xe2>
 8007928:	08008d8f 	.word	0x08008d8f
 800792c:	08008e00 	.word	0x08008e00

08007930 <__d2b>:
 8007930:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007934:	4689      	mov	r9, r1
 8007936:	2101      	movs	r1, #1
 8007938:	ec57 6b10 	vmov	r6, r7, d0
 800793c:	4690      	mov	r8, r2
 800793e:	f7ff fccf 	bl	80072e0 <_Balloc>
 8007942:	4604      	mov	r4, r0
 8007944:	b930      	cbnz	r0, 8007954 <__d2b+0x24>
 8007946:	4602      	mov	r2, r0
 8007948:	4b25      	ldr	r3, [pc, #148]	; (80079e0 <__d2b+0xb0>)
 800794a:	4826      	ldr	r0, [pc, #152]	; (80079e4 <__d2b+0xb4>)
 800794c:	f240 310a 	movw	r1, #778	; 0x30a
 8007950:	f000 fbc0 	bl	80080d4 <__assert_func>
 8007954:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007958:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800795c:	bb35      	cbnz	r5, 80079ac <__d2b+0x7c>
 800795e:	2e00      	cmp	r6, #0
 8007960:	9301      	str	r3, [sp, #4]
 8007962:	d028      	beq.n	80079b6 <__d2b+0x86>
 8007964:	4668      	mov	r0, sp
 8007966:	9600      	str	r6, [sp, #0]
 8007968:	f7ff fd82 	bl	8007470 <__lo0bits>
 800796c:	9900      	ldr	r1, [sp, #0]
 800796e:	b300      	cbz	r0, 80079b2 <__d2b+0x82>
 8007970:	9a01      	ldr	r2, [sp, #4]
 8007972:	f1c0 0320 	rsb	r3, r0, #32
 8007976:	fa02 f303 	lsl.w	r3, r2, r3
 800797a:	430b      	orrs	r3, r1
 800797c:	40c2      	lsrs	r2, r0
 800797e:	6163      	str	r3, [r4, #20]
 8007980:	9201      	str	r2, [sp, #4]
 8007982:	9b01      	ldr	r3, [sp, #4]
 8007984:	61a3      	str	r3, [r4, #24]
 8007986:	2b00      	cmp	r3, #0
 8007988:	bf14      	ite	ne
 800798a:	2202      	movne	r2, #2
 800798c:	2201      	moveq	r2, #1
 800798e:	6122      	str	r2, [r4, #16]
 8007990:	b1d5      	cbz	r5, 80079c8 <__d2b+0x98>
 8007992:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007996:	4405      	add	r5, r0
 8007998:	f8c9 5000 	str.w	r5, [r9]
 800799c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80079a0:	f8c8 0000 	str.w	r0, [r8]
 80079a4:	4620      	mov	r0, r4
 80079a6:	b003      	add	sp, #12
 80079a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079b0:	e7d5      	b.n	800795e <__d2b+0x2e>
 80079b2:	6161      	str	r1, [r4, #20]
 80079b4:	e7e5      	b.n	8007982 <__d2b+0x52>
 80079b6:	a801      	add	r0, sp, #4
 80079b8:	f7ff fd5a 	bl	8007470 <__lo0bits>
 80079bc:	9b01      	ldr	r3, [sp, #4]
 80079be:	6163      	str	r3, [r4, #20]
 80079c0:	2201      	movs	r2, #1
 80079c2:	6122      	str	r2, [r4, #16]
 80079c4:	3020      	adds	r0, #32
 80079c6:	e7e3      	b.n	8007990 <__d2b+0x60>
 80079c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80079cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80079d0:	f8c9 0000 	str.w	r0, [r9]
 80079d4:	6918      	ldr	r0, [r3, #16]
 80079d6:	f7ff fd2b 	bl	8007430 <__hi0bits>
 80079da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80079de:	e7df      	b.n	80079a0 <__d2b+0x70>
 80079e0:	08008d8f 	.word	0x08008d8f
 80079e4:	08008e00 	.word	0x08008e00

080079e8 <_calloc_r>:
 80079e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079ea:	fba1 2402 	umull	r2, r4, r1, r2
 80079ee:	b94c      	cbnz	r4, 8007a04 <_calloc_r+0x1c>
 80079f0:	4611      	mov	r1, r2
 80079f2:	9201      	str	r2, [sp, #4]
 80079f4:	f000 f87a 	bl	8007aec <_malloc_r>
 80079f8:	9a01      	ldr	r2, [sp, #4]
 80079fa:	4605      	mov	r5, r0
 80079fc:	b930      	cbnz	r0, 8007a0c <_calloc_r+0x24>
 80079fe:	4628      	mov	r0, r5
 8007a00:	b003      	add	sp, #12
 8007a02:	bd30      	pop	{r4, r5, pc}
 8007a04:	220c      	movs	r2, #12
 8007a06:	6002      	str	r2, [r0, #0]
 8007a08:	2500      	movs	r5, #0
 8007a0a:	e7f8      	b.n	80079fe <_calloc_r+0x16>
 8007a0c:	4621      	mov	r1, r4
 8007a0e:	f7fe f85b 	bl	8005ac8 <memset>
 8007a12:	e7f4      	b.n	80079fe <_calloc_r+0x16>

08007a14 <_free_r>:
 8007a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a16:	2900      	cmp	r1, #0
 8007a18:	d044      	beq.n	8007aa4 <_free_r+0x90>
 8007a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a1e:	9001      	str	r0, [sp, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f1a1 0404 	sub.w	r4, r1, #4
 8007a26:	bfb8      	it	lt
 8007a28:	18e4      	addlt	r4, r4, r3
 8007a2a:	f000 fcdf 	bl	80083ec <__malloc_lock>
 8007a2e:	4a1e      	ldr	r2, [pc, #120]	; (8007aa8 <_free_r+0x94>)
 8007a30:	9801      	ldr	r0, [sp, #4]
 8007a32:	6813      	ldr	r3, [r2, #0]
 8007a34:	b933      	cbnz	r3, 8007a44 <_free_r+0x30>
 8007a36:	6063      	str	r3, [r4, #4]
 8007a38:	6014      	str	r4, [r2, #0]
 8007a3a:	b003      	add	sp, #12
 8007a3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a40:	f000 bcda 	b.w	80083f8 <__malloc_unlock>
 8007a44:	42a3      	cmp	r3, r4
 8007a46:	d908      	bls.n	8007a5a <_free_r+0x46>
 8007a48:	6825      	ldr	r5, [r4, #0]
 8007a4a:	1961      	adds	r1, r4, r5
 8007a4c:	428b      	cmp	r3, r1
 8007a4e:	bf01      	itttt	eq
 8007a50:	6819      	ldreq	r1, [r3, #0]
 8007a52:	685b      	ldreq	r3, [r3, #4]
 8007a54:	1949      	addeq	r1, r1, r5
 8007a56:	6021      	streq	r1, [r4, #0]
 8007a58:	e7ed      	b.n	8007a36 <_free_r+0x22>
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	b10b      	cbz	r3, 8007a64 <_free_r+0x50>
 8007a60:	42a3      	cmp	r3, r4
 8007a62:	d9fa      	bls.n	8007a5a <_free_r+0x46>
 8007a64:	6811      	ldr	r1, [r2, #0]
 8007a66:	1855      	adds	r5, r2, r1
 8007a68:	42a5      	cmp	r5, r4
 8007a6a:	d10b      	bne.n	8007a84 <_free_r+0x70>
 8007a6c:	6824      	ldr	r4, [r4, #0]
 8007a6e:	4421      	add	r1, r4
 8007a70:	1854      	adds	r4, r2, r1
 8007a72:	42a3      	cmp	r3, r4
 8007a74:	6011      	str	r1, [r2, #0]
 8007a76:	d1e0      	bne.n	8007a3a <_free_r+0x26>
 8007a78:	681c      	ldr	r4, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	6053      	str	r3, [r2, #4]
 8007a7e:	4421      	add	r1, r4
 8007a80:	6011      	str	r1, [r2, #0]
 8007a82:	e7da      	b.n	8007a3a <_free_r+0x26>
 8007a84:	d902      	bls.n	8007a8c <_free_r+0x78>
 8007a86:	230c      	movs	r3, #12
 8007a88:	6003      	str	r3, [r0, #0]
 8007a8a:	e7d6      	b.n	8007a3a <_free_r+0x26>
 8007a8c:	6825      	ldr	r5, [r4, #0]
 8007a8e:	1961      	adds	r1, r4, r5
 8007a90:	428b      	cmp	r3, r1
 8007a92:	bf04      	itt	eq
 8007a94:	6819      	ldreq	r1, [r3, #0]
 8007a96:	685b      	ldreq	r3, [r3, #4]
 8007a98:	6063      	str	r3, [r4, #4]
 8007a9a:	bf04      	itt	eq
 8007a9c:	1949      	addeq	r1, r1, r5
 8007a9e:	6021      	streq	r1, [r4, #0]
 8007aa0:	6054      	str	r4, [r2, #4]
 8007aa2:	e7ca      	b.n	8007a3a <_free_r+0x26>
 8007aa4:	b003      	add	sp, #12
 8007aa6:	bd30      	pop	{r4, r5, pc}
 8007aa8:	2000025c 	.word	0x2000025c

08007aac <sbrk_aligned>:
 8007aac:	b570      	push	{r4, r5, r6, lr}
 8007aae:	4e0e      	ldr	r6, [pc, #56]	; (8007ae8 <sbrk_aligned+0x3c>)
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	6831      	ldr	r1, [r6, #0]
 8007ab4:	4605      	mov	r5, r0
 8007ab6:	b911      	cbnz	r1, 8007abe <sbrk_aligned+0x12>
 8007ab8:	f000 f9e6 	bl	8007e88 <_sbrk_r>
 8007abc:	6030      	str	r0, [r6, #0]
 8007abe:	4621      	mov	r1, r4
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	f000 f9e1 	bl	8007e88 <_sbrk_r>
 8007ac6:	1c43      	adds	r3, r0, #1
 8007ac8:	d00a      	beq.n	8007ae0 <sbrk_aligned+0x34>
 8007aca:	1cc4      	adds	r4, r0, #3
 8007acc:	f024 0403 	bic.w	r4, r4, #3
 8007ad0:	42a0      	cmp	r0, r4
 8007ad2:	d007      	beq.n	8007ae4 <sbrk_aligned+0x38>
 8007ad4:	1a21      	subs	r1, r4, r0
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	f000 f9d6 	bl	8007e88 <_sbrk_r>
 8007adc:	3001      	adds	r0, #1
 8007ade:	d101      	bne.n	8007ae4 <sbrk_aligned+0x38>
 8007ae0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	bd70      	pop	{r4, r5, r6, pc}
 8007ae8:	20000260 	.word	0x20000260

08007aec <_malloc_r>:
 8007aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af0:	1ccd      	adds	r5, r1, #3
 8007af2:	f025 0503 	bic.w	r5, r5, #3
 8007af6:	3508      	adds	r5, #8
 8007af8:	2d0c      	cmp	r5, #12
 8007afa:	bf38      	it	cc
 8007afc:	250c      	movcc	r5, #12
 8007afe:	2d00      	cmp	r5, #0
 8007b00:	4607      	mov	r7, r0
 8007b02:	db01      	blt.n	8007b08 <_malloc_r+0x1c>
 8007b04:	42a9      	cmp	r1, r5
 8007b06:	d905      	bls.n	8007b14 <_malloc_r+0x28>
 8007b08:	230c      	movs	r3, #12
 8007b0a:	603b      	str	r3, [r7, #0]
 8007b0c:	2600      	movs	r6, #0
 8007b0e:	4630      	mov	r0, r6
 8007b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b14:	4e2e      	ldr	r6, [pc, #184]	; (8007bd0 <_malloc_r+0xe4>)
 8007b16:	f000 fc69 	bl	80083ec <__malloc_lock>
 8007b1a:	6833      	ldr	r3, [r6, #0]
 8007b1c:	461c      	mov	r4, r3
 8007b1e:	bb34      	cbnz	r4, 8007b6e <_malloc_r+0x82>
 8007b20:	4629      	mov	r1, r5
 8007b22:	4638      	mov	r0, r7
 8007b24:	f7ff ffc2 	bl	8007aac <sbrk_aligned>
 8007b28:	1c43      	adds	r3, r0, #1
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	d14d      	bne.n	8007bca <_malloc_r+0xde>
 8007b2e:	6834      	ldr	r4, [r6, #0]
 8007b30:	4626      	mov	r6, r4
 8007b32:	2e00      	cmp	r6, #0
 8007b34:	d140      	bne.n	8007bb8 <_malloc_r+0xcc>
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	4631      	mov	r1, r6
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	eb04 0803 	add.w	r8, r4, r3
 8007b40:	f000 f9a2 	bl	8007e88 <_sbrk_r>
 8007b44:	4580      	cmp	r8, r0
 8007b46:	d13a      	bne.n	8007bbe <_malloc_r+0xd2>
 8007b48:	6821      	ldr	r1, [r4, #0]
 8007b4a:	3503      	adds	r5, #3
 8007b4c:	1a6d      	subs	r5, r5, r1
 8007b4e:	f025 0503 	bic.w	r5, r5, #3
 8007b52:	3508      	adds	r5, #8
 8007b54:	2d0c      	cmp	r5, #12
 8007b56:	bf38      	it	cc
 8007b58:	250c      	movcc	r5, #12
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	4638      	mov	r0, r7
 8007b5e:	f7ff ffa5 	bl	8007aac <sbrk_aligned>
 8007b62:	3001      	adds	r0, #1
 8007b64:	d02b      	beq.n	8007bbe <_malloc_r+0xd2>
 8007b66:	6823      	ldr	r3, [r4, #0]
 8007b68:	442b      	add	r3, r5
 8007b6a:	6023      	str	r3, [r4, #0]
 8007b6c:	e00e      	b.n	8007b8c <_malloc_r+0xa0>
 8007b6e:	6822      	ldr	r2, [r4, #0]
 8007b70:	1b52      	subs	r2, r2, r5
 8007b72:	d41e      	bmi.n	8007bb2 <_malloc_r+0xc6>
 8007b74:	2a0b      	cmp	r2, #11
 8007b76:	d916      	bls.n	8007ba6 <_malloc_r+0xba>
 8007b78:	1961      	adds	r1, r4, r5
 8007b7a:	42a3      	cmp	r3, r4
 8007b7c:	6025      	str	r5, [r4, #0]
 8007b7e:	bf18      	it	ne
 8007b80:	6059      	strne	r1, [r3, #4]
 8007b82:	6863      	ldr	r3, [r4, #4]
 8007b84:	bf08      	it	eq
 8007b86:	6031      	streq	r1, [r6, #0]
 8007b88:	5162      	str	r2, [r4, r5]
 8007b8a:	604b      	str	r3, [r1, #4]
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	f104 060b 	add.w	r6, r4, #11
 8007b92:	f000 fc31 	bl	80083f8 <__malloc_unlock>
 8007b96:	f026 0607 	bic.w	r6, r6, #7
 8007b9a:	1d23      	adds	r3, r4, #4
 8007b9c:	1af2      	subs	r2, r6, r3
 8007b9e:	d0b6      	beq.n	8007b0e <_malloc_r+0x22>
 8007ba0:	1b9b      	subs	r3, r3, r6
 8007ba2:	50a3      	str	r3, [r4, r2]
 8007ba4:	e7b3      	b.n	8007b0e <_malloc_r+0x22>
 8007ba6:	6862      	ldr	r2, [r4, #4]
 8007ba8:	42a3      	cmp	r3, r4
 8007baa:	bf0c      	ite	eq
 8007bac:	6032      	streq	r2, [r6, #0]
 8007bae:	605a      	strne	r2, [r3, #4]
 8007bb0:	e7ec      	b.n	8007b8c <_malloc_r+0xa0>
 8007bb2:	4623      	mov	r3, r4
 8007bb4:	6864      	ldr	r4, [r4, #4]
 8007bb6:	e7b2      	b.n	8007b1e <_malloc_r+0x32>
 8007bb8:	4634      	mov	r4, r6
 8007bba:	6876      	ldr	r6, [r6, #4]
 8007bbc:	e7b9      	b.n	8007b32 <_malloc_r+0x46>
 8007bbe:	230c      	movs	r3, #12
 8007bc0:	603b      	str	r3, [r7, #0]
 8007bc2:	4638      	mov	r0, r7
 8007bc4:	f000 fc18 	bl	80083f8 <__malloc_unlock>
 8007bc8:	e7a1      	b.n	8007b0e <_malloc_r+0x22>
 8007bca:	6025      	str	r5, [r4, #0]
 8007bcc:	e7de      	b.n	8007b8c <_malloc_r+0xa0>
 8007bce:	bf00      	nop
 8007bd0:	2000025c 	.word	0x2000025c

08007bd4 <__sfputc_r>:
 8007bd4:	6893      	ldr	r3, [r2, #8]
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	b410      	push	{r4}
 8007bdc:	6093      	str	r3, [r2, #8]
 8007bde:	da08      	bge.n	8007bf2 <__sfputc_r+0x1e>
 8007be0:	6994      	ldr	r4, [r2, #24]
 8007be2:	42a3      	cmp	r3, r4
 8007be4:	db01      	blt.n	8007bea <__sfputc_r+0x16>
 8007be6:	290a      	cmp	r1, #10
 8007be8:	d103      	bne.n	8007bf2 <__sfputc_r+0x1e>
 8007bea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bee:	f000 b99f 	b.w	8007f30 <__swbuf_r>
 8007bf2:	6813      	ldr	r3, [r2, #0]
 8007bf4:	1c58      	adds	r0, r3, #1
 8007bf6:	6010      	str	r0, [r2, #0]
 8007bf8:	7019      	strb	r1, [r3, #0]
 8007bfa:	4608      	mov	r0, r1
 8007bfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <__sfputs_r>:
 8007c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c04:	4606      	mov	r6, r0
 8007c06:	460f      	mov	r7, r1
 8007c08:	4614      	mov	r4, r2
 8007c0a:	18d5      	adds	r5, r2, r3
 8007c0c:	42ac      	cmp	r4, r5
 8007c0e:	d101      	bne.n	8007c14 <__sfputs_r+0x12>
 8007c10:	2000      	movs	r0, #0
 8007c12:	e007      	b.n	8007c24 <__sfputs_r+0x22>
 8007c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c18:	463a      	mov	r2, r7
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f7ff ffda 	bl	8007bd4 <__sfputc_r>
 8007c20:	1c43      	adds	r3, r0, #1
 8007c22:	d1f3      	bne.n	8007c0c <__sfputs_r+0xa>
 8007c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c28 <_vfiprintf_r>:
 8007c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c2c:	460d      	mov	r5, r1
 8007c2e:	b09d      	sub	sp, #116	; 0x74
 8007c30:	4614      	mov	r4, r2
 8007c32:	4698      	mov	r8, r3
 8007c34:	4606      	mov	r6, r0
 8007c36:	b118      	cbz	r0, 8007c40 <_vfiprintf_r+0x18>
 8007c38:	6983      	ldr	r3, [r0, #24]
 8007c3a:	b90b      	cbnz	r3, 8007c40 <_vfiprintf_r+0x18>
 8007c3c:	f7ff faa2 	bl	8007184 <__sinit>
 8007c40:	4b89      	ldr	r3, [pc, #548]	; (8007e68 <_vfiprintf_r+0x240>)
 8007c42:	429d      	cmp	r5, r3
 8007c44:	d11b      	bne.n	8007c7e <_vfiprintf_r+0x56>
 8007c46:	6875      	ldr	r5, [r6, #4]
 8007c48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c4a:	07d9      	lsls	r1, r3, #31
 8007c4c:	d405      	bmi.n	8007c5a <_vfiprintf_r+0x32>
 8007c4e:	89ab      	ldrh	r3, [r5, #12]
 8007c50:	059a      	lsls	r2, r3, #22
 8007c52:	d402      	bmi.n	8007c5a <_vfiprintf_r+0x32>
 8007c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c56:	f7ff fb38 	bl	80072ca <__retarget_lock_acquire_recursive>
 8007c5a:	89ab      	ldrh	r3, [r5, #12]
 8007c5c:	071b      	lsls	r3, r3, #28
 8007c5e:	d501      	bpl.n	8007c64 <_vfiprintf_r+0x3c>
 8007c60:	692b      	ldr	r3, [r5, #16]
 8007c62:	b9eb      	cbnz	r3, 8007ca0 <_vfiprintf_r+0x78>
 8007c64:	4629      	mov	r1, r5
 8007c66:	4630      	mov	r0, r6
 8007c68:	f000 f9c6 	bl	8007ff8 <__swsetup_r>
 8007c6c:	b1c0      	cbz	r0, 8007ca0 <_vfiprintf_r+0x78>
 8007c6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c70:	07dc      	lsls	r4, r3, #31
 8007c72:	d50e      	bpl.n	8007c92 <_vfiprintf_r+0x6a>
 8007c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c78:	b01d      	add	sp, #116	; 0x74
 8007c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7e:	4b7b      	ldr	r3, [pc, #492]	; (8007e6c <_vfiprintf_r+0x244>)
 8007c80:	429d      	cmp	r5, r3
 8007c82:	d101      	bne.n	8007c88 <_vfiprintf_r+0x60>
 8007c84:	68b5      	ldr	r5, [r6, #8]
 8007c86:	e7df      	b.n	8007c48 <_vfiprintf_r+0x20>
 8007c88:	4b79      	ldr	r3, [pc, #484]	; (8007e70 <_vfiprintf_r+0x248>)
 8007c8a:	429d      	cmp	r5, r3
 8007c8c:	bf08      	it	eq
 8007c8e:	68f5      	ldreq	r5, [r6, #12]
 8007c90:	e7da      	b.n	8007c48 <_vfiprintf_r+0x20>
 8007c92:	89ab      	ldrh	r3, [r5, #12]
 8007c94:	0598      	lsls	r0, r3, #22
 8007c96:	d4ed      	bmi.n	8007c74 <_vfiprintf_r+0x4c>
 8007c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c9a:	f7ff fb17 	bl	80072cc <__retarget_lock_release_recursive>
 8007c9e:	e7e9      	b.n	8007c74 <_vfiprintf_r+0x4c>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ca4:	2320      	movs	r3, #32
 8007ca6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007caa:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cae:	2330      	movs	r3, #48	; 0x30
 8007cb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007e74 <_vfiprintf_r+0x24c>
 8007cb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cb8:	f04f 0901 	mov.w	r9, #1
 8007cbc:	4623      	mov	r3, r4
 8007cbe:	469a      	mov	sl, r3
 8007cc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cc4:	b10a      	cbz	r2, 8007cca <_vfiprintf_r+0xa2>
 8007cc6:	2a25      	cmp	r2, #37	; 0x25
 8007cc8:	d1f9      	bne.n	8007cbe <_vfiprintf_r+0x96>
 8007cca:	ebba 0b04 	subs.w	fp, sl, r4
 8007cce:	d00b      	beq.n	8007ce8 <_vfiprintf_r+0xc0>
 8007cd0:	465b      	mov	r3, fp
 8007cd2:	4622      	mov	r2, r4
 8007cd4:	4629      	mov	r1, r5
 8007cd6:	4630      	mov	r0, r6
 8007cd8:	f7ff ff93 	bl	8007c02 <__sfputs_r>
 8007cdc:	3001      	adds	r0, #1
 8007cde:	f000 80aa 	beq.w	8007e36 <_vfiprintf_r+0x20e>
 8007ce2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ce4:	445a      	add	r2, fp
 8007ce6:	9209      	str	r2, [sp, #36]	; 0x24
 8007ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	f000 80a2 	beq.w	8007e36 <_vfiprintf_r+0x20e>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cfc:	f10a 0a01 	add.w	sl, sl, #1
 8007d00:	9304      	str	r3, [sp, #16]
 8007d02:	9307      	str	r3, [sp, #28]
 8007d04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d08:	931a      	str	r3, [sp, #104]	; 0x68
 8007d0a:	4654      	mov	r4, sl
 8007d0c:	2205      	movs	r2, #5
 8007d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d12:	4858      	ldr	r0, [pc, #352]	; (8007e74 <_vfiprintf_r+0x24c>)
 8007d14:	f7f8 fa64 	bl	80001e0 <memchr>
 8007d18:	9a04      	ldr	r2, [sp, #16]
 8007d1a:	b9d8      	cbnz	r0, 8007d54 <_vfiprintf_r+0x12c>
 8007d1c:	06d1      	lsls	r1, r2, #27
 8007d1e:	bf44      	itt	mi
 8007d20:	2320      	movmi	r3, #32
 8007d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d26:	0713      	lsls	r3, r2, #28
 8007d28:	bf44      	itt	mi
 8007d2a:	232b      	movmi	r3, #43	; 0x2b
 8007d2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d30:	f89a 3000 	ldrb.w	r3, [sl]
 8007d34:	2b2a      	cmp	r3, #42	; 0x2a
 8007d36:	d015      	beq.n	8007d64 <_vfiprintf_r+0x13c>
 8007d38:	9a07      	ldr	r2, [sp, #28]
 8007d3a:	4654      	mov	r4, sl
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	f04f 0c0a 	mov.w	ip, #10
 8007d42:	4621      	mov	r1, r4
 8007d44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d48:	3b30      	subs	r3, #48	; 0x30
 8007d4a:	2b09      	cmp	r3, #9
 8007d4c:	d94e      	bls.n	8007dec <_vfiprintf_r+0x1c4>
 8007d4e:	b1b0      	cbz	r0, 8007d7e <_vfiprintf_r+0x156>
 8007d50:	9207      	str	r2, [sp, #28]
 8007d52:	e014      	b.n	8007d7e <_vfiprintf_r+0x156>
 8007d54:	eba0 0308 	sub.w	r3, r0, r8
 8007d58:	fa09 f303 	lsl.w	r3, r9, r3
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	9304      	str	r3, [sp, #16]
 8007d60:	46a2      	mov	sl, r4
 8007d62:	e7d2      	b.n	8007d0a <_vfiprintf_r+0xe2>
 8007d64:	9b03      	ldr	r3, [sp, #12]
 8007d66:	1d19      	adds	r1, r3, #4
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	9103      	str	r1, [sp, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	bfbb      	ittet	lt
 8007d70:	425b      	neglt	r3, r3
 8007d72:	f042 0202 	orrlt.w	r2, r2, #2
 8007d76:	9307      	strge	r3, [sp, #28]
 8007d78:	9307      	strlt	r3, [sp, #28]
 8007d7a:	bfb8      	it	lt
 8007d7c:	9204      	strlt	r2, [sp, #16]
 8007d7e:	7823      	ldrb	r3, [r4, #0]
 8007d80:	2b2e      	cmp	r3, #46	; 0x2e
 8007d82:	d10c      	bne.n	8007d9e <_vfiprintf_r+0x176>
 8007d84:	7863      	ldrb	r3, [r4, #1]
 8007d86:	2b2a      	cmp	r3, #42	; 0x2a
 8007d88:	d135      	bne.n	8007df6 <_vfiprintf_r+0x1ce>
 8007d8a:	9b03      	ldr	r3, [sp, #12]
 8007d8c:	1d1a      	adds	r2, r3, #4
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	9203      	str	r2, [sp, #12]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	bfb8      	it	lt
 8007d96:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007d9a:	3402      	adds	r4, #2
 8007d9c:	9305      	str	r3, [sp, #20]
 8007d9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e84 <_vfiprintf_r+0x25c>
 8007da2:	7821      	ldrb	r1, [r4, #0]
 8007da4:	2203      	movs	r2, #3
 8007da6:	4650      	mov	r0, sl
 8007da8:	f7f8 fa1a 	bl	80001e0 <memchr>
 8007dac:	b140      	cbz	r0, 8007dc0 <_vfiprintf_r+0x198>
 8007dae:	2340      	movs	r3, #64	; 0x40
 8007db0:	eba0 000a 	sub.w	r0, r0, sl
 8007db4:	fa03 f000 	lsl.w	r0, r3, r0
 8007db8:	9b04      	ldr	r3, [sp, #16]
 8007dba:	4303      	orrs	r3, r0
 8007dbc:	3401      	adds	r4, #1
 8007dbe:	9304      	str	r3, [sp, #16]
 8007dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc4:	482c      	ldr	r0, [pc, #176]	; (8007e78 <_vfiprintf_r+0x250>)
 8007dc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dca:	2206      	movs	r2, #6
 8007dcc:	f7f8 fa08 	bl	80001e0 <memchr>
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	d03f      	beq.n	8007e54 <_vfiprintf_r+0x22c>
 8007dd4:	4b29      	ldr	r3, [pc, #164]	; (8007e7c <_vfiprintf_r+0x254>)
 8007dd6:	bb1b      	cbnz	r3, 8007e20 <_vfiprintf_r+0x1f8>
 8007dd8:	9b03      	ldr	r3, [sp, #12]
 8007dda:	3307      	adds	r3, #7
 8007ddc:	f023 0307 	bic.w	r3, r3, #7
 8007de0:	3308      	adds	r3, #8
 8007de2:	9303      	str	r3, [sp, #12]
 8007de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de6:	443b      	add	r3, r7
 8007de8:	9309      	str	r3, [sp, #36]	; 0x24
 8007dea:	e767      	b.n	8007cbc <_vfiprintf_r+0x94>
 8007dec:	fb0c 3202 	mla	r2, ip, r2, r3
 8007df0:	460c      	mov	r4, r1
 8007df2:	2001      	movs	r0, #1
 8007df4:	e7a5      	b.n	8007d42 <_vfiprintf_r+0x11a>
 8007df6:	2300      	movs	r3, #0
 8007df8:	3401      	adds	r4, #1
 8007dfa:	9305      	str	r3, [sp, #20]
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	f04f 0c0a 	mov.w	ip, #10
 8007e02:	4620      	mov	r0, r4
 8007e04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e08:	3a30      	subs	r2, #48	; 0x30
 8007e0a:	2a09      	cmp	r2, #9
 8007e0c:	d903      	bls.n	8007e16 <_vfiprintf_r+0x1ee>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0c5      	beq.n	8007d9e <_vfiprintf_r+0x176>
 8007e12:	9105      	str	r1, [sp, #20]
 8007e14:	e7c3      	b.n	8007d9e <_vfiprintf_r+0x176>
 8007e16:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e7f0      	b.n	8007e02 <_vfiprintf_r+0x1da>
 8007e20:	ab03      	add	r3, sp, #12
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	462a      	mov	r2, r5
 8007e26:	4b16      	ldr	r3, [pc, #88]	; (8007e80 <_vfiprintf_r+0x258>)
 8007e28:	a904      	add	r1, sp, #16
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	f7fd fef4 	bl	8005c18 <_printf_float>
 8007e30:	4607      	mov	r7, r0
 8007e32:	1c78      	adds	r0, r7, #1
 8007e34:	d1d6      	bne.n	8007de4 <_vfiprintf_r+0x1bc>
 8007e36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e38:	07d9      	lsls	r1, r3, #31
 8007e3a:	d405      	bmi.n	8007e48 <_vfiprintf_r+0x220>
 8007e3c:	89ab      	ldrh	r3, [r5, #12]
 8007e3e:	059a      	lsls	r2, r3, #22
 8007e40:	d402      	bmi.n	8007e48 <_vfiprintf_r+0x220>
 8007e42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e44:	f7ff fa42 	bl	80072cc <__retarget_lock_release_recursive>
 8007e48:	89ab      	ldrh	r3, [r5, #12]
 8007e4a:	065b      	lsls	r3, r3, #25
 8007e4c:	f53f af12 	bmi.w	8007c74 <_vfiprintf_r+0x4c>
 8007e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e52:	e711      	b.n	8007c78 <_vfiprintf_r+0x50>
 8007e54:	ab03      	add	r3, sp, #12
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	462a      	mov	r2, r5
 8007e5a:	4b09      	ldr	r3, [pc, #36]	; (8007e80 <_vfiprintf_r+0x258>)
 8007e5c:	a904      	add	r1, sp, #16
 8007e5e:	4630      	mov	r0, r6
 8007e60:	f7fe f97e 	bl	8006160 <_printf_i>
 8007e64:	e7e4      	b.n	8007e30 <_vfiprintf_r+0x208>
 8007e66:	bf00      	nop
 8007e68:	08008dc0 	.word	0x08008dc0
 8007e6c:	08008de0 	.word	0x08008de0
 8007e70:	08008da0 	.word	0x08008da0
 8007e74:	08008f5c 	.word	0x08008f5c
 8007e78:	08008f66 	.word	0x08008f66
 8007e7c:	08005c19 	.word	0x08005c19
 8007e80:	08007c03 	.word	0x08007c03
 8007e84:	08008f62 	.word	0x08008f62

08007e88 <_sbrk_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	4d06      	ldr	r5, [pc, #24]	; (8007ea4 <_sbrk_r+0x1c>)
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	4604      	mov	r4, r0
 8007e90:	4608      	mov	r0, r1
 8007e92:	602b      	str	r3, [r5, #0]
 8007e94:	f7fb fd16 	bl	80038c4 <_sbrk>
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	d102      	bne.n	8007ea2 <_sbrk_r+0x1a>
 8007e9c:	682b      	ldr	r3, [r5, #0]
 8007e9e:	b103      	cbz	r3, 8007ea2 <_sbrk_r+0x1a>
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	bd38      	pop	{r3, r4, r5, pc}
 8007ea4:	20000264 	.word	0x20000264

08007ea8 <__sread>:
 8007ea8:	b510      	push	{r4, lr}
 8007eaa:	460c      	mov	r4, r1
 8007eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eb0:	f000 faa8 	bl	8008404 <_read_r>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	bfab      	itete	ge
 8007eb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007eba:	89a3      	ldrhlt	r3, [r4, #12]
 8007ebc:	181b      	addge	r3, r3, r0
 8007ebe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ec2:	bfac      	ite	ge
 8007ec4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ec6:	81a3      	strhlt	r3, [r4, #12]
 8007ec8:	bd10      	pop	{r4, pc}

08007eca <__swrite>:
 8007eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ece:	461f      	mov	r7, r3
 8007ed0:	898b      	ldrh	r3, [r1, #12]
 8007ed2:	05db      	lsls	r3, r3, #23
 8007ed4:	4605      	mov	r5, r0
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	4616      	mov	r6, r2
 8007eda:	d505      	bpl.n	8007ee8 <__swrite+0x1e>
 8007edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f000 f9f8 	bl	80082d8 <_lseek_r>
 8007ee8:	89a3      	ldrh	r3, [r4, #12]
 8007eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ef2:	81a3      	strh	r3, [r4, #12]
 8007ef4:	4632      	mov	r2, r6
 8007ef6:	463b      	mov	r3, r7
 8007ef8:	4628      	mov	r0, r5
 8007efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007efe:	f000 b869 	b.w	8007fd4 <_write_r>

08007f02 <__sseek>:
 8007f02:	b510      	push	{r4, lr}
 8007f04:	460c      	mov	r4, r1
 8007f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f0a:	f000 f9e5 	bl	80082d8 <_lseek_r>
 8007f0e:	1c43      	adds	r3, r0, #1
 8007f10:	89a3      	ldrh	r3, [r4, #12]
 8007f12:	bf15      	itete	ne
 8007f14:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f1e:	81a3      	strheq	r3, [r4, #12]
 8007f20:	bf18      	it	ne
 8007f22:	81a3      	strhne	r3, [r4, #12]
 8007f24:	bd10      	pop	{r4, pc}

08007f26 <__sclose>:
 8007f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f2a:	f000 b8f1 	b.w	8008110 <_close_r>
	...

08007f30 <__swbuf_r>:
 8007f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f32:	460e      	mov	r6, r1
 8007f34:	4614      	mov	r4, r2
 8007f36:	4605      	mov	r5, r0
 8007f38:	b118      	cbz	r0, 8007f42 <__swbuf_r+0x12>
 8007f3a:	6983      	ldr	r3, [r0, #24]
 8007f3c:	b90b      	cbnz	r3, 8007f42 <__swbuf_r+0x12>
 8007f3e:	f7ff f921 	bl	8007184 <__sinit>
 8007f42:	4b21      	ldr	r3, [pc, #132]	; (8007fc8 <__swbuf_r+0x98>)
 8007f44:	429c      	cmp	r4, r3
 8007f46:	d12b      	bne.n	8007fa0 <__swbuf_r+0x70>
 8007f48:	686c      	ldr	r4, [r5, #4]
 8007f4a:	69a3      	ldr	r3, [r4, #24]
 8007f4c:	60a3      	str	r3, [r4, #8]
 8007f4e:	89a3      	ldrh	r3, [r4, #12]
 8007f50:	071a      	lsls	r2, r3, #28
 8007f52:	d52f      	bpl.n	8007fb4 <__swbuf_r+0x84>
 8007f54:	6923      	ldr	r3, [r4, #16]
 8007f56:	b36b      	cbz	r3, 8007fb4 <__swbuf_r+0x84>
 8007f58:	6923      	ldr	r3, [r4, #16]
 8007f5a:	6820      	ldr	r0, [r4, #0]
 8007f5c:	1ac0      	subs	r0, r0, r3
 8007f5e:	6963      	ldr	r3, [r4, #20]
 8007f60:	b2f6      	uxtb	r6, r6
 8007f62:	4283      	cmp	r3, r0
 8007f64:	4637      	mov	r7, r6
 8007f66:	dc04      	bgt.n	8007f72 <__swbuf_r+0x42>
 8007f68:	4621      	mov	r1, r4
 8007f6a:	4628      	mov	r0, r5
 8007f6c:	f000 f966 	bl	800823c <_fflush_r>
 8007f70:	bb30      	cbnz	r0, 8007fc0 <__swbuf_r+0x90>
 8007f72:	68a3      	ldr	r3, [r4, #8]
 8007f74:	3b01      	subs	r3, #1
 8007f76:	60a3      	str	r3, [r4, #8]
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	1c5a      	adds	r2, r3, #1
 8007f7c:	6022      	str	r2, [r4, #0]
 8007f7e:	701e      	strb	r6, [r3, #0]
 8007f80:	6963      	ldr	r3, [r4, #20]
 8007f82:	3001      	adds	r0, #1
 8007f84:	4283      	cmp	r3, r0
 8007f86:	d004      	beq.n	8007f92 <__swbuf_r+0x62>
 8007f88:	89a3      	ldrh	r3, [r4, #12]
 8007f8a:	07db      	lsls	r3, r3, #31
 8007f8c:	d506      	bpl.n	8007f9c <__swbuf_r+0x6c>
 8007f8e:	2e0a      	cmp	r6, #10
 8007f90:	d104      	bne.n	8007f9c <__swbuf_r+0x6c>
 8007f92:	4621      	mov	r1, r4
 8007f94:	4628      	mov	r0, r5
 8007f96:	f000 f951 	bl	800823c <_fflush_r>
 8007f9a:	b988      	cbnz	r0, 8007fc0 <__swbuf_r+0x90>
 8007f9c:	4638      	mov	r0, r7
 8007f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fa0:	4b0a      	ldr	r3, [pc, #40]	; (8007fcc <__swbuf_r+0x9c>)
 8007fa2:	429c      	cmp	r4, r3
 8007fa4:	d101      	bne.n	8007faa <__swbuf_r+0x7a>
 8007fa6:	68ac      	ldr	r4, [r5, #8]
 8007fa8:	e7cf      	b.n	8007f4a <__swbuf_r+0x1a>
 8007faa:	4b09      	ldr	r3, [pc, #36]	; (8007fd0 <__swbuf_r+0xa0>)
 8007fac:	429c      	cmp	r4, r3
 8007fae:	bf08      	it	eq
 8007fb0:	68ec      	ldreq	r4, [r5, #12]
 8007fb2:	e7ca      	b.n	8007f4a <__swbuf_r+0x1a>
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	f000 f81e 	bl	8007ff8 <__swsetup_r>
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d0cb      	beq.n	8007f58 <__swbuf_r+0x28>
 8007fc0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007fc4:	e7ea      	b.n	8007f9c <__swbuf_r+0x6c>
 8007fc6:	bf00      	nop
 8007fc8:	08008dc0 	.word	0x08008dc0
 8007fcc:	08008de0 	.word	0x08008de0
 8007fd0:	08008da0 	.word	0x08008da0

08007fd4 <_write_r>:
 8007fd4:	b538      	push	{r3, r4, r5, lr}
 8007fd6:	4d07      	ldr	r5, [pc, #28]	; (8007ff4 <_write_r+0x20>)
 8007fd8:	4604      	mov	r4, r0
 8007fda:	4608      	mov	r0, r1
 8007fdc:	4611      	mov	r1, r2
 8007fde:	2200      	movs	r2, #0
 8007fe0:	602a      	str	r2, [r5, #0]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	f7fc fa96 	bl	8004514 <_write>
 8007fe8:	1c43      	adds	r3, r0, #1
 8007fea:	d102      	bne.n	8007ff2 <_write_r+0x1e>
 8007fec:	682b      	ldr	r3, [r5, #0]
 8007fee:	b103      	cbz	r3, 8007ff2 <_write_r+0x1e>
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}
 8007ff4:	20000264 	.word	0x20000264

08007ff8 <__swsetup_r>:
 8007ff8:	4b32      	ldr	r3, [pc, #200]	; (80080c4 <__swsetup_r+0xcc>)
 8007ffa:	b570      	push	{r4, r5, r6, lr}
 8007ffc:	681d      	ldr	r5, [r3, #0]
 8007ffe:	4606      	mov	r6, r0
 8008000:	460c      	mov	r4, r1
 8008002:	b125      	cbz	r5, 800800e <__swsetup_r+0x16>
 8008004:	69ab      	ldr	r3, [r5, #24]
 8008006:	b913      	cbnz	r3, 800800e <__swsetup_r+0x16>
 8008008:	4628      	mov	r0, r5
 800800a:	f7ff f8bb 	bl	8007184 <__sinit>
 800800e:	4b2e      	ldr	r3, [pc, #184]	; (80080c8 <__swsetup_r+0xd0>)
 8008010:	429c      	cmp	r4, r3
 8008012:	d10f      	bne.n	8008034 <__swsetup_r+0x3c>
 8008014:	686c      	ldr	r4, [r5, #4]
 8008016:	89a3      	ldrh	r3, [r4, #12]
 8008018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800801c:	0719      	lsls	r1, r3, #28
 800801e:	d42c      	bmi.n	800807a <__swsetup_r+0x82>
 8008020:	06dd      	lsls	r5, r3, #27
 8008022:	d411      	bmi.n	8008048 <__swsetup_r+0x50>
 8008024:	2309      	movs	r3, #9
 8008026:	6033      	str	r3, [r6, #0]
 8008028:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800802c:	81a3      	strh	r3, [r4, #12]
 800802e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008032:	e03e      	b.n	80080b2 <__swsetup_r+0xba>
 8008034:	4b25      	ldr	r3, [pc, #148]	; (80080cc <__swsetup_r+0xd4>)
 8008036:	429c      	cmp	r4, r3
 8008038:	d101      	bne.n	800803e <__swsetup_r+0x46>
 800803a:	68ac      	ldr	r4, [r5, #8]
 800803c:	e7eb      	b.n	8008016 <__swsetup_r+0x1e>
 800803e:	4b24      	ldr	r3, [pc, #144]	; (80080d0 <__swsetup_r+0xd8>)
 8008040:	429c      	cmp	r4, r3
 8008042:	bf08      	it	eq
 8008044:	68ec      	ldreq	r4, [r5, #12]
 8008046:	e7e6      	b.n	8008016 <__swsetup_r+0x1e>
 8008048:	0758      	lsls	r0, r3, #29
 800804a:	d512      	bpl.n	8008072 <__swsetup_r+0x7a>
 800804c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800804e:	b141      	cbz	r1, 8008062 <__swsetup_r+0x6a>
 8008050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008054:	4299      	cmp	r1, r3
 8008056:	d002      	beq.n	800805e <__swsetup_r+0x66>
 8008058:	4630      	mov	r0, r6
 800805a:	f7ff fcdb 	bl	8007a14 <_free_r>
 800805e:	2300      	movs	r3, #0
 8008060:	6363      	str	r3, [r4, #52]	; 0x34
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008068:	81a3      	strh	r3, [r4, #12]
 800806a:	2300      	movs	r3, #0
 800806c:	6063      	str	r3, [r4, #4]
 800806e:	6923      	ldr	r3, [r4, #16]
 8008070:	6023      	str	r3, [r4, #0]
 8008072:	89a3      	ldrh	r3, [r4, #12]
 8008074:	f043 0308 	orr.w	r3, r3, #8
 8008078:	81a3      	strh	r3, [r4, #12]
 800807a:	6923      	ldr	r3, [r4, #16]
 800807c:	b94b      	cbnz	r3, 8008092 <__swsetup_r+0x9a>
 800807e:	89a3      	ldrh	r3, [r4, #12]
 8008080:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008088:	d003      	beq.n	8008092 <__swsetup_r+0x9a>
 800808a:	4621      	mov	r1, r4
 800808c:	4630      	mov	r0, r6
 800808e:	f000 f95b 	bl	8008348 <__smakebuf_r>
 8008092:	89a0      	ldrh	r0, [r4, #12]
 8008094:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008098:	f010 0301 	ands.w	r3, r0, #1
 800809c:	d00a      	beq.n	80080b4 <__swsetup_r+0xbc>
 800809e:	2300      	movs	r3, #0
 80080a0:	60a3      	str	r3, [r4, #8]
 80080a2:	6963      	ldr	r3, [r4, #20]
 80080a4:	425b      	negs	r3, r3
 80080a6:	61a3      	str	r3, [r4, #24]
 80080a8:	6923      	ldr	r3, [r4, #16]
 80080aa:	b943      	cbnz	r3, 80080be <__swsetup_r+0xc6>
 80080ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080b0:	d1ba      	bne.n	8008028 <__swsetup_r+0x30>
 80080b2:	bd70      	pop	{r4, r5, r6, pc}
 80080b4:	0781      	lsls	r1, r0, #30
 80080b6:	bf58      	it	pl
 80080b8:	6963      	ldrpl	r3, [r4, #20]
 80080ba:	60a3      	str	r3, [r4, #8]
 80080bc:	e7f4      	b.n	80080a8 <__swsetup_r+0xb0>
 80080be:	2000      	movs	r0, #0
 80080c0:	e7f7      	b.n	80080b2 <__swsetup_r+0xba>
 80080c2:	bf00      	nop
 80080c4:	20000018 	.word	0x20000018
 80080c8:	08008dc0 	.word	0x08008dc0
 80080cc:	08008de0 	.word	0x08008de0
 80080d0:	08008da0 	.word	0x08008da0

080080d4 <__assert_func>:
 80080d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080d6:	4614      	mov	r4, r2
 80080d8:	461a      	mov	r2, r3
 80080da:	4b09      	ldr	r3, [pc, #36]	; (8008100 <__assert_func+0x2c>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4605      	mov	r5, r0
 80080e0:	68d8      	ldr	r0, [r3, #12]
 80080e2:	b14c      	cbz	r4, 80080f8 <__assert_func+0x24>
 80080e4:	4b07      	ldr	r3, [pc, #28]	; (8008104 <__assert_func+0x30>)
 80080e6:	9100      	str	r1, [sp, #0]
 80080e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080ec:	4906      	ldr	r1, [pc, #24]	; (8008108 <__assert_func+0x34>)
 80080ee:	462b      	mov	r3, r5
 80080f0:	f000 f8e0 	bl	80082b4 <fiprintf>
 80080f4:	f000 f9a5 	bl	8008442 <abort>
 80080f8:	4b04      	ldr	r3, [pc, #16]	; (800810c <__assert_func+0x38>)
 80080fa:	461c      	mov	r4, r3
 80080fc:	e7f3      	b.n	80080e6 <__assert_func+0x12>
 80080fe:	bf00      	nop
 8008100:	20000018 	.word	0x20000018
 8008104:	08008f6d 	.word	0x08008f6d
 8008108:	08008f7a 	.word	0x08008f7a
 800810c:	08008fa8 	.word	0x08008fa8

08008110 <_close_r>:
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	4d06      	ldr	r5, [pc, #24]	; (800812c <_close_r+0x1c>)
 8008114:	2300      	movs	r3, #0
 8008116:	4604      	mov	r4, r0
 8008118:	4608      	mov	r0, r1
 800811a:	602b      	str	r3, [r5, #0]
 800811c:	f7fb fb9d 	bl	800385a <_close>
 8008120:	1c43      	adds	r3, r0, #1
 8008122:	d102      	bne.n	800812a <_close_r+0x1a>
 8008124:	682b      	ldr	r3, [r5, #0]
 8008126:	b103      	cbz	r3, 800812a <_close_r+0x1a>
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	bd38      	pop	{r3, r4, r5, pc}
 800812c:	20000264 	.word	0x20000264

08008130 <__sflush_r>:
 8008130:	898a      	ldrh	r2, [r1, #12]
 8008132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008136:	4605      	mov	r5, r0
 8008138:	0710      	lsls	r0, r2, #28
 800813a:	460c      	mov	r4, r1
 800813c:	d458      	bmi.n	80081f0 <__sflush_r+0xc0>
 800813e:	684b      	ldr	r3, [r1, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	dc05      	bgt.n	8008150 <__sflush_r+0x20>
 8008144:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008146:	2b00      	cmp	r3, #0
 8008148:	dc02      	bgt.n	8008150 <__sflush_r+0x20>
 800814a:	2000      	movs	r0, #0
 800814c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008150:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008152:	2e00      	cmp	r6, #0
 8008154:	d0f9      	beq.n	800814a <__sflush_r+0x1a>
 8008156:	2300      	movs	r3, #0
 8008158:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800815c:	682f      	ldr	r7, [r5, #0]
 800815e:	602b      	str	r3, [r5, #0]
 8008160:	d032      	beq.n	80081c8 <__sflush_r+0x98>
 8008162:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008164:	89a3      	ldrh	r3, [r4, #12]
 8008166:	075a      	lsls	r2, r3, #29
 8008168:	d505      	bpl.n	8008176 <__sflush_r+0x46>
 800816a:	6863      	ldr	r3, [r4, #4]
 800816c:	1ac0      	subs	r0, r0, r3
 800816e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008170:	b10b      	cbz	r3, 8008176 <__sflush_r+0x46>
 8008172:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008174:	1ac0      	subs	r0, r0, r3
 8008176:	2300      	movs	r3, #0
 8008178:	4602      	mov	r2, r0
 800817a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800817c:	6a21      	ldr	r1, [r4, #32]
 800817e:	4628      	mov	r0, r5
 8008180:	47b0      	blx	r6
 8008182:	1c43      	adds	r3, r0, #1
 8008184:	89a3      	ldrh	r3, [r4, #12]
 8008186:	d106      	bne.n	8008196 <__sflush_r+0x66>
 8008188:	6829      	ldr	r1, [r5, #0]
 800818a:	291d      	cmp	r1, #29
 800818c:	d82c      	bhi.n	80081e8 <__sflush_r+0xb8>
 800818e:	4a2a      	ldr	r2, [pc, #168]	; (8008238 <__sflush_r+0x108>)
 8008190:	40ca      	lsrs	r2, r1
 8008192:	07d6      	lsls	r6, r2, #31
 8008194:	d528      	bpl.n	80081e8 <__sflush_r+0xb8>
 8008196:	2200      	movs	r2, #0
 8008198:	6062      	str	r2, [r4, #4]
 800819a:	04d9      	lsls	r1, r3, #19
 800819c:	6922      	ldr	r2, [r4, #16]
 800819e:	6022      	str	r2, [r4, #0]
 80081a0:	d504      	bpl.n	80081ac <__sflush_r+0x7c>
 80081a2:	1c42      	adds	r2, r0, #1
 80081a4:	d101      	bne.n	80081aa <__sflush_r+0x7a>
 80081a6:	682b      	ldr	r3, [r5, #0]
 80081a8:	b903      	cbnz	r3, 80081ac <__sflush_r+0x7c>
 80081aa:	6560      	str	r0, [r4, #84]	; 0x54
 80081ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081ae:	602f      	str	r7, [r5, #0]
 80081b0:	2900      	cmp	r1, #0
 80081b2:	d0ca      	beq.n	800814a <__sflush_r+0x1a>
 80081b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081b8:	4299      	cmp	r1, r3
 80081ba:	d002      	beq.n	80081c2 <__sflush_r+0x92>
 80081bc:	4628      	mov	r0, r5
 80081be:	f7ff fc29 	bl	8007a14 <_free_r>
 80081c2:	2000      	movs	r0, #0
 80081c4:	6360      	str	r0, [r4, #52]	; 0x34
 80081c6:	e7c1      	b.n	800814c <__sflush_r+0x1c>
 80081c8:	6a21      	ldr	r1, [r4, #32]
 80081ca:	2301      	movs	r3, #1
 80081cc:	4628      	mov	r0, r5
 80081ce:	47b0      	blx	r6
 80081d0:	1c41      	adds	r1, r0, #1
 80081d2:	d1c7      	bne.n	8008164 <__sflush_r+0x34>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d0c4      	beq.n	8008164 <__sflush_r+0x34>
 80081da:	2b1d      	cmp	r3, #29
 80081dc:	d001      	beq.n	80081e2 <__sflush_r+0xb2>
 80081de:	2b16      	cmp	r3, #22
 80081e0:	d101      	bne.n	80081e6 <__sflush_r+0xb6>
 80081e2:	602f      	str	r7, [r5, #0]
 80081e4:	e7b1      	b.n	800814a <__sflush_r+0x1a>
 80081e6:	89a3      	ldrh	r3, [r4, #12]
 80081e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ec:	81a3      	strh	r3, [r4, #12]
 80081ee:	e7ad      	b.n	800814c <__sflush_r+0x1c>
 80081f0:	690f      	ldr	r7, [r1, #16]
 80081f2:	2f00      	cmp	r7, #0
 80081f4:	d0a9      	beq.n	800814a <__sflush_r+0x1a>
 80081f6:	0793      	lsls	r3, r2, #30
 80081f8:	680e      	ldr	r6, [r1, #0]
 80081fa:	bf08      	it	eq
 80081fc:	694b      	ldreq	r3, [r1, #20]
 80081fe:	600f      	str	r7, [r1, #0]
 8008200:	bf18      	it	ne
 8008202:	2300      	movne	r3, #0
 8008204:	eba6 0807 	sub.w	r8, r6, r7
 8008208:	608b      	str	r3, [r1, #8]
 800820a:	f1b8 0f00 	cmp.w	r8, #0
 800820e:	dd9c      	ble.n	800814a <__sflush_r+0x1a>
 8008210:	6a21      	ldr	r1, [r4, #32]
 8008212:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008214:	4643      	mov	r3, r8
 8008216:	463a      	mov	r2, r7
 8008218:	4628      	mov	r0, r5
 800821a:	47b0      	blx	r6
 800821c:	2800      	cmp	r0, #0
 800821e:	dc06      	bgt.n	800822e <__sflush_r+0xfe>
 8008220:	89a3      	ldrh	r3, [r4, #12]
 8008222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008226:	81a3      	strh	r3, [r4, #12]
 8008228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800822c:	e78e      	b.n	800814c <__sflush_r+0x1c>
 800822e:	4407      	add	r7, r0
 8008230:	eba8 0800 	sub.w	r8, r8, r0
 8008234:	e7e9      	b.n	800820a <__sflush_r+0xda>
 8008236:	bf00      	nop
 8008238:	20400001 	.word	0x20400001

0800823c <_fflush_r>:
 800823c:	b538      	push	{r3, r4, r5, lr}
 800823e:	690b      	ldr	r3, [r1, #16]
 8008240:	4605      	mov	r5, r0
 8008242:	460c      	mov	r4, r1
 8008244:	b913      	cbnz	r3, 800824c <_fflush_r+0x10>
 8008246:	2500      	movs	r5, #0
 8008248:	4628      	mov	r0, r5
 800824a:	bd38      	pop	{r3, r4, r5, pc}
 800824c:	b118      	cbz	r0, 8008256 <_fflush_r+0x1a>
 800824e:	6983      	ldr	r3, [r0, #24]
 8008250:	b90b      	cbnz	r3, 8008256 <_fflush_r+0x1a>
 8008252:	f7fe ff97 	bl	8007184 <__sinit>
 8008256:	4b14      	ldr	r3, [pc, #80]	; (80082a8 <_fflush_r+0x6c>)
 8008258:	429c      	cmp	r4, r3
 800825a:	d11b      	bne.n	8008294 <_fflush_r+0x58>
 800825c:	686c      	ldr	r4, [r5, #4]
 800825e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0ef      	beq.n	8008246 <_fflush_r+0xa>
 8008266:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008268:	07d0      	lsls	r0, r2, #31
 800826a:	d404      	bmi.n	8008276 <_fflush_r+0x3a>
 800826c:	0599      	lsls	r1, r3, #22
 800826e:	d402      	bmi.n	8008276 <_fflush_r+0x3a>
 8008270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008272:	f7ff f82a 	bl	80072ca <__retarget_lock_acquire_recursive>
 8008276:	4628      	mov	r0, r5
 8008278:	4621      	mov	r1, r4
 800827a:	f7ff ff59 	bl	8008130 <__sflush_r>
 800827e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008280:	07da      	lsls	r2, r3, #31
 8008282:	4605      	mov	r5, r0
 8008284:	d4e0      	bmi.n	8008248 <_fflush_r+0xc>
 8008286:	89a3      	ldrh	r3, [r4, #12]
 8008288:	059b      	lsls	r3, r3, #22
 800828a:	d4dd      	bmi.n	8008248 <_fflush_r+0xc>
 800828c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800828e:	f7ff f81d 	bl	80072cc <__retarget_lock_release_recursive>
 8008292:	e7d9      	b.n	8008248 <_fflush_r+0xc>
 8008294:	4b05      	ldr	r3, [pc, #20]	; (80082ac <_fflush_r+0x70>)
 8008296:	429c      	cmp	r4, r3
 8008298:	d101      	bne.n	800829e <_fflush_r+0x62>
 800829a:	68ac      	ldr	r4, [r5, #8]
 800829c:	e7df      	b.n	800825e <_fflush_r+0x22>
 800829e:	4b04      	ldr	r3, [pc, #16]	; (80082b0 <_fflush_r+0x74>)
 80082a0:	429c      	cmp	r4, r3
 80082a2:	bf08      	it	eq
 80082a4:	68ec      	ldreq	r4, [r5, #12]
 80082a6:	e7da      	b.n	800825e <_fflush_r+0x22>
 80082a8:	08008dc0 	.word	0x08008dc0
 80082ac:	08008de0 	.word	0x08008de0
 80082b0:	08008da0 	.word	0x08008da0

080082b4 <fiprintf>:
 80082b4:	b40e      	push	{r1, r2, r3}
 80082b6:	b503      	push	{r0, r1, lr}
 80082b8:	4601      	mov	r1, r0
 80082ba:	ab03      	add	r3, sp, #12
 80082bc:	4805      	ldr	r0, [pc, #20]	; (80082d4 <fiprintf+0x20>)
 80082be:	f853 2b04 	ldr.w	r2, [r3], #4
 80082c2:	6800      	ldr	r0, [r0, #0]
 80082c4:	9301      	str	r3, [sp, #4]
 80082c6:	f7ff fcaf 	bl	8007c28 <_vfiprintf_r>
 80082ca:	b002      	add	sp, #8
 80082cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80082d0:	b003      	add	sp, #12
 80082d2:	4770      	bx	lr
 80082d4:	20000018 	.word	0x20000018

080082d8 <_lseek_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	4d07      	ldr	r5, [pc, #28]	; (80082f8 <_lseek_r+0x20>)
 80082dc:	4604      	mov	r4, r0
 80082de:	4608      	mov	r0, r1
 80082e0:	4611      	mov	r1, r2
 80082e2:	2200      	movs	r2, #0
 80082e4:	602a      	str	r2, [r5, #0]
 80082e6:	461a      	mov	r2, r3
 80082e8:	f7fb fade 	bl	80038a8 <_lseek>
 80082ec:	1c43      	adds	r3, r0, #1
 80082ee:	d102      	bne.n	80082f6 <_lseek_r+0x1e>
 80082f0:	682b      	ldr	r3, [r5, #0]
 80082f2:	b103      	cbz	r3, 80082f6 <_lseek_r+0x1e>
 80082f4:	6023      	str	r3, [r4, #0]
 80082f6:	bd38      	pop	{r3, r4, r5, pc}
 80082f8:	20000264 	.word	0x20000264

080082fc <__swhatbuf_r>:
 80082fc:	b570      	push	{r4, r5, r6, lr}
 80082fe:	460e      	mov	r6, r1
 8008300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008304:	2900      	cmp	r1, #0
 8008306:	b096      	sub	sp, #88	; 0x58
 8008308:	4614      	mov	r4, r2
 800830a:	461d      	mov	r5, r3
 800830c:	da08      	bge.n	8008320 <__swhatbuf_r+0x24>
 800830e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	602a      	str	r2, [r5, #0]
 8008316:	061a      	lsls	r2, r3, #24
 8008318:	d410      	bmi.n	800833c <__swhatbuf_r+0x40>
 800831a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800831e:	e00e      	b.n	800833e <__swhatbuf_r+0x42>
 8008320:	466a      	mov	r2, sp
 8008322:	f000 f895 	bl	8008450 <_fstat_r>
 8008326:	2800      	cmp	r0, #0
 8008328:	dbf1      	blt.n	800830e <__swhatbuf_r+0x12>
 800832a:	9a01      	ldr	r2, [sp, #4]
 800832c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008330:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008334:	425a      	negs	r2, r3
 8008336:	415a      	adcs	r2, r3
 8008338:	602a      	str	r2, [r5, #0]
 800833a:	e7ee      	b.n	800831a <__swhatbuf_r+0x1e>
 800833c:	2340      	movs	r3, #64	; 0x40
 800833e:	2000      	movs	r0, #0
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	b016      	add	sp, #88	; 0x58
 8008344:	bd70      	pop	{r4, r5, r6, pc}
	...

08008348 <__smakebuf_r>:
 8008348:	898b      	ldrh	r3, [r1, #12]
 800834a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800834c:	079d      	lsls	r5, r3, #30
 800834e:	4606      	mov	r6, r0
 8008350:	460c      	mov	r4, r1
 8008352:	d507      	bpl.n	8008364 <__smakebuf_r+0x1c>
 8008354:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	6123      	str	r3, [r4, #16]
 800835c:	2301      	movs	r3, #1
 800835e:	6163      	str	r3, [r4, #20]
 8008360:	b002      	add	sp, #8
 8008362:	bd70      	pop	{r4, r5, r6, pc}
 8008364:	ab01      	add	r3, sp, #4
 8008366:	466a      	mov	r2, sp
 8008368:	f7ff ffc8 	bl	80082fc <__swhatbuf_r>
 800836c:	9900      	ldr	r1, [sp, #0]
 800836e:	4605      	mov	r5, r0
 8008370:	4630      	mov	r0, r6
 8008372:	f7ff fbbb 	bl	8007aec <_malloc_r>
 8008376:	b948      	cbnz	r0, 800838c <__smakebuf_r+0x44>
 8008378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800837c:	059a      	lsls	r2, r3, #22
 800837e:	d4ef      	bmi.n	8008360 <__smakebuf_r+0x18>
 8008380:	f023 0303 	bic.w	r3, r3, #3
 8008384:	f043 0302 	orr.w	r3, r3, #2
 8008388:	81a3      	strh	r3, [r4, #12]
 800838a:	e7e3      	b.n	8008354 <__smakebuf_r+0xc>
 800838c:	4b0d      	ldr	r3, [pc, #52]	; (80083c4 <__smakebuf_r+0x7c>)
 800838e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	6020      	str	r0, [r4, #0]
 8008394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008398:	81a3      	strh	r3, [r4, #12]
 800839a:	9b00      	ldr	r3, [sp, #0]
 800839c:	6163      	str	r3, [r4, #20]
 800839e:	9b01      	ldr	r3, [sp, #4]
 80083a0:	6120      	str	r0, [r4, #16]
 80083a2:	b15b      	cbz	r3, 80083bc <__smakebuf_r+0x74>
 80083a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083a8:	4630      	mov	r0, r6
 80083aa:	f000 f863 	bl	8008474 <_isatty_r>
 80083ae:	b128      	cbz	r0, 80083bc <__smakebuf_r+0x74>
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	f023 0303 	bic.w	r3, r3, #3
 80083b6:	f043 0301 	orr.w	r3, r3, #1
 80083ba:	81a3      	strh	r3, [r4, #12]
 80083bc:	89a0      	ldrh	r0, [r4, #12]
 80083be:	4305      	orrs	r5, r0
 80083c0:	81a5      	strh	r5, [r4, #12]
 80083c2:	e7cd      	b.n	8008360 <__smakebuf_r+0x18>
 80083c4:	0800711d 	.word	0x0800711d

080083c8 <__ascii_mbtowc>:
 80083c8:	b082      	sub	sp, #8
 80083ca:	b901      	cbnz	r1, 80083ce <__ascii_mbtowc+0x6>
 80083cc:	a901      	add	r1, sp, #4
 80083ce:	b142      	cbz	r2, 80083e2 <__ascii_mbtowc+0x1a>
 80083d0:	b14b      	cbz	r3, 80083e6 <__ascii_mbtowc+0x1e>
 80083d2:	7813      	ldrb	r3, [r2, #0]
 80083d4:	600b      	str	r3, [r1, #0]
 80083d6:	7812      	ldrb	r2, [r2, #0]
 80083d8:	1e10      	subs	r0, r2, #0
 80083da:	bf18      	it	ne
 80083dc:	2001      	movne	r0, #1
 80083de:	b002      	add	sp, #8
 80083e0:	4770      	bx	lr
 80083e2:	4610      	mov	r0, r2
 80083e4:	e7fb      	b.n	80083de <__ascii_mbtowc+0x16>
 80083e6:	f06f 0001 	mvn.w	r0, #1
 80083ea:	e7f8      	b.n	80083de <__ascii_mbtowc+0x16>

080083ec <__malloc_lock>:
 80083ec:	4801      	ldr	r0, [pc, #4]	; (80083f4 <__malloc_lock+0x8>)
 80083ee:	f7fe bf6c 	b.w	80072ca <__retarget_lock_acquire_recursive>
 80083f2:	bf00      	nop
 80083f4:	20000258 	.word	0x20000258

080083f8 <__malloc_unlock>:
 80083f8:	4801      	ldr	r0, [pc, #4]	; (8008400 <__malloc_unlock+0x8>)
 80083fa:	f7fe bf67 	b.w	80072cc <__retarget_lock_release_recursive>
 80083fe:	bf00      	nop
 8008400:	20000258 	.word	0x20000258

08008404 <_read_r>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	4d07      	ldr	r5, [pc, #28]	; (8008424 <_read_r+0x20>)
 8008408:	4604      	mov	r4, r0
 800840a:	4608      	mov	r0, r1
 800840c:	4611      	mov	r1, r2
 800840e:	2200      	movs	r2, #0
 8008410:	602a      	str	r2, [r5, #0]
 8008412:	461a      	mov	r2, r3
 8008414:	f7fb fa04 	bl	8003820 <_read>
 8008418:	1c43      	adds	r3, r0, #1
 800841a:	d102      	bne.n	8008422 <_read_r+0x1e>
 800841c:	682b      	ldr	r3, [r5, #0]
 800841e:	b103      	cbz	r3, 8008422 <_read_r+0x1e>
 8008420:	6023      	str	r3, [r4, #0]
 8008422:	bd38      	pop	{r3, r4, r5, pc}
 8008424:	20000264 	.word	0x20000264

08008428 <__ascii_wctomb>:
 8008428:	b149      	cbz	r1, 800843e <__ascii_wctomb+0x16>
 800842a:	2aff      	cmp	r2, #255	; 0xff
 800842c:	bf85      	ittet	hi
 800842e:	238a      	movhi	r3, #138	; 0x8a
 8008430:	6003      	strhi	r3, [r0, #0]
 8008432:	700a      	strbls	r2, [r1, #0]
 8008434:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008438:	bf98      	it	ls
 800843a:	2001      	movls	r0, #1
 800843c:	4770      	bx	lr
 800843e:	4608      	mov	r0, r1
 8008440:	4770      	bx	lr

08008442 <abort>:
 8008442:	b508      	push	{r3, lr}
 8008444:	2006      	movs	r0, #6
 8008446:	f000 f84d 	bl	80084e4 <raise>
 800844a:	2001      	movs	r0, #1
 800844c:	f7fb f9de 	bl	800380c <_exit>

08008450 <_fstat_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4d07      	ldr	r5, [pc, #28]	; (8008470 <_fstat_r+0x20>)
 8008454:	2300      	movs	r3, #0
 8008456:	4604      	mov	r4, r0
 8008458:	4608      	mov	r0, r1
 800845a:	4611      	mov	r1, r2
 800845c:	602b      	str	r3, [r5, #0]
 800845e:	f7fb fa08 	bl	8003872 <_fstat>
 8008462:	1c43      	adds	r3, r0, #1
 8008464:	d102      	bne.n	800846c <_fstat_r+0x1c>
 8008466:	682b      	ldr	r3, [r5, #0]
 8008468:	b103      	cbz	r3, 800846c <_fstat_r+0x1c>
 800846a:	6023      	str	r3, [r4, #0]
 800846c:	bd38      	pop	{r3, r4, r5, pc}
 800846e:	bf00      	nop
 8008470:	20000264 	.word	0x20000264

08008474 <_isatty_r>:
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	4d06      	ldr	r5, [pc, #24]	; (8008490 <_isatty_r+0x1c>)
 8008478:	2300      	movs	r3, #0
 800847a:	4604      	mov	r4, r0
 800847c:	4608      	mov	r0, r1
 800847e:	602b      	str	r3, [r5, #0]
 8008480:	f7fb fa07 	bl	8003892 <_isatty>
 8008484:	1c43      	adds	r3, r0, #1
 8008486:	d102      	bne.n	800848e <_isatty_r+0x1a>
 8008488:	682b      	ldr	r3, [r5, #0]
 800848a:	b103      	cbz	r3, 800848e <_isatty_r+0x1a>
 800848c:	6023      	str	r3, [r4, #0]
 800848e:	bd38      	pop	{r3, r4, r5, pc}
 8008490:	20000264 	.word	0x20000264

08008494 <_raise_r>:
 8008494:	291f      	cmp	r1, #31
 8008496:	b538      	push	{r3, r4, r5, lr}
 8008498:	4604      	mov	r4, r0
 800849a:	460d      	mov	r5, r1
 800849c:	d904      	bls.n	80084a8 <_raise_r+0x14>
 800849e:	2316      	movs	r3, #22
 80084a0:	6003      	str	r3, [r0, #0]
 80084a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80084aa:	b112      	cbz	r2, 80084b2 <_raise_r+0x1e>
 80084ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084b0:	b94b      	cbnz	r3, 80084c6 <_raise_r+0x32>
 80084b2:	4620      	mov	r0, r4
 80084b4:	f000 f830 	bl	8008518 <_getpid_r>
 80084b8:	462a      	mov	r2, r5
 80084ba:	4601      	mov	r1, r0
 80084bc:	4620      	mov	r0, r4
 80084be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084c2:	f000 b817 	b.w	80084f4 <_kill_r>
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d00a      	beq.n	80084e0 <_raise_r+0x4c>
 80084ca:	1c59      	adds	r1, r3, #1
 80084cc:	d103      	bne.n	80084d6 <_raise_r+0x42>
 80084ce:	2316      	movs	r3, #22
 80084d0:	6003      	str	r3, [r0, #0]
 80084d2:	2001      	movs	r0, #1
 80084d4:	e7e7      	b.n	80084a6 <_raise_r+0x12>
 80084d6:	2400      	movs	r4, #0
 80084d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084dc:	4628      	mov	r0, r5
 80084de:	4798      	blx	r3
 80084e0:	2000      	movs	r0, #0
 80084e2:	e7e0      	b.n	80084a6 <_raise_r+0x12>

080084e4 <raise>:
 80084e4:	4b02      	ldr	r3, [pc, #8]	; (80084f0 <raise+0xc>)
 80084e6:	4601      	mov	r1, r0
 80084e8:	6818      	ldr	r0, [r3, #0]
 80084ea:	f7ff bfd3 	b.w	8008494 <_raise_r>
 80084ee:	bf00      	nop
 80084f0:	20000018 	.word	0x20000018

080084f4 <_kill_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	4d07      	ldr	r5, [pc, #28]	; (8008514 <_kill_r+0x20>)
 80084f8:	2300      	movs	r3, #0
 80084fa:	4604      	mov	r4, r0
 80084fc:	4608      	mov	r0, r1
 80084fe:	4611      	mov	r1, r2
 8008500:	602b      	str	r3, [r5, #0]
 8008502:	f7fb f973 	bl	80037ec <_kill>
 8008506:	1c43      	adds	r3, r0, #1
 8008508:	d102      	bne.n	8008510 <_kill_r+0x1c>
 800850a:	682b      	ldr	r3, [r5, #0]
 800850c:	b103      	cbz	r3, 8008510 <_kill_r+0x1c>
 800850e:	6023      	str	r3, [r4, #0]
 8008510:	bd38      	pop	{r3, r4, r5, pc}
 8008512:	bf00      	nop
 8008514:	20000264 	.word	0x20000264

08008518 <_getpid_r>:
 8008518:	f7fb b960 	b.w	80037dc <_getpid>

0800851c <sqrt>:
 800851c:	b538      	push	{r3, r4, r5, lr}
 800851e:	ed2d 8b02 	vpush	{d8}
 8008522:	ec55 4b10 	vmov	r4, r5, d0
 8008526:	f000 f853 	bl	80085d0 <__ieee754_sqrt>
 800852a:	4622      	mov	r2, r4
 800852c:	462b      	mov	r3, r5
 800852e:	4620      	mov	r0, r4
 8008530:	4629      	mov	r1, r5
 8008532:	eeb0 8a40 	vmov.f32	s16, s0
 8008536:	eef0 8a60 	vmov.f32	s17, s1
 800853a:	f7f8 faf7 	bl	8000b2c <__aeabi_dcmpun>
 800853e:	b990      	cbnz	r0, 8008566 <sqrt+0x4a>
 8008540:	2200      	movs	r2, #0
 8008542:	2300      	movs	r3, #0
 8008544:	4620      	mov	r0, r4
 8008546:	4629      	mov	r1, r5
 8008548:	f7f8 fac8 	bl	8000adc <__aeabi_dcmplt>
 800854c:	b158      	cbz	r0, 8008566 <sqrt+0x4a>
 800854e:	f7fd fa83 	bl	8005a58 <__errno>
 8008552:	2321      	movs	r3, #33	; 0x21
 8008554:	6003      	str	r3, [r0, #0]
 8008556:	2200      	movs	r2, #0
 8008558:	2300      	movs	r3, #0
 800855a:	4610      	mov	r0, r2
 800855c:	4619      	mov	r1, r3
 800855e:	f7f8 f975 	bl	800084c <__aeabi_ddiv>
 8008562:	ec41 0b18 	vmov	d8, r0, r1
 8008566:	eeb0 0a48 	vmov.f32	s0, s16
 800856a:	eef0 0a68 	vmov.f32	s1, s17
 800856e:	ecbd 8b02 	vpop	{d8}
 8008572:	bd38      	pop	{r3, r4, r5, pc}

08008574 <asinf>:
 8008574:	b508      	push	{r3, lr}
 8008576:	ed2d 8b02 	vpush	{d8}
 800857a:	eeb0 8a40 	vmov.f32	s16, s0
 800857e:	f000 f8d9 	bl	8008734 <__ieee754_asinf>
 8008582:	eeb4 8a48 	vcmp.f32	s16, s16
 8008586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800858a:	eef0 8a40 	vmov.f32	s17, s0
 800858e:	d615      	bvs.n	80085bc <asinf+0x48>
 8008590:	eeb0 0a48 	vmov.f32	s0, s16
 8008594:	f000 fb2c 	bl	8008bf0 <fabsf>
 8008598:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800859c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80085a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a4:	dd0a      	ble.n	80085bc <asinf+0x48>
 80085a6:	f7fd fa57 	bl	8005a58 <__errno>
 80085aa:	ecbd 8b02 	vpop	{d8}
 80085ae:	2321      	movs	r3, #33	; 0x21
 80085b0:	6003      	str	r3, [r0, #0]
 80085b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80085b6:	4804      	ldr	r0, [pc, #16]	; (80085c8 <asinf+0x54>)
 80085b8:	f000 bb22 	b.w	8008c00 <nanf>
 80085bc:	eeb0 0a68 	vmov.f32	s0, s17
 80085c0:	ecbd 8b02 	vpop	{d8}
 80085c4:	bd08      	pop	{r3, pc}
 80085c6:	bf00      	nop
 80085c8:	08008fa8 	.word	0x08008fa8

080085cc <atan2f>:
 80085cc:	f000 b998 	b.w	8008900 <__ieee754_atan2f>

080085d0 <__ieee754_sqrt>:
 80085d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085d4:	ec55 4b10 	vmov	r4, r5, d0
 80085d8:	4e55      	ldr	r6, [pc, #340]	; (8008730 <__ieee754_sqrt+0x160>)
 80085da:	43ae      	bics	r6, r5
 80085dc:	ee10 0a10 	vmov	r0, s0
 80085e0:	ee10 3a10 	vmov	r3, s0
 80085e4:	462a      	mov	r2, r5
 80085e6:	4629      	mov	r1, r5
 80085e8:	d110      	bne.n	800860c <__ieee754_sqrt+0x3c>
 80085ea:	ee10 2a10 	vmov	r2, s0
 80085ee:	462b      	mov	r3, r5
 80085f0:	f7f8 f802 	bl	80005f8 <__aeabi_dmul>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	4620      	mov	r0, r4
 80085fa:	4629      	mov	r1, r5
 80085fc:	f7f7 fe46 	bl	800028c <__adddf3>
 8008600:	4604      	mov	r4, r0
 8008602:	460d      	mov	r5, r1
 8008604:	ec45 4b10 	vmov	d0, r4, r5
 8008608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800860c:	2d00      	cmp	r5, #0
 800860e:	dc10      	bgt.n	8008632 <__ieee754_sqrt+0x62>
 8008610:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008614:	4330      	orrs	r0, r6
 8008616:	d0f5      	beq.n	8008604 <__ieee754_sqrt+0x34>
 8008618:	b15d      	cbz	r5, 8008632 <__ieee754_sqrt+0x62>
 800861a:	ee10 2a10 	vmov	r2, s0
 800861e:	462b      	mov	r3, r5
 8008620:	ee10 0a10 	vmov	r0, s0
 8008624:	f7f7 fe30 	bl	8000288 <__aeabi_dsub>
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	f7f8 f90e 	bl	800084c <__aeabi_ddiv>
 8008630:	e7e6      	b.n	8008600 <__ieee754_sqrt+0x30>
 8008632:	1512      	asrs	r2, r2, #20
 8008634:	d074      	beq.n	8008720 <__ieee754_sqrt+0x150>
 8008636:	07d4      	lsls	r4, r2, #31
 8008638:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800863c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008644:	bf5e      	ittt	pl
 8008646:	0fda      	lsrpl	r2, r3, #31
 8008648:	005b      	lslpl	r3, r3, #1
 800864a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800864e:	2400      	movs	r4, #0
 8008650:	0fda      	lsrs	r2, r3, #31
 8008652:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008656:	107f      	asrs	r7, r7, #1
 8008658:	005b      	lsls	r3, r3, #1
 800865a:	2516      	movs	r5, #22
 800865c:	4620      	mov	r0, r4
 800865e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008662:	1886      	adds	r6, r0, r2
 8008664:	428e      	cmp	r6, r1
 8008666:	bfde      	ittt	le
 8008668:	1b89      	suble	r1, r1, r6
 800866a:	18b0      	addle	r0, r6, r2
 800866c:	18a4      	addle	r4, r4, r2
 800866e:	0049      	lsls	r1, r1, #1
 8008670:	3d01      	subs	r5, #1
 8008672:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008676:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800867a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800867e:	d1f0      	bne.n	8008662 <__ieee754_sqrt+0x92>
 8008680:	462a      	mov	r2, r5
 8008682:	f04f 0e20 	mov.w	lr, #32
 8008686:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800868a:	4281      	cmp	r1, r0
 800868c:	eb06 0c05 	add.w	ip, r6, r5
 8008690:	dc02      	bgt.n	8008698 <__ieee754_sqrt+0xc8>
 8008692:	d113      	bne.n	80086bc <__ieee754_sqrt+0xec>
 8008694:	459c      	cmp	ip, r3
 8008696:	d811      	bhi.n	80086bc <__ieee754_sqrt+0xec>
 8008698:	f1bc 0f00 	cmp.w	ip, #0
 800869c:	eb0c 0506 	add.w	r5, ip, r6
 80086a0:	da43      	bge.n	800872a <__ieee754_sqrt+0x15a>
 80086a2:	2d00      	cmp	r5, #0
 80086a4:	db41      	blt.n	800872a <__ieee754_sqrt+0x15a>
 80086a6:	f100 0801 	add.w	r8, r0, #1
 80086aa:	1a09      	subs	r1, r1, r0
 80086ac:	459c      	cmp	ip, r3
 80086ae:	bf88      	it	hi
 80086b0:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80086b4:	eba3 030c 	sub.w	r3, r3, ip
 80086b8:	4432      	add	r2, r6
 80086ba:	4640      	mov	r0, r8
 80086bc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80086c0:	f1be 0e01 	subs.w	lr, lr, #1
 80086c4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80086c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80086cc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80086d0:	d1db      	bne.n	800868a <__ieee754_sqrt+0xba>
 80086d2:	430b      	orrs	r3, r1
 80086d4:	d006      	beq.n	80086e4 <__ieee754_sqrt+0x114>
 80086d6:	1c50      	adds	r0, r2, #1
 80086d8:	bf13      	iteet	ne
 80086da:	3201      	addne	r2, #1
 80086dc:	3401      	addeq	r4, #1
 80086de:	4672      	moveq	r2, lr
 80086e0:	f022 0201 	bicne.w	r2, r2, #1
 80086e4:	1063      	asrs	r3, r4, #1
 80086e6:	0852      	lsrs	r2, r2, #1
 80086e8:	07e1      	lsls	r1, r4, #31
 80086ea:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80086ee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80086f2:	bf48      	it	mi
 80086f4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80086f8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80086fc:	4614      	mov	r4, r2
 80086fe:	e781      	b.n	8008604 <__ieee754_sqrt+0x34>
 8008700:	0ad9      	lsrs	r1, r3, #11
 8008702:	3815      	subs	r0, #21
 8008704:	055b      	lsls	r3, r3, #21
 8008706:	2900      	cmp	r1, #0
 8008708:	d0fa      	beq.n	8008700 <__ieee754_sqrt+0x130>
 800870a:	02cd      	lsls	r5, r1, #11
 800870c:	d50a      	bpl.n	8008724 <__ieee754_sqrt+0x154>
 800870e:	f1c2 0420 	rsb	r4, r2, #32
 8008712:	fa23 f404 	lsr.w	r4, r3, r4
 8008716:	1e55      	subs	r5, r2, #1
 8008718:	4093      	lsls	r3, r2
 800871a:	4321      	orrs	r1, r4
 800871c:	1b42      	subs	r2, r0, r5
 800871e:	e78a      	b.n	8008636 <__ieee754_sqrt+0x66>
 8008720:	4610      	mov	r0, r2
 8008722:	e7f0      	b.n	8008706 <__ieee754_sqrt+0x136>
 8008724:	0049      	lsls	r1, r1, #1
 8008726:	3201      	adds	r2, #1
 8008728:	e7ef      	b.n	800870a <__ieee754_sqrt+0x13a>
 800872a:	4680      	mov	r8, r0
 800872c:	e7bd      	b.n	80086aa <__ieee754_sqrt+0xda>
 800872e:	bf00      	nop
 8008730:	7ff00000 	.word	0x7ff00000

08008734 <__ieee754_asinf>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	ee10 5a10 	vmov	r5, s0
 800873a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800873e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8008742:	ed2d 8b04 	vpush	{d8-d9}
 8008746:	d10c      	bne.n	8008762 <__ieee754_asinf+0x2e>
 8008748:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80088c0 <__ieee754_asinf+0x18c>
 800874c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80088c4 <__ieee754_asinf+0x190>
 8008750:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008754:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008758:	eeb0 0a67 	vmov.f32	s0, s15
 800875c:	ecbd 8b04 	vpop	{d8-d9}
 8008760:	bd38      	pop	{r3, r4, r5, pc}
 8008762:	dd04      	ble.n	800876e <__ieee754_asinf+0x3a>
 8008764:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008768:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800876c:	e7f6      	b.n	800875c <__ieee754_asinf+0x28>
 800876e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8008772:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8008776:	da0b      	bge.n	8008790 <__ieee754_asinf+0x5c>
 8008778:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800877c:	da52      	bge.n	8008824 <__ieee754_asinf+0xf0>
 800877e:	eddf 7a52 	vldr	s15, [pc, #328]	; 80088c8 <__ieee754_asinf+0x194>
 8008782:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008786:	eef4 7ae8 	vcmpe.f32	s15, s17
 800878a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800878e:	dce5      	bgt.n	800875c <__ieee754_asinf+0x28>
 8008790:	f000 fa2e 	bl	8008bf0 <fabsf>
 8008794:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8008798:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800879c:	ee20 8a08 	vmul.f32	s16, s0, s16
 80087a0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 80088cc <__ieee754_asinf+0x198>
 80087a4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80088d0 <__ieee754_asinf+0x19c>
 80087a8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 80088d4 <__ieee754_asinf+0x1a0>
 80087ac:	eea8 7a27 	vfma.f32	s14, s16, s15
 80087b0:	eddf 7a49 	vldr	s15, [pc, #292]	; 80088d8 <__ieee754_asinf+0x1a4>
 80087b4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80087b8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80088dc <__ieee754_asinf+0x1a8>
 80087bc:	eea7 7a88 	vfma.f32	s14, s15, s16
 80087c0:	eddf 7a47 	vldr	s15, [pc, #284]	; 80088e0 <__ieee754_asinf+0x1ac>
 80087c4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80087c8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80088e4 <__ieee754_asinf+0x1b0>
 80087cc:	eea7 9a88 	vfma.f32	s18, s15, s16
 80087d0:	eddf 7a45 	vldr	s15, [pc, #276]	; 80088e8 <__ieee754_asinf+0x1b4>
 80087d4:	eee8 7a07 	vfma.f32	s15, s16, s14
 80087d8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80088ec <__ieee754_asinf+0x1b8>
 80087dc:	eea7 7a88 	vfma.f32	s14, s15, s16
 80087e0:	eddf 7a43 	vldr	s15, [pc, #268]	; 80088f0 <__ieee754_asinf+0x1bc>
 80087e4:	eee7 7a08 	vfma.f32	s15, s14, s16
 80087e8:	eeb0 0a48 	vmov.f32	s0, s16
 80087ec:	eee7 8a88 	vfma.f32	s17, s15, s16
 80087f0:	f000 f926 	bl	8008a40 <__ieee754_sqrtf>
 80087f4:	4b3f      	ldr	r3, [pc, #252]	; (80088f4 <__ieee754_asinf+0x1c0>)
 80087f6:	ee29 9a08 	vmul.f32	s18, s18, s16
 80087fa:	429c      	cmp	r4, r3
 80087fc:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8008800:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008804:	dd3d      	ble.n	8008882 <__ieee754_asinf+0x14e>
 8008806:	eea0 0a06 	vfma.f32	s0, s0, s12
 800880a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80088f8 <__ieee754_asinf+0x1c4>
 800880e:	eee0 7a26 	vfma.f32	s15, s0, s13
 8008812:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80088c4 <__ieee754_asinf+0x190>
 8008816:	ee30 0a67 	vsub.f32	s0, s0, s15
 800881a:	2d00      	cmp	r5, #0
 800881c:	bfd8      	it	le
 800881e:	eeb1 0a40 	vnegle.f32	s0, s0
 8008822:	e79b      	b.n	800875c <__ieee754_asinf+0x28>
 8008824:	ee60 7a00 	vmul.f32	s15, s0, s0
 8008828:	eddf 6a28 	vldr	s13, [pc, #160]	; 80088cc <__ieee754_asinf+0x198>
 800882c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80088d0 <__ieee754_asinf+0x19c>
 8008830:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80088e4 <__ieee754_asinf+0x1b0>
 8008834:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8008838:	eddf 6a27 	vldr	s13, [pc, #156]	; 80088d8 <__ieee754_asinf+0x1a4>
 800883c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008840:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80088dc <__ieee754_asinf+0x1a8>
 8008844:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008848:	eddf 6a25 	vldr	s13, [pc, #148]	; 80088e0 <__ieee754_asinf+0x1ac>
 800884c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008850:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80088d4 <__ieee754_asinf+0x1a0>
 8008854:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008858:	eddf 6a23 	vldr	s13, [pc, #140]	; 80088e8 <__ieee754_asinf+0x1b4>
 800885c:	eee7 6a86 	vfma.f32	s13, s15, s12
 8008860:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80088ec <__ieee754_asinf+0x1b8>
 8008864:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8008868:	eddf 6a21 	vldr	s13, [pc, #132]	; 80088f0 <__ieee754_asinf+0x1bc>
 800886c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008870:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008874:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8008878:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800887c:	eea0 0a27 	vfma.f32	s0, s0, s15
 8008880:	e76c      	b.n	800875c <__ieee754_asinf+0x28>
 8008882:	ee10 3a10 	vmov	r3, s0
 8008886:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800888a:	f023 030f 	bic.w	r3, r3, #15
 800888e:	ee07 3a10 	vmov	s14, r3
 8008892:	eea7 8a47 	vfms.f32	s16, s14, s14
 8008896:	ee70 7a07 	vadd.f32	s15, s0, s14
 800889a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800889e:	eec8 5a27 	vdiv.f32	s11, s16, s15
 80088a2:	eddf 7a07 	vldr	s15, [pc, #28]	; 80088c0 <__ieee754_asinf+0x18c>
 80088a6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 80088aa:	eed0 7a06 	vfnms.f32	s15, s0, s12
 80088ae:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80088fc <__ieee754_asinf+0x1c8>
 80088b2:	eeb0 6a40 	vmov.f32	s12, s0
 80088b6:	eea7 6a66 	vfms.f32	s12, s14, s13
 80088ba:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80088be:	e7aa      	b.n	8008816 <__ieee754_asinf+0xe2>
 80088c0:	b33bbd2e 	.word	0xb33bbd2e
 80088c4:	3fc90fdb 	.word	0x3fc90fdb
 80088c8:	7149f2ca 	.word	0x7149f2ca
 80088cc:	3811ef08 	.word	0x3811ef08
 80088d0:	3a4f7f04 	.word	0x3a4f7f04
 80088d4:	3e2aaaab 	.word	0x3e2aaaab
 80088d8:	bd241146 	.word	0xbd241146
 80088dc:	3e4e0aa8 	.word	0x3e4e0aa8
 80088e0:	bea6b090 	.word	0xbea6b090
 80088e4:	3d9dc62e 	.word	0x3d9dc62e
 80088e8:	bf303361 	.word	0xbf303361
 80088ec:	4001572d 	.word	0x4001572d
 80088f0:	c019d139 	.word	0xc019d139
 80088f4:	3f799999 	.word	0x3f799999
 80088f8:	333bbd2e 	.word	0x333bbd2e
 80088fc:	3f490fdb 	.word	0x3f490fdb

08008900 <__ieee754_atan2f>:
 8008900:	ee10 2a90 	vmov	r2, s1
 8008904:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8008908:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800890c:	b510      	push	{r4, lr}
 800890e:	eef0 7a40 	vmov.f32	s15, s0
 8008912:	dc06      	bgt.n	8008922 <__ieee754_atan2f+0x22>
 8008914:	ee10 0a10 	vmov	r0, s0
 8008918:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800891c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008920:	dd04      	ble.n	800892c <__ieee754_atan2f+0x2c>
 8008922:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008926:	eeb0 0a67 	vmov.f32	s0, s15
 800892a:	bd10      	pop	{r4, pc}
 800892c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8008930:	d103      	bne.n	800893a <__ieee754_atan2f+0x3a>
 8008932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008936:	f000 b887 	b.w	8008a48 <atanf>
 800893a:	1794      	asrs	r4, r2, #30
 800893c:	f004 0402 	and.w	r4, r4, #2
 8008940:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008944:	b943      	cbnz	r3, 8008958 <__ieee754_atan2f+0x58>
 8008946:	2c02      	cmp	r4, #2
 8008948:	d05e      	beq.n	8008a08 <__ieee754_atan2f+0x108>
 800894a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008a1c <__ieee754_atan2f+0x11c>
 800894e:	2c03      	cmp	r4, #3
 8008950:	bf08      	it	eq
 8008952:	eef0 7a47 	vmoveq.f32	s15, s14
 8008956:	e7e6      	b.n	8008926 <__ieee754_atan2f+0x26>
 8008958:	b941      	cbnz	r1, 800896c <__ieee754_atan2f+0x6c>
 800895a:	eddf 7a31 	vldr	s15, [pc, #196]	; 8008a20 <__ieee754_atan2f+0x120>
 800895e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8008a24 <__ieee754_atan2f+0x124>
 8008962:	2800      	cmp	r0, #0
 8008964:	bfb8      	it	lt
 8008966:	eef0 7a40 	vmovlt.f32	s15, s0
 800896a:	e7dc      	b.n	8008926 <__ieee754_atan2f+0x26>
 800896c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008970:	d110      	bne.n	8008994 <__ieee754_atan2f+0x94>
 8008972:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008976:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800897a:	d107      	bne.n	800898c <__ieee754_atan2f+0x8c>
 800897c:	2c02      	cmp	r4, #2
 800897e:	d846      	bhi.n	8008a0e <__ieee754_atan2f+0x10e>
 8008980:	4b29      	ldr	r3, [pc, #164]	; (8008a28 <__ieee754_atan2f+0x128>)
 8008982:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008986:	edd4 7a00 	vldr	s15, [r4]
 800898a:	e7cc      	b.n	8008926 <__ieee754_atan2f+0x26>
 800898c:	2c02      	cmp	r4, #2
 800898e:	d841      	bhi.n	8008a14 <__ieee754_atan2f+0x114>
 8008990:	4b26      	ldr	r3, [pc, #152]	; (8008a2c <__ieee754_atan2f+0x12c>)
 8008992:	e7f6      	b.n	8008982 <__ieee754_atan2f+0x82>
 8008994:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008998:	d0df      	beq.n	800895a <__ieee754_atan2f+0x5a>
 800899a:	1a5b      	subs	r3, r3, r1
 800899c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80089a0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80089a4:	da1a      	bge.n	80089dc <__ieee754_atan2f+0xdc>
 80089a6:	2a00      	cmp	r2, #0
 80089a8:	da01      	bge.n	80089ae <__ieee754_atan2f+0xae>
 80089aa:	313c      	adds	r1, #60	; 0x3c
 80089ac:	db19      	blt.n	80089e2 <__ieee754_atan2f+0xe2>
 80089ae:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80089b2:	f000 f91d 	bl	8008bf0 <fabsf>
 80089b6:	f000 f847 	bl	8008a48 <atanf>
 80089ba:	eef0 7a40 	vmov.f32	s15, s0
 80089be:	2c01      	cmp	r4, #1
 80089c0:	d012      	beq.n	80089e8 <__ieee754_atan2f+0xe8>
 80089c2:	2c02      	cmp	r4, #2
 80089c4:	d017      	beq.n	80089f6 <__ieee754_atan2f+0xf6>
 80089c6:	2c00      	cmp	r4, #0
 80089c8:	d0ad      	beq.n	8008926 <__ieee754_atan2f+0x26>
 80089ca:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008a30 <__ieee754_atan2f+0x130>
 80089ce:	ee77 7a80 	vadd.f32	s15, s15, s0
 80089d2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8008a34 <__ieee754_atan2f+0x134>
 80089d6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80089da:	e7a4      	b.n	8008926 <__ieee754_atan2f+0x26>
 80089dc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8008a20 <__ieee754_atan2f+0x120>
 80089e0:	e7ed      	b.n	80089be <__ieee754_atan2f+0xbe>
 80089e2:	eddf 7a15 	vldr	s15, [pc, #84]	; 8008a38 <__ieee754_atan2f+0x138>
 80089e6:	e7ea      	b.n	80089be <__ieee754_atan2f+0xbe>
 80089e8:	ee17 3a90 	vmov	r3, s15
 80089ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80089f0:	ee07 3a90 	vmov	s15, r3
 80089f4:	e797      	b.n	8008926 <__ieee754_atan2f+0x26>
 80089f6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008a30 <__ieee754_atan2f+0x130>
 80089fa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80089fe:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8008a34 <__ieee754_atan2f+0x134>
 8008a02:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008a06:	e78e      	b.n	8008926 <__ieee754_atan2f+0x26>
 8008a08:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8008a34 <__ieee754_atan2f+0x134>
 8008a0c:	e78b      	b.n	8008926 <__ieee754_atan2f+0x26>
 8008a0e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8008a3c <__ieee754_atan2f+0x13c>
 8008a12:	e788      	b.n	8008926 <__ieee754_atan2f+0x26>
 8008a14:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008a38 <__ieee754_atan2f+0x138>
 8008a18:	e785      	b.n	8008926 <__ieee754_atan2f+0x26>
 8008a1a:	bf00      	nop
 8008a1c:	c0490fdb 	.word	0xc0490fdb
 8008a20:	3fc90fdb 	.word	0x3fc90fdb
 8008a24:	bfc90fdb 	.word	0xbfc90fdb
 8008a28:	080090b4 	.word	0x080090b4
 8008a2c:	080090c0 	.word	0x080090c0
 8008a30:	33bbbd2e 	.word	0x33bbbd2e
 8008a34:	40490fdb 	.word	0x40490fdb
 8008a38:	00000000 	.word	0x00000000
 8008a3c:	3f490fdb 	.word	0x3f490fdb

08008a40 <__ieee754_sqrtf>:
 8008a40:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008a44:	4770      	bx	lr
	...

08008a48 <atanf>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	ee10 5a10 	vmov	r5, s0
 8008a4e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008a52:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8008a56:	eef0 7a40 	vmov.f32	s15, s0
 8008a5a:	db10      	blt.n	8008a7e <atanf+0x36>
 8008a5c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008a60:	dd04      	ble.n	8008a6c <atanf+0x24>
 8008a62:	ee70 7a00 	vadd.f32	s15, s0, s0
 8008a66:	eeb0 0a67 	vmov.f32	s0, s15
 8008a6a:	bd38      	pop	{r3, r4, r5, pc}
 8008a6c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8008ba4 <atanf+0x15c>
 8008a70:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8008ba8 <atanf+0x160>
 8008a74:	2d00      	cmp	r5, #0
 8008a76:	bfd8      	it	le
 8008a78:	eef0 7a40 	vmovle.f32	s15, s0
 8008a7c:	e7f3      	b.n	8008a66 <atanf+0x1e>
 8008a7e:	4b4b      	ldr	r3, [pc, #300]	; (8008bac <atanf+0x164>)
 8008a80:	429c      	cmp	r4, r3
 8008a82:	dc10      	bgt.n	8008aa6 <atanf+0x5e>
 8008a84:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8008a88:	da0a      	bge.n	8008aa0 <atanf+0x58>
 8008a8a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008bb0 <atanf+0x168>
 8008a8e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8008a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a96:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8008a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a9e:	dce2      	bgt.n	8008a66 <atanf+0x1e>
 8008aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008aa4:	e013      	b.n	8008ace <atanf+0x86>
 8008aa6:	f000 f8a3 	bl	8008bf0 <fabsf>
 8008aaa:	4b42      	ldr	r3, [pc, #264]	; (8008bb4 <atanf+0x16c>)
 8008aac:	429c      	cmp	r4, r3
 8008aae:	dc4f      	bgt.n	8008b50 <atanf+0x108>
 8008ab0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008ab4:	429c      	cmp	r4, r3
 8008ab6:	dc41      	bgt.n	8008b3c <atanf+0xf4>
 8008ab8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8008abc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008ac0:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008aca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008ace:	1c5a      	adds	r2, r3, #1
 8008ad0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8008ad4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8008bb8 <atanf+0x170>
 8008ad8:	eddf 5a38 	vldr	s11, [pc, #224]	; 8008bbc <atanf+0x174>
 8008adc:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8008bc0 <atanf+0x178>
 8008ae0:	ee66 6a06 	vmul.f32	s13, s12, s12
 8008ae4:	eee6 5a87 	vfma.f32	s11, s13, s14
 8008ae8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008bc4 <atanf+0x17c>
 8008aec:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008af0:	eddf 5a35 	vldr	s11, [pc, #212]	; 8008bc8 <atanf+0x180>
 8008af4:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008af8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008bcc <atanf+0x184>
 8008afc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008b00:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008bd0 <atanf+0x188>
 8008b04:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008b08:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008bd4 <atanf+0x18c>
 8008b0c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008b10:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008bd8 <atanf+0x190>
 8008b14:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008b18:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8008bdc <atanf+0x194>
 8008b1c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008b20:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008be0 <atanf+0x198>
 8008b24:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008b28:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008b2c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008b30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008b34:	d121      	bne.n	8008b7a <atanf+0x132>
 8008b36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b3a:	e794      	b.n	8008a66 <atanf+0x1e>
 8008b3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008b40:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008b44:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008b48:	2301      	movs	r3, #1
 8008b4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008b4e:	e7be      	b.n	8008ace <atanf+0x86>
 8008b50:	4b24      	ldr	r3, [pc, #144]	; (8008be4 <atanf+0x19c>)
 8008b52:	429c      	cmp	r4, r3
 8008b54:	dc0b      	bgt.n	8008b6e <atanf+0x126>
 8008b56:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8008b5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b5e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008b62:	2302      	movs	r3, #2
 8008b64:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b6c:	e7af      	b.n	8008ace <atanf+0x86>
 8008b6e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008b72:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008b76:	2303      	movs	r3, #3
 8008b78:	e7a9      	b.n	8008ace <atanf+0x86>
 8008b7a:	4a1b      	ldr	r2, [pc, #108]	; (8008be8 <atanf+0x1a0>)
 8008b7c:	491b      	ldr	r1, [pc, #108]	; (8008bec <atanf+0x1a4>)
 8008b7e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008b82:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008b86:	ed93 0a00 	vldr	s0, [r3]
 8008b8a:	ee37 7a40 	vsub.f32	s14, s14, s0
 8008b8e:	ed92 0a00 	vldr	s0, [r2]
 8008b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b96:	2d00      	cmp	r5, #0
 8008b98:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008b9c:	bfb8      	it	lt
 8008b9e:	eef1 7a67 	vneglt.f32	s15, s15
 8008ba2:	e760      	b.n	8008a66 <atanf+0x1e>
 8008ba4:	3fc90fdb 	.word	0x3fc90fdb
 8008ba8:	bfc90fdb 	.word	0xbfc90fdb
 8008bac:	3edfffff 	.word	0x3edfffff
 8008bb0:	7149f2ca 	.word	0x7149f2ca
 8008bb4:	3f97ffff 	.word	0x3f97ffff
 8008bb8:	3c8569d7 	.word	0x3c8569d7
 8008bbc:	3d4bda59 	.word	0x3d4bda59
 8008bc0:	bd6ef16b 	.word	0xbd6ef16b
 8008bc4:	3d886b35 	.word	0x3d886b35
 8008bc8:	3dba2e6e 	.word	0x3dba2e6e
 8008bcc:	3e124925 	.word	0x3e124925
 8008bd0:	3eaaaaab 	.word	0x3eaaaaab
 8008bd4:	bd15a221 	.word	0xbd15a221
 8008bd8:	bd9d8795 	.word	0xbd9d8795
 8008bdc:	bde38e38 	.word	0xbde38e38
 8008be0:	be4ccccd 	.word	0xbe4ccccd
 8008be4:	401bffff 	.word	0x401bffff
 8008be8:	080090cc 	.word	0x080090cc
 8008bec:	080090dc 	.word	0x080090dc

08008bf0 <fabsf>:
 8008bf0:	ee10 3a10 	vmov	r3, s0
 8008bf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008bf8:	ee00 3a10 	vmov	s0, r3
 8008bfc:	4770      	bx	lr
	...

08008c00 <nanf>:
 8008c00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008c08 <nanf+0x8>
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	7fc00000 	.word	0x7fc00000

08008c0c <_init>:
 8008c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0e:	bf00      	nop
 8008c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c12:	bc08      	pop	{r3}
 8008c14:	469e      	mov	lr, r3
 8008c16:	4770      	bx	lr

08008c18 <_fini>:
 8008c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1a:	bf00      	nop
 8008c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c1e:	bc08      	pop	{r3}
 8008c20:	469e      	mov	lr, r3
 8008c22:	4770      	bx	lr
