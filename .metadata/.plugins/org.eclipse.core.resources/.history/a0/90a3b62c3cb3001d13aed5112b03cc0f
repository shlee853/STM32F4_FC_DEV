

#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include "cli.h"


//////////////////////////////////////////////////
// VARIABLE										//
//////////////////////////////////////////////////

TERMINAL_BASE terminal={.NAME="TEST",};


TERMINAL_COMMAND KEY_LEFT	=	{{0x1B,0x5B,0x44},3,{0x1B,0x5B,0x44},3};
TERMINAL_COMMAND KEY_RIGHT	=	{{0x1B,0x5B,0x43},3,{0x1B,0x5B,0x43},3};
TERMINAL_COMMAND KEY_UP		=	{{0x1B,0x5B,0x41},3,{0x1B,0x5B,0x41},3};
TERMINAL_COMMAND KEY_DOWN	=	{{0x1B,0x5B,0x42},3,{0x1B,0x5B,0x42},3};

TERMINAL_COMMAND KEY_ENTER			= {{0x0D, 0x0A}, 1, {0x0A ,0x0D}, 2};		// 0x0A or 0x0D
TERMINAL_COMMAND KEY_DELETE			= {{0x1B, 0x5B, 0x33, 0x7E}, 4, {0x1B,0x5B,0x50}, 3};
TERMINAL_COMMAND KEY_BACK_SPACE		= {{0x7F}, 1, {0x08, 0x1B,0x5B,0x50}, 1};
TERMINAL_COMMAND KEY_TAB			= {{0x09}, 1, {0x00}, 0};

TERMINAL_COMMAND KEY_INSERT			= {{0x1B, 0x5B, 0x32, 0x7E}, 4, {0x00},0};

TERMINAL_COMMAND KEY_CTRL_C			= {{0x03}, 1, {0x00}, 0};


TERMINAL_COMMAND INSERT_MODE		= {{0x00}, 0, {0x1B, 0x5B, 0x34, 0x68}, 4};
TERMINAL_COMMAND REPLACE_MODE		= {{0x00}, 0, {0x1B, 0x5B, 0x34, 0x6C}, 4};
TERMINAL_COMMAND WRAPAROUND_ON		= {{0x00}, 0, {0x1B,0x5B,0x3F, 0x37, 0x68}, 5};

TERMINAL_COMMAND CLEAR_SCREEN		= {{0x00}, 0, {0x1B,0x5B, 0x32, 0x4A}, 4};
TERMINAL_COMMAND CURSOR_HOME		= {{0x00}, 0, {0x1B,0x5B, 0x66}, 3};



CLI_BLOCK* CLI_BLOCK_HEAD = NULL;
uint8_t cli_arg_buffer[CLI_ARG_BUFFER_SIZE];
uint32_t cli_arg_buffer_index;



//////////////////////////////////////////////////
// FUNCTION										//
//////////////////////////////////////////////////



void CLI_INIT(CLI_BASE* cli){
	cli->cursor_position = 0;
	cli->buffer_length = 0;
	cli->is_insert = CLI_NOINSERT;
}

static inline void CLI_TAB(CLI_BASE* cli){

}

void CLI_GET_ARG(uint8_t* dest, uint8_t arg_index){
	uint32_t arg_index_count=0;
	uint32_t arg_buffer_index=0;
	uint32_t dest_buffer_index=0;
	dest[0]=0x00;

	while(cli_arg_buffer_index > arg_buffer_index){
		if(arg_index_count == arg_index){
			if(cli_arg_buffer[arg_buffer_index] == 0xFF){
				dest[dest_buffer_index]=0x00;
				break;
			}
			else{
				dest[dest_buffer_index]=cli_arg_buffer[arg_buffer_index];
				dest_buffer_index++;
				arg_buffer_index++;
			}
		}
		else{
			if(cli_arg_buffer[arg_buffer_index] == 0xFF){
				arg_index_count++;
			}
			arg_buffer_index++;
		}
	}
}

void CLI_BLOCK_CONTROL(CLI_BASE * cli){
	uint8_t command_run=1;
	uint8_t cli_part_index;
	uint8_t cli_part_space;
	uint8_t cli_block_part_index;
	uint8_t cli_block_part_space;
	uint32_t cli_buffer_index;
	uint32_t cli_block_buffer_index;
	CLI_BLOCK* cli_block = CLI_BLOCK_HEAD;

	do{
		cli_block = cli_block->next;
		cli_buffer_index = 0;
		cli_block_buffer_index = 0;
		command_run = 1;
		cli_part_index = 0;
		cli_block_part_index = 0;
		cli_part_space = 1;
		cli_block_part_space = 1;
		cli_arg_buffer_index=0;

		while( (cli->buffer_length + 1) > cli_buffer_index){

			if(cli->buf[cli_buffer_index] == 0x00){
				if(cli_block->command_buf[cli_block_buffer_index] != 0){
					command_run = 0;
				}
				else if(cli_part_index != cli_block_part_index){
					command_run = 0;
				}
				else{
					command_run = 1;
				}
				break;
			}

			if(cli->buf[cli_buffer_index] == ' '){
				cli_buffer_index++;
				cli_part_space = 1;
				continue;
			}
			else if(cli_block->command_buf[cli_block_buffer_index] == ' '){
				cli_block_buffer_index++;
				cli_block_part_space = 1;
				continue;
			}

			if(cli->buf[cli_buffer_index] == cli_block->command_buf[cli_block_buffer_index]){
				if(cli_part_space == 1){
					cli_part_space = 0;
					cli_part_index++;
				}
				if(cli_block_part_space == 1){
					cli_block_part_space = 0;
					cli_block_part_index++;
				}
				cli_buffer_index++;
				cli_block_buffer_index++;
				continue;
			}
			else{
				if(cli_part_space == 1){
					cli_part_space = 0;
					cli_part_index++;
				}
				if(cli_block_part_space == 1){
					cli_block_part_space = 0;
					cli_block_part_index++;
				}
				if(cli_block->command_buf[cli_block_buffer_index] == 'V' && cli_block->command_buf[cli_block_buffer_index + 1] == 'V' && cli_part_index == cli_block_part_index){
					cli_block_buffer_index+=2;
					while(1){
						if(cli->buf[cli_buffer_index] == ' ' || cli->buf[cli_buffer_index] == 0x00){
							cli_arg_buffer[cli_arg_buffer_index] = 0xFF;
							cli_arg_buffer_index+=1;
							break;
						}
						cli_arg_buffer[cli_arg_buffer_index] = cli->buf[cli_buffer_index];
						cli_arg_buffer_index++;
						cli_buffer_index++;
					}
					continue;
				}
				else{
					command_run = 0;
					break;
				}
			}
		}

		if(command_run == 1){
			cli_block->cli_function();
			break;
		}
	}while(cli_block != CLI_BLOCK_HEAD);

	if(command_run == 0 && cli_part_index != 0){
		PRINTF("NO COMMAND MATCHED\r\n");
	}
}


static inline uint32_t TERMINAL_IDLE_IS_ACTIVE_FLAG(USART_TypeDef* UART){
	return LL_USART_IsActiveFlag_IDLE(UART);
}

static inline void TERMINAL_IDLE_CLEAR_FLAG(USART_TypeDef* UART){
	LL_USART_ClearFlag_IDLE(UART);
}

static inline uint32_t TERMINAL_RX_IS_ACTIVE_FLAG(USART_TypeDef* UART){
	return LL_USART_IsActiveFlag_RXNE(UART);
}

static inline void TERMINAL_RX_CLEAR_FLAG(USART_TypeDef* UART){
	LL_USART_ClearFlag_RXNE(UART);
}

static inline void TERMINAL_INTERRUPT_INIT(USART_TypeDef* UART){
	LL_USART_EnableIT_RXNE(UART);
	LL_USART_EnableIT_IDLE(UART);
}

static inline uint8_t TERMINAL_RECEIVEDATA(USART_TypeDef* UART){
	return LL_USART_ReceiveData8(UART);
}


void TERMINAL_INIT(USART_TypeDef* UART, TERMINAL_BASE* term, char* init_message){
	term->UART = UART;
	TERMINAL_INTERRUPT_INIT(UART);

	term->term_key.length=0;
	term->term_key.is_pressed=KEY_NONE;

	PRINTF("%s%s",CLEAR_SCREEN.command,CURSOR_HOME.command);
	PRINTF("%s",INSERT_MODE.command);

	term->insert_mode = TERM_INSERT_MODE;
	CLI_INIT(&(term->cli));

	if(init_message != NULL)
		PRINTF("%s\r\n",init_message);
	PRINTF("%s > ",term->NAME);
}


void TERMINAL_UART_IRQ(TERMINAL_BASE* term){
	if(TERMINAL_RX_IS_ACTIVE_FLAG(term->UART)){
			TERMINAL_RX_CLEAR_FLAG(term->UART);
			term->term_key.buf[term->term_key.length]=TERMINAL_RECEIVEDATA(term->UART);
			term->term_key.length++;
	}
	if(TERMINAL_IDLE_IS_ACTIVE_FLAG(term->UART)){
		TERMINAL_IDLE_CLEAR_FLAG(term->UART);
		term->term_key.is_pressed = KEY_PRESSED;
	}
}

void TERMINAL_CONTROL_CLI(TERMINAL_BASE* term){
	uint8_t enter_pressed=0;
	uint8_t exit_pressed=0;
	uint8_t temp_position;

	if(term->term_key.is_pressed == KEY_PRESSED){

		term->term_key.is_pressed = KEY_NONE;

		switch(term->term_key.length){
			case 1:
				if(term->term_key.buf[0] == KEY_ENTER.key[0] || term->term_key.buf[0] == KEY_ENTER.key[1] ){
					PRINTF("%s",KEY_ENTER.command);
					enter_pressed = 1;
					exit_pressed = 1;
				}
				else if(term->term_key.buf[0] == KEY_BACK_SPACE.key[0]){
					if(term->cli.cursor_position !=0){
						PRINTF("%s",KEY_BACK_SPACE.command);
						term->cli.cursor_position--;

						temp_position = term->cli.cursor_position;
						while(temp_position != term->cli.buffer_length){
							term->cli.buf[temp_position] = term->cli.buf[temp_position + 1];
							temp_position++;
						}
						term->cli.buffer_length--;
					}
				}
				else if(term->term_key.buf[0] == KEY_TAB.key[0]){
					CLI_TAB(&(term->cli));
				}
				else if(term->term_key.buf[0] == KEY_CTRL_C.key[0]){
					exit_pressed = 1;
				}
				else{
					PRINTF("%c",term->term_key.buf[0]);

					if(term->insert_mode == TERM_REPLACE_MODE && (term->cli.cursor_position<term->cli.buffer_length)){
						term->cli.buf[term->cli.cursor_position] = term->term_key.buf[0];
						term->cli.cursor_position++;
					}
					else{
						if(term->insert_mode == TERM_INSERT_MODE && term->cli.cursor_position < term->cli.buffer_length){
							temp_position = term->cli.buffer_length;
							while(term->cli.cursor_position != temp_position){
								term->cli.buf[temp_position] = term->cli.buf[temp_position - 1];
								temp_position--;
							}
						}
						term->cli.buf[term->cli.cursor_position] = term->term_key.buf[0];
						term->cli.cursor_position++;
						term->cli.buffer_length++;
					}
				}

				break;
			case 2:

				break;
			case 3:
				if(strncmp(term->term_key.buf,KEY_LEFT.key,3) == 0){
					if(term->cli.cursor_position != 0){
						PRINTF("%s",KEY_LEFT.command);
						term->cli.cursor_position--;
					}
				}
				else if(strncmp(term->term_key.buf,KEY_RIGHT.key,3) == 0){
					if(term->cli.cursor_position < term->cli.buffer_length){
						PRINTF("%s",KEY_RIGHT.command);
						term->cli.cursor_position++;
					}
				}
				else if(strncmp(term->term_key.buf,KEY_UP.key,3) == 0){
					//PRINTF("%s",KEY_UP.command);
				}
				else if(strncmp(term->term_key.buf,KEY_DOWN.key,3) == 0){
					//PRINTF("%s",KEY_DOWN.command);
				}

				break;
			case 4:
				if(strncmp(term->term_key.buf, KEY_DELETE.key,4)==0){
					if(term->cli.cursor_position < term->cli.buffer_length){
						PRINTF("%s",KEY_DELETE.command);
						temp_position = term->cli.cursor_position;
						while(temp_position != term->cli.buffer_length){
							term->cli.buf[temp_position] = term->cli.buf[temp_position + 1];
							temp_position++;
						}
						term->cli.buffer_length--;
					}
				}
				else if(strncmp(term->term_key.buf, KEY_INSERT.key,4)==0){
					if(term->insert_mode == TERM_REPLACE_MODE){
						PRINTF("%s",INSERT_MODE.command);
						term->insert_mode = TERM_INSERT_MODE;
					}
					else{
						PRINTF("%s",REPLACE_MODE.command);
						term->insert_mode = TERM_REPLACE_MODE;
					}
				}
				break;
			case 5:
				break;
		}


		term->term_key.length = 0;
	}

	if(exit_pressed == 1){
		//CLI_CONTROL_FUNCTION
		if(enter_pressed == 1){
			term->cli.buf[term->cli.buffer_length]=0;
			CLI_BLOCK_CONTROL(&(term->cli));

			/////////////////s test
			PRINTF("%d %d :%s",term->cli.cursor_position, term->cli.buffer_length,term->cli.buf);
			/////////////////e test


		}
		CLI_INIT(&(term->cli));
		PRINTF("%s%s > ",KEY_ENTER.command, term->NAME);
	}
}


