#ifndef ___CLI_H___
#define ___CLI_H___

#include <stdint.h>
#include <stdlib.h>
#include "main.h"
//////////////////////////////////////////////////
// DEFINE										//
//////////////////////////////////////////////////

#define TERMINAL_BUFFER_SIZE	256
#define TERMINAL_KEY_SIZE		10


#define COMMAND_BUFFER_SIZE		256


//////////////////////////////////////////////////
// STRUCT										//
//////////////////////////////////////////////////

enum{
	CLI_NOINSERT,
	CLI_INSERT
}_cli_is_insert;

enum{
	CLI_NODELETE,
	CLI_DELETE
}_cli_is_delete;

enum{
	TERM_REPLACE_MODE,
	TERM_INSERT_MODE
}_terminal_insert_mode;

typedef struct {
	uint8_t buf[TERMINAL_BUFFER_SIZE];
	uint8_t cursor_position;
	uint8_t buffer_length;
	uint8_t is_insert;
}CLI_BASE;

enum{
	KEY_NONE,
	KEY_PRESSED
}pressed;

typedef struct{
	uint8_t buf[TERMINAL_KEY_SIZE];
	uint8_t length;
	uint8_t is_pressed;
}TERMINAL_KEY;

typedef struct {
	USART_TypeDef* UART;
	uint8_t NAME[20];
	uint8_t insert_mode;
	TERMINAL_KEY term_key;
	CLI_BASE cli;
}TERMINAL_BASE;


typedef struct{
	uint8_t key[10];
	uint8_t key_length;
	uint8_t command[10];
	uint8_t command_length;
}TERMINAL_COMMAND;



typedef struct _CLI_BLOCK{
	struct _CLI_BLOCK* next;
	void (*cli_function)(void);
	uint8_t command_buf[COMMAND_BUFFER_SIZE];
	uint8_t command_part;
}CLI_BLOCK;






//////////////////////////////////////////////////
// EXTERN VARIABLE								//
//////////////////////////////////////////////////


extern TERMINAL_BASE terminal;



//////////////////////////////////////////////////
// FUNCTION										//
//////////////////////////////////////////////////

void TERMINAL_UART_IRQ(TERMINAL_BASE* term);
void TERMINAL_INIT(USART_TypeDef*UART,TERMINAL_BASE* term, char* init_message);



void TERMINAL_CONTROL_CLI(TERMINAL_BASE* term);
void CLI_BLOCK_INIT();
void CLI_GET_ARG(uint8_t* dest, uint8_t arg_index);

//////////////////////////////////////////////////
// MACRO										//
//////////////////////////////////////////////////

#define CLI_BLOCK_HEAD cli_block_head
#define CLI_ARG_BUFFER_SIZE 256
extern CLI_BLOCK* CLI_BLOCK_HEAD;
extern uint8_t cli_arg_buffer[CLI_ARG_BUFFER_SIZE];

#define CLI_BLOCK_ADD(head, block)														\
		do{																				\
			if(head == NULL){															\
				(head)=(block);															\
				(head)->next=(head);													\
			}																			\
			else{																		\
				(block)->next = (head)->next;											\
				(head)->next = (block);													\
			}																			\
		}while(0)



#define DEF_CLI(function, command) 												\
		CLI_BLOCK cli_##function##_block = {.next = NULL,						\
									.cli_function = NULL,						\
									.command_buf = command,						\
									.command_part = 0							\
									};											\
		void cli_##function(void)


#define ADD_CLI(function, command)													\
		do{																			\
			cli_##function##_block.cli_function = cli_##function;					\
			CLI_BLOCK_ADD(CLI_BLOCK_HEAD,&cli_##function##_block);					\
		}while(0)





#endif




