
#include "GPS_Receiver.h"

void GPS_DMA_init(GPS_RAW_MESSAGE* gps_raw_message, USART_TypeDef* UART,DMA_TypeDef* DMA,uint32_t DMA_STREAM)
{


	//DMA, INTERRUPT SETTINGS
	LL_DMA_SetMemoryAddress(DMA,DMA_STREAM,(uint32_t)(gps_raw_message->gps_raw_buf));
	LL_DMA_SetPeriphAddress(DMA,DMA_STREAM,(uint32_t)&(UART->DR));
	LL_DMA_SetDataLength(DMA,DMA_STREAM,GPS_MESSAGE_LENGTH+1);
	DMA->LIFCR |= DMA_LIFCR_CTCIF1|DMA_LIFCR_CHTIF1|DMA_LIFCR_CTEIF1|DMA_LIFCR_CDMEIF1|DMA_LIFCR_CFEIF1;	// 0x00000F40 인터럽트 클리어

	LL_DMA_EnableStream(DMA,DMA_STREAM);
	LL_USART_EnableDMAReq_RX(UART);
	LL_USART_EnableIT_IDLE(UART);
//    LL_DMA_EnableIT_HT(DMA1, LL_DMA_STREAM_1);
//    LL_DMA_EnableIT_TC(DMA1, LL_DMA_STREAM_1);
}



void GPS_Parsing(GPS_RAW_MESSAGE* message, GPS_DATA* gps_data, int* recv_cnt, int* err_cnt)
{
	uint8_t* ptr,*gps_ptr=message->gps_raw_buf;
	int32_t temp;
	unsigned char result;
	if(gps_ptr[0]==0xB5 && gps_ptr[1]==0x62){
		ptr=gps_ptr+6+4;
		gps_data->lon = (ptr[3] << 24) + (ptr[2] << 16) + (ptr[1] << 8) + (ptr[0]);
		gps_data->longitude_deg=gps_data->lon/10000000;
		temp=gps_data->lon%10000000;
		gps_data->longitude_min=(temp*60)/10000000;
		temp=(temp*60)%10000000;
		gps_data->longitude_sec=((float)(temp*60))/10000000;

		if(gps_data->longitude_deg<124 || gps_data->longitude_deg>132){
			gps_data->sec_lon=0;
		}
		else{
			gps_data->sec_lon = (float)(gps_data->longitude_deg - LONGITUDE_OFFSET) * 3600 + (float)gps_data->longitude_min * 60 + gps_data->longitude_sec;
		}

		ptr += 4;
		gps_data->lat = (ptr[3] << 24) + (ptr[2] << 16) + (ptr[1] << 8) + (ptr[0]);
		gps_data->latitude_deg=gps_data->lat/10000000;
		temp=gps_data->lat%10000000;
		gps_data->latitude_min=(temp*60)/10000000;
		temp=(temp*60)%10000000;
		gps_data->latitude_sec=((float)(temp*60))/10000000;

		if(gps_data->latitude_deg<33 || gps_data->latitude_deg>43){
			gps_data->sec_lat=0;
		}
		else{
			gps_data->sec_lat = (float)(gps_data->latitude_deg - LATITUDE_OFFSET) * 3600 + (float)gps_data->latitude_min * 60 + gps_data->latitude_sec;
		}
		gps_ptr+=36;

		recv_cnt[0]++;
	}

	else
	{
		err_cnt[0]++;
	}
}



