#ifndef _QUATERNION_H
#define _QUATERNION_H

#include "main.h"
#include <math.h>

#define _180_DIV_PI 		57.295779515f // = 180 / PI
#define PI 					3.1415926535897932f
#define RAD2DEG             57.2957914f
#define DEG2RAD             0.017453289f
#define GYRO_DEGFSEL3 ‭    	0.06103515625f                	// 0.06103515625‬  = (4000/65536)
#define ACC_DEGFSEL3 ‭     	0.00048828125f                	// 0.000488281  = (32/65536)

#define ALPHA               0.98f //0.996                     // complementary filter coefficient
#define BETA                0       // 0.9                       // complementary filter coefficient
#define CAL_COUNTER         1000

#define twoKpDef  			(2.0f * 0.5f) // 2 * proportional gain
#define twoKiDef  			(2.0f * 0.0f) // 2 * integral gain



extern float Roll;
extern float Pitch;
extern float Yaw;
extern float q[4];            // vector to hold quaternion

void Quaternion_Update(float* q);
float invSqrt(float x);

#endif
