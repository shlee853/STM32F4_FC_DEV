/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "ICM20602.h"
#include "Quaternion.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
	for(int i=0;i<len;i++)
	{
		LL_USART_TransmitData8(USART6, *(p+i));
		usDelay(100);	// 문자 1개 출력당 약 100us 소요, Float, int형 차이 없음
	}
	return len;
}


/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
extern uint8_t flag_INT_USART6;		// UART6 인터럽트 플래그 변수
extern uint8_t rxd;					// UART 수신데이터 버퍼
extern unsigned int TimingDelay;
unsigned long  t1=0;
unsigned long  t2=0;
float Roll;
float Pitch;
float Yaw;
float q[4];            // vector to hold quaternion
float gx_cal=0, gy_cal=0, gz_cal=0;	ax_cal=0; ay_cal=0;

float GYROX_RATE, GYROY_RATE, GYROZ_RATE;
float gx_rate,  gy_rate, gz_rate;
float ACCX_RATE, ACCY_RATE, ACCZ_RATE;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  LL_InitTick(168000000, 1000000U);		//	Clock을 1us단위로 조정, 1ms함수 사용할 수 없음
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART6_UART_Init();
  MX_SPI1_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */

  LL_TIM_EnableCounter(TIM3);
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);

  TIM3->PSC = 2000;
  usDelay(100000);
  TIM3->PSC = 1500;
  usDelay(100000);
  TIM3->PSC = 1000;
  usDelay(100000);

  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH1);

  LL_USART_EnableIT_RXNE(USART6);	// UART6 인터럽트 활성화
  ICM20602_Initialization();

  q[0] = 1.0f;
  q[1] = 0.0f;
  q[2] = 0.0f;
  q[3] = 0.0f;

  // 시간측정을 위한 레지스터 초기화 값
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  DWT->CYCCNT = 0;
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;



  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  //	  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
  //	  usDelay(1000000);
  //	  LL_USART_TransmitData8(USART6,'B');

	  if(flag_INT_USART6 == 1){
		  flag_INT_USART6 =0;
		  LL_USART_TransmitData8(USART6,rxd); // 호스트로부터 수신한 데이터를 그대로 다시 보냄
		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);

	  }

	  if(ICM20602_DataReady() == 1)
	  {
		  t1 = DWT->CYCCNT;
		  LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_5);
		  t2 = DWT->CYCCNT;
//		  ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
		  ICM20602_Get6AxisRawData(&ICM20602.acc_x_raw, &ICM20602.gyro_x_raw);	//	39.11us
		  GYROX_RATE = (ICM20602.gyro_x_raw - gx_cal) * 0.06103515625 * 0.017453289;
		  GYROY_RATE = (ICM20602.gyro_y_raw - gy_cal) * 0.06103515625 * 0.017453289;
		  GYROZ_RATE = (ICM20602.gyro_z_raw - gz_cal) * 0.06103515625 * 0.017453289;

		  ACCX_RATE = (ICM20602.acc_x_raw - ax_cal) * 0.00048828125;
		  ACCY_RATE = (ICM20602.acc_y_raw - ay_cal) * 0.00048828125;
		  ACCZ_RATE = (ICM20602.acc_z_raw) * 0.00048828125;

//		  MadgwickQuaternionUpdate(ACCX_RATE,ACCY_RATE,ACCZ_RATE,GYROX_RATE,GYROY_RATE,GYROZ_RATE);	//57us
		  MahonyAHRSupdateIMU(GYROX_RATE,GYROY_RATE,GYROZ_RATE,ACCX_RATE,ACCY_RATE,ACCZ_RATE);		//42us
		  getRollPitchYaw(&q[0]);	//130us


//		  printf("%f,%f,%f\n", Roll, Pitch, Yaw);
//		  printf("%f,%f,%f\n", q[0], q[1], q[2]);


//		  printf("%f,%f,%f\n", GYROX_RATE, GYROY_RATE, GYROZ_RATE);
//		  printf("%f,%f,%f\n", ACCX_RATE, ACCY_RATE, ACCZ_RATE);

//		  t2 = DWT->CYCCNT;
//		  printf("%f\n",((float)(t2-t1))/CLOCK_PER_USEC);
//		  t1 = DWT->CYCCNT;

	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
  LL_RCC_HSE_Enable();

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
  LL_RCC_PLL_Enable();

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
  {

  }
  LL_Init1msTick(168000000);
  LL_SetSystemCoreClock(168000000);
}

/* USER CODE BEGIN 4 */
void usDelay(unsigned int nTime)
{
	__IO unsigned int  tmp = SysTick->CTRL;
	((void)tmp);

	SysTick->VAL = 0;

	SysTick->CTRL = SysTick->CTRL | SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk; // clock source

	TimingDelay = nTime-1;

	while(TimingDelay);

	SysTick->CTRL = 0;

}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
